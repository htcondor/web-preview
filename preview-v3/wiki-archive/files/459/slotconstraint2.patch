diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index d699d03..2832319 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -87,6 +87,7 @@ public:
     int duration_phase3;
     int duration_phase4;
 
+    int unconstrained_slots;
     int total_slots;
     int trimmed_slots;
     int candidate_slots;
@@ -118,6 +119,7 @@ NegotiationCycleStats::NegotiationCycleStats():
     duration_phase2(0),
     duration_phase3(0),
     duration_phase4(0),
+    unconstrained_slots(0),
     total_slots(0),
     trimmed_slots(0),
     candidate_slots(0),
@@ -230,6 +232,7 @@ bool ResourcesInUseByUsersGroup_classad_func( const char * /*name*/,
 
 Matchmaker::
 Matchmaker ()
+   : strSlotConstraint(NULL)
 {
 	char buf[64];
 
@@ -338,6 +341,7 @@ Matchmaker::
     if (DynQuotaMachConstraint) delete DynQuotaMachConstraint;
 	if (groupQuotasHash) delete groupQuotasHash;
 	if (stashedAds) delete stashedAds;
+    if (strSlotConstraint) free(strSlotConstraint), strSlotConstraint = NULL;
 
 	int i;
 	for(i=0;i<MAX_NEGOTIATION_CYCLE_STATS;i++) {
@@ -623,18 +627,41 @@ reinitialize ()
 	preemption_req_unstable = ! (param_boolean("PREEMPTION_REQUIREMENTS_STABLE",true)) ;
 	preemption_rank_unstable = ! (param_boolean("PREEMPTION_RANK_STABLE",true)) ;
 
+    // load the constraint for slots that will be available for matchmaking.
+    // used for sharding or as an alternative to GROUP_DYNAMIC_MACH_CONSTRAINT
+    // or NEGOTIATOR_SLOT_POOLSIZE_CONSTRAINT when you DONT ever want to negotiate on 
+    // slots that don't match the constraint.
+    if (strSlotConstraint) free(strSlotConstraint);
+    strSlotConstraint = param ("NEGOTIATOR_SLOT_CONSTRAINT");
+    if (strSlotConstraint) {
+       dprintf (D_FULLDEBUG, "%s = %s\n", "NEGOTIATOR_SLOT_CONSTRAINT", 
+                strSlotConstraint);
+       // do a test parse of the constraint before we try and use it.
+       ExprTree *SlotConstraint = NULL; 
+       if (ParseClassAdRvalExpr(strSlotConstraint, SlotConstraint)) {
+          dprintf(D_ALWAYS, "Error parsing NEGOTIATOR_SLOT_CONSTRAINT expresion: %s", 
+                  strSlotConstraint);
+       }
+       delete SlotConstraint;
+    }
+
+    // load the constraint for calculating the poolsize for matchmaking
+    // used to ignore some slots for calculating the poolsize, but not
+    // for matchmaking.
+    //
 	if (DynQuotaMachConstraint) delete DynQuotaMachConstraint;
 	DynQuotaMachConstraint = NULL;
-	tmp = param("GROUP_DYNAMIC_MACH_CONSTRAINT");
+    const char * attr = "NEGOTIATOR_SLOT_POOLSIZE_CONSTRAINT";
+	tmp = param(attr);
+    if ( ! tmp) {
+       attr = "GROUP_DYNAMIC_MACH_CONSTRAINT";
+       tmp = param(attr);
+       if (tmp) dprintf(D_ALWAYS, "%s is obsolete, use NEGOTIATOR_SLOT_POOLSIZE_CONSTRAINT instead\n", attr);
+    }
 	if( tmp ) {
-        dprintf(D_FULLDEBUG, "%s = %s\n", "GROUP_DYNAMIC_MACH_CONSTRAINT",
-                tmp);
+        dprintf(D_FULLDEBUG, "%s = %s\n", attr, tmp);
 		if( ParseClassAdRvalExpr(tmp, DynQuotaMachConstraint) ) {
-			dprintf(
-                D_ALWAYS, 
-                "Error parsing GROUP_DYNAMIC_MACH_CONSTRAINT expression: %s",
-					tmp
-            );
+			dprintf(D_ALWAYS, "Error parsing %s expression: %s\n", attr, tmp);
             DynQuotaMachConstraint = NULL;
 		}
         free (tmp);
@@ -1123,16 +1150,38 @@ negotiationTime ()
 		return;
 	}
 
+
 		// allocate stat object here, now that we know we are not going
 		// to abort the cycle
 	StartNewNegotiationCycleStat();
 	negotiation_cycle_stats[0]->start_time = start_time;
 
+    // restrict slots available for matchmaking if there is a SlotConstraint
+    //
+    int cRawSlots = startdAds.MyLength();
+    int cSlots    = cRawSlots;  // number of slots that match the constraint
+
+#if 0
+    if (SlotConstraint && ! strSlotConstraint) {
+        const bool remove = true;
+        cSlots = startdAds.Count(SlotConstraint, remove);
+        if (cSlots > 0) {
+            dprintf(D_ALWAYS, "NEGOTIATOR_SLOT_CONSTRAINT reduces slot "
+                    "count from %d to %d\n", cRawSlots, cSlots);
+        } else {
+            dprintf(D_ALWAYS, "warning: 0 out of %d slots match "
+                    "NEGOTIATOR_SLOT_CONSTRAINT\n",
+                    cRawSlots);
+        }
+    }
+#endif
+
 	// Save this for future use.
 	// This _must_ come before trimming the startd ads.
-	int untrimmed_num_startds = startdAds.MyLength();
+	int untrimmed_num_startds = cSlots;
 	int numDynGroupSlots = untrimmed_num_startds;
     negotiation_cycle_stats[0]->total_slots = untrimmed_num_startds;
+    negotiation_cycle_stats[0]->unconstrained_slots = cRawSlots;
 
 	double minSlotWeight = 0;
 	double untrimmedSlotWeightTotal = sumSlotWeights(startdAds,&minSlotWeight,NULL);
@@ -1165,16 +1214,16 @@ negotiationTime ()
     // Restrict number of slots available for dynamic quotas.
     double hgq_total_quota = (accountant.UsingWeightedSlots()) ? untrimmedSlotWeightTotal : (double)numDynGroupSlots;
     if ( numDynGroupSlots && DynQuotaMachConstraint ) {
-        bool remove = param_boolean("NEGOTIATOR_STARTD_CONSTRAINT_REMOVE", false);
+        bool remove = false; //param_boolean("NEGOTIATOR_STARTD_CONSTRAINT_REMOVE", false);
         int matchedSlots = startdAds.Count(DynQuotaMachConstraint, remove);
         if ( matchedSlots ) {
-            dprintf(D_ALWAYS,"GROUP_DYNAMIC_MACH_CONSTRAINT constraint reduces machine "
+            dprintf(D_ALWAYS,"NEGOTIATOR_SLOT_POOLSIZE_CONSTRAINT constraint reduces slot "
                     "count from %d to %d\n", numDynGroupSlots, matchedSlots);
             numDynGroupSlots = matchedSlots;
             hgq_total_quota = (accountant.UsingWeightedSlots()) ? sumSlotWeights(startdAds, NULL, DynQuotaMachConstraint) : (double)matchedSlots;
         } else {
-            dprintf(D_ALWAYS, "warning: 0 out of %d machines match "
-                    "GROUP_DYNAMIC_MACH_CONSTRAINT for dynamic quotas\n",
+            dprintf(D_ALWAYS, "warning: 0 out of %d slots match "
+                    "NEGOTIATOR_SLOT_POOLSIZE_CONSTRAINT for dynamic quotas\n",
                     numDynGroupSlots);
             numDynGroupSlots = 0;
             hgq_total_quota = 0;
@@ -2558,11 +2607,25 @@ obtainAdsFromCollector (
 	MyString buffer;
 	CollectorList* collects = daemonCore->getCollectorList();
 
+    // build a query for Scheduler, Submitter and (constrained) machine ads
+    //
 	CondorQuery publicQuery(ANY_AD);
-	dprintf(D_ALWAYS, "  Getting all public ads ...\n");
-	result = collects->query (publicQuery, allAds);
+    publicQuery.addORConstraint("(MyType == \"Scheduler\") || (MyType == \"Submitter\")");
+    if (strSlotConstraint && strSlotConstraint[0]) {
+        MyString machine;
+        machine.sprintf("((MyType == \"Machine\") && (%s))", strSlotConstraint);
+        publicQuery.addORConstraint(machine.Value());
+    } else {
+        publicQuery.addORConstraint("(MyType == \"Machine\")");
+    }
+
+    CondorError errstack;
+	dprintf(D_ALWAYS, "  Getting Scheduler, Submitter and Machine ads ...\n");
+	result = collects->query (publicQuery, allAds, &errstack);
 	if( result!=Q_OK ) {
-		dprintf(D_ALWAYS, "Couldn't fetch ads: %s\n", getStrQueryResult(result));
+		dprintf(D_ALWAYS, "Couldn't fetch ads: %s\n", 
+           errstack.code() ? errstack.getFullText(false) : getStrQueryResult(result)
+           );
 		return false;
 	}
 
diff --git a/src/condor_negotiator.V6/matchmaker.h b/src/condor_negotiator.V6/matchmaker.h
index 7d8635f..7fe55f7 100644
--- a/src/condor_negotiator.V6/matchmaker.h
+++ b/src/condor_negotiator.V6/matchmaker.h
@@ -299,6 +299,7 @@ class Matchmaker : public Service
 		bool want_inform_startd;	
 		/// Should the negotiator use non-blocking connect to contact startds?
 		bool want_nonblocking_startd_contact;
+        char * strSlotConstraint; // query collector for machineAds with this constraint
         ExprTree *DynQuotaMachConstraint;   // Filter machineAds by this
                                             // constraint before calculating
                                             // dynamic quotas.  Added for CDF.
diff --git a/src/condor_q.V6/queue.cpp b/src/condor_q.V6/queue.cpp
index 3cc0b45..a591add 100644
--- a/src/condor_q.V6/queue.cpp
+++ b/src/condor_q.V6/queue.cpp
@@ -1947,9 +1947,9 @@ show_queue_buffered( const char* v1, const char* v2, const char* v3, const char*
 	const char *scheddName;
 	const char *scheddMachine;
 
-	const char *quill_name;
-	const char *db_ipAddr;
-	const char *db_name;
+	const char *quill_name=0;
+	const char *db_ipAddr=0;
+	const char *db_name=0;
 	const char *query_password;
 	int i;
 
