diff --git a/src/condor_examples/Imakefile b/src/condor_examples/Imakefile
index 8306f08..3629a51 100644
--- a/src/condor_examples/Imakefile
+++ b/src/condor_examples/Imakefile
@@ -40,3 +40,10 @@ static::
 html:
 
 public_copy_target(condor_limits_wrapper.sh,libexec,condor_limits_wrapper.sh,EXECUTABLE_MODE)
+
+generate_xml: y.tab.c lex.yy.c
+	$(CC) $^ -o $@  -lfl
+
+y.tab.c: generic_xml.yacc
+	$(YACC) -d $<
+
diff --git a/src/condor_examples/condor_config.generic b/src/condor_examples/condor_config.generic
index 3a3fad4..e3f13b0 100644
--- a/src/condor_examples/condor_config.generic
+++ b/src/condor_examples/condor_config.generic
@@ -2291,6 +2291,20 @@ XEN_SCRIPT = $(SBIN)/condor_vm_xen.sh
 ## description that Condor writes.
 #XEN_LOCAL_SETTINGS_FILE = /path/to/file
 
+## This is the path to the XML helper command; the simple_helper.awk
+## script just reproduces what Condor already does for the kvm/xen VM
+## universe
+
+#LIBVIRT_XML_SCRIPT = $(SBIN)/libvirt_simple_script.awk 
+
+## This is the optional debugging output file for the xml helper
+## script.  Scripts that need to output debugging messages should
+## write them to the file specified by this argument, which will be
+## passed as the second command line argument when the script is
+## executed
+
+#LIBVRT_XML_SCRIPT_ARGS = /dev/stderr
+
 
 ##
 ##--------------------------------------------------------------------
diff --git a/src/condor_vm-gahp/Imakefile b/src/condor_vm-gahp/Imakefile
index 63f1140..86185fb 100644
--- a/src/condor_vm-gahp/Imakefile
+++ b/src/condor_vm-gahp/Imakefile
@@ -2,7 +2,7 @@ VM_GAHP_SERVER = condor_vm-gahp
 
 PROGRAMS = $(VM_GAHP_SERVER)
 
-all_target( $(PROGRAMS) condor_vm_xen.sh condor_vm_vmware.pl)
+all_target( $(PROGRAMS) condor_vm_xen.sh condor_vm_vmware.pl libvirt_simple_script.awk)
 
 CFLAGS = $(STD_C_FLAGS)
 
@@ -21,6 +21,7 @@ VM_GAHP_SERVER_OBJ = vmgahp_main.o pbuffer.o vm_request.o vm_type.o vmgahp.o vmg
 public_c_plus_target($(VM_GAHP_SERVER),sbin,$(VM_GAHP_SERVER_OBJ),$(LIB))
 public_copy_target(condor_vm_xen.sh,sbin,condor_vm_xen.sh,EXECUTABLE_MODE)
 public_copy_target(condor_vm_vmware.pl,sbin,condor_vm_vmware.pl,EXECUTABLE_MODE)
+public_copy_target(libvirt_simple_script.awk,sbin,libvirt_simple_script.awk,EXECUTABLE_MODE)
 
 html:
 testbin:: all
diff --git a/src/condor_vm-gahp/vmgahp.cpp b/src/condor_vm-gahp/vmgahp.cpp
index bd21fc5..f636751 100644
--- a/src/condor_vm-gahp/vmgahp.cpp
+++ b/src/condor_vm-gahp/vmgahp.cpp
@@ -683,8 +683,15 @@ VMGahp::executeStart(VMRequest *req)
 	}
 
 	VMType *new_vm = NULL;
+	char * tmp = param("LIBVIRT_XML_SCRIPT");
 #if defined(LINUX)
-	if(strcasecmp(vmtype, CONDOR_VM_UNIVERSE_XEN) == 0 ) {
+	if((tmp != NULL) && (strcasecmp(vmtype, CONDOR_VM_UNIVERSE_VMWARE) != 0))
+	  {
+	    new_vm = new VirshType(m_gahp_config->m_vm_script.Value(), 
+				   vmworkingdir.Value(), m_jobAd);
+		ASSERT(new_vm);
+	  }
+	else if(strcasecmp(vmtype, CONDOR_VM_UNIVERSE_XEN) == 0 ) {
 		new_vm = new XenType(m_gahp_config->m_vm_script.Value(), 
 				vmworkingdir.Value(), m_jobAd);
 		ASSERT(new_vm);
@@ -699,7 +706,8 @@ VMGahp::executeStart(VMRequest *req)
 				m_gahp_config->m_vm_script.Value(), 
 				vmworkingdir.Value(), m_jobAd);
 		ASSERT(new_vm);
-	}else {
+	}else 
+	  {
 		// We should not reach here
 		vmprintf(D_ALWAYS, "vmtype(%s) is not yet implemented\n", vmtype);
 		req->m_has_result = true;
diff --git a/src/condor_vm-gahp/vmgahp_common.cpp b/src/condor_vm-gahp/vmgahp_common.cpp
index 2735bb0..3982354 100644
--- a/src/condor_vm-gahp/vmgahp_common.cpp
+++ b/src/condor_vm-gahp/vmgahp_common.cpp
@@ -515,18 +515,25 @@ bool canSwitchUid(void)
 	return can_switch_ids();
 }
 
+/**
+ * merge_stderr_with_stdout is intended for clients of this function
+ * that wish to have the old behavior, where stderr and stdout were
+ * both added to the same StringList.
+ */
 int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList * cmd_in,
-				   int want_stderr )
+		   StringList *cmd_err, bool merge_stderr_with_stdout)
 {
 	int result = 0;
 	FILE *fp = NULL;
+	FILE * fp_for_stdin = NULL;
 	MyString line;
 	char buff[1024];
 	StringList *my_cmd_out = cmd_out;
 
 	priv_state prev = PRIV_UNKNOWN;
 
-	int sockets[2];
+	int stdout_pipes[2];
+	int stdin_pipes[2];
 	int pid;
 	if( is_root ) {
 		prev = set_root_priv();
@@ -534,7 +541,7 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 		prev = set_user_priv();
 	}
 #if defined(WIN32)
-	if(cmd_in != NULL)
+	if((cmd_in != NULL) || (cmd_err != NULL))
 	  {
 	    vmprintf(D_ALWAYS, "Invalid use of systemCommand() in Windows.\n");
 	    return -1;
@@ -543,18 +550,33 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	//	fp = privsep_popen(args, "r", want_stderr, job_user_uid);
 	//}
 	//else {
-	fp = my_popen( args, "r", want_stderr );
+	fp = my_popen( args, "r", merge_stderr_with_stdout );
 	//}
 #else
 	// The old way of doing things (and the Win32 way of doing
 	//	things)
 	// fp = my_popen( args, "r", want_stderr );
+	if((cmd_err != NULL) && merge_stderr_with_stdout)
+	  {
+	    vmprintf(D_ALWAYS, "Invalid use of systemCommand().\n");
+	    return -1;
+	  }
+
 	PrivSepForkExec psforkexec;
 	char ** args_array = args.GetStringArray();
+	int error_pipe[2];
 		// AIX 5.2, Solaris 5.9, HPUX 11 don't have AF_LOCAL
-	if(socketpair(AF_UNIX, SOCK_STREAM, 0, sockets) < 0)
+
+	if(pipe(stdin_pipes) < 0)
 	  {
-	    vmprintf(D_ALWAYS, "Error opening local socket: %s\n", strerror(errno));
+	    vmprintf(D_ALWAYS, "Error creating pipe: %s\n", strerror(errno));
+	    return -1;
+	  }
+	if(pipe(stdout_pipes) < 0)
+	  {
+	    vmprintf(D_ALWAYS, "Error creating pipe: %s\n", strerror(errno));
+	    close(stdin_pipes[0]);
+	    close(stdin_pipes[1]);
 	    return -1;
 	  }
 
@@ -564,11 +586,26 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	      vmprintf(D_ALWAYS,
 		       "my_popenv failure on %s\n",
 		       args_array[0]);
-	      close(sockets[0]);
-	      close(sockets[1]);
+	      close(stdin_pipes[0]);
+	      close(stdin_pipes[1]);
+	      close(stdout_pipes[0]);
+	      close(stdout_pipes[1]);
 	      return -1;
 	    }
 	}
+
+	if(cmd_err != NULL)
+	  {
+	    if(pipe(error_pipe) < 0)
+	      {
+		vmprintf(D_ALWAYS, "Could not open pipe for error output: %s\n", strerror(errno));
+		close(stdin_pipes[0]);
+		close(stdin_pipes[1]);
+		close(stdout_pipes[0]);
+		close(stdout_pipes[1]);
+		return -1;
+	      }
+	  }
 	// Now fork and do what my_popen used to do
 	pid = fork();
 	if(pid < 0)
@@ -578,11 +615,18 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	  }
 	if(pid == 0)
 	  {
-	    close(sockets[0]);
-	    dup2(sockets[1], STDOUT_FILENO);
-	    dup2(sockets[1], STDIN_FILENO);
+	    close(stdout_pipes[0]);
+	    close(stdin_pipes[1]);
+	    dup2(stdout_pipes[1], STDOUT_FILENO);
+	    dup2(stdin_pipes[0], STDIN_FILENO);
+
+	    if(merge_stderr_with_stdout) dup2(stdout_pipes[1], STDERR_FILENO);
+	    else if(cmd_err != NULL) 
+	      {
+		close(error_pipe[0]);
+		dup2(error_pipe[1], STDERR_FILENO);
+	      }
 
-	    if(want_stderr) dup2(sockets[1], STDERR_FILENO);
 
 	    uid_t euid = geteuid();
 	    gid_t egid = getegid();
@@ -603,16 +647,32 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	    
 	      ArgList al;
 	      psforkexec.in_child(cmd, al);
-	      args_array = al.GetStringArray();			
+	      args_array = al.GetStringArray();
 	    }
 
 
 	    execvp(args_array[0], args_array);
-	    // Something went horribly wrong!
+	    vmprintf(D_ALWAYS, "Could not execute %s: %s\n", args_array[0], strerror(errno));
 	    exit(-1);
 	  }
-	close(sockets[1]);
-	fp = fdopen(sockets[0], "r+");
+	close(stdin_pipes[0]);
+	close(stdout_pipes[1]);
+	fp_for_stdin = fdopen(stdin_pipes[1], "w");
+	fp = fdopen(stdout_pipes[0], "r");
+	FILE * childerr;
+	if(cmd_err != NULL)
+	  {
+	    close(error_pipe[1]);
+	    childerr = fdopen(error_pipe[0],"r");
+	    if(childerr == 0)
+	      {
+		vmprintf(D_ALWAYS, "Could not open pipe for reading child error output: %s\n", strerror(errno));
+		close(error_pipe[0]);
+		close(stdin_pipes[1]);
+		close(stdout_pipes[0]);
+		return -1;
+	      }
+	  }
 
 	if ( privsep_enabled() && (job_user_uid != get_condor_uid())) {
 	  FILE* _fp = psforkexec.parent_begin();
@@ -651,9 +711,12 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	  char * tmp;
 	  while((tmp = cmd_in->next()) != NULL)
 	    {
-	      fprintf(fp, "%s\n", tmp);
-	      fflush(fp);
+	      fprintf(fp_for_stdin, "%s\n", tmp);
+	      fflush(fp_for_stdin);
 	    }
+	  // So that we will not be waiting for output while the
+	  // script waits for stdin to be closed.
+	  fclose(fp_for_stdin);
 	}
 
 	if ( my_cmd_out == NULL ) {
@@ -668,6 +731,19 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 		}
 	}
 
+	if(cmd_err != NULL)
+	  {
+	    while(fgets(buff, sizeof(buff), childerr) != NULL)
+	      {
+		line += buff;
+		if(line.chomp())
+		  {
+		    cmd_err->append(line.Value());
+		    line = "";
+		  }
+	      }
+	    fclose(childerr);
+	  }
 #if defined(WIN32)
 	result = my_pclose( fp );
 #else
diff --git a/src/condor_vm-gahp/vmgahp_common.h b/src/condor_vm-gahp/vmgahp_common.h
index 69f41fd..7015613 100644
--- a/src/condor_vm-gahp/vmgahp_common.h
+++ b/src/condor_vm-gahp/vmgahp_common.h
@@ -59,7 +59,7 @@ void write_to_daemoncore_pipe(int pipefd, const char* str, int len);
 void write_to_daemoncore_pipe(const char* fmt, ... ) CHECK_PRINTF_FORMAT(1,2);
 int write_stderr_to_pipe();
 int systemCommand( ArgList &args, bool is_root, StringList *cmd_out = NULL, StringList * cmd_in = NULL,
-				   int want_stderr = 1 );
+		   StringList * cmd_err = NULL, bool merge_stderr_with_stdout = true);
 MyString makeErrorMessage(const char* err_string);
 
 void initialize_uids(void);
diff --git a/src/condor_vm-gahp/xen_type.cpp b/src/condor_vm-gahp/xen_type.cpp
index 6f156f1..78653a3 100644
--- a/src/condor_vm-gahp/xen_type.cpp
+++ b/src/condor_vm-gahp/xen_type.cpp
@@ -31,6 +31,8 @@
 #include "xen_type.h"
 #include "vmgahp_error_codes.h"
 #include "condor_vm_universe_types.h"
+#include "my_popen.h"
+#include <string>
 
 #define XEN_CONFIG_FILE_NAME "xen_vm.config"
 #define XEN_CKPT_TIMESTAMP_FILE_SUFFIX ".timestamp"
@@ -149,6 +151,9 @@ VirshType::Start()
 	systemcmd.AppendArg(m_configfile);
 
 	int result = systemCommand(systemcmd, true, &cmd_out);
+	char * flarg = cmd_out.print_to_delimed_string("/");
+	vmprintf(D_FULLDEBUG, "%s\n", flarg);
+	free(flarg);
 	if( result != 0 ) {
 		// Read error output
 		char *temp = cmd_out.print_to_delimed_string("/");
@@ -284,6 +289,72 @@ VirshType::Checkpoint()
 	return true;
 }
 
+// I really need a good way to determine the type of a classad
+// attribute.  Right now I just try all four possibilities, which is a
+// horrible mess...
+bool VirshType::CreateVirshConfigFile(const char* filename)
+{
+  vmprintf(D_FULLDEBUG, "In VirshType::CreateVirshConfigFile\n");
+  //  std::string name;
+  char * name, line[1024];
+  char * tmp = param("LIBVIRT_XML_SCRIPT");
+  if(tmp == NULL)
+    {
+      vmprintf(D_ALWAYS, "Something went really bad, the xml helper command variable is not\
+                          configured (but it must be for this code to be reachable).\n");
+      return false;
+    }
+  // This probably needs some work...
+  ArgList args;
+  args.AppendArg(tmp);
+  free(tmp);
+
+  // We might want to have specific debugging output enabled in the
+  // helper script; however, it is not clear where that output should
+  // go.  This gives us a way to do so even in cases where the script
+  // is unable to read from condor_config (why would this ever
+  // happen?)
+  tmp = param("LIBVIRT_XML_SCRIPT_ARGS");
+  if(tmp != NULL) 
+    {
+      MyString errormsg;
+      args.AppendArgsV1RawOrV2Quoted(tmp, &errormsg);
+      free(tmp);
+    }
+  StringList input_strings, output_strings, error_strings;
+  MyString classad_string;
+  m_classAd.sPrint(classad_string);
+  input_strings.append(classad_string.Value());
+
+  int ret = systemCommand(args, true, &output_strings, &input_strings, &error_strings, false);
+  error_strings.rewind();
+  if(ret != 0)
+    {
+      vmprintf(D_ALWAYS, "XML helper script could not be executed\n");
+      output_strings.rewind();
+      // If there is any output from the helper, write it to the debug
+      // log.  Presumably, this is separate from the script's own
+      // debug log.
+      while((tmp = error_strings.next()) != NULL)
+	{
+	  vmprintf(D_FULLDEBUG, "Helper stderr output: %s\n", tmp);
+	}
+      return false;
+    }
+  while((tmp = error_strings.next()) != NULL)
+    {
+      vmprintf(D_ALWAYS, "Helper stderr output: %s\n", tmp);
+    }
+  output_strings.rewind();
+  FILE * xml_file = fopen(filename, "w");
+  while((tmp = output_strings.next()) != NULL)
+    {
+      fprintf(xml_file, "%s\n", tmp);
+    }
+  fclose(xml_file);
+  return true;
+}
+
 bool
 VirshType::ResumeFromSoftSuspend(void)
 {
diff --git a/src/condor_vm-gahp/xen_type.h b/src/condor_vm-gahp/xen_type.h
index c9d3f51..b1d7d07 100644
--- a/src/condor_vm-gahp/xen_type.h
+++ b/src/condor_vm-gahp/xen_type.h
@@ -62,7 +62,6 @@ public:
 	virtual bool CreateConfigFile();
 
 	virtual bool killVM();
-
 protected:
 	MyString makeVirshDiskString(void);
 	bool createISO();
@@ -77,7 +76,10 @@ protected:
 	bool checkCkptSuspendFile(const char* file);
 	bool ResumeFromSoftSuspend(void);
 	bool CreateXenVMConfigFile(const char* filename);
-	virtual bool CreateVirshConfigFile(const char* filename)=0;
+
+	// For the base class, this just prints out the classad
+	// attributes and the type for each attribute.
+	virtual bool CreateVirshConfigFile(const char* filename);
 
 	SimpleList<XenDisk*> m_disk_list;
 
