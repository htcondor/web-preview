From 1c1dfb9d712f9f7a810f85911b945bd6cba26c55 Mon Sep 17 00:00:00 2001
From: Doug Strain <dstrain@google.com>
Date: Wed, 9 Nov 2016 16:51:37 -0800
Subject: [PATCH 1/1] Modify GCE GAHP to use pagination for listing instances

- Currently listInstances calls of over 500 instances
  are paginated.  This patch will handle these paginated
  responses and concatenate the instances into one list.
---
 src/gce_gahp/gceCommands.cpp | 159 +++++++++++++++++++++++--------------------
 1 file changed, 86 insertions(+), 73 deletions(-)

diff --git a/src/gce_gahp/gceCommands.cpp b/src/gce_gahp/gceCommands.cpp
index 5a528f3..070684d 100644
--- a/src/gce_gahp/gceCommands.cpp
+++ b/src/gce_gahp/gceCommands.cpp
@@ -1182,6 +1182,8 @@ bool GceInstanceList::workerFunction(char **argv, int argc, string &result_strin
 	assert( strcasecmp( argv[0], "GCE_INSTANCE_LIST" ) == 0 );
 
 	int requestID;
+	string next_page_token;
+	vector<string> results;
 	get_int( argv[1], & requestID );
 
 	if( ! verify_number_args( argc, 6 ) ) {
@@ -1191,87 +1193,98 @@ bool GceInstanceList::workerFunction(char **argv, int argc, string &result_strin
 		return false;
 	}
 
-	// Fill in required attributes & parameters.
-	GceInstanceList list_request;
-	list_request.serviceURL = argv[2];
-	list_request.serviceURL += "/projects/";
-	list_request.serviceURL += argv[4];
-	list_request.serviceURL += "/zones/";
-	list_request.serviceURL += argv[5];
-	list_request.serviceURL += "/instances";
-	list_request.requestMethod = "GET";
+	while( true ) {
+		// Fill in required attributes & parameters.
+		GceInstanceList list_request;
+		list_request.serviceURL = argv[2];
+		list_request.serviceURL += "/projects/";
+		list_request.serviceURL += argv[4];
+		list_request.serviceURL += "/zones/";
+		list_request.serviceURL += argv[5];
+		list_request.serviceURL += "/instances";
+		if (!next_page_token.empty() ) {
+			dprintf( D_ALWAYS, "Requesting page token %s\n", next_page_token.c_str() );
+			list_request.serviceURL += "?pageToken=";
+			list_request.serviceURL += next_page_token;
+			next_page_token="";
+		}
 
-	string auth_file = argv[3];
-	if ( !GetAccessToken( auth_file, list_request.accessToken,
-						  list_request.errorMessage ) ) {
-		result_string = create_failure_result( requestID,
-											   list_request.errorMessage.c_str() );
-		return true;
-	}
+		list_request.requestMethod = "GET";
 
-	// Send the request.
-	if( ! list_request.SendRequest() ) {
-		// TODO Fix construction of error message
-		result_string = create_failure_result( requestID,
-							list_request.errorMessage.c_str(),
-							list_request.errorCode.c_str() );
-	} else {
-		string next_id;
-		string next_name;
-		string next_status;
-		string next_status_msg;
-		vector<string> results;
-		string key;
-		string value;
-		int nesting = 0;
+		string auth_file = argv[3];
+		if ( !GetAccessToken( auth_file, list_request.accessToken,
+							  list_request.errorMessage ) ) {
+			result_string = create_failure_result( requestID,
+												   list_request.errorMessage.c_str() );
+			return true;
+		}
 
-		const char *pos = list_request.resultString.c_str();
-		while( ParseJSONLine( pos, key, value, nesting ) ) {
-			if ( nesting != 3 ) {
-				continue;
-			}
-			if ( key == "id" ) {
-				if ( !next_id.empty() ) {
-					AddInstanceToResult( results, next_id, next_name,
-										 next_status, next_status_msg );
-				}
-				next_id = value;
-			} else if ( key == "name" ) {
-				if ( !next_name.empty() ) {
-					AddInstanceToResult( results, next_id, next_name,
-										 next_status, next_status_msg );
+		// Send the request.
+		if( ! list_request.SendRequest() ) {
+			// TODO Fix construction of error message
+			result_string = create_failure_result( requestID,
+								list_request.errorMessage.c_str(),
+								list_request.errorCode.c_str() );
+		} else {
+			string next_id;
+			string next_name;
+			string next_status;
+			string next_status_msg;
+			string key;
+			string value;
+			int nesting = 0;
+	
+			const char *pos = list_request.resultString.c_str();
+			while( ParseJSONLine( pos, key, value, nesting ) ) {
+				if ( key == "nextPageToken") {
+					next_page_token = value;
+					dprintf( D_ALWAYS, "Found page token %s\n", next_page_token.c_str() );
 				}
-				next_name = value;
-			} else if ( key == "status" ) {
-				if ( !next_status.empty() ) {
-					AddInstanceToResult( results, next_id, next_name,
-										 next_status, next_status_msg );
+				if ( nesting != 3 ) {
+					continue;
 				}
-				next_status = value;
-			} else if ( key == "statusMessage" ) {
-				if ( !next_status_msg.empty() ) {
-					AddInstanceToResult( results, next_id, next_name,
-										 next_status, next_status_msg );
+				if ( key == "id" ) {
+					if ( !next_id.empty() ) {
+						AddInstanceToResult( results, next_id, next_name,
+											 next_status, next_status_msg );
+					}
+					next_id = value;
+				} else if ( key == "name" ) {
+					if ( !next_name.empty() ) {
+						AddInstanceToResult( results, next_id, next_name,
+											 next_status, next_status_msg );
+					}
+					next_name = value;
+				} else if ( key == "status" ) {
+					if ( !next_status.empty() ) {
+						AddInstanceToResult( results, next_id, next_name,
+											 next_status, next_status_msg );
+					}
+					next_status = value;
+				} else if ( key == "statusMessage" ) {
+					if ( !next_status_msg.empty() ) {
+						AddInstanceToResult( results, next_id, next_name,
+											 next_status, next_status_msg );
+					}
+					next_status_msg = value;
 				}
-				next_status_msg = value;
+			}
+			if ( !next_name.empty() ) {
+				AddInstanceToResult( results, next_id, next_name,
+									 next_status, next_status_msg );
 			}
 		}
-		if ( !next_name.empty() ) {
-			AddInstanceToResult( results, next_id, next_name,
-								 next_status, next_status_msg );
-		}
-
-		char buff[16];
-		sprintf( buff, "%d", (int)(results.size() / 4) );
-
-		StringList response;
-		response.append( buff );
-		for ( vector<string>::iterator idx = results.begin(); idx != results.end(); idx++ ) {
-			response.append( idx->c_str() );
+		if (next_page_token.empty()) {
+			char buff[16];
+			sprintf( buff, "%d", (int)(results.size() / 4) );
+
+			StringList response;
+			response.append( buff );
+			for ( vector<string>::iterator idx = results.begin(); idx != results.end(); idx++ ) {
+				response.append( idx->c_str() );
+			}
+			result_string = create_success_result( requestID, &response );
+			return true;
 		}
-
-		result_string = create_success_result( requestID, &response );
 	}
-
-	return true;
 }
-- 
2.8.0.rc3.226.g39d4020

