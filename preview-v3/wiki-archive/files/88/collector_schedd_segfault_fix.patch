diff --git a/src/condor_collector.V6/collector.cpp b/src/condor_collector.V6/collector.cpp
index bdc207f..5fa1b0c 100644
--- a/src/condor_collector.V6/collector.cpp
+++ b/src/condor_collector.V6/collector.cpp
@@ -1374,11 +1374,29 @@ void CollectorDaemon::Config()
 
 void CollectorDaemon::Exit()
 {
+	// Clean up any workers that have exited but haven't been reaped yet.
+	// This can occur if the collector receives a query followed
+	// immediately by a shutdown command.  The worker will exit but
+	// not be reaped because the SIGTERM from the shutdown command will
+	// be processed before the SIGCHLD from the worker process exit.
+	// Allowing the stack to clean up worker processes is problematic
+	// because the collector will be shutdown and the daemonCore
+	// object deleted by the time the worker cleanup is attempted.
+	forkQuery.DeleteAll( );
 	return;
 }
 
 void CollectorDaemon::Shutdown()
 {
+	// Clean up any workers that have exited but haven't been reaped yet.
+	// This can occur if the collector receives a query followed
+	// immediately by a shutdown command.  The worker will exit but
+	// not be reaped because the SIGTERM from the shutdown command will
+	// be processed before the SIGCHLD from the worker process exit.
+	// Allowing the stack to clean up worker processes is problematic
+	// because the collector will be shutdown and the daemonCore
+	// object deleted by the time the worker cleanup is attempted.
+	forkQuery.DeleteAll( );
 	return;
 }
 
diff --git a/src/condor_schedd.V6/qmgmt.cpp b/src/condor_schedd.V6/qmgmt.cpp
index 804b594..1c3db9d 100644
--- a/src/condor_schedd.V6/qmgmt.cpp
+++ b/src/condor_schedd.V6/qmgmt.cpp
@@ -919,6 +919,16 @@ CleanJobQueue()
 void
 DestroyJobQueue( void )
 {
+	// Clean up any children that have exited but haven't been reaped
+	// yet.  This can occur if the schedd receives a query followed
+	// immediately by a shutdown command.  The child will exit but
+	// not be reaped because the SIGTERM from the shutdown command will
+	// be processed before the SIGCHLD from the child process exit.
+	// Allowing the stack to clean up child processes is problematic
+	// because the schedd will be shutdown and the daemonCore
+	// object deleted by the time the child cleanup is attempted.
+	forker.DeleteAll( );
+
 	if (JobQueueDirty) {
 			// We can't destroy it until it's clean.
 		CleanJobQueue();
