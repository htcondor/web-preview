{"id": 509, "title": "Ticket #509: $$() non-functional on Windows", "description": "<blockquote>\nStack trace:\n\n<p></p><pre>  condor_schedd.exe!_crt_debugger_hook(int _Reserved=1242612)  Line 65\tC\n  condor_schedd.exe!_invalid_parameter(const wchar_t * pszExpression=0x00000000, const wchar_t * pszFunction=0x00000000, const wchar_t * pszFile=0x00000000, unsigned int nLine=0, unsigned int pReserved=0)  Line 112 + 0x7 bytes\tC++\n  condor_schedd.exe!_output_l(_iobuf * stream=0x0012f614, const char * format=0x00593300, localeinfo_struct * plocinfo=0x00000000, char * argptr=0x0012f644)  Line 1026 + 0x17 bytes\tC++\n  condor_schedd.exe!sprintf(char * string=0x00d00af8, const char * format=0x00593300, ...)  Line 130 + 0x1f bytes\tC\n  condor_schedd.exe!dollarDollarExpand(int cluster_id=2, int proc_id=0, ClassAd * ad=0x00cd1ab0, ClassAd * startd_ad=0x00d27ce8, bool persist_expansions=false)  Line 2982\tC++\n  condor_schedd.exe!GetJobAd(int cluster_id=2, int proc_id=0, bool expStartdAd=true, bool persist_expansions=false)  Line 3240 + 0xe bytes\tC++\n  condor_schedd.exe!Scheduler::contactStartd(ContactStartdArgs * args=0x00d27ff8)  Line 5493 + 0x14 bytes\tC++\n  condor_schedd.exe!Scheduler::checkContactQueue()  Line 5665\tC++\n  condor_schedd.exe!TimerManager::Timeout()  Line 500\tC++\n  condor_schedd.exe!DaemonCore::Driver()  Line 2832 + 0xa bytes\tC++\n  condor_schedd.exe!dc_main(int argc=1, char * * argv=0x00c33284)  Line 2108\tC++\n  condor_schedd.exe!main(int argc=2, char * * argv=0x00c33280)  Line 2171 + 0xa bytes\tC++\n  condor_schedd.exe!__tmainCRTStartup()  Line 266 + 0x12 bytes\tC\n  kernel32.dll!77e6f23b()\n</pre>\n\n<p>This can be reproduced with:\n\n</p><p></p><pre>  universe = vanilla\n  executable = winbin.$$(OPSYS)\n  log = winbin.log\n  output = winbin.out\n  error = winbin.err\n  queue\n</pre>\n\n<p>Fails everytime; reproduced on Windows 2008 and 2003.\n\n</p><p>I have not yet determined when this started, nor why.  Since this problem is not restricted to one branch, it seems likely that examining 7.2's history might help to elucidate this problem (assuming it first arose there; otherwise, looking back to 7.[01] may be nessesary).</p></blockquote>", "remarks": "<blockquote>\n<em>2009-May-25 08:43:10 by matt:</em> <br/>\n\nYou should only have to check the master, everything else branches from it.\n\n<p>Also, is there a plan to add a test for this to the suite?\n\n</p><p></p><hr/>\n<em>2009-May-27 01:29:33 by jfrey:</em> <br/>\n\nIt's the use of %n in the call to sprintf(). MSDN says it should work as expected, but it doesn't. I stuck a simple sprintf with a %n at the top of main() and it crashes right there. Take the %n out, and it doesn't crash.\n\n<p></p><hr/>\n<em>2009-May-27 09:17:17 by burnett:</em> <br/>\n\nNice catch.  Even though It looks like it should work, it is disabled by default (according to MSDN):\n\n<p>\"Security Note   The %n format is inherently insecure and is disabled by default; if %n is encountered in a format string, the invalid parameter handler is invoked as described in Parameter Validation. To enable %n support, see _set_printf_count_output.\"\n\n</p><p>Failures that could be self documenting but are not are awesome!\n\n</p><p></p><hr/>\n<em>2009-May-27 09:53:53 by matt:</em> <br/>\n\nIf using %n is considered a security risk do we want to just go ahead and use it (what the current commit does)?\n\n<p></p><hr/>\n<em>2009-May-27 10:19:18 by jfrey:</em> <br/>\n\nIt would have been since if their page documenting the use of %n in printf() had mentioned this little feature.\n\n<p>Do they explain anywhere why they feel it's a security concern?\n\n</p><p></p><hr/>\n<em>2009-May-27 10:21:19 by burnett:</em> <br/>\n\nNot that this makes our use of it ok, but we make use of many of the other \"insecure\" CRT functions.  These include - but are not limited too - <code>memcpy</code>, <code>memset</code>, <code>strcpy</code>, <code>stricmp</code>, <code>sprintf</code> (%n is not the only insecure part of it), <code>fprintf</code>, etc.  Most obviously, the problem these share in common is the possibility for a buffer overflow.\n\n<p>On Windows we suppress the errors and/or warnings the use of these functions spew out.\n\n</p><p></p><hr/>\n<em>2009-May-27 10:59:13 by burnett:</em> <br/>\n\nExploit of the %n format option:\n\n<p>\"... most format function implementations offer the '%n' parameter, which can be used to write to the addresses on the stack. If that is done a few times, it should reliably produce a crash, too.\"\n\n</p><p>Taken from: <a class=\"external\" href=\"http://julianor.tripod.com/bc/formatstring-1.2.pdf\">Exploiting Format String Vulnerabilities</a></p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-27 09:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/819b11b86d609ad3a8efcef3d25ca3279470d6d2\">[14760]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=509\" onclick=\"get_ticket_and_populate_wrapper('509'); return false;\" title=\"$$() non-functional on Windows\">#509</a></span>: The %n printf() format field is disabled by default on Windows due to security concerns. The fix involved enabling the correct processing of the %n format filed, via a call to _set_printf_count_output().  (By Ben Burnett )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2009-Dec-26 20:26", "status": "resolved", "created": "2009-May-24 14:54", "fixed_version": "2009-May-24 14:54", "broken_version": "v070302", "priority": "1", "subsystem": "Win32", "assigned_to": "jfrey", "derived_from": "", "creator": "burnett", "rust": "", "customer_group": "other", "visibility": "public", "notify": "burnett@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}