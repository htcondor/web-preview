{"id": 6692, "title": "Ticket #6692: Improve wheel packaging of python bindings", "description": "<blockquote>\nA user on htcondor-users reports having problems with GSI authentication when using Python bindings installed via pip (in this case, for Python 3):\n\n<p><a class=\"external\" href=\"https://lists.cs.wisc.edu/archive/htcondor-users/2018-May/msg00118.shtml\">https://lists.cs.wisc.edu/archive/htcondor-users/2018-May/msg00118.shtml</a>\n\n</p><p>GSI authentication worked for this user when using system python binding libraries installed via the condor RPM. We should figure out what leads to this difference, get GSI (and other features, where possible) added to the wheel builds, and find a way to automatically test wheels' feature compatibility.\n\n</p><p>I do have some initial concerns about making the wheels much larger, but we can cross that path when we get there.</p></blockquote>", "remarks": "<blockquote>\n<em>2018-May-29 13:23:14 by jpatton:</em> <br/>\n\nAlso, the docker image that we're using to base the packaging on needs to be updated so that wheels are built against more recent crytpo libs. See issue on bbockelm's docs <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=GitHub\" title=\"Git Hub\">GitHub</a></span> repo: <a class=\"external\" href=\"https://github.com/bbockelm/htcondor-python/issues/2\">https://github.com/bbockelm/htcondor-python/issues/2</a>\n\n<p></p><hr/>\n<em>2018-Jun-13 14:36:05 by jpatton:</em> <br/>\n\nLink to github version of <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/bea10ec8e0142d0d4b23c4a8070546db4b4fb08c\">[55050]</a></span> for easier viewing: <a class=\"external\" href=\"https://github.com/htcondor/htcondor/commit/bea10ec8e0142d0d4b23c4a8070546db4b4fb08c\">https://github.com/htcondor/htcondor/commit/bea10ec8e0142d0d4b23c4a8070546db4b4fb08c</a>\n\n<p>The changes to the actual codebase are pretty small. What I've done here is consolidated all the wheel packaging setup (not the packaging itself) in <a class=\"file\" href=\"rlog?f=src/python-bindings/CMakeLists.txt\">/src/python-bindings/CMakeLists.txt</a> . I've also created a new target, <code>_pyclassad</code>, which builds as <code>libpyclassad&lt;py-ver&gt;_&lt;pkg-ver&gt;_clean.so</code>, that does not link against libpython. libpython does not exist in the manylinux1 docker image (except for libpython2.4... yuck). (Note: We should have a discussion about whether libpython should even be used in our normal python bindings build.) Finally, I added a way to append to the package version that is used for building the wheels so that we can release hotfixes between official HTCondor releases on PyPI.\n\n</p><p>What I've done \"behind-the-scenes\" (though this will go into a github repo soon) is redo the manylinux1 docker image that we are using when actually building and packaging the wheels. Previously, we \"burnt\" a modified docker container to an image. This time, I took careful note of the changes I had to make to get condor to compile and to get correct manylinux1 wheels built (including patching the auditwheel utility), and then stored that in a build script which is called by a Dockerfile. This way when manylinux2010 (or whatever it ends up being called) comes out that updates the underlying manylinux image's OS, it's (hopefully) a one line change in the Dockerfile to update to the new image. I've also changed the name of the image to htcondor_manylinux1, which will help us be more clear when new manylinux images are released.\n\n</p><p>There are a few changes I've made to the htcondor_manylinux1 docker image compared to the \"original\" condor_pypi_container image that was graciously provided by bbockelm:\n\n</p><p></p><ol>\n<li>Compiled and installed a newer version of OpenSSL (i.e. libcrypto) than is shipped with the CentOS 5-based image. (The auditwheel utility packs this with the wheel!)\n</li><li>Installed a newer version of cmake using pip (under the Python 3.6 install) which works so much better than the version that comes from the old CentOS 5 yum repo. It actually figures out the correct Python version from <code>$PATH</code> and/or <code>-DPYTHON_INCLUDE_DIR</code>!\n</li><li>The auditwheel patch is now smarter about how the <code>condor_libs/</code> libraries are handled such that fewer errors are ignored (in fact, only when <code>libclassad</code> is not found at the beginning...) and their RPATHs are corrected (so <code>libclassad</code> is found at the end).\n</li></ol>\n\n<p></p><hr/>\n<em>2018-Jun-22 09:22:43 by jpatton:</em> <br/>\n\nSome more changes:\n\n<p>Instead of copying libclassad and libcondor_utils to the wheel directly, I am now letting auditwheel take care of copying them. The trick is to make sure all the bld_external lib paths are added to <code>$LD_LIBRARY_PATH</code> prior to running auditwheel.\n\n</p><p>CMake now looks at <code>WANT_PYTHON_WHEELS</code> when deciding whether or not to use <code>dlopen()</code> with security and globus libs. These libs are now explicitly linked when building for Python wheels, so auditwheel puts copies of them into the wheel at repair time.\n\n</p><p>With these changes, I am now getting feedback that GSI auth is working with the Python bindings installed using pip (via Test PyPI at the moment).\n\n</p><p></p><hr/>\n<em>2018-Jun-22 09:31:56 by tim:</em> <br/>\n\nW00t!\n\n<p></p><hr/>\n<em>2018-Jul-27 11:19:43 by tim:</em> <br/>\n\n<strong>CODE REVIEW:</strong> Good work Jason</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6890\" onclick=\"get_ticket_and_populate_wrapper('6890'); return false;\" title=\"python bindings CMakeLists needs changes for wheel builds\">#6890</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\npython bindings CMakeLists needs changes for wheel builds</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jun-29 14:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/87c4685ac3b62202188ef56405cb65822fd3ccbd\">[55119]</a></span>: Build framework for python binding wheels on Darwin <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6692\" onclick=\"get_ticket_and_populate_wrapper('6692'); return false;\" title=\"Improve wheel packaging of python bindings\">#6692</a></span> Only required some minor tweaks to deal with how Darwin linker handles missing symbols and how library load paths are handled.  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jun-21 15:03</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/d44c76595922802170d436f14caf655074c77f8d\">[55096]</a></span>: Do not use dlopen() when building python wheels <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6692\" onclick=\"get_ticket_and_populate_wrapper('6692'); return false;\" title=\"Improve wheel packaging of python bindings\">#6692</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jun-13 13:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/bea10ec8e0142d0d4b23c4a8070546db4b4fb08c\">[55050]</a></span>: Consolidate python wheel packaging commands (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6692\" onclick=\"get_ticket_and_populate_wrapper('6692'); return false;\" title=\"Improve wheel packaging of python bindings\">#6692</a></span>) Also adds a new libpyclassad target (\"_libpyclassad\") that avoids linking against unnecessary libpython, which decreases the complexity of the wheel packaging process. Also adds option to append to the version string of the wheel in case hotfixes are\u00a0[...]\n (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jun-04 16:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/7f6561565188e3dd3624693f3c339a71006ccdd2\">[55007]</a></span>: De-hardcode-ifying libclassad in Python wheel staging <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6692\" onclick=\"get_ticket_and_populate_wrapper('6692'); return false;\" title=\"Improve wheel packaging of python bindings\">#6692</a></span>  (By Jason Patton )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2018-Jul-27 11:20", "status": "resolved", "created": "2018-May-25 13:01", "fixed_version": "2018-May-25 13:01", "broken_version": "v080703", "priority": "2", "subsystem": "PythonBinding", "assigned_to": "jpatton", "derived_from": "", "creator": "jpatton", "rust": "", "customer_group": "users", "visibility": "public", "notify": "jpatton@cs.wisc.edu, tannenba@cs.wisc.edu, tim@cs.wisc.edu", "due_date": ""}