{"id": 5632, "title": "Ticket #5632: Managing per-thread security configs in python", "description": "<blockquote>\nCMS and ATLAS have a multi-threaded program where, in each thread, we may want to establish a remote security session with a unique credential.  CMS is interested in having multiple GSI credentials in use, one per user, to submit to a variety of schedds.  ATLAS is interested in having multiple pool passwords for querying different remote pools.\n\n<p>I propose a python context manager that will set a thread-local variable specifying the current python thread's security configuration.  Then, in the existing mutex for entering/exiting condor library code, we'll set/restore the config.  This way, HTCondor doesn't have to understand the thread-local -- only the python binding code does.\n\n</p><p>CMS <em>will</em> need a small tweak in the security code -- they need multiple security sessions cached per schedd (one for each CMS user).  Hence, we'll need a new global in the security manager code specifying a <code>tag</code>.  If the tag is present, we'll prepend it to the hash for security session lookup.\n\n</p><p>In terms of interfaces, here's what I was thinking:\n</p><div class=\"code\">\n<pre class=\"code\">   with htcondor.SecMan().context() as ctx:\n       ctx.setTag('bbockelm')\n       ctx.setPoolPassword('foo')\n       ctx.setGSICredential('/path/to/bar')\n       # ... do something that needs a security session ...\n</pre></div>\n\n\n<p>For any HTCondor calls inside the indented block, the <code>ctx</code> variable overrides the security session.  Other threads are unaffected, as well as code outside the block.\n\n</p><p>This work lives on the V8_5-gt5632 branch.</p></blockquote>", "remarks": "<blockquote>\n<em>2016-May-11 13:52:27 by tannenba:</em> <br/>\n\nBrian, is this ticket ready for code review? I.e. is your patch code complete and relatively well tested? If so, please put this ticket into code review status and mark it for the next 8.5 release.  Thanks!\n\n<p></p><hr/>\n<em>2016-Jul-08 10:00:35 by zmiller:</em> <br/>\n\n<strong>CODE REVIEW</strong>: Mostly okay.  If you are not using tags, this behaves exactly as before.  However, my concern is that if you are using tags, we don't clean up memory in two ways:\n\n<p></p><ol>\n<li>When destructing the <code>m_tagged_session_cache</code> (need to do a deep free of individual <code>KeyCache</code> objects)\n\n<p></p></li><li>Code needs to be added to expire sessions in both the m_default_session cache AND the individual caches within the <code>m_tagged_session_cache</code>.  I believe currently it will only do whatever is currently pointed to by <code>session_cache</code>.\n</li></ol>\n\n<p>HOWEVER, since these issues affect only the client side (particularly python bindings) and are not issues for the normal case when no tags are used, I'm going to go ahead and merge this right now since 8.5.6 is blocked on this ticket.\n\n</p><p></p><hr/>\n<em>2016-Jul-08 16:27:48 by tannenba:</em> <br/>\n\n<strong>CODE REVIEW</strong> additional comments:\n\n<p>All new source code files should\n\n</p><p></p><ol>\n<li>include our Copyright block at the start, and\n</li><li>all non-header files should include condor_common.h first (unless there is a good technical reason that cannot happen), and\n</li><li>code should not include system headers like pthreads as that should be dealt with by condor_common and friends.\n</li></ol>\n\n<p></p><hr/>\n<em>2016-Jul-10 14:04:19 by bbockelm:</em> <br/>\n\nOk, pushed a few fixes based on the above comments.  Things I didn't fix:\n<ul>\n<li>Like we currently do with <code>m_ipverify</code>, I don't cleanup the dynamically allocated <code>KeyCache</code> instances during process destruction.  It'll be really tough to clean those up without a larger overhaul of the <code>SecMan</code> global.\n</li><li>I didn't find any cases where we include before <code>condor_common.h</code> that aren't motivated by the needs of python (there are a lot of issues caused by <code>condor_common</code>).  Todd, did you see anything specific?\n<ul>\n<li>There's an interesting discussion to be had about whether condor or python is at fault here for leaky abstractions - but we've known for a long time that we could benefit from revisiting things in the condor headers.\n</li></ul>\n</li></ul>\n\n<p>Todd: I took care of the copyright statement in the one new file.  However, I noticed that a lot of older files are missing this.  Could you perhaps open a ticket on the subject?\n\n</p><p></p><hr/>\n<em>2016-Jul-11 15:06:28 by johnkn:</em> <br/>\n\n<strong>code_review</strong> : <em>for reference. I will be fixing these things myself</em>\n\n<p></p><ul>\n<li>you MUST include headers in python bindings in the order indicated by the existing .cpp files in the python-bindings directory. That is, python_bindings_common.h MUST BE FIRST.  If you don't do this, the code won't build on some platforms.\n\n<p></p></li><li>similarly, including headers in other headers might work, but it might not either and its never necessary. so just don't.\n\n<p></p></li><li>use HTCondor's <code>SetEnv</code>, not setenv.  Also setenv probably leaks when used to set a single key more than once. In this case putenv would be better than setenv. (according to BSDs documentation, setenv will leak when you grow a value, but not otherwise - and that the value returned by getenv <em>might</em> be changed out from under you by a subsequent setenv call)\n\n<p></p></li><li>use of naked pthreads isn't portable, HTCondor has a threads library that abstracts that, and module_lock.h has a few defines that do as well.  Please pay attention to the mechanisms in place and follow them.\n\n<p></p></li><li>SecManWrapper::m_key is never set to anything, so if pthread_setspecific does anything at all, its by pure luck.\n\n<p></p></li><li>c++ has a <strong>__thread</strong> keyword that is portable, and (I think?) makes the use of the pthread calls unnecessary for this code.\n\n<p></p></li><li>param_insert leaks when used in the way this code is using it.  Each call that <strong>changes</strong> the value makes a copy of the value, values are freed, but only on reconfig. see set_live_submit_variable in condor_submit for a technique that avoids this problem.\n\n<p></p></li><li>mutating the param table is a bad way to pass a value into the security layer.  It's basically being used as an expensive (and leaky) global variable.  better to just make a new call into the security code and sets a global variable until such time as we can fix the security layer to instance the pool password.\n\n<p></p></li><li>SecManWrapper::setConfig doesn't overwrite old values for key when new values are set, so the vector can grow without bound, it should be a map, rather than a vector. (with case insensitive keys).  Even worse, if you DO set multiple values for a single key, the code in module_lock.cpp will never restore the original param value on release.\n</li></ul>\n\n<p></p><hr/>\n<em>2016-Jul-11 21:45:53 by bbockelm:</em> <br/>\n\nHi TJ,\n\n<p>Thanks for the close look.  I have to admit: the various side-effects of the param APIs are pretty difficult to derive.  Some documentation of the internals would be much appreciated.\n\n</p><p>For the last item (<code>SecManWrapper::setConfig</code>) - if you'll be tackling that, could you write a unit test too?</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-29 00:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/f9b16523e0210ce162d69998db4d940a107aa634\">[48869]</a></span>: Version history for python bindings per-thread secuirty context <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=5632\" onclick=\"get_ticket_and_populate_wrapper('5632'); return false;\" title=\"Managing per-thread security configs in python\">#5632</a></span>  (By zmiller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-15 14:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/2ee278b222b1ddfde703a4629055cae81641b452\">[48795]</a></span>: for <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=5632\" onclick=\"get_ticket_and_populate_wrapper('5632'); return false;\" title=\"Managing per-thread security configs in python\">#5632</a></span>, dont fetch thread local values if we've never initialized them  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-13 13:23</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/21044403c0f85d3c8b5ff96b93bdcdf5125e276a\">[48781]</a></span>: fix for <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=5632\" onclick=\"get_ticket_and_populate_wrapper('5632'); return false;\" title=\"Managing per-thread security configs in python\">#5632</a></span>, switch the secman tag before querying the session cache from python bindings.  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-13 12:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/8a65d23a7539a451f1b0ff1a734b32b10521d2ea\">[48778]</a></span>: fix uninitialized member in previous patch to <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=5632\" onclick=\"get_ticket_and_populate_wrapper('5632'); return false;\" title=\"Managing per-thread security configs in python\">#5632</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-12 14:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/2842a6c0a56b5f1d923049b76df0e64ec9885d1f\">[48768]</a></span>: fix for <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=5632\" onclick=\"get_ticket_and_populate_wrapper('5632'); return false;\" title=\"Managing per-thread security configs in python\">#5632</a></span> after merge to 8.5.6 release branch. changes need to account for config rectoring in the mainline branch that the work branch did not have.  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-12 10:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/7804a4bd0f97243041367418c4eda09f083153d7\">[48766]</a></span>: fixes for <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=5632\" onclick=\"get_ticket_and_populate_wrapper('5632'); return false;\" title=\"Managing per-thread security configs in python\">#5632</a></span> from code review. fixed windows build fixed leak in param table by switching to set_live_param_value allocate a TLS slot before using thread local storage don't set/restore secman values if they were never set by the python script.  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-10 13:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/f962f164534a247e859cce2be41a5239e39caeac\">[48758]</a></span>: Fixups from code review. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=5632\" onclick=\"get_ticket_and_populate_wrapper('5632'); return false;\" title=\"Managing per-thread security configs in python\">#5632</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Apr-18 13:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/09e52183eded191e83263b95cc2d4c97150b5535\">[48222]</a></span>: Provide per-thread security settings in python. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=5632\" onclick=\"get_ticket_and_populate_wrapper('5632'); return false;\" title=\"Managing per-thread security configs in python\">#5632</a></span> This extends the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SecMan\" title=\"Sec Man\">SecMan</a></span> object in python to operate as a python context manager. When active, code within the block will have its own security settings.  (By Brian )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2016-Jul-29 10:35", "status": "resolved", "created": "2016-Apr-15 14:34", "fixed_version": "2016-Apr-15 14:34", "broken_version": "", "priority": "3", "subsystem": "Security", "assigned_to": "zmiller", "derived_from": "#5162", "creator": "bbockelm", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "bbockelm@cse.unl.edu tannenba@cs.wisc.edu johnkn@cs.wisc.edu", "due_date": ""}