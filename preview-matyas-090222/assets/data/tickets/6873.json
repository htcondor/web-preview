{"id": 6873, "title": "Ticket #6873: Starter RPC stubs handle disconnection poorly", "description": "<blockquote>\nThe stubs in the starter for RPCs to the shadow handle network problems (including disconnection from the shadow) poorly. Some of the stubs will ASSERT(), killing the starter and the job. Others will return 0, which is a valid value for a successful invocation for some RPCs. A job can easily kill the starter by doing a chirp call while the starter and shadow are disconnected.\n\n<p>The send stubs in NTSenders.cpp need to be cleaned up so that a network error is always distinguishable from a successful invocation. An ASSERT() or EXCEPT() in the stubs due to disconnection should be rare or non-existent. The callers should make that decision.\n\n</p><p>The chirp code in the starter and the chirp client should also be reviewed to ensure good handling of errors. Currently, a failure of the get_job_attr chirp command can result in the condor_chirp client printing '(null)' and exit with status 0.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Jan-22 09:52:40 by jfrey:</em> <br/>\n\nThe handling of errno values needs to be improved. The RPC stubs in the starter don't reliably preserve the errno value received from the shadow. Also, the chirp error value OFFLINE isn't used, and would be useful to indicate communication errors.\n\n<p></p><hr/>\n<em>2019-Feb-15 16:46:16 by jfrey:</em> <br/>\n\nWe should also consider having the RPCs force a disconnect when they experience a communication error with the shadow.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Apr-01 16:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4fa641a5cfdf42825564ba762338f5f8cf6f1183\">[56482]</a></span>: Docs for improved chirp error handling. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6873\" onclick=\"get_ticket_and_populate_wrapper('6873'); return false;\" title=\"Starter RPC stubs handle disconnection poorly\">#6873</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Feb-15 16:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/26356ed01f7dae0b4ec32abdb53eb77f22cc410f\">[56201]</a></span>: Use Chirp error OFFLINE to indicate communication errors with shadow. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6873\" onclick=\"get_ticket_and_populate_wrapper('6873'); return false;\" title=\"Starter RPC stubs handle disconnection poorly\">#6873</a></span> When the starter is having trouble talking to the shadow for an RPC, return failure to the client with errno ETIMEDOUT or Chirp error OFFLINE. Also, ensure that RPCs return a negative value on communication errors. Before, some\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Feb-15 16:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/27abb472d3566dd9e3512733d7b1d98f57cac672\">[56202]</a></span>: Cleanup error handling in starter RPCs to the shadow. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6873\" onclick=\"get_ticket_and_populate_wrapper('6873'); return false;\" title=\"Starter RPC stubs handle disconnection poorly\">#6873</a></span> RPCs now have an explicit early-out with a log message when disconnected from the shadow. They all now return failure on a communication error instead of calling ASSERT(). The callers should be responsible for deciding how to handle failures.\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2019-Apr-01 16:55", "status": "resolved", "created": "2019-Jan-18 11:50", "fixed_version": "2019-Jan-18 11:50", "broken_version": "", "priority": "3", "subsystem": "DaemonsExecNode", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}