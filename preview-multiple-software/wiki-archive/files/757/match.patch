diff -rNup condor-7.9.1.orig/src/condor_negotiator.V6/matchmaker.cpp condor-7.9.1/src/condor_negotiator.V6/matchmaker.cpp
--- condor-7.9.1.orig/src/condor_negotiator.V6/matchmaker.cpp	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_negotiator.V6/matchmaker.cpp	2013-06-19 10:25:30.186146919 -0400
@@ -1538,13 +1538,31 @@ negotiationTime ()
                         negotiateWithGroup(cPoolsize, weightedPoolsize, minSlotWeight,
                                            startdAds, claimIds, *(group->submitterAds),
                                            slots, NULL);
+					   
+                    } else if (group->parent && group->parent->accept_surplus == false ) {
+		       if (group->parent->childrenUsage < group->parent->childrenAllocated){
+				if (slots > group->parent->childrenAllocated - group->parent->childrenUsage) {
+			 		slots = std::max((double)0.0,group->parent->childrenAllocated-group->parent->childrenUsage);
+					dprintf(D_ALWAYS, "Group %s - Parent quota bounded slots to %g (usage=%g)\n", group->name.c_str(), slots, group->usage);
+					}
+
+                        	negotiateWithGroup(cPoolsize, weightedPoolsize, minSlotWeight,
+                                           startdAds, claimIds, *(group->submitterAds), 
+                                           slots, group->name.c_str());
+			} else {
+			
+				dprintf(D_ALWAYS, "Group %s - Parent quota bounds slots to 0. Skipping negotiation.(usage=%g)\n", group->name.c_str(), group->usage);
+			}
                     } else {
-                        negotiateWithGroup(cPoolsize, weightedPoolsize, minSlotWeight,
+		    
+		             	negotiateWithGroup(cPoolsize, weightedPoolsize, minSlotWeight,
                                            startdAds, claimIds, *(group->submitterAds), 
                                            slots, group->name.c_str());
-                    }
-                }
-
+		    
+		    
+		    }
+              
+		}
                 // Halt when we have negotiated with full deltas
                 if (n >= maxdelta) break;
             }
@@ -1855,7 +1873,8 @@ double Matchmaker::hgq_fairshare(GroupEn
 
     // Allocate whichever is smallest: the requested slots or group quota.
     group->allocated = std::min(group->requested, group->quota);
-
+    group->childrenAllocated = 0;
+    group->childrenUsage = 0;
     // update requested values
     group->requested -= group->allocated;
     group->subtree_requested = group->requested;
@@ -1876,13 +1895,15 @@ double Matchmaker::hgq_fairshare(GroupEn
         if (child->accept_surplus) {
             group->subtree_requested += child->subtree_requested;
         }
+	group->childrenUsage += child->usage;
+
     }
 
     // allocate any available surplus to current node and subtree
     surplus = hgq_allocate_surplus(group, surplus);
 
-    dprintf(D_FULLDEBUG, "group quotas: fairshare (3): group= %s  surplus= %g  subtree_requested= %g\n", 
-            group->name.c_str(), surplus, group->subtree_requested);
+    dprintf(D_FULLDEBUG, "group quotas: fairshare (3): group= %s  surplus= %g  subtree_requested= %g childrenUsage= %g childrenAllocated= %g \n", 
+            group->name.c_str(), surplus, group->subtree_requested,group->childrenUsage,group->childrenAllocated);
 
     // return any remaining surplus up the tree
     return surplus;
@@ -1990,6 +2011,7 @@ double Matchmaker::hgq_allocate_surplus(
             if (grp->accept_surplus && (grp->subtree_requested > 0)) {
                 allocated[j] = grp->subtree_requested;
             }
+
         }
 
         surplus -= requested;
@@ -2032,6 +2054,7 @@ double Matchmaker::hgq_allocate_surplus(
                 dprintf(D_ALWAYS, "group quotas: WARNING: allocate-surplus (3): surplus= %g\n", s);
             }
         }
+	group->childrenAllocated += allocated[j];
     }
 
     // Here is logic for allocating current group
@@ -2237,7 +2260,9 @@ GroupEntry::GroupEntry():
     parent(NULL),
     children(),
     chmap(),
-    sort_ad(new ClassAd())
+    sort_ad(new ClassAd()),
+    childrenUsage(0),
+    childrenAllocated(0)
 {
 }
 
diff -rNup condor-7.9.1.orig/src/condor_negotiator.V6/matchmaker.h condor-7.9.1/src/condor_negotiator.V6/matchmaker.h
--- condor-7.9.1.orig/src/condor_negotiator.V6/matchmaker.h	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_negotiator.V6/matchmaker.h	2013-06-19 10:24:39.227930138 -0400
@@ -61,11 +61,13 @@ struct GroupEntry {
 
     // current usage information coming into this negotiation cycle
     double usage;
+    double childrenUsage;
     ClassAdListDoesNotDeleteAds* submitterAds;
     double priority;
 
     // slot quota as computed by HGQ
     double quota;
+    double childrenAllocated;
     // slots requested: jobs submitted against this group
     double requested;
     // slots allocated to this group by HGQ
