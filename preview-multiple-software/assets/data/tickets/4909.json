{"id": 4909, "title": "Ticket #4909: Make tear-down methods safe to call after DaemonCore is deleted", "description": "<blockquote>\nWe have code that executes at process exit (like destructors for global objects) that may try to cancel things registered with <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span>. If DC_Exit() has been called, then <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> has been deleted at this point, which can lead to a crash. To avoid this, we can make <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> cancel methods return immediately if 'this' is NULL.\n\n<p>Changes for <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=4773\" onclick=\"get_ticket_and_populate_wrapper('4773'); return false;\" title=\"CLASSAD_USER_LIBS for python\">#4773</a></span> exposed an instance of this in the starter. The CStarter object there is a global object that ends up calling daemonCore-&gt;Cancel_Timer() upon destruction (via JICLocalSchedd and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=BaseUserPolicy\" title=\"Base User Policy\">BaseUserPolicy</a></span>) when running a local universe job. At present, this only affects Windows, since we call _exit() on all unix platforms, which skips exit-time cleanup code (to be fixed). Prior to <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=4773\" onclick=\"get_ticket_and_populate_wrapper('4773'); return false;\" title=\"CLASSAD_USER_LIBS for python\">#4773</a></span>, the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TimerManager\" title=\"Timer Manager\">TimerManager</a></span> object was a static member of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span>, so Cancel_Timer() didn't look at 'this'. Now, the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> object has a reference to the singleton <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TimerManager\" title=\"Timer Manager\">TimerManager</a></span>, and Cancel_Timer() references it through 'this'.</p></blockquote>", "remarks": "<blockquote>\n<em>2015-Apr-23 22:37:54 by bbockelm:</em> <br/>\n\nI think this does not work with modern clang (and I'm assuming modern gcc).\n\n<p>From clang's output (v3.6.0):\n\n</p><p></p><div class=\"verbatim\">\n<pre>/Users/bbockelm/projects/condor/src/condor_daemon_core.V6/daemon_core.cpp:2181:7: warning: 'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to false [-Wtautological-undefined-compare]\n        if ( this == NULL ) {\n</pre></div>\n\n\n<p>I think clang determines this check is always false and removes the <code>if</code> statement.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-25 14:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/9c87e8c9a568b5c9b533a27b1e9b3a9ba83e8f42\">[43725]</a></span>: minor 8.3.5 version history item edit <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=4909\" onclick=\"get_ticket_and_populate_wrapper('4909'); return false;\" title=\"Make tear-down methods safe to call after DaemonCore is deleted\">#4909</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Feb-24 11:31</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/eeafb5e9be9ef7dcd8c45650f4d313b2e17c332b\">[43454]</a></span>: Version history for local universe broken on windows. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=4909\" onclick=\"get_ticket_and_populate_wrapper('4909'); return false;\" title=\"Make tear-down methods safe to call after DaemonCore is deleted\">#4909</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Feb-24 11:31</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/840fab8577a6a760d76bc81142ec36c72f164b85\">[43453]</a></span>: Make tear-down methods safe to call after <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> is deleted. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=4909\" onclick=\"get_ticket_and_populate_wrapper('4909'); return false;\" title=\"Make tear-down methods safe to call after DaemonCore is deleted\">#4909</a></span> We may have global objects that try to call <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> cancel methods in their destructors. There's one in the starter that cancels a timer for user job policy evaluation. But the daemonCore object will already be gone, so the process\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2015-Apr-23 22:37", "status": "resolved", "created": "2015-Feb-23 14:40", "fixed_version": "2015-Feb-23 14:40", "broken_version": "v080303", "priority": "3", "subsystem": "Libs", "assigned_to": "jfrey", "derived_from": "#4773", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}