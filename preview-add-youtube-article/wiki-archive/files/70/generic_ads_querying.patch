diff --git a/src/condor_c++_util/condor_query.cpp b/src/condor_c++_util/condor_query.cpp
index fcfdfb0..adc975e 100644
--- a/src/condor_c++_util/condor_query.cpp
+++ b/src/condor_c++_util/condor_query.cpp
@@ -463,7 +463,7 @@ fetchAds (ClassAdList &adList, const char *poolName, CondorError* errstack)
 	  case GENERIC_AD:
 		  // For now, at least, there is no separate QUERY_GENERIC_ADS
 		  // command, so send the ANY_ADTYPE
-		queryAd.SetTargetTypeName (ANY_ADTYPE);
+		queryAd.SetTargetTypeName (GENERIC_ADTYPE);
 		break;
 
 	  case XFER_SERVICE_AD:
diff --git a/src/condor_collector.V6/collector.cpp b/src/condor_collector.V6/collector.cpp
index bdc207f..5d18d4e 100644
--- a/src/condor_collector.V6/collector.cpp
+++ b/src/condor_collector.V6/collector.cpp
@@ -171,6 +171,8 @@ void CollectorDaemon::Init()
 		(CommandHandler)receive_query_cedar,"receive_query_cedar",NULL,READ);
     daemonCore->Register_Command(QUERY_GRID_ADS,"QUERY_GRID_ADS",
 		(CommandHandler)receive_query_cedar,"receive_query_cedar",NULL,READ);
+	daemonCore->Register_Command(QUERY_GENERIC_ADS,"QUERY_GENERIC_ADS",
+		(CommandHandler)receive_query_cedar,"receive_query_cedar",NULL,READ);
 	
 		// // // // // // // // // // // // // // // // // // // // //
 		// WARNING!!!! If you add other invalidate commands here, you
@@ -497,13 +499,10 @@ CollectorDaemon::receive_query_public( int command )
 		whichAds = LEASE_MANAGER_AD;
 		break;
 
-#   if 0
-		// This is disabled because QUERY_GENERIC_ADS == QUERY_ANY_ADS
 	  case QUERY_GENERIC_ADS:
 		dprintf (D_FULLDEBUG,"Got QUERY_GENERIC_ADS\n");
-		whichAds = LEASE_MANAGER_AD;
+		whichAds = GENERIC_AD;
 		break;
-#   endif
 
 	  case QUERY_ANY_ADS:
 		dprintf (D_FULLDEBUG,"Got QUERY_ANY_ADS\n");
@@ -957,6 +956,7 @@ CollectorDaemon::sockCacheHandler( Service*, Stream* sock )
 	case INVALIDATE_LICENSE_ADS:
 	case INVALIDATE_STORAGE_ADS:
     case INVALIDATE_GRID_ADS:
+	case INVALIDATE_ADS_GENERIC:
 		return receive_invalidation( NULL, cmd, sock );
 		break;
 
@@ -1068,8 +1068,8 @@ void CollectorDaemon::process_invalidation (AdTypes whichAds, ClassAd &query, St
 	__numAds__ = 0;
 
 	// first set all the "LastHeardFrom" attributes to low values ...
-	AdTypes queryAds = (whichAds == GENERIC_AD) ? ANY_AD : whichAds;
-	collector.walkHashTable (queryAds, invalidation_scanFunc);
+//	AdTypes queryAds = (whichAds == GENERIC_AD) ? ANY_AD : whichAds;
+	collector.walkHashTable (whichAds, invalidation_scanFunc);
 
 	// ... then invoke the housekeeper
 	collector.invokeHousekeeper (whichAds);
diff --git a/src/condor_collector.V6/collector_engine.cpp b/src/condor_collector.V6/collector_engine.cpp
index b433fa8..ab99e44 100644
--- a/src/condor_collector.V6/collector_engine.cpp
+++ b/src/condor_collector.V6/collector_engine.cpp
@@ -360,6 +360,9 @@ walkHashTable (AdTypes adType, int (*scanFunction)(ClassAd *))
 		table = &LeaseManagerAds;
 		break;
 
+	  case GENERIC_AD:
+		return walkGenericTables(scanFunction);
+
 	  case ANY_AD:
 		return
 			StorageAds.walk(scanFunction) &&
@@ -908,6 +911,7 @@ collect (int command,ClassAd *clientAd,sockaddr_in *from,int &insert,Sock *sock)
   	  case QUERY_HAD_ADS:
   	  case QUERY_XFER_SERVICE_ADS:
   	  case QUERY_LEASE_MANAGER_ADS:
+	  case QUERY_GENERIC_ADS:
 	  case INVALIDATE_STARTD_ADS:
 	  case INVALIDATE_SCHEDD_ADS:
 	  case INVALIDATE_MASTER_ADS:
@@ -919,6 +923,7 @@ collect (int command,ClassAd *clientAd,sockaddr_in *from,int &insert,Sock *sock)
 	  case INVALIDATE_HAD_ADS:
 	  case INVALIDATE_XFER_SERVICE_ADS:
 	  case INVALIDATE_LEASE_MANAGER_ADS:
+	  case INVALIDATE_ADS_GENERIC:
 		// these are not implemented in the engine, but we allow another
 		// daemon to detect that these commands have been given
 	    insert = -2;
diff --git a/src/condor_daemon_client/daemon.cpp b/src/condor_daemon_client/daemon.cpp
index 7b06533..75b21aa 100644
--- a/src/condor_daemon_client/daemon.cpp
+++ b/src/condor_daemon_client/daemon.cpp
@@ -873,18 +873,24 @@ Daemon::locate( void )
 	case DT_ANY:
 		// don't do anything
 		rval = true;
+	case DT_GENERIC:
+		rval = getDaemonInfo( GENERIC_AD );
 		break;
 	case DT_CLUSTER:
-		rval = getDaemonInfo( "CLUSTER", CLUSTER_AD );
+		setSubsystem( "CLUSTER" );
+		rval = getDaemonInfo( CLUSTER_AD );
 		break;
 	case DT_SCHEDD:
-		rval = getDaemonInfo( "SCHEDD", SCHEDD_AD );
+		setSubsystem( "SCHEDD" );
+		rval = getDaemonInfo( SCHEDD_AD );
 		break;
 	case DT_STARTD:
-		rval = getDaemonInfo( "STARTD", STARTD_AD );
+		setSubsystem( "STARTD" );
+		rval = getDaemonInfo( STARTD_AD );
 		break;
 	case DT_MASTER:
-		rval = getDaemonInfo( "MASTER", MASTER_AD );
+		setSubsystem( "MASTER" );
+		rval = getDaemonInfo( MASTER_AD );
 		break;
 	case DT_COLLECTOR:
 		rval = getCmInfo( "COLLECTOR" );
@@ -900,14 +906,17 @@ Daemon::locate( void )
 		} else {
 				// cool, no NEGOTIATOR_HOST, we can treat it just like
 				// any other daemon 
-			rval = getDaemonInfo ( "NEGOTIATOR", NEGOTIATOR_AD );
+	  		setSubsystem( "NEGOTIATOR" );
+			rval = getDaemonInfo ( NEGOTIATOR_AD );
 		}
 		break;
 	case DT_CREDD:
-	  rval = getDaemonInfo( "CREDD", CREDD_AD );
+	  setSubsystem( "CREDD" );
+	  rval = getDaemonInfo( CREDD_AD );
 	  break;
 	case DT_STORK:
-	  rval = getDaemonInfo( "STORK", ANY_AD, false );
+	  setSubsystem( "STORK" );
+	  rval = getDaemonInfo( ANY_AD, false );
 	  break;
 	case DT_VIEW_COLLECTOR:
 		if( (rval = getCmInfo("CONDOR_VIEW")) ) {
@@ -919,13 +928,16 @@ Daemon::locate( void )
 		rval = getCmInfo( "COLLECTOR" ); 
 		break;
 	case DT_QUILL:
-		rval = getDaemonInfo( "QUILL", SCHEDD_AD );
+		setSubsystem( "QUILL" );
+		rval = getDaemonInfo( SCHEDD_AD );
 		break;
 	case DT_TRANSFERD:
-		rval = getDaemonInfo( "TRANSFERD", ANY_AD );
+		setSubsystem( "TRANSFERD" );
+		rval = getDaemonInfo( ANY_AD );
 		break;
 	case DT_LEASE_MANAGER:
-		rval = getDaemonInfo( "LEASEMANAGER", LEASE_MANAGER_AD, true );
+		setSubsystem( "LEASEMANAGER" );
+		rval = getDaemonInfo( LEASE_MANAGER_AD, true );
 		break;
 	default:
 		EXCEPT( "Unknown daemon type (%d) in Daemon::init", (int)_type );
@@ -961,17 +973,29 @@ Daemon::locate( void )
 
 
 bool
-Daemon::getDaemonInfo( const char* subsys, AdTypes adtype, bool query_collector)
+Daemon::setSubsystem( const char* subsys )
+{
+	if( _subsys ) {
+		delete [] _subsys;
+	}
+	_subsys = strnewp( subsys );
+
+	return true;
+}
+
+
+bool
+Daemon::getDaemonInfo( AdTypes adtype, bool query_collector )
 {
 	MyString			buf;
 	char				*tmp, *my_name;
 	char				*host = NULL;
 	bool				nameHasPort = false;
 
-	if( _subsys ) {
-		delete [] _subsys;
+	if ( ! _subsys ) {
+		dprintf( D_ALWAYS, "Unable to get daemon information because no subsystem specified\n");
+		return false;
 	}
-	_subsys = strnewp( subsys );
 
 	if( _addr && is_valid_sinful(_addr) ) {
 		dprintf( D_HOSTNAME, "Already have address, no info to locate\n" );
@@ -982,7 +1006,7 @@ Daemon::getDaemonInfo( const char* subsys, AdTypes adtype, bool query_collector)
 		// If we were not passed a name or an addr, check the
 		// config file for a subsystem_HOST, e.g. SCHEDD_HOST=XXXX
 	if( ! _name  && !_pool ) {
-		buf.sprintf( "%s_HOST", subsys );
+		buf.sprintf( "%s_HOST", _subsys );
 		char *specified_host = param( buf.Value() );
 		if ( specified_host ) {
 				// Found an entry.  Use this name.
@@ -1113,9 +1137,9 @@ Daemon::getDaemonInfo( const char* subsys, AdTypes adtype, bool query_collector)
 		// address of the daemon in question.
 
 	if( _is_local ) {
-		bool foundLocalAd = readLocalClassAd( subsys );
+		bool foundLocalAd = readLocalClassAd( _subsys );
 		if(!foundLocalAd) {
-			readAddressFile( subsys );
+			readAddressFile( _subsys );
 		}
 	}
 
@@ -1153,6 +1177,10 @@ Daemon::getDaemonInfo( const char* subsys, AdTypes adtype, bool query_collector)
 				*/
 			buf.sprintf( "%s == \"%s\"", ATTR_MACHINE, _full_hostname ); 
 			query.addANDConstraint( buf.Value() );
+		} else if ( _type == DT_GENERIC ) {
+			query.setGenericQueryType(_subsys);
+			buf.sprintf("TARGET.%s == \"%s\"", ATTR_TARGET_TYPE, _subsys);
+			query.addANDConstraint( buf.Value() );
 		} else if ( _name ) {
 			buf.sprintf( "%s == \"%s\"", ATTR_NAME, _name ); 
 			query.addANDConstraint( buf.Value() );
@@ -1220,10 +1248,7 @@ Daemon::getCmInfo( const char* subsys )
 	char* tmp;
 	struct in_addr sin_addr;
 
-	if( _subsys ) {
-		delete [] _subsys;
-	}
-	_subsys = strnewp( subsys );
+	setSubsystem( subsys );
 
 	if( _addr && is_valid_sinful(_addr) ) {
 			// only consider addresses w/ a non-zero port "valid"...
diff --git a/src/condor_daemon_client/daemon.h b/src/condor_daemon_client/daemon.h
index b3a0797..d04257e 100644
--- a/src/condor_daemon_client/daemon.h
+++ b/src/condor_daemon_client/daemon.h
@@ -508,6 +508,13 @@ public:
 		 **/
 	bool getTimeOffsetRange( long &min_range, long &max_range );
 
+		/**
+		 * Set the name of the subsystem
+		 *
+		 * @param subsys - The subsystem string for this daemon
+		 **/
+	bool setSubsystem( const char* subsys );
+
 protected:
 	// Data members
 
@@ -553,11 +560,10 @@ protected:
 		  This does all the real work of finding the right address,
 		  port, ip_addr, etc.  We check for address files, and query
 		  the appropriate collector if that doesn't work.
-		  @param subsys The subsystem string for this daemon
 		  @param adtype The type of ClassAd we'll query.
 		  @parma query_collector Whether to query collector if all else fails
 		  */
-	bool getDaemonInfo( const char* subsys, AdTypes adtype, bool query_collector = true );
+	bool getDaemonInfo( AdTypes adtype, bool query_collector = true );
 
 		/** Helper for central manager daemons (collector and
 		  negotiator).  These are a special case since they have
diff --git a/src/condor_daemon_client/daemon_types.cpp b/src/condor_daemon_client/daemon_types.cpp
index 488b726..398f796 100644
--- a/src/condor_daemon_client/daemon_types.cpp
+++ b/src/condor_daemon_client/daemon_types.cpp
@@ -39,7 +39,8 @@ static const char* daemon_names[] = {
 	"stork",
 	"quill",
 	"transferd",
-	"lease_manager"
+	"lease_manager",
+	"generic"
 };
 
 extern "C" {
diff --git a/src/condor_daemon_client/daemon_types.h b/src/condor_daemon_client/daemon_types.h
index eeef459..3899bab 100644
--- a/src/condor_daemon_client/daemon_types.h
+++ b/src/condor_daemon_client/daemon_types.h
@@ -28,7 +28,7 @@ enum daemon_t { DT_NONE, DT_ANY,  DT_MASTER, DT_SCHEDD, DT_STARTD,
 				DT_COLLECTOR, DT_NEGOTIATOR, DT_KBDD, 
 				DT_DAGMAN, DT_VIEW_COLLECTOR, DT_CLUSTER,  
 				DT_SHADOW, DT_STARTER, DT_CREDD, DT_STORK, DT_QUILL,
-				DT_TRANSFERD, DT_LEASE_MANAGER,
+				DT_TRANSFERD, DT_LEASE_MANAGER, DT_GENERIC,
 				_dt_threshold_ };
 
 #ifdef __cplusplus
diff --git a/src/condor_includes/condor_commands.h b/src/condor_includes/condor_commands.h
index a64497e..f336c23 100644
--- a/src/condor_includes/condor_commands.h
+++ b/src/condor_includes/condor_commands.h
@@ -283,7 +283,8 @@ const int UPDATE_LEASE_MANAGER_AD		= 64;
 const int QUERY_LEASE_MANAGER_ADS		= 65;
 const int INVALIDATE_LEASE_MANAGER_ADS  = 66;
 
-const int QUERY_GENERIC_ADS = QUERY_ANY_ADS;	// == 48
+//const int QUERY_GENERIC_ADS = QUERY_ANY_ADS;	// == 48
+const int QUERY_GENERIC_ADS = 73;	// == 48
 
 const int CCB_REGISTER = 67;
 const int CCB_REQUEST = 68;
diff --git a/src/condor_job_router/Scheduler.cpp b/src/condor_job_router/Scheduler.cpp
index 0fa6cff..0e0280c 100644
--- a/src/condor_job_router/Scheduler.cpp
+++ b/src/condor_job_router/Scheduler.cpp
@@ -51,8 +51,8 @@ Scheduler::InitPublicAd() {
 	//Until then, actual writes to the collector are disabled,
 	//because it conflicts with the schedd on the same host..
 
-	m_public_ad.SetMyTypeName( SCHEDD_ADTYPE );
-	m_public_ad.SetTargetTypeName( "" );
+	m_public_ad.SetMyTypeName( GENERIC_ADTYPE );
+	m_public_ad.SetTargetTypeName( "Job_Router" );
 
 	m_public_ad.Assign(ATTR_NAME,m_name.c_str());
 
@@ -145,10 +145,10 @@ Scheduler::TimerHandler_JobLogPolling() {
 
 void
 Scheduler::TimerHandler_UpdateCollector() {
-	//daemonCore->sendUpdates(UPDATE_SCHEDD_AD, &m_public_ad);
+	daemonCore->sendUpdates(UPDATE_AD_GENERIC, &m_public_ad);
 }
 
 void
 Scheduler::InvalidatePublicAd() {
-	//daemonCore->sendUpdates(INVALIDATE_SCHEDD_ADS, &m_public_ad);
+	daemonCore->sendUpdates(INVALIDATE_ADS_GENERIC, &m_public_ad);
 }
diff --git a/src/condor_status.V6/status.cpp b/src/condor_status.V6/status.cpp
index 289efad..5f379ce 100644
--- a/src/condor_status.V6/status.cpp
+++ b/src/condor_status.V6/status.cpp
@@ -182,6 +182,13 @@ main (int argc, char *argv[])
 	  case MODE_OTHER:
 			// tell the query object what the type we're querying is
 		query->setGenericQueryType(genericType);
+		if(genericType) {
+			sprintf( buffer, "TARGET.%s == \"%s\"", ATTR_TARGET_TYPE, genericType);
+			if (diagnose) {
+				printf ("Adding constraint [%s]\n", buffer);
+			}
+			query->addANDConstraint (buffer);
+		}
 		free(genericType);
 		genericType = NULL;
 		break;
@@ -233,7 +240,7 @@ main (int argc, char *argv[])
 		}
 		query->addANDConstraint (buffer);
 	}
-									
+
 	// second pass:  add regular parameters and constraints
 	if (diagnose) {
 		printf ("----------\n");
diff --git a/src/condor_tools/tool.cpp b/src/condor_tools/tool.cpp
index 63304bd..21c6c14 100644
--- a/src/condor_tools/tool.cpp
+++ b/src/condor_tools/tool.cpp
@@ -676,7 +676,7 @@ main( int argc, char *argv[] )
 						subsys_arg = *tmp;
 						dt = stringToDaemonType(subsys_arg);
 						if( dt == DT_NONE ) {
-							dt = DT_ANY;
+							dt = DT_GENERIC;
 						}
 					} else {
 						fprintf( stderr, 
@@ -723,7 +723,7 @@ main( int argc, char *argv[] )
 		// that we know the true target daemon type for whatever
 		// command we're using, want the real string to use.
 	if( subsys ) {
-		if( dt == DT_ANY && subsys_arg ) {
+		if( (dt == DT_ANY || dt == DT_GENERIC) && subsys_arg ) {
 			subsys = subsys_arg; 
 		} else { 
 			subsys = daemonString( dt );
@@ -896,6 +896,9 @@ doCommands(int /*argc*/,char * argv[],char *MyName)
 			// to talk to a remote pool, they just want to send their
 			// command to the local host. 
 		Daemon local_d( real_dt, NULL );
+		if( real_dt == DT_GENERIC ) {
+			local_d.setSubsystem( subsys );
+		}
 		if( ! local_d.locate() ) {
 			if( IgnoreMissingDaemon ) {
 				return 0;
