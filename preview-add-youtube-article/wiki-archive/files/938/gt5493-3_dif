diff --git a/doc/man-pages/condor_submit_dag.tex b/doc/man-pages/condor_submit_dag.tex
index b58a2de..63a2b72 100644
--- a/doc/man-pages/condor_submit_dag.tex
+++ b/doc/man-pages/condor_submit_dag.tex
@@ -233,10 +233,19 @@ as the value of \MacroNI{DAGMAN\_SUPPRESS\_NOTIFICATION} is enforced.
     conflict.
   }
   \OptItem{\OptArg{-batch-name}{batch\_name}}{
-    Set the batch name for this DAG.
+    Set the batch name for this DAG/workflow.
     The batch name is displayed by \Condor{q} \Opt{-batch}.  It is intended
     for use by users to give meaningful names to their workflows and to
-    influence how \Condor{q} groups jobs for display.
+    influence how \Condor{q} groups jobs for display.  As of version
+    8.5.5, the batch name set with this argument is propagated to all
+    node jobs of the given DAG (including sub-DAGs), overriding any
+    batch names set in the individual submit files.  Note: set the
+    batch name to ' ' (space) to avoid overriding batch names specfied
+    in node job submit files.  If no batch name is set, the batch
+    name defaults to \Arg{DagFile}+\Arg{cluster} (where \Arg{DagFile}
+    is the primary DAG file of the top-level DAGMan, and \Arg{cluster}
+    is the HTCondor cluster of the top-level DAGMan); the default
+    \emph{will} override any lower-level batch names.
   }
   \OptItem{\OptArg{-autorescue}{0|1}}{Whether to automatically run the
     newest rescue DAG for the given DAG file, if one exists
diff --git a/doc/version-history/8-5.history.tex b/doc/version-history/8-5.history.tex
index 63ba2a3..8586750 100644
--- a/doc/version-history/8-5.history.tex
+++ b/doc/version-history/8-5.history.tex
@@ -29,7 +29,20 @@ The details of each version are described below.
 
 \begin{itemize}
 
-\item None.
+\item A batch name specified for a DAG (with the \Condor{submit\_dag}
+\Opt{-batch-name} option) is now propagated to all jobs of that DAG,
+including sub-DAGs.
+\Ticket{5493}
+
+\item The batch name for a \Condor{dagman} job (if not set) now
+defaults to \Arg{DagFile}+\Arg{cluster} (where \Arg{DagFile}
+is the primary DAG file of the \Condor{dagman} job, and \Arg{cluster}
+is the HTCondor cluster of the \Condor{dagman} job).
+Because the batch name is now propagated throughout a workflow, if
+no batch name is specified, the batch name for all jobs in the
+workflow will be \Arg{DagFile}+\Arg{cluster} of the top-level
+\Condor{dagman} job.
+\Ticket{5605}
 
 \end{itemize}
 
diff --git a/src/condor_dagman/condor_submit_dag.cpp b/src/condor_dagman/condor_submit_dag.cpp
index 7d2d8b4..3f37131 100644
--- a/src/condor_dagman/condor_submit_dag.cpp
+++ b/src/condor_dagman/condor_submit_dag.cpp
@@ -691,8 +691,9 @@ void writeSubmitFile( /* const */ SubmitDagDeepOptions &deepOpts,
 	fprintf(pSubFile, "output\t\t= %s\n", shallowOpts.strLibOut.Value());
     fprintf(pSubFile, "error\t\t= %s\n", shallowOpts.strLibErr.Value());
     fprintf(pSubFile, "log\t\t= %s\n", shallowOpts.strSchedLog.Value());
-	if ( ! deepOpts.batchName.empty()) {
-		fprintf(pSubFile, "+JobBatchName\t= \"%s\"\n", deepOpts.batchName.c_str());
+	if ( ! deepOpts.batchName.empty() ) {
+		fprintf(pSubFile, "+%s\t= \"%s\"\n", ATTR_JOB_BATCH_NAME,
+					deepOpts.batchName.c_str());
 	}
 #if !defined ( WIN32 )
     fprintf(pSubFile, "remove_kill_sig\t= SIGUSR1\n" );
diff --git a/src/condor_dagman/dag.cpp b/src/condor_dagman/dag.cpp
index e233123..aa3d8a2 100644
--- a/src/condor_dagman/dag.cpp
+++ b/src/condor_dagman/dag.cpp
@@ -3971,11 +3971,23 @@ Dag::SubmitNodeJob( const Dagman &dm, Job *node, CondorID &condorID )
 			// to condor_submit(), fixes a memory leak(!).
 			// wenger 2008-12-18
 		MyString parents = ParentListString( node );
+
+			// This is to allow specifying a top-level batch name of
+			// " " to *not* override batch names specified at a lower
+			// level.
+		const char *batchName;
+		if ( !node->GetDagFile() && dm._batchName == " " ) {
+			batchName = "";
+		} else {
+			batchName = dm._batchName.Value();
+		}
+
    		submit_success = condor_submit( dm, node->GetCmdFile(), condorID,
 					node->GetJobName(), parents,
 					node->varsFromDag, node->GetRetries(),
 					node->GetDirectory(), _defaultNodeLog,
-					node->NumChildren() > 0 && dm._claim_hold_time > 0 );
+					node->NumChildren() > 0 && dm._claim_hold_time > 0,
+					batchName );
 	}
 
 	result = submit_success ? SUBMIT_RESULT_OK : SUBMIT_RESULT_FAILED;
diff --git a/src/condor_dagman/dagman_classad.cpp b/src/condor_dagman/dagman_classad.cpp
index 8aeac26..a242dc6 100644
--- a/src/condor_dagman/dagman_classad.cpp
+++ b/src/condor_dagman/dagman_classad.cpp
@@ -24,6 +24,7 @@
 #include "condor_qmgr.h"
 #include "debug.h"
 #include "dagman_metrics.h"
+#include "basename.h"
 
 //---------------------------------------------------------------------------
 DagmanClassad::DagmanClassad( const CondorID &DAGManJobId ) :
@@ -125,6 +126,37 @@ DagmanClassad::GetInfo( MyString &owner, MyString &nodeName )
 
 //---------------------------------------------------------------------------
 void
+DagmanClassad::GetSetBatchName( const MyString &primaryDagFile,
+			MyString &batchName )
+{
+	if ( !_valid ) {
+		debug_printf( DEBUG_VERBOSE,
+					"Skipping ClassAd query -- DagmanClassad object is invalid\n" );
+		return;
+	}
+
+	Qmgr_connection *queue = OpenConnection();
+	if ( !queue ) {
+		return;
+	}
+
+	if ( !GetDagAttribute( ATTR_JOB_BATCH_NAME, batchName, false ) ) {
+			// Default batch name is top-level DAG's primary
+			// DAG file (base name only).
+		batchName = condor_basename( primaryDagFile.Value() );
+		batchName += "+";
+		batchName += _dagmanId._cluster;
+		SetDagAttribute( ATTR_JOB_BATCH_NAME, batchName );
+	}
+
+	CloseConnection( queue );
+
+	debug_printf( DEBUG_VERBOSE, "Workflow batch-name: <%s>\n",
+				batchName.Value() );
+}
+
+//---------------------------------------------------------------------------
+void
 DagmanClassad::InitializeMetrics()
 {
 
@@ -192,14 +224,29 @@ DagmanClassad::SetDagAttribute( const char *attrName, int attrVal )
 }
 
 //---------------------------------------------------------------------------
+void
+DagmanClassad::SetDagAttribute( const char *attrName, const MyString &value )
+{
+	if ( SetAttributeString( _dagmanId._cluster, _dagmanId._proc,
+						  attrName, value.Value() ) != 0 ) {
+		debug_printf( DEBUG_QUIET,
+					  "WARNING: failed to set attribute %s\n", attrName );
+		check_warning_strictness( DAG_STRICT_3 );
+	}
+}
+
+//---------------------------------------------------------------------------
 bool
-DagmanClassad::GetDagAttribute( const char *attrName, MyString &attrVal )
+DagmanClassad::GetDagAttribute( const char *attrName, MyString &attrVal,
+			bool printWarning )
 {
 	char *val;
 	if ( GetAttributeStringNew( _dagmanId._cluster, _dagmanId._proc,
 				attrName, &val ) != 0 ) {
-		debug_printf( DEBUG_QUIET,
-					  "Warning: failed to get attribute %s\n", attrName );
+		if ( printWarning ) {
+			debug_printf( DEBUG_QUIET,
+					  	"Warning: failed to get attribute %s\n", attrName );
+		}
 		return false;
 	}
 
diff --git a/src/condor_dagman/dagman_classad.h b/src/condor_dagman/dagman_classad.h
index 0bb6d90..d8ddbe1 100644
--- a/src/condor_dagman/dagman_classad.h
+++ b/src/condor_dagman/dagman_classad.h
@@ -60,6 +60,13 @@ class DagmanClassad {
 		*/
 	void GetInfo( MyString &owner, MyString &nodeName );
 
+		/** Get the JobBatchName value from our ClassAd (setting it
+		    to the default if it's not already set).
+			@param batchName: A MyString to receive the JobBatchName value
+		*/
+	void GetSetBatchName( const MyString &primaryDagFile,
+				MyString &batchName );
+
   private:
 		/** Initialize metrics information related to our classad.
 		*/
@@ -82,11 +89,20 @@ class DagmanClassad {
 		*/
 	void SetDagAttribute( const char *attrName, int attrVal );
 
+		/** Set an attribute in this DAGMan's classad.
+			@param attrName The name of the attribute to set.
+			@param attrVal The value of the attribute.
+		*/
+	void SetDagAttribute( const char *attrName, const MyString &value );
+
 		/** Get the specified attribute (string) value from our ClassAd.
 			@param attrName: The name of the attribute.
 			@param attrVal: A MyString to receive the attribute value.
+			@param printWarning: Whether to print a warning if we
+				can't get the requested attribute.
 		*/
-	bool GetDagAttribute( const char *attrName, MyString &attrVal );
+	bool GetDagAttribute( const char *attrName, MyString &attrVal,
+				bool printWarning = true );
 
 		// Whether this object is valid.
 	bool _valid;
diff --git a/src/condor_dagman/dagman_main.cpp b/src/condor_dagman/dagman_main.cpp
index 181625b..c1e0eaa 100644
--- a/src/condor_dagman/dagman_main.cpp
+++ b/src/condor_dagman/dagman_main.cpp
@@ -143,6 +143,7 @@ Dagman::Dagman() :
 	_claim_hold_time(20),
 	_doRecovery(false),
 	_suppressJobLogs(false),
+	_batchName(""),
 	_dagmanClassad(NULL)
 {
     debug_level = DEBUG_VERBOSE;  // Default debug level is verbose output
@@ -863,6 +864,9 @@ void main_init (int argc, char ** const argv) {
 	dagman.primaryDagFile = dagman.dagFiles.next();
 	dagman.multiDags = (dagman.dagFiles.number() > 1);
 
+	dagman._dagmanClassad->GetSetBatchName( dagman.primaryDagFile,
+				dagman._batchName );
+
 	dagman.ResolveDefaultLog();
 
     //
diff --git a/src/condor_dagman/dagman_main.h b/src/condor_dagman/dagman_main.h
index c168cc4..f6c7a06 100644
--- a/src/condor_dagman/dagman_main.h
+++ b/src/condor_dagman/dagman_main.h
@@ -226,6 +226,9 @@ class Dagman {
 		// log files specified in their submit files (see gittrac #4353).
 	bool _suppressJobLogs;
 
+		// Batch-name for this workflow.
+	MyString _batchName;
+
 	DagmanClassad *_dagmanClassad;
 };
 
diff --git a/src/condor_dagman/dagman_submit.cpp b/src/condor_dagman/dagman_submit.cpp
index 7ba112c..9a446c5 100644
--- a/src/condor_dagman/dagman_submit.cpp
+++ b/src/condor_dagman/dagman_submit.cpp
@@ -206,7 +206,7 @@ condor_submit( const Dagman &dm, const char* cmdFile, CondorID& condorID,
 			   const char* DAGNodeName, MyString &DAGParentNodeNames,
 			   List<Job::NodeVar> *vars, int retry,
 			   const char* directory, const char *workflowLogFile,
-			   bool hold_claim )
+			   bool hold_claim, const MyString &batchName )
 {
 	TmpDir		tmpDir;
 	MyString	errMsg;
@@ -251,6 +251,12 @@ condor_submit( const Dagman &dm, const char* cmdFile, CondorID& condorID,
 				dm.DAGManJobId._cluster;
 	args.AppendArg( dagJobIdMacro.Value() );
 
+		// Pass the batch name to lower levels.
+	if ( batchName != "" ) {
+		args.AppendArg( "-batch-name" );
+		args.AppendArg( batchName.Value() );
+	}
+
 	args.AppendArg( "-a" );
 	MyString submitEventNotes = MyString(
 				"submit_event_notes = DAG Node: " ) + DAGNodeName;
diff --git a/src/condor_dagman/submit.h b/src/condor_dagman/submit.h
index f08463a..dd09c29 100644
--- a/src/condor_dagman/submit.h
+++ b/src/condor_dagman/submit.h
@@ -54,7 +54,7 @@ bool condor_submit( const Dagman &dm, const char* cmdFile, CondorID& condorID,
 					const char* DAGNodeName, MyString &DAGParentNodeNames,
 					List<Job::NodeVar> *vars, int retry,
 					const char* directory, const char *worflowLogFile,
-					bool hold_claim );
+					bool hold_claim, const MyString &batchName );
 
 void set_fake_condorID( int subprocID );
 
diff --git a/src/condor_submit.V6/submit.cpp b/src/condor_submit.V6/submit.cpp
index 2039efa..03d322f 100644
--- a/src/condor_submit.V6/submit.cpp
+++ b/src/condor_submit.V6/submit.cpp
@@ -1281,9 +1281,9 @@ main( int argc, const char *argv[] )
 				const char * bname = *ptr;
 				MyString tmp; // if -batch-name was specified, this holds the string 'MY.JobBatchName = "name"'
 				if (*bname == '"') {
-					tmp.formatstr("MY.JobBatchName = %s", bname);
+					tmp.formatstr("MY.%s = %s", ATTR_JOB_BATCH_NAME, bname);
 				} else {
-					tmp.formatstr("MY.JobBatchName = \"%s\"", bname);
+					tmp.formatstr("MY.%s = \"%s\"", ATTR_JOB_BATCH_NAME, bname);
 				}
 				// if batch_name_line is not NULL,  we will leak a bit here, but that's better than
 				// freeing something behind the back of the extraLines
diff --git a/src/condor_tests/CMakeLists.txt b/src/condor_tests/CMakeLists.txt
index 84324aa..b891fa2 100644
--- a/src/condor_tests/CMakeLists.txt
+++ b/src/condor_tests/CMakeLists.txt
@@ -654,6 +654,7 @@ if (BUILD_TESTING)
 	condor_pl_test(job_dagman_submit_glob-B "Test DAG with node jobs using feature, in combination with DAGMAN_PROHIBIT_MULTI_JOBS" "dagman;quick;full;quicknolink")
 	condor_pl_test(job_dagman_set_attr "Test setting ClassAd attrs in DAG file" "dagman;quick;full;quicknolink")
 	condor_pl_test(job_dagman_event_timestamp "Test event timestamps in dagman.out file" "dagman;quick;full;quicknolink")
+	condor_pl_test(job_dagman_batch_name "Test setting & propagation of batch-name" "dagman;quick;full;quicknolink")
 	#condor_pl_test(perf_jobs_sue_10_10_30_van "Generated jobs performance test" "performance;long")
 	#condor_pl_test(perf_xfer_deb_10_10_30_van "Generated transfer performance test" "performance;long")
 	condor_pl_test(job_filexfer_sandbox-empty_van "Are job sandboxes with bad permissions cleaned up?" "framework;quick;full;quicknolink")
diff --git a/src/condor_tests/Test_Requirements b/src/condor_tests/Test_Requirements
index eff7587..30d79c0 100644
--- a/src/condor_tests/Test_Requirements
+++ b/src/condor_tests/Test_Requirements
@@ -205,6 +205,7 @@ job_dagman_submit_glob-A: personal
 job_dagman_submit_glob-B: personal
 job_dagman_set_attr: personal
 job_dagman_event_timestamp: personal
+job_dagman_batch_name: personal
 job_filexfer_base-input1_van: personal
 job_filexfer_base_van: personal
 job_filexfer_basic_van: personal
diff --git a/src/condor_tests/job_dagman_batch_name-lower.dag b/src/condor_tests/job_dagman_batch_name-lower.dag
new file mode 100644
index 0000000..70ad865
--- /dev/null
+++ b/src/condor_tests/job_dagman_batch_name-lower.dag
@@ -0,0 +1,5 @@
+job NodeLA job_dagman_batch_name-node.sub
+vars NodeLA nodename = "$(JOB)"
+
+job NodeLB job_dagman_batch_name-node.sub
+vars NodeLB nodename = "$(JOB)"
diff --git a/src/condor_tests/job_dagman_batch_name-node.sub b/src/condor_tests/job_dagman_batch_name-node.sub
new file mode 100644
index 0000000..4f00926
--- /dev/null
+++ b/src/condor_tests/job_dagman_batch_name-node.sub
@@ -0,0 +1,8 @@
+universe = vanilla
+executable = ./x_echostring.pl
+arguments = batch-name: $$([JobBatchName])
+output = job_dagman_batch_name-$(nodename).out
+error = job_dagman_batch_name-$(nodename).err
+# Should get overridden by DAGMan
+JobBatchName = dummy_batch_name
+queue
diff --git a/src/condor_tests/job_dagman_batch_name-upper.dag b/src/condor_tests/job_dagman_batch_name-upper.dag
new file mode 100644
index 0000000..f518b8f
--- /dev/null
+++ b/src/condor_tests/job_dagman_batch_name-upper.dag
@@ -0,0 +1,7 @@
+job NodeUA job_dagman_batch_name-node.sub
+vars NodeUA nodename = "$(JOB)"
+
+job NodeUB job_dagman_batch_name-node.sub
+vars NodeUB nodename = "$(JOB)"
+
+subdag external DagUC job_dagman_batch_name-lower.dag
diff --git a/src/condor_tests/job_dagman_batch_name.run b/src/condor_tests/job_dagman_batch_name.run
new file mode 100755
index 0000000..cd82fae
--- /dev/null
+++ b/src/condor_tests/job_dagman_batch_name.run
@@ -0,0 +1,130 @@
+#! /usr/bin/env perl
+##**************************************************************
+##
+## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+## University of Wisconsin-Madison, WI.
+## 
+## Licensed under the Apache License, Version 2.0 (the "License"); you
+## may not use this file except in compliance with the License.  You may
+## obtain a copy of the License at
+## 
+##    http://www.apache.org/licenses/LICENSE-2.0
+## 
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an "AS IS" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+##
+##**************************************************************
+
+use CondorTest;
+use CondorUtils;
+
+$cmd = 'job_dagman_batch_name-upper.dag';
+$testdesc =  'Condor submit dag - setting & propagation of batch-name - scheduler U';
+$testname = "job_dagman_batch_name";
+$dagman_args = "-verbose -batch-name job_dagman_batch_name";
+
+@outfiles = ("job_dagman_batch_name-upper.dag.lib.out",
+	"job_dagman_batch_name-lower.dag.dagman.out",
+	"job_dagman_batch_name-NodeLA.out",
+	"job_dagman_batch_name-NodeLB.out",
+	"job_dagman_batch_name-NodeUA.out",
+	"job_dagman_batch_name-NodeUB.out");
+
+$expected_contents = "batch-name: job_dagman_batch_name ";
+
+my $killedchosen = 0;
+
+# truly const variables in perl
+sub IDLE{1};
+sub HELD{5};
+sub RUNNING{2};
+
+# Get rid of any existing output files.
+foreach $name (@outfiles) {
+	if (-e $name) {
+		runcmd("rm -f $name");
+	}
+}
+
+$abnormal = sub 
+{
+	die "Want to see only submit, execute and successful completion\n";
+};
+
+$failure = sub 
+{
+	die "Error: DAG is not expected to fail!\n";
+};
+
+$aborted = sub 
+{
+	die "Abort event NOT expected\n";
+};
+
+$held = sub 
+{
+	die "Held event NOT expected\n";
+};
+
+$executed = sub
+{
+	my %info = @_;
+
+	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
+};
+
+$submitted = sub
+{
+	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
+};
+
+$success = sub
+{
+	CondorTest::debug("executed successfully\n",1);
+	CondorTest::debug("Verifying output\n",1);
+	$diditpass = 1;
+	shift @outfiles; # get rid of upper dagman.out
+	shift @outfiles; # get rid of lower dagman.out
+	foreach $file (@outfiles) {
+		CondorTest::debug("Checking $file\n",1);
+
+		$canopen = open(OUT, "<$file");
+		if (! (defined $canopen)) {
+			CondorTest::debug("Cannot open output file <$file>:$!\n",1);
+			$diditpass = 0;
+		} else {
+			$contents = do { local $/; <OUT>; };
+			chomp $contents;
+			if ($contents eq $expected_contents) {
+				CondorTest::debug("Found <$contents> in $file\n",1);
+			} else {
+				CondorTest::debug("ERROR: expected <$expected_contents> in file $file, but found <$contents>\n",1);
+				$diditpass = 0;
+			}
+			close(OUT);
+		}
+	}
+
+	if ($diditpass == 0) {
+		die "All expected files and correct output failed\n";
+	}
+};
+
+CondorTest::RegisterExitedSuccess( $testname, $success);
+CondorTest::RegisterExitedFailure( $testname, $failure );
+CondorTest::RegisterExecute($testname, $executed);
+CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
+CondorTest::RegisterAbort( $testname, $aborted );
+CondorTest::RegisterHold( $testname, $held );
+CondorTest::RegisterSubmit( $testname, $submitted );
+
+if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
+	CondorTest::debug("$testname: SUCCESS\n",1);
+	exit(0);
+} else {
+	die "$testname: CondorTest::RunTest() failed\n";
+}
+
diff --git a/src/condor_tests/job_dagman_set_attr.run b/src/condor_tests/job_dagman_set_attr.run
index ce8a651..1825b88 100755
--- a/src/condor_tests/job_dagman_set_attr.run
+++ b/src/condor_tests/job_dagman_set_attr.run
@@ -56,7 +56,7 @@ foreach $name (@outfiles) {
 
 $abnormal = sub 
 {
-	die "Want to see only submit, execute and unsuccessful completion\n";
+	die "Want to see only submit, execute and successful completion\n";
 };
 
 $failure = sub 
@@ -83,7 +83,7 @@ $executed = sub
 
 $submitted = sub
 {
-	CondorTest::debug("submitted: This test will see submit, executing and unsuccessful completion\n",1);
+	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
 };
 
 $success = sub
