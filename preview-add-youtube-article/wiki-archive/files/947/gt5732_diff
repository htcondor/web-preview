diff --git a/src/condor_dagman/parse.cpp b/src/condor_dagman/parse.cpp
index c7de8a2..7535c36 100644
--- a/src/condor_dagman/parse.cpp
+++ b/src/condor_dagman/parse.cpp
@@ -188,6 +188,14 @@ bool parse (Dag *dag, const char *filename, bool useDagDir) {
 	std::list<std::string> vars_to_save;
 
 	//
+	// We now parse in two passes, so that commands such as PARENT..CHILD
+	// can come before the relevant nodes are defined (see gittrac #5732).
+	// The first pass parses commands that define nodes (JOB, DATA, FINAL,
+	// SPLICE, SUBDAG); the second pass parses everything else.
+	//
+
+	//
+	// PASS 1.
 	// This loop will read every line of the input file
 	//
 	while ( ((line=getline_trim(fp, lineNumber)) != NULL) ) {
@@ -256,6 +264,98 @@ bool parse (Dag *dag, const char *filename, bool useDagDir) {
 					   "submitfile" );
 		}
 
+		// Handle a Splice spec
+		else if(strcasecmp(token, "SPLICE") == 0) {
+			parsed_line_successfully = parse_splice(dag, filename,
+						lineNumber);
+		}
+		else {
+				// Just accept everything for now -- we'll detect unknown
+				// command names in the second pass.
+			parsed_line_successfully = true;
+		}
+
+		if (!parsed_line_successfully) {
+			fclose(fp);
+			return false;
+		}
+	}
+
+	//
+	// PASS 2.
+	// Seek back to the beginning of the DAG file.
+	//
+	if ( fseek( fp, 0, SEEK_SET ) != 0 ) {
+		debug_printf( DEBUG_QUIET,
+					"Error (%d, %s) seeking back to beginning of DAG file\n",
+					errno, strerror( errno ) );
+		fclose(fp);
+		return false;
+	}
+
+	lineNumber = 0;
+
+	//
+	// This loop will read every line of the input file
+	//
+	while ( ((line=getline_trim(fp, lineNumber)) != NULL) ) {
+		std::string varline(line);
+
+		//
+		// Find the terminating '\0'
+		//
+		char * endline = line;
+		while (*endline != '\0') endline++;
+
+
+		// Note that getline will truncate leading spaces (as defined by isspace())
+		// so we don't need to do that before checking for empty lines or comments.
+		if (line[0] == 0)       continue;  // Ignore blank lines
+		if (line[0] == COMMENT) continue;  // Ignore comments
+
+		debug_printf( DEBUG_DEBUG_3, "Parsing line <%s>\n", line );
+
+			// Note: strtok() could be replaced by MyString::Tokenize(),
+			// which is much safer, but I don't want to deal with that
+			// right now.  wenger 2005-02-02.
+		char *token = strtok(line, DELIMITERS);
+		if ( !token ) continue; // so Coverity is happy
+
+		bool parsed_line_successfully;
+
+		// Handle a Job spec
+		// Example Syntax is:  JOB j1 j1.condor [DONE]
+		//
+		if(strcasecmp(token, "JOB") == 0) {
+				// Parsed in first pass.
+			parsed_line_successfully = true;
+		}
+
+		// Handle a Stork job spec
+		// Example Syntax is:  DATA j1 j1.dapsubmit [DONE]
+		//
+		else if	(strcasecmp(token, "DAP") == 0) {	// DEPRECATED!
+				// Parsed in first pass.
+			parsed_line_successfully = true;
+		}
+
+		else if	(strcasecmp(token, "DATA") == 0) {
+				// Parsed in first pass.
+			parsed_line_successfully = true;
+		}
+
+		// Handle a SUBDAG spec
+		else if	(strcasecmp(token, "SUBDAG") == 0) {
+				// Parsed in first pass.
+			parsed_line_successfully = true;
+		}
+
+		// Handle a FINAL spec
+		else if(strcasecmp(token, "FINAL") == 0) {
+				// Parsed in first pass.
+			parsed_line_successfully = true;
+		}
+
 		// Handle a SCRIPT spec
 		// Example Syntax is:  SCRIPT (PRE|POST) [DEFER status time] JobName ScriptName Args ...
 		else if ( strcasecmp(token, "SCRIPT") == 0 ) {
@@ -335,8 +435,8 @@ bool parse (Dag *dag, const char *filename, bool useDagDir) {
 
 		// Handle a Splice spec
 		else if(strcasecmp(token, "SPLICE") == 0) {
-			parsed_line_successfully = parse_splice(dag, filename,
-						lineNumber);
+				// Parsed in first pass.
+			parsed_line_successfully = true;
 		}
 
 		// Handle a NODE_STATUS_FILE spec
diff --git a/src/condor_tests/CMakeLists.txt b/src/condor_tests/CMakeLists.txt
index 7660c81..a6ca6cb 100644
--- a/src/condor_tests/CMakeLists.txt
+++ b/src/condor_tests/CMakeLists.txt
@@ -658,6 +658,7 @@ if (BUILD_TESTING)
 	condor_pl_test(job_dagman_set_attr "Test setting ClassAd attrs in DAG file" "dagman;quick;full;quicknolink")
 	condor_pl_test(job_dagman_event_timestamp "Test event timestamps in dagman.out file" "dagman;quick;full;quicknolink")
 	condor_pl_test(job_dagman_batch_name "Test setting & propagation of batch-name" "dagman;quick;full;quicknolink")
+	condor_pl_test(job_dagman_cmd_order "Test flexible command order" "dagman;quick;full;quicknolink")
 	#condor_pl_test(perf_jobs_sue_10_10_30_van "Generated jobs performance test" "performance;long")
 	#condor_pl_test(perf_xfer_deb_10_10_30_van "Generated transfer performance test" "performance;long")
 	condor_pl_test(job_filexfer_sandbox-empty_van "Are job sandboxes with bad permissions cleaned up?" "framework;quick;full;quicknolink")
diff --git a/src/condor_tests/Test_Requirements b/src/condor_tests/Test_Requirements
index 1be9903..b3ea0d8 100644
--- a/src/condor_tests/Test_Requirements
+++ b/src/condor_tests/Test_Requirements
@@ -207,6 +207,7 @@ job_dagman_submit_glob-B: personal
 job_dagman_set_attr: personal
 job_dagman_event_timestamp: personal
 job_dagman_batch_name: personal
+job_dagman_cmd_order: personal
 job_filexfer_base-input1_van: personal
 job_filexfer_base_van: personal
 job_filexfer_basic_van: personal
diff --git a/src/condor_tests/job_dagman_cmd_order-lower.dag b/src/condor_tests/job_dagman_cmd_order-lower.dag
new file mode 100644
index 0000000..906bcfa
--- /dev/null
+++ b/src/condor_tests/job_dagman_cmd_order-lower.dag
@@ -0,0 +1,20 @@
+parent NodeLA child NodeLB
+maxjobs Cat1 2
+
+priority NodeLA 10
+abort-dag-on NodeLA 2
+retry NodeLA 1
+vars NodeLA nodename = "$(JOB)"
+script pre NodeLA x_sleep.pl 1
+script post NodeLA x_sleep.pl 1
+category NodeLA Cat1
+job NodeLA job_dagman_cmd_order-node.sub
+
+priority NodeLB 20
+abort-dag-on NodeLB 3
+retry NodeLB 3
+vars NodeLB nodename = "$(JOB)"
+script pre NodeLB x_sleep.pl 1
+script post NodeLB x_sleep.pl 1
+category NodeLB Cat1
+job NodeLB job_dagman_cmd_order-node.sub
diff --git a/src/condor_tests/job_dagman_cmd_order-node.sub b/src/condor_tests/job_dagman_cmd_order-node.sub
new file mode 100644
index 0000000..5e572ac
--- /dev/null
+++ b/src/condor_tests/job_dagman_cmd_order-node.sub
@@ -0,0 +1,6 @@
+universe = vanilla
+executable = x_echostring.pl
+arguments = $(nodename)
+output = job_dagman_cmd_order-$(nodename).out
+error = job_dagman_cmd_order-$(nodename).err
+queue
diff --git a/src/condor_tests/job_dagman_cmd_order.dag b/src/condor_tests/job_dagman_cmd_order.dag
new file mode 100644
index 0000000..8179e77
--- /dev/null
+++ b/src/condor_tests/job_dagman_cmd_order.dag
@@ -0,0 +1,25 @@
+parent NodeA child NodeB
+maxjobs Cat1 2
+
+priority NodeA 10
+abort-dag-on NodeA 2
+retry NodeA 1
+vars NodeA nodename = "$(JOB)"
+script pre NodeA x_sleep.pl 1
+script post NodeA x_sleep.pl 1
+category NodeA Cat1
+job NodeA job_dagman_cmd_order-node.sub
+
+priority NodeB 20
+abort-dag-on NodeB 3
+retry NodeB 3
+vars NodeB nodename = "$(JOB)"
+script pre NodeB x_sleep.pl 1
+script post NodeB x_sleep.pl 1
+category NodeB Cat1
+subdag external NodeB job_dagman_cmd_order-lower.dag
+
+vars NodeZ nodename = "$(JOB)"
+script pre NodeZ x_sleep.pl 1
+script post NodeZ x_sleep.pl 1
+final NodeZ job_dagman_cmd_order-node.sub
diff --git a/src/condor_tests/job_dagman_cmd_order.run b/src/condor_tests/job_dagman_cmd_order.run
new file mode 100755
index 0000000..e247e6d
--- /dev/null
+++ b/src/condor_tests/job_dagman_cmd_order.run
@@ -0,0 +1,116 @@
+#! /usr/bin/env perl
+##**************************************************************
+##
+## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+## University of Wisconsin-Madison, WI.
+## 
+## Licensed under the Apache License, Version 2.0 (the "License"); you
+## may not use this file except in compliance with the License.  You may
+## obtain a copy of the License at
+## 
+##    http://www.apache.org/licenses/LICENSE-2.0
+## 
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an "AS IS" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+##
+##**************************************************************
+
+use CondorTest;
+use CondorUtils;
+
+$cmd = 'job_dagman_cmd_order.dag';
+$testdesc =  'Condor submit dag - test flexible command order - scheduler U';
+$testname = "job_dagman_cmd_order";
+$dagman_args = "-verbose";
+
+@outfiles = ("job_dagman_cmd_order.dag.dagman.out",
+	"job_dagman_cmd_order-lower.dag.dagman.out",
+	"job_dagman_cmd_order-NodeLA.out",
+	"job_dagman_cmd_order-NodeLB.out",
+	"job_dagman_cmd_order-NodeA.out",
+	"job_dagman_cmd_order-NodeZ.out");
+
+my $killedchosen = 0;
+
+# truly const variables in perl
+sub IDLE{1};
+sub HELD{5};
+sub RUNNING{2};
+
+# Get rid of any existing output files.
+foreach $name (@outfiles) {
+	if (-e $name) {
+		runcmd("rm -f $name");
+	}
+}
+
+$abnormal = sub 
+{
+	die "Want to see only submit, execute and successful completion\n";
+};
+
+$failure = sub 
+{
+	die "Error: DAG is not expected to fail!\n";
+};
+
+$aborted = sub 
+{
+	die "Abort event NOT expected\n";
+};
+
+$held = sub 
+{
+	die "Held event NOT expected\n";
+};
+
+$executed = sub
+{
+	my %info = @_;
+
+	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
+};
+
+$submitted = sub
+{
+	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
+};
+
+$success = sub
+{
+	CondorTest::debug("executed successfully\n",1);
+	CondorTest::debug("Verifying output\n",1);
+	$diditpass = 1;
+	foreach $file (@outfiles) {
+		CondorTest::debug("Checking $file\n",1);
+
+		if (! -e $file) {
+			CondorTest::debug("ERROR: Expected output file $file does not exist!\n",1);
+			$diditpass = 0;
+		}
+
+	}
+
+	if ($diditpass == 0) {
+		die "All expected files and correct output failed\n";
+	}
+};
+
+CondorTest::RegisterExitedSuccess( $testname, $success);
+CondorTest::RegisterExitedFailure( $testname, $failure );
+CondorTest::RegisterExecute($testname, $executed);
+CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
+CondorTest::RegisterAbort( $testname, $aborted );
+CondorTest::RegisterHold( $testname, $held );
+CondorTest::RegisterSubmit( $testname, $submitted );
+
+if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
+	CondorTest::debug("$testname: SUCCESS\n",1);
+	exit(0);
+} else {
+	die "$testname: CondorTest::RunTest() failed\n";
+}
+
