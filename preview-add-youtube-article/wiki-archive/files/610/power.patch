diff --git a/src/condor_power/power.cpp b/src/condor_power/power.cpp
index e1710bb..bd00fbe 100644
--- a/src/condor_power/power.cpp
+++ b/src/condor_power/power.cpp
@@ -17,7 +17,6 @@
  *
  ***************************************************************/
 
-
 #include "condor_common.h"
 #include "udp_waker.h"
 
@@ -74,7 +73,6 @@ static const char *errmsgs[] = {
 
 static FILE				*in		= NULL;  /* input file */
 static const char				*fn_in	= NULL;  /* name of input file */
-static char				*fn_out	= NULL;  /* name of output file */
 static const char		*name	= NULL;  /* program name */
 static const char				*mac	= NULL;  /* hardware address */
 static const char				*mask	= "0.0.0.0"; /*subnet to broadcast on*/
@@ -86,10 +84,10 @@ static WakerBase		*waker	= NULL;  /* waking mechanism */
 /**	Functions */
 
 static void
-usage( void )
+usage( int code = 0 )
 {
 
-	fprintf ( stderr, "usage: %s [OPTIONS] [INPUT-CLASSAD-FILE] [OUTPUT]\n",
+	fprintf ( stderr, "usage: %s [OPTIONS] [INPUT-CLASSAD-FILE]\n",
 			  name );
 	fprintf ( stderr, "%s - %s\n", name, DESCRIPTION );
 	fprintf ( stderr, "\n" );
@@ -97,15 +95,15 @@ usage( void )
 	fprintf ( stderr, "\n" );
 	fprintf ( stderr, "-d      Enables debugging\n" );
 	fprintf ( stderr, "\n" );
-	fprintf ( stderr, "-i      Read a classad that is piped in through standard input" );
+	fprintf ( stderr, "-i      Read a classad that is piped in through standard input.\n" );
 	fprintf ( stderr, "        This is achieved on the command line like so: condor_power -i < [INPUT-CLASSAD-FILE]\n" );
+	fprintf ( stderr, "\n" );
 	fprintf ( stderr, "-m      Hardware address (MAC address)\n" );
-	fprintf ( stderr, "-p      Port (default: %d)\n", port );
+	fprintf ( stderr, "\n" );
 	fprintf ( stderr, "-s      Subnet mask (default: %s)\n", mask );
 	fprintf ( stderr, "\n" );
 
-	exit ( 0 );
-
+	exit ( code );
 }
 
 static void
@@ -158,8 +156,7 @@ error( int code, ... )
 		ad = NULL;
 	}
 
-	exit ( code );
-
+	usage(code);
 }
 
 static void
@@ -191,7 +188,6 @@ parse_command_line( int argc, char *argv[] )
 					case 'h': usage ();					break;
 					case 'i': stdio	= true;				break;
 					case 'm': argument = &mac;			break;
-					case 'p': port = (int) strtol ( s, NULL, port ); break;
 					case 's': argument = &mask;			break;
 					default : error ( E_OPTION, *--s );	break;
 				}
@@ -210,14 +206,28 @@ parse_command_line( int argc, char *argv[] )
 			/* we're looking at a file name */
 			switch ( j++ ) {
 				case  0: fn_in  = s;		 break;
-				case  1: fn_out = s;		 break;
 				default: error ( E_ARGCNT ); break;
 			}
 
 		}
+	}
+
+	if(stdio && (mac || fn_in))
+	{
+		error(E_ARGCNT);
+	}
+
+	if(fn_in && (mac))
+	{
+		error(E_ARGCNT);
+	}
 
+	if(!mac && !stdio && !fn_in)
+	{
+		error(E_ARGCNT);
 	}
 
+	if(fn_in) stdio = true;
 }
 
 static void
