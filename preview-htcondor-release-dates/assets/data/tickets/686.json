{"id": 686, "title": "Ticket #686: memory leak from soap_init", "description": "<blockquote>\nWhen running:\n\n<p>_CONDOR_USE_CLONE_TO_CREATE_PROCESSES=FALSE valgrind --leak-check=full\ncondor_schedd -t -f -p 1981\n\n</p><p>along with:\n\n</p><p>Running <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeakTest\" title=\"Leak Test\">LeakTest</a></span> program using libs from x_soap_tests.tar.gz...\n\n</p><p>import birdbath.*;<br/>\n\nimport condor.*;<br/>\n\nimport java.rmi.*;<br/>\n\nimport java.net.*;<br/>\n\nimport birdbath.Transaction;<br/>\n\n\n</p><p>public class LeakTest<br/>\n\n{<br/>\n\n\n</p><p></p><pre>    public static void main(String[] args) throws Throwable\n    {\n       Schedd schedd = new Schedd(new URL(\"http://localhost:1981\"));\n</pre>\n\n<p></p><pre>       for (int i = 0; i &lt; 10000; i++) {\n          try {\n             schedd.getJobAd(42,0);\n          } catch (RemoteException exception) { }\n       }\n    }\n}\n</pre>\n\n<p>you will observe the following in the valgrind output:\n\n</p><p>==24262== 56 bytes in 1 blocks are definitely lost in loss record 113 of 202 <br/>\n\n==24262==    at 0x40053C0: malloc (vg_replace_malloc.c:149)<br/>\n\n==24262==    by 0xD20695: soap_init (in /usr/lib/libgsoapssl++.so.0.0.0)<br/>\n\n==24262==    by 0xD207F7: soap::soap() (in /usr/lib/libgsoapssl++.so.0.0.0)<br/>\n\n==24262==    by 0x8175173: DaemonCore::reconfig() (in /usr/sbin/condor_schedd)<br/>\n\n==24262==    by 0x818474B: main (in /usr/sbin/condor_schedd)<br/>\n</p></blockquote>", "remarks": "<blockquote>\nWhen traversing the documentation for gsoap I had noticed that initialization\ndiffers for heap allocated objects.  Excerpt from page 17-18:\nMy Comments &gt;&gt;&gt;&gt;&gt;:\n\n<p>For example, the following code stack-allocates the runtime\nenvironment which is used for multiple remote method calls:\n\n</p><p></p><pre>      int main()\n      {\n        struct soap soap;\n        ...\n        soap init(&amp;soap); // initialize runtime environment\n        ...\n                                                       17\n       soap  call ns method1(&amp;soap, ...); // make a remote call\n       ...\n             call ns method2(&amp;soap, ...); // make another remote call\n       soap\n       ...\n             destroy(&amp;soap); // remove deserialized class instances (C++ only)\n       soap\n       soap  end(&amp;soap); // clean up and remove deserialized data\n       soap  done(&amp;soap); // detach environment (last use and no longer in\nscope)\n       ...\n     }\n</pre>\n\n<p>The runtime environment can also be heap allocated:<br/>\n\n&gt;&gt;&gt;&gt;: This is the interesting point, when changed, memory leaks are cleaned up\n\n</p><p></p><pre>     int main()\n     {\n       struct soap *soap;\n       ...\n       soap = soap new(); // allocate and initialize runtime environment\n       if (!soap) // couldn&amp;#8217;t allocate: stop\n       ...\n       soap call ns method1(soap, ...); // make a remote call\n       ...\n       soap call ns method2(soap, ...); // make another remote call\n       ...\n       soap destroy(soap); // remove deserialized class instances (C++ only)\n       soap end(soap); // clean up and remove deserialized data\n       soap free(soap); // detach and free runtime environment\n     }</pre>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Aug-21 10:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a756d166a84d07cf842fe0999a262cfbab27bb32\">[15429]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=686\" onclick=\"get_ticket_and_populate_wrapper('686'); return false;\" title=\"memory leak from soap_init\">#686</a></span>: memory leak from soap_init Memory leak was caused from using incorrect method for initialization as documented in the spec. Upon review from MattF it was noted that we were not updating soap params on reconfig(), so this fix also accounts for that too.  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Aug-20 16:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/8a8e3e121b3789dd6a89ff33e9f9e402529fe6fa\">[15423]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=686\" onclick=\"get_ticket_and_populate_wrapper('686'); return false;\" title=\"memory leak from soap_init\">#686</a></span>: memory leak from soap_init Memory leak was caused from using incorrect method for initialization as documented in the spec. Upon review from MattF it was noted that we were not updating soap params on reconfig(), so this fix also accounts for that too.  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Aug-20 15:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/ea23eb5007249b54d4af8a1c3dc56d3ed75dc29c\">[15422]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=686\" onclick=\"get_ticket_and_populate_wrapper('686'); return false;\" title=\"memory leak from soap_init\">#686</a></span>: memory leak from soap_init Memory leak was caused from using incorrect method for initialization as documented in the spec. Upon review from MattF it was noted that we were not updating soap params on reconfig(), so this fix also accounts for that too.  (By Timothy St. Clair )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Jan-04 09:21", "status": "resolved", "created": "2009-Aug-20 15:48", "fixed_version": "2009-Aug-20 15:48", "broken_version": "v070202", "priority": "4", "subsystem": "Daemons", "assigned_to": "tstclair", "derived_from": "", "creator": "tstclair", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu, tstclair@redhat.com", "due_date": ""}