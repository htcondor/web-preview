{"id": 473, "title": "Ticket #473: Profiling of new ClassAds", "description": "<blockquote>\nWill, Please post updates to your profiling here. Thanks -Nick</blockquote>", "remarks": "<blockquote>\n<em>2009-May-11 11:11:56 by mccardel:</em> <br/>\n\nWill do.\n\n<p></p><hr/>\n<em>2009-May-21 13:48:19 by mccardel:</em> <br/>\n\nAlright, starting this in earnest now. I'm thinking about rewriting some the test so that the code that sets up a classad doesn't dilute the test runs, since right now that's taking the longest (and making it harder to see what truly is the problem!)\n\n<p>But that might not be necessary.\n\n</p><p></p><hr/>\n<em>2009-Jun-10 14:28:21 by mccardel:</em> <br/>\n\nWell, here's what I've seen so far.\n\n<p>I've been able to make some small improvements to the new classads. Unfortunately, nothing huge.\n\n</p><p>One thing I've noticed though is that majority of the time is spent setting up the classads. When running 1 loop, set up time is about 90%. When using 3 loops, setup time is about 82%. The part for running the loops takes up 5% and 12%, respectively. I've been focusing on the runLoops part, as that's what I was told was needed to speed up.\n\n</p><p>The majority of changes I made were to avoid O(log N) lookups.\n\n</p><p>With regards to the runLoop code, the major problem is recursion. Making the problem worse is that I haven't been able to get real numbers from the profilers I've used (quantify, callgrind, and gprof) on this, due to the recursion.\n\n</p><p></p><hr/>\n<em>2009-Jun-10 14:43:39 by matt:</em> <br/>\n\nHave you tried google-perftools? I've had luck with them...\n\n<p><a class=\"external\" href=\"http://code.google.com/p/google-perftools/\">http://code.google.com/p/google-perftools/</a>\n\n</p><p></p><hr/>\n<em>2009-Jun-19 15:37:30 by mccardel:</em> <br/>\n\nYea, I tried google's perftools out after you linked me there. Perhaps I'm doing it wrong, but I found callgrind and quantify a lot more useful.\n\n<p>Anyways, here is a description of what I've done, and what I've learned.\n\n</p><p>Nick gave me a program that ran the new classads. There's a setup stage, a running stage, and a clean up stage. I was looking at the running stage for the project.\n\n</p><p>The function that takes up the most time (it's self cost) is strcasecmp. This is called by CaseIgnLTStr(), which in turn is the function used to compare two entries in the std::map that is being used. So right away the problem seems to be too many lookups.\n\n</p><p>Other than this, another problem that seems to contribute to the slowness is the usage of recursion to do just about everything. This also makes getting accurate profiling data hard due to the lack of a meaningful topological ordering. Regardless, the parts of the code that are recursive seems to be taking up 86% of the time in the program.\n\n</p><p>Overuse of map's [] operator seems to be causing some slowness issues as well, since it requires an O(log N) lookup every time. However, the setup costs of an iterator to more efficiently do lookups canceled out the gains in the actual lookups (at least on the data set I was using.) I'm specifically referring to Classad::AttributeReference::_Evaluate(EvalState&amp;, Value&amp;) here.\n\n</p><p>These are the initial things I've noticed. I'll post some more information once I talk to Greg Thain about this.\n\n</p><p></p><hr/>\n<em>2010-Jan-25 17:52:16 by matt:</em> <br/>\n\nWill reports that this shouldn't be on his plate right now. I've assigned it to Dan so we don't lose it.\n\n<p></p><hr/>\n<em>2010-Jan-26 09:21:14 by danb:</em> <br/>\n\nTicket <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span> takes off where this ticket ends.  I am therefore marking this ticket as resolved.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2010-Jan-26 09:21", "status": "resolved", "created": "2009-May-11 11:11", "fixed_version": "2009-May-11 11:11", "broken_version": "", "priority": "4", "subsystem": "Libs", "assigned_to": "danb", "derived_from": "#227", "creator": "nleroy", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}