{"id": 1710, "title": "Ticket #1710: Change 'retval &=' idiom in unit test suite", "description": "<blockquote>\nSome problems were found with a particular idiom used in the unit\ntest suite. The context of use is that a pile of setup functions need to be\ncalled and if any of them fail, the setup fails. The problem is that the first\nfailure leaves the process state in a bad way and subsequent calls use wrong\ninformation, creating problems.\n\n<p>Here's an example (all in the same function):\n\n</p><p></p><div class=\"verbatim\">\n<pre>OTEST_TmpDir.cpp:       ret_val &amp;= condor_getcwd(original_dir);\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(\"..\");\nOTEST_TmpDir.cpp:       ret_val &amp;= condor_getcwd(parent_dir);\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(original_dir.Value());\nOTEST_TmpDir.cpp:       ret_val &amp;= !mkdir(\"tmp\", 0700);\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(\"tmp\");\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(original_dir.Value());\nOTEST_TmpDir.cpp:       ret_val &amp;= !mkdir(long_dir, 0700);\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(long_dir);\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(original_dir.Value());\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(deep_dir.Value());\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(\"..\");\nOTEST_TmpDir.cpp:       ret_val &amp;= !rmdir(\"tmp\");\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(long_dir);\nOTEST_TmpDir.cpp:       ret_val &amp;= !chdir(\"..\");\nOTEST_TmpDir.cpp:       ret_val &amp;= !rmdir(long_dir);\n</pre></div>\n\n\n<p>Suppose the last chdir fails and then we rmdir a valid directory--except not the one we expected, which could impact a different test.\n\n</p><p>I see this particular idiom was done in:\n\n</p><p></p><div class=\"verbatim\">\n<pre>OTEST_Directory.cpp\nOTEST_StatInfo.cpp\nOTEST_TmpDir.cpp\n</pre></div>\n\n\n<p>The method I'd like to fix this with is a hybrid combination of\nmacros and implementation functions.  The \"cut_\" is an abbreviated for\ncondor_unit test and puts the macros and functions into a \"namespace\".\n\n</p><p>The macro signatures are:\n</p><div class=\"code\">\n<pre class=\"code\">cut_assert_z(expression)\ncut_assert_nz(expression)\ncut_assert_gz(expression)\ncut_assert_lz(expression)\ncut_assert_gez(expression)\ncut_assert_lez(expression)\ncut_assert_true(expression)\ncut_assert_false(expression)\n</pre></div>\n\n\n<p>Most of these functions are transitive in nature, meaning they take\nthe result of the value and return it after checking it. This allows\nboth of these idioms to exist:\n</p><div class=\"code\">\n<pre class=\"code\">int fd;\n\nfd = cut_assert_gez( open(\"foobar\", O_RDONLY) );\ncut_assert_gez( fd = open(\"foobar\", O_RDONLY) );\n</pre></div>\n\n\n<p>The macros/functions would be defined like this:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">#define cut_assert_z(expr) \\\n    cut_assert_z_impl(expr, #expr, __FILE_, __LINE__);\n\n#define cut_assert_nz(expr) \\\n    cut_assert_nz_impl(expr, #expr, __FILE_, __LINE__);\n\n/* don't return anything: the process will die if value not zero */\nvoid cut_assert_z_impl(int value, char *expr, char *file, int line)\n{\n    int tmp_errno = errno;\n\n    if (value != 0) {\n        dprintf(D_ALWAYS, \"Failed cut_assert_z(%s) at line %d in file %s.\\n\",\n            expr, line, file);\n        dprintf(D_ALWAYS, \"A possibly useful errno is %d(%s).\\n\",\n            tmp_errno, strerror(tmp_errno));\n        exit(EXIT_FAILURE);\n    }\n}\n\nint cut_assert_nz_impl(int value, char *expr, char *file, int line)\n{\n    int tmp_errno = errno;\n\n    if (value == 0) {\n        dprintf(D_ALWAYS, \"Failed cut_assert_nz(%s) at %d in %s.\\n\",\n            expr, line, file);\n        dprintf(D_ALWAYS, \"A possibly useful errno is %d(%s).\\n\",\n            tmp_errno, strerror(tmp_errno));\n        exit(EXIT_FAILURE);\n    }\n\n    return value;\n}\n</pre></div>\n\n\n<p>and so on.\n\n</p><p>The result of doing the above, is when an assertion fails on a line like this:\n</p><div class=\"code\">\n<pre class=\"code\">    cut_assert_z( unlink(\"foobar\") );\n</pre></div>\n\n\n<p>You get this as output from the program if unlink doesn't return zero:\n\n</p><p></p><div class=\"verbatim\">\n<pre>Failed cut_assert_z(unlink(\"thingy\")) at line 123 in file foo.c.\nA possibly useful errno is 2(No such file or directory).\n</pre></div>\n\n\n<p>After this is done, change lines like this:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">    ret_val &amp;= !chdir(deep_dir.Value());\n</pre></div>\n\n\n<p>to\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">    cut_assert_z( chdir(deep_dir.Value()) );\n</pre></div>\n\n\n<p>For any unix call which doesn't fit into this model, write a new cut_assert_*\nfunction or just open code the check.\n\n</p><p>These assertion functions should in general be used for \"glue\" code that\nthe condor unit tester program needs in order for correct operation while\nproviding the environment for the tests. The actual unit tests themselves\nshould continue to be written to the style currently used.</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Oct-13 17:40:45 by slauson:</em> <br/>\n\nI attached a diff of the changes. Let me know if it's good to commit.\n\n<p></p><hr/>\n<em>2010-Oct-13 18:40:04 by psilord:</em> <br/>\n\nThere are some things you need to fix:\n\n<p></p><ol>\n<li>Add in the rest of the functions/macros like cut_assert_gez/lez, etc.\nI like symmetry.\n</li><li>The return value of safe_open_wrapper is not an int, but a FILE*. So in this\ncase I'd make a <code>cut_assert_not_null(void *value)</code> macro and function pair\nand use that. Check value != NULL. Also make a symmetric call of <code>cut_assert_null(void *value)</code>.\n</li><li>It appears that you need to touch files and do so by calling safe_open_wrapper(). However, you ignore the returned file pointer which leaves\nthe file open in the process space. If you want to just create a zero length file do this instead:\n<div class=\"code\">\n<pre class=\"code\">void create_empty_file(char *file, char *mode)\n{\n   FILE *f = NULL;\n   cut_assert_not_null( f = safe_fopen_wrapper(file, mode) );\n   cut_assert_z( fclose(f) );\n}\n</pre></div>\n\n</li></ol>\n\n<p>And then call <code>create_empty_file(\"whatever\", \"w+\");</code> when you need to make a file. This way all of the file handles are properly cleaned up.\n\n</p><p>Leaving file handles open complicates debugging when using tools like lsof or strace.\n\n</p><p></p><hr/>\n<em>2010-Oct-13 18:41:29 by psilord:</em> <br/>\n\nDelete the current patch and attach a new one when you have it ready and I'll review it.\n\n<p>Thanks!\n\n</p><p></p><hr/>\n<em>2010-Oct-14 09:40:20 by psilord:</em> <br/>\n\nSmall correction, you can just have the signature for create_empty_file be the path, and not the mode. The mode is implicit in the action the function wants to do.\n\n<p></p><hr/>\n<em>2010-Oct-14 11:39:13 by slauson:</em> <br/>\n\nI made the fixes you listed and attached an updated diff of the changes.\n\n<p></p><hr/>\n<em>2010-Oct-14 14:01:24 by psilord:</em> <br/>\n\nI did another review, and suggested some additional changes to him out of band. Hopefully, it'll be checked in today or tomorrow.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/236/patch.diff\">patch.diff</a>\n24203 bytes added by slauson on 2010-Oct-14 16:36:38 UTC.\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-14 23:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/0d1b908f0c45f8f5be4b58c1c91ae73f8a5db7b1\">[19179]</a></span>: Fixed the assert check on a safe_open_wrapper call to understand that zero is a valid fd. This is for ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=1710\" onclick=\"get_ticket_and_populate_wrapper('1710'); return false;\" title=\"Change 'retval &amp;=' idiom in unit test suite\">#1710</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-14 19:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/9596d2d8fc5691d62fb7718dc86eabe2313f8632\">[19177]</a></span>: Updated setup code in several unit tests to use macros added in <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=1710\" onclick=\"get_ticket_and_populate_wrapper('1710'); return false;\" title=\"Change 'retval &amp;=' idiom in unit test suite\">#1710</a></span>.  (By Josh Slauson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-14 18:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/26e472d190a2aa965119e8be3ec9289cdfbf2106\">[19176]</a></span>: Added macro and implementation functions to check certain conditions in the unit test suite. They will be used to check if setup code fails. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=1710\" onclick=\"get_ticket_and_populate_wrapper('1710'); return false;\" title=\"Change 'retval &amp;=' idiom in unit test suite\">#1710</a></span>  (By Josh Slauson )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Oct-14 19:20", "status": "resolved", "created": "2010-Oct-13 14:07", "fixed_version": "2010-Oct-13 14:07", "broken_version": "v070500", "priority": "2", "subsystem": "Tests", "assigned_to": "slauson", "derived_from": "#1239", "creator": "psilord", "rust": "", "customer_group": "other", "visibility": "public", "notify": "slauson@cs.wisc.edu psilord@cs.wisc.edu gthain@cs.wisc.edu", "due_date": ""}