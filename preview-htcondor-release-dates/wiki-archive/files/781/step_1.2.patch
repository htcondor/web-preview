diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index 914328c..1155208 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -4461,12 +4461,12 @@ insertClaimRequirements(ClassAd &request, ClassAd *offer)
     MyString limits;
     if (request.LookupString(ATTR_CONCURRENCY_LIMITS, limits)) {
       // request exactly the same limits, if the current one has any
-      limits.lower_case();
-      std::string req=std::string("(toLower(TARGET.")+ATTR_CONCURRENCY_LIMITS+")=?=\""+limits+"\")";
+      // Note: MATCHED_CONCURRENCY_LIMITS is already lowercase, so we do not need to do it again here
+      std::string req=std::string("(toLower(TARGET.")+ATTR_CONCURRENCY_LIMITS+")=?=MY."+ATTR_MATCHED_CONCURRENCY_LIMITS+")";
       req_list.push_back(req);
     } else {
       // or prevent jobs with any limits to match
-      std::string req=std::string("TARGET.")+ATTR_CONCURRENCY_LIMITS+"=?=UNDEFINED";
+      std::string req=std::string("(TARGET.")+ATTR_CONCURRENCY_LIMITS+"=?=UNDEFINED)";
       req_list.push_back(req);
     }
   }
@@ -4584,35 +4584,38 @@ matchmakingProtocol (ClassAd &request, ClassAd *offer,
 	}	
 
 
-	// We will add claim specific requirements here
-	// So save the old Machine requirements first
-	// and reference them later in the new requirements
-
-	if ( offer->find(ATTR_MATCH_SAVED_MACHINE_REQUIREMENTS)==offer->end()) {
-	  // but only if we did not do it already
-	  {
-	    ExprTree *requirements = offer->Remove(ATTR_REQUIREMENTS);
-	    if ( !requirements ) {
-	      dprintf (D_ALWAYS, "Could not find Machine requirements!\n" );
-	      return MM_ERROR;
+	bool enable_explicit_reqs=param_boolean("ENABLE_EXPLICT_MATCH_REQUIREMENTS",false);
+	if (enable_explicit_reqs) {
+	  // We will add claim specific requirements here
+	  // So save the old Machine requirements first
+	  // and reference them later in the new requirements
+	  
+	  if ( offer->find(ATTR_MATCH_SAVED_MACHINE_REQUIREMENTS)==offer->end()) {
+	    // but only if we did not do it already
+	    {
+	      ExprTree *requirements = offer->Remove(ATTR_REQUIREMENTS);
+	      if ( !requirements ) {
+		dprintf (D_ALWAYS, "Could not find Machine requirements!\n" );
+		return MM_ERROR;
+	      }
+	      offer->Insert(ATTR_MATCH_SAVED_MACHINE_REQUIREMENTS,requirements);
+	      dprintf( D_FULLDEBUG, "Renaming %s->%s\n",ATTR_REQUIREMENTS,ATTR_MATCH_SAVED_MACHINE_REQUIREMENTS);
+	    }
+	    {
+	      char buf[256];
+	      sprintf(buf,"(MY.%s) && (MY.%s)",
+		      ATTR_MATCH_CLAIM_REQUIREMENTS,ATTR_MATCH_SAVED_MACHINE_REQUIREMENTS);
+	      offer->AssignExpr(ATTR_REQUIREMENTS,buf);
+	      dprintf( D_FULLDEBUG, "Redefining: %s=%s\n",ATTR_REQUIREMENTS,buf);
 	    }
-	    offer->Insert(ATTR_MATCH_SAVED_MACHINE_REQUIREMENTS,requirements);
-	    dprintf( D_FULLDEBUG, "Renaming %s->%s\n",ATTR_REQUIREMENTS,ATTR_MATCH_SAVED_MACHINE_REQUIREMENTS);
 	  }
-	  {
-	    char buf[256];
-	    sprintf(buf,"(MY.%s) && (MY.%s)",
-		    ATTR_MATCH_CLAIM_REQUIREMENTS,ATTR_MATCH_SAVED_MACHINE_REQUIREMENTS);
-	    offer->AssignExpr(ATTR_REQUIREMENTS,buf);
-	    dprintf( D_FULLDEBUG, "Redefining: %s=%s\n",ATTR_REQUIREMENTS,buf);
+	  
+	  // Now insert the claim requirements
+	  if (not insertClaimRequirements(request, offer)) {
+	    return MM_ERROR;
 	  }
 	}
 
-	// Now insert the claim requirements
-	if (not insertClaimRequirements(request, offer)) {
-	  return MM_ERROR;
-	}
-
 	{
 	  // Stash the Concurrency Limits in the offer, they are part of
 	  // what's being provided to the request after all. This is needed for 2 reasons:
@@ -4628,9 +4631,12 @@ matchmakingProtocol (ClassAd &request, ClassAd *offer,
 	  } else {
 	    offer->Delete(ATTR_MATCHED_CONCURRENCY_LIMITS);
 	  }
-	  // Declare the above attribute as optional, for newer schedds to use
-	  const bool enforce_concurrency_limits=false;
-	  offer->Assign(ATTR_ENFORCE_CONCURRENCY_LIMITS,enforce_concurrency_limits);
+	  if (enable_explicit_reqs) {
+	    // Declare the above attribute as optional, for newer schedds to use
+	    const bool enforce_concurrency_limits=false;
+	    offer->Assign(ATTR_ENFORCE_CONCURRENCY_LIMITS,enforce_concurrency_limits);
+	    dprintf( D_FULLDEBUG, "Declaring concurrency limits optional\n");
+	  }
 	}
 
     // these propagate into the slot ad in the schedd match rec, and from there eventually to the claim
