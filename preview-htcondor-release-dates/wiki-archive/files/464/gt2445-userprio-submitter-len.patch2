diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index b1649ad..b7db9b9 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -605,12 +605,10 @@ RESET_ALL_USAGE_commandHandler (int, Stream *strm)
 int Matchmaker::
 DELETE_USER_commandHandler (int, Stream *strm)
 {
-	char	scheddName[64];
-	char	*sn = scheddName;
-	int		len = 64;
+    std::string submitter;
 
 	// read the required data off the wire
-	if (!strm->get(sn, len) 	|| 
+	if (!strm->get(submitter) 	|| 
 		!strm->end_of_message())
 	{
 		dprintf (D_ALWAYS, "Could not read accountant record name\n");
@@ -618,8 +616,8 @@ DELETE_USER_commandHandler (int, Stream *strm)
 	}
 
 	// reset usage
-	dprintf (D_ALWAYS,"Deleting accountanting record of %s\n",scheddName);
-	accountant.DeleteRecord (scheddName);
+	dprintf (D_ALWAYS,"Deleting accountanting record of %s\n", submitter.c_str());
+	accountant.DeleteRecord(submitter);
 	
 	return TRUE;
 }
@@ -627,21 +625,19 @@ DELETE_USER_commandHandler (int, Stream *strm)
 int Matchmaker::
 RESET_USAGE_commandHandler (int, Stream *strm)
 {
-	char	scheddName[64];
-	char	*sn = scheddName;
-	int		len = 64;
+    std::string submitter;
 
 	// read the required data off the wire
-	if (!strm->get(sn, len) 	|| 
+	if (!strm->get(submitter) 	|| 
 		!strm->end_of_message())
 	{
-		dprintf (D_ALWAYS, "Could not read schedd name\n");
+		dprintf (D_ALWAYS, "Could not read submitter name\n");
 		return FALSE;
 	}
 
 	// reset usage
-	dprintf (D_ALWAYS,"Resetting the usage of %s\n",scheddName);
-	accountant.ResetAccumulatedUsage (scheddName);
+	dprintf(D_ALWAYS, "Resetting the usage of %s\n", submitter.c_str());
+	accountant.ResetAccumulatedUsage(submitter);
 	
 	return TRUE;
 }
@@ -651,22 +647,20 @@ int Matchmaker::
 SET_PRIORITYFACTOR_commandHandler (int, Stream *strm)
 {
 	float	priority;
-	char	scheddName[64];
-	char	*sn = scheddName;
-	int		len = 64;
+    std::string submitter;
 
 	// read the required data off the wire
-	if (!strm->get(sn, len) 	|| 
+	if (!strm->get(submitter) 	|| 
 		!strm->get(priority) 	|| 
 		!strm->end_of_message())
 	{
-		dprintf (D_ALWAYS, "Could not read schedd name and priority\n");
+		dprintf (D_ALWAYS, "Could not read submitter name and priority factor\n");
 		return FALSE;
 	}
 
 	// set the priority
-	dprintf (D_ALWAYS,"Setting the priority factor of %s to %f\n",scheddName,priority);
-	accountant.SetPriorityFactor (scheddName, priority);
+	dprintf(D_ALWAYS,"Setting the priority factor of %s to %f\n", submitter.c_str(), priority);
+	accountant.SetPriorityFactor(submitter, priority);
 	
 	return TRUE;
 }
@@ -676,22 +670,20 @@ int Matchmaker::
 SET_PRIORITY_commandHandler (int, Stream *strm)
 {
 	float	priority;
-	char	scheddName[64];
-	char	*sn = scheddName;
-	int		len = 64;
+    std::string submitter;
 
 	// read the required data off the wire
-	if (!strm->get(sn, len) 	|| 
+	if (!strm->get(submitter) 	|| 
 		!strm->get(priority) 	|| 
 		!strm->end_of_message())
 	{
-		dprintf (D_ALWAYS, "Could not read schedd name and priority\n");
+		dprintf (D_ALWAYS, "Could not read submitter name and priority\n");
 		return FALSE;
 	}
 
 	// set the priority
-	dprintf (D_ALWAYS,"Setting the priority of %s to %f\n",scheddName,priority);
-	accountant.SetPriority (scheddName, priority);
+	dprintf(D_ALWAYS,"Setting the priority of %s to %f\n",submitter.c_str(),priority);
+	accountant.SetPriority(submitter, priority);
 	
 	return TRUE;
 }
@@ -700,23 +692,20 @@ int Matchmaker::
 SET_ACCUMUSAGE_commandHandler (int, Stream *strm)
 {
 	float	accumUsage;
-	char	scheddName[64];
-	char	*sn = scheddName;
-	int		len = 64;
+    std::string submitter;
 
 	// read the required data off the wire
-	if (!strm->get(sn, len) 	|| 
+	if (!strm->get(submitter) 	|| 
 		!strm->get(accumUsage) 	|| 
 		!strm->end_of_message())
 	{
-		dprintf (D_ALWAYS, "Could not read schedd name and accumulatedUsage\n");
+		dprintf (D_ALWAYS, "Could not read submitter name and accumulatedUsage\n");
 		return FALSE;
 	}
 
 	// set the priority
-	dprintf (D_ALWAYS,"Setting the accumulated usage of %s to %f\n",
-			scheddName,accumUsage);
-	accountant.SetAccumUsage (scheddName, accumUsage);
+	dprintf(D_ALWAYS,"Setting the accumulated usage of %s to %f\n", submitter.c_str(), accumUsage);
+	accountant.SetAccumUsage(submitter, accumUsage);
 	
 	return TRUE;
 }
@@ -725,23 +714,20 @@ int Matchmaker::
 SET_BEGINTIME_commandHandler (int, Stream *strm)
 {
 	int	beginTime;
-	char	scheddName[64];
-	char	*sn = scheddName;
-	int		len = 64;
+    std::string submitter;
 
 	// read the required data off the wire
-	if (!strm->get(sn, len) 	|| 
+	if (!strm->get(submitter) 	|| 
 		!strm->get(beginTime) 	|| 
 		!strm->end_of_message())
 	{
-		dprintf (D_ALWAYS, "Could not read schedd name and begin usage time\n");
+		dprintf (D_ALWAYS, "Could not read submitter name and begin usage time\n");
 		return FALSE;
 	}
 
 	// set the priority
-	dprintf (D_ALWAYS,"Setting the begin usage time of %s to %d\n",
-			scheddName,beginTime);
-	accountant.SetBeginTime (scheddName, beginTime);
+	dprintf(D_ALWAYS, "Setting the begin usage time of %s to %d\n", submitter.c_str(), beginTime);
+	accountant.SetBeginTime(submitter, beginTime);
 	
 	return TRUE;
 }
@@ -750,23 +736,20 @@ int Matchmaker::
 SET_LASTTIME_commandHandler (int, Stream *strm)
 {
 	int	lastTime;
-	char	scheddName[64];
-	char	*sn = scheddName;
-	int		len = 64;
+    std::string submitter;
 
 	// read the required data off the wire
-	if (!strm->get(sn, len) 	|| 
+	if (!strm->get(submitter) 	|| 
 		!strm->get(lastTime) 	|| 
 		!strm->end_of_message())
 	{
-		dprintf (D_ALWAYS, "Could not read schedd name and last usage time\n");
+		dprintf (D_ALWAYS, "Could not read submitter name and last usage time\n");
 		return FALSE;
 	}
 
 	// set the priority
-	dprintf (D_ALWAYS,"Setting the last usage time of %s to %d\n",
-			scheddName,lastTime);
-	accountant.SetLastTime (scheddName, lastTime);
+	dprintf(D_ALWAYS,"Setting the last usage time of %s to %d\n", submitter.c_str(), lastTime);
+	accountant.SetLastTime(submitter, lastTime);
 	
 	return TRUE;
 }
@@ -803,23 +786,21 @@ GET_PRIORITY_commandHandler (int, Stream *strm)
 int Matchmaker::
 GET_RESLIST_commandHandler (int, Stream *strm)
 {
-    char    scheddName[64];
-    char    *sn = scheddName;
-    int     len = 64;
+    std::string submitter;
 
     // read the required data off the wire
-    if (!strm->get(sn, len)     ||
+    if (!strm->get(submitter)     ||
         !strm->end_of_message())
     {
-        dprintf (D_ALWAYS, "Could not read schedd name\n");
+        dprintf (D_ALWAYS, "Could not read submitter name\n");
         return FALSE;
     }
 
     // reset usage
-    dprintf (D_ALWAYS,"Getting resource list of %s\n",scheddName);
+    dprintf(D_ALWAYS, "Getting resource list of %s\n", submitter.c_str());
 
 	// get the priority
-	AttrList* ad=accountant.ReportState(scheddName);
+	AttrList* ad=accountant.ReportState(submitter);
 	dprintf (D_ALWAYS,"Getting state information from the accountant\n");
 	
 	if (!ad->putAttrList(*strm) ||
