diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index 7f69432..7f48c20 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -454,11 +454,13 @@ extern const char * const  ATTR_RANK;
 extern const char * const  ATTR_REAL_UID;
 extern const char * const  ATTR_RELEASE_CLAIM;
 extern const char * const  ATTR_RELEASE_REASON;
+extern const char * const  ATTR_REMOTE_AUTOREGROUP;
 extern const char * const  ATTR_REMOTE_GROUP;
 extern const char * const  ATTR_REMOTE_GROUP_RESOURCES_IN_USE;
 extern const char * const  ATTR_REMOTE_GROUP_QUOTA;
 extern const char * const  ATTR_REMOTE_HOST;
 extern const char * const  ATTR_REMOTE_HOSTS;
+extern const char * const  ATTR_REMOTE_NEGOTIATING_GROUP;
 extern const char * const  ATTR_REMOTE_OWNER;
 extern const char * const  ATTR_REMOTE_POOL;
 extern const char * const  ATTR_REMOTE_SLOT_ID;
@@ -519,9 +521,11 @@ extern const char * const ATTR_SUBMITTER_TAG;
 extern const char * const  ATTR_SUBMITTOR_PRIO;  // old-style for ATTR_SUBMITTER_USER_PRIO
 extern const char * const  ATTR_SUBMITTER_USER_PRIO;
 extern const char * const  ATTR_SUBMITTER_USER_RESOURCES_IN_USE;
+extern const char * const  ATTR_SUBMITTER_AUTOREGROUP;
 extern const char * const  ATTR_SUBMITTER_GROUP;
 extern const char * const  ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE;
 extern const char * const  ATTR_SUBMITTER_GROUP_QUOTA;
+extern const char * const  ATTR_SUBMITTER_NEGOTIATING_GROUP;
 extern const char * const  ATTR_SUBNET;
 extern const char * const  ATTR_SUBNET_MASK;
 extern const char * const  ATTR_SUSPEND;
diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index 4b02a91..bf582b5 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -2542,7 +2542,7 @@ negotiateWithGroup ( int untrimmed_num_startds,
                     }
 					negotiation_cycle_stats[0]->active_submitters.insert(scheddName.Value());
 					negotiation_cycle_stats[0]->active_schedds.insert(scheddAddr.Value());
-					result=negotiate( scheddName.Value(), schedd, submitterPrio,
+					result=negotiate(groupName, scheddName.Value(), schedd, submitterPrio,
                                   submitterLimit, submitterLimitUnclaimed,
 								  startdAds, claimIds, 
 								  ignore_submitter_limit,
@@ -3035,7 +3035,7 @@ Matchmaker::MakeClaimIdHash(ClassAdList &startdPvtAdList, ClaimIdHash &claimIds)
 }
 
 int Matchmaker::
-negotiate( char const *scheddName, const ClassAd *scheddAd, double priority,
+negotiate(char const* groupName, char const *scheddName, const ClassAd *scheddAd, double priority,
 		   double submitterLimit, double submitterLimitUnclaimed,
 		   ClassAdListDoesNotDeleteAds &startdAds, ClaimIdHash &claimIds, 
 		   bool ignore_schedd_limit, time_t startTime, 
@@ -3281,6 +3281,11 @@ negotiate( char const *scheddName, const ClassAd *scheddAd, double priority,
 		request.AddTargetRefs( TargetMachineAttrs );
 #endif
 
+        // information regarding the negotiating group context:
+        string negGroupName = (groupName != NULL) ? groupName : hgq_root_group->name.c_str();
+        request.Assign(ATTR_SUBMITTER_NEGOTIATING_GROUP, negGroupName);
+        request.Assign(ATTR_SUBMITTER_AUTOREGROUP, (autoregroup && (negGroupName == hgq_root_group->name))); 
+
 		// insert the submitter user priority attributes into the request ad
 		// first insert old-style ATTR_SUBMITTOR_PRIO
 		request.Assign(ATTR_SUBMITTOR_PRIO , (float)priority );  
@@ -4200,6 +4205,12 @@ matchmakingProtocol (ClassAd &request, ClassAd *offer,
 		offer->Delete(ATTR_MATCHED_CONCURRENCY_LIMITS);
 	}
 
+    // these propagate into the slot ad in the schedd match rec, and from there eventually to the claim
+    // structures in the startd:
+    offer->CopyAttribute(ATTR_REMOTE_GROUP, ATTR_SUBMITTER_GROUP, &request);
+    offer->CopyAttribute(ATTR_REMOTE_NEGOTIATING_GROUP, ATTR_SUBMITTER_NEGOTIATING_GROUP, &request);
+    offer->CopyAttribute(ATTR_REMOTE_AUTOREGROUP, ATTR_SUBMITTER_AUTOREGROUP, &request);
+
 	// ---- real matchmaking protocol begins ----
 	// 1.  contact the startd 
 	if (want_claiming && want_inform_startd) {
diff --git a/src/condor_negotiator.V6/matchmaker.h b/src/condor_negotiator.V6/matchmaker.h
index 32da1fe..a3e0173 100644
--- a/src/condor_negotiator.V6/matchmaker.h
+++ b/src/condor_negotiator.V6/matchmaker.h
@@ -157,6 +157,7 @@ class Matchmaker : public Service
 		char * compute_significant_attrs(ClassAdListDoesNotDeleteAds & startdAds);
 		
 		/** Negotiate w/ one schedd for one user, for one 'pie spin'.
+            @param groupName name of group negotiating under (or NULL)
 			@param scheddName Name attribute from the submitter ad.
 			@param scheddAddr Sinful string of schedd for this submitter.
 			@param priority Priority of this user from the accountant.
@@ -174,7 +175,7 @@ class Matchmaker : public Service
 					MM_DONE if schedd got all the resources it wanted,
 					MM_ERROR if problem negotiating w/ this schedd.
 		**/
-		int negotiate( char const *scheddName, const ClassAd *scheddAd, 
+		int negotiate(char const* groupName, char const *scheddName, const ClassAd *scheddAd, 
 		   double priority,
            double submitterLimit, double submitterLimitUnclaimed,
 		   ClassAdListDoesNotDeleteAds &startdAds, ClaimIdHash &claimIds, 
diff --git a/src/condor_schedd.V6/schedd.cpp b/src/condor_schedd.V6/schedd.cpp
index 17f3dbd..8c7dea8 100644
--- a/src/condor_schedd.V6/schedd.cpp
+++ b/src/condor_schedd.V6/schedd.cpp
@@ -5439,6 +5439,14 @@ Scheduler::contactStartd( ContactStartdArgs* args )
 		return;
 	}
 
+    // some attributes coming out of negotiator's matching process that need to
+    // make a subway transfer from slot/match ad to job/request ad, on their way
+    // to the claim, and then eventually back around to the negotiator for use in
+    // preemption policies:
+    jobAd->CopyAttribute(ATTR_REMOTE_GROUP, mrec->my_match_ad);
+    jobAd->CopyAttribute(ATTR_REMOTE_NEGOTIATING_GROUP, mrec->my_match_ad);
+    jobAd->CopyAttribute(ATTR_REMOTE_AUTOREGROUP, mrec->my_match_ad);
+
 		// Setup to claim the slot asynchronously
 
 	jobAd->Assign( ATTR_STARTD_SENDS_ALIVES, mrec->m_startd_sends_alives );
diff --git a/src/condor_startd.V6/claim.cpp b/src/condor_startd.V6/claim.cpp
index e6d4fbc..b9148d1 100644
--- a/src/condor_startd.V6/claim.cpp
+++ b/src/condor_startd.V6/claim.cpp
@@ -221,6 +221,14 @@ Claim::publish( ClassAd* cad, amask_t how_much )
 		}
 		line.sprintf("%s=%d", ATTR_NUM_PIDS, numJobPids);
 		cad->Insert( line.Value() );
+
+        if ((tmp = c_client->rmtgrp())) {
+            cad->Assign(ATTR_REMOTE_GROUP, tmp);
+        }
+        if ((tmp = c_client->neggrp())) {
+            cad->Assign(ATTR_REMOTE_NEGOTIATING_GROUP, tmp);
+            cad->Assign(ATTR_REMOTE_AUTOREGROUP, c_client->autorg());
+        }
 	}
 
 	if( (c_cluster > 0) && (c_proc >= 0) ) {
@@ -705,6 +713,19 @@ Claim::loadRequestInfo()
 		c_client->setConcurrencyLimits(limits);
 		free(limits); limits = NULL;
 	}
+
+    // stash information about what accounting group match was negotiated under
+    string strval;
+    if (c_ad->LookupString(ATTR_REMOTE_GROUP, strval)) {
+        c_client->setrmtgrp(strval.c_str());
+    }
+    if (c_ad->LookupString(ATTR_REMOTE_NEGOTIATING_GROUP, strval)) {
+        c_client->setneggrp(strval.c_str());
+    }
+    bool boolval=false;
+    if (c_ad->LookupBool(ATTR_REMOTE_AUTOREGROUP, boolval)) {
+        c_client->setautorg(boolval);
+    }
 }
 
 void
@@ -2021,6 +2042,9 @@ Client::Client()
 	c_host = NULL;
 	c_proxyfile = NULL;
 	c_concurrencyLimits = NULL;
+    c_rmtgrp = NULL;
+    c_neggrp = NULL;
+    c_autorg = false;
 	c_numPids = 0;
 }
 
@@ -2032,6 +2056,8 @@ Client::~Client()
 	if( c_acctgrp) free( c_acctgrp );
 	if( c_addr) free( c_addr );
 	if( c_host) free( c_host );
+    if (c_rmtgrp) free(c_rmtgrp);
+    if (c_neggrp) free(c_neggrp);
 }
 
 
@@ -2076,6 +2102,25 @@ Client::setAccountingGroup( const char* grp )
 	}
 }
 
+void Client::setrmtgrp(const char* rmtgrp_) {
+    if (c_rmtgrp) {
+        free(c_rmtgrp);
+        c_rmtgrp = NULL;
+    }
+    if (rmtgrp_) c_rmtgrp = strdup(rmtgrp_);
+}
+
+void Client::setneggrp(const char* neggrp_) {
+    if (c_neggrp) {
+        free(c_neggrp);
+        c_neggrp = NULL;
+    }
+    if (neggrp_) c_neggrp = strdup(neggrp_);
+}
+
+void Client::setautorg(const bool autorg_) {
+    c_autorg = autorg_;
+}
 
 void
 Client::setaddr( const char* updated_addr )
diff --git a/src/condor_startd.V6/claim.h b/src/condor_startd.V6/claim.h
index d5f6a1d..8cb30eb 100644
--- a/src/condor_startd.V6/claim.h
+++ b/src/condor_startd.V6/claim.h
@@ -91,6 +91,9 @@ public:
 	char*	addr() 	{return c_addr;};
 	char*   proxyFile() {return c_proxyfile; };
 	char*   getConcurrencyLimits() {return c_concurrencyLimits; };
+    char*   rmtgrp() {return c_rmtgrp;}
+    char*   neggrp() {return c_neggrp;}
+    bool    autorg() {return c_autorg;}
 	int     numPids() {return c_numPids;};
 
 	void	setuser(const char* user);
@@ -100,6 +103,9 @@ public:
 	void	sethost(const char* host);
 	void    setProxyFile(const char* pf);
 	void    setConcurrencyLimits(const char* limits);
+    void    setrmtgrp(const char* rmtgrp);
+    void    setneggrp(const char* neggrp);
+    void    setautorg(const bool autorg);
 	void    setNumPids(int numJobPids);
 
 		// send a message to the client and accountant that the claim
@@ -114,6 +120,9 @@ private:
 	char	*c_proxyfile;   // file holding delegated proxy
 		                // (used when using GLEXEC_STARTER)
 	char	*c_concurrencyLimits; // limits, if any
+    char*   c_rmtgrp;   // the submitter's accounting group
+    char*   c_neggrp;   // the negotiating accounting group
+    bool    c_autorg;   // true if negotiated via autoregroup policy
 	int     c_numPids;
 
 };
diff --git a/src/condor_utils/condor_attributes.cpp b/src/condor_utils/condor_attributes.cpp
index 5dfdde6..e7d20bd 100644
--- a/src/condor_utils/condor_attributes.cpp
+++ b/src/condor_utils/condor_attributes.cpp
@@ -516,11 +516,13 @@ const char * const ATTR_Q_DATE                   = "QDate";
 const char * const ATTR_RANK					 = "Rank";
 const char * const ATTR_REAL_UID				 = "RealUid";
 const char * const ATTR_RELEASE_REASON			 = "ReleaseReason";
+const char * const ATTR_REMOTE_AUTOREGROUP       = "RemoteAutoregroup";
 const char * const ATTR_REMOTE_GROUP                     = "RemoteGroup";
 const char * const ATTR_REMOTE_GROUP_RESOURCES_IN_USE = "RemoteGroupResourcesInUse";
 const char * const ATTR_REMOTE_GROUP_QUOTA		 = "RemoteGroupQuota";
 const char * const ATTR_REMOTE_HOST				 = "RemoteHost";
 const char * const ATTR_REMOTE_HOSTS			 = "RemoteHosts";
+const char * const ATTR_REMOTE_NEGOTIATING_GROUP = "RemoteNegotiatingGroup";
 const char * const ATTR_REMOTE_OWNER			 = "RemoteOwner";
 const char * const ATTR_REMOTE_POOL				 = "RemotePool";
 const char * const ATTR_REMOTE_SLOT_ID          = "RemoteSlotID";
@@ -576,10 +578,12 @@ const char * const ATTR_STREAM_OUTPUT			 = "StreamOut";
 const char * const ATTR_STREAM_ERROR			 = "StreamErr";
 const char * const ATTR_SUBMIT_EVENT_NOTES		 = "SubmitEventNotes";
 const char * const ATTR_SUBMIT_EVENT_USER_NOTES	 = "SubmitEventUserNotes";
+const char * const ATTR_SUBMITTER_AUTOREGROUP    = "SubmitterAutoregroup";
 const char * const ATTR_SUBMITTER_GROUP          = "SubmitterGroup";
 const char * const ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE = "SubmitterGroupResourcesInUse";
 const char * const ATTR_SUBMITTER_GROUP_QUOTA	 = "SubmitterGroupQuota";
 const char * const ATTR_SUBMITTER_ID			 = "SubmitterId";
+const char * const ATTR_SUBMITTER_NEGOTIATING_GROUP = "SubmitterNegotiatingGroup";
 const char * const ATTR_SUBMITTER_TAG            = "SubmitterTag";
 const char * const ATTR_SUBMITTOR_PRIO           = "SubmittorPrio";   // old-style for ATTR_SUBMITTER_USER_PRIO
 const char * const ATTR_SUBMITTER_USER_PRIO	  = "SubmitterUserPrio";
