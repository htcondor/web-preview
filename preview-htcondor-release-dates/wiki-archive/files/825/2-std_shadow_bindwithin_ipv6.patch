--- condor-8.1.1/src/condor_utils/internet.cpp.ORIG	2013-12-20 14:03:09.000000000 +0100
+++ condor-8.1.1/src/condor_utils/internet.cpp	2014-02-21 15:30:23.000000000 +0100
@@ -877,6 +877,9 @@
 {
 	int start_trial, this_trial;
 	int pid, range;
+	ipv4or6_storage ss;
+	socklen_t len = sizeof(ss);
+	int r;
 
 	// Use hash function with pid to get the starting point
     pid = (int) getpid();
@@ -884,16 +887,30 @@
     // this line must be changed to use the hash function of condor
     start_trial = low_port + (pid * 173/*some prime number*/ % range);
 
+	r = getsockname(fd, &(ss.sa), &len);
+	if (r != 0) {
+		dprintf(D_ALWAYS, "ERROR: getsockname failed, errno: %d\n",
+				errno);
+		return FALSE;
+	}
+	if (ss.all.ss_family == AF_INET) {
+		ss.v4.sin_addr.s_addr = htonl(INADDR_ANY);
+	}
+	else if (ss.all.ss_family == AF_INET6) {
+		ss.v6.sin6_addr = in6addr_any;
+	}
+
     this_trial = start_trial;
 	do {
-		struct sockaddr_in sa_in;
 		priv_state old_priv;
 		int bind_return_value;
 
-		memset(&sa_in, 0, sizeof(sa_in));
-		sa_in.sin_family = AF_INET;
-		sa_in.sin_addr.s_addr = htonl(INADDR_ANY);
-		sa_in.sin_port = htons((u_short)this_trial++);
+		if (ss.all.ss_family == AF_INET) {
+			ss.v4.sin_port = htons((u_short)this_trial++);
+		}
+		else if (ss.all.ss_family == AF_INET6) {
+			ss.v6.sin6_port = htons((u_short)this_trial++);
+		}
 
 // windows doesn't have privileged ports.
 #ifndef WIN32
@@ -903,7 +920,7 @@
 			old_priv = set_root_priv();
 		}
 #endif
-		bind_return_value = bind(fd, (struct sockaddr *)&sa_in, sizeof(sa_in));
+		bind_return_value = bind(fd, &(ss.sa), len);
 #ifndef WIN32
 		if (this_trial <= 1024) {
 			set_priv (old_priv);
