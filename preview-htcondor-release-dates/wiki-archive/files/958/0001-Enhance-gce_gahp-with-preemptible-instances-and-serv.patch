From 687e1effc0e850f3e23f64b625e99268b500ec9e Mon Sep 17 00:00:00 2001
From: Doug Strain <dstrain@google.com>
Date: Tue, 2 Aug 2016 13:09:37 -0700
Subject: [PATCH 1/1] Enhance gce_gahp with preemptible instances and service
 accounts

    - Add a new boolean gce_preemptible attribute.  Setting this
      will allow gce_gahp to submit preemptible instances that have
      lower cost but can be terminated.
    - Add support for service accounts that have no refresh token
      but instead have access tokens with a limited expiration.
---
 src/condor_gridmanager/gahp-client.cpp  |  3 ++
 src/condor_gridmanager/gahp-client.h    |  1 +
 src/condor_gridmanager/gcejob.cpp       |  3 ++
 src/condor_gridmanager/gcejob.h         |  1 +
 src/condor_includes/condor_attributes.h |  1 +
 src/condor_submit.V6/submit.cpp         |  7 ++++
 src/gce_gahp/gceCommands.cpp            | 61 +++++++++++++++++++++++++++++----
 src/gce_gahp/gce_gahp_protocol.txt      |  7 ++--
 src/gce_gahp/gce_io_checkfn.cpp         |  6 ++--
 9 files changed, 79 insertions(+), 11 deletions(-)

diff --git a/src/condor_gridmanager/gahp-client.cpp b/src/condor_gridmanager/gahp-client.cpp
index 21c6faa..278ad3a 100644
--- a/src/condor_gridmanager/gahp-client.cpp
+++ b/src/condor_gridmanager/gahp-client.cpp
@@ -7717,6 +7717,7 @@ int GahpClient::gce_instance_insert( const std::string &service_url,
 									 const std::string &image,
 									 const std::string &metadata,
 									 const std::string &metadata_file,
+                                                                         const std::string &preemptible,
 									 std::string &instance_id )
 {
 	static const char* command = "GCE_INSTANCE_INSERT";
@@ -7740,6 +7741,8 @@ int GahpClient::gce_instance_insert( const std::string &service_url,
 	reqline += metadata.empty() ? NULLSTRING : escapeGahpString( metadata );
 	reqline += " ";
 	reqline += metadata_file.empty() ? NULLSTRING : escapeGahpString( metadata_file );
+	reqline += " ";
+        reqline += preemptible.empty() ? "false" : escapeGahpString( preemptible );
 
 	const char *buf = reqline.c_str();
 
diff --git a/src/condor_gridmanager/gahp-client.h b/src/condor_gridmanager/gahp-client.h
index a75174d..437a255 100644
--- a/src/condor_gridmanager/gahp-client.h
+++ b/src/condor_gridmanager/gahp-client.h
@@ -773,6 +773,7 @@ class GahpClient : public Service {
 								 const std::string &image,
 								 const std::string &metadata,
 								 const std::string &metadata_file,
+								 const std::string &preemptible,
 								 std::string &instance_id );
 
 		int gce_instance_delete( std::string service_url,
diff --git a/src/condor_gridmanager/gcejob.cpp b/src/condor_gridmanager/gcejob.cpp
index b87d0a4..a3c580e 100644
--- a/src/condor_gridmanager/gcejob.cpp
+++ b/src/condor_gridmanager/gcejob.cpp
@@ -174,6 +174,8 @@ GCEJob::GCEJob( ClassAd *classad ) :
 
 	jobAd->LookupString( ATTR_GCE_METADATA, m_metadata );
 
+        jobAd->LookupString( ATTR_GCE_PREEMPTIBLE, m_preemptible );
+
 	// get VM machine type
 	jobAd->LookupString( ATTR_GCE_MACHINE_TYPE, m_machineType );
 
@@ -553,6 +555,7 @@ void GCEJob::doEvaluateState()
 													m_image,
 													m_metadata,
 													m_metadataFile,
+													m_preemptible,
 													instance_id );
 
 					if ( rc == GAHPCLIENT_COMMAND_NOT_SUBMITTED ||
diff --git a/src/condor_gridmanager/gcejob.h b/src/condor_gridmanager/gcejob.h
index cad1c00..82a3516 100644
--- a/src/condor_gridmanager/gcejob.h
+++ b/src/condor_gridmanager/gcejob.h
@@ -96,6 +96,7 @@ private:
 	std::string m_metadata;
 	std::string m_metadataFile;
 	std::string m_machineType;
+        std::string m_preemptible;
 
 	int m_retry_times;
 	
diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index c5e01bd..612a0bc 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -196,6 +196,7 @@
 #define ATTR_GCE_MACHINE_TYPE  "GceMachineType"
 #define ATTR_GCE_METADATA  "GceMetadata"
 #define ATTR_GCE_METADATA_FILE  "GceMetadataFile"
+#define ATTR_GCE_PREEMPTIBLE  "GcePreemptible"
 #define ATTR_GCE_PROJECT  "GceProject"
 #define ATTR_GCE_ZONE  "GceZone"
 #define ATTR_GID  "Gid"
diff --git a/src/condor_submit.V6/submit.cpp b/src/condor_submit.V6/submit.cpp
index 9164997..2f11a9b 100644
--- a/src/condor_submit.V6/submit.cpp
+++ b/src/condor_submit.V6/submit.cpp
@@ -634,6 +634,7 @@ const char* GceAuthFile = "gce_auth_file";
 const char* GceMachineType = "gce_machine_type";
 const char* GceMetadata = "gce_metadata";
 const char* GceMetadataFile = "gce_metadata_file";
+const char* GcePreemptible = "gce_preemptible";
 
 char const *next_job_start_delay = "next_job_start_delay";
 char const *next_job_start_delay2 = "NextJobStartDelay";
@@ -6643,6 +6644,12 @@ SetGridParams()
 		InsertJobExpr( buffer.Value() );
 	}
 
+	// GcePreemptible is not a necessary parameter
+	if( (tmp = condor_param( GcePreemptible, ATTR_GCE_PREEMPTIBLE )) ) {
+		buffer.formatstr( "%s = \"%s\"", ATTR_GCE_METAPREEMPTIBLE, tmp );
+		InsertJobExpr( buffer.Value() );
+		free( tmp );
+	}
 
 	// CREAM clients support an alternate representation for resources:
 	//   host.edu:8443/cream-batchname-queuename
diff --git a/src/gce_gahp/gceCommands.cpp b/src/gce_gahp/gceCommands.cpp
index ffa6e06..3959a2d 100644
--- a/src/gce_gahp/gceCommands.cpp
+++ b/src/gce_gahp/gceCommands.cpp
@@ -29,6 +29,7 @@
 #include "stat_wrapper.h"
 #include <curl/curl.h>
 #include "thread_control.h"
+#include "time.h"
 
 using std::string;
 using std::map;
@@ -310,6 +311,19 @@ bool TryAuthRefresh( const string &client_id, const string &client_secret,
 	return true;
 }
 
+// Return the number of seconds between local timezone
+// and UTC
+long int SecondsBetweenLocalAndUtc() {
+  time_t local = time(NULL);
+  struct tm lcl = *localtime(&local);
+  struct tm utc = *gmtime(&local);
+
+  // Clear DST flag, since that will affect mktime()
+  utc.tm_isdst=lcl.tm_isdst;
+
+  return (long int)mktime(&utc)-(long int)mktime(&lcl);
+}
+
 // Given a file containing OAuth 2.0 credentials, return an access
 // token that can be used to perform GCE requests.
 // If true is returned, then result contains the access token.
@@ -349,10 +363,12 @@ bool GetAccessToken( const string &auth_file, string &access_token,
 		string client_id;
 		string client_secret;
 		string refresh_token;
+		string access_token;
 		string key;
 		string value;
 		int nesting = 0;
 		int expires_in = 0;
+		long int expiration_timestamp = 0;
 		const char *pos;
 		if ( !readShortFile( auth_file, auth_file_contents ) ) {
 			auth_entry.m_err_msg = "Failed to read auth file";
@@ -367,12 +383,38 @@ bool GetAccessToken( const string &auth_file, string &access_token,
 				client_id = value;
 			} else if ( key == "client_secret" ) {
 				client_secret = value;
-			}
+			} else if ( key == "access_token" ) {
+				access_token = value;
+			} else if ( key == "expires_in" ) {
+				expires_in = atoi(value.c_str());
+			} else if ( key == "token_expiry") {
+                                // Parse token expiry time in (UTC) format
+                                // ""2016-07-27T18:44:12Z"
+                                struct tm expiration_tm;
+                                if ( strptime(value.c_str(), "%Y-%m-%dT%TZ", &expiration_tm ) != NULL) {
+                                        expiration_timestamp = mktime(&expiration_tm)-SecondsBetweenLocalAndUtc();
+                                        dprintf(D_ALWAYS,"Found expiration timestamp: %s => %ld\n", value.c_str(), expiration_timestamp);
+                                }
+                        }
 		}
 		if ( refresh_token.empty() ) {
-			auth_entry.m_err_msg = "Failed to find refresh_token in auth file";
+                  if ( expiration_timestamp > 0 ) {
+                    expires_in = expiration_timestamp - time(NULL);
+                  }
+                  if ( access_token.empty() ) {
+			auth_entry.m_err_msg = "Failed to find refresh_token or access_token in auth file";
 			goto done;
+                  }
+                  if ( expires_in <= 0 ) {
+			auth_entry.m_err_msg = "Access_token is expired, please re-login.";
+			goto done;
+                  }
+                  auth_entry.m_access_token = access_token;
+                  auth_entry.m_expiration = time(NULL) + expires_in;
+                  dprintf(D_ALWAYS,"Setting expiration to %d\n",auth_entry.m_expiration);
+                  goto done;
 		}
+
 		if ( client_id.empty() ) {
 			auth_entry.m_err_msg = "Failed to find client_id in auth file";
 			goto done;
@@ -382,7 +424,7 @@ bool GetAccessToken( const string &auth_file, string &access_token,
 			goto done;
 		}
 
-		if ( TryAuthRefresh( client_id, client_secret, refresh_token,
+                if (TryAuthRefresh( client_id, client_secret, refresh_token,
 							 auth_entry.m_access_token, expires_in,
 							 auth_entry.m_err_msg ) ) {
 			auth_entry.m_expiration = time(NULL) + expires_in;
@@ -786,18 +828,19 @@ GceInstanceInsert::GceInstanceInsert() { }
 
 GceInstanceInsert::~GceInstanceInsert() { }
 
-// Expecting:GCE_INSTACE_INSERT <req_id> <serviceurl> <authfile> <project> <zone>
+// Expecting:GCE_INSTANCE_INSERT <req_id> <serviceurl> <authfile> <project> <zone>
 //     <instance_name> <machine_type> <image> <metadata> <metadata_file>
+//     <preemptible>
 bool GceInstanceInsert::workerFunction(char **argv, int argc, string &result_string) {
 	assert( strcasecmp( argv[0], "GCE_INSTANCE_INSERT" ) == 0 );
 
 	int requestID;
 	get_int( argv[1], & requestID );
 
-	if( ! verify_number_args( argc, 11 ) ) {
+	if( ! verify_number_args( argc, 12 ) ) {
 		result_string = create_failure_result( requestID, "Wrong_Argument_Number" );
 		dprintf( D_ALWAYS, "Wrong number of arguments (%d should be >= %d) to %s\n",
-				 argc, 6, argv[0] );
+				 argc, 12, argv[0] );
 		return false;
 	}
 
@@ -833,7 +876,6 @@ bool GceInstanceInsert::workerFunction(char **argv, int argc, string &result_str
 			metadata[key] = value;
 		}
 	}
-
 	insert_request.requestBody = "{\n";
 	insert_request.requestBody += " \"machineType\": \"";
 	insert_request.requestBody += argv[7];
@@ -841,6 +883,11 @@ bool GceInstanceInsert::workerFunction(char **argv, int argc, string &result_str
 	insert_request.requestBody += " \"name\": \"";
 	insert_request.requestBody += argv[6];
 	insert_request.requestBody += "\",\n";
+	insert_request.requestBody += "  \"scheduling\":\n";
+	insert_request.requestBody += "  {\n";
+	insert_request.requestBody += "    \"preemptible\": ";
+	insert_request.requestBody += argv[11];
+	insert_request.requestBody += "\n  },\n";
 	insert_request.requestBody += " \"disks\": [\n  {\n";
 	insert_request.requestBody += "   \"boot\": true,\n";
 	insert_request.requestBody += "   \"initializeParams\": {\n";
diff --git a/src/gce_gahp/gce_gahp_protocol.txt b/src/gce_gahp/gce_gahp_protocol.txt
index 14b5668..9a050f7 100644
--- a/src/gce_gahp/gce_gahp_protocol.txt
+++ b/src/gce_gahp/gce_gahp_protocol.txt
@@ -595,7 +595,8 @@
         GCE_INSTANCE_INSERT <SP> <request-ID> <SP> <service-URL>
             <SP> <cred-file> <SP> <project> <SP> <zone>
             <SP> <instance-name> <SP> <machine-type>
-            <SP> <image> <SP> <metadata> <SP> <metadata-file> <CRLF>
+            <SP> <image> <SP> <metadata> <SP> <metadata-file>
+	    <SP> <gce_preemptible> <CRLF>
 
         The following attributes are required.
 
@@ -607,9 +608,11 @@
         * image = a value for the 'image' property
         * metadata = a set of metadata name/value pairs of the form
             <name>=<value>,<name>=<value>...
-        * metadate-file = the full path to a file containing metadata
+        * metadata-file = the full path to a file containing metadata
             name/value pairs of the form
             <name>=<value>\n<name>=<value>\n...
+	* gce_preemptible = 'true' or 'false', which will determine
+	    whether the instance submitted can be preempted
 
     + Result Line:
 
diff --git a/src/gce_gahp/gce_io_checkfn.cpp b/src/gce_gahp/gce_io_checkfn.cpp
index a9349d3..d852808 100644
--- a/src/gce_gahp/gce_io_checkfn.cpp
+++ b/src/gce_gahp/gce_io_checkfn.cpp
@@ -36,9 +36,10 @@ bool GcePing::ioCheck(char **argv, int argc)
 
 // Expecting:GCE_INSTACE_INSERT <req_id> <serviceurl> <authfile> <project> <zone>
 //     <instance_name> <machine_type> <image> <metadata> <metadata_file>
+//     <preemptible>
 bool GceInstanceInsert::ioCheck(char **argv, int argc)
 {
-	return verify_number_args(argc, 11) &&
+	return verify_number_args(argc, 12) &&
 		verify_request_id(argv[1]) &&
 		verify_string_name(argv[2]) &&
 		verify_string_name(argv[3]) &&
@@ -48,7 +49,8 @@ bool GceInstanceInsert::ioCheck(char **argv, int argc)
 		verify_string_name(argv[7]) &&
 		verify_string_name(argv[8]) &&
 		verify_string_name(argv[9]) &&
-		verify_string_name(argv[10]);
+		verify_string_name(argv[10]) &&
+		verify_string_name(argv[11]);
 }
 
 // Expecting:GCE_INSTACE_DELETE <req_id> <serviceurl> <authfile> <project> <zone> <instance_name>
-- 
2.8.0.rc3.226.g39d4020

