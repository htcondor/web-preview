diff --git a/doc/version-history/8-5.history.tex b/doc/version-history/8-5.history.tex
index d3a7755..0f67135 100644
--- a/doc/version-history/8-5.history.tex
+++ b/doc/version-history/8-5.history.tex
@@ -29,7 +29,11 @@ The details of each version are described below.
 
 \begin{itemize}
 
-\item None.
+\item Added the capability to set ClassAd attributes for a
+\Condor{dagman} job within the DAG file by using the new
+DAG\_SUBMIT\_COMMAND command.
+TEMPTEMP -- add link when manual is updated
+\Ticket{5107}
 
 \end{itemize}
 
diff --git a/src/condor_dagman/condor_submit_dag.cpp b/src/condor_dagman/condor_submit_dag.cpp
index 87f0f68..2850c10 100644
--- a/src/condor_dagman/condor_submit_dag.cpp
+++ b/src/condor_dagman/condor_submit_dag.cpp
@@ -57,14 +57,16 @@ int parseJobOrDagLine( const char *dagLine, StringList &tokens,
 			const char *fileType, const char *&submitOrDagFile,
 			const char *&directory );
 int setUpOptions( SubmitDagDeepOptions &deepOpts,
-			SubmitDagShallowOptions &shallowOpts );
+			SubmitDagShallowOptions &shallowOpts,
+			StringList &dagFileAppendLines );
 void ensureOutputFilesExist(const SubmitDagDeepOptions &deepOpts,
 			SubmitDagShallowOptions &shallowOpts);
 int getOldSubmitFlags( SubmitDagShallowOptions &shallowOpts );
 int parseArgumentsLine( const MyString &subLine,
 			SubmitDagShallowOptions &shallowOpts );
 void writeSubmitFile(/* const */ SubmitDagDeepOptions &deepOpts,
-			/* const */ SubmitDagShallowOptions &shallowOpts);
+			/* const */ SubmitDagShallowOptions &shallowOpts,
+			/* const */ StringList &dagFileAppendLines );
 int submitDag( SubmitDagShallowOptions &shallowOpts );
 
 //---------------------------------------------------------------------------
@@ -81,6 +83,9 @@ int main(int argc, char *argv[])
 		// Initialize our Distribution object -- condor vs. hawkeye, etc.
 	myDistro->Init( argc, argv );
 
+		// Save submit append lines from DAG file here (see gittrac #5107).
+	StringList dagFileAppendLines;
+
 		// Load command-line arguments into the deepOpts and shallowOpts
 		// structures.
 	SubmitDagDeepOptions deepOpts;
@@ -117,7 +122,7 @@ int main(int argc, char *argv[])
 	}
 	
 		// Further work to get the shallowOpts structure set up properly.
-	tmpResult = setUpOptions( deepOpts, shallowOpts );
+	tmpResult = setUpOptions( deepOpts, shallowOpts, dagFileAppendLines );
 	if ( tmpResult != 0 ) return tmpResult;
 
 		// Check whether the output files already exist; if so, we may
@@ -137,7 +142,7 @@ int main(int argc, char *argv[])
 	}
 
 		// Write the actual submit file for DAGMan.
-	writeSubmitFile( deepOpts, shallowOpts );
+	writeSubmitFile( deepOpts, shallowOpts, dagFileAppendLines );
 
 	return submitDag( shallowOpts );
 }
@@ -292,7 +297,8 @@ parseJobOrDagLine( const char *dagLine, StringList &tokens,
 */
 int
 setUpOptions( SubmitDagDeepOptions &deepOpts,
-			SubmitDagShallowOptions &shallowOpts )
+			SubmitDagShallowOptions &shallowOpts,
+			StringList &dagFileAppendLines )
 {
 	shallowOpts.strLibOut = shallowOpts.primaryDagFile + ".lib.out";
 	shallowOpts.strLibErr = shallowOpts.primaryDagFile + ".lib.err";
@@ -348,8 +354,9 @@ setUpOptions( SubmitDagDeepOptions &deepOpts,
 	}
 
 	MyString	msg;
-	if ( !GetConfigFile( shallowOpts.dagFiles, deepOpts.useDagDir,
-				shallowOpts.strConfigFile, msg) ) {
+	if ( !GetConfigAndAppend( shallowOpts.dagFiles, deepOpts.useDagDir,
+				shallowOpts.strConfigFile,
+				dagFileAppendLines, msg) ) {
 		fprintf( stderr, "ERROR: %s\n", msg.Value() );
 		return 1;
 	}
@@ -641,8 +648,9 @@ EnvFilter::ImportFilter( const MyString &var, const MyString &val ) const
 }
 
 //---------------------------------------------------------------------------
-void writeSubmitFile(/* const */ SubmitDagDeepOptions &deepOpts,
-			/* const */ SubmitDagShallowOptions &shallowOpts)
+void writeSubmitFile( /* const */ SubmitDagDeepOptions &deepOpts,
+			/* const */ SubmitDagShallowOptions &shallowOpts,
+			/* const */ StringList &dagFileAppendLines )
 {
 	FILE *pSubFile = safe_fopen_wrapper_follow(shallowOpts.strSubFile.Value(), "w");
 	if (!pSubFile)
@@ -890,23 +898,25 @@ void writeSubmitFile(/* const */ SubmitDagDeepOptions &deepOpts,
 
 	MyString env_str;
 	MyString env_errors;
-	if(!env.getDelimitedStringV1RawOrV2Quoted(&env_str,&env_errors)) {
-		fprintf(stderr,"Failed to insert environment: %s",env_errors.Value());
+	if ( !env.getDelimitedStringV1RawOrV2Quoted( &env_str, &env_errors ) ) {
+		fprintf( stderr,"Failed to insert environment: %s",
+					env_errors.Value() );
 		exit(1);
 	}
     fprintf(pSubFile, "environment\t= %s\n",env_str.Value());
 
-    if(deepOpts.strNotification != "") 
-	{	
-		fprintf(pSubFile, "notification\t= %s\n", deepOpts.strNotification.Value());
+    if ( deepOpts.strNotification != "" ) {	
+		fprintf( pSubFile, "notification\t= %s\n",
+					deepOpts.strNotification.Value() );
     }
 
 		// Append user-specified stuff to submit file...
+
 		// ...first, the insert file, if any...
-	if (shallowOpts.appendFile != "") {
-		FILE *aFile = safe_fopen_wrapper_follow(shallowOpts.appendFile.Value(), "r");
-		if (!aFile)
-		{
+	if ( shallowOpts.appendFile != "" ) {
+		FILE *aFile = safe_fopen_wrapper_follow(
+					shallowOpts.appendFile.Value(), "r");
+		if ( !aFile ) {
 			fprintf( stderr, "ERROR: unable to read submit append file (%s)\n",
 				 	shallowOpts.appendFile.Value() );
 			exit( 1 );
@@ -914,18 +924,25 @@ void writeSubmitFile(/* const */ SubmitDagDeepOptions &deepOpts,
 
 		char *line;
 		int lineno = 0;
-		while ((line = getline_trim(aFile, lineno)) != NULL) {
+		while ( (line = getline_trim( aFile, lineno )) != NULL ) {
     		fprintf(pSubFile, "%s\n", line);
 		}
 
-		fclose(aFile);
+		fclose( aFile );
+	}
+
+		// ...now append lines specified in the DAG file...
+	dagFileAppendLines.rewind();
+	char *appendCmd;
+	while ( (appendCmd = dagFileAppendLines.next()) != NULL ) {
+    	fprintf( pSubFile, "%s\n", appendCmd );
 	}
 
 		// ...now things specified directly on the command line.
 	shallowOpts.appendLines.rewind();
 	char *command;
-	while ((command = shallowOpts.appendLines.next()) != NULL) {
-    	fprintf(pSubFile, "%s\n", command);
+	while ( (command = shallowOpts.appendLines.next()) != NULL ) {
+    	fprintf( pSubFile, "%s\n", command );
 	}
 
     fprintf(pSubFile, "queue\n");
diff --git a/src/condor_dagman/dagman_multi_dag.cpp b/src/condor_dagman/dagman_multi_dag.cpp
index de36805..69ceb87 100644
--- a/src/condor_dagman/dagman_multi_dag.cpp
+++ b/src/condor_dagman/dagman_multi_dag.cpp
@@ -39,11 +39,12 @@ AppendError(MyString &errMsg, const MyString &newError)
 
 //-------------------------------------------------------------------------
 bool
-GetConfigFile(/* const */ StringList &dagFiles, bool useDagDir, 
-			MyString &configFile, MyString &errMsg)
+GetConfigAndAppend( /* const */ StringList &dagFiles, bool useDagDir, 
+			MyString &configFile, StringList &appendLines, MyString &errMsg )
 {
 	bool		result = true;
 
+		// Note: destructor will change back to original directory.
 	TmpDir		dagDir;
 
 	dagFiles.rewind();
@@ -68,23 +69,72 @@ GetConfigFile(/* const */ StringList &dagFiles, bool useDagDir,
 			newDagFile = dagFile;
 		}
 
-			//
-			// Get the list of config files from the current DAG file.
-			//
 		StringList		configFiles;
-		if ( param_boolean( "DAGMAN_USE_OLD_DAG_READER", false ) ) {
-			dprintf( D_ALWAYS, "Warning: DAGMAN_USE_OLD_DAG_READER "
-						"is no longer supported\n" );
+
+			// Note: destructor will close file.
+		MultiLogFiles::FileReader reader;
+		errMsg = reader.Open( newDagFile );
+		if ( errMsg != "" ) {
+			return false;
 		}
-		MyString msg;
-		msg = MultiLogFiles::getValuesFromFileNew( newDagFile,
-				"config", configFiles );
-		if ( msg != "" ) {
-			AppendError( errMsg,
-					MyString("Error getting DAGMan config file: ") +
-					msg );
-			result = false;
+
+		MyString logicalLine;
+		while ( reader.NextLogicalLine( logicalLine ) ) {
+			if ( logicalLine != "" ) {
+					// Note: StringList constructor removes leading
+					// whitespace from lines.
+				StringList tokens( logicalLine.Value(), " \t" );
+				tokens.rewind();
+
+				const char *firstToken = tokens.next();
+				if ( !strcasecmp( firstToken, "config" ) ) {
+
+						// Get the value.
+					const char *newValue = tokens.next();
+					if ( !newValue || !strcmp( newValue, "" ) ) {
+						AppendError( errMsg, "Improperly-formatted "
+									"file: value missing after keyword "
+									"CONFIG" );
+			    		result = false;
+					} else {
+
+							// Add the value we just found to the config
+							// files list (if it's not already in the
+							// list -- we don't want duplicates).
+						configFiles.rewind();
+						char *existingValue;
+						bool alreadyInList = false;
+						while ( ( existingValue = configFiles.next() ) ) {
+							if ( !strcmp( existingValue, newValue ) ) {
+								alreadyInList = true;
+							}
+						}
+
+						if ( !alreadyInList ) {
+								// Note: append copies the string here.
+							configFiles.append( newValue );
+						}
+					}
+
+					//some DAG commands are needed for condor_submit_dag, too...
+				} else if ( !strcasecmp( firstToken, "DAG_SUBMIT_COMMAND" ) ) {
+						// Strip of DAGMan-specific command name; the
+						// rest we pass to the submit file.
+					logicalLine.replaceString( "DAG_SUBMIT_COMMAND", "" );
+					logicalLine.trim();
+					if ( logicalLine == "" ) {
+						AppendError( errMsg, "Improperly-formatted "
+									"file: value missing after keyword "
+									"DAG_SUBMIT_COMMAND" );
+						result = false;
+					} else {
+						appendLines.append( logicalLine.Value() );
+					}
+				}
+			}
 		}
+	
+		reader.Close();
 
 			//
 			// Check the specified config file(s) against whatever we
diff --git a/src/condor_dagman/dagman_multi_dag.h b/src/condor_dagman/dagman_multi_dag.h
index 6faea32..5f22020 100644
--- a/src/condor_dagman/dagman_multi_dag.h
+++ b/src/condor_dagman/dagman_multi_dag.h
@@ -33,9 +33,9 @@ const int MAX_RESCUE_DAG_DEFAULT = 100;
 	// is normally configured lower).
 const int ABS_MAX_RESCUE_DAG_NUM = 999;
 
-/** Get the configuration file, if any, specified by the given list of
-	DAG files.  If more than one DAG file specifies a configuration file,
-	they must specify the same file.
+/** Get the configuration file (if any) and the submit append commands
+	(if any), specified by the given list of DAG files.  If more than one
+	DAG file specifies a configuration file, they must specify the same file.
 	@param dagFiles: the list of DAG files
 	@param useDagDir: run DAGs in directories from DAG file paths 
 			if true
@@ -44,11 +44,12 @@ const int ABS_MAX_RESCUE_DAG_NUM = 999;
 			be set to that value before this method is called; the
 			value of configFile will be changed if it's not already
 			set and the DAG file(s) specify a configuration file
+	@param appendLines: a StringList to receive the submit append commands.
 	@param errMsg: a MyString to receive any error message
 	@return true if the operation succeeded; otherwise false
 */
-bool GetConfigFile(/* const */ StringList &dagFiles, bool useDagDir,
-			MyString &configFile, MyString &errMsg);
+bool GetConfigAndAppend( /* const */ StringList &dagFiles, bool useDagDir,
+			MyString &configFile, StringList &appendLines, MyString &errMsg );
 
 /** Make the given path into an absolute path, if it is not already.
 	@param filePath: the path to make absolute (filePath is changed)
diff --git a/src/condor_dagman/parse.cpp b/src/condor_dagman/parse.cpp
index f52043e..30660cd 100644
--- a/src/condor_dagman/parse.cpp
+++ b/src/condor_dagman/parse.cpp
@@ -327,6 +327,12 @@ bool parse (Dag *dag, const char *filename, bool useDagDir) {
 			parsed_line_successfully = true;
 		}
 
+		// Allow a DAG_SUBMIT_COMMAND spec, but ignore it here because it
+		// is actually parsed by condor_submit_dag.
+		else if (strcasecmp( token, "DAG_SUBMIT_COMMAND" ) == 0 ) {
+			parsed_line_successfully = true;
+		}
+
 		// Handle a Splice spec
 		else if(strcasecmp(token, "SPLICE") == 0) {
 			parsed_line_successfully = parse_splice(dag, filename,
@@ -368,7 +374,8 @@ bool parse (Dag *dag, const char *filename, bool useDagDir) {
 			debug_printf( DEBUG_QUIET, "%s (line %d): "
 				"ERROR: expected JOB, DATA, SUBDAG, SCRIPT, PARENT, RETRY, "
 				"ABORT-DAG-ON, DOT, VARS, PRIORITY, CATEGORY, MAXJOBS, "
-				"CONFIG, SPLICE, FINAL, NODE_STATUS_FILE, or PRE_SKIP token\n",
+				"CONFIG, DAG_SUBMIT_COMMAND, SPLICE, FINAL, "
+				"NODE_STATUS_FILE, or PRE_SKIP token\n",
 				filename, lineNumber );
 			parsed_line_successfully = false;
 		}
diff --git a/src/condor_tests/CMakeLists.txt b/src/condor_tests/CMakeLists.txt
index da6cf0f..54dd3a2 100644
--- a/src/condor_tests/CMakeLists.txt
+++ b/src/condor_tests/CMakeLists.txt
@@ -656,6 +656,7 @@ if (BUILD_TESTING)
 	condor_pl_test(job_dagman_script_defer "Test DAG pre/post script deferral feature" "dagman;quick;full;quicknolink")
 	condor_pl_test(job_dagman_submit_glob-A "Test DAG with node jobs using new submit globbing feature" "dagman;quick;full;quicknolink")
 	condor_pl_test(job_dagman_submit_glob-B "Test DAG with node jobs using feature, in combination with DAGMAN_PROHIBIT_MULTI_JOBS" "dagman;quick;full;quicknolink")
+	condor_pl_test(job_dagman_set_attr "Test setting ClassAd attrs in DAG file" "dagman;quick;full;quicknolink")
 	#condor_pl_test(perf_jobs_sue_10_10_30_van "Generated jobs performance test" "performance;long")
 	#condor_pl_test(perf_xfer_deb_10_10_30_van "Generated transfer performance test" "performance;long")
 	condor_pl_test(job_filexfer_sandbox-empty_van "Are job sandboxes with bad permissions cleaned up?" "framework;quick;full;quicknolink")
diff --git a/src/condor_tests/Test_Requirements b/src/condor_tests/Test_Requirements
index 7d831cb..13f8072 100644
--- a/src/condor_tests/Test_Requirements
+++ b/src/condor_tests/Test_Requirements
@@ -203,6 +203,7 @@ job_dagman_rm: personal
 job_dagman_script_defer: personal
 job_dagman_submit_glob-A: personal
 job_dagman_submit_glob-B: personal
+job_dagman_set_attr: personal
 job_filexfer_base-input1_van: personal
 job_filexfer_base_van: personal
 job_filexfer_basic_van: personal
diff --git a/src/condor_tests/Windows_SkipList b/src/condor_tests/Windows_SkipList
index 5e98fda..e0ab4ff 100644
--- a/src/condor_tests/Windows_SkipList
+++ b/src/condor_tests/Windows_SkipList
@@ -134,6 +134,7 @@ job_dagman_use_hold_claim
 job_dagman_usedagdir
 job_dagman_vars
 job_dagman_script_defer
+job_dagman_set_attr
 job_negotiator_restart
 
 lib_eventlog_rotation-no_rotations_1
diff --git a/src/condor_tests/job_dagman_set_attr-node.pl b/src/condor_tests/job_dagman_set_attr-node.pl
new file mode 100755
index 0000000..e25de0d
--- /dev/null
+++ b/src/condor_tests/job_dagman_set_attr-node.pl
@@ -0,0 +1,7 @@
+#! /usr/bin/env perl
+
+open (OUTPUT, "condor_q -l $ARGV[0] 2>&1 |") or die "Can't fork: $!";
+while (<OUTPUT>) {
+	print "$_";
+}
+close (OUTPUT) or die "Condor_q failed: $?";
diff --git a/src/condor_tests/job_dagman_set_attr-nodeA.cmd b/src/condor_tests/job_dagman_set_attr-nodeA.cmd
new file mode 100644
index 0000000..22d434c
--- /dev/null
+++ b/src/condor_tests/job_dagman_set_attr-nodeA.cmd
@@ -0,0 +1,11 @@
+# Note:  Maybe change this to local universe once gittrac #5299 is
+# fixed.  wenger 2015-12-11
+universe	= scheduler
+executable	= ./job_dagman_set_attr-node.pl
+arguments	= $(DAGManJobId)
+output		= job_dagman_set_attr-nodeA.out
+error		= job_dagman_set_attr-nodeA.err
+# Note: we need getenv = true for the node job to talk to the schedd of
+# the personal condor that's running the test.
+getenv		= true
+queue
diff --git a/src/condor_tests/job_dagman_set_attr-nodeB.cmd b/src/condor_tests/job_dagman_set_attr-nodeB.cmd
new file mode 100644
index 0000000..b326952
--- /dev/null
+++ b/src/condor_tests/job_dagman_set_attr-nodeB.cmd
@@ -0,0 +1,11 @@
+# Note:  Maybe change this to local universe once gittrac #5299 is
+# fixed.  wenger 2015-12-11
+universe	= scheduler
+executable	= ./job_dagman_set_attr-node.pl
+arguments	= $(DAGManJobId)
+output		= job_dagman_set_attr-nodeB.out
+error		= job_dagman_set_attr-nodeB.err
+# Note: we need getenv = true for the node job to talk to the schedd of
+# the personal condor that's running the test.
+getenv		= true
+queue
diff --git a/src/condor_tests/job_dagman_set_attr.run b/src/condor_tests/job_dagman_set_attr.run
new file mode 100755
index 0000000..2ec9dc4
--- /dev/null
+++ b/src/condor_tests/job_dagman_set_attr.run
@@ -0,0 +1,136 @@
+#! /usr/bin/env perl
+##**************************************************************
+##
+## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+## University of Wisconsin-Madison, WI.
+## 
+## Licensed under the Apache License, Version 2.0 (the "License"); you
+## may not use this file except in compliance with the License.  You may
+## obtain a copy of the License at
+## 
+##    http://www.apache.org/licenses/LICENSE-2.0
+## 
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an "AS IS" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+##
+##**************************************************************
+
+use CondorTest;
+use CondorUtils;
+
+$cmd = ['job_dagman_set_attr1.dag', 'job_dagman_set_attr2.dag'];
+$testdesc =  'Condor submit dag - test setting ClassAd attributes - scheduler U';
+$testname = "job_dagman_set_attr";
+$dagman_args = "-verbose -append '+test_attr0 = Dalyan' -append '+test_attr3 = Vrsic' -insert_sub_file job_dagman_set_attr.sub";
+
+@outfiles = ("job_dagman_set_attr.dag.dagman.out",
+	"job_dagman_set_attr-nodeA.out",
+	"job_dagman_set_attr-nodeB.out");
+
+# Note:  We won't necessarily find the lines in any specific order.
+@expected_lines = (
+	'test_attr0 = Dalyan',
+	'test_attr1 = 234',
+	'test_attr2 = 0.987',
+	'test_attr3 = Vrsic',
+	'test_attr4 = 3.14159',
+	'test_attr6 = 987',
+	'AccountingGroup = "agrp1.auser1"',
+);
+
+my $killedchosen = 0;
+
+# truly const variables in perl
+sub IDLE{1};
+sub HELD{5};
+sub RUNNING{2};
+
+# Get rid of any existing output files.
+foreach $name (@outfiles) {
+	if (-e $name) {
+		runcmd("rm -f $name");
+	}
+}
+
+$abnormal = sub 
+{
+	die "Want to see only submit, execute and unsuccessful completion\n";
+};
+
+$failure = sub 
+{
+	die "Error: DAG is not expected to fail!\n";
+};
+
+$aborted = sub 
+{
+	die "Abort event NOT expected\n";
+};
+
+$held = sub 
+{
+	die "Held event NOT expected\n";
+};
+
+$executed = sub
+{
+	my %info = @_;
+
+	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
+};
+
+$submitted = sub
+{
+	CondorTest::debug("submitted: This test will see submit, executing and unsuccessful completion\n",1);
+};
+
+$success = sub
+{
+	CondorTest::debug("executed successfully\n",1);
+	CondorTest::debug("Verifying output\n",1);
+	$diditpass = 1;
+	shift @outfiles; # get rid of dagman.out
+	foreach $file (@outfiles) {
+		CondorTest::debug("Checking $file\n",1);
+
+		$canopen = open(OUT, "<$file");
+		if (! (defined $canopen)) {
+			CondorTest::debug("Cannot open output file <$file>:$!\n",1);
+			$diditpass = 0;
+		} else {
+			$contents = do { local $/; <OUT>; };
+			foreach $eline (@expected_lines) {
+				if (index($contents, $eline) >= 0) {
+					CondorTest::debug("Found $eline in $file\n",1);
+				} else {
+					CondorTest::debug("ERROR: $eline not found in $file\n",1);
+					$diditpass = 0;
+				}
+			}
+			close(OUT);
+		}
+	}
+
+	if ($diditpass == 0) {
+		die "All expected files and correct output failed\n";
+	}
+};
+
+CondorTest::RegisterExitedSuccess( $testname, $success);
+CondorTest::RegisterExitedFailure( $testname, $failure );
+CondorTest::RegisterExecute($testname, $executed);
+CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
+CondorTest::RegisterAbort( $testname, $aborted );
+CondorTest::RegisterHold( $testname, $held );
+CondorTest::RegisterSubmit( $testname, $submitted );
+
+if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
+	CondorTest::debug("$testname: SUCCESS\n",1);
+	exit(0);
+} else {
+	die "$testname: CondorTest::RunTest() failed\n";
+}
+
diff --git a/src/condor_tests/job_dagman_set_attr.sub b/src/condor_tests/job_dagman_set_attr.sub
new file mode 100644
index 0000000..3c9b651
--- /dev/null
+++ b/src/condor_tests/job_dagman_set_attr.sub
@@ -0,0 +1 @@
++test_attr4 = 3.14159
diff --git a/src/condor_tests/job_dagman_set_attr1.dag b/src/condor_tests/job_dagman_set_attr1.dag
new file mode 100644
index 0000000..5d65f63
--- /dev/null
+++ b/src/condor_tests/job_dagman_set_attr1.dag
@@ -0,0 +1,10 @@
+DAG_SUBMIT_COMMAND +test_attr0 = Bodrum
+DAG_SUBMIT_COMMAND +test_attr1 = 123
+DAG_SUBMIT_COMMAND +test_attr2 = 0.543
+DAG_SUBMIT_COMMAND +test_attr2 = 0.987
+DAG_SUBMIT_COMMAND accounting_group = \
+	agrp1
+DAG_SUBMIT_COMMAND accounting_group_user = auser1
+
+Job NodeA job_dagman_set_attr-nodeA.cmd
+
diff --git a/src/condor_tests/job_dagman_set_attr2.dag b/src/condor_tests/job_dagman_set_attr2.dag
new file mode 100644
index 0000000..e65c931
--- /dev/null
+++ b/src/condor_tests/job_dagman_set_attr2.dag
@@ -0,0 +1,6 @@
+DAG_SUBMIT_COMMAND \
+	+test_attr1 = 234
+DAG_SUBMIT_COMMAND +test_attr6 = 987
+
+Job NodeB job_dagman_set_attr-nodeB.cmd
+
diff --git a/src/condor_utils/read_multiple_logs.cpp b/src/condor_utils/read_multiple_logs.cpp
index 6387aa8..9e2fe21 100644
--- a/src/condor_utils/read_multiple_logs.cpp
+++ b/src/condor_utils/read_multiple_logs.cpp
@@ -501,118 +501,6 @@ MultiLogFiles::makePathAbsolute(MyString &filename, CondorError &errstack)
 
 ///////////////////////////////////////////////////////////////////////////////
 
-// Skip whitespace in a std::string buffer.
-void
-MultiLogFiles::skip_whitespace(std::string const &s,int &offset) {
-	while((int)s.size() > offset && isspace(s[offset])) offset++;
-};
-
-// Read a file into a std::string.  Return false on error.
-MyString
-MultiLogFiles::readFile(char const *filename,std::string& buf)
-{
-    char chunk[4000];
-	MyString rtnVal;
-
-	int fd = safe_open_wrapper_follow(filename, O_RDONLY);
-	if (fd < 0) {
-		rtnVal.formatstr("error opening submit file %s: %s",
-				filename, strerror(errno) );
-		dprintf(D_ALWAYS, "%s\n", rtnVal.Value() );
-		return rtnVal;
-	}
-
-    while(1) {
-        ssize_t n = read(fd,chunk,sizeof(chunk)-1);
-        if(n>0) {
-            chunk[n] = '\0';
-            buf += chunk;
-        }
-        else if(n==0) {
-            break;
-        }
-        else {
-            rtnVal.formatstr("failed to read submit file %s: %s",
-					filename, strerror(errno) );
-			dprintf(D_ALWAYS, "%s\n", rtnVal.Value() );
-			close(fd);
-			return rtnVal;
-        }
-    }
-
-	close(fd);
-    return rtnVal;
-}
-
-///////////////////////////////////////////////////////////////////////////////
-
-MyString
-MultiLogFiles::getValuesFromFileNew(const MyString &fileName, 
-			const MyString &keyword, StringList &values, int skipTokens)
-{
-	MyString	errorMsg;
-
-	FileReader reader;
-	errorMsg = reader.Open( fileName );
-	if ( errorMsg != "" ) {
-		return errorMsg;
-	}
-
-	MyString logicalLine;
-	while ( reader.NextLogicalLine( logicalLine ) ) {
-		if ( logicalLine != "" ) {
-				// Note: StringList constructor removes leading
-				// whitespace from lines.
-			StringList tokens( logicalLine.Value(), " \t" );
-			tokens.rewind();
-
-			if ( !strcasecmp(tokens.next(), keyword.Value()) ) {
-					// Skip over unwanted tokens.
-				for ( int skipped = 0; skipped < skipTokens; skipped++ ) {
-					if ( !tokens.next() ) {
-						MyString result = MyString( "Improperly-formatted "
-									"file: value missing after keyword <" ) +
-									keyword + ">";
-			    		return result;
-					}
-				}
-
-					// Get the value.
-				const char *newValue = tokens.next();
-				if ( !newValue || !strcmp( newValue, "" ) ) {
-					MyString result = MyString( "Improperly-formatted "
-								"file: value missing after keyword <" ) +
-								keyword + ">";
-			    	return result;
-				}
-
-					// Add the value we just found to the values list
-					// (if it's not already in the list -- we don't want
-					// duplicates).
-				values.rewind();
-				char *existingValue;
-				bool alreadyInList = false;
-				while ( (existingValue = values.next()) ) {
-					if (!strcmp( existingValue, newValue ) ) {
-						alreadyInList = true;
-					}
-				}
-
-				if ( !alreadyInList ) {
-						// Note: append copies the string here.
-					values.append(newValue);
-				}
-			}
-		}
-	}
-
-	reader.Close();
-
-	return "";
-}
-
-///////////////////////////////////////////////////////////////////////////////
-
 MyString
 MultiLogFiles::getParamFromSubmitLine(MyString &submitLine,
 		const char *paramName)
diff --git a/src/condor_utils/read_multiple_logs.h b/src/condor_utils/read_multiple_logs.h
index 8df9af7..c7c5a5c 100644
--- a/src/condor_utils/read_multiple_logs.h
+++ b/src/condor_utils/read_multiple_logs.h
@@ -41,18 +41,6 @@
 class MultiLogFiles
 {
 public:
-		/** getValuesFromFileNew() performs exactly the same function as
-			getValuesFromFile(); the difference is that
-			getValuesFromFileNew() reads the given file line-by-line
-			rather than reading the whole thing into one string (this
-			fixes gittrac #4171).  As of 8.0.6 we are keeping both
-			versions so the new one can be turned off with configuration,
-			but eventually the old version should be torn out completely
-			(see gittrac #4189).
-		*/
-	static MyString getValuesFromFileNew(const MyString &fileName,
-			const MyString &keyword, StringList &values, int skipTokens = 0);
-
 		/** Gets the specified value from a submit file (looking for the
 			syntax <keyword> = <value>).
 			@param strSubFilename: the submit file name
@@ -164,27 +152,6 @@ private:
 		 */
 	static MyString CombineLines(StringList &listIn, char continuation,
 			const MyString &filename, StringList &listOut);
-
-		/**
-		 * Skip whitespace in a std::string buffer.  This is a helper function
-		 * for loadLogFileNamesFromStorkSubFile().  When the new ClassAds
-		 * parser can skip whitespace on it's own, this function can be
-		 * removed.
-		 * @param buffer name
-		 * @param input/output offset into buffer
-		 * @return void
-		 */
-	static void skip_whitespace(std::string const &s,int &offset);
-
-		/**
-		 * Read a file into a std::string helper function for
-		 * loadLogFileNamesFromStorkSubFile().
-		 * @param Filename to read.
-		 * @param output buffer
-		 * @return "" if okay, or else an error message.
-		 */
-	static MyString readFile(char const *filename,std::string& buf);
-
 };
 
 class ReadMultipleUserLogs
