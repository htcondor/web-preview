TODO for new distribution
-------------------------

** Create useful and meaningful example programs and include these in
    the distribution.

** Definitely, the get_machine_info() needs to be moved into the RMC class!

** Do a better job of not letting the user get more hosts than they need. 

** The hostaddlogic is not particularitly smart.  When there is
   an overshoot, you should just make (n-target) requests to the class
   that prompted the addition in the first place.  There is no need to 
   have the (IMO) flawed rebalance() logic

** Have a better way for users to access the worker list
   (Or maybe even recode the entire worker list to be something better
    than a stupid linked list)
  
** Clean up the DOC++

** Actually use the DEFINES generated by configure so that the code
   is even mildly portable

** Do something with MW-INDEPENDENT.  My idea is to use configure to
   help us out here.

   configure --with-independent

   or something like that, will generate the proper "MW-independent"
    libraries. 

** Also, what to do about Jean-Pierre's XML_OUTPUT.  I again suggest
   having configure help us out here.

   configure --with-xml
 

** MWFiles does not "bring to life" the application if the master (or
    the master Schedd) crashes. 


** Condor-PVM gives a TASKEXIT when the task exits and a HOSTDELETE
   when the claim is broken and the starter and pvmd exit.  When a PVM
   task is preempted, MW gets a TASKEXIT followed by a HOSTDELETE.
   However, if the PVM task crashes or exits on its own, MW just gets
   a TASKEXIT.  In this case, MW should either spawn a new task on
   that host or delete it.  It shouldn't leave the host idle for the
   rest of the run.  This is complicated because the notifications are
   asynchronous, so it's not clear if the claim was broken and the
   HOSTDELETE is on its way or if the task exited and the HOSTDELETE
   isn't coming.  Maybe a timer would help with this.  We see this
   problem mainly with CPLEX jobs, which seem to crash a lot in the
   CPLEX library.

   Jeff L. writes: 

     You need to take into account the fact that condor-PVM
     sometimes(?)  gives both a TASKEXIT and a HOSTDELETE message.
     Files just gives one of these messages...  Hmmmmmmmm.

     Jim suggests keeping a list of TASKEXITED workers.  If the
     HOSTDELETE doesn't come in "a while", try a restart or a 
     pvm_delhost().

     I have the code now delete the worker on a TASKEXIT -- which then
     results in lots of confusion when the matching HOSTDELETE comes
     later.  Actually, I waffle back and forth on this depending on
     how buggy the application code is...

** Get rid of want_checkpointing const int in MWFileRC.C -- this should
   be set and read from the Condor Class Ad
 
** You need to do some (at least rudimentary) new (bad_alloc)
   exception catching.

** MWPvmRC doesn't match workers with hosts correctly ([condor-admin
   #2139]).  Basically, now that Condor-PVM supports SMP startds, MW
   can't just call gethostname() in the worker to uniquely identify
   each worker.  Instead, MW should use the hostname it gets from PVM
   in the HostAdd notification, which can be of the form vmN@hostname.
   I think Jeff recently changed MWPvmRC::start_worker() to stash the
   hostname from PVM in the worker structure.  The problem is that MW
   passes pvm_spawn() an architecture class, so Condor might start
   that worker on a different machine than what was given in the
   HostAdd.  This typically happens when a bunch of hosts are added at
   the same time.

   There are two reasons it's important for MW to have the right
   hostnames associated with the workers.  First, MW calls
   pvm_delhosts() with the worker's hostname in
   MWPvmRC::removeWorker().  Second, it avoids a lot of confusion when
   reading the logs and debugging problems.

   I propose that MW should pass the host name it gets from PVM to
   pvm_spawn(), instead the architecture class, so it's guaranteed
   that Condor will start the worker on the host MW expects.  This may
   also help when there is a bad host: instead of trying to start
   workers on the same problematic host again and again, because it
   happens to be at the head of the PVM shadow's machine list for that
   architecture class, MW will always try to start a worker on each
   host at most once.

** Crash in MWDriver::pushTask() ([condor-admin #2140]).
