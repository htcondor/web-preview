
dnl Caching is usually WRONG for systems with cross-mounted file systems
dnl (the cache file may correspond to a different system).  Since configure
dnl is not on a performance-critical path, go for robustness over speed.
dnl

define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/MWDriver.h)

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl Checks for libraries.
dnl  We're just build libraries now, so you shouldn't 
dnl need to check all these until you build the exec


dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_UID_T

dnl Checks for library functions.
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(getcwd gethostname gettimeofday mkdir strstr)

dnl
dnl Starting here are Jeff's (non-auto) additions
dnl

dnl Some C++ support macros
AC_CXX_DYNAMIC_CAST

dnl Jeff's check for condor

AC_PATH_PROG(JUNK1, condor_status)
JUNK2=`dirname $JUNK1`
CONDOR_DIR=`dirname $JUNK2`
AC_SUBST(CONDOR_DIR)

dnl Jeff's check for (Condor) PVM
dnl  -- Probably this should check if it really is 
dnl     a Condor PVM library, or just a PVM library

if test -z "$PVM_ROOT"; then
  AC_PATH_PROG(JUNK3, pvm)
  JUNK4=`dirname $JUNK3`	
  PVM_ROOT=`dirname $JUNK4`/
fi
AC_SUBST(PVM_ROOT)

if test -z "$DOCXX"; then
   DOCXX=doc++
fi
AC_SUBST(DOCXX)

AC_OUTPUT(src/Makefile Makefile src/RMComm/MW-File/Makefile src/RMComm/MW-CondorPVM/Makefile, echo timestamp > stamp-h )
