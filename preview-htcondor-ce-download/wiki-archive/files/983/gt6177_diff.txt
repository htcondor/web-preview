diff --git a/doc/version-history/8-6.history.tex b/doc/version-history/8-6.history.tex
index 68ff0f6..9ab7287 100644
--- a/doc/version-history/8-6.history.tex
+++ b/doc/version-history/8-6.history.tex
@@ -41,7 +41,9 @@ The details of each version are described below.
 
 \begin{itemize}
 
-\item None.
+\item Fixed a bug that caused \Condor{dagman} to sometimes (rarely, but
+repeatably) crash when parsing DAGs containing splices.
+\Ticket{6170}
 
 \end{itemize}
 
diff --git a/src/condor_dagman/dag.cpp b/src/condor_dagman/dag.cpp
index 0b23f83..f17ac97 100644
--- a/src/condor_dagman/dag.cpp
+++ b/src/condor_dagman/dag.cpp
@@ -4548,6 +4548,7 @@ Dag::LiftSplices(SpliceLayer layer)
 		_splices.remove(key);
 		delete splice;
 	}
+	ASSERT( _splices.getNumElements() == 0 );
 
 	// and prefix them if there was a DIR for the dag.
 	PropagateDirectoryToAllNodes();
@@ -4614,6 +4615,7 @@ Dag::AssumeOwnershipofNodes(const MyString &spliceName, OwnedMaterials *om)
 		}
 	}
 
+	// 1. Take ownership of the nodes
 	// 1b. Re-set the node categories (if any) so they point to the
 	// ThrottleByCategory object in *this* DAG rather than the splice
 	// DAG (which will be deleted soon).
diff --git a/src/condor_utils/HashTable.h b/src/condor_utils/HashTable.h
index 9cf4419..8bb6881 100644
--- a/src/condor_utils/HashTable.h
+++ b/src/condor_utils/HashTable.h
@@ -38,6 +38,8 @@ class HashBucket {
 
 template <class Index, class Value> class HashTable;
 
+// Note that the HashIterator only works if both Index and Value are
+// pointer types or can be assigned the value NULL.  wenger 2017-03-08
 template< class Index, class Value >
 class HashIterator : std::iterator<std::input_iterator_tag, std::pair<Index, Value> >
 {
@@ -595,6 +597,9 @@ int HashTable<Index,Value>::remove(const Index &index)
 		{
       		if (bucket == ht[idx]) 
 			{
+				// The item we're deleting is the first one for
+				// this index.
+
 				ht[idx] = bucket->next;
 
 				// if the item being deleted is being iterated, ensure that
@@ -602,11 +607,14 @@ int HashTable<Index,Value>::remove(const Index &index)
 				if (bucket == currentItem)
 				{
 					currentItem = 0;
-					if (--currentBucket < 0) currentBucket = 0;
+					if (--currentBucket < -1) currentBucket = -1;
 				}
 			}
       		else
 			{
+				// The item we're deleting is NOT the first one for
+				// this index.
+
 				prevBuc->next = bucket->next;
 
 				// Again, take care of the iterator
