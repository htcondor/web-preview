#
#  The FATCOP option file.
#


# What is the name of the worker executable(s)
workername /p/condor/workspaces/shared.1/metaneos/linderot/MW/fatcop/fatcop-worker-SUN4SOL2

## LPSolver information.
# 
#
#   altlpsolver -- What is the LP solver "of last resort"
#       UNDEFINEDLPSOLVER = 0 
#       CPLEX = 1 
#       SOPLEX=2 
#       MINOS=3
#
#  numcplexlicenses -- The number of available CPLEX licenses at this site
#  Right now, we try to use CPLEX until
#  there are numcplexleaveopen licenses left.
# 
# If you wish to use only "altlpsolver", then set numcplexlicenses to 0
# If using CPLEX, you must give the license directory pointer file

altlpsolver 2
numcplexlicenses 0
numcplexleaveopen 15
cplexpointerfile /s/cplex-6.5/cplexlicfile

#
# preprocess the formulation at the root?
#
#   0(default) - no presolve, 
#   1          - simple presolve, 
#   2          - advanced presolve(not active yet)
presolve 1

#
# Preprocess the formulation at the root of each task?
#
#  nodepreprocessing = 0 =>  Don't do it!
#  nodepreprocessing = 1 =>  Bound tightening only
#  nodepreprocessing = 2 =>  BOund tightening and coefficienct improvement

nodepreprocessing 1

#
# node selection strategy: 
#
#   0(default) - best estimation based on pseudocost
#   1          - depth first
#   2          - best bound
#   3          - mixed strategy(i.e. depth first followed by best first)
#   4	       - mixed strategy(i.e. pseudocost followed by best first)
nodsel 2

#
# branching strategy
#
#0   (default) - pseudocost
#1             - natural order
#2             - maximum infeasibility
#3             - minimum infeasibility
varsel 0

# How to initialize the pseudocost
# 0: generate initial pseudocost by solving LPs explicitly
# 1: generate initial pseudocost using objective coefficients
# 2: Always generate pseudocosts from scratch
way_of_ini_pseucost 2

# Iteration limit for explicitly computing pseudocosts 
#  (If way_of_ini_pseucost > 0 )
#  (<0 => completely reoptimize)
pseudo_itlim 50

#  Max. number of (fractional) variables on which to compute full
#   pseudocosts
#  (<0 => All fractional variables)
pseudo_varlim -1

#
# cutting plane generation
#
genknapcut 1
genflowcut 1
gensknapcut 1

#
# maximum number of cuts
#
maxCuts 2000

#
# node limit
#
nodelim 1000000000

#
# time limit
#
timelim 1000000000

#
# set optcr, will be overwrite by gams option
#
#   This is the relative gap to optimality to which you wish to solve
setrel 0.0

#
# set optca will be overwrite by gams option
#  This is the absolute gap to optimality to which you wish to solve
setabs 0.0

#set upper Bound
#upperBound  285.0001



#
#  The type of checkpointing
#     0 -- None
#     1 -- By number of nodes
#     2 -- By time (an integer number of seconds)
#

checkpointType 1

#
#  The checkpoint Frequency
#
#     if checkpointType = 0, this is redundant
#     if checkpointType = 1, this is the number of TASKS between checkpoints
#     if checkpointType = 2, this is the number of seconds (an integer) between checkpoints

checkpointFrequency 1

#
#  After how many nodes should the driver write pool status information
#
logFrequency 1
 
# perform heuristics before bb to get a good solution
# note this heuristics is defined separately and dynamically linked
# to solver
# 0: no , 1: do 
preHeuristics 0


#
#  Diving Heuristic Strategy
#  
#  0 -- None
#  1 -- At the root of every task
#
#  Others you should have include 
#     dynamic based on success rate
#     only if root is mod of a given depth
#     only if lpsolver is not SOPLEX
#   

divingHeuristic 1

#
# maximum time limit to solve one subtree in a slave (in seconds)
#
MaxTimeInSlave 100

#
# maximum nodes to evaluate on a slave
# 
MaxNodeInSlave -1


