diff --git a/src/condor_dagman/dag.cpp b/src/condor_dagman/dag.cpp
index bb7c6f7..f055c14 100644
--- a/src/condor_dagman/dag.cpp
+++ b/src/condor_dagman/dag.cpp
@@ -351,6 +351,16 @@ bool Dag::Bootstrap (bool recovery)
 		_jobstateLog.WriteRecoveryFinished();
         debug_printf( DEBUG_NORMAL, "...done with RECOVERY mode "
 					"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n" );
+
+			// Fix for gittrac #4727 -- we don't allow a FINAL node to be
+			// marked as done in recovery mode, unless the whole DAG is
+			// finished.
+		if ( !FinishedRunning( true ) && _final_job &&
+					( _final_job->GetStatus() == Job::STATUS_DONE ) ) {
+			--_numNodesDone;
+			_final_job->Reset();
+        	debug_printf( DEBUG_NORMAL, "Set final node status to STATUS_NOT_READY\n" );
+		}
 		print_status();
 
 		_recovery = false;
@@ -2883,7 +2893,8 @@ Dag::DumpNodeStatus( bool held, bool removed )
 		return;
 	}
 	
-	if ( !_statusFileOutdated && !held && !removed ) {
+	if ( !_statusFileOutdated && !held && !removed &&
+				!FinishedRunning( true ) && !_dagIsAborted ) {
 		debug_printf( DEBUG_DEBUG_1, "Node status file not updated "
 					"because it is not yet outdated\n" );
 		return;
@@ -4071,6 +4082,7 @@ Dag::SubmitNodeJob( const Dagman &dm, Job *node, CondorID &condorID )
     	if( node->JobType() == Job::TYPE_CONDOR ) {
 	  		node->_submitTries++;
 			if ( node->GetNoop() ) {
+				debug_printf( DEBUG_NORMAL, "Fake submit for NOOP node\n" );
       			submit_success = fake_condor_submit( condorID, 0,
 							node->GetJobName(), node->GetDirectory(),
 							_use_default_node_log ? DefaultNodeLog():
diff --git a/src/condor_dagman/job.cpp b/src/condor_dagman/job.cpp
index d8cb9ed..cca4882 100644
--- a/src/condor_dagman/job.cpp
+++ b/src/condor_dagman/job.cpp
@@ -105,9 +105,6 @@ Job::Job( const job_type_t jobType, const char* jobName,
 
 	_scriptPre = NULL;
 	_scriptPost = NULL;
-	_Status = STATUS_READY;
-	_isIdle = false;
-	countedAsDone = false;
 
 	_jobName = strnewp (jobName);
 	_directory = strnewp (directory);
@@ -123,9 +120,6 @@ Job::Job( const job_type_t jobType, const char* jobName,
 	_jobID = _jobID_counter++;
 
 	retry_max = 0;
-	retries = 0;
-	_submitTries = 0;
-	retval = -1; // so Coverity is happy
 	have_retry_abort_val = false;
 	retry_abort_val = 0xdeadbeef;
 	have_abort_dag_val = false;
@@ -135,8 +129,6 @@ Job::Job( const job_type_t jobType, const char* jobName,
 	_visited = false;
 	_dfsOrder = -1; // so Coverity is happy
 
-	_queuedNodeJobProcs = 0;
-
 	_hasNodePriority = false;
 	_nodePriority = 0;
 
@@ -146,18 +138,36 @@ Job::Job( const job_type_t jobType, const char* jobName,
 	_noop = false;
 
 	_jobTag = NULL;
-	_jobstateSeqNum = 0;
-	_lastEventTime = 0;
 
 	varsFromDag = new List<NodeVar>;
 
-	snprintf( error_text, JOB_ERROR_TEXT_MAXLEN, "unknown" );
+	Reset();
 
-	_timesHeld = 0;
-	_jobProcsOnHold = 0;
+	_Status = STATUS_READY;
 
 	return;
 }
+
+//---------------------------------------------------------------------------
+void
+Job::Reset()
+{
+	_Status = STATUS_NOT_READY;
+	_isIdle = false;
+	countedAsDone = false;
+	retries = 0;
+	_submitTries = 0;
+	retval = -1; // so Coverity is happy
+	_queuedNodeJobProcs = 0;
+	snprintf( error_text, JOB_ERROR_TEXT_MAXLEN, "unknown" );
+	_timesHeld = 0;
+	_jobProcsOnHold = 0;
+	_jobstateSeqNum = 0;
+	_lastEventTime = 0;
+	_onHold.clear();
+	_gotEvents.clear();
+}
+
 //---------------------------------------------------------------------------
 void
 Job::PrefixDirectory(MyString &prefix)
diff --git a/src/condor_dagman/job.h b/src/condor_dagman/job.h
index e1f786e..2b7bcf1 100644
--- a/src/condor_dagman/job.h
+++ b/src/condor_dagman/job.h
@@ -168,6 +168,12 @@ class Job {
   
     ~Job();
 
+    /** Reset the data for this node as if it hadn't been run (for
+		final node fix for gittrac #4727).  Note that this sets
+		the node status to STATUS_NOT_READY, not STATUS_READY.
+	 */
+	void Reset();
+
 	void PrefixName(const MyString &prefix);
 	inline const char* GetJobName() const { return _jobName; }
 	inline const char* GetDirectory() const { return _directory; }
@@ -594,6 +600,7 @@ private:
 
     /*	The ID of this job.  This serves as a primary key for Jobs, where each
 		Job's ID is unique from all the rest 
+		This is NOT the CondorID of the node job.
 	*/ 
 	JobID_t _jobID;
 
@@ -622,7 +629,6 @@ private:
 		// Whether the log file is XML.
 	bool _logFileIsXml;
 
-
 		// Whether this is a noop job (shouldn't actually be submitted
 		// to Condor).
 	bool _noop;
diff --git a/src/condor_tests/job_dagman_gt4727-lower-nodeA.cmd.fail b/src/condor_tests/job_dagman_gt4727-lower-nodeA.cmd.fail
index c00fd36..da90cc9 100644
--- a/src/condor_tests/job_dagman_gt4727-lower-nodeA.cmd.fail
+++ b/src/condor_tests/job_dagman_gt4727-lower-nodeA.cmd.fail
@@ -7,4 +7,3 @@ getenv               	= true
 output			= job_dagman_gt4727-lower-nodeA.out
 error			= job_dagman_gt4727-lower-nodeA.err
 queue
-
diff --git a/src/condor_tests/job_dagman_gt4727-lower.dag b/src/condor_tests/job_dagman_gt4727-lower.dag
index 9da274b..50a7a01 100644
--- a/src/condor_tests/job_dagman_gt4727-lower.dag
+++ b/src/condor_tests/job_dagman_gt4727-lower.dag
@@ -1,3 +1,10 @@
+# Note:  When we hit the bug this DAG will wait forever...
+
+NODE_STATUS_FILE job_dagman_gt4727-lower.dag.status
+JOBSTATE_LOG job_dagman_gt4727-lower.dag.jobstate.log
+
 Job NodeA job_dagman_gt4727-lower-nodeA.cmd
-Retry NodeA 3
+# Turns out we don't need retry here for this to fail.
+# Retry NodeA 3
+
 Final NodeF job_dagman_gt4727-lower-nodeF.cmd
diff --git a/src/condor_tests/job_dagman_gt4727-upper.dag b/src/condor_tests/job_dagman_gt4727-upper.dag
index 146913a..3f6d632 100644
--- a/src/condor_tests/job_dagman_gt4727-upper.dag
+++ b/src/condor_tests/job_dagman_gt4727-upper.dag
@@ -1,10 +1,16 @@
+NODE_STATUS_FILE job_dagman_gt4727-upper.dag.status
+JOBSTATE_LOG job_dagman_gt4727-upper.dag.jobstate.log
+
+# Run the lower-level DAG the first time -- it will fail because
+# it fails to submit its first node.
 Subdag External NodeA job_dagman_gt4727-lower.dag
 Script Pre NodeA job_dagman_gt4727-nodeA-pre.pl
 
-# We're not doing "subdag external" here because that would do
-# "condor_submit -force ..." (we need to avoid the force).  (Could also
-# do it with retries.)
-Job NodeB job_dagman_gt4727-lower.dag.condor.sub
+# When we hit the bug this DAG will wait forever...
+Subdag External NodeB job_dagman_gt4727-lower.dag
+# This PRE script will cause the lower-level DAG to go into recovery
+# mode when it runs; also, the node that failed to submit the first
+# time around will succeed this time.
 Script Pre NodeB job_dagman_gt4727-nodeB-pre.pl
 
 Parent NodeA Child NodeB
diff --git a/src/condor_tests/job_dagman_gt4727.run b/src/condor_tests/job_dagman_gt4727.run
new file mode 100755
index 0000000..15e7679
--- /dev/null
+++ b/src/condor_tests/job_dagman_gt4727.run
@@ -0,0 +1,119 @@
+#! /usr/bin/env perl
+##**************************************************************
+##
+## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+## University of Wisconsin-Madison, WI.
+## 
+## Licensed under the Apache License, Version 2.0 (the "License"); you
+## may not use this file except in compliance with the License.  You may
+## obtain a copy of the License at
+## 
+##    http://www.apache.org/licenses/LICENSE-2.0
+## 
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an "AS IS" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+##
+##**************************************************************
+
+# Tests gittrac #4727: Submit failures + retries + final node + rescue +
+# recov = hung DAGMan
+
+use CondorTest;
+use CondorUtils;
+
+$cmd = 'job_dagman_gt4727-upper.dag';
+$testdesc =  'Condor submit dag - test gittrac #4727 - scheduler U';
+$testname = "job_dagman_gt4727";
+$dagman_args = "-verbose";
+
+@outfiles = ("job_dagman_gt4727-lower.dag.status",
+	"job_dagman_gt4727-upper.dag.status",
+	"job_dagman_gt4727-lower.dag.jobstate.log",
+	"job_dagman_gt4727-upper.dag.jobstate.log",
+	"job_dagman_gt4727-lower.dag.dagman.out",
+	"job_dagman_gt4727-upper.dag.dagman.out");
+
+my $killedchosen = 0;
+
+# truly const variables in perl
+sub IDLE{1};
+sub HELD{5};
+sub RUNNING{2};
+
+# Get rid of any existing output files.
+foreach $ofile (@outfiles) {
+	if (-e $ofile) {
+		runcmd("rm -f $ofile");
+	}
+}
+
+$abnormal = sub 
+{
+	die "Error: Want to see only submit, execute and successful completion\n";
+};
+
+$aborted = sub 
+{
+	die "Error: Abort event NOT expected\n";
+};
+
+$held = sub 
+{
+	die "Error: Held event NOT expected\n";
+};
+
+$executed = sub
+{
+	my %info = @_;
+
+	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
+};
+
+$submitted = sub
+{
+	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
+};
+
+$success = sub
+{
+	CondorTest::debug("executed successfully\n",1);
+	CondorTest::debug("Verifying output\n",1);
+	$diditpass = 1;
+
+	#TEMPTEMP -- check for node status files, jobstate.log files, rescue files? here
+	# Check for expected output files.
+	foreach $ofile (@outfiles) {
+		if (! -e $ofile) {
+			CondorTest::debug("ERROR: missing expected output file $ofile\n");
+			$diditpass = 0;
+		}
+	}
+
+	if($diditpass == 0) {
+		die "Error: All expected files and correct output failed\n";
+	}
+};
+
+$failure = sub
+{
+	die "Error: DAG is not expected to fail!\n";
+};
+
+CondorTest::RegisterExitedSuccess( $testname, $success);
+CondorTest::RegisterExitedFailure( $testname, $failure );
+CondorTest::RegisterExecute($testname, $executed );
+CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
+CondorTest::RegisterAbort( $testname, $aborted );
+CondorTest::RegisterHold( $testname, $held );
+CondorTest::RegisterSubmit( $testname, $submitted );
+
+if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
+	CondorTest::debug("$testname: SUCCESS\n",1);
+	exit(0);
+} else {
+	die "Error: $testname: CondorTest::RunTest() failed\n";
+}
+
diff --git a/src/condor_tests/job_dagman_node_status_rm.run b/src/condor_tests/job_dagman_node_status_rm.run
old mode 100644
new mode 100755
