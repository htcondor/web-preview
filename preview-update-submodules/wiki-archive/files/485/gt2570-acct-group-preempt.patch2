diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index c028ab7..af638bd 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -421,6 +421,7 @@ extern const char * const  ATTR_PREEMPTING_ACCOUNTING_GROUP;
 extern const char * const  ATTR_PREEMPTING_RANK;
 extern const char * const  ATTR_PREEMPTING_OWNER;
 extern const char * const  ATTR_PREEMPTING_USER;
+extern const char * const  ATTR_PREEMPT_STATE;
 extern const char * const  ATTR_PREFERENCES;
 extern const char * const  ATTR_PREFER_PARALLEL_SCHEDULING_GROUP;
 extern const char * const  ATTR_PREV_SEND_ESTIMATE;
@@ -434,6 +435,7 @@ extern const char * const  ATTR_RANK;
 extern const char * const  ATTR_REAL_UID;
 extern const char * const  ATTR_RELEASE_CLAIM;
 extern const char * const  ATTR_RELEASE_REASON;
+extern const char * const  ATTR_REMOTE_GROUP;
 extern const char * const  ATTR_REMOTE_GROUP_RESOURCES_IN_USE;
 extern const char * const  ATTR_REMOTE_GROUP_QUOTA;
 extern const char * const  ATTR_REMOTE_HOST;
@@ -498,6 +500,7 @@ extern const char * const ATTR_SUBMITTER_TAG;
 extern const char * const  ATTR_SUBMITTOR_PRIO;  // old-style for ATTR_SUBMITTER_USER_PRIO
 extern const char * const  ATTR_SUBMITTER_USER_PRIO;
 extern const char * const  ATTR_SUBMITTER_USER_RESOURCES_IN_USE;
+extern const char * const  ATTR_SUBMITTER_GROUP;
 extern const char * const  ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE;
 extern const char * const  ATTR_SUBMITTER_GROUP_QUOTA;
 extern const char * const  ATTR_SUBNET;
diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index deb61dd..3234e93 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -904,10 +904,11 @@ compute_significant_attrs(ClassAdListDoesNotDeleteAds & startdAds)
 
 
 bool Matchmaker::
-getGroupInfoFromUserId( const char *user, float & groupQuota, float & groupUsage )
+getGroupInfoFromUserId(const char* user, string& groupName, float& groupQuota, float& groupUsage)
 {
 	ASSERT(groupQuotasHash);
 
+    groupName = "";
 	groupQuota = 0.0;
 	groupUsage = 0.0;
 
@@ -915,17 +916,17 @@ getGroupInfoFromUserId( const char *user, float & groupQuota, float & groupUsage
 
     GroupEntry* group = accountant.GetAssignedGroup(user);
 
-    // If it is the root group, we interpret here as "not a group" for backward compatability
-    if (hgq_root_group == group) return false;
+    // if group quotas not in effect, return here for backward compatability
+    if (hgq_groups.size() <= 1) return false;
 
-    MyString groupname = group->name.c_str();
+    groupName = group->name;
 
-	if (groupQuotasHash->lookup(groupname, groupQuota) == -1) {
+	if (groupQuotasHash->lookup(groupName, groupQuota) == -1) {
 		// hash lookup failed, must not be a group name
 		return false;
 	}
 
-	groupUsage = accountant.GetWeightedResourcesUsed(groupname);
+	groupUsage = accountant.GetWeightedResourcesUsed(groupName);
 
 	return true;
 }
@@ -2187,6 +2188,7 @@ negotiateWithGroup ( int untrimmed_num_startds,
 			schedd_ver_string = NULL;
 
 			double submitterLimit = 0.0;
+            double submitterLimitUnclaimed = 0.0;
 			double submitterUsage = 0.0;
 
 			calculateSubmitterLimit(
@@ -2201,6 +2203,7 @@ negotiateWithGroup ( int untrimmed_num_startds,
 				slotWeightTotal,
 					/* result parameters: */
 				submitterLimit,
+                submitterLimitUnclaimed,
 				submitterUsage,
 				submitterShare,
 				submitterAbsShare,
@@ -2277,17 +2280,16 @@ negotiateWithGroup ( int untrimmed_num_startds,
 				} else {
 					int numMatched = 0;
 					startTime = time(NULL);
-					double limitUsed = 0.0;
                     if (negotiation_cycle_stats[0]->active_submitters.count(scheddName.Value()) <= 0) {
                         negotiation_cycle_stats[0]->num_idle_jobs += num_idle_jobs;
                     }
 					negotiation_cycle_stats[0]->active_submitters.insert(scheddName.Value());
 					negotiation_cycle_stats[0]->active_schedds.insert(scheddAddr.Value());
-					result=negotiate( scheddName.Value(),schedd,submitterPrio,
-								  submitterAbsShare, submitterLimit,
+					result=negotiate( scheddName.Value(), schedd, submitterPrio,
+                                  submitterLimit, submitterLimitUnclaimed,
 								  startdAds, claimIds, 
-								  scheddVersion, ignore_submitter_limit,
-								  startTime, numMatched, limitUsed, pieLeft);
+								  ignore_submitter_limit,
+                                  startTime, numMatched, pieLeft);
 					updateNegCycleEndTime(startTime, schedd);
 				}
 			}
@@ -2778,12 +2780,11 @@ Matchmaker::MakeClaimIdHash(ClassAdList &startdPvtAdList, ClaimIdHash &claimIds)
 }
 
 int Matchmaker::
-negotiate( char const *scheddName, const ClassAd *scheddAd, double priority, double share,
-		   double submitterLimit,
+negotiate( char const *scheddName, const ClassAd *scheddAd, double priority,
+		   double submitterLimit, double submitterLimitUnclaimed,
 		   ClassAdListDoesNotDeleteAds &startdAds, ClaimIdHash &claimIds, 
-		   const CondorVersionInfo & scheddVersion,
 		   bool ignore_schedd_limit, time_t startTime, 
-		   int &numMatched, double &limitUsed, double &pieLeft)
+		   int& numMatched, double &pieLeft)
 {
 	ReliSock	*sock;
 	int			reply;
@@ -2795,7 +2796,9 @@ negotiate( char const *scheddName, const ClassAd *scheddAd, double priority, dou
 	bool		only_consider_startd_rank;
 	bool		display_overlimit = true;
 	bool		limited_by_submitterLimit = false;
-	char		remoteUser[128];
+    string remoteUser;
+    double limitUsed = 0.0;
+    double limitUsedUnclaimed = 0.0;
 
 	numMatched = 0;
 
@@ -3031,11 +3034,12 @@ negotiate( char const *scheddName, const ClassAd *scheddAd, double priority, dou
 		// next insert the submitter user usage attributes into the request
 		request.Assign(ATTR_SUBMITTER_USER_RESOURCES_IN_USE, 
 					   accountant.GetWeightedResourcesUsed ( scheddName ));
+        string temp_groupName;
 		float temp_groupQuota, temp_groupUsage;
 		bool is_group = false;
-		if (getGroupInfoFromUserId(scheddName,temp_groupQuota,temp_groupUsage))
-		{
+		if (getGroupInfoFromUserId(scheddName, temp_groupName, temp_groupQuota, temp_groupUsage)) {
 			// this is a group, so enter group usage info
+            request.Assign(ATTR_SUBMITTER_GROUP,temp_groupName);
 			request.Assign(ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE,temp_groupUsage);
 			request.Assign(ATTR_SUBMITTER_GROUP_QUOTA,temp_groupQuota);
 			is_group = true;
@@ -3055,11 +3059,12 @@ negotiate( char const *scheddName, const ClassAd *scheddAd, double priority, dou
 		result = MM_BAD_MATCH;
 		while (result == MM_BAD_MATCH) 
 		{
+            remoteUser = "";
 			// 2e(i).  find a compatible offer
 			offer=matchmakingAlgorithm(scheddName, scheddAddr.Value(), request,
-											 startdAds, priority,
-											 share, 
-											 limitUsed, submitterLimit,
+                                             startdAds, priority,
+                                             limitUsed, limitUsedUnclaimed, 
+                                             submitterLimit, submitterLimitUnclaimed,
 											 pieLeft,
 											 only_consider_startd_rank);
 
@@ -3145,7 +3150,7 @@ negotiate( char const *scheddName, const ClassAd *scheddAd, double priority, dou
 
 				// got a candidate preemption --- print a helpful message
 				dprintf( D_ALWAYS, "      Preempting %s (user prio=%.2f, startd rank=%.2f) on %s "
-						 "for %s (user prio=%.2f, startd rank=%.2f)\n", remoteUser,
+						 "for %s (user prio=%.2f, startd rank=%.2f)\n", remoteUser.c_str(),
 						 remotePriority, oldStartdRank, remoteHost, scheddName,
 						 priority, newStartdRank );
                 free(remoteHost);
@@ -3207,6 +3212,7 @@ negotiate( char const *scheddName, const ClassAd *scheddAd, double priority, dou
 
 		double SlotWeight = accountant.GetSlotWeight(offer);
 		limitUsed += SlotWeight;
+        if (remoteUser == "") limitUsedUnclaimed += SlotWeight;
 		pieLeft -= SlotWeight;
 		negotiation_cycle_stats[0]->matches++;
 	}
@@ -3293,8 +3299,9 @@ display to the user, or for calls to sockCache->invalidateSock.
 ClassAd *Matchmaker::
 matchmakingAlgorithm(const char *scheddName, const char *scheddAddr, ClassAd &request,
 					 ClassAdListDoesNotDeleteAds &startdAds,
-					 double preemptPrio, double share,
-					 double limitUsed, double submitterLimit,
+					 double preemptPrio,
+					 double limitUsed, double limitUsedUnclaimed,
+                     double submitterLimit, double submitterLimitUnclaimed,
 					 double pieLeft,
 					 bool only_for_startdrank)
 {
@@ -3315,7 +3322,7 @@ matchmakingAlgorithm(const char *scheddName, const char *scheddAddr, ClassAd &re
 	PreemptState	bestPreemptState = (PreemptState)-1;
 	bool			newBestFound;
 		// to store results of evaluations
-	char			remoteUser[256];
+	string remoteUser;
 	EvalResult		result;
 	float			tmp;
 		// request attributes
@@ -3384,9 +3391,14 @@ matchmakingAlgorithm(const char *scheddName, const char *scheddAddr, ClassAd &re
 		// we can use cached information.  pop off the best
 		// candidate from our sorted list.
 		while( (cached_bestSoFar = MatchList->pop_candidate()) ) {
-			if( SubmitterLimitPermits(cached_bestSoFar, limitUsed, submitterLimit, pieLeft) ) {
+            int t = 0;
+            cached_bestSoFar->LookupInteger(ATTR_PREEMPT_STATE, t);
+            PreemptState pstate = PreemptState(t);
+			if ((pstate != NO_PREEMPTION) && SubmitterLimitPermits(cached_bestSoFar, limitUsed, submitterLimit, pieLeft)) {
 				break;
-			}
+			} else if (SubmitterLimitPermits(cached_bestSoFar, limitUsedUnclaimed, submitterLimitUnclaimed, pieLeft)) {
+				break;
+            }
 			MatchList->increment_rejForSubmitterLimit();
 		}
 		dprintf(D_FULLDEBUG,"Attempting to use cached MatchList: %s (MatchList length: %d, Autocluster: %d, Schedd Name: %s, Schedd Address: %s)\n",
@@ -3481,7 +3493,7 @@ matchmakingAlgorithm(const char *scheddName, const char *scheddAddr, ClassAd &re
 
 		candidatePreemptState = NO_PREEMPTION;
 
-		remoteUser[0] = '\0';
+		remoteUser = "";
 			// If there is already a preempting user, we need to preempt that user.
 			// Otherwise, we need to preempt the user who is running the job.
 		if (!candidate->LookupString(ATTR_PREEMPTING_ACCOUNTING_GROUP, remoteUser)) {
@@ -3498,7 +3510,7 @@ matchmakingAlgorithm(const char *scheddName, const char *scheddAddr, ClassAd &re
 		// not prefer it, just continue with the next offer ad....  we can
 		// skip all the below logic about preempt for user-priority, etc.
 		if ( only_for_startdrank ) {
-			if ( remoteUser[0] == '\0' ) {
+			if ( remoteUser == "" ) {
 					// offer does not have a remote user, thus we cannot eval
 					// startd rank yet because it does not make sense (the
 					// startd has nothing to compare against).  
@@ -3521,7 +3533,7 @@ matchmakingAlgorithm(const char *scheddName, const char *scheddAddr, ClassAd &re
 		// if there is a remote user, consider preemption ....
 		// Note: we skip this if only_for_startdrank is true since we already
 		//       tested above for the only condition we care about.
-		if ( (remoteUser[0] != '\0') &&
+		if ( (remoteUser != "") &&
 			 (!only_for_startdrank) ) {
 			if( EvalExprTree(rankCondStd, candidate, &request, &result) && 
 					result.type == LX_INTEGER && result.i == TRUE ) {
@@ -3554,7 +3566,7 @@ matchmakingAlgorithm(const char *scheddName, const char *scheddAddr, ClassAd &re
 			} else {
 					// don't have better priority *and* offer doesn't prefer
 					// request --- find another machine
-				if (strcmp(remoteUser, scheddName)) {
+				if (remoteUser != scheddName) {
 						// only set rejPreemptForPrio if we aren't trying to
 						// preempt one of our own jobs!
 					rejPreemptForPrio++;
@@ -3568,12 +3580,13 @@ matchmakingAlgorithm(const char *scheddName, const char *scheddAddr, ClassAd &re
 		   check if we are negotiating only for startd rank, since startd rank
 		   preemptions should be allowed regardless of user priorities. 
 	    */
-		if( (candidatePreemptState != RANK_PREEMPTION) &&
-			(!SubmitterLimitPermits(candidate, limitUsed, submitterLimit, pieLeft)) )
-		{
-			rejForSubmitterLimit++;
-			continue;
-		}
+        if ((candidatePreemptState == PRIO_PREEMPTION) && !SubmitterLimitPermits(candidate, limitUsed, submitterLimit, pieLeft)) {
+            rejForSubmitterLimit++;
+            continue;
+        } else if ((candidatePreemptState == NO_PREEMPTION) && !SubmitterLimitPermits(candidate, limitUsedUnclaimed, submitterLimitUnclaimed, pieLeft)) {
+            rejForSubmitterLimit++;
+            continue;
+        }
 
 		candidatePreJobRankValue = EvalNegotiatorMatchRank(
 		  "NEGOTIATOR_PRE_JOB_RANK",NegotiatorPreJobRank,
@@ -3827,7 +3840,7 @@ matchmakingProtocol (ClassAd &request, ClassAd *offer,
 {
 	int  cluster, proc;
 	MyString startdAddr;
-	char remoteUser[512];
+	string remoteUser;
 	char accountingGroup[256];
 	char remoteOwner[256];
     MyString startdName;
@@ -3967,16 +3980,16 @@ matchmakingProtocol (ClassAd &request, ClassAd *offer,
 		strcpy(remoteOwner, "none");
 	}
 	if (offer->LookupString(ATTR_ACCOUNTING_GROUP, accountingGroup)) {
-		snprintf(remoteUser,sizeof(remoteUser),"%s (%s=%s)",
+		sprintf(remoteUser,"%s (%s=%s)",
 			remoteOwner,ATTR_ACCOUNTING_GROUP,accountingGroup);
 	} else {
-		strcpy(remoteUser,remoteOwner);
+		remoteUser = remoteOwner;
 	}
 	if (offer->LookupString (ATTR_STARTD_IP_ADDR, startdAddr) == 0) {
 		startdAddr = "<0.0.0.0:0>";
 	}
 	dprintf(D_ALWAYS|D_MATCH, "      Matched %d.%d %s %s preempting %s %s %s%s\n",
-			cluster, proc, scheddName, scheddAddr, remoteUser,
+			cluster, proc, scheddName, scheddAddr, remoteUser.c_str(),
 			startdAddr.Value(), startdName.Value(),
 			offline ? " (offline)" : "");
 
@@ -4007,6 +4020,7 @@ Matchmaker::calculateSubmitterLimit(
 	double slotWeightTotal,
 		/* result parameters: */
 	double &submitterLimit,
+    double& submitterLimitUnclaimed,
 	double &submitterUsage,
 	double &submitterShare,
 	double &submitterAbsShare,
@@ -4027,13 +4041,13 @@ Matchmaker::calculateSubmitterLimit(
 		submitterLimit = 0.0;
 	}
 
-	if ( groupAccountingName ) {
+    submitterLimitUnclaimed = submitterLimit;
+	if (groupAccountingName) {
 		float maxAllowed = groupQuota - groupusage;
-			dprintf (D_FULLDEBUG, "   maxAllowed  = %f groupQuota  = %f groupusage  = %f\n",
-					maxAllowed,groupQuota,groupusage);
-		if ( maxAllowed < 0 ) maxAllowed = 0.0;
-		if ( submitterLimit > maxAllowed ) {
-			submitterLimit = maxAllowed;
+		dprintf(D_FULLDEBUG, "   maxAllowed= %g   groupQuota= %g   groupusage=  %g\n", maxAllowed, groupQuota, groupusage);
+		if (maxAllowed < 0) maxAllowed = 0.0;
+		if (submitterLimitUnclaimed > maxAllowed) {
+			submitterLimitUnclaimed = maxAllowed;
 		}
 	}
 
@@ -4066,19 +4080,13 @@ Matchmaker::calculatePieLeft(
 	scheddAds.Open();
 	while ((schedd = scheddAds.Next()))
 	{
-        // Don't allow pie to exceed limits imposed by group quotas
-        if ((NULL != groupAccountingName) && (groupusage >= groupQuota)) {
-            double over = groupusage - groupQuota;
-            pieLeft -= min(over, pieLeft);
-            break;
-        }
-
 		double submitterShare = 0.0;
 		double submitterAbsShare = 0.0;
 		double submitterPrio = 0.0;
 		double submitterPrioFactor = 0.0;
 		MyString scheddName;
 		double submitterLimit = 0.0;
+        double submitterLimitUnclaimed = 0.0;
 		double submitterUsage = 0.0;
 
 		schedd->LookupString( ATTR_NAME, scheddName );
@@ -4095,6 +4103,7 @@ Matchmaker::calculatePieLeft(
 			slotWeightTotal,
 				/* result parameters: */
 			submitterLimit,
+            submitterLimitUnclaimed,
 			submitterUsage,
 			submitterShare,
 			submitterAbsShare,
@@ -4103,8 +4112,6 @@ Matchmaker::calculatePieLeft(
 			
 			
 		pieLeft += submitterLimit;
-        // account for expected group usage increases as we accumulate pie
-        if (NULL != groupAccountingName) groupusage += submitterLimit;
 	}
 	scheddAds.Close();
 }
@@ -4198,6 +4205,7 @@ addRemoteUserPrios( ClassAd	*ad )
 	int     total_slots, i;
 	float     preemptingRank;
 	float temp_groupQuota, temp_groupUsage;
+    string temp_groupName;
 
 	if ( !ConsiderPreemption ) {
 			// Hueristic - no need to take the time to populate ad with 
@@ -4216,10 +4224,9 @@ addRemoteUserPrios( ClassAd	*ad )
 		ad->Assign(ATTR_REMOTE_USER_PRIO, prio);
 		ad->Assign(ATTR_REMOTE_USER_RESOURCES_IN_USE,
 			accountant.GetWeightedResourcesUsed( remoteUser.Value() ));
-		if (getGroupInfoFromUserId(remoteUser.Value(),
-									temp_groupQuota,temp_groupUsage))
-		{
+		if (getGroupInfoFromUserId(remoteUser.Value(), temp_groupName, temp_groupQuota, temp_groupUsage)) {
 			// this is a group, so enter group usage info
+            ad->Assign(ATTR_REMOTE_GROUP, temp_groupName);
 			ad->Assign(ATTR_REMOTE_GROUP_RESOURCES_IN_USE,temp_groupUsage);
 			ad->Assign(ATTR_REMOTE_GROUP_QUOTA,temp_groupQuota);
 		}
@@ -4268,15 +4275,13 @@ addRemoteUserPrios( ClassAd	*ad )
 					ATTR_REMOTE_USER_RESOURCES_IN_USE);
 			ad->Assign(buffer.Value(),
 					accountant.GetWeightedResourcesUsed(remoteUser.Value()));
-			if (getGroupInfoFromUserId(remoteUser.Value(),
-										temp_groupQuota,temp_groupUsage))
-			{
+			if (getGroupInfoFromUserId(remoteUser.Value(), temp_groupName, temp_groupQuota, temp_groupUsage)) {
 					// this is a group, so enter group usage info
-				buffer.sprintf("%s%s", slot_prefix.Value(), 
-					ATTR_REMOTE_GROUP_RESOURCES_IN_USE);
+				buffer.sprintf("%s%s", slot_prefix.Value(), ATTR_REMOTE_GROUP);
+				ad->Assign( buffer.Value(), temp_groupName );
+				buffer.sprintf("%s%s", slot_prefix.Value(), ATTR_REMOTE_GROUP_RESOURCES_IN_USE);
 				ad->Assign( buffer.Value(), temp_groupUsage );
-				buffer.sprintf("%s%s", slot_prefix.Value(),
-					ATTR_REMOTE_GROUP_QUOTA);
+				buffer.sprintf("%s%s", slot_prefix.Value(), ATTR_REMOTE_GROUP_QUOTA);
 				ad->Assign( buffer.Value(), temp_groupQuota );
 			}
 		}	
@@ -4499,6 +4504,12 @@ add_candidate(ClassAd * candidate,
 	AdListArray[adListLen].PreemptRankValue = candidatePreemptRankValue;
 	AdListArray[adListLen].PreemptStateValue = candidatePreemptState;
 
+    // This hack allows me to avoid mucking with the pseudo-que-like semantics of MatchListType, 
+    // which ought to be replaced with something cleaner like std::deque<AdListEntry>
+    if (NULL != AdListArray[adListLen].ad) {
+        AdListArray[adListLen].ad->Assign(ATTR_PREEMPT_STATE, int(candidatePreemptState));
+    }
+
 	adListLen++;
 }
 
diff --git a/src/condor_negotiator.V6/matchmaker.h b/src/condor_negotiator.V6/matchmaker.h
index 95a0193..bfed165 100644
--- a/src/condor_negotiator.V6/matchmaker.h
+++ b/src/condor_negotiator.V6/matchmaker.h
@@ -164,12 +164,11 @@ class Matchmaker : public Service
 					MM_ERROR if problem negotiating w/ this schedd.
 		**/
 		int negotiate( char const *scheddName, const ClassAd *scheddAd, 
-		   double priority, double share,
-		   double submitterLimit,
+		   double priority,
+           double submitterLimit, double submitterLimitUnclaimed,
 		   ClassAdListDoesNotDeleteAds &startdAds, ClaimIdHash &claimIds, 
-		   const CondorVersionInfo & scheddVersion,
 		   bool ignore_schedd_limit, time_t startTime, 
-		   int &numMatched, double &limitUsed, double &pieLeft);
+           int& numMatched, double &pieLeft);
 
 		int negotiateWithGroup ( int untrimmed_num_startds,
 								 double untrimmedSlotWeightTotal,
@@ -179,8 +178,11 @@ class Matchmaker : public Service
 			float groupQuota=INT_MAX, const char* groupName=NULL);
 
 		
-		ClassAd *matchmakingAlgorithm(const char*,const char*,ClassAd&,ClassAdListDoesNotDeleteAds&,
-									  double=-1.0, double=1.0, double=0.0, double=0.0, double=0.0, bool=false);
+		ClassAd *matchmakingAlgorithm(const char* scheddName, const char* scheddAddr, ClassAd& request, ClassAdListDoesNotDeleteAds& startdAds,
+									  double preemptPrio, 
+                                      double limitUsed, double limitUsedUnclaimed,
+                                      double submitterLimit, double submitterLimitUnclaimed, 
+                                      double pieLeft, bool only_for_startdrank);
 		int matchmakingProtocol(ClassAd &request, ClassAd *offer, 
 						ClaimIdHash &claimIds, Sock *sock,
 						const char* scheddName, const char* scheddAddr);
@@ -216,6 +218,7 @@ class Matchmaker : public Service
 								  double slotWeightTotal,
 		                            /* result parameters: */
 								  double &submitterLimit,
+                                  double& submitterLimitUnclaimed,
 								  double &submitterUsage,
 		                          double &submitterShare,
 		                          double &submitterAbsShare,
@@ -309,9 +312,7 @@ class Matchmaker : public Service
 		typedef HashTable<MyString, float> groupQuotasHashType;
 		groupQuotasHashType *groupQuotasHash;
 
-		bool getGroupInfoFromUserId( const char *user, float & groupQuota, 
-			 float & groupUsage );
-		
+		bool getGroupInfoFromUserId(const char* user, string& groupName, float& groupQuota, float& groupUsage);
 
 
 		// rank condition on matches
diff --git a/src/condor_utils/condor_attributes.cpp b/src/condor_utils/condor_attributes.cpp
index 4c1b09e..8c99dd8 100644
--- a/src/condor_utils/condor_attributes.cpp
+++ b/src/condor_utils/condor_attributes.cpp
@@ -481,6 +481,7 @@ const char * const ATTR_PREEMPTING_ACCOUNTING_GROUP = "PreemptingAccountingGroup
 const char * const ATTR_PREEMPTING_RANK			 = "PreemptingRank";
 const char * const ATTR_PREEMPTING_OWNER		 = "PreemptingOwner";
 const char * const ATTR_PREEMPTING_USER          = "PreemptingUser";
+const char * const ATTR_PREEMPT_STATE		     = "PreemptState";
 const char * const ATTR_PREFERENCES				 = "Preferences";
 const char * const ATTR_PREFER_PARALLEL_SCHEDULING_GROUP	 = "PreferParallelSchedulingGroup";
 const char * const ATTR_PREV_SEND_ESTIMATE		 = "PrevSendEstimate";
@@ -493,6 +494,7 @@ const char * const ATTR_Q_DATE                   = "QDate";
 const char * const ATTR_RANK					 = "Rank";
 const char * const ATTR_REAL_UID				 = "RealUid";
 const char * const ATTR_RELEASE_REASON			 = "ReleaseReason";
+const char * const ATTR_REMOTE_GROUP		     = "RemoteGroup";
 const char * const ATTR_REMOTE_GROUP_RESOURCES_IN_USE = "RemoteGroupResourcesInUse";
 const char * const ATTR_REMOTE_GROUP_QUOTA		 = "RemoteGroupQuota";
 const char * const ATTR_REMOTE_HOST				 = "RemoteHost";
@@ -552,6 +554,7 @@ const char * const ATTR_STREAM_OUTPUT			 = "StreamOut";
 const char * const ATTR_STREAM_ERROR			 = "StreamErr";
 const char * const ATTR_SUBMIT_EVENT_NOTES		 = "SubmitEventNotes";
 const char * const ATTR_SUBMIT_EVENT_USER_NOTES	 = "SubmitEventUserNotes";
+const char * const ATTR_SUBMITTER_GROUP     	 = "SubmitterGroup";
 const char * const ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE = "SubmitterGroupResourcesInUse";
 const char * const ATTR_SUBMITTER_GROUP_QUOTA	 = "SubmitterGroupQuota";
 const char * const ATTR_SUBMITTER_ID			 = "SubmitterId";
