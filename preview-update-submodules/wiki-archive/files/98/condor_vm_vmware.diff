34a35,37
> # currently only used to recognize if we're running workstation
> # If you aren't using workstation, this isn't important
> my $VMWARE_VERSION = "workstation";
163c166,171
< 	my $vmconfig = $_[0];
---
> 	if ($VMWARE_VERSION eq "workstation") {
> 		# return true
> 		return 1;
> 	}
> 	else {
> 		my $vmconfig = $_[0];
165,176c173,185
< 	chomp(my @vmstatus = `"$vmwarecmd_prog" -l`);
< 	# result must be like this
< 	# /home/condor/vmware/Centos.vmx
< 	# /home/condor/vmware/Centos2.vmx
< 
< 	foreach( @vmstatus ) {
< 		# delete leading/trailing whitespace
< 		s/^\s+|\s+$//g;
< 		if( $_ eq $vmconfig ) {
< 			# this vm is already registered
< 			# return true
< 			return 1;
---
> 		chomp(my @vmstatus = `"$vmwarecmd_prog" -l`);
> 		# result must be like this
> 		# /home/condor/vmware/Centos.vmx
> 		# /home/condor/vmware/Centos2.vmx
> 
> 		foreach( @vmstatus ) {
> 			# delete leading/trailing whitespace
> 			s/^\s+|\s+$//g;
> 			if( $_ eq $vmconfig ) {
> 				# this vm is already registered
> 				# return true
> 				return 1;
> 			}
178d186
< 	}
181a190
> 	}
197,198c206,209
< 	!system $vmwarecmd_prog, "-l"
< 		or printerror  "Can't execute $vmwarecmd_prog";
---
> 	if ($VMWARE_VERSION ne "workstation") {
> 		!system $vmwarecmd_prog, "-l"
> 			or printerror  "Can't execute $vmwarecmd_prog";
> 	}
201a213
> 	
207,212c219,227
< 	printverbose "register is called";
< 	my $vmconfig = checkvmconfig($_[0]);
< 	if( ! checkregister($vmconfig) ) {
< 		#!system $vmwarecmd_prog, "-s", "register", $vmconfig
< 		#	or printerror "Can't register a vm($vmconfig)";
< 		system $vmwarecmd_prog, "-s", "register", $vmconfig;
---
> 	if ($VMWARE_VERSION ne "workstation")
> 	{
> 		printverbose "register is called";
> 		my $vmconfig = checkvmconfig($_[0]);
> 		if( ! checkregister($vmconfig) ) {
> 			#!system $vmwarecmd_prog, "-s", "register", $vmconfig
> 			#	or printerror "Can't register a vm($vmconfig)";
> 			system $vmwarecmd_prog, "-s", "register", $vmconfig;
> 		}
219,225c234,243
< 	printverbose "unregister is called";
< 	my $vmconfig = checkvmconfig($_[0]);
< 	#if( checkregister($vmconfig) ) {
< 		#!system $vmwarecmd_prog, "-s", "unregister", $vmconfig
< 		#	or printerror "Can't unregister a vm($vmconfig)";
< 	#}
< 	system $vmwarecmd_prog, "-s", "unregister", $vmconfig;
---
> 	if ($VMWARE_VERSION ne "workstation")
> 	{
> 		printverbose "unregister is called";
> 		my $vmconfig = checkvmconfig($_[0]);
> 		#if( checkregister($vmconfig) ) {
> 			#!system $vmwarecmd_prog, "-s", "unregister", $vmconfig
> 			#	or printerror "Can't unregister a vm($vmconfig)";
> 		#}
> 		system $vmwarecmd_prog, "-s", "unregister", $vmconfig;
> 	}
230c248,259
< 	my $vmconfig = $_[0];
---
> 	if( $VMWARE_VERSION eq "workstation" ) {
> 		return 0;
> 	} 
>     
> 	else {	
> 		my $vmconfig = $_[0];
> 
> 		my $resultline = `"$vmwarecmd_prog" "$vmconfig" getpid`;
> 		chomp($resultline);
> 		if( ! $resultline ) {
> 			printerror "Can't execute getpid of a vm($vmconfig)";
> 		}
232,247c261,271
< 	my $resultline = `"$vmwarecmd_prog" "$vmconfig" getpid`;
< 	chomp($resultline);
< 	if( ! $resultline ) {
< 		printerror "Can't execute getpid of a vm($vmconfig)";
< 	}
< 
< 	# result must be like "getpid() = 18690"
< 	my @fields = split /=/, $resultline;
< 	shift @fields;
< 	my $pid_field = shift @fields;
< 	if( ! defined($pid_field) ) {
< 		printerror "Invalid format of getpid($resultline)";
< 	}
< 	# delete leading/trailing whitespace
< 	$pid_field =~ s/^\s+|\s+$//g;
< 	return $pid_field;
---
> 		# result must be like "getpid() = 18690"
> 		my @fields = split /=/, $resultline;
> 		shift @fields;
> 		my $pid_field = shift @fields;
> 		if( ! defined($pid_field) ) {
> 			printerror "Invalid format of getpid($resultline)";
> 		}
> 		# delete leading/trailing whitespace
> 		$pid_field =~ s/^\s+|\s+$//g;
> 		return $pid_field;
> 	}
262a287,299
> 	if( $VMWARE_VERSION eq "workstation" ) {
> 		# Just check to see if $vmconfig is listed in the output
> 		my @vmstatus =  `"$vmrun_prog" list`;
> 		foreach my $i (@vmstatus) {	
> 			# delete newline
> 			chomp($i);
> 			if( $i eq $vmconfig ) {
> 				$output_status = "Running";
> 			}
> 		}
> 	}
> 
> 	else {
285a323
> 	}
303,305c341,345
< 	my $vmstatus = status($vmconfig);
< 	if( $vmstatus ne "Running" ) {
< 		printerror "vm($vmconfig) is not running";
---
> 	if ($VMWARE_VERSION ne "workstation")  {	
> 		my $vmstatus = status($vmconfig);
> 		if( $vmstatus ne "Running" ) {
> 			printerror "vm($vmconfig) is not running";
> 		}
326,343c366,367
< 	# Get mac address of VM
< 	my $mac_address = undef;
< 	my $resultline = `"$vmwarecmd_prog" "$vmconfig" getconfig ethernet0.generatedAddress`;
< 	chomp($resultline);
< 	if( $resultline ) {
< 		# result must be like 
< 		# "getconfig(ethernet0.generatedAddress) = 00:0c:29:cb:40:bb"
< 		my @fields = split /=/, $resultline;
< 		shift @fields;
< 		$mac_address = shift @fields; 
< 		# delete leading/trailing whitespace
< 		$mac_address =~ s/^\s+|\s+$//g;
< 		if( ! defined($mac_address) ) {
< 			printwarn "Invalid format of getconfig for mac($resultline)";
< 			$mac_address = undef;
< 		}else {
< 			print OUTPUT "MAC=$mac_address\n";
< 		}
---
> 	if( $VMWARE_VERSION eq "workstation" ) {
> 		return;
346,365c370,411
< 	my $ip_address = undef;
< 	if( defined($mac_address) ) {
< 		# Get IP address of VM
< 
< 		# If dhcpd_lease file is defined, use it.
< 		# Otherwise, use vmware tool.
< 		if( defined($dhcpd_lease) && -r $dhcpd_lease ) {
< 			my $tmp_lease_file = "dhcpd_lease";
< 			copy( "$dhcpd_lease", "$tmp_lease_file") 
< 				or printwarn "Cannot copy file($dhcpd_lease) into working directory: $!";
< 
< 			if( -r $tmp_lease_file && open(LEASEFILE, $tmp_lease_file) ) {
< 				my $tmp_ip;
< 				while (<LEASEFILE>) {
< 					next if /^#|^$/;
< 					if( /^lease (\d+\.\d+\.\d+\.\d+)/) {
< 						$tmp_ip = $1;
< 					}
< 					if( /$mac_address/ ) {
< 						$ip_address = $tmp_ip;
---
> 	else {
> 		# Get mac address of VM
> 		my $mac_address = undef;
> 		my $resultline = `"$vmwarecmd_prog" "$vmconfig" getconfig ethernet0.generatedAddress`;
> 		chomp($resultline);
> 		if( $resultline ) {
> 			# result must be like 
> 			# "getconfig(ethernet0.generatedAddress) = 00:0c:29:cb:40:bb"
> 			my @fields = split /=/, $resultline;
> 			shift @fields;
> 			$mac_address = shift @fields; 
> 			# delete leading/trailing whitespace
> 			$mac_address =~ s/^\s+|\s+$//g;
> 			if( ! defined($mac_address) ) {
> 				printwarn "Invalid format of getconfig for mac($resultline)";
> 				$mac_address = undef;
> 			}else {
> 				print OUTPUT "MAC=$mac_address\n";
> 			}
> 		}
> 
> 		my $ip_address = undef;
> 		if( defined($mac_address) ) {
> 			# Get IP address of VM
> 	
> 			# If dhcpd_lease file is defined, use it.
> 			# Otherwise, use vmware tool.
> 			if( defined($dhcpd_lease) && -r $dhcpd_lease ) {
> 				my $tmp_lease_file = "dhcpd_lease";
> 				copy( "$dhcpd_lease", "$tmp_lease_file") 
> 					or printwarn "Cannot copy file($dhcpd_lease) into working directory: $!";
> 	
> 				if( -r $tmp_lease_file && open(LEASEFILE, $tmp_lease_file) ) {
> 					my $tmp_ip;
> 					while (<LEASEFILE>) {
> 						next if /^#|^$/;
> 						if( /^lease (\d+\.\d+\.\d+\.\d+)/) {
> 							$tmp_ip = $1;
> 						}
> 						if( /$mac_address/ ) {
> 							$ip_address = $tmp_ip;
> 						}
366a413
> 					close LEASEFILE;
368c415
< 				close LEASEFILE;
---
> 				unlink $tmp_lease_file;
370,389c417,435
< 			unlink $tmp_lease_file;
< 		}
< 		if( defined($ip_address) ) {
< 			printverbose "getting IP address using lease file($dhcpd_lease)";
< 		}else {
< 			# We failed to get IP address of guest VM
< 			# We will retry to get it by using vmware tool
< 
< 			$resultline = `"$vmwarecmd_prog" "$vmconfig" getguestinfo ip`;
< 			chomp($resultline);
< 			if( $resultline ) {
< 				# result must be like "getguestinfo(ip) = 172.16.123.143"
< 				my @fields = split /=/, $resultline;
< 				shift @fields;
< 				$ip_address = shift @fields;
< 				# delete leading/trailing whitespace
< 				$ip_address =~ s/^\s+|\s+$//g;
< 				if( ! defined($ip_address) ) {
< 					$ip_address = undef;
< 					printwarn "Invalid format of getguestinfo ip($resultline)";
---
> 			if( defined($ip_address) ) {
> 				printverbose "getting IP address using lease file($dhcpd_lease)";
> 			}else {
> 				# We failed to get IP address of guest VM
> 				# We will retry to get it by using vmware tool
> 	
> 				$resultline = `"$vmwarecmd_prog" "$vmconfig" getguestinfo ip`;
> 				chomp($resultline);
> 				if( $resultline ) {
> 					# result must be like "getguestinfo(ip) = 172.16.123.143"
> 					my @fields = split /=/, $resultline;
> 					shift @fields;
> 					$ip_address = shift @fields;
> 					# delete leading/trailing whitespace
> 					$ip_address =~ s/^\s+|\s+$//g;
> 					if( ! defined($ip_address) ) {
> 						$ip_address = undef;
> 						printwarn "Invalid format of getguestinfo ip($resultline)";
> 					}
392,395c438,441
< 		}
< 
< 		if( defined($ip_address) ) {
< 			print OUTPUT "IP=$ip_address\n";
---
> 	
> 			if( defined($ip_address) ) {
> 				print OUTPUT "IP=$ip_address\n";
> 			}
407,410c453,455
< 	if( ! checkregister($vmconfig) ) {
< 		#!system $vmwarecmd_prog, "-s", "register", $vmconfig
< 		#	or printerror "Can't register a new vm with $vmconfig";
< 		system $vmwarecmd_prog, "-s", "register", $vmconfig;
---
> 	if ($VMWARE_VERSION eq "workstation")  {	
> 		!system $vmrun_prog, "-T", "ws", "start", $vmconfig, "nogui"
> 			or printerror "Can't create vm with $vmconfig";
413,416c458,463
< 	# Now, a new vm is registered
< 	# Try to create a new vm
< 	!system $vmwarecmd_prog, $vmconfig, "start", "trysoft"
< 		or printerror "Can't create vm with $vmconfig";
---
>         else {
> 		if( ! checkregister($vmconfig) ) {
> 			#!system $vmwarecmd_prog, "-s", "register", $vmconfig
> 			#	or printerror "Can't register a new vm with $vmconfig";
> 			system $vmwarecmd_prog, "-s", "register", $vmconfig;
> 		}
418c465,469
< 	sleep(5);
---
> 		# Now, a new vm is registered
> 		# Try to create a new vm
> 		!system $vmwarecmd_prog, $vmconfig, "start", "trysoft"
> 			or printerror "Can't create vm with $vmconfig";
>         }
419a471
>         sleep(5);
431,433c483
< 	# Get status
< 	my $vmstatus = status($vmconfig);
< 	if( $vmstatus eq "Running" ) {
---
> 	if( $VMWARE_VERSION eq "workstation" ) {
435c485
< 		!system $vmwarecmd_prog, $vmconfig, "stop", "hard"
---
> 		!system $vmrun_prog, "-T", "ws", "stop", $vmconfig, "hard"
437d486
< 
438a488,500
> 	}	  
> 
> 	else {
> 		# Get status
> 		my $vmstatus = status($vmconfig);
> 		if( $vmstatus eq "Running" ) {
> 			# Try to stop vm
> 			!system $vmwarecmd_prog, $vmconfig, "stop", "hard"
> 				or printerror "Can't stop vm with $vmconfig";
> 
> 			sleep(2);
> 		}
> 	        unregister($vmconfig);
440d501
< 	unregister($vmconfig);
448a510,514
> 	if( $VMWARE_VERSION eq "workstation" ) {
> 		# do nothing for now
> 		printerror "Not supported with Workstation"
> 	}
> 
520,524c586,595
< 	# Get status
< 	my $vmstatus = status($vmconfig);
< 	if( $vmstatus ne "Running" ) {
< 		printerror "vm($vmconfig) is not running";
< 	}
---
> 	if( $VMWARE_VERSION eq "workstation" ) {
> 		!system $vmrun_prog, "suspend", $vmconfig, "soft"
> 			or printerror "Can't suspend vm with $vmconfig";
> 	}
> 	else {
> 		# Get status
> 		my $vmstatus = status($vmconfig);
> 		if( $vmstatus ne "Running" ) {
> 			printerror "vm($vmconfig) is not running";
> 		}
526,527c597,599
< 	!system $vmwarecmd_prog, $vmconfig, "suspend", "trysoft"
< 		or printerror "Can't suspend vm with $vmconfig";
---
> 		!system $vmwarecmd_prog, $vmconfig, "suspend", "trysoft"
> 			or printerror "Can't suspend vm with $vmconfig";
> 	}
553,557d624
< 	if( ! checkregister($vmconfig) ) {
< 		#!system $vmwarecmd_prog, "-s", "register", $vmconfig
< 		#	or printerror "Can't register a vm with $vmconfig";
< 		system $vmwarecmd_prog, "-s", "register", $vmconfig;
< 	}
559,560c626,639
< 	!system $vmrun_prog, "snapshot", $vmconfig
< 		or printerror "Can't create snapshot for vm($vmconfig)";
---
> 	if( $VMWARE_VERSION eq "workstation" ) {
> 		!system $vmrun_prog, "snapshot", $vmconfig, "condor-snapshot"
> 			or printerror "Can't create snapshot for vm($vmconfig)";	
> 	}
> 	else {
> 		if( ! checkregister($vmconfig) ) {
> 			#!system $vmwarecmd_prog, "-s", "register", $vmconfig
> 			#	or printerror "Can't register a vm with $vmconfig";
> 			system $vmwarecmd_prog, "-s", "register", $vmconfig;
> 		}
> 
> 		!system $vmrun_prog, "snapshot", $vmconfig
> 			or printerror "Can't create snapshot for vm($vmconfig)";
> 	}
570,574d648
< 	if( ! checkregister($vmconfig) ) {
< 		#!system $vmwarecmd_prog, "-s", "register", $vmconfig
< 		#	or printerror "Can't register a vm with $vmconfig";
< 		system $vmwarecmd_prog, "-s", "register", $vmconfig;
< 	}
576,577c650,663
< 	!system $vmrun_prog, "deleteSnapshot", $vmconfig
< 		or printerror "Can't combine snapshot disk with base disk for vm($vmconfig)";
---
> 	if( $VMWARE_VERSION eq "workstation" ) {
> 		!system $vmrun_prog, "deleteSnapshot", $vmconfig, "condor-snapshot"
> 			or printerror "Can't combine snapshot disk with base disk for vm($vmconfig)";
> 	}
> 	else {
> 		if( ! checkregister($vmconfig) ) {
> 			#!system $vmwarecmd_prog, "-s", "register", $vmconfig
> 			#	or printerror "Can't register a vm with $vmconfig";
> 			system $vmwarecmd_prog, "-s", "register", $vmconfig;
> 		}
> 
> 		!system $vmrun_prog, "deleteSnapshot", $vmconfig
> 			or printerror "Can't combine snapshot disk with base disk for vm($vmconfig)";
> 	}
588,592c674,683
< 	if( ! checkregister($vmconfig) ) {
< 		#!system $vmwarecmd_prog, "-s", "register", $vmconfig
< 		#	or printerror "Can't register a vm with $vmconfig";
< 		system $vmwarecmd_prog, "-s", "register", $vmconfig;
< 	}
---
> 	if ($VMWARE_VERSION eq "workstation" ) {
> 		!system $vmrun_prog, "revertToSnapshot", $vmconfig, "condor-snapshot"
> 			or printerror "Can't revert VM state to a snapshot for vm($vmconfig)";
> 	}
> 	else {
> 		if( ! checkregister($vmconfig) ) {
> 			#!system $vmwarecmd_prog, "-s", "register", $vmconfig
> 			#	or printerror "Can't register a vm with $vmconfig";
> 			system $vmwarecmd_prog, "-s", "register", $vmconfig;
> 		}
594,595c685,687
< 	!system $vmrun_prog, "revertToSnapshot", $vmconfig
< 		or printerror "Can't revert VM state to a snapshot for vm($vmconfig)";
---
> 		!system $vmrun_prog, "revertToSnapshot", $vmconfig
> 			or printerror "Can't revert VM state to a snapshot for vm($vmconfig)";
> 	}
