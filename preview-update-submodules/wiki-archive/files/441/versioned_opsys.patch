diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index dafeaaf..776791f 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -418,6 +418,8 @@ extern const char * const  ATTR_NUM_SYSTEM_HOLDS;
 extern const char * const  ATTR_NUM_USERS;
 extern const char * const  ATTR_OFFLINE;
 extern const char * const  ATTR_OPSYS;
+extern const char * const  ATTR_OPSYSVER;
+extern const char * const  ATTR_OPSYS_AND_VER;
 extern const char * const  ATTR_ORIG_MAX_HOSTS;
 extern const char * const  ATTR_OTHER_JOB_REMOVE_REQUIREMENTS;
 extern const char * const  ATTR_OUTPUT_DESTINATION;
diff --git a/src/condor_schedd.V6/schedd.cpp b/src/condor_schedd.V6/schedd.cpp
index 8bfee3e..bb7821e 100644
--- a/src/condor_schedd.V6/schedd.cpp
+++ b/src/condor_schedd.V6/schedd.cpp
@@ -11681,6 +11681,18 @@ Scheduler::publish( ClassAd *cad ) {
 		cad->Assign( ATTR_OPSYS, temp );
 		free( temp );
 	}
+
+	temp = param( "OPSYSVER" );
+	if ( temp ) {
+		cad->Assign( ATTR_OPSYSVER, temp );
+		free( temp );
+	}
+
+	temp = param( "OPSYS_AND_VER" );
+	if ( temp ) {
+		cad->Assign( ATTR_OPSYS_AND_VER, temp );
+		free( temp );
+	}
 	
 	unsigned long phys_mem = sysapi_phys_memory( );
 	cad->Assign( ATTR_MEMORY, (int)phys_mem );
diff --git a/src/condor_scripts/CondorConfig.pm b/src/condor_scripts/CondorConfig.pm
index 3d8157d..6410f24 100644
--- a/src/condor_scripts/CondorConfig.pm
+++ b/src/condor_scripts/CondorConfig.pm
@@ -59,6 +59,8 @@ sub new( $$ )
     $self->{ConfigProg} = $Distribution . "_config_val";
     $self->SetFromConfig( "ARCH" );
     $self->SetFromConfig( "OPSYS" );
+    $self->SetFromConfig( "OPSYSVER" );
+    $self->SetFromConfig( "OPSYS_AND_VER" );
     $self->SetFromConfig( "FILESYSTEM_DOMAIN" );
     $self->SetFromConfig( "UID_DOMAIN" );
     $self->SetFromConfig( "IP_ADDRESS" );
diff --git a/src/condor_startd.V6/ResAttributes.cpp b/src/condor_startd.V6/ResAttributes.cpp
index aacdc92..ed3cb48 100644
--- a/src/condor_startd.V6/ResAttributes.cpp
+++ b/src/condor_startd.V6/ResAttributes.cpp
@@ -38,6 +38,8 @@ MachAttributes::MachAttributes()
 
 	m_arch = NULL;
 	m_opsys = NULL;
+	m_opsysver = 0;
+	m_opsys_and_ver = NULL;
 	m_uid_domain = NULL;
 	m_filesystem_domain = NULL;
 	m_idle_interval = -1;
@@ -108,6 +110,7 @@ MachAttributes::~MachAttributes()
 {
 	if( m_arch ) free( m_arch );
 	if( m_opsys ) free( m_opsys );
+	if( m_opsys_and_ver ) free( m_opsys_and_ver );
 	if( m_uid_domain ) free( m_uid_domain );
 	if( m_filesystem_domain ) free( m_filesystem_domain );
 	if( m_ckptpltfrm ) free( m_ckptpltfrm );
@@ -319,6 +322,12 @@ MachAttributes::compute( amask_t how_much )
 			free( m_opsys );
 		}
 		m_opsys = param( "OPSYS" );
+		m_opsysver = param_integer( "OPSYSVER", 0 );
+
+		if( m_opsys_and_ver ) {
+			free( m_opsys_and_ver );
+		}
+		m_opsys_and_ver = param( "OPSYS_AND_VER" );
 
 		if( m_uid_domain ) {
 			free( m_uid_domain );
@@ -438,6 +447,10 @@ MachAttributes::publish( ClassAd* cp, amask_t how_much)
         cp->Assign( ATTR_ARCH, m_arch );
 
 		cp->Assign( ATTR_OPSYS, m_opsys );
+        if (m_opsysver) {
+			cp->Assign( ATTR_OPSYSVER, m_opsysver );
+        }
+		cp->Assign( ATTR_OPSYS_AND_VER, m_opsys_and_ver );
 
 		cp->Assign( ATTR_UID_DOMAIN, m_uid_domain );
 
diff --git a/src/condor_startd.V6/ResAttributes.h b/src/condor_startd.V6/ResAttributes.h
index 0df6b27..07bb19e 100644
--- a/src/condor_startd.V6/ResAttributes.h
+++ b/src/condor_startd.V6/ResAttributes.h
@@ -241,6 +241,8 @@ private:
 	int				m_phys_mem;
 	char*			m_arch;
 	char*			m_opsys;
+	int 			m_opsysver;
+	char*			m_opsys_and_ver;
 	char*			m_uid_domain;
 	char*			m_filesystem_domain;
 	int				m_idle_interval; 	// for D_IDLE dprintf messages
diff --git a/src/condor_sysapi/arch.cpp b/src/condor_sysapi/arch.cpp
index 9fc6ab4..76fa0fe 100644
--- a/src/condor_sysapi/arch.cpp
+++ b/src/condor_sysapi/arch.cpp
@@ -96,11 +96,15 @@ sysapi_uname_opsys(void)
 	return sysapi_opsys();
 }
 
+static int opsys_version = 0;
 
 const char *
-sysapi_opsys(void)
+sysapi_opsys_versioned(void)
 {
-	static char answer[1024];
+    static char answer[128] = {0};
+    if (answer[0])
+       return answer;
+
 	OSVERSIONINFO info;
 	info.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
 	if (GetVersionEx(&info) > 0) {
@@ -118,6 +122,7 @@ sysapi_opsys(void)
 			sprintf(answer, "UNKNOWN");
 			break;
 		}
+        opsys_version = info.dwMajorVersion * 100 + info.dwMinorVersion;
 	} else {
 		sprintf(answer, "ERROR");
 	}
@@ -125,13 +130,32 @@ sysapi_opsys(void)
 	return answer;
 }
 
+const char *
+sysapi_opsys(void)
+{
+    if (_sysapi_opsys_is_versioned) {
+        return sysapi_opsys_versioned();
+    }
+    return "WINDOWS";
+}
+
+int sysapi_opsys_version()
+{
+    if ( ! opsys_version) {
+         sysapi_opsys_versioned(); // init opsys_version
+    }
+    return opsys_version;
+}
+
 #else
 
 static int arch_inited = FALSE;
 static const char* arch = NULL;
 static const char* uname_arch = NULL;
 static const char* opsys = NULL;
+static const char* opsys_versioned = NULL;
 static const char* uname_opsys = NULL;
+static int opsys_version = 0;
 
 #ifdef HPUX
 const char* get_hpux_arch();
@@ -161,7 +185,9 @@ init_arch(void)
 	}
 
 	arch = sysapi_translate_arch( buf.machine, buf.sysname );
-	opsys = sysapi_translate_opsys( buf.sysname, buf.release, buf.version );
+	opsys = sysapi_translate_opsys( buf.sysname, buf.release, buf.version, _sysapi_opsys_is_versioned );
+	opsys_versioned = sysapi_translate_opsys( buf.sysname, buf.release, buf.version, true );
+    opsys_version = sysapi_translate_opsys_version( buf.sysname, buf.release, buf.version );
 
 	if ( arch && opsys ) {
 		arch_inited = TRUE;
@@ -287,9 +313,12 @@ sysapi_translate_arch( const char *machine, const char *)
 const char *
 sysapi_translate_opsys( const char *sysname,
 						const char *release,
-						const char *version )
+						const char *version,
+                        int         append_version)
 {
 	char tmp[64];
+    char ver[24];
+    const char * pver="";
 	char *tmpopsys;
 
 		// Get OPSYS
@@ -303,58 +332,60 @@ sysapi_translate_opsys( const char *sysname,
 	else if( !strcmp(sysname, "SunOS")
 		|| !strcmp(sysname, "solaris" ) ) //LDAP entry
 	{
+        sprintf( tmp, "SOLARIS" );
 		if ( !strcmp(release, "2.10") //LDAP entry
 			|| !strcmp(release, "5.10") )
 		{
-			sprintf( tmp, "SOLARIS210" );
+			pver = "210";
 		}
 		else if ( !strcmp(release, "2.9") //LDAP entry
 			|| !strcmp(release, "5.9") )
 		{
-			sprintf( tmp, "SOLARIS29" );
+			pver = "29";
 		}
 		else if ( !strcmp(release, "2.8") //LDAP entry
 			|| !strcmp(release, "5.8") )
 		{
-			sprintf( tmp, "SOLARIS28" );
+			pver = "28";
 		}
 		else if ( !strcmp(release, "2.7") //LDAP entry
 			|| !strcmp(release, "5.7") )
 		{
-			sprintf( tmp, "SOLARIS27" );
+			pver = "27";
 		}
 		else if( !strcmp(release, "5.6")
 			||  !strcmp(release, "2.6") ) //LDAP entry
 		{
-			sprintf( tmp, "SOLARIS26" );
+			pver = "26";
 		}
 		else if ( !strcmp(release, "5.5.1")
 			|| !strcmp(release, "2.5.1") ) //LDAP entry
 		{
-			sprintf( tmp, "SOLARIS251" );
+			pver = "251";
 		}
 		else if ( !strcmp(release, "5.5")
 			|| !strcmp(release, "2.5") ) //LDAP entry
 		{
-			sprintf( tmp, "SOLARIS25" );
+			pver = "25";
 		}
 		else {
-			sprintf( tmp, "SOLARIS%s", release );
+            pver = release;
 		}
 	}
 
 	else if( !strcmp(sysname, "HP-UX") ) {
+        sprintf( tmp, "HPUX" );
 		if( !strcmp(release, "B.10.20") ) {
-			sprintf( tmp, "HPUX10" );
+			pver = "10";
 		}
 		else if( !strcmp(release, "B.11.00") ) {
-			sprintf( tmp, "HPUX11" );
+			pver = "11";
 		}
 		else if( !strcmp(release, "B.11.11") ) {
-			sprintf( tmp, "HPUX11" );
+			pver = "11";
 		}
 		else {
-			sprintf( tmp, "HPUX%s", release );
+			pver = release;
 		}
 	}
 	else if ( !strncmp(sysname, "Darwin", 6) ) {
@@ -363,20 +394,29 @@ sysapi_translate_opsys( const char *sysname,
 		sprintf( tmp, "OSX");
 	}
 	else if ( !strncmp(sysname, "AIX", 3) ) {
+        sprintf(tmp, "%s", sysname);
 		if ( !strcmp(version, "5") ) {
-			sprintf(tmp, "%s%s%s", sysname, version, release);
+			sprintf(ver, "%s%s", version, release);
+            pver = ver;
 		}
 	}
 	else if ( !strncmp(sysname, "FreeBSD", 7) ) {
 			//
 			// Pull the major version # out of the release information
 			//
-		sprintf( tmp, "FREEBSD%c", release[0]);
+		sprintf( tmp, "FREEBSD" );
+        sprintf( ver, "%c", release[0]);
+        pver = ver;
 	}
 	else {
 			// Unknown, just use what uname gave:
-		sprintf( tmp, "%s%s", sysname, release );
+		sprintf( tmp, "%s", sysname);
+        pver = release;
 	}
+    if (append_version && pver) {
+        strcat( tmp, pver );
+    }
+
 	tmpopsys = strdup( tmp );
 	if( !tmpopsys ) {
 		EXCEPT( "Out of memory!" );
@@ -384,6 +424,48 @@ sysapi_translate_opsys( const char *sysname,
 	return( tmpopsys );
 }
 
+int sysapi_translate_opsys_version( 
+    const char *sysname,
+	const char *release,
+	const char *version )
+{
+    const char * psz = release;
+
+    // skip any leading non-digits.
+    while (psz[0] && (psz[0] < '0' || psz[0] > '9')) {
+       ++psz;
+    }
+
+    // parse digits until the first non-digit as the
+    // major version number.
+    //
+    int major = 0;
+    while (psz[0]) {
+        if (psz[0] >= '0' && psz[0] <= '9') {
+            major = major * 10 + (psz[0] - '0');
+        } else {
+           break;
+        }
+        ++psz;
+    }
+
+    // if the major version number ended with '.' parse
+    // at most 2 more digits as the minor version number.
+    //
+    int minor = 0;
+    if (psz[0] == '.') {
+       ++psz;
+       if (psz[0] >= '0' && psz[0] <= '9') {
+          minor = psz[0] - '0';
+          ++psz;
+       }
+       if (psz[0] >= '0' && psz[0] <= '9') {
+          minor = minor * 10 + psz[0] - '0';
+       }
+    }
+
+    return (major * 100) + minor;
+}
 
 const char *
 sysapi_condor_arch(void)
@@ -404,6 +486,22 @@ sysapi_opsys(void)
 	return opsys;
 }
 
+int sysapi_opsys_version()
+{
+	if( ! arch_inited ) {
+		init_arch();
+	}
+    return opsys_version;
+}
+
+const char *
+sysapi_opsys_versioned(void)
+{
+	if( ! arch_inited ) {
+		init_arch();
+	}
+	return opsys_versioned;
+}
 
 const char *
 sysapi_uname_arch(void)
diff --git a/src/condor_sysapi/reconfig.cpp b/src/condor_sysapi/reconfig.cpp
index 2086673..bd08044 100644
--- a/src/condor_sysapi/reconfig.cpp
+++ b/src/condor_sysapi/reconfig.cpp
@@ -77,7 +77,7 @@ char *_sysapi_ckptpltfrm = NULL;
 int _sysapi_getload = 0;
 
 bool _sysapi_net_devices_cached = false;
-
+bool _sysapi_opsys_is_versioned = false;
 
 extern "C"
 {
@@ -91,7 +91,12 @@ sysapi_reconfig(void)
 {
 	char *tmp = NULL;
 
-#ifndef WIN32
+#ifdef WIN32
+    /* configuration set up to enable legacy OpSys values (WINNT51 etc) */
+    _sysapi_opsys_is_versioned = param_boolean( "ENABLE_VERSIONED_OPSYS", false );
+#else
+    _sysapi_opsys_is_versioned = param_boolean( "ENABLE_VERSIONED_OPSYS", true );
+
 	/* configuration set up for idle_time.C */
     if( _sysapi_console_devices ) {
         delete( _sysapi_console_devices );
diff --git a/src/condor_sysapi/sysapi.h b/src/condor_sysapi/sysapi.h
index ac3f57e..da05131 100644
--- a/src/condor_sysapi/sysapi.h
+++ b/src/condor_sysapi/sysapi.h
@@ -87,6 +87,8 @@ const char* sysapi_condor_arch(void);
 const char* sysapi_uname_arch(void);
 const char* sysapi_opsys(void);
 const char* sysapi_uname_opsys(void);
+const char* sysapi_opsys_versioned(void);
+        int sysapi_opsys_version(void);
 
 /* return information about how many 1K blocks of swap space there are.
 	If there are more 1K blocks than INT_MAX, then INT_MAX is returned */
@@ -104,7 +106,11 @@ const char *sysapi_translate_arch( const char *machine,
 								   const char *sysname );
 const char *sysapi_translate_opsys( const char *sysname,
 									const char *release,
-									const char *version );
+									const char *version,
+                                    int         append_version);
+int sysapi_translate_opsys_version( const char *sysname,
+									const char *release,
+									const char *version);
 
 /* set appropriate resource limits on each platform */
 void sysapi_set_resource_limits( int stack_size );
diff --git a/src/condor_sysapi/sysapi_externs.h b/src/condor_sysapi/sysapi_externs.h
index 709f734..2d32996 100644
--- a/src/condor_sysapi/sysapi_externs.h
+++ b/src/condor_sysapi/sysapi_externs.h
@@ -89,6 +89,8 @@ extern int _sysapi_getload;
 extern int _sysapi_count_hyperthread_cpus;
 #endif
 
+/* needed by arch.cpp */
+extern bool _sysapi_opsys_is_versioned;
 
 EXTERN_C_END
 
diff --git a/src/condor_utils/condor_attributes.cpp b/src/condor_utils/condor_attributes.cpp
index aec935e..ff59876 100644
--- a/src/condor_utils/condor_attributes.cpp
+++ b/src/condor_utils/condor_attributes.cpp
@@ -480,6 +480,8 @@ const char * const ATTR_NUM_SYSTEM_HOLDS		 = "NumSystemHolds";
 const char * const ATTR_NUM_USERS                = "NumUsers";
 const char * const ATTR_OFFLINE                  ="Offline";
 const char * const ATTR_OPSYS                    = "OpSys";
+const char * const ATTR_OPSYSVER                 = "OpSysVer";
+const char * const ATTR_OPSYS_AND_VER            = "OpSysAndVer";
 const char * const ATTR_ORIG_MAX_HOSTS			 = "OrigMaxHosts";
 const char * const ATTR_OTHER_JOB_REMOVE_REQUIREMENTS    = "OtherJobRemoveRequirements"; 
 const char * const ATTR_OWNER                    = "Owner"; 
diff --git a/src/condor_utils/condor_config.cpp b/src/condor_utils/condor_config.cpp
index 97167ae..2a60bf2 100644
--- a/src/condor_utils/condor_config.cpp
+++ b/src/condor_utils/condor_config.cpp
@@ -326,7 +326,7 @@ void
 config( int wantsQuiet, bool ignore_invalid_entry, bool wantsExtraInfo )
 {
 #ifdef WIN32
-	char *locale = setlocale( LC_ALL, "English" );
+	char *locale = setlocale( LC_ALL, "English" );
 	dprintf ( D_ALWAYS, "Locale: %s\n", locale );
 #endif
 	real_config( NULL, wantsQuiet, wantsExtraInfo );
@@ -1281,6 +1281,7 @@ fill_attributes()
 		   Amended -Pete Keller 06/01/99 */
 
 	const char *tmp;
+	MyString val;
 
 	if( (tmp = sysapi_condor_arch()) != NULL ) {
 		insert( "ARCH", tmp, ConfigTab, TABLESIZE );
@@ -1295,6 +1296,18 @@ fill_attributes()
 	if( (tmp = sysapi_opsys()) != NULL ) {
 		insert( "OPSYS", tmp, ConfigTab, TABLESIZE );
 		extra_info->AddInternalParam("OPSYS");
+
+		int ver = sysapi_opsys_version();
+		if (ver > 0) {
+			val.sprintf("%d", ver);
+			insert( "OPSYSVER", val.Value(), ConfigTab, TABLESIZE );
+			extra_info->AddInternalParam("OPSYSVER");
+		}
+	}
+
+	if( (tmp = sysapi_opsys_versioned()) != NULL ) {
+		insert( "OPSYS_AND_VER", tmp, ConfigTab, TABLESIZE );
+		extra_info->AddInternalParam("OPSYS_AND_VER");
 	}
 
 	if( (tmp = sysapi_uname_opsys()) != NULL ) {
@@ -1305,7 +1318,6 @@ fill_attributes()
 	insert( "SUBSYSTEM", get_mySubSystem()->getName(), ConfigTab, TABLESIZE );
 	extra_info->AddInternalParam("SUBSYSTEM");
 
-	MyString val;
 	val.sprintf("%d",sysapi_phys_memory_raw_no_param());
 	insert( "DETECTED_MEMORY", val.Value(), ConfigTab, TABLESIZE );
 	extra_info->AddInternalParam("DETECTED_MEMORY");
diff --git a/src/condor_utils/param_info.in b/src/condor_utils/param_info.in
index 14ddb18..ca05813 100644
--- a/src/condor_utils/param_info.in
+++ b/src/condor_utils/param_info.in
@@ -10200,3 +10200,20 @@ usage=
 url=
 tags=schedd
 id=602
+
+[ENABLE_VERSIONED_OPSYS]
+aliases=
+default=true
+win32_default=false
+version=0.0.0
+range=.*
+state=default
+type=bool
+is_macro=false
+reconfig=true
+customization=seldom
+friendly_name=Append OS version to the value of OPSYS
+usage=
+url=http://cs.wisc.edu/condor/manual/v7.3/3_3Configuration.html#SECTION
+tags=schedd
+id=602
