diff --git a/src/condor_dagman/dagman_main.cpp b/src/condor_dagman/dagman_main.cpp
index 9f4e044..3294f40 100644
--- a/src/condor_dagman/dagman_main.cpp
+++ b/src/condor_dagman/dagman_main.cpp
@@ -1062,6 +1062,8 @@ void main_init (int argc, char ** const argv) {
 		return;
 	}
 
+	debug_printf(DEBUG_VERBOSE, "Maximum number of open files: %d, \n",
+			max_fds);
     //------------------------------------------------------------------------
     // Bootstrap and Recovery
     //
diff --git a/src/condor_utils/read_multiple_logs.cpp b/src/condor_utils/read_multiple_logs.cpp
index a73696d..8d696e5 100644
--- a/src/condor_utils/read_multiple_logs.cpp
+++ b/src/condor_utils/read_multiple_logs.cpp
@@ -56,6 +56,8 @@
 ReadMultipleUserLogs::ReadMultipleUserLogs() :
 	allLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
 	activeLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
+	previousPassOneStats(""),
+	previousPassTwoStats(""),
 	maxOpenedLogFiles(0) // no limit
 {
 }
@@ -65,6 +67,8 @@ ReadMultipleUserLogs::ReadMultipleUserLogs() :
 ReadMultipleUserLogs::ReadMultipleUserLogs(int maxLogs) :
 	allLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
 	activeLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
+	previousPassOneStats(""),
+	previousPassTwoStats(""),
 	maxOpenedLogFiles(maxLogs)
 {
 }
@@ -236,17 +240,30 @@ ULogEventOutcome ReadMultipleUserLogs::readEvent(ULogEvent * & event) {
 		}
 	}
 
-	// print stats
 	span = difftime(time(NULL), ts);
-	dprintf(D_FULLDEBUG, "readEvent(): during 1. pass %d file(s) were processed "
-			"in %.0lf seconds\n", activeLogFiles.getNumElements(), span);
-	dprintf(D_FULLDEBUG, "readEvent(): %d file(s) have already a cached event\n",
-			numCached);
-	dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were already opened\n",
-			numOpen);
-	dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were read\n", numRead);
-	dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were closed and will be "
-			"processed in the 2. pass\n",	numClose);
+
+	// this makes a stats summary to see whether they have changed or not
+	MyString stats;
+	ASSERT(stats.sprintf("%d,%.0lf,%d,%d,%d,%d",activeLogFiles.getNumElements(), span,
+			numCached, numOpen, numRead, numClose));
+
+	if (previousPassOneStats == stats) {
+		dprintf(D_FULLDEBUG, "readEvent(): 1. pass statistics have not changed\n");
+	} else {
+		// print stats
+		dprintf(D_FULLDEBUG, "readEvent(): during 1. pass %d file(s) were processed "
+				"in %.0lf seconds\n", activeLogFiles.getNumElements(), span);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) have already a cached event\n",
+				numCached);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were already opened\n",
+				numOpen);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were read\n", numRead);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were closed and will be "
+				"processed in the 2. pass\n",	numClose);
+
+		previousPassOneStats = stats;
+	}
+
 
 	// at this point at max maxOpenedLogFiles should be opened
 	if (maxOpenedLogFiles != 0
@@ -260,6 +277,7 @@ ULogEventOutcome ReadMultipleUserLogs::readEvent(ULogEvent * & event) {
 	// 2. pass over the monitors that were closed
 	// reset the stats
 	numCached = numRead = numOpen = numClose = 0;
+
 	// number of files that were closed and will be processed in the 2. pass
 	int numClosed = closedMonitors.size();
 
@@ -269,7 +287,7 @@ ULogEventOutcome ReadMultipleUserLogs::readEvent(ULogEvent * & event) {
 	// take time at the beginning of the 2. pass
 	ts = time(NULL);
 	while (!closedMonitors.empty()) {
-		ULogEventOutcome outcome = ULOG_OK;
+		ULogEventOutcome outcome = ULOG_NO_EVENT;
 
 		if ((int) openedMonitors.size()	>= maxOpenedLogFiles) {
 			// close one monitor
@@ -288,12 +306,16 @@ ULogEventOutcome ReadMultipleUserLogs::readEvent(ULogEvent * & event) {
 
 		// open a closed monitor
 		monitor = closedMonitors.front();
+		closedMonitors.pop();
+
 		dprintf(D_FULLDEBUG,
 				"readEvent(): opening %s (%lu/%u) and reading\n",
 				monitor->logFile.Value(), openedMonitors.size() + 1,
 				maxOpenedLogFiles);
 
 		outcome = readEventFromLog(monitor);
+		// it is now opened - so push to opened monitors queue
+		openedMonitors.push(monitor);
 		// update stats
 		numOpen++;
 
@@ -314,18 +336,26 @@ ULogEventOutcome ReadMultipleUserLogs::readEvent(ULogEvent * & event) {
 				oldestEventMon = monitor;
 			}
 		}
-
-		// it is now opened - so push to opened monitors queue
-		openedMonitors.push(monitor);
-		closedMonitors.pop();
 	}
 
 	span = difftime(time(NULL), ts);
-	dprintf(D_FULLDEBUG, "readEvent(): during 2. pass %d file(s) were processed"
+
+	// this makes a stats summary to see whether they have changed or not
+	ASSERT(stats.sprintf("%d,%.0lf,%d,%d",numClosed, span, numOpen, numClose));
+
+	if (previousPassTwoStats == stats) {
+		dprintf(D_FULLDEBUG, "readEvent(): 2. pass statistics have not changed\n");
+	} else {
+		// print stat
+		dprintf(D_FULLDEBUG, "readEvent(): during 2. pass %d file(s) were processed"
 			" in %.0lf seconds\n", numClosed, span);
-	dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were opened and read\n",
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were opened and read\n",
 			numOpen);
-	dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were closed\n", numClose);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were closed\n", numClose);
+
+		previousPassTwoStats = stats;
+	}
+
 
 	if (oldestEventMon == NULL) {
 		return ULOG_NO_EVENT;
@@ -1172,6 +1202,9 @@ ReadMultipleUserLogs::monitorLogFile( MyString logfile,
 						new ReadUserLog( monitor->logFile.Value() );
 		}
 
+		// explicitly close the monitor
+		monitor->readUserLog->CloseLogFile();
+
 		if ( activeLogFiles.insert( fileID, monitor ) != 0 ) {
 			errstack.pushf( "ReadMultipleUserLogs", UTIL_ERR_LOG_FILE,
 						"Error inserting %s (%s) into activeLogFiles",
@@ -1182,6 +1215,7 @@ ReadMultipleUserLogs::monitorLogFile( MyString logfile,
 						"file %s (%s) to active list\n", logfile.Value(),
 						fileID.Value() );
 		}
+
 		// make sure it is closed
 		ASSERT(!monitor->readUserLog->isOpened());
 	}
diff --git a/src/condor_utils/read_multiple_logs.h b/src/condor_utils/read_multiple_logs.h
index 23d17e1..2f4e952 100644
--- a/src/condor_utils/read_multiple_logs.h
+++ b/src/condor_utils/read_multiple_logs.h
@@ -297,6 +297,13 @@ private:
 
 	HashTable<MyString, LogFileMonitor *>	activeLogFiles;
 
+	// readEvent statistics summary for the pass 1
+	MyString previousPassOneStats;
+
+	// readEvent statistics summary for the pass 2
+	MyString previousPassTwoStats;
+
+	// the threshold of how many log files can be opened at the time
 	int maxOpenedLogFiles;
 
 	// For instantiation in programs that use this class.
diff --git a/src/condor_utils/read_user_log.cpp b/src/condor_utils/read_user_log.cpp
index 786b272..2764f55 100644
--- a/src/condor_utils/read_user_log.cpp
+++ b/src/condor_utils/read_user_log.cpp
@@ -404,9 +404,8 @@ ReadUserLog::InternalInitialize ( int max_rotations,
 		}
 	}
 
-	// close the log file
-	CloseLogFile( true );
-
+	// Close the file between operations
+	CloseLogFile( false );
 	m_initialized = true;
 	return true;
 
@@ -434,10 +433,6 @@ ReadUserLog::CheckFileStatus( bool &is_empty )
 bool
 ReadUserLog::CloseLogFile( bool force )
 {
-	dprintf( D_FULLDEBUG, "Closing log file  #%d '%s' (fd=%d, force=%s)\n",
-			 m_state->Rotation(), m_state->CurPath(), m_fd,
-			 force ? "true" : "false");
-
 	if ( force || m_close_file ) {
 
 		if ( m_lock && m_lock->isLocked() ) {
@@ -1459,13 +1454,13 @@ ReadUserLog::releaseResources( void )
 		m_match = NULL;
 	}
 
-	CloseLogFile( true );
-
 	if ( m_state ) {
 		delete m_state;
 		m_state = NULL;
 	}
 
+	CloseLogFile( true );
+
 	delete m_lock;
 	m_lock = NULL;
 }
