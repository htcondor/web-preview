From b14dcec9592fd050cb352ec96880050ba1b1c3fe Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Thu, 27 Sep 2012 08:52:25 -0500
Subject: [PATCH 1/3] C++11 cmake fixes for clang on Mac OS X.  #3083

---
 build/cmake/CondorConfigure.cmake |   17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/build/cmake/CondorConfigure.cmake b/build/cmake/CondorConfigure.cmake
index 16ccff6..311146a 100644
--- a/build/cmake/CondorConfigure.cmake
+++ b/build/cmake/CondorConfigure.cmake
@@ -250,6 +250,14 @@ if( NOT WINDOWS)
 	check_cxx_compiler_flag(-std=c++11 cxx_11)
 	if (cxx_11)
 
+		# Clang requires some additional C++11 flags, as the default stdlib
+		# is from an old GCC version.
+		if ( ${OS_NAME} STREQUAL "DARWIN" AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" )
+			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++ -lc++")
+			set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -lc++")
+			set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lc++")
+		endif()
+
 		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
 
 		check_cxx_source_compiles("
@@ -262,6 +270,13 @@ if( NOT WINDOWS)
 		}
 		" PREFER_CPP11 )
 
+		# Note - without adding -lc++ to the CXX flags, the linking of the test
+		# above will fail for clang.  It doesn't seem strictly necessary though,
+		# so we remove this afterward.
+		if ( ${OS_NAME} STREQUAL "DARWIN" AND "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" )
+			string(REPLACE "-lc++" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
+		endif()
+
 	endif (cxx_11)
 
 	if (NOT PREFER_CPP11)
@@ -831,6 +846,8 @@ else(MSVC)
 
 	# copy in C only flags into CMAKE_C_FLAGS
 	string(REPLACE "-std=c++11" "" CMAKE_C_FLAGS ${CMAKE_CXX_FLAGS})
+	# Only relevant for clang / Mac OS X
+	string(REPLACE "-stdlib=libc++" "" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
 
 endif(MSVC)
 
-- 
1.7.9.6 (Apple Git-31.1)


From ee6ec35f0339623a84f95b0a7d426650632197e2 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Thu, 27 Sep 2012 09:21:43 -0500
Subject: [PATCH 2/3] Fix clang warnings - hidden overloaded virtual
 functions. #2750

---
 src/condor_gridmanager/condorjob.cpp      |    2 +-
 src/condor_gridmanager/condorresource.cpp |    6 ++++--
 src/condor_gridmanager/condorresource.h   |    4 ++--
 src/condor_gridmanager/creamresource.cpp  |   10 ++++++++--
 src/condor_gridmanager/creamresource.h    |    4 ++--
 src/condor_gridmanager/ec2job.cpp         |    8 ++++----
 src/condor_gridmanager/ec2job.h           |    2 +-
 src/condor_gridmanager/globusjob.cpp      |   26 +++++++++++++-------------
 src/condor_gridmanager/globusjob.h        |    2 +-
 src/condor_gridmanager/globusresource.cpp |    4 +++-
 src/condor_gridmanager/globusresource.h   |    2 +-
 src/condor_schedd.V6/qmgr_job_updater.h   |    4 ++--
 src/condor_starter.V6.1/baseStarter.cpp   |    2 +-
 src/condor_starter.V6.1/sshd_proc.cpp     |    2 +-
 src/condor_starter.V6.1/sshd_proc.h       |    2 +-
 15 files changed, 45 insertions(+), 35 deletions(-)

diff --git a/src/condor_gridmanager/condorjob.cpp b/src/condor_gridmanager/condorjob.cpp
index faa90a1..5f6e2f3 100644
--- a/src/condor_gridmanager/condorjob.cpp
+++ b/src/condor_gridmanager/condorjob.cpp
@@ -273,7 +273,7 @@ CondorJob::CondorJob( ClassAd *classad )
 	myResource = CondorResource::FindOrCreateResource( remoteScheddName,
 													   remotePoolName,
 													   jobProxy );
-	myResource->RegisterJob( this, submitterId );
+	myResource->CondorRegisterJob( this, submitterId );
 	if ( job_already_submitted ) {
 		myResource->AlreadySubmitted( this );
 	}
diff --git a/src/condor_gridmanager/condorresource.cpp b/src/condor_gridmanager/condorresource.cpp
index 008195b..e3cb503 100644
--- a/src/condor_gridmanager/condorresource.cpp
+++ b/src/condor_gridmanager/condorresource.cpp
@@ -219,7 +219,7 @@ void CondorResource::PublishResourceAd( ClassAd *resource_ad )
 	}
 }
 
-void CondorResource::RegisterJob( CondorJob *job, const char *submitter_id )
+void CondorResource::CondorRegisterJob( CondorJob *job, const char *submitter_id )
 {
 	BaseResource::RegisterJob( job );
 
@@ -237,8 +237,10 @@ void CondorResource::RegisterJob( CondorJob *job, const char *submitter_id )
 	}
 }
 
-void CondorResource::UnregisterJob( CondorJob *job )
+void CondorResource::UnregisterJob( BaseJob *base_job )
 {
+	CondorJob *job = dynamic_cast<CondorJob*>( base_job );
+
 	ScheddPollInfo *poll_info = NULL;
 	PollInfoByName.lookup( HashKey( HashName( scheddName, poolName, NULL ) ),
 						   poll_info );
diff --git a/src/condor_gridmanager/condorresource.h b/src/condor_gridmanager/condorresource.h
index d1c7bb0..fcee9db 100644
--- a/src/condor_gridmanager/condorresource.h
+++ b/src/condor_gridmanager/condorresource.h
@@ -44,8 +44,8 @@ class CondorResource : public BaseResource
 
 	const char *ResourceType();
 	void Reconfig();
-	void RegisterJob( CondorJob *job, const char *submitter_id );
-	void UnregisterJob( CondorJob *job );
+	void CondorRegisterJob( CondorJob *job, const char *submitter_id );
+	void UnregisterJob( BaseJob *job );
 
 	void DoScheddPoll();
 
diff --git a/src/condor_gridmanager/creamresource.cpp b/src/condor_gridmanager/creamresource.cpp
index 3d0b4d4..177be90 100644
--- a/src/condor_gridmanager/creamresource.cpp
+++ b/src/condor_gridmanager/creamresource.cpp
@@ -300,8 +300,11 @@ const char *CreamResource::HashName( const char *resource_name,
 	return hash_name.c_str();
 }
 
-void CreamResource::RegisterJob( CreamJob *job )
+void CreamResource::RegisterJob( BaseJob *base_job )
 {
+	CreamJob* job = dynamic_cast<CreamJob*>( base_job );
+	ASSERT( job );
+
 	int job_lease;
 	if ( m_sharedLeaseExpiration == 0 ) {
 		if ( job->jobAd->LookupInteger( ATTR_JOB_LEASE_EXPIRATION, job_lease ) ) {
@@ -322,8 +325,11 @@ void CreamResource::RegisterJob( CreamJob *job )
 	BaseResource::RegisterJob( job );
 }
 
-void CreamResource::UnregisterJob( CreamJob *job )
+void CreamResource::UnregisterJob( BaseJob *base_job )
 {
+	CreamJob *job = dynamic_cast<CreamJob*>( base_job );
+	ASSERT( job );
+
 	if ( job->delegatedCredentialURI != NULL ) {
 		bool delete_deleg = true;
 		CreamJob *next_job;
diff --git a/src/condor_gridmanager/creamresource.h b/src/condor_gridmanager/creamresource.h
index 6a2ff68..df0d5e3 100644
--- a/src/condor_gridmanager/creamresource.h
+++ b/src/condor_gridmanager/creamresource.h
@@ -43,8 +43,8 @@ class CreamResource : public BaseResource
 	bool Init();
 	const char *ResourceType();
 	void Reconfig();
-	void RegisterJob( CreamJob *job );
-	void UnregisterJob( CreamJob *job );
+	void RegisterJob( BaseJob *job );
+	void UnregisterJob( BaseJob *job );
 
 	const char *GetHashName();
 
diff --git a/src/condor_gridmanager/ec2job.cpp b/src/condor_gridmanager/ec2job.cpp
index 11a9b03..1f8ea17 100644
--- a/src/condor_gridmanager/ec2job.cpp
+++ b/src/condor_gridmanager/ec2job.cpp
@@ -1054,7 +1054,7 @@ void EC2Job::SetClientToken(const char *client_token)
 	if ( client_token ) {
 		m_client_token = client_token;
 	}
-	SetRemoteJobId(m_client_token.empty() ? NULL : m_client_token.c_str(),
+	EC2SetRemoteJobId(m_client_token.empty() ? NULL : m_client_token.c_str(),
 				   m_remoteJobId.c_str());
 }
 
@@ -1065,12 +1065,12 @@ void EC2Job::SetInstanceId( const char *instance_id )
 		m_remoteJobId = instance_id;
         jobAd->Assign( ATTR_EC2_INSTANCE_NAME, m_remoteJobId );
 	}
-	SetRemoteJobId( m_client_token.c_str(),
+	EC2SetRemoteJobId( m_client_token.c_str(),
 					m_remoteJobId.empty() ? NULL : m_remoteJobId.c_str() );
 }
 
-// SetRemoteJobId() is used to set the value of global variable "remoteJobID"
-void EC2Job::SetRemoteJobId( const char *client_token, const char *instance_id )
+// EC2SetRemoteJobId() is used to set the value of global variable "remoteJobID"
+void EC2Job::EC2SetRemoteJobId( const char *client_token, const char *instance_id )
 {
 	string full_job_id;
 	if ( client_token && client_token[0] ) {
diff --git a/src/condor_gridmanager/ec2job.h b/src/condor_gridmanager/ec2job.h
index 7a3c819..81483de 100644
--- a/src/condor_gridmanager/ec2job.h
+++ b/src/condor_gridmanager/ec2job.h
@@ -51,7 +51,7 @@ public:
 	void SetKeypairId( const char *keypair_id );
 	void SetInstanceId( const char *instance_id );
 	void SetClientToken( const char *client_token );
-	void SetRemoteJobId( const char *client_token, const char *instance_id );
+	void EC2SetRemoteJobId( const char *client_token, const char *instance_id );
 	void SetRemoteVMName(const char * name);
 	
 	static int submitInterval;
diff --git a/src/condor_gridmanager/globusjob.cpp b/src/condor_gridmanager/globusjob.cpp
index d39130c..53fd124 100644
--- a/src/condor_gridmanager/globusjob.cpp
+++ b/src/condor_gridmanager/globusjob.cpp
@@ -781,7 +781,7 @@ GlobusJob::GlobusJob( ClassAd *classad )
 								  ATTR_GRID_JOB_ID );
 			goto error_exit;
 		}
-		SetRemoteJobId( token, is_gt5 );
+		GlobusSetRemoteJobId( token, is_gt5 );
 		job_already_submitted = true;
 	}
 
@@ -972,7 +972,7 @@ void GlobusJob::doEvaluateState()
 			dprintf( D_ALWAYS, "(%d.%d) Immediately removing light-weight "
 					 "job whose resource is down.\n", procID.cluster,
 					 procID.proc );
-			SetRemoteJobId( NULL );
+			GlobusSetRemoteJobId( NULL, false );
 			gmState = GM_CLEAR_REQUEST;
 		}
 	}
@@ -1285,7 +1285,7 @@ void GlobusJob::doEvaluateState()
 					gmState = GM_HOLD;
 				} else if ( rc == GLOBUS_GRAM_PROTOCOL_ERROR_WAITING_FOR_COMMIT ) {
 					callbackRegistered = true;
-					SetRemoteJobId( job_contact.c_str() );
+					GlobusSetRemoteJobId( job_contact.c_str(), false );
 					gmState = GM_SUBMIT_SAVE;
 				} else {
 					// unhandled error
@@ -1678,7 +1678,7 @@ void GlobusJob::doEvaluateState()
 			if ( jobContact != NULL ) {
 				myResource->JMComplete( this );
 				myResource->CancelSubmit( this );
-				SetRemoteJobId( NULL );
+				GlobusSetRemoteJobId( NULL, false );
 				jmDown = false;
 			}
 			if ( condorState == COMPLETED || condorState == REMOVED ) {
@@ -1848,7 +1848,7 @@ else{dprintf(D_FULLDEBUG,"(%d.%d) JEF: proceeding immediately with restart\n",pr
 					myResource->JMComplete( this );
 					jmDown = false;
 					if ( !job_contact.empty() ) {
-						SetRemoteJobId( job_contact.c_str() );
+						GlobusSetRemoteJobId( job_contact.c_str(), false );
 						requestScheddUpdate( this, false );
 					}
 					gmState = GM_START;
@@ -1864,7 +1864,7 @@ else{dprintf(D_FULLDEBUG,"(%d.%d) JEF: proceeding immediately with restart\n",pr
 					jobAd->Assign( ATTR_DELEGATED_PROXY_EXPIRATION,
 								   (int)jmProxyExpireTime );
 					jmDown = false;
-					SetRemoteJobId( job_contact.c_str() );
+					GlobusSetRemoteJobId( job_contact.c_str(), false );
 					if ( globusState == GLOBUS_GRAM_PROTOCOL_JOB_STATE_FAILED ) {
 						globusState = globusStateBeforeFailure;
 					}
@@ -2105,7 +2105,7 @@ else{dprintf(D_FULLDEBUG,"(%d.%d) JEF: proceeding immediately with restart\n",pr
 				myResource->CancelSubmit( this );
 				myResource->JMComplete( this );
 				jmDown = false;
-				SetRemoteJobId( NULL );
+				GlobusSetRemoteJobId( NULL, false );
 				requestScheddUpdate( this, false );
 
 				if ( condorState == REMOVED ) {
@@ -2181,7 +2181,7 @@ else{dprintf(D_FULLDEBUG,"(%d.%d) JEF: proceeding immediately with restart\n",pr
 			myResource->CancelSubmit( this );
 			myResource->JMComplete( this );
 			if ( jobContact != NULL ) {
-				SetRemoteJobId( NULL );
+				GlobusSetRemoteJobId( NULL, false );
 				jmDown = false;
 			}
 			JobIdle();
@@ -2441,14 +2441,14 @@ else{dprintf(D_FULLDEBUG,"(%d.%d) JEF: proceeding immediately with restart\n",pr
 					jobAd->Assign( ATTR_DELEGATED_PROXY_EXPIRATION,
 								   (int)jmProxyExpireTime );
 					jmDown = false;
-					SetRemoteJobId( job_contact.c_str() );
+					GlobusSetRemoteJobId( job_contact.c_str(), false );
 					gmState = GM_CLEANUP_COMMIT;
 				} else {
 					// unhandled error
 					LOG_GLOBUS_ERROR( "globus_gram_client_job_request()", rc );
 					// Clear out the job id so that the job won't be held
 					// in GM_CLEAR_REQUEST
-					SetRemoteJobId( NULL );
+					GlobusSetRemoteJobId( NULL, false );
 					globusState = GLOBUS_GRAM_PROTOCOL_JOB_STATE_UNSUBMITTED;
 					jobAd->Assign( ATTR_GLOBUS_STATUS, globusState );
 					SetRemoteJobStatus( NULL );
@@ -2514,7 +2514,7 @@ else{dprintf(D_FULLDEBUG,"(%d.%d) JEF: proceeding immediately with restart\n",pr
 						LOG_GLOBUS_ERROR( "globus_gram_client_job_status()", rc );
 						// Clear out the job id so that the job won't be held
 						// in GM_CLEAR_REQUEST
-						SetRemoteJobId( NULL );
+						GlobusSetRemoteJobId( NULL, false );
 						globusState = GLOBUS_GRAM_PROTOCOL_JOB_STATE_UNSUBMITTED;
 						jobAd->Assign( ATTR_GLOBUS_STATUS, globusState );
 						SetRemoteJobStatus( NULL );
@@ -2537,7 +2537,7 @@ else{dprintf(D_FULLDEBUG,"(%d.%d) JEF: proceeding immediately with restart\n",pr
 									NULL, &status, &error );
 				// Clear out the job id so that the job won't be held
 				// in GM_CLEAR_REQUEST
-				SetRemoteJobId( NULL );
+				GlobusSetRemoteJobId( NULL, false );
 				globusState = GLOBUS_GRAM_PROTOCOL_JOB_STATE_UNSUBMITTED;
 				jobAd->Assign( ATTR_GLOBUS_STATUS, globusState );
 				SetRemoteJobStatus( NULL );
@@ -2834,7 +2834,7 @@ BaseResource *GlobusJob::GetResource()
 	return (BaseResource *)myResource;
 }
 
-void GlobusJob::SetRemoteJobId( const char *job_id, bool is_gt5 )
+void GlobusJob::GlobusSetRemoteJobId( const char *job_id, bool is_gt5 )
 {
 		// We need to maintain a hashtable based on job contact strings with
 		// the port number stripped. This is because the port number in the
diff --git a/src/condor_gridmanager/globusjob.h b/src/condor_gridmanager/globusjob.h
index 5879f61..b73764e 100644
--- a/src/condor_gridmanager/globusjob.h
+++ b/src/condor_gridmanager/globusjob.h
@@ -66,7 +66,7 @@ class GlobusJob : public BaseJob
 	bool GetCallbacks();
 	void ClearCallbacks();
 	BaseResource *GetResource();
-	void SetRemoteJobId( const char *job_id, bool is_gt5 = false );
+	void GlobusSetRemoteJobId( const char *job_id, bool is_gt5 );
 
 	/* If true, then ATTR_ON_EXIT_BY_SIGNAL, ATTR_ON_EXIT_SIGNAL, and
 	   ATTR_ON_EXIT_CODE are valid.  If false, no exit status is available.
diff --git a/src/condor_gridmanager/globusresource.cpp b/src/condor_gridmanager/globusresource.cpp
index 889b5ac..2dfc16f 100644
--- a/src/condor_gridmanager/globusresource.cpp
+++ b/src/condor_gridmanager/globusresource.cpp
@@ -256,8 +256,10 @@ void GlobusResource::PublishResourceAd( ClassAd *resource_ad )
 	resource_ad->Assign( "RestartJobmanagersWanted", restartJMsWanted.Number() );
 }
 
-void GlobusResource::UnregisterJob( GlobusJob *job )
+void GlobusResource::UnregisterJob( BaseJob *base_job )
 {
+	GlobusJob* job = dynamic_cast<GlobusJob*>( base_job );
+
 	JMComplete( job );
 
 	BaseResource::UnregisterJob( job );
diff --git a/src/condor_gridmanager/globusresource.h b/src/condor_gridmanager/globusresource.h
index f2c45cf..aa58539 100644
--- a/src/condor_gridmanager/globusresource.h
+++ b/src/condor_gridmanager/globusresource.h
@@ -44,7 +44,7 @@ class GlobusResource : public BaseResource
 	bool Init();
 	const char *ResourceType();
 	void Reconfig();
-	void UnregisterJob( GlobusJob *job );
+	void UnregisterJob( BaseJob *job );
 
 	bool IsGt5() { return m_isGt5; }
 
diff --git a/src/condor_schedd.V6/qmgr_job_updater.h b/src/condor_schedd.V6/qmgr_job_updater.h
index e487688..f897ae1 100644
--- a/src/condor_schedd.V6/qmgr_job_updater.h
+++ b/src/condor_schedd.V6/qmgr_job_updater.h
@@ -159,8 +159,8 @@ public:
 
 	virtual void startUpdateTimer( void ) {return;}
 	virtual bool updateJob( update_t /*type*/, SetAttributeFlags_t  /*commit_flags*/ = 0 ) { return true;}
-	virtual bool updateAttr( const char *  /*name*/, const char * /*expr*/, bool  /*updateMaster*/ ) { return true;}
-	virtual bool updateAttr( const char * /*name*/, int  /*value*/, bool  /*updateMaster*/ ) { return true;}
+	virtual bool updateAttr( const char *  /*name*/, const char * /*expr*/, bool  /*updateMaster*/, bool log=false ) { if (log) {} return true;}
+	virtual bool updateAttr( const char * /*name*/, int  /*value*/, bool  /*updateMaster*/, bool log=false ) { if (log) {} return true;}
 	virtual bool watchAttribute( const char*  /*attr*/, update_t /*type*/ = U_NONE ) { return true;}
 };
 
diff --git a/src/condor_starter.V6.1/baseStarter.cpp b/src/condor_starter.V6.1/baseStarter.cpp
index 9a1e94f..7d9c817 100644
--- a/src/condor_starter.V6.1/baseStarter.cpp
+++ b/src/condor_starter.V6.1/baseStarter.cpp
@@ -1215,7 +1215,7 @@ CStarter::startSSHD( int /*cmd*/, Stream* s )
 		dprintf(D_ALWAYS,"Failed to create SSHDProc.\n");
 		return FALSE;
 	}
-	if( !proc->StartJob(std,std_fname) ) {
+	if( !proc->SshStartJob(std,std_fname) ) {
 		dprintf(D_ALWAYS,"Failed to start sshd.\n");
 		return FALSE;
 	}
diff --git a/src/condor_starter.V6.1/sshd_proc.cpp b/src/condor_starter.V6.1/sshd_proc.cpp
index d0cf1f0..6621349 100644
--- a/src/condor_starter.V6.1/sshd_proc.cpp
+++ b/src/condor_starter.V6.1/sshd_proc.cpp
@@ -27,7 +27,7 @@
 extern CStarter *Starter;
 
 int
-SSHDProc::StartJob(int std_fds[],char const *std_fnames[])
+SSHDProc::SshStartJob(int std_fds[],char const *std_fnames[])
 {
 	dprintf(D_FULLDEBUG,"in SSHDProc::StartJob()\n");
 
diff --git a/src/condor_starter.V6.1/sshd_proc.h b/src/condor_starter.V6.1/sshd_proc.h
index 85f9c76..1901038 100644
--- a/src/condor_starter.V6.1/sshd_proc.h
+++ b/src/condor_starter.V6.1/sshd_proc.h
@@ -29,7 +29,7 @@ class SSHDProc : public VanillaProc
 public:
 	SSHDProc(ClassAd* jobAd) : VanillaProc(jobAd) { }
 
-	virtual int StartJob(int std_fds[],char const *std_fnames[]);
+	virtual int SshStartJob(int std_fds[],char const *std_fnames[]);
 
 	virtual bool JobExit( void );
 
-- 
1.7.9.6 (Apple Git-31.1)


From f0e027c1fd6fe2eb4ab82ef0035cd5b1c4e4948a Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Thu, 27 Sep 2012 10:49:07 -0500
Subject: [PATCH 3/3] More clang-based Mac OS X warnings fixes. #2750

---
 src/condor_utils/CMakeLists.txt    |   12 ++++++++++++
 src/condor_utils/read_user_log.cpp |    2 +-
 2 files changed, 13 insertions(+), 1 deletion(-)

diff --git a/src/condor_utils/CMakeLists.txt b/src/condor_utils/CMakeLists.txt
index 2d301f8..7ce1fd6 100644
--- a/src/condor_utils/CMakeLists.txt
+++ b/src/condor_utils/CMakeLists.txt
@@ -41,6 +41,18 @@ set_source_files_properties(../condor_sysapi/clinpack.cpp PROPERTIES COMPILE_FLA
 set_source_files_properties(../condor_daemon_core.V6/self_monitor.cpp ../classad_analysis/analysis.cpp ../classad_analysis/interval.cpp generic_stats.cpp generic_query.cpp PROPERTIES COMPILE_FLAGS -Wno-float-equal)
 endif(UNIX)
 
+# Turn off the OpenSSL deprecation warnings until we decide on the long-term direction with OpenSSL on Mac.
+if (DARWIN)
+	set_source_files_properties(condor_base64.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+	set_source_files_properties(condor_dh.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+	set_source_files_properties(condor_md.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+	set_source_files_properties(../condor_io/condor_auth_passwd.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+	set_source_files_properties(../condor_io/condor_auth_ssl.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+	set_source_files_properties(../condor_io/condor_crypt.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+	set_source_files_properties(../condor_io/condor_crypt_3des.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+	set_source_files_properties(../condor_io/condor_crypt_blowfish.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+endif()
+
 #On windows we add the cpp file into the build 
 if (GSOAP_SRC)
 	set_source_files_properties(${GSOAP_SRC} PROPERTIES GENERATED TRUE)
diff --git a/src/condor_utils/read_user_log.cpp b/src/condor_utils/read_user_log.cpp
index 66fa178..9dfe6d1 100644
--- a/src/condor_utils/read_user_log.cpp
+++ b/src/condor_utils/read_user_log.cpp
@@ -1012,7 +1012,7 @@ ReadUserLog::readEvent( ULogEvent *& event, bool *try_again )
 	} else {
 		outcome = ULOG_NO_EVENT;
 		if ( try_again ) {
-			try_again = false;
+			*try_again = false;
 		}
 	}
 	return outcome;
-- 
1.7.9.6 (Apple Git-31.1)

