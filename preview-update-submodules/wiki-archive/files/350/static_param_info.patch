diff --git a/src/condor_includes/condor_config.h b/src/condor_includes/condor_config.h
index 4f9aae6..b446126 100644
--- a/src/condor_includes/condor_config.h
+++ b/src/condor_includes/condor_config.h
@@ -321,7 +321,7 @@ BEGIN_C_DECLS
 	int write_config_file( const char* pathname );
 	// Helper function, of form to iterate over the hash table of parameter
 	// information.  Returns 0 to continue, -1 to stop (i.e. on an error).
-	int write_config_variable(param_info_t* value, void* file_desc);
+	int write_config_variable(const param_info_t* value, void* file_desc);
 
 /* This function initialize GSI (maybe other) authentication related
    stuff Daemons that should use the condor daemon credentials should
diff --git a/src/condor_utils/condor_config.cpp b/src/condor_utils/condor_config.cpp
index 13d0319..6f9a521 100644
--- a/src/condor_utils/condor_config.cpp
+++ b/src/condor_utils/condor_config.cpp
@@ -1539,21 +1539,22 @@ param_with_default_abort(const char *name, int abort)
 		// something in the Default Table.
 
 		// The candidate wasn't in the Config Table, so check the Default Table
-		val = param_default_string(next_param_name);
-		if (val != NULL) {
+		const char * def = param_default_string(next_param_name);
+		if (def != NULL) {
 			// Yay! Found something! Add the entry found in the Default 
 			// Table to the Config Table. This could be adding an empty
 			// string. If a default found, the loop stops searching.
-			insert(next_param_name, val, ConfigTab, TABLESIZE);
+			insert(next_param_name, def, ConfigTab, TABLESIZE);
 			// also add it to the lame extra-info table
 			if (extra_info != NULL) {
 				extra_info->AddInternalParam(next_param_name);
 			}
-			if (val[0] == '\0') {
+			if (def[0] == '\0') {
 				// If indeed it was empty, then just bail since it was
 				// validly found in the Default Table, but empty.
 				return NULL;
 			}
+            val = const_cast<char*>(def); // TJ: this is naughty, but expand_macro will replace it soon.
 		}
 	}
 
@@ -2559,7 +2560,7 @@ write_config_file(const char* pathname) {
 }
 
 int
-write_config_variable(param_info_t* value, void* file_desc) {
+write_config_variable(const param_info_t* value, void* file_desc) {
 	int config_fd = *((int*) file_desc);
 	char* actual_value = param(value->name);
 	if(strcmp(actual_value, value->str_val) != 0) {
diff --git a/src/condor_utils/param_info.cpp b/src/condor_utils/param_info.cpp
index 4ebff58..0fd163e 100644
--- a/src/condor_utils/param_info.cpp
+++ b/src/condor_utils/param_info.cpp
@@ -84,6 +84,8 @@ bucket_t** param_info;
 
 //static int num_entries;
 
+#include "param_info_init.c"
+
 void
 param_info_init() 
 {
@@ -99,22 +101,19 @@ param_info_init()
 
 	param_info_hash_create(&param_info);
 
-	// due to #793 coupled with the fact that the new param code is disabled for
-	// the 7.4 series, and enabled for the 7.5 series, we short circuit the
-	// initialization of the table for the 7.4 series to save on ram in the
-	// shadow process.
-
-	// Normally, I'd use the CondorVersionInfo object here, but since this is
-	// A C file and I don't want to have to implement a C interface to the
-	// CondorVersionInfo object, this next line is commented out in the
-	// trunk, which represents the 7.5 series at the writing of this comment.
-/*	goto after_data_insertion;*/
-
-#include "param_info_init.c"
+    // eventually, we want to do a binary lookup in g_param_info_init_table rather than
+    // creating a hashtable from int and using the hash to do the lookup.  but in the
+    // interest in having minimal changes in this patch, we'll keep the hash table for now.
+    //
+    for (int ii = 0; ii < sizeof(g_param_info_init_table)/sizeof(g_param_info_init_table[0]); ++ii)
+       {
+       param_info_hash_insert(param_info, g_param_info_init_table[ii]);
+       }
 
 /* 	after_data_insertion: ; */
 }
 
+#if 0
 void
 param_info_insert(const char* param,
 				  const char* aliases,
@@ -254,13 +253,13 @@ param_info_insert(const char* param,
 
 	param_info_hash_insert(param_info, p);
 }
+#endif
 
-
-char*
+const char*
 param_default_string(const char* param)
 {
-	param_info_t *p;
-	char* ret = NULL;
+	const param_info_t *p;
+	const char* ret = NULL;
 
 	param_info_init();
 	p = param_info_hash_lookup(param_info, param);
@@ -268,7 +267,7 @@ param_default_string(const char* param)
 	// Don't check the type here, since this is used in param and is used
 	// to look up values for all types.
 	if (p && p->default_valid) {
-		ret = const_cast<char*>(p->str_val);
+		ret = p->str_val;
 	}
 
 	return ret;
@@ -276,16 +275,17 @@ param_default_string(const char* param)
 
 int
 param_default_integer(const char* param, int* valid) {
-	param_info_t* p;
+	const param_info_t* p;
 	int ret = 0;
 
 	param_info_init();
 
 	p = param_info_hash_lookup(param_info, param);
 
-	if (p) {
-		ret = p->default_val.int_val;
-		*valid = p->default_valid && (p->type == PARAM_TYPE_INT || p->type == PARAM_TYPE_BOOL);
+	if (p && (p->type == PARAM_TYPE_INT || p->type == PARAM_TYPE_BOOL)) {
+        *valid = p->default_valid;
+        if (*valid)
+            ret = reinterpret_cast<const param_info_PARAM_TYPE_INT*>(p)->int_val;
 	} else {
 		*valid = 0;
 	}
@@ -302,16 +302,17 @@ double
 param_default_double(const char* param, int* valid) {
 
 
-	param_info_t* p;
+	const param_info_t* p;
 	double ret = 0.0;
 
 	param_info_init();
 
 	p = param_info_hash_lookup(param_info, param);
 
-	if (p) {
-		ret = p->default_val.dbl_val;
-		*valid = p->default_valid && (p->type == PARAM_TYPE_DOUBLE);
+	if (p && (p->type == PARAM_TYPE_DOUBLE)) {
+		*valid = p->default_valid;
+        if (*valid)
+		    ret = reinterpret_cast<const param_info_PARAM_TYPE_DOUBLE*>(p)->dbl_val;
 	} else {
 		*valid = 0;
 	}
@@ -322,16 +323,21 @@ param_default_double(const char* param, int* valid) {
 int
 param_range_integer(const char* param, int* min, int* max) {
 
-	param_info_t* p;
+	const param_info_t* p;
 
 	p = param_info_hash_lookup(param_info, param);
 
 	if (p) {
-		if(p->type != PARAM_TYPE_INT) {
+		if (p->type != PARAM_TYPE_INT) {
 			return -1;
 		}
-		*min = p->range_min.int_min;
-		*max = p->range_max.int_max;
+        if ( ! p->range_valid) {
+            *min = INT_MIN;
+            *max = INT_MAX;
+        } else {
+		    *min = reinterpret_cast<const param_info_PARAM_TYPE_INT_ranged*>(p)->int_min;
+		    *max = reinterpret_cast<const param_info_PARAM_TYPE_INT_ranged*>(p)->int_max;
+        }
 	} else {
 		/* If the integer isn't known about, then don't assume a range for it */
 /*		EXCEPT("integer range for param '%s' not found", param);*/
@@ -343,7 +349,7 @@ param_range_integer(const char* param, int* min, int* max) {
 int
 param_range_double(const char* param, double* min, double* max) {
 
-	param_info_t* p;
+	const param_info_t* p;
 
 	p = param_info_hash_lookup(param_info, param);
 
@@ -351,8 +357,13 @@ param_range_double(const char* param, double* min, double* max) {
 		if(p->type != PARAM_TYPE_DOUBLE) {
 			return -1;
 		}
-		*min = p->range_min.dbl_min;
-		*max = p->range_max.dbl_max;
+        if ( ! p->range_valid) {
+            *min = DBL_MIN;
+            *max = DBL_MAX;
+        } else {
+		    *min = reinterpret_cast<const param_info_PARAM_TYPE_DOUBLE_ranged*>(p)->dbl_min;
+		    *max = reinterpret_cast<const param_info_PARAM_TYPE_DOUBLE_ranged*>(p)->dbl_max;
+        }
 	} else {
 		/* If the double isn't known about, then don't assume a range for it */
 /*		EXCEPT("double range for param '%s' not found", param);*/
@@ -554,7 +565,7 @@ validate_regex(const char* pattern, const char* subject) {
 
 void
 iterate_params(int (*callPerElement)
-							(param_info_t* /*value*/, void* /*user data*/),
+							(const param_info_t* /*value*/, void* /*user data*/),
 				void* user_data) {
 	param_info_hash_iterate(param_info, callPerElement, user_data);
 }
diff --git a/src/condor_utils/param_info.h b/src/condor_utils/param_info.h
index 2262b4f..8015615 100644
--- a/src/condor_utils/param_info.h
+++ b/src/condor_utils/param_info.h
@@ -30,41 +30,98 @@ typedef enum param_info_t_type_e {
 	PARAM_TYPE_DOUBLE = 3
 } param_info_t_type_t;
 
+// This struct is common to all params, int and double params
+// will be followed by an int or double when default_valid is true,
+// ranged params will have min and max values following that if range_valid is true.
 typedef struct param_info_t_s {
 
-	char const *	name;
-    char const * 	aliases;
-	union {
-		int 	int_val;
-		char const * 	str_val;
-		double  dbl_val;
-	} default_val;
-	char const *   str_val;
-	int		default_valid;
-    char const * 	range;
-	union {
-		int		int_min;
-		double	dbl_min;
-	} range_min;
-	union {
-		int		int_max;
-		double	dbl_max;
-	} range_max;
-	int 	range_valid;
+	char const *  name;
+    //char const *  aliases;
+	char const *  str_val;
+    char const *  version;
+    //char const *  range;
+    char const *  friendly_name;
+    char const *  usage;
+    char const *  url;
+    char const *  tags;
+
+    //int		id;
+
+    param_info_t_type_t  	type;
+    int 	state;
     int 	customization;
     int 	reconfig;
     int 	is_macro;
-    char const * 	version;
-    int 	state;
-    char const *   friendly_name;
-    param_info_t_type_t  	type;
-    int		id;
-    char const *   usage;
-    char const *   url;
-    char const *   tags;
+	int		default_valid;
+	int 	range_valid;
 
 } param_info_t;
 
+/*
+typedef struct param_info_default_val_ranged_int_t_s {
+   int int_val;
+   int int_min;
+   int int_max;
+} param_info_default_val_ranged_int_t;
+
+typedef struct param_info_default_val_int_t_s {
+   int int_val;
+} param_info_default_val_int_t;
+
+typedef struct param_info_default_val_ranged_dbl_t_s {
+   double dbl_val;
+   double dbl_min;
+   double dbl_max;
+} param_info_default_val_ranged_dbl_t;
+
+typedef struct param_info_default_val_dbl_t_s {
+   double dbl_val;
+} param_info_default_val_dbl_t;
+*/
+
+struct param_info_str_t_s {
+   param_info_t hdr;
+   const char * str_val;
+};
+
+struct param_info_str_ranged_t_s {
+   param_info_t hdr;
+   const char * str_val;
+   const char * range;
+};
+
+struct param_info_int_t_s {
+   param_info_t hdr;
+   int int_val;
+};
+
+struct param_info_int_ranged_t_s {
+   param_info_t hdr;
+   int int_val;
+   int int_min;
+   int int_max;
+};
+
+struct param_info_dbl_t_s {
+   param_info_t hdr;
+   double dbl_val;
+};
+
+struct param_info_dbl_ranged_t_s {
+   param_info_t hdr;
+   double dbl_val;
+   double dbl_min;
+   double dbl_max;
+};
+
+typedef struct param_info_str_t_s param_info_PARAM_TYPE_STRING;
+typedef struct param_info_int_t_s param_info_PARAM_TYPE_BOOL;
+typedef struct param_info_int_t_s param_info_PARAM_TYPE_INT;
+typedef struct param_info_dbl_t_s param_info_PARAM_TYPE_DOUBLE;
+typedef struct param_info_str_t_s        param_info_PARAM_TYPE_STRING_ranged;
+typedef struct param_info_int_ranged_t_s param_info_PARAM_TYPE_INT_ranged;
+typedef struct param_info_dbl_ranged_t_s param_info_PARAM_TYPE_DOUBLE_ranged;
+
 BEGIN_C_DECLS
 
 	void param_info_insert(const char* param,
@@ -88,7 +145,7 @@ BEGIN_C_DECLS
 	int param_default_boolean(const char* param, int* valid);
 	double param_default_double(const char* param, int* valid);
 	//returns pointer to internal object (or null), do not free
-	char* param_default_string(const char* param);
+	const char* param_default_string(const char* param);
 
 	// Returns -1 if param is not of the specified type.
 	// Otherwise, returns 0 and sets min and max to the minimum and maximum
@@ -99,7 +156,7 @@ BEGIN_C_DECLS
 	// Iterate the list of parameter information.
 	// See param_info_hash_iterate below.
 	void iterate_params(int (*callPerElement)
-			(param_info_t* /*value*/, void* /*user data*/), void* user_data);
+			(const param_info_t* /*value*/, void* /*user data*/), void* user_data);
 
 END_C_DECLS
 
@@ -111,17 +168,17 @@ END_C_DECLS
 #define PARAM_INFO_TABLE_SIZE	2048
 
 struct bucket_t {
-	param_info_t* param;
+	const param_info_t* param;
 	struct bucket_t* next;
 };
 typedef struct bucket_t bucket_t;
 
 typedef bucket_t** param_info_hash_t;
 
-void param_info_hash_insert(param_info_hash_t param_info, param_info_t* p);
+void param_info_hash_insert(param_info_hash_t param_info, const param_info_t* p);
 
 //returns a pointer to an internal object, do not free the returned pointer
-param_info_t* param_info_hash_lookup(param_info_hash_t param_info, const char* param);
+const param_info_t* param_info_hash_lookup(param_info_hash_t param_info, const char* param);
 
 //must call this on a param_info_hash_t* to initialize it
 void param_info_hash_create(param_info_hash_t* param_info);
@@ -134,7 +191,7 @@ void param_info_hash_create(param_info_hash_t* param_info);
 // Continues as long as callPerElement returns 0, or until it iterates
 // everything.  user_data is passed to every call of callPerElement.
 void param_info_hash_iterate(param_info_hash_t param_info,
-		int (*callPerElement) (param_info_t* /*value*/, void* /*user_data*/),
+		int (*callPerElement) (const param_info_t* /*value*/, void* /*user_data*/),
 		void* user_data);
 
 // Dump the whole hash table.
@@ -142,7 +199,7 @@ void param_info_hash_dump(param_info_hash_t param_info);
 
 // Print out information for one given value.  Typed to be used with
 // param_info_hash_iterate.
-int param_info_hash_dump_value(param_info_t* param_value, void* unused);
+int param_info_hash_dump_value(const param_info_t* param_value, void* unused);
 
 #endif
 
diff --git a/src/condor_utils/param_info.in b/src/condor_utils/param_info.in
index 1a06e61..42356d6 100644
--- a/src/condor_utils/param_info.in
+++ b/src/condor_utils/param_info.in
@@ -8537,7 +8537,8 @@ id=513
 
 [MAX_JOBS_RUNNING]
 aliases=
-default=ceiling(ifThenElse( regexp("WIN.*","$(OPSYS)"), 200, ifThenElse( $(DETECTED_MEMORY)*0.8*1024/800 < 10000, $(DETECTED_MEMORY)*0.8*1024/800, 10000 )))
+default=ceiling(ifThenElse( $(DETECTED_MEMORY)*0.8*1024/800 < 10000, $(DETECTED_MEMORY)*0.8*1024/800, 10000 ))
+win32_default=200
 version=0.0.0
 range=.*
 state=default
diff --git a/src/condor_utils/param_info_c_generator.pl b/src/condor_utils/param_info_c_generator.pl
index 4e3a571..3d949d3 100755
--- a/src/condor_utils/param_info_c_generator.pl
+++ b/src/condor_utils/param_info_c_generator.pl
@@ -107,8 +107,8 @@ use constant {
 # the name of the property to be substituted. 
 # (property types and names are defined farther below in $property_types) 
 ##################################################################################
-use constant { RECONSTITUTE_TEMPLATE => 
-'param_info_insert(%parameter_name%, %aliases%, %default%, %version%, %range%,
+use constant { RECONSTITUTE_TEMPLATE_FUNC => 
+'param_info_insert(%parameter_name%, %version%, %default%, %range%,
                   %state%, %type%, %is_macro%, %reconfig%, %customization%,
 				  %friendly_name%, %usage%,
 				  %url%,
@@ -116,6 +116,40 @@ use constant { RECONSTITUTE_TEMPLATE =>
 '
 };
 
+use constant { RECONSTITUTE_TEMPLATE => 
+'static const param_info_%typequal% param_def_info_%parameter_var% = {
+	%parameter_name%, %default%, %version%, 
+	%friendly_name%, %usage%,
+	%url%, %tags%,
+	%type%, %state%, %customization%, %reconfig%, %is_macro%, %def_valid%, %range_valid%,
+	%cooked_values%
+	};
+'
+};
+
+use constant { RECONSTITUTE_TEMPLATE_WIN => 
+'static const param_info_%typequal% param_def_info_%parameter_var% = {
+	%parameter_name%, 
+#ifdef WIN32
+	%win32_default%,
+#else	
+	%default%, 
+#endif
+	%version%, 
+	%friendly_name%, %usage%,
+	%url%, %tags%,
+	%type%, %state%, %customization%, %reconfig%, %is_macro%, 
+#ifdef WIN32
+	%win_valid%, %range_valid%,
+	%win_cooked_values%
+#else	
+	%def_valid%, %range_valid%,
+	%cooked_values%, 
+#endif
+	};
+'
+};
+
 ##################################################################################
 # $property_types customizes the type and options of the properties. Each property is 
 # pointing toward a hash, containing the following metadata:
@@ -125,8 +159,11 @@ use constant { RECONSTITUTE_TEMPLATE =>
 #      dont_trim =>   (Set this to 1 to not trim trailing whitespace on value.) 
 ##################################################################################
 my $property_types = {
+	daemon_name     => { type => "literal",	optional => 1  },
 	parameter_name 	=> { type => "char[]" },
+	parameter_var 	=> { type => "nodots" },
 	default 		=> { type => "char[]", dont_trim => 1  },
+#	win32_default	=> { type => "char[]", dont_trim => 1, optional => 1 },
 	friendly_name 	=> { type => "char[]" },
 	type 			=> { type => "param_type" },
 	state 			=> { type => "state_type" },
@@ -160,6 +197,7 @@ my $property_types = {
 ##################################################################################
 my $type_subs = { 
 	'char[]'  => sub { return '"'.escape($_[0]).'"'; },
+	'literal'  => sub { return $_[0]; },
 	'bool'  => sub { return enum($_[0],'true','false'); },
 	'int'  => sub { return $_[0]=~/^\d+$/?$_[0]:type_error($_[0], 'int'); },
 	'float'  => sub { return $_[0]=~/^\d+\.\d+$/?$_[0]:type_error($_[0], 'float'); },
@@ -169,6 +207,11 @@ my $type_subs = {
 		my $state = enum($_[0],'USER','AUTODEFAULT','DEFAULT', 'RUNTIME');
 		return "STATE_".$state;
 	},
+	'nodots'  => sub { 
+	    my $param_var = $_[0];
+	    $param_var =~ s/\./_/g; 
+	    return $param_var;
+	},
 	'param_type' => sub { 
 		my $type = enum($_[0],'STRING','INT','BOOL', 'DOUBLE');
 		return "PARAM_TYPE_".$type;
@@ -219,7 +262,7 @@ sub reconstitute {
 		my ($replace,$context) = @_;
 		while(my($key, $val) = each %{$replace} ) {
 			$key =~ s/\W/\\$&/mg;
-			$context =~ s/$key/$val/ ;
+			$context =~ s/$key/$val/g ;
 		}
 		return $context;
 	}
@@ -287,15 +330,46 @@ sub reconstitute {
 	
 	# Here we have the main logic of this function.
 	begin_output(); # opening the file, and beginning output
-
+	
+	my @var_names;
+	
 	# Loop through each of the parameters in the structure passed as an argument
 	while(my ($param_name, $sub_structure) = each %{$structure}){
 
+		#my $daemon_name = "";
+		#if ($param_name =~ /\./) {
+		#	my @aaa = split(/\./, $param_name);
+		#	$param_name = $aaa[1];
+		#	$daemon_name = $aaa[0];	
+		#	print "$aaa[1] of $aaa[0]\n";
+		#}
+		
 		my %replace=();
 		# Quickly add the pseudo-property "parameter_name" for the name of the 
 		# parameter, so that it can be treated just like any other property.
 		$sub_structure->{'parameter_name'} = $param_name;
+		$sub_structure->{'parameter_var'} = $param_name;
+		
+		my $typequal = "t";
+		my $cooked_values = "";
+		my $win_cooked_values = "";
+		my $typequal_ranged = "";
+		my $cooked_range = "";
+		my $range_max = "";
+		my $nix_default = $sub_structure->{'default'};
+		my $win_default = $sub_structure->{'win32_default'};
+		my $def_valid = (defined $nix_default && $nix_default ne "") ? "1" : "0";
+		my $win_valid = (defined $win_default && $win_default ne "") ? "1" : "0";
+		my $range_valid = "0";
+		my $var_name = $param_name;
+		
+		$var_name =~ s/\./_/g;
+		push @var_names, $var_name;
+		
+		print "$var_name has win32_default=$win_default\n" if $win_valid eq "1";
+		
 		print Dumper($sub_structure) if $options{debug};
+		
 		# Loop through each of the properties in the hash specifying property 
 		# rules. (This hash is defined at the top of this file and it details 
 		# how every property should be treated).
@@ -309,21 +383,67 @@ sub reconstitute {
 			$replace{"%$name%"}=do_one_property($sub_structure,$info,$name); 
 
 			# TYPECHECK: certain parameters types must have a non-empty default
+			# this is also where we set convert string default value to int or double as needed
+			# and decide whether to set the default_valid flag or not.
 			if ($name eq "type")
 			{
+				$typequal = do_one_property($sub_structure,$info,$name); 
+				
 				# Integer parameters
 				if ($type_subs->{$info->{type}}(exists $sub_structure->{type} ? $sub_structure->{type} : $default_structure->{type}) eq "PARAM_TYPE_INT")
 				{
-					if ($sub_structure->{'default'} eq "") {
+					$range_max = "INT_MAX";
+				    $cooked_values = $nix_default;
+					if ($cooked_values =~ /^[0-9\-\*\/\(\) \t]*$/) {
+					    $def_valid = "1";
+					} else {
+						#print "$param_name default is expression $cooked_values\n";
+						$cooked_values = "0";
+						$def_valid = "0";
+					}
+					
+					if (defined $win_default)
+					{
+						$win_cooked_values = $win_default;
+						if ($win_cooked_values =~ /^[0-9\-\*\/\(\) \t]*$/) {
+							$win_valid = "1";
+						} else {
+							#print "$param_name default is expression $win_cooked_values\n";
+							$win_cooked_values = "0";
+							$win_valid = "0";
+						}
+					}
+									    
+					if ($nix_default eq "") {
 						print "ERROR: Integer parameter $param_name needs " .
 								"a default!\n";
 					}
+					#print "$param_name cooked is $cooked_values\n";
 				}
 
 				# Boolean parameters
 				if ($type_subs->{$info->{type}}(exists $sub_structure->{type} ? $sub_structure->{type} : $default_structure->{type}) eq "PARAM_TYPE_BOOL")
 				{
-					if ($sub_structure->{'default'} eq "") {
+				    $cooked_values = $nix_default;
+					if ($cooked_values =~ /^[ \t]*TRUE|FALSE|true|false|0|1[ \t]*$/) {
+					    $def_valid = "1";
+					} else {
+						#print "$param_name default is expression $cooked_values\n";
+						$cooked_values = "0";
+						$def_valid = "0";
+					}
+					if (defined $win_default)
+					{
+						$win_cooked_values = $win_default;
+						if ($win_cooked_values =~ /^[ \t]*TRUE|FALSE|true|false|0|1[ \t]*$/) {
+							$win_valid = "1";
+						} else {
+							#print "$param_name default is expression $win_cooked_values\n";
+							$win_cooked_values = "0";
+							$win_valid = "0";
+						}
+					}
+					if ($nix_default eq "") {
 						print "ERROR: Boolean parameter $param_name needs " .
 								"a default!\n";
 					}
@@ -332,18 +452,96 @@ sub reconstitute {
 				# Double parameters
 				if ($type_subs->{$info->{type}}(exists $sub_structure->{type} ? $sub_structure->{type} : $default_structure->{type}) eq "PARAM_TYPE_DOUBLE")
 				{
-					if ($sub_structure->{'default'} eq "") {
+					$range_max = "DBL_MAX";
+				    $cooked_values = $nix_default;
+					if ($cooked_values =~ /^[0-9\.\-eE+\*\/\(\) \t]*$/) {
+						$def_valid = "1";
+					} else {
+						#print "$param_name default is expression $cooked_values\n";
+						$cooked_values = "0";
+						$def_valid = "0";
+					}				    
+					if (defined $win_default)
+					{
+						$win_cooked_values = $nix_default;
+						if ($win_cooked_values =~ /^[0-9\.\-eE+\*\/\(\) \t]*$/) {
+							$win_valid = "1";
+						} else {
+							#print "$param_name default is expression $win_cooked_values\n";
+							$win_cooked_values = "0";
+							$win_valid = "0";
+						}				    
+					}
+					if ($nix_default eq "") {
 						print "ERROR: Double parameter $param_name needs " .
 								"a default!\n";
 					}
 				}
 			}
+			
+			# convert ranges from string to int or double if we can
+			# if range can be set a compile time, then we need to emit a xxx_ranged
+			# structure and two aditional data values. plus we set the 
+			# range_valid flag.
+			#
+			if ($name eq "range")
+			{
+				my $range_raw = ".*";
+				if (exists $sub_structure->{'range'}) {
+				   $range_raw = $sub_structure->{'range'};
+				}
+				   
+				if ($range_raw ne ".*")
+				{
+					if ($range_raw =~ /^[0-9\.\-eE+, \t]*$/)
+					{
+						#print "$param_name range is numeric $range_raw\n";
+						$typequal_ranged = "_ranged";	
+						$cooked_range = ", ".$range_raw;
+						$range_valid = "1";
+					}
+					else
+					{
+						#print "$param_name range is expression $range_raw\n";
+					}
+				}
+			}
 		}
+		
+		# if cooked_range ends in a ,  then the max value is missing, so
+		# append $range_max
+		#
+		if ($cooked_range =~ /,$/) {
+			$cooked_range = $cooked_range.$range_max;
+			#print "$param_name range is $cooked_range\n";
+		}
+		
+		$replace{"%def_valid%"} = $def_valid;
+		$replace{"%range_valid%"} = $range_valid;
+		
+		$replace{"%cooked_values%"} = $cooked_values.$cooked_range;
+		$replace{"%typequal%"} = $typequal.$typequal_ranged;
 
 		# Here we actually apply the template and output the parameter.
-		continue_output(replace_by_hash(\%replace, RECONSTITUTE_TEMPLATE));
+		if (defined $win_default) {
+		    $replace{"%win32_default%"} = '"'.escape($win_default).'"';
+			$replace{"%win_valid%"} = $win_valid;
+			$replace{"%win_cooked_values%"} = $win_cooked_values.$cooked_range;
+			continue_output(replace_by_hash(\%replace, RECONSTITUTE_TEMPLATE_WIN));
+		} else {
+			continue_output(replace_by_hash(\%replace, RECONSTITUTE_TEMPLATE));
+		}
 	}
-
+	
+	# output a sorted table of pointers to the param_info_t structures
+	# we will use this to do a binary lookup of the parameter by name.
+	#
+	continue_output("\n\nstatic const param_info_t * g_param_info_init_table[] = {\n");
+	for(sort @var_names) {
+		continue_output("	&param_def_info_$_.hdr,\n");
+	}
+	continue_output("\n};");
+	
 	# wrap things up. 
 	end_output();
 }
diff --git a/src/condor_utils/param_info_hash.cpp b/src/condor_utils/param_info_hash.cpp
index 3fae285..6948937 100644
--- a/src/condor_utils/param_info_hash.cpp
+++ b/src/condor_utils/param_info_hash.cpp
@@ -34,7 +34,7 @@ param_info_hash(const char *str)
 }
 
 void
-param_info_hash_insert(param_info_hash_t param_info, param_info_t* p) {
+param_info_hash_insert(param_info_hash_t param_info, const param_info_t* p) {
 
 	unsigned int key;
 	bucket_t* b;
@@ -61,7 +61,7 @@ param_info_hash_insert(param_info_hash_t param_info, param_info_t* p) {
 	}
 }
 
-param_info_t*
+const param_info_t*
 param_info_hash_lookup(param_info_hash_t param_info, const char* param) {
 
 	unsigned int key;
@@ -82,8 +82,27 @@ param_info_hash_lookup(param_info_hash_t param_info, const char* param) {
 
 // of type to be used by param_info_hash_iterate
 int
-param_info_hash_dump_value(param_info_t* param_value, void* /*unused*/ ) {
+param_info_hash_dump_value(const param_info_t* param_value, void* /*unused*/ ) {
 	printf("%s:  default=", param_value->name);
+#if 1
+    if ( ! param_value->default_valid)
+       printf("<Undefined>");
+    else
+	switch (param_value->type) {
+		case PARAM_TYPE_STRING:
+			printf("%s", reinterpret_cast<const param_info_PARAM_TYPE_STRING*>(param_value)->str_val);
+			break;
+		case PARAM_TYPE_DOUBLE:
+			printf("%f", reinterpret_cast<const param_info_PARAM_TYPE_DOUBLE*>(param_value)->dbl_val);
+			break;
+		case PARAM_TYPE_INT:
+			printf("%d", reinterpret_cast<const param_info_PARAM_TYPE_INT*>(param_value)->int_val);
+			break;
+		case PARAM_TYPE_BOOL:
+			printf("%s", reinterpret_cast<const param_info_PARAM_TYPE_BOOL*>(param_value)->int_val == 0 ? "false" : "true");
+			break;
+	}
+#else
 	switch (param_value->type) {
 		case PARAM_TYPE_STRING:
 			printf("%s", param_value->default_val.str_val);
@@ -98,6 +117,7 @@ param_info_hash_dump_value(param_info_t* param_value, void* /*unused*/ ) {
 			printf("%s", param_value->default_val.int_val == 0 ? "false" : "true");
 			break;
 	}
+#endif
 	printf("\n");
 	return 0;
 }
@@ -109,7 +129,7 @@ param_info_hash_dump(param_info_hash_t param_info) {
 
 void
 param_info_hash_iterate(param_info_hash_t param_info, int (*callPerElement)
-			(param_info_t* /*value*/, void* /*user data*/), void* user_data) {
+			(const param_info_t* /*value*/, void* /*user data*/), void* user_data) {
 	int i;
 	int stop = 0;
 	for(i = 0; i < PARAM_INFO_TABLE_SIZE && stop == 0; i++) {
