diff --git a/src/condor_examples/condor_config.generic b/src/condor_examples/condor_config.generic
index bd9dde4..df7ec6e 100644
--- a/src/condor_examples/condor_config.generic
+++ b/src/condor_examples/condor_config.generic
@@ -2326,17 +2326,6 @@ VM_SCRIPT = $(SBIN)/condor_vm_xen.sh
 
 ## Networking parameters for Xen & KVM
 ##
-## This parameter is used only for virsh.
-##
-## A string specifying a script and its arguments that will be run to
-## setup a bridging network interface for guests. The interface should
-## provide direct access to the host system's LAN, i.e. not be NAT'd on the
-## host. 
-##
-## Example 
-##  VM_BRIDGE_SCRIPT = vif-bridge bridge=xenbr0 
-#VM_BRIDGE_SCRIPT = vif-bridge bridge=xenbr0
-
 ## This is the path to the XML helper command; the libvirt_simple_script.awk
 ## script just reproduces what Condor already does for the kvm/xen VM
 ## universe
diff --git a/src/condor_includes/condor_vm_universe_types.h b/src/condor_includes/condor_vm_universe_types.h
index 67befa2..a67d6b6 100644
--- a/src/condor_includes/condor_vm_universe_types.h
+++ b/src/condor_includes/condor_vm_universe_types.h
@@ -76,6 +76,7 @@
 #define VMPARAM_NO_OUTPUT_VM			"VMPARAM_No_Output_VM"
 #define VMPARAM_CDROM_FILES				"VMPARAM_CDROM_Files"
 #define VMPARAM_TRANSFER_CDROM_FILES	"VMPARAM_Transfer_CDROM_Files"
+#define VMPARAM_BRIDGE_INTERFACE	"VMPARAM_Bridge_Interface"
 
 #endif
 
diff --git a/src/condor_vm-gahp/libvirt_simple_script.awk b/src/condor_vm-gahp/libvirt_simple_script.awk
index 30ece5f..830532c 100644
--- a/src/condor_vm-gahp/libvirt_simple_script.awk
+++ b/src/condor_vm-gahp/libvirt_simple_script.awk
@@ -35,7 +35,7 @@ BEGIN {
     initrd = ""
     kernel = ""
     kern_params = ""
-    print "Received attribute: " key "=" attrs[key] >debug_file
+    print "Received attribute: " key "=" attrs[key] >>debug_file
 }
 
 END {
@@ -62,7 +62,7 @@ END {
     }
     else
     {
-	print "Unknown VM type: " index(attrs["JobVMType"], "kvm") >debug_file;
+	print "Unknown VM type: " index(attrs["JobVMType"], "kvm") >>debug_file;
 	exit(-1);
     }
     print "<name>" attrs["VMPARAM_VM_NAME"] "</name>" ;
@@ -100,15 +100,29 @@ END {
     {
 	if(index(attrs["JobVMNetworkingType"],"nat") != 0)
 	{
-	    print "<interface type='network'><source network='default'/></interface>" ;
+	    print "<interface type='network'><source network='default'/>" ;
+            if(attrs["JobVM_MACADDR"] != "")
+            {
+		print"<mac address='" attrs["JobVM_MACADDR"] "'/>" ;
+            }
+	    print "</interface>" ;
 	}
 	else
 	{
-	    print "<interface type='bridge'><mac address='" attrs["JobVM_MACADDR"] "'/><source bridge='br0'/></interface>" ;
+	    print "<interface type='bridge'>" ;
+            if(attrs["JobVM_MACADDR"] != "")
+            {
+		print"<mac address='" attrs["JobVM_MACADDR"] "'/>" ;
+            }
+	    if(attrs["VMPARAM_Bridge_Interface"] != "")
+	    {
+		print "<source bridge='" attrs["VMPARAM_Bridge_Interface"] "'/>" ;
+	    }
+	    print "</interface>" ;
 	}
     }
     print "<disk type='file'>" ;
-	if(index(attrs["JobVMType"],"xen") != 0) 
+    if(index(attrs["JobVMType"],"xen") != 0) 
     {
 	 split(attrs["VMPARAM_Xen_Disk"], disk_string, ":");
     }
diff --git a/src/condor_vm-gahp/vm_type.h b/src/condor_vm-gahp/vm_type.h
index a533d39..3c357e1 100644
--- a/src/condor_vm-gahp/vm_type.h
+++ b/src/condor_vm-gahp/vm_type.h
@@ -47,6 +47,8 @@ public:
 
 	virtual ~VMType();
 
+	virtual void Config() = 0;
+
 	virtual bool Start() = 0;
 
 	virtual bool Shutdown() = 0;
diff --git a/src/condor_vm-gahp/vmgahp.cpp b/src/condor_vm-gahp/vmgahp.cpp
index c61663e..9763823 100644
--- a/src/condor_vm-gahp/vmgahp.cpp
+++ b/src/condor_vm-gahp/vmgahp.cpp
@@ -713,6 +713,7 @@ VMGahp::executeStart(VMRequest *req)
 		return; 
 	}
 
+	new_vm->Config();
 	if( new_vm->CreateConfigFile() == false ) {
 		req->m_has_result = true;
 		req->m_is_success = false;
diff --git a/src/condor_vm-gahp/vmware_type.cpp b/src/condor_vm-gahp/vmware_type.cpp
index 8fdaa3e..e0fba29 100644
--- a/src/condor_vm-gahp/vmware_type.cpp
+++ b/src/condor_vm-gahp/vmware_type.cpp
@@ -440,6 +440,12 @@ VMwareType::~VMwareType()
 }
 
 void
+VMwareType::Config()
+{
+	// Nothing to do
+}
+
+void
 VMwareType::adjustConfigDiskPath()
 {
 	if( m_configfile.IsEmpty() || 
diff --git a/src/condor_vm-gahp/vmware_type.h b/src/condor_vm-gahp/vmware_type.h
index 0aacf16..10572d0 100644
--- a/src/condor_vm-gahp/vmware_type.h
+++ b/src/condor_vm-gahp/vmware_type.h
@@ -41,6 +41,8 @@ public:
 
 	virtual ~VMwareType();
 
+	virtual void Config();
+
 	virtual bool Start();
 
 	virtual bool Shutdown();
diff --git a/src/condor_vm-gahp/xen_type.cpp b/src/condor_vm-gahp/xen_type.cpp
index eb35e76..15d9c7b 100644
--- a/src/condor_vm-gahp/xen_type.cpp
+++ b/src/condor_vm-gahp/xen_type.cpp
@@ -44,6 +44,8 @@
 #define XEN_LOCAL_SETTINGS_PARAM "XEN_LOCAL_SETTINGS_FILE"
 #define XEN_LOCAL_VT_SETTINGS_PARAM "XEN_LOCAL_VT_SETTINGS_FILE"
 
+extern VMGahp *vmgahp;
+
 static MyString
 getScriptErrorString(const char* fname)
 {
@@ -97,6 +99,35 @@ VirshType::~VirshType()
 	}
 }
 
+void
+VirshType::Config()
+{
+	char *config_value = NULL;
+
+	config_value = param("VM_NETWORKING_BRIDGE_INTERFACE");
+	if( config_value ) {
+		m_vm_bridge_interface = delete_quotation_marks(config_value).Value();
+		free(config_value);
+	} else if( vmgahp->m_gahp_config->m_vm_networking_types.contains("bridge") == true) {
+		vmprintf( D_ALWAYS, "ERROR: 'VM_NETWORKING_TYPE' contains "
+				"'bridge' but VM_NETWORKING_BRIDGE_INTERFACE "
+				"isn't defined, so 'bridge' "
+				"networking is disabled\n");
+		vmgahp->m_gahp_config->m_vm_networking_types.remove("bridge");
+		if( vmgahp->m_gahp_config->m_vm_networking_types.isEmpty() ) {
+			vmprintf( D_ALWAYS, "ERROR: 'VM_NETWORKING' is true "
+					"but 'VM_NETWORKING_TYPE' contains "
+					"no valid entries, so 'VM_NETWORKING' "
+					"is disabled\n");
+			vmgahp->m_gahp_config->m_vm_networking = false;
+		} else {
+			vmprintf( D_ALWAYS,
+					"Setting default networking type to 'nat'\n");
+			vmgahp->m_gahp_config->m_vm_default_networking_type = "nat";
+		}
+	}
+}
+
 bool 
 VirshType::Start()
 {
@@ -349,6 +380,20 @@ bool VirshType::CreateVirshConfigFile(const char* filename)
       classad_string += m_xen_initrd_file;
       classad_string += "\"\n";
     }
+  if(!m_vm_bridge_interface.empty())
+    {
+      classad_string += VMPARAM_BRIDGE_INTERFACE;
+      classad_string += " = \"";
+      classad_string += m_vm_bridge_interface.c_str();
+      classad_string += "\"\n";
+    }
+  if(classad_string.find(ATTR_JOB_VM_NETWORKING_TYPE) < 1)
+    {
+      classad_string += ATTR_JOB_VM_NETWORKING_TYPE;
+      classad_string += " = \"";
+      classad_string += m_vm_networking_type.Value();
+      classad_string += "\"\n";
+    }
   input_strings.append(classad_string.Value());
   int ret = systemCommand(args, true, &output_strings, &input_strings, &error_strings, false);
   error_strings.rewind();
@@ -786,7 +831,6 @@ bool KVMType::CreateVirshConfigFile(const char * filename)
 {
 	MyString disk_string;
 	char* config_value = NULL;
-	MyString bridge_script;
 
 	if(!filename) return false;
   
@@ -815,23 +859,12 @@ bool KVMType::CreateVirshConfigFile(const char * filename)
 			if( m_vm_networking_type.find("nat") >= 0 ) {
 			m_xml += "<interface type='network'><source network='default'/></interface>";
 			}
-			else
+			else if( m_vm_networking_type.find("bridge") >= 0 )
 			{
-			m_xml += "<interface type='bridge'><source bridge='virbr0'/>";
-			config_value = param( "VM_BRIDGE_SCRIPT" );
-			if( !config_value ) {
-				vmprintf(D_ALWAYS, "VM_BRIDGE_SCRIPT is not defined in the "
-					"vmgahp config file\n");
-			}
-			else
-				{
-				bridge_script = config_value;
-				free(config_value);
-				config_value = NULL;
-				}
-			if (!bridge_script.IsEmpty()) {
-				m_xml += "<script path='";
-				m_xml += bridge_script;
+			m_xml += "<interface type='bridge'>";
+			if (!m_vm_bridge_interface.empty()) {
+				m_xml += "<source bridge='";
+				m_xml += m_vm_bridge_interface.c_str();
 				m_xml += "'/>";
 			}
 			if(!m_vm_job_mac.IsEmpty())
@@ -860,7 +893,6 @@ XenType::CreateVirshConfigFile(const char* filename)
 {
 	MyString disk_string;
 	char* config_value = NULL;
-	MyString bridge_script;
 
 	if( !filename ) return false;
 
@@ -868,28 +900,6 @@ XenType::CreateVirshConfigFile(const char* filename)
 	{
 		vmprintf(D_ALWAYS, "XenType::CreateVirshConfigFile no XML found, generating defaults\n");
 
-		if (!(config_value = param( "XEN_BRIDGE_SCRIPT" )))
-			config_value = param( "VM_BRIDGE_SCRIPT" );
-
-		if( !config_value ) {
-			vmprintf(D_ALWAYS, "XEN_BRIDGE_SCRIPT is not defined in the "
-					"vmgahp config file\n");
-
-				// I'm not so sure this should be required. The problem
-				// with it being missing/wrong is that a job expecting to
-				// have un-nat'd network access might not get it. There's
-				// no way for us to tell if the script given is correct
-				// though, so this error might just be better as a warning
-				// in the log. If this is turned into a warning an EXCEPT
-				// must be removed when 'bridge_script' is used below.
-				//  - matt 17 oct 2007
-				//return false;
-		} else {
-			bridge_script = config_value;
-			free(config_value);
-			config_value = NULL;
-		}
-
 		m_xml += "<domain type='xen'>";
 		m_xml += "<name>";
 		m_xml += m_vm_name;
@@ -934,11 +944,11 @@ XenType::CreateVirshConfigFile(const char* filename)
 		if( m_vm_networking ) {
 			if( m_vm_networking_type.find("nat") >= 0 ) {
 				m_xml += "<interface type='network'><source network='default'/></interface>";
-			} else {
-					m_xml += "<interface type='bridge'>";
-				if (!bridge_script.IsEmpty()) {
-					m_xml += "<script path='";
-					m_xml += bridge_script;
+			} else if( m_vm_networking_type.find("bridge") >= 0 ){
+				m_xml += "<interface type='bridge'>";
+				if (!m_vm_bridge_interface.empty()) {
+					m_xml += "<source bridge='";
+					m_xml += m_vm_bridge_interface.c_str();
 					m_xml += "'/>";
 				}
 				vmprintf(D_FULLDEBUG, "mac address is %s", m_vm_job_mac.Value());
diff --git a/src/condor_vm-gahp/xen_type.h b/src/condor_vm-gahp/xen_type.h
index 4731601..3e2601d 100644
--- a/src/condor_vm-gahp/xen_type.h
+++ b/src/condor_vm-gahp/xen_type.h
@@ -46,6 +46,8 @@ public:
 
 	virtual ~VirshType();
 
+	virtual void Config();
+
 	virtual bool Start();
 
 	virtual bool Shutdown();
@@ -95,6 +97,7 @@ protected:
 	MyString m_xen_root;
 	MyString m_xen_kernel_params;
 	MyString m_xen_bootloader;
+	std::string m_vm_bridge_interface;
 
 	bool m_xen_hw_vt;
 	bool m_allow_hw_vt_suspend;
