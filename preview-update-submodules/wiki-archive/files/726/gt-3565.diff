diff --git a/src/condor_io/stream.cpp b/src/condor_io/stream.cpp
index 3d1325e..7edc972 100644
--- a/src/condor_io/stream.cpp
+++ b/src/condor_io/stream.cpp
@@ -78,11 +78,22 @@ Stream :: Stream(stream_code c) :
 }
 
 int
-Stream::code( void *&)
+Stream::code( void *& p )
 {
-	/* This is a noop just to make stub generation happy. All of the functions
-		that wish to use this overload we don't support or ignore. -psilord */
-	return TRUE;
+	switch(_coding){
+		case stream_encode:
+			return put( (unsigned long &) p);
+		case stream_decode:
+			return get( (unsigned long &) p);
+		case stream_unknown:
+			EXCEPT("ERROR: Stream::code(char &c) has unknown direction!");
+			break;
+		default:
+			EXCEPT("ERROR: Stream::code(char &c)'s _coding is illegal!");
+			break;
+	}
+
+	return FALSE;	/* will never get here	*/
 }
 
 Stream :: ~Stream()
diff --git a/src/condor_syscall_lib/receivers.prologue b/src/condor_syscall_lib/receivers.prologue
index 8d9018a..983ef37 100644
--- a/src/condor_syscall_lib/receivers.prologue
+++ b/src/condor_syscall_lib/receivers.prologue
@@ -248,5 +248,44 @@ do_REMOTE_syscall(StdUnivSock *sock, int process)
 
 		assert( syscall_sock->end_of_message() );;
 		return 0;
-		
-	}
+      }
+#if defined(LINUX)
+	case CONDOR_mmap:
+	  {
+        // Copied from generated code...
+        void *  ret_val;
+        void *  a;
+        size_t   l;
+        int   p;
+        int   f;
+        int   fd;
+        off_t   o;
+        condor_errno_t terrno;
+
+        assert( syscall_sock->code(l) );
+        dprintf( D_SYSCALLS, "  l = %lu\n", l );
+        assert( syscall_sock->code(p) );
+        dprintf( D_SYSCALLS, "  p = %d\n", p );
+        assert( syscall_sock->code(f) );
+        dprintf( D_SYSCALLS, "  f = %d\n", f );
+        assert( syscall_sock->code(fd) );
+        dprintf( D_SYSCALLS, "  fd = %d\n", fd );
+        assert( syscall_sock->code(o) );
+        dprintf( D_SYSCALLS, "  o = %lu\n", o );
+        assert( syscall_sock->end_of_message() );;
+
+        errno = (condor_errno_t)0;
+        ret_val = (void * ) CONDOR_NotSupported( CONDOR_mmap );
+        terrno = (condor_errno_t)errno;
+        dprintf( D_SYSCALLS, "\tret_val = %p, errno = %d\n", ret_val, (int)terrno);
+
+        syscall_sock->encode();
+        assert( syscall_sock->code(ret_val) );
+        // MAP_FAILED != NULL
+        if( ret_val == MAP_FAILED ) {
+            assert( syscall_sock->code(terrno) );
+        }
+        assert( syscall_sock->end_of_message() );;
+        return 0;
+	  }
+#endif // defined( LINUX )
diff --git a/src/condor_syscall_lib/senders.epilogue b/src/condor_syscall_lib/senders.epilogue
index f66ee8e..61ecf1d 100644
--- a/src/condor_syscall_lib/senders.epilogue
+++ b/src/condor_syscall_lib/senders.epilogue
@@ -269,4 +269,46 @@ REMOTE_CONDOR_get_file(char *remote, char *local, int mode)
 	return rval;
 }
 
+// Stolen from the code generator.
+#if defined(LINUX)
+
+#if defined( SYS_mmap )
+void * REMOTE_CONDOR_mmap(void * a, size_t l, int p, int f, int fd, off_t o) {
+    int scm;
+    void *    ret_val;
+    condor_errno_t   terrno;
+    sigset_t    omask;
+
+    scm = SetSyscalls( SYS_LOCAL | SYS_UNMAPPED );
+    omask = _condor_signals_disable();
+    CurrentSysCall = CONDOR_mmap;
+
+    syscall_sock->encode();
+    assert( syscall_sock->code(CurrentSysCall) );
+    assert( syscall_sock->code(l) );
+    assert( syscall_sock->code(p) );
+    assert( syscall_sock->code(f) );
+    assert( syscall_sock->code(fd) );
+    assert( syscall_sock->code(o) );
+    assert( syscall_sock->end_of_message() );
+
+    syscall_sock->decode();
+    assert( syscall_sock->code(ret_val) );
+    if(  ret_val == MAP_FAILED  ) {
+        assert( syscall_sock->code(terrno) );
+        assert( syscall_sock->end_of_message() );
+        _condor_signals_enable( omask );
+        SetSyscalls( scm );
+        errno = (int)terrno;
+        return ret_val;
+    }
+    assert( syscall_sock->end_of_message() );
+    _condor_signals_enable( omask );
+    SetSyscalls( scm );
+    return ret_val;
+}
+#endif // defined( SYS_mmap )
+
+#endif // defined( LINUX )
+
 } /* end of extern "C" from prologue */
diff --git a/src/condor_syscall_lib/switches.special.cpp b/src/condor_syscall_lib/switches.special.cpp
index f7de09d..7399910 100644
--- a/src/condor_syscall_lib/switches.special.cpp
+++ b/src/condor_syscall_lib/switches.special.cpp
@@ -737,6 +737,7 @@ mmap( MMAP_T a, size_t l, int p, int f, int fd, off_t o )
         } else {
                 if( LocalSysCalls() ) {
                         rval = (MMAP_T) MAP_FAILED;
+                        errno = ENOSYS;
                 } else {
                     rval = (MMAP_T) REMOTE_CONDOR_mmap( a, l, p, f, fd, o );
                 }
diff --git a/src/condor_syscall_lib/syscall.tmpl b/src/condor_syscall_lib/syscall.tmpl
index e99e96c..1b4899f 100644
--- a/src/condor_syscall_lib/syscall.tmpl
+++ b/src/condor_syscall_lib/syscall.tmpl
@@ -1438,9 +1438,7 @@ not_supported {
 		int mprotect( const void * addr, size_t len, int prot );
 		int madvise( void * addr, size_t len, int behav );
 #	elif defined(LINUX)
-#		if !defined(SWITCH)
-			void * mmap( void * a, size_t l, int p, int f, map(int fd), off_t o );
-#		endif
+        // Don't define mmap(), since it doesn't return NULL on error.
 		int mprotect( MMAP_T addr, size_t len, int prot );
 #	else
 		char * mmap( char * a, size_t l, int p, int f, map(int fd), off_t o ) : EXTRACT;
