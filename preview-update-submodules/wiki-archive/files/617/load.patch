diff --git a/src/condor_sysapi/load_avg.cpp b/src/condor_sysapi/load_avg.cpp
index f610614..d8dfe1f 100644
--- a/src/condor_sysapi/load_avg.cpp
+++ b/src/condor_sysapi/load_avg.cpp
@@ -295,9 +295,13 @@ static struct {
 } samples[NUM_SAMPLES];
 static int ncpus;
 
+typedef PDH_STATUS (WINAPI *PdhAddCounterPtr)(PDH_HQUERY,LPCSTR,DWORD_PTR,PDH_HCOUNTER*);
+
 static int WINAPI
 sample_load(void *thr_data)
 {
+	HMODULE pdhModule = NULL;
+	PdhAddCounterPtr pdhAddCounterPtr = NULL;
 	HQUERY hQuery = NULL;
 	HCOUNTER hCounterQueueLength, *hCounterCpuLoad;
 	int nextsample = 0, i, exit_status = 0;
@@ -314,33 +318,46 @@ sample_load(void *thr_data)
 	}
 	LeaveCriticalSection(&cs);
 
+	pdhModule = LoadLibrary("pdh.dll");
+
+	if(!pdhModule)
+	{
+		return GetLastError();
+	}
+
+	pdhAddCounterPtr = (PdhAddCounterPtr)GetProcAddress(pdhModule, "PdhAddEnglishCounterA");
+	if(!pdhAddCounterPtr)
+		pdhAddCounterPtr = PdhAddCounter;
+
 	pdhStatus = PdhOpenQuery(NULL, 0, &hQuery);
 	if (pdhStatus != ERROR_SUCCESS) {
 		/* dprintf(D_ALWAYS, "PdhOpenQuery returns 0x%x\n", 
 			    (int)pdhStatus); */
-		return 1;
+		return pdhStatus;
 	}
-	pdhStatus = PdhAddCounter(hQuery, 
+
+	pdhStatus = pdhAddCounterPtr(hQuery, 
 							  "\\System\\Processor Queue Length", 
 							  0, &hCounterQueueLength);
+	
 	if (pdhStatus != ERROR_SUCCESS) {
 		/* dprintf(D_ALWAYS, "PdhAddCounter returns 0x%x\n", 
 						   (int)pdhStatus); */
 		PdhCloseQuery(hQuery);
-		return 2;
+		return pdhStatus;
 	}
 	hCounterCpuLoad = (HCOUNTER *) malloc(sizeof(HCOUNTER)*ncpus);
 	ASSERT( hCounterCpuLoad );
 	for (i=0; i < ncpus; i++) {
 		sprintf(counterpath, "\\Processor(%d)\\%% Processor Time", i);
-		pdhStatus = PdhAddCounter(hQuery, counterpath, 0, 
+		pdhStatus = pdhAddCounterPtr(hQuery, counterpath, 0, 
 								  hCounterCpuLoad+i);
+		
 		if (pdhStatus != ERROR_SUCCESS) {
 			/* dprintf(D_ALWAYS, "PdhAddCounter returns 0x%x\n", 
 							   (int)pdhStatus); */
 			PdhCloseQuery(hQuery);
-			free(hCounterCpuLoad);
-			return 3;
+			return pdhStatus;
 		}
 	}
 
@@ -399,7 +416,6 @@ sample_load(void *thr_data)
 		nextsample %= NUM_SAMPLES;
 
 		Sleep(SAMPLE_INTERVAL);
-
 	}
 
 	// we encountered a problem, so clean up everything and exit.
