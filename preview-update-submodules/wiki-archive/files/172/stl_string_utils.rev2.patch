diff --git a/src/condor_c++_util/Imakefile b/src/condor_c++_util/Imakefile
index d7fd027..df43fec 100644
--- a/src/condor_c++_util/Imakefile
+++ b/src/condor_c++_util/Imakefile
@@ -227,6 +227,7 @@ OBJ = state_machine_driver.o event_handler.o name_tab.o selector.o \
 	metric_units.o condor_ver_info.o \
 	condor_md.o \
 	proc_id.o HashTable.o MyString.o \
+        stl_string_utils.o \
 	KeyCache.o dc_stub.o which.o iso_dates.o java_config.o \
 	Regex.o my_distribution.o error_utils.o $(DH_OBJ) $(BASE64_OBJ) \
 	translation_utils.o command_strings.o enum_utils.o \
@@ -278,6 +279,7 @@ c_plus_target(test_user_job_policy,test_user_job_policy.o,$(LIB))
 c_plus_target(test_classad_support,test_classad_support.o,$(LIB))
 c_plus_target(test_classad_merge,test_classad_merge.o,$(LIB))
 c_plus_target(test_mystring,test_mystring.o,$(LIB))
+c_plus_target(test_stl_string_utils,test_stl_string_utils.o,$(LIB))
 c_plus_target(test_condor_arglist,test_condor_arglist.o,$(LIB))
 c_plus_target(test_condor_crontab,test_condor_crontab.o,$(LIB))
 c_plus_target(test_spawn,test_spawn.o,$(LIB))
diff --git a/src/condor_c++_util/MyString.cpp b/src/condor_c++_util/MyString.cpp
index 96c79a1..fe86b55 100644
--- a/src/condor_c++_util/MyString.cpp
+++ b/src/condor_c++_util/MyString.cpp
@@ -56,6 +56,12 @@ MyString::MyString(const MyString& S)
     *this=S; // = operator is overloaded!
 }
 
+MyString::MyString(const std::string& S)
+{
+    init();
+    *this = S.c_str();
+}
+
 MyString::~MyString() 
 {
     if (Data) {
@@ -65,6 +71,13 @@ MyString::~MyString()
 	init(); // for safety -- errors if you try to re-use this object
 }
 
+
+MyString::operator std::string()
+{
+    std::string r = this->Value();
+    return r;
+}
+
 /*--------------------------------------------------------------------
  *
  * Accessors. (More accessors in MyString.h)
diff --git a/src/condor_c++_util/MyString.h b/src/condor_c++_util/MyString.h
index f57bf6d..bd98c10 100644
--- a/src/condor_c++_util/MyString.h
+++ b/src/condor_c++_util/MyString.h
@@ -24,6 +24,7 @@
 #include "condor_header_features.h"
 #include <string.h>
 #include <stdarg.h>
+#include <string>
 
 /** The MyString class is a C++ representation of a string. It was
  * written before we could reliably use the standard string class.
@@ -59,10 +60,16 @@ class MyString
 	/** Copy constructor */
 	MyString(const MyString& S);
 
+    /** Casting constructor from std::string */
+    MyString(const std::string& S);
+
 	/** Destructor */
 	~MyString();
     //@}
 
+    /** Casting operator to std::string */
+    operator std::string();
+
 	// ----------------------------------------
 	//               Accessors
 	// ----------------------------------------
diff --git a/src/condor_c++_util/stl_string_utils.cpp b/src/condor_c++_util/stl_string_utils.cpp
new file mode 100644
index 0000000..085b5c6
--- /dev/null
+++ b/src/condor_c++_util/stl_string_utils.cpp
@@ -0,0 +1,114 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+#include "condor_common.h" 
+#include "condor_snutils.h"
+#include "condor_debug.h"
+
+#include "stl_string_utils.h"
+
+void assign(std::string& dst, const MyString& src) {
+    dst = src.Value();
+}
+void assign(MyString& dst, const std::string& src) {
+    dst = src.c_str();
+}
+
+bool operator==(const MyString& L, const std::string& R) { return R == L.Value(); }
+bool operator==(const std::string& L, const MyString& R) { return L == R.Value(); }
+bool operator!=(const MyString& L, const std::string& R) { return R != L.Value(); }
+bool operator!=(const std::string& L, const MyString& R) { return L != R.Value(); }
+bool operator<(const MyString& L, const std::string& R) { return R > L.Value(); }
+bool operator<(const std::string& L, const MyString& R) { return L < R.Value(); }
+bool operator>(const MyString& L, const std::string& R) { return R < L.Value(); }
+bool operator>(const std::string& L, const MyString& R) { return L > R.Value(); }
+bool operator<=(const MyString& L, const std::string& R) { return R >= L.Value(); }
+bool operator<=(const std::string& L, const MyString& R) { return L <= R.Value(); }
+bool operator>=(const MyString& L, const std::string& R) { return R <= L.Value(); }
+bool operator>=(const std::string& L, const MyString& R) { return L >= R.Value(); }
+
+
+int sprintf(std::string& s, const char* format, va_list pargs) {
+    char fixbuf[STL_STRING_UTILS_FIXBUF];
+    const int fixlen = sizeof(fixbuf)/sizeof(fixbuf[0]);
+	int n;
+	va_list  args;
+
+    // Attempt to write to fixed buffer.  condor_snutils.{h,cpp}
+    // provides an implementation of vsnprintf() in windows, so this
+    // logic works cross platform 
+	va_copy(args, pargs);
+	n = vsnprintf(fixbuf, fixlen, format, args);
+	va_end(args);
+
+    // In this case, fixed buffer was sufficient so we're done.
+    // Return number of chars written.
+    if (n < fixlen) {
+        s = fixbuf;
+        return n;
+    }
+
+    // Otherwise, the fixed buffer was not large enough, but return from 
+    // vsnprintf() tells us how much memory we need now.
+    n += 1;
+    char* varbuf = NULL;
+    // Handle 'new' behavior mode of returning NULL or throwing exception
+    try {
+        varbuf = new char[n];
+    } catch (...) {
+        varbuf = NULL;
+    }
+    if (NULL == varbuf) EXCEPT("Failed to allocate char buffer of %d chars", n);
+
+    // re-print, using buffer of sufficient size
+	va_copy(args, pargs);
+	int nn = vsnprintf(varbuf, n, format, args);
+	va_end(args);
+
+    // Sanity check.  This ought not to happen.  Ever.
+    if (nn >= n) EXCEPT("Insufficient buffer size (%d) for printing %d chars", n, nn);
+
+    // safe to do string assignment
+    s = varbuf;
+
+    // clean up our allocated buffer
+    delete[] varbuf;
+
+    // return number of chars written
+    return nn;
+}
+
+int sprintf(std::string& s, const char* format, ...) {
+    va_list args;
+    va_start(args, format);
+    int r = sprintf(s, format, args);
+    va_end(args);
+    return r;
+}
+
+int sprintf(MyString& s, const char* format, ...) {
+    va_list args;
+    std::string t;
+    va_start(args, format);
+    // this gets me the sprintf-standard return value (# chars printed)
+    int r = sprintf(t, format, args);
+    va_end(args);
+    assign(s, t);
+    return r;
+}
diff --git a/src/condor_c++_util/stl_string_utils.h b/src/condor_c++_util/stl_string_utils.h
new file mode 100644
index 0000000..944f7e4
--- /dev/null
+++ b/src/condor_c++_util/stl_string_utils.h
@@ -0,0 +1,57 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+#ifndef _stl_string_utils_h_
+#define _stl_string_utils_h_ 1
+
+#include <string>
+#include "condor_header_features.h"
+#include "MyString.h"
+
+// sprintf() will try to write to a fixed buffer first, for reasons of 
+// efficiency.  This is the size of that buffer.
+#define STL_STRING_UTILS_FIXBUF 500
+
+// Analogous to standard sprintf(), but writes to std::string 's', and is
+// memory/buffer safe
+int sprintf(std::string& s, const char* format, ...) CHECK_PRINTF_FORMAT(2,3);
+int sprintf(MyString& s, const char* format, ...) CHECK_PRINTF_FORMAT(2,3);
+
+// comparison ops between the two houses divided
+bool operator==(const MyString& L, const std::string& R);
+bool operator==(const std::string& L, const MyString& R);
+bool operator!=(const MyString& L, const std::string& R);
+bool operator!=(const std::string& L, const MyString& R);
+bool operator<(const MyString& L, const std::string& R);
+bool operator<(const std::string& L, const MyString& R);
+bool operator>(const MyString& L, const std::string& R);
+bool operator>(const std::string& L, const MyString& R);
+bool operator<=(const MyString& L, const std::string& R);
+bool operator<=(const std::string& L, const MyString& R);
+bool operator>=(const MyString& L, const std::string& R);
+bool operator>=(const std::string& L, const MyString& R);
+
+// MyString now provides casting ops that make these unnecessary.
+// Can now use '=' between MyString <--> std::string
+// The below assignment std::string <-- MyString will be more 
+// efficient, due to some copying in the casting op, if that matters.
+void assign(std::string& dst, const MyString& src);
+void assign(MyString& dst, const std::string& src);
+
+#endif // _stl_string_utils_h_
diff --git a/src/condor_c++_util/test_stl_string_utils.cpp b/src/condor_c++_util/test_stl_string_utils.cpp
new file mode 100644
index 0000000..2cc2313
--- /dev/null
+++ b/src/condor_c++_util/test_stl_string_utils.cpp
@@ -0,0 +1,376 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+
+#include "condor_common.h"
+#include "stl_string_utils.h"
+
+int main (int argc, char **argv)
+{
+	int nfailed = 0;
+    int nchars = 0;
+    int rchars = 0;
+    std::string tdst;
+    std::string tsrc;
+
+
+    // test sprintf for std::string and MyString
+    nchars = STL_STRING_UTILS_FIXBUF / 2;
+    tsrc="";
+    for (int j = 0;  j < nchars;  ++j) tsrc += char('0' + (j % 10));
+    rchars = sprintf(tdst, "%s", tsrc.c_str());
+    if (tdst == tsrc) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if (rchars == nchars) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF-1;
+    tsrc="";
+    for (int j = 0;  j < nchars;  ++j) tsrc += char('0' + (j % 10));
+    rchars = sprintf(tdst, "%s", tsrc.c_str());
+    if (tdst == tsrc) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if (rchars == nchars) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF;
+    tsrc="";
+    for (int j = 0;  j < nchars;  ++j) tsrc += char('0' + (j % 10));
+    rchars = sprintf(tdst, "%s", tsrc.c_str());
+    if (tdst == tsrc) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if (rchars == nchars) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF+1;
+    tsrc="";
+    for (int j = 0;  j < nchars;  ++j) tsrc += char('0' + (j % 10));
+    rchars = sprintf(tdst, "%s", tsrc.c_str());
+    if (tdst == tsrc) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if (rchars == nchars) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF * 2;
+    tsrc="";
+    for (int j = 0;  j < nchars;  ++j) tsrc += char('0' + (j % 10));
+    rchars = sprintf(tdst, "%s", tsrc.c_str());
+    if (tdst == tsrc) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if (rchars == nchars) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+
+    MyString tsrc2;
+    MyString tdst2;
+    nchars = STL_STRING_UTILS_FIXBUF-1;
+    tsrc2="";
+    for (int j = 0;  j < nchars;  ++j) tsrc2 += char('0' + (j % 10));
+    rchars = sprintf(tdst2, "%s", tsrc2.Value());
+    if (tdst2 == tsrc2) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if (rchars == nchars) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF;
+    tsrc2="";
+    for (int j = 0;  j < nchars;  ++j) tsrc2 += char('0' + (j % 10));
+    rchars = sprintf(tdst2, "%s", tsrc2.Value());
+    if (tdst2 == tsrc2) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if (rchars == nchars) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF+1;
+    tsrc2="";
+    for (int j = 0;  j < nchars;  ++j) tsrc2 += char('0' + (j % 10));
+    rchars = sprintf(tdst2, "%s", tsrc2.Value());
+    if (tdst2 == tsrc2) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if (rchars == nchars) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+
+    // test assignment functions
+    tsrc = "foo";
+    assign(tdst2, tsrc);
+    if (tdst2 == "foo") {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+
+    tsrc2 = "foo";
+    assign(tdst, tsrc2);
+    if (tdst == "foo") {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    // test casting ops provided via MyString
+    MyString str1 = "foo";
+    std::string str2;
+    str2 = str1;
+    if (str2 == str1.Value()) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    str2 = "bar";
+    str1 = str2;
+    if (str1 == str2.c_str()) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+
+    // test comparison ops between MyString and std::string (both directions, etc)
+    str1 = "a";
+    str2 = "a";
+    if ((str1 == str2) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 != str2) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 < str2) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 > str2) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 <= str2) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 >= str2) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    if ((str2 == str1) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 != str1) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 < str1) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 > str1) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 <= str1) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 >= str1) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    str1 = "a";
+    str2 = "b";
+    if ((str1 == str2) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 != str2) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 < str2) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 > str2) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 <= str2) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str1 >= str2) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+    if ((str2 == str1) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 != str1) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 < str1) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 > str1) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 <= str1) == false) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+    if ((str2 >= str1) == true) {
+        printf("OK, equal in line %d.\n", __LINE__);
+    } else {
+        printf("FAILED: not equal in line %d.\n", __LINE__);
+        nfailed += 1;
+    }
+
+
+    // ---- Final summary.
+	printf("\n");
+	if (0 == nfailed) {
+	    printf("All tests OK!\n");
+	} else {
+	    printf("%d tests FAILED!\n", nfailed);
+	}
+}
