diff --git a/src/condor_schedd.V6/autocluster.cpp b/src/condor_schedd.V6/autocluster.cpp
index bcce300..347279d 100644
--- a/src/condor_schedd.V6/autocluster.cpp
+++ b/src/condor_schedd.V6/autocluster.cpp
@@ -140,7 +140,7 @@ bool JobCluster::setSigAttrs(const char* new_sig_attrs, bool free_input_attrs, b
 
 #ifdef USE_AUTOCLUSTER_TO_JOBID_MAP
 
-JobCluster::JobIdSetMap::iterator JobCluster::find(const JOB_ID_KEY & jid) // get current cluster id for a given job
+JobCluster::JobIdSetMap::iterator JobCluster::brute_force_find(const JOB_ID_KEY & jid) // get current cluster id for a given job
 {
 	// scan the cluster id to job map, and return when we find a match on job id.
 	JobIdSetMap::iterator it;
@@ -152,6 +152,16 @@ JobCluster::JobIdSetMap::iterator JobCluster::find(const JOB_ID_KEY & jid) // ge
 	return it;
 }
 
+JobCluster::JobIdSetMap::iterator JobCluster::find(JobQueueJob & job) {
+	// use the job's cluster_id attribute to quickly find the old cluster id.
+	JobIdSetMap::iterator it = cluster_use.find(job.autocluster_id);
+	if (it != cluster_use.end() && it->second.contains(job.jid)) {
+		return it;
+	}
+	return cluster_use.end();
+}
+
+
 // free up unused autoclusters, if brute_force flags is used, then all autoclusters are checked to
 // see if they refer to any jobs that are still in the queue before deleting. otherwise only
 // autoclusters that have been added to the cluster_gone list are removed.
@@ -194,11 +204,31 @@ void JobCluster::collect_garbage(bool brute_force) // free the deleted clusters
 #endif
 
 extern int    last_autocluster_classad_cache_hit;
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+extern int    dont_keep_autocluster_job_ids;
+extern double last_autoclusterA_runtime;
+extern double last_autoclusterB_runtime;
+extern double last_autoclusterC_runtime;
+extern double last_autoclusterD_runtime;
+extern double last_autoclusterE_runtime;
+extern double last_autoclusterF_runtime;
+extern double last_autoclusterG_runtime;
+extern double last_autoclusterH_runtime;
+extern double last_autoclusterI_runtime;
+static double last_runtime_tick;
+#define AUTOCLUSTER_TIMING_TICK(var) var = rt.tick(last_runtime_tick);
+#else
+#define AUTOCLUSTER_TIMING_TICK(aa)
+#endif
 
 int JobCluster::getClusterid(JobQueueJob & job, bool expand_refs, std::string * final_list)
 {
 	int cur_id = -1;
 
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+	_condor_runtime rt; rt.begin = last_runtime_tick;
+#endif
+
 	// we want to summarize job into a string "signature"
 	// the signature will consist of "key1=val1\nkey2=val2\n"
 	// for each of the keys in the significant_attrs list and (if expand_refs is true)
@@ -223,6 +253,8 @@ int JobCluster::getClusterid(JobQueueJob & job, bool expand_refs, std::string *
 		}
 	}
 
+	AUTOCLUSTER_TIMING_TICK(last_autoclusterA_runtime)
+
 	// if there are expanded refs, walk the expanded attribs list and fetch values for any
 	// that have not already been fetched.
 	if (expand_refs) {
@@ -242,6 +274,8 @@ int JobCluster::getClusterid(JobQueueJob & job, bool expand_refs, std::string *
 		}
 	}
 
+	AUTOCLUSTER_TIMING_TICK(last_autoclusterB_runtime)
+
 	// sigset now contains the values of all the attributes we need,
 	// significant attibutes are first, followed by expanded attributes
 	// we build a signature essentially by printing it all out in one big string
@@ -270,6 +304,8 @@ int JobCluster::getClusterid(JobQueueJob & job, bool expand_refs, std::string *
 		++ix;
 	}
 
+	AUTOCLUSTER_TIMING_TICK(last_autoclusterC_runtime)
+
 	// now put out the expanded attribs (if any)
 	for (classad::References::iterator it = exattrs.begin(); it != exattrs.end(); ++it) {
 		ExprTree * tree = sigset[ix];
@@ -285,6 +321,8 @@ int JobCluster::getClusterid(JobQueueJob & job, bool expand_refs, std::string *
 		++ix;
 	}
 
+	AUTOCLUSTER_TIMING_TICK(last_autoclusterD_runtime)
+
 	// now check the signature against the current cluster map
 	// and either return the matching cluster id, or a new cluster id.
 	JobSigidMap::iterator it;
@@ -297,10 +335,12 @@ int JobCluster::getClusterid(JobQueueJob & job, bool expand_refs, std::string *
 		cluster_map.insert(JobSigidMap::value_type(signature,cur_id));
 	}
 
+	AUTOCLUSTER_TIMING_TICK(last_autoclusterE_runtime)
+
 #ifdef USE_AUTOCLUSTER_TO_JOBID_MAP
 	if (keep_job_ids) {
 		if (true) {
-			JobIdSetMap::iterator jit = find(job.jid);
+			JobIdSetMap::iterator jit = find(job);
 			if (jit != cluster_use.end()) {
 				int old_id = jit->first;
 				if (old_id == cur_id) {
@@ -314,6 +354,8 @@ int JobCluster::getClusterid(JobQueueJob & job, bool expand_refs, std::string *
 				cluster_use[cur_id].insert(job.jid);
 			}
 		}
+
+		AUTOCLUSTER_TIMING_TICK(last_autoclusterF_runtime)
 	}
 #endif
 	return cur_id;
@@ -328,6 +370,9 @@ AutoCluster::AutoCluster()
 {
 #ifdef USE_AUTOCLUSTER_TO_JOBID_MAP
 	this->keep_job_ids = true;
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+	this->keep_job_ids = this->keep_job_ids && ! dont_keep_autocluster_job_ids;
+#endif
 #endif
 }
 
@@ -514,7 +559,6 @@ int AutoCluster::getAutoClusterid(JobQueueJob *job)
 	last_autocluster_make_sig = false;
 	last_autocluster_type |= 2;
 
-
 	job->LookupInteger(ATTR_AUTO_CLUSTER_ID, cur_id);
 	if (cur_id != -1)  {
 			// we've previously figured it out...
@@ -524,6 +568,9 @@ int AutoCluster::getAutoClusterid(JobQueueJob *job)
 		return cur_id;
 	}
 
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+	last_runtime_tick = rt.begin;
+#endif
 	last_autocluster_make_sig = true;
 
 	cur_id = this->getClusterid(*job, true, &final_list);
@@ -533,9 +580,13 @@ int AutoCluster::getAutoClusterid(JobQueueJob *job)
 		EXCEPT("Auto cluster IDs exhausted! (allocated %d)",cur_id);
 	}
 
-		// mark as in-use for the mark/sweep code
+	AUTOCLUSTER_TIMING_TICK(last_autoclusterG_runtime)
+
+	// mark as in-use for the mark/sweep code
 	cluster_in_use.insert(cur_id);
 
+	AUTOCLUSTER_TIMING_TICK(last_autoclusterH_runtime)
+
 		// put the new auto cluster id into the job ad to cache it.
 	job->Assign(ATTR_AUTO_CLUSTER_ID,cur_id);
 	job->autocluster_id = cur_id;
@@ -548,6 +599,7 @@ int AutoCluster::getAutoClusterid(JobQueueJob *job)
 		// the signature needs to be recomputed as it may have changed.
 	job->Assign(ATTR_AUTO_CLUSTER_ATTRS, final_list);
 
+	AUTOCLUSTER_TIMING_TICK(last_autoclusterI_runtime)
 	return cur_id;
 }
 
diff --git a/src/condor_schedd.V6/autocluster.h b/src/condor_schedd.V6/autocluster.h
index 99f3873..e4c2f98 100644
--- a/src/condor_schedd.V6/autocluster.h
+++ b/src/condor_schedd.V6/autocluster.h
@@ -55,7 +55,8 @@ protected:
 	typedef std::map<int, JobIdSet> JobIdSetMap;
 	JobIdSetMap cluster_use; // map clusterId to a set of jobIds
 	std::set<int> cluster_gone; // holds the set of deleted clusters until the next garbage collect pass
-	JobIdSetMap::iterator find(const JOB_ID_KEY & jid); // get current cluster id for a given job
+	JobIdSetMap::iterator brute_force_find(const JOB_ID_KEY & jid); // get current cluster id for a given job
+	JobIdSetMap::iterator find(JobQueueJob & job);
 #endif
 	int next_id;
 	const char *significant_attrs;
diff --git a/src/condor_schedd.V6/qmgmt.cpp b/src/condor_schedd.V6/qmgmt.cpp
index d82d5c5..6aa810f 100644
--- a/src/condor_schedd.V6/qmgmt.cpp
+++ b/src/condor_schedd.V6/qmgmt.cpp
@@ -224,6 +224,9 @@ static void HandleFlushJobQueueLogTimer();
 static int dirty_notice_interval = 0;
 static void PeriodicDirtyAttributeNotification();
 static void ScheduleJobQueueLogFlush();
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+int    dont_keep_autocluster_job_ids = 0;
+#endif
 
 bool qmgmt_all_users_trusted = false;
 static char	**super_users = NULL;
@@ -739,6 +742,9 @@ InitQmgmt()
 
 	flush_job_queue_log_delay = param_integer("SCHEDD_JOB_QUEUE_LOG_FLUSH_DELAY",5,0);
 	dirty_notice_interval = param_integer("SCHEDD_JOB_QUEUE_NOTIFY_UPDATES",30,0);
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+	dont_keep_autocluster_job_ids = param_boolean("DONT_KEEP_AUTOCLUSTER_JOB_IDS", dont_keep_autocluster_job_ids!=0);
+#endif
 }
 
 void
@@ -4875,6 +4881,27 @@ schedd_runtime_probe GetAutoCluster_hit_runtime;
 schedd_runtime_probe GetAutoCluster_signature_runtime;
 schedd_runtime_probe GetAutoCluster_cchit_runtime;
 double last_autocluster_runtime;
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+schedd_runtime_probe GetAutoCluster_signatureA_runtime;
+schedd_runtime_probe GetAutoCluster_signatureB_runtime;
+schedd_runtime_probe GetAutoCluster_signatureC_runtime;
+schedd_runtime_probe GetAutoCluster_signatureD_runtime;
+schedd_runtime_probe GetAutoCluster_signatureE_runtime;
+schedd_runtime_probe GetAutoCluster_signatureF_runtime;
+schedd_runtime_probe GetAutoCluster_signatureG_runtime;
+schedd_runtime_probe GetAutoCluster_signatureH_runtime;
+schedd_runtime_probe GetAutoCluster_signatureI_runtime;
+double last_autoclusterA_runtime;
+double last_autoclusterB_runtime;
+double last_autoclusterC_runtime;
+double last_autoclusterD_runtime;
+double last_autoclusterE_runtime;
+double last_autoclusterF_runtime;
+double last_autoclusterG_runtime;
+double last_autoclusterH_runtime;
+double last_autoclusterI_runtime;
+double log_autocluster_if_time_exceeds = 10.0;
+#endif
 bool   last_autocluster_make_sig;
 int    last_autocluster_type=0;
 int    last_autocluster_classad_cache_hit=0;
@@ -4911,6 +4938,17 @@ int get_job_prio(JobQueueJob *job, const JOB_ID_KEY & jid, void *)
 		// to ASSERT later on in the autocluster code. 
 		// Quesitons?  Ask Todd <tannenba@cs.wisc.edu> 01/04
 	last_autocluster_runtime = 0;
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+	last_autoclusterA_runtime = 0;
+	last_autoclusterB_runtime = 0;
+	last_autoclusterC_runtime = 0;
+	last_autoclusterD_runtime = 0;
+	last_autoclusterE_runtime = 0;
+	last_autoclusterF_runtime = 0;
+	last_autoclusterG_runtime = 0;
+	last_autoclusterH_runtime = 0;
+	last_autoclusterI_runtime = 0;
+#endif
 	last_autocluster_classad_cache_hit = 1;
 	last_autocluster_make_sig = false;
 
@@ -4918,14 +4956,28 @@ int get_job_prio(JobQueueJob *job, const JOB_ID_KEY & jid, void *)
 	job->autocluster_id = auto_id;
 
 	GetAutoCluster_runtime += last_autocluster_runtime;
-	if (last_autocluster_make_sig) { GetAutoCluster_signature_runtime += last_autocluster_runtime; }
-	else { GetAutoCluster_hit_runtime += last_autocluster_runtime; }
-	SCGetAutoClusterType = last_autocluster_type;
-	GetAutoCluster_cchit_runtime += last_autocluster_classad_cache_hit;
-
-	GetAutoCluster_runtime += last_autocluster_runtime;
-	if (last_autocluster_make_sig) { GetAutoCluster_signature_runtime += last_autocluster_runtime; }
-	else { GetAutoCluster_hit_runtime += last_autocluster_runtime; }
+	if (last_autocluster_make_sig) {
+		GetAutoCluster_signature_runtime += last_autocluster_runtime;
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+		GetAutoCluster_signatureA_runtime += last_autoclusterA_runtime;
+		GetAutoCluster_signatureB_runtime += last_autoclusterB_runtime;
+		GetAutoCluster_signatureC_runtime += last_autoclusterC_runtime;
+		GetAutoCluster_signatureD_runtime += last_autoclusterD_runtime;
+		GetAutoCluster_signatureE_runtime += last_autoclusterE_runtime;
+		GetAutoCluster_signatureF_runtime += last_autoclusterF_runtime;
+		GetAutoCluster_signatureG_runtime += last_autoclusterG_runtime;
+		GetAutoCluster_signatureH_runtime += last_autoclusterG_runtime;
+		GetAutoCluster_signatureI_runtime += last_autoclusterG_runtime;
+		if (last_autocluster_runtime > log_autocluster_if_time_exceeds) {
+			dprintf(D_ALWAYS, "Warning! Autocluster %d for job %d.%d took %.3f sec to compute. A=%.3f B=%.3f C=%.3f D=%.3f E=%.3f F=%.3f G=%.3f H=%.3f I=%.3f\n",
+				auto_id, job->jid.cluster, job->jid.proc, last_autocluster_runtime,
+				last_autoclusterA_runtime, last_autoclusterB_runtime, last_autoclusterC_runtime, last_autoclusterD_runtime,
+				last_autoclusterE_runtime, last_autoclusterF_runtime, last_autoclusterG_runtime, last_autoclusterH_runtime,
+				last_autoclusterI_runtime
+				);
+		}
+#endif
+	} else { GetAutoCluster_hit_runtime += last_autocluster_runtime; }
 	SCGetAutoClusterType = last_autocluster_type;
 	GetAutoCluster_cchit_runtime += last_autocluster_classad_cache_hit;
 
@@ -5307,6 +5359,11 @@ static void DoBuildPrioRecArray() {
 	scheduler.autocluster.mark();
 	BuildPrioRec_mark_runtime += rt.tick(now);
 
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+	log_autocluster_if_time_exceeds = param_double("LOG_AUTOCLUSTER_IF_TIME_EXCEEDS", 10);
+	dprintf(D_ALWAYS, "DoBuildPrioRecArray time-limit=%.4f dont-keep-ids=%d\n", log_autocluster_if_time_exceeds, dont_keep_autocluster_job_ids);
+#endif
+
 	N_PrioRecs = 0;
 	WalkJobQueue(get_job_prio);
 	BuildPrioRec_walk_runtime += rt.tick(now);
diff --git a/src/condor_schedd.V6/schedd_stats.cpp b/src/condor_schedd.V6/schedd_stats.cpp
index 0658d01..12bb8fe 100644
--- a/src/condor_schedd.V6/schedd_stats.cpp
+++ b/src/condor_schedd.V6/schedd_stats.cpp
@@ -205,10 +205,10 @@ void ScheddStatistics::InitMain()
    // SCHEDD runtime stats for various expensive processes
    //
    SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, BuildPrioRec,       IF_VERBOSEPUB);
-   //SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, BuildPrioRec_mark,  IF_VERBOSEPUB);
-   //SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, BuildPrioRec_walk,  IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, BuildPrioRec_mark,  IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, BuildPrioRec_walk,  IF_VERBOSEPUB);
    SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, BuildPrioRec_sort,  IF_VERBOSEPUB);
-   //SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, BuildPrioRec_sweep, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, BuildPrioRec_sweep, IF_VERBOSEPUB);
 
    SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, WalkJobQ, IF_VERBOSEPUB);
    SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, WalkJobQ_check_for_spool_zombies, IF_VERBOSEPUB);
@@ -225,6 +225,17 @@ void ScheddStatistics::InitMain()
    SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster,           IF_VERBOSEPUB);
    SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_hit,       IF_VERBOSEPUB);
    SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signature, IF_VERBOSEPUB);
+#ifdef ENABLE_DETAILED_AUTOCLUSTER_TIMINGS
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureA, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureB, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureC, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureD, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureE, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureF, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureG, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureH, IF_VERBOSEPUB);
+   SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_signatureI, IF_VERBOSEPUB);
+#endif
    SCHEDD_STATS_ADD_EXTERN_RUNTIME(Pool, GetAutoCluster_cchit,     IF_VERBOSEPUB);
    extern stats_entry_abs<int> SCGetAutoClusterType;
    SCHEDD_STATS_ADD_VAL(Pool, SCGetAutoClusterType, IF_VERBOSEPUB);
diff --git a/src/condor_schedd.V6/schedd_stats.h b/src/condor_schedd.V6/schedd_stats.h
index a93a075..7f662f8 100644
--- a/src/condor_schedd.V6/schedd_stats.h
+++ b/src/condor_schedd.V6/schedd_stats.h
@@ -210,5 +210,6 @@ private:
 };
 
 class schedd_runtime_probe : public stats_entry_probe<double> {};
+#define ENABLE_DETAILED_AUTOCLUSTER_TIMINGS 1
 
 #endif /* _SCHEDD_STATS_H */
