diff --git a/src/condor_examples/condor_config.generic b/src/condor_examples/condor_config.generic
index 041f44e..3db4183 100644
--- a/src/condor_examples/condor_config.generic
+++ b/src/condor_examples/condor_config.generic
@@ -2362,9 +2362,6 @@ VMWARE_NETWORKING_TYPE = nat
 ##  VM Universe Parameters common to libvirt controlled vm's (xen & kvm)
 ##--------------------------------------------------------------------
 
-##  Where is the Condor script program to control Xen & KVM? (Required)
-VM_SCRIPT = $(SBIN)/condor_vm_xen.sh
-
 ## Networking parameters for Xen & KVM
 ##
 ## This is the path to the XML helper command; the libvirt_simple_script.awk
diff --git a/src/condor_includes/condor_vm_universe_types.h b/src/condor_includes/condor_vm_universe_types.h
index a67d6b6..49b25a6 100644
--- a/src/condor_includes/condor_vm_universe_types.h
+++ b/src/condor_includes/condor_vm_universe_types.h
@@ -50,21 +50,16 @@
 #define XEN_KERNEL_INCLUDED		"included"
 #define XEN_KERNEL_HW_VT		"vmx"
 
+/* ClassAd Attributes for KVM && Xen */
+#define VMPARAM_VM_DISK         "VMPARAM_vm_Disk"
+
 /* ClassAd Attributes for Xen */
 #define VMPARAM_XEN_KERNEL			"VMPARAM_Xen_Kernel"
 #define VMPARAM_XEN_INITRD			"VMPARAM_Xen_Initrd"
 #define VMPARAM_XEN_ROOT			"VMPARAM_Xen_Root"
-#define VMPARAM_XEN_DISK			"VMPARAM_Xen_Disk"
 #define VMPARAM_XEN_KERNEL_PARAMS	"VMPARAM_Xen_Kernel_Params"
-#define VMPARAM_XEN_CDROM_DEVICE	"VMPARAM_Xen_CDROM_Device"
-#define VMPARAM_XEN_TRANSFER_FILES	"VMPARAM_Xen_Transfer_Files"
 #define VMPARAM_XEN_BOOTLOADER		"VMPARAM_Xen_Bootloader"
 
-/* ClassAd Attributes for KVM */
-#define VMPARAM_KVM_DISK			"VMPARAM_Kvm_Disk"
-#define VMPARAM_KVM_CDROM_DEVICE	"VMPARAM_Kvm_CDROM_Device"
-#define VMPARAM_KVM_TRANSFER_FILES	"VMPARAM_Kvm_Transfer_Files"
-
 /* ClassAd Attributes for VMware */
 #define VMPARAM_VMWARE_TRANSFER		"VMPARAM_VMware_Transfer"
 #define VMPARAM_VMWARE_SNAPSHOTDISK "VMPARAM_VMware_SnapshotDisk"
@@ -74,9 +69,7 @@
 
 /* Extra ClassAd Attributes for VM */
 #define VMPARAM_NO_OUTPUT_VM			"VMPARAM_No_Output_VM"
-#define VMPARAM_CDROM_FILES				"VMPARAM_CDROM_Files"
-#define VMPARAM_TRANSFER_CDROM_FILES	"VMPARAM_Transfer_CDROM_Files"
-#define VMPARAM_BRIDGE_INTERFACE	"VMPARAM_Bridge_Interface"
+#define VMPARAM_BRIDGE_INTERFACE        "VMPARAM_Bridge_Interface"
 
 #endif
 
diff --git a/src/condor_submit.V6/submit.cpp b/src/condor_submit.V6/submit.cpp
index 4a19918..d6c96cb 100644
--- a/src/condor_submit.V6/submit.cpp
+++ b/src/condor_submit.V6/submit.cpp
@@ -7078,8 +7078,7 @@ bool parse_vm_option(char *value, bool& onoff)
 
 // If a file is in transfer_input_files, the file will have just basename.
 // Otherwise, it will have full path. To get full path, iwd is used.
-bool 
-make_vm_file_path(const char *filename, MyString& fixedname)
+bool make_vm_file_path(const char *filename, MyString& fixedname)
 {
 	if( filename == NULL ) {
 		return false;
@@ -7089,13 +7088,11 @@ make_vm_file_path(const char *filename, MyString& fixedname)
 
 	MyString transfer_input_files;
 	// check whether the file will be transferred
-	if( job->LookupString(ATTR_TRANSFER_INPUT_FILES,transfer_input_files) 
-				== 1 ) {
+	if( job->LookupString(ATTR_TRANSFER_INPUT_FILES,transfer_input_files) == 1 ) {
 		StringList transfer_file_list(NULL, ",");
 		transfer_file_list.initializeFromString(transfer_input_files.Value() );
 
-		if( filelist_contains_file(fixedname.Value(), 
-					&transfer_file_list, true) ) {
+		if( filelist_contains_file(fixedname.Value(), &transfer_file_list, true) ) {
 			// this file is already in transfer_input_files
 			// filename should have only basename
 			fixedname = condor_basename(fixedname.Value());
@@ -7143,7 +7140,8 @@ validate_xen_disk_parm(const char *xen_disk, MyString &fixed_disk)
 
 		// found disk file
 		StringList single_disk_file(one_disk, ":");
-		if( single_disk_file.number() != 3 ) {
+        int iNumDiskParams = single_disk_file.number();
+		if( iNumDiskParams < 3 || iNumDiskParams > 4 ) {
 			return false;
 		}
 
@@ -7153,8 +7151,7 @@ validate_xen_disk_parm(const char *xen_disk, MyString &fixed_disk)
 		filename.trim();
 
 		MyString fixedname;
-		if( make_vm_file_path(filename.Value(), fixedname) 
-				== false ) {
+		if( make_vm_file_path(filename.Value(), fixedname) == false ) {
 			return false;
 		}else {
 			if( fullpath(fixedname.Value()) == false ) {
@@ -7173,6 +7170,12 @@ validate_xen_disk_parm(const char *xen_disk, MyString &fixed_disk)
 			fixed_disk += ":";
 			// permission
 			fixed_disk += single_disk_file.next();
+            if (iNumDiskParams == 4)
+            {
+                // optional (format)
+                fixed_disk += ":";
+                fixed_disk += single_disk_file.next();
+            }
 		}
 	}
 	return true;
@@ -7191,21 +7194,6 @@ void SetVMRequirements()
 	vmanswer += JobRequirements;
 	vmanswer += ")";
 
-	// check OS
-	/*	
-	if( (strcasecmp(VMType.Value(), CONDOR_VM_UNIVERSE_XEN) == MATCH ) || 
-			vm_need_fsdomain ) {
-		bool checks_opsys = false;
-		checks_opsys = findClause( vmanswer, ATTR_OPSYS );
-
-		if( !checks_opsys ) {
-			vmanswer += " && (OpSys == \"";
-			vmanswer += OperatingSystem;
-			vmanswer += "\")";
-		}
-	}
-	*/
-
 	// check file system domain
 	if( vm_need_fsdomain ) {
 		// some files don't use file transfer.
@@ -7357,10 +7345,6 @@ SetVMParams()
 	}
 
 	char* tmp_ptr = NULL;
-	bool has_vm_cdrom_files = false;
-	bool has_vm_iso_file = false;
-	bool vm_should_transfer_cdrom_files = false;
-	MyString final_cdrom_files;
 	MyString buffer;
 
 	// VM type is already set in SetUniverse
@@ -7368,13 +7352,11 @@ SetVMParams()
 	InsertJobExpr(buffer);
 
 	// VM checkpoint is already set in SetUniverse
-	buffer.sprintf( "%s = %s", ATTR_JOB_VM_CHECKPOINT, 
-			VMCheckpoint? "TRUE":"FALSE");
+	buffer.sprintf( "%s = %s", ATTR_JOB_VM_CHECKPOINT, VMCheckpoint? "TRUE":"FALSE");
 	InsertJobExpr(buffer);
 
 	// VM networking is already set in SetUniverse
-	buffer.sprintf( "%s = %s", ATTR_JOB_VM_NETWORKING, 
-			VMNetworking? "TRUE":"FALSE");
+	buffer.sprintf( "%s = %s", ATTR_JOB_VM_NETWORKING, VMNetworking? "TRUE":"FALSE");
 	InsertJobExpr(buffer);
 
 	// Here we need to set networking type
@@ -7463,99 +7445,6 @@ SetVMParams()
 		}
 	}
 
-	// 'vm_cdrom_files' defines files which will be shown in CDROM inside a VM.
-	// That is, vm-gahp on the execute machine will create a ISO file with 
-	// the defined files. The ISO file will be viewed as a CDROM in a VM.
-	char *vm_cdrom_files = NULL;
-	vm_cdrom_files = condor_param("vm_cdrom_files");
-	if( vm_cdrom_files ) {
-		vm_should_transfer_cdrom_files = false;
-		tmp_ptr = condor_param("vm_should_transfer_cdrom_files");
-		if( parse_vm_option(tmp_ptr, vm_should_transfer_cdrom_files) 
-				== false ) {
-			MyString err_msg;
-			err_msg = "\nERROR: You must explicitly specify "
-				"\"vm_should_transfer_cdrom_files\" "
-				"in your submit description file. "
-				"You need to define either "
-				"\"vm_should_transfer_cdrom_files = YES\" or "
-				" \"vm_should_transfer_cdrom_files = NO\". "
-				"If you define \"vm_should_transfer_cdrom_files = YES\", " 
-				"all files in \"vm_cdrom_files\" will be "
-				"transfered to an execute machine. "
-				"If you define \"vm_should_transfer_cdrom_files = NO\", "
-				"all files in \"vm_cdrom_files\" should be "
-				"accessible with a shared file system\n";
-			print_wrapped_text( err_msg.Value(), stderr );
-			DoCleanup(0,0,NULL);
-			exit(1);
-		}
-		free(tmp_ptr);
-
-		buffer.sprintf( "%s = %s", VMPARAM_TRANSFER_CDROM_FILES,
-				vm_should_transfer_cdrom_files ? "TRUE" : "FALSE");
-		InsertJobExpr( buffer );
-
-		if( vm_should_transfer_cdrom_files == false ) {
-			vm_need_fsdomain = true;
-		}
-
-		StringList cdrom_file_list(NULL, ",");
-		cdrom_file_list.initializeFromString(vm_cdrom_files);
-		final_cdrom_files = "";
-
-		cdrom_file_list.rewind();
-
-		has_vm_iso_file = false;
-		MyString cdrom_file;
-		const char *tmp_file = NULL;
-		while( (tmp_file = cdrom_file_list.next() ) != NULL ) {
-			cdrom_file = delete_quotation_marks(tmp_file);
-			if( cdrom_file.Length() == 0 ) {
-				continue;
-			}
-			cdrom_file.trim();
-			if( has_suffix(cdrom_file.Value(), ".iso") ) {
-				has_vm_iso_file = true;
-			}
-
-			// convert file name to full path that uses iwd
-			cdrom_file = full_path(cdrom_file.Value());
-			check_and_universalize_path(cdrom_file);
-
-			if( vm_should_transfer_cdrom_files ) {
-				// add this cdrom file to transfer_input_files
-				transfer_vm_file(cdrom_file.Value());
-			}
-
-			if( final_cdrom_files.Length() > 0 ) {
-				final_cdrom_files += ",";
-			}
-			if( vm_should_transfer_cdrom_files ) {
-				// A file will be transferred. 
-				// So we use basename.
-				final_cdrom_files += condor_basename(cdrom_file.Value());
-			}else {
-				final_cdrom_files += cdrom_file.Value();
-			}
-		}
-
-		if( has_vm_iso_file && (cdrom_file_list.number() > 1)) {
-			fprintf( stderr, "\nERROR: You cannot define an iso file "
-					"with other files. You should define either "
-					"only one iso file or multiple non-iso files in %s\n", 
-					"vm_cdrom_files");
-			DoCleanup(0,0,NULL);
-			exit(1);
-		}
-
-		buffer.sprintf( "%s = \"%s\"", VMPARAM_CDROM_FILES, 
-				final_cdrom_files.Value());
-		InsertJobExpr( buffer );
-		has_vm_cdrom_files = true;
-		free(vm_cdrom_files);
-	}
-
 	if( (strcasecmp(VMType.Value(), CONDOR_VM_UNIVERSE_XEN) == MATCH) ||
 		(strcasecmp(VMType.Value(), CONDOR_VM_UNIVERSE_KVM) == MATCH) ) {
 		bool real_xen_kernel_file = false;
@@ -7564,52 +7453,18 @@ SetVMParams()
 		// Read the parameter of xen_transfer_files 
 		char *transfer_files = NULL;
 		const char *transf_attr_name;
-		if ( strcasecmp(VMType.Value(), CONDOR_VM_UNIVERSE_XEN) == MATCH )
-		{
-			transfer_files = condor_param("xen_transfer_files");
-			transf_attr_name = VMPARAM_XEN_TRANSFER_FILES;
-		}
-		else
-		{
-			transfer_files = condor_param("kvm_transfer_files");
-			transf_attr_name = VMPARAM_KVM_TRANSFER_FILES;
-		}
-
-		if( transfer_files ) {
-			MyString final_output;
-			StringList xen_file_list(NULL, ",");
-			xen_file_list.initializeFromString(transfer_files);
 
-			xen_file_list.rewind();
+        transfer_files = condor_param("transfer_input_files");
+        if (transfer_files)
+        {
+            // tbd - I don't think we need to do anything here
+            free(transfer_files);
+        }
+        else
+        {
+            vm_need_fsdomain = true;
+        }
 
-			MyString one_file;
-			const char *tmp_file = NULL;
-			while( (tmp_file = xen_file_list.next() ) != NULL ) {
-				one_file = delete_quotation_marks(tmp_file);
-				if( one_file.Length() == 0 ) {
-					continue;
-				}
-				one_file.trim();
-				// convert file name to full path that uses iwd
-				one_file = full_path(one_file.Value());
-				check_and_universalize_path(one_file);
-
-				// add this file to transfer_input_files
-				transfer_vm_file(one_file.Value());
-
-				if( final_output.Length() > 0 ) {
-					final_output += ",";
-				}
-				// VMPARAM_XEN_TRANSFER_FILES will include 
-				// basenames for files to be transferred.
-				final_output += condor_basename(one_file.Value());
-			}
-			buffer.sprintf( "%s = \"%s\"", transf_attr_name, 
-					final_output.Value());
-			InsertJobExpr( buffer );
-			free(transfer_files);
-		}
-		
 		if ( strcasecmp(VMType.Value(), CONDOR_VM_UNIVERSE_XEN) == MATCH )
 		{
 			// xen_kernel is a required parameter
@@ -7701,18 +7556,8 @@ SetVMParams()
 		}// xen only params
 
 		// <x>_disk is a required parameter
-		char *disk = NULL;
-		const char *disk_attr_name;
-		if ( strcasecmp(VMType.Value(), CONDOR_VM_UNIVERSE_XEN) == MATCH )
-		{
-			disk = condor_param("xen_disk");
-			disk_attr_name = VMPARAM_XEN_DISK;
-		}
-		else
-		{
-			disk = condor_param("kvm_disk");
-			disk_attr_name = VMPARAM_KVM_DISK;
-		}
+		char *disk = condor_param("vm_disk");
+		const char *disk_attr_name = VMPARAM_VM_DISK;
 
 		if( !disk ) {
 			fprintf( stderr, "\nERROR: '%s' cannot be found.\n"
@@ -7723,9 +7568,9 @@ SetVMParams()
 			exit(1);
 		}else {
 			MyString fixedvalue = delete_quotation_marks(disk);
-			if( validate_xen_disk_parm(fixedvalue.Value(), fixedvalue) 
-					== false ) {
-				fprintf(stderr, "\nERROR: '<vm>_disk' has incorrect format.\n"
+			if( validate_xen_disk_parm(fixedvalue.Value(), fixedvalue) == false ) 
+            {
+				fprintf(stderr, "\nERROR: 'vm_disk' has incorrect format.\n"
 						"The format shoud be like "
 						"\"<filename>:<devicename>:<permission>\"\n"
 						"e.g.> For single disk: <vm>_disk = filename1:hda1:w\n"
@@ -7754,45 +7599,6 @@ SetVMParams()
 			}
 		}
 
-		if( has_vm_cdrom_files )
-		{
-			MyString xen_cdrom_string;
-			char *cdrom_device = NULL;
-			const char *cdrom_attr_name;
-
-			if ( strcasecmp(VMType.Value(), CONDOR_VM_UNIVERSE_XEN) == MATCH )
-			{
-				cdrom_device = condor_param("xen_cdrom_device");
-				cdrom_attr_name = VMPARAM_XEN_CDROM_DEVICE;
-			}
-			else
-			{
-				cdrom_device = condor_param("kvm_cdrom_device");
-				cdrom_attr_name = VMPARAM_KVM_CDROM_DEVICE;
-			}
-
-			if( !cdrom_device ) {
-				fprintf(stderr, "\nERROR: To use 'vm_cdrom_files', "
-						"you must also define '<vm>_cdrom_device'.\n");
-				DoCleanup(0,0,NULL);
-				exit(1);
-			}
-			xen_cdrom_string = cdrom_device;
-			free(cdrom_device);
-
-			if( xen_cdrom_string.find(":", 0 ) >= 0 ) {
-				fprintf(stderr, "\nERROR: '<vm>_cdrom_device' should include "
-						"just device name.\n"
-						"e.g.) 'xen_cdrom_device = hdc'\n");
-				DoCleanup(0,0,NULL);
-				exit(1);
-			}
-
-			buffer.sprintf( "%s = \"%s\"", cdrom_attr_name,
-					xen_cdrom_string.Value());
-			InsertJobExpr( buffer );
-		}
-
 	}else if( strcasecmp(VMType.Value(), CONDOR_VM_UNIVERSE_VMWARE) == MATCH ) {
 		bool vmware_should_transfer_files = false;
 		tmp_ptr = condor_param("vmware_should_transfer_files");
@@ -7938,30 +7744,19 @@ SetVMParams()
 			// 1. all disk files should be in a shared file system
 			// 2. If a job uses CDROM files, it should be 
 			// 	  single ISO file and be in a shared file system
-			if( xen_has_file_to_be_transferred || 
-				(has_vm_cdrom_files && 
-				 (!has_vm_iso_file || vm_should_transfer_cdrom_files)) ||
-				!arg_str.IsEmpty() ) {
+			if( xen_has_file_to_be_transferred || !arg_str.IsEmpty() ) 
+            {
 				MyString err_msg;
 				err_msg = "\nERROR: To use checkpoint in Xen, "
 					"You need to make sure the followings.\n"
 					"1. All xen disk files should be in a shared file system\n"
-					"2. If you use 'vm_cdrom_files', "
-					"only single ISO file is allowed and the ISO file "
-					"should also be in a shared file system\n"
-					"3. You cannot use 'arguments' in a job description file\n\n";
+					"2. You cannot use 'arguments' in a job description file\n\n";
 
 				if( xen_has_file_to_be_transferred ) {
 					err_msg += "ERROR: You requested to transfer at least one Xen "
 						"disk file\n";
 				}
-				if( has_vm_cdrom_files ) {
-					if( !has_vm_iso_file ) {
-						err_msg += "ERROR: You defined non-iso CDROM files\n";
-					}else if( vm_should_transfer_cdrom_files ) {
-						err_msg += "ERROR: You requested to transfer a ISO file\n";
-					}
-				}
+				
 				if( !arg_str.IsEmpty() ) {
 					err_msg += "ERROR: You defined 'arguments'.\n";
 				}
@@ -7973,38 +7768,6 @@ SetVMParams()
 		}
 		// For vmware, there is no limitation.
 	}
-
-	if( !arg_str.IsEmpty() && has_vm_cdrom_files ) {
-		if( has_vm_iso_file ) {
-			// A job user cannot use a iso file for input CDROM and 
-			// 'Argument' parameter together, 
-			MyString err_msg;
-			err_msg = "\nERROR: You cannot use single iso file for "
-				"'vm_cdrom_files' and 'arguments' in a job description "
-				"file together. To use 'arguments' you need to use "
-				"non-iso files in 'vm_cdrom_files'\n";
-			print_wrapped_text( err_msg.Value(), stderr );
-			DoCleanup(0,0,NULL);
-			exit( 1 );
-		}else {
-			// Because a file called "condor.arg" will be created and 
-			// be added to input CDROM on an execute machine,
-			// 'vm_cdrom_files' should not contain "condor.arg".
-			if( final_cdrom_files.find(VM_UNIV_ARGUMENT_FILE, 0) >= 0 ) {
-				MyString err_msg;
-				err_msg.sprintf("\nERROR: The file name '%s' is reserved for "
-					"'arguments' in vm universe. String in 'arguments' will "
-					"be saved into a file '%s'. And '%s' will be added to "
-					"input CDROM. So 'vm_cdrom_files' should not "
-					"contain '%s'\n", VM_UNIV_ARGUMENT_FILE,
-					VM_UNIV_ARGUMENT_FILE, VM_UNIV_ARGUMENT_FILE,
-					VM_UNIV_ARGUMENT_FILE);
-				print_wrapped_text( err_msg.Value(), stderr );
-				DoCleanup(0,0,NULL);
-				exit( 1 );
-			}
-		}
-	}
 			
 	// Now all VM parameters are set
 	// So we need to add necessary VM attributes to Requirements
diff --git a/src/condor_vm-gahp/CMakeLists.txt b/src/condor_vm-gahp/CMakeLists.txt
index 7c3fe6c..05a8954 100644
--- a/src/condor_vm-gahp/CMakeLists.txt
+++ b/src/condor_vm-gahp/CMakeLists.txt
@@ -32,7 +32,6 @@ if(NOT WIN_EXEC_NODE_ONLY)
     endif()
 
     if (NOT WINDOWS)
-        install ( FILES condor_vm_xen.sh DESTINATION ${C_SBIN} PERMISSIONS ${CONDOR_SCRIPT_PERMS} )
         install ( FILES libvirt_simple_script.awk DESTINATION ${C_LIBEXEC} PERMISSIONS ${CONDOR_SCRIPT_PERMS} )
     endif()
 
diff --git a/src/condor_vm-gahp/condor_create_vm_iso.sh b/src/condor_vm-gahp/condor_create_vm_iso.sh
new file mode 100755
index 0000000..363bf31
--- /dev/null
+++ b/src/condor_vm-gahp/condor_create_vm_iso.sh
@@ -0,0 +1,109 @@
+#!/bin/bash
+
+##**************************************************************
+##
+## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+## University of Wisconsin-Madison, WI.
+## 
+## Licensed under the Apache License, Version 2.0 (the "License"); you
+## may not use this file except in compliance with the License.  You may
+## obtain a copy of the License at
+## 
+##    http://www.apache.org/licenses/LICENSE-2.0
+## 
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an "AS IS" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+##
+##**************************************************************
+
+
+#
+# Xen Control Tool
+# This program must be called by root user.
+# V0.2 / 2007-Oct-19 / Jaeyoung Yoon / jyoon@cs.wisc.edu
+#
+
+usage() {
+	echo $"Usage: $0 TBD" 1>&2
+	exit 1
+}
+
+if [ -z "$1" ] ; then
+	usage;
+fi
+
+XM="virsh"
+CTRL_PROG=`basename $XM`
+MKISOFS="mkisofs"
+PROG="$0"
+TOPDIR=`pwd`
+DOMAINNAME=""
+XM_STD_OUTPUT=xm_std_file
+XM_ERROR_OUTPUT=xm_error_file
+
+unalias rm 2>/dev/null
+unalias cp 2>/dev/null
+
+
+createiso() {
+# $1: listfile
+# $2: iso name
+	if [ ! -f "$1" ] || [ -z "$2" ] ; then
+		echo "Usage: $PROG createiso <listfile> <isoname>" 1>&2
+		return 1
+	fi
+
+	ISOCONFIG="$1"
+	ISONAME="$2"
+
+	# Create temporary directory
+	TMPFILE="${ISONAME}.dir"
+	rm -rf $TMPFILE
+	mkdir $TMPFILE
+	if [ $? -ne 0 ]; then
+   		echo "Cannot create $TMPFILE" 1>&2
+		return 1
+	fi
+	chown --reference="$ISOCONFIG" "$TMPFILE" 2>/dev/null
+
+	# Read file list for ISO
+	# Copy all files in the file list into the temporary directory
+	while read ONEFILE
+	do
+		if [ -n "$ONEFILE" ]; then
+			cp -f "$ONEFILE" "$TMPFILE" >/dev/null
+			if [ $? -ne 0 ]; then
+				echo "Cannot copy file($ONEFILE) into directory($TMPFILE)" 1>&2
+				return 1
+			fi
+		fi
+	done < $ISOCONFIG
+
+	$MKISOFS -quiet -o "$ISONAME" -input-charset iso8859-1 -J -A "CONODR" -V "CONDOR" "$TMPFILE" >/dev/null
+	if [ $? -ne 0 ]; then
+		echo "Cannot create an ISO file($ISONAME)" 1>&2
+		return 1
+	fi
+	chown --reference="$ISOCONFIG" "$ISONAME" 2>/dev/null
+
+	rm -rf "$TMPFILE" 2>/dev/null 
+	sync
+}
+
+#### Program starts from here #####
+
+if [ -z "$MKISOFS" ]; then
+	echo "Should define 'MKISOFS' for mkisofs program" 1>&2
+	exit 1
+fi
+
+createiso "$2" "$3"
+
+RESULT=$?
+
+rm -f "$XM_STD_OUTPUT" 2>/dev/null
+rm -f "$XM_ERROR_OUTPUT" 2>/dev/null
+exit $RESULT
diff --git a/src/condor_vm-gahp/condor_vm_xen.sh b/src/condor_vm-gahp/condor_vm_xen.sh
deleted file mode 100755
index bf84d2d..0000000
--- a/src/condor_vm-gahp/condor_vm_xen.sh
+++ /dev/null
@@ -1,494 +0,0 @@
-#!/bin/bash
-
-##**************************************************************
-##
-## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
-## University of Wisconsin-Madison, WI.
-## 
-## Licensed under the Apache License, Version 2.0 (the "License"); you
-## may not use this file except in compliance with the License.  You may
-## obtain a copy of the License at
-## 
-##    http://www.apache.org/licenses/LICENSE-2.0
-## 
-## Unless required by applicable law or agreed to in writing, software
-## distributed under the License is distributed on an "AS IS" BASIS,
-## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-## See the License for the specific language governing permissions and
-## limitations under the License.
-##
-##**************************************************************
-
-
-#
-# Xen Control Tool
-# This program must be called by root user.
-# V0.2 / 2007-Oct-19 / Jaeyoung Yoon / jyoon@cs.wisc.edu
-#
-
-usage() {
-	echo $"Usage: $0 {start|stop|suspend|resume|pause|unpause|status|getvminfo|check|killvm|createiso|createconfig}" 1>&2
-	exit 1
-}
-
-if [ -z "$1" ] ; then
-	usage;
-fi
-
-XM="virsh"
-CTRL_PROG=`basename $XM`
-MKISOFS="mkisofs"
-PROG="$0"
-TOPDIR=`pwd`
-DOMAINNAME=""
-XM_STD_OUTPUT=xm_std_file
-XM_ERROR_OUTPUT=xm_error_file
-
-unalias rm 2>/dev/null
-unalias cp 2>/dev/null
-
-run_controller() {
-	CTRL_RESULT=0
-	run_virsh_command $@	
-	CTRL_RESULT=$?
-	return $CTRL_RESULT
-}
-
-run_virsh_command() {
-	rm -f "$XM_STD_OUTPUT" 2>/dev/null
-	rm -f "$XM_ERROR_OUTPUT" 2>/dev/null
-	# Because it is possible that some arguments have spaces,
-	# We do like this.
-	$XM $@ > "$XM_STD_OUTPUT" 2> "$XM_ERROR_OUTPUT"
-	REALRESULT=$?
-	return $REALRESULT
-}
-
-find_domain_name() {
-	TEMP_XEN_CONFIG="$1"
-	DOMAINNAME=""
-
-	if [ ! -f "$TEMP_XEN_CONFIG" ]; then
-		echo "$TEMP_XEN_CONFIG doesn't exist" 1>&2
-		return 1
-	fi
-
-	DOMAINNAME=`sed -e "s#.*<name>\(.*\)</name>.*#\1#" $TEMP_XEN_CONFIG`
-}
-
-start() {
-# $1: Config file 
-	if [ ! -f "$1" ]; then
-		echo "Usage: $PROG start <configfile>" 1>&2
-		return 1
-	fi
-	XEN_CONFIG_FILE="$1"
-
-	find_domain_name "$XEN_CONFIG_FILE"
-
-	run_controller create "$XEN_CONFIG_FILE"
-	RESULT=$?
-
-	cat "$XM_STD_OUTPUT" 1>&2
-
-	if [ $RESULT != 0 ]; then
-		echo "$XM create $XEN_CONFIG_FILE error" 1>&2
-		cat "$XM_ERROR_OUTPUT" 1>&2
-
-		return 1
-	fi
-}
-
-stop() {
-# $1: config file
-	if [ ! -f "$1" ]; then
-		echo "Usage: $PROG stop <configfile>" 1>&2
-		return 1
-	fi
-	XEN_CONFIG_FILE="$1"
-
-	find_domain_name "$XEN_CONFIG_FILE"
-
-	if [ -z "$DOMAINNAME" ]; then
-		echo "Can't find domain name in $XEN_CONFIG_FILE" 1>&2
-		return 1
-	fi
-
-	run_controller list
-	RESULT=$?
-
-	if [ $RESULT != 0 ]; then
-		echo "XM list error" 1>&2
-		cat "$XM_ERROR_OUTPUT" 1>&2
-		return 1
-	fi
-
-	n=`grep -w "$DOMAINNAME" "$XM_STD_OUTPUT" | wc -l`
-	if [ $n -eq 1 ]; then
-		run_controller destroy "$DOMAINNAME"
-		RESULT=$?
-
-		cat "$XM_STD_OUTPUT" 1>&2
-		if [ $RESULT != 0 ]; then
-			echo "$XM destroy $DOMAINNAME error" 1>&2
-			cat "$XM_ERROR_OUTPUT" 1>&2
-			return 1
-		fi
-	fi
-}
-
-suspend() {
-# $1: config file
-# $2: file to be saved
-	if [ -z "$1" ] || [ -z "$2" ]; then
-		echo "Usage: $PROG suspend <configfile> <filename>" 1>&2
-		return 1
-	fi
-	XEN_CONFIG_FILE="$1"
-	XEN_SUSPEND_FILE="$2"
-
-	if [ ! -f "$XEN_CONFIG_FILE" ]; then
-		echo "Can't find vm config file for suspend" 1>&2
-		return 1
-	fi
-
-	find_domain_name "$XEN_CONFIG_FILE"
-
-	if [ -z "$DOMAINNAME" ]; then
-		echo "Can't find domain name in $XEN_CONFIG_FILE" 1>&2
-		return 1
-	fi
-
-	run_controller list
-	RESULT=$?
-
-	if [ $RESULT != 0 ]; then
-		echo "XM list error" 1>&2
-		cat "$XM_ERROR_OUTPUT" 1>&2
-		return 1
-	fi
-
-	n=`grep -w "$DOMAINNAME" "$XM_STD_OUTPUT" | wc -l`
-	if [ $n -eq 1 ]; then
-		run_controller save "$DOMAINNAME" "$XEN_SUSPEND_FILE"
-		RESULT=$?
-
-		cat "$XM_STD_OUTPUT" 1>&2
-		if [ $RESULT != 0 ]; then
-			echo "$XM save $DOMAINNAME $XEN_SUSPEND_FILE error" 1>&2
-			rm -f $XEN_SUSPEND_FILE 2>/dev/null
-			cat "$XM_ERROR_OUTPUT" 1>&2
-			return 1
-		fi
-
-		# change UID/GID from root to condor's
-		chown --reference="$XEN_CONFIG_FILE" "$XEN_SUSPEND_FILE" 2>/dev/null
-		sync
-	else
-		echo "Domain($DOMAINNAME) is not running" 1>&2
-		return 1
-	fi
-}
-
-resume() {
-# $1: saved file
-	if [ ! -f "$1" ]; then
-		echo "Usage: $PROG resume <filename>" 1>&2
-		return 1
-	fi
-	XEN_CONFIG_FILE="$1"
-
-	run_controller restore "$XEN_CONFIG_FILE"
-	RESULT=$?
-
-	cat "$XM_STD_OUTPUT" 1>&2
-	if [ $RESULT != 0 ]; then
-		echo "$XM restore $XEN_CONFIG_FILE error" 1>&2
-		cat "$XM_ERROR_OUTPUT" 1>&2
-		return 1
-	fi
-}
-
-pause() {
-# $1: config file
-	if [ ! -f "$1" ]; then
-		echo "Usage: $PROG pause <configfile>" 1>&2
-		return 1
-	fi
-	XEN_CONFIG_FILE="$1"
-
-	find_domain_name "$XEN_CONFIG_FILE"
-
-	if [ -z "$DOMAINNAME" ]; then
-		echo "Can't find domain name in $XEN_CONFIG_FILE" 1>&2
-		return 1
-	fi
-
-	run_controller list
-	RESULT=$?
-
-	if [ $RESULT != 0 ]; then
-		echo "XM list error" 1>&2
-		cat "$XM_ERROR_OUTPUT" 1>&2
-		return 1
-	fi
-
-	n=`grep -w "$DOMAINNAME" "$XM_STD_OUTPUT" | wc -l`
-	if [ $n -eq 1 ]; then
-
-		run_virsh_command suspend "$DOMAINNAME"
-
-		RESULT=$?
-
-		cat "$XM_STD_OUTPUT" 1>&2
-		if [ $RESULT != 0 ]; then
-
-			echo "$XM suspend $DOMAINNAME error" 1>&2
-
-			cat "$XM_ERROR_OUTPUT" 1>&2
-			return 1
-		fi
-	else
-		echo "Domain($DOMAINNAME) is not running" 1>&2
-		return 1
-	fi
-}
-
-unpause() {
-# $1: config file
-	if [ ! -f "$1" ]; then
-		echo "Usage: $PROG unpause <configfile>" 1>&2
-		return 1
-	fi
-	XEN_CONFIG_FILE="$1"
-
-	find_domain_name "$XEN_CONFIG_FILE"
-
-	if [ -z "$DOMAINNAME" ]; then
-		echo "Can't find domain name in $XEN_CONFIG_FILE" 1>&2
-		return 1
-	fi
-
-	run_controller list
-	RESULT=$?
-
-	if [ $RESULT != 0 ]; then
-		echo "XM list error" 1>&2
-		cat "$XM_ERROR_OUTPUT" 1>&2
-		return 1
-	fi
-
-	n=`grep -w "$DOMAINNAME" "$XM_STD_OUTPUT" | wc -l`
-	if [ $n -eq 1 ]; then
-		run_virsh_command resume "$DOMAINNAME"
-		RESULT=$?
-
-		cat "$XM_STD_OUTPUT" 1>&2
-		if [ $RESULT != 0 ]; then
-			echo "$XM resume $DOMAINNAME error" 1>&2
-			cat "$XM_ERROR_OUTPUT" 1>&2
-			return 1
-		fi
-	else
-		echo "Domain($DOMAINNAME) is not running" 1>&2
-	fi
-}
-
-status() {
-# $1: config file
-	if [ ! -f "$1" ] ; then
-		echo "Usage: $PROG status <configfile>" 1>&2
-		return 1
-	fi
-	XEN_CONFIG_FILE="$1"
-
-	find_domain_name "$XEN_CONFIG_FILE"
-
-	if [ -z "$DOMAINNAME" ]; then
-		echo "Can't find domain name in $XEN_CONFIG_FILE" 1>&2
-		return 1
-	fi
-
-	run_controller list
-	RESULT=$?
-
-	if [ $RESULT != 0 ]; then
-		echo "XM list error" 1>&2
-		cat "$XM_ERROR_OUTPUT" 1>&2
-		return 1
-	fi
-
-	n=`grep -w "$DOMAINNAME" "$XM_STD_OUTPUT" | wc -l`
-	if [ $n -eq 1 ]; then
-		# domain is running
-		echo "STATUS=Running"
-
-	else
-		# domain is stopped
-		echo "STATUS=Stopped"
-	fi
-}
-
-getvminfo() {
-# $1: config file
-	if [ ! -f "$1" ] ; then
-		echo "Usage: $PROG getvminfo <configfile>" 1>&2
-		return 1
-	fi
-
-	status $1
-	RESULT=$?
-	return $RESULT
-}
-
-check() {
-	$MKISOFS -version >/dev/null
-	if [ $? -ne 0 ]; then
-   		echo "Cannot execute $MKISOFS" 1>&2
-		return 1
-	fi
-
-#	run_controller list
-#	RESULT=$?
-#
-#	if [ $RESULT != 0 ]; then
-#		echo "XM list error" 1>&2
-#		cat "$XM_ERROR_OUTPUT" 1>&2
-#		return 1
-#	fi
-}
-
-killvm() {
-# $1: vmname
-	if [ -z "$1" ]; then
-		echo "Usage: $PROG killvm <vmname>" 1>&2
-		return 1
-	fi
-
-	DOMAINNAME="$1"
-
-	run_controller destroy "$DOMAINNAME"
-
-	return 0;
-}
-
-createiso() {
-# $1: listfile
-# $2: iso name
-	if [ ! -f "$1" ] || [ -z "$2" ] ; then
-		echo "Usage: $PROG createiso <listfile> <isoname>" 1>&2
-		return 1
-	fi
-
-	ISOCONFIG="$1"
-	ISONAME="$2"
-
-	# Create temporary directory
-	TMPFILE="${ISONAME}.dir"
-	rm -rf $TMPFILE
-	mkdir $TMPFILE
-	if [ $? -ne 0 ]; then
-   		echo "Cannot create $TMPFILE" 1>&2
-		return 1
-	fi
-	chown --reference="$ISOCONFIG" "$TMPFILE" 2>/dev/null
-
-	# Read file list for ISO
-	# Copy all files in the file list into the temporary directory
-	while read ONEFILE
-	do
-		if [ -n "$ONEFILE" ]; then
-			cp -f "$ONEFILE" "$TMPFILE" >/dev/null
-			if [ $? -ne 0 ]; then
-				echo "Cannot copy file($ONEFILE) into directory($TMPFILE)" 1>&2
-				return 1
-			fi
-		fi
-	done < $ISOCONFIG
-
-	$MKISOFS -quiet -o "$ISONAME" -input-charset iso8859-1 -J -A "CONODR" -V "CONDOR" "$TMPFILE" >/dev/null
-	if [ $? -ne 0 ]; then
-		echo "Cannot create an ISO file($ISONAME)" 1>&2
-		return 1
-	fi
-	chown --reference="$ISOCONFIG" "$ISONAME" 2>/dev/null
-
-	rm -rf "$TMPFILE" 2>/dev/null 
-	sync
-}
-
-createconfig() {
-# $1: configuration file
-	if [ ! -f "$1" ]; then
-		echo "Usage: $PROG createconfig <configfile>" 1>&2
-		return 1
-	fi
-}
-
-#### Program starts from here #####
-
-#if [ ! -x "$XM" ]; then
-#	echo "Xen Utility($XM) does not exist" 1>&2
-#	exit 1
-#fi
-
-if [ -z "$MKISOFS" ]; then
-	echo "Should define 'MKISOFS' for mkisofs program" 1>&2
-	exit 1
-fi
-
-#ID=`id -u`
-#if [ $ID != 0 ]; then
-#	echo "Should be a root user" 1>&2
-#	exit 1
-#fi
-
-case "$1" in
-  start)
-	start "$2"
-	;;
-  stop)
-	stop "$2"
-	;;
-  suspend)
-	suspend "$2" "$3"
-	;;
-  resume)
-	resume "$2"
-	;;
-  pause)
-	pause "$2"
-	;;
-  unpause)
-	unpause "$2"
-	;;
-  status)
-	status "$2"
-	;;
-  getvminfo)
-	getvminfo "$2"
-	;;
-  check)
-	check
-	;;
-  killvm)
-	killvm "$2"
-	;;
-  createiso)
-	createiso "$2" "$3"
-	;;
-  createconfig)
-	createconfig "$2"
-	;;
-  virsh)
-	check
-	;;
-   *)
-	usage
-esac
-
-RESULT=$?
-
-rm -f "$XM_STD_OUTPUT" 2>/dev/null
-rm -f "$XM_ERROR_OUTPUT" 2>/dev/null
-exit $RESULT
diff --git a/src/condor_vm-gahp/libvirt_simple_script.awk b/src/condor_vm-gahp/libvirt_simple_script.awk
index cce0ead..18eeb8c 100644
--- a/src/condor_vm-gahp/libvirt_simple_script.awk
+++ b/src/condor_vm-gahp/libvirt_simple_script.awk
@@ -122,17 +122,45 @@ END {
 	    print "</interface>" ;
 	}
     }
-    print "<disk type='file'>" ;
-    if(index(attrs["JobVMType"],"xen") != 0) 
-    {
-	 split(attrs["VMPARAM_Xen_Disk"], disk_string, ":");
-    }
-    else if(index(attrs["JobVMType"],"kvm") != 0)
+
+    
+    n=split(attrs["VMPARAM_vm_Disk"], full_disk, ",");
+    for ( i=1; i<=n; i++ )
     {
-	split(attrs["VMPARAM_Kvm_Disk"], disk_string, ":");
+        # count is used to determine if format is passed.
+        p = split(full_disk[i], disk_string, ":");
+
+        if (index( disk_string[1], "iso") )
+        {
+            print "<disk type='file' device='cdrom'>";
+        }
+        else
+        {
+            print "<disk type='file'>" ;
+        }
+        
+        if ( p == 4 )
+        {
+            # only an issue w/qemu
+            if (attrs["JobVMType"] == "kvm")
+            {
+                print "<driver name='qemu' type='" disk_string[4] "'/>";
+            }
+        }
+
+        print "<source file='" disk_string[1] "'/>" ;
+        print "<target dev='" disk_string[2] "'/>" ;
+        
+        if ( disk_string[3] == "r" )
+        {
+            print "<readonly/>"
+        }
+
+        print "</disk>" ;
     }
-    print "<source file='" disk_string[1] "'/>" ;
-    print "<target dev='" disk_string[2] "'/>" ;
-    print "</disk></devices></domain>" ;
+
+     print "</devices></domain>"
+
+    
     exit(0);
 }
diff --git a/src/condor_vm-gahp/vm_type.cpp b/src/condor_vm-gahp/vm_type.cpp
index f5afbb5..a5a89e7 100644
--- a/src/condor_vm-gahp/vm_type.cpp
+++ b/src/condor_vm-gahp/vm_type.cpp
@@ -1,7 +1,7 @@
 /***************************************************************
  *
  * Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
- * University of Wisconsin-Madison, WI.
+ * University of Wisconsin-Madcdn, WI.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License"); you
  * may not use this file except in compliance with the License.  You may
@@ -50,9 +50,6 @@ VMType::VMType(const char* prog_for_script, const char* scriptname, const char*
 	m_vm_checkpoint = false;
 	m_vm_no_output_vm = false; 
 	m_vm_hardware_vt = false; 
-	m_vm_transfer_cdrom_files = false;
-	m_local_iso = false;
-	m_has_iso = false;
 	m_is_soft_suspended = false;
 	m_self_shutdown = false;
 	m_is_checkpointed = false;
@@ -204,69 +201,6 @@ VMType::parseCommonParamFromClassAd(bool is_root /*false*/)
 	m_vm_no_output_vm = false; 
 	m_classAd.LookupBool(VMPARAM_NO_OUTPUT_VM, m_vm_no_output_vm);
 
-	// Read CDROM files from Job classAd
-	m_vm_transfer_cdrom_files = false;
-	m_classAd.LookupBool(VMPARAM_TRANSFER_CDROM_FILES, m_vm_transfer_cdrom_files);
-
-	MyString cdrom_files;
-	if( m_classAd.LookupString(VMPARAM_CDROM_FILES, cdrom_files) == 1 ) {
-		cdrom_files.trim();
-	}
-
-	m_iso_file = "";
-	m_local_iso = false;
-	m_has_iso = false;
-	m_vm_cdrom_files.clearAll();
-
-	if( cdrom_files.IsEmpty() == false ) {
-		StringList cd_file_list(NULL, ",");
-		cd_file_list.initializeFromString(cdrom_files.Value());
-	
-		if( cd_file_list.isEmpty() == false ) {
-			// check if cdrom files are readable by user
-			const char *fname = NULL;
-			cd_file_list.rewind();
-			while( (fname = cd_file_list.next()) != NULL ) {
-				MyString tmp_fullname;
-				isTransferedFile(fname, tmp_fullname);
-
-				// check if this file is readable
-				if( check_vm_read_access_file(tmp_fullname.Value(), 
-							false) == false ) {
-					vmprintf(D_ALWAYS, "file(%s) for CDROM cannot "
-							"be read\n", tmp_fullname.Value());
-					m_result_msg = VMGAHP_ERR_CANNOT_READ_CDROM_FILE;
-					return false;
-				}
-			}
-
-			m_vm_cdrom_files.create_union(cd_file_list, false);
-
-			// If cd_file_list has an iso file, 
-			// we don't need to create a ISO file.
-			// We will just use the iso file directly.
-			if( cd_file_list.number() == 1 ) {
-				cd_file_list.rewind();
-
-				const char *file_name = cd_file_list.next();
-				if( has_suffix(file_name, ".iso") ) {
-					// check if this file was transferred.
-					MyString tmp_fullname;
-					if( isTransferedFile(file_name, tmp_fullname) ) {
-						// this file was transferred.
-						m_local_iso = true;
-					}else {
-						// this file is not transferred.
-						m_local_iso = false;
-					}
-
-					m_iso_file = tmp_fullname;
-					m_has_iso = true;
-				}
-			}
-		}
-	}
-
 	m_classad_arg = "";
 	ArgList arglist;
 	MyString error_msg;
@@ -275,23 +209,8 @@ VMType::parseCommonParamFromClassAd(bool is_root /*false*/)
 	}
 
 	if( m_classad_arg.IsEmpty() == false ) {
-		if( m_has_iso ) {
-			vmprintf(D_ALWAYS, "A job user defined both an ISO file and "
-					"'Argument' in a job description file. But 'Argument' "
-					"cannot be used with an iso file together\n");
-			m_result_msg = VMGAHP_ERR_CANNOT_CREATE_ARG_FILE;
-			return false;
-		}
-
-		if( cdrom_files.find(VM_UNIV_ARGUMENT_FILE, 0) >= 0 ) {
-			vmprintf(D_ALWAYS, "A file with the same filename '%s' "
-					"is already in '%s'\n", VM_UNIV_ARGUMENT_FILE, 
-					VMPARAM_CDROM_FILES);
-			m_result_msg = VMGAHP_ERR_CANNOT_CREATE_ARG_FILE;
-			return false;
-		}
 
-		// Create a file for arguments
+        // Create a file for arguments
 		FILE *argfile_fp = safe_fopen_wrapper(VM_UNIV_ARGUMENT_FILE, "w");
 		if( !argfile_fp ) {
 			vmprintf(D_ALWAYS, "failed to safe_fopen_wrapper the file "
@@ -310,11 +229,11 @@ VMType::parseCommonParamFromClassAd(bool is_root /*false*/)
 		}
 		fclose(argfile_fp);
 
+        //??
 		m_arg_file.sprintf("%s%c%s", m_workingpath.Value(), 
 				DIR_DELIM_CHAR, VM_UNIV_ARGUMENT_FILE);
-		// Add arg file to cdrom list
-		m_vm_cdrom_files.append(m_arg_file.Value());
-	}
+
+    }
 	return true;
 }
 
@@ -462,111 +381,6 @@ VMType::createTempFile(const char *template_string, const char *suffix, MyString
 	return true;
 }
 
-bool
-VMType::createISOConfigAndName(StringList *cd_files, MyString &isoconf, MyString &isofile)
-{
-	if( !cd_files || cd_files->isEmpty() ) {
-		return false;
-	}
-
-	isoconf = "";
-	isofile = "";
-
-	MyString tmp_config;
-	if( createTempFile("isoXXXXXX", ".config", tmp_config) == false ) {
-		vmprintf(D_ALWAYS, "Temporary config file for ISO cannot be created\n");
-		return false;
-	}
-
-	FILE *config_fp = safe_fopen_wrapper(tmp_config.Value(), "w");
-	if( !config_fp ) {
-		vmprintf(D_ALWAYS, "failed to safe_fopen_wrapper ISO config file "
-				": safe_fopen_wrapper(%s) returns %s\n", 
-				tmp_config.Value(), strerror(errno));
-		return false;
-	}
-
-	cd_files->rewind();
-	const char* tmp_file = NULL;
-	while( (tmp_file = cd_files->next() ) != NULL ) {
-		MyString tmp_fullname;
-
-		// if a file was transferred, make full path with working directory.
-		isTransferedFile(tmp_file, tmp_fullname);
-
-		// check if this file is readable
-		if( check_vm_read_access_file(tmp_fullname.Value()) == false ) {
-			vmprintf(D_ALWAYS, "file(%s) for CDROM cannot be read\n", 
-					tmp_fullname.Value());
-			fclose(config_fp);
-			unlink(tmp_config.Value());
-			return false;
-		}
-		if( fprintf(config_fp, "%s\n", tmp_fullname.Value()) < 0 ) {
-			fclose(config_fp);
-			unlink(tmp_config.Value());
-			vmprintf(D_ALWAYS, "failed to fprintf in createISOConfigAndName(%s:%s)\n",
-					tmp_config.Value(), strerror(errno));
-			return false;
-		}
-	}
-	fclose(config_fp);
-
-	// Make the name of ISO image
-	MyString iso_name(tmp_config);
-	iso_name.replaceString(".config", ".iso");
-
-	isoconf = tmp_config;
-	isofile = iso_name;
-	return true;
-}
-
-bool
-VMType::createISO()
-{
-	vmprintf(D_FULLDEBUG, "Inside VMType::createISO\n");
-
-	m_iso_file = "";
-
-	if( m_scriptname.IsEmpty() || m_vm_cdrom_files.isEmpty() ) {
-		return false;
-	}
-
-	MyString tmp_config;
-	MyString tmp_file;
-	if( createISOConfigAndName(&m_vm_cdrom_files, tmp_config, 
-				tmp_file) == false ) {
-		return false;
-	}
-
-	ArgList systemcmd;
-	if( m_prog_for_script.IsEmpty() == false ) {
-		systemcmd.AppendArg(m_prog_for_script);
-	}
-	systemcmd.AppendArg(m_scriptname);
-	systemcmd.AppendArg("createiso");
-	systemcmd.AppendArg(tmp_config);
-	systemcmd.AppendArg(tmp_file);
-
-	int result = systemCommand(systemcmd, m_file_owner);
-	if( result != 0 ) {
-		return false;
-	}
-
-#if defined(LINUX)	
-	// To avoid lazy-write behavior to disk
-	sync();
-#endif
-
-	unlink(tmp_config.Value());
-	m_iso_file = tmp_file;
-	m_local_iso = true;
-
-	// Insert the name of created iso file to classAd for future use
-	m_classAd.Assign("VMPARAM_ISO_NAME", condor_basename(m_iso_file.Value()));
-	return true;
-}
-
 // check if a file was transferred.
 // if so, fullname will have full path in working directory.
 // Otherwise, fullname will be same to file_name
diff --git a/src/condor_vm-gahp/vm_type.h b/src/condor_vm-gahp/vm_type.h
index 561cb6e..fff5685 100644
--- a/src/condor_vm-gahp/vm_type.h
+++ b/src/condor_vm-gahp/vm_type.h
@@ -78,8 +78,6 @@ public:
 	MyString m_result_msg;
 
 protected:
-	virtual bool createISOConfigAndName(StringList *files, MyString &isoconf, MyString &isofile);
-	virtual	bool createISO();
 
 	void setVMStatus(vm_status status);
 	void deleteNonTransferredFiles();
@@ -101,10 +99,7 @@ protected:
 	MyString m_scriptname;
 
 	MyString m_configfile;
-	MyString m_iso_file;
-	bool m_local_iso;
-	bool m_has_iso;
-
+	
 	// File list for TransferInput from submit machine.(full path)
 	StringList m_transfer_input_files;
 	// File list for TransferIntermediate from spool directory.(full path)
@@ -119,8 +114,6 @@ protected:
 	bool m_vm_checkpoint;
 	bool m_vm_no_output_vm;
 	bool m_vm_hardware_vt;
-	StringList m_vm_cdrom_files;
-	bool m_vm_transfer_cdrom_files;
 	MyString m_classad_arg;
 	MyString m_arg_file;
 
diff --git a/src/condor_vm-gahp/vmgahp.cpp b/src/condor_vm-gahp/vmgahp.cpp
index 36d30db..58dc657 100644
--- a/src/condor_vm-gahp/vmgahp.cpp
+++ b/src/condor_vm-gahp/vmgahp.cpp
@@ -692,11 +692,10 @@ VMGahp::executeStart(VMRequest *req)
 	// TBD: tstclair this totally needs to be re-written
 #if defined (HAVE_EXT_LIBVIRT) && !defined(VMWARE_ONLY)
 	if(strcasecmp(vmtype, CONDOR_VM_UNIVERSE_XEN) == 0 ) {
-		new_vm = new XenType(m_gahp_config->m_vm_script.Value(),
-				vmworkingdir.Value(), m_jobAd);
+		new_vm = new XenType( vmworkingdir.Value(), m_jobAd );
 		ASSERT(new_vm);
 	}else if(strcasecmp(vmtype, CONDOR_VM_UNIVERSE_KVM) == 0) {
-	  new_vm = new KVMType(m_gahp_config->m_vm_script.Value(),
+	  new_vm = new KVMType(
 				vmworkingdir.Value(), m_jobAd);
 		ASSERT(new_vm);
 	}else
diff --git a/src/condor_vm-gahp/vmgahp_config.cpp b/src/condor_vm-gahp/vmgahp_config.cpp
index 7309279..f99fc09 100644
--- a/src/condor_vm-gahp/vmgahp_config.cpp
+++ b/src/condor_vm-gahp/vmgahp_config.cpp
@@ -29,6 +29,7 @@ VMGahpConfig::VMGahpConfig()
 	m_vm_max_memory = 0;
 	m_vm_networking = false;
 	m_vm_hardware_vt = false;
+    m_vm_script = "none";
 }
 
 VMGahpConfig& VMGahpConfig::
diff --git a/src/condor_vm-gahp/vmgahp_main.cpp b/src/condor_vm-gahp/vmgahp_main.cpp
index c45ebe5..e56f28b 100644
--- a/src/condor_vm-gahp/vmgahp_main.cpp
+++ b/src/condor_vm-gahp/vmgahp_main.cpp
@@ -431,7 +431,7 @@ void main_init(int argc, char *argv[])
 	  if( (strcasecmp(vmtype.Value(), CONDOR_VM_UNIVERSE_XEN) == 0)) {
 			priv_state priv = set_root_priv();
 
-			if( (VirshType::testXen(gahpconfig) == false) || (XenType::checkXenParams(gahpconfig) == false) ) {
+			if( XenType::checkXenParams(gahpconfig) == false ) {
 				vmprintf(D_ALWAYS, "\nERROR: the vm_type('%s') cannot "
 						"be used.\n", vmtype.Value());
 				DC_Exit(0);
@@ -440,7 +440,7 @@ void main_init(int argc, char *argv[])
 	  }else if ( (strcasecmp(vmtype.Value(), CONDOR_VM_UNIVERSE_KVM) == 0)) {
 			priv_state priv = set_root_priv();
 
-			if( (VirshType::testXen(gahpconfig) == false) || (KVMType::checkXenParams(gahpconfig) == false) ) {
+			if( KVMType::checkXenParams(gahpconfig) == false ) {
 				vmprintf(D_ALWAYS, "\nERROR: the vm_type('%s') cannot "
 						"be used.\n", vmtype.Value());
 				DC_Exit(0);
diff --git a/src/condor_vm-gahp/vmware_type.cpp b/src/condor_vm-gahp/vmware_type.cpp
index 29f725c..20985f9 100644
--- a/src/condor_vm-gahp/vmware_type.cpp
+++ b/src/condor_vm-gahp/vmware_type.cpp
@@ -910,40 +910,6 @@ VMwareType::readVMXfile(const char *filename, const char *dirpath)
 		}
 	}
 
-	if( m_iso_file.IsEmpty() == false ) {
-		// There is an ISO iamge. So we use it as a CDROM
-		if( cdrom_devices.isEmpty() ) {
-			vmprintf(D_ALWAYS, "Job user defined files for a CDROM, "
-					"but no CDROM device is found in a vmx file\n");
-			m_result_msg = VMGAHP_ERR_JOBCLASSAD_VMWARE_NO_CDROM_DEVICE;
-			return false;
-		}
-
-		cdrom_devices.rewind();
-		// Obtain the first device name for CDROM
-		cdrom = cdrom_devices.next();
-
-		MyString tmp_string;
-		tmp_string.sprintf("%s.present = \"TRUE\"", cdrom);
-		m_configVars.append(tmp_string.Value());
-
-		if( m_local_iso ) {
-			// use basename
-			tmp_string.sprintf("%s.fileName = \"%s\"", cdrom, 
-					condor_basename(m_iso_file.Value()));
-		}else {
-			tmp_string.sprintf("%s.fileName = \"%s\"", cdrom, 
-					m_iso_file.Value());
-		}
-		m_configVars.append(tmp_string.Value());
-
-		tmp_string.sprintf("%s.deviceType = \"cdrom-image\"", cdrom);
-		m_configVars.append(tmp_string.Value());
-
-		tmp_string.sprintf("%s.autodetect = \"TRUE\"", cdrom);
-		m_configVars.append(tmp_string.Value());
-	}
-
 	return true;
 }
 
@@ -1793,16 +1759,6 @@ VMwareType::CreateConfigFile()
 		}
 	}
 
-	if( (m_vm_cdrom_files.isEmpty() == false) && !m_has_iso ) {
-		// Create ISO file
-		if( createISO() == false ) {
-			vmprintf(D_ALWAYS, "Cannot create a ISO file for CDROM\n");
-			m_iso_file = "";
-			m_result_msg = VMGAHP_ERR_CANNOT_CREATE_ISO_FILE;
-			return false;
-		}
-	}
-
 	// Create vm config file
 	if( createTempFile(VMWARE_TMP_TEMPLATE, VMWARE_TMP_CONFIG_SUFFIX, 
 				tmp_config_name) == false ) {
@@ -1986,7 +1942,6 @@ VMwareType::createCkptFiles()
 					!has_suffix(tmp_file, ".log") &&
 					!has_suffix(tmp_file, VMWARE_WRITELOCK_SUFFIX ) &&
 					!has_suffix(tmp_file, VMWARE_READLOCK_SUFFIX ) &&
-					!filelist_contains_file(tmp_file, &m_vm_cdrom_files, true) &&
 					strcmp(condor_basename(tmp_file), m_vmware_vmx.Value())) {
 				// We update mtime and atime of all files 
 				// except vmdk, iso, log, lock files, cdrom file, and 
diff --git a/src/condor_vm-gahp/xen_type.linux.cpp b/src/condor_vm-gahp/xen_type.linux.cpp
index cdcdf31..22c4ecb 100644
--- a/src/condor_vm-gahp/xen_type.linux.cpp
+++ b/src/condor_vm-gahp/xen_type.linux.cpp
@@ -48,30 +48,7 @@
 
 extern VMGahp *vmgahp;
 
-static MyString
-getScriptErrorString(const char* fname)
-{
-	MyString err_msg;
-	FILE *file = NULL;
-	char buffer[1024];
-	file = safe_fopen_wrapper(fname, "r");
-
-	if( !file ) {
-		err_msg = VMGAHP_ERR_INTERNAL;
-		return err_msg;
-	}
-
-	memset(buffer, 0, sizeof(buffer));
-	while( fgets(buffer, sizeof(buffer), file) != NULL ) {
-		err_msg += buffer;
-		memset(buffer, 0, sizeof(buffer));
-	}
-	fclose(file);
-	return err_msg;
-}
-
-VirshType::VirshType(const char* scriptname, const char* workingpath,
-		ClassAd* ad) : VMType("", scriptname, workingpath, ad)
+VirshType::VirshType(const char* workingpath,ClassAd* ad) : VMType("", "none", workingpath, ad)
 {
 	m_cputime_before_suspend = 0;
 	m_xen_hw_vt = false;
@@ -135,11 +112,10 @@ VirshType::Start()
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::Start\n");
 
-	if( (m_scriptname.Length() == 0) ||
-		(m_configfile.Length() == 0)) {
+	if( (m_configfile.Length() == 0)) {
 
 	        m_result_msg = VMGAHP_ERR_INTERNAL;
-		vmprintf(D_FULLDEBUG, "Script name was not set or config file was not set\nscriptname: %s\nconfigfile: %s\n", m_scriptname.Value(), m_configfile.Value());
+		vmprintf(D_FULLDEBUG, "Config file was not set configfile: %s\n", m_configfile.Value());
 		return false;
 	}
 
@@ -211,8 +187,7 @@ VirshType::Shutdown()
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::Shutdown\n");
 
-	if( (m_scriptname.Length() == 0) ||
-		(m_configfile.Length() == 0)) {
+	if( (m_configfile.Length() == 0) ) {
 		m_result_msg = VMGAHP_ERR_INTERNAL;
 		return false;
 	}
@@ -297,8 +272,7 @@ VirshType::Checkpoint()
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::Checkpoint\n");
 
-	if( (m_scriptname.Length() == 0) ||
-		(m_configfile.Length() == 0)) {
+	if( (m_configfile.Length() == 0)) {
 		m_result_msg = VMGAHP_ERR_INTERNAL;
 		return false;
 	}
@@ -397,6 +371,9 @@ bool VirshType::CreateVirshConfigFile(const char* filename)
       classad_string += "\"\n";
     }
   input_strings.append(classad_string.Value());
+  
+  vmprintf(D_FULLDEBUG, "LIBVIRT_XML_SCRIPT_ARGS input_strings= %s\n", input_strings.print_to_string() );
+  
   int ret = systemCommand(args, PRIV_ROOT, &output_strings, &input_strings, &error_strings, false);
   error_strings.rewind();
   if(ret != 0)
@@ -429,18 +406,11 @@ bool
 VirshType::ResumeFromSoftSuspend(void)
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::ResumeFromSoftSuspend\n");
-	if( (m_scriptname.Length() == 0) ||
-		(m_configfile.Length() == 0)) {
+	if( (m_configfile.Length() == 0)) {
 		return false;
 	}
 
 	if( m_is_soft_suspended ) {
-		// ArgList systemcmd;
-// 		systemcmd.AppendArg(m_scriptname);
-// 		systemcmd.AppendArg("unpause");
-// 		systemcmd.AppendArg(m_configfile);
-
-// 		int result = systemCommand(systemcmd, PRIV_ROOT);
 
 		priv_state priv = set_root_priv();
 		virDomainPtr dom = virDomainLookupByName(m_libvirt_connection, m_vm_name.Value());
@@ -472,8 +442,7 @@ VirshType::SoftSuspend()
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::SoftSuspend\n");
 
-	if( (m_scriptname.Length() == 0) ||
-		(m_configfile.Length() == 0)) {
+	if( (m_configfile.Length() == 0)) {
 		m_result_msg = VMGAHP_ERR_INTERNAL;
 		return false;
 	}
@@ -487,13 +456,6 @@ VirshType::SoftSuspend()
 		return false;
 	}
 
-// 	ArgList systemcmd;
-// 	systemcmd.AppendArg(m_scriptname);
-// 	systemcmd.AppendArg("pause");
-// 	systemcmd.AppendArg(m_configfile);
-
-// 	int result = systemCommand(systemcmd, PRIV_ROOT);
-
 	priv_state priv = set_root_priv();
 	virDomainPtr dom = virDomainLookupByName(m_libvirt_connection, m_vm_name.Value());
 	set_priv(priv);
@@ -523,8 +485,7 @@ VirshType::Suspend()
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::Suspend\n");
 
-	if( (m_scriptname.Length() == 0) ||
-		(m_configfile.Length() == 0)) {
+	if( (m_configfile.Length() == 0) ) {
 		m_result_msg = VMGAHP_ERR_INTERNAL;
 		return false;
 	}
@@ -552,16 +513,6 @@ VirshType::Suspend()
 	makeNameofSuspendfile(tmpfilename);
 	unlink(tmpfilename.Value());
 
-// 	StringList cmd_out;
-
-// 	ArgList systemcmd;
-// 	systemcmd.AppendArg(m_scriptname);
-// 	systemcmd.AppendArg("suspend");
-// 	systemcmd.AppendArg(m_configfile);
-// 	systemcmd.AppendArg(tmpfilename);
-
-// 	int result = systemCommand(systemcmd, PRIV_ROOT, &cmd_out);
-
 	priv_state priv = set_root_priv();
 	virDomainPtr dom = virDomainLookupByName(m_libvirt_connection, m_vm_name.Value());
 	set_priv(priv);
@@ -598,8 +549,7 @@ VirshType::Resume()
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::Resume\n");
 
-	if( (m_scriptname.Length() == 0) ||
-		(m_configfile.Length() == 0)) {
+	if((m_configfile.Length() == 0)) {
 		m_result_msg = VMGAHP_ERR_INTERNAL;
 		return false;
 	}
@@ -625,15 +575,6 @@ VirshType::Resume()
 		return false;
 	}
 
-// 	StringList cmd_out;
-
-// 	ArgList systemcmd;
-// 	systemcmd.AppendArg(m_scriptname);
-// 	systemcmd.AppendArg("resume");
-// 	systemcmd.AppendArg(m_suspendfile);
-
-// 	int result = systemCommand(systemcmd, PRIV_ROOT, &cmd_out);
-
 	priv_state priv = set_root_priv();
 	int result = virDomainRestore(m_libvirt_connection, m_suspendfile.Value());
 	set_priv(priv);
@@ -660,44 +601,11 @@ VirshType::Status()
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::Status\n");
 
- 	if( (m_scriptname.Length() == 0) ||
- 		(m_configfile.Length() == 0)) {
+ 	if((m_configfile.Length() == 0)) {
  		m_result_msg = VMGAHP_ERR_INTERNAL;
  		return false;
  	}
 
-//      This is no longer needed, because we are not getting the
-//      information from the script.
-
-//  	if( m_is_soft_suspended ) {
-//  		// If a VM is softly suspended,
-//  		// we cannot get info about the VM by using script
-//  		m_result_msg = VMGAHP_STATUS_COMMAND_STATUS;
-//  		m_result_msg += "=";
-// 		m_result_msg += "SoftSuspended";
-// 		return true;
-// 	}
-
-//      Why was this ever here?  This is also no longer needed; we can
-//      query libvirt for the information as many times as we want,
-//      and it should not take a long time...
-
-// 	// Check the last time when we executed status.
-// 	// If the time is in 10 seconds before current time,
-// 	// We will not execute status again.
-// 	// Maybe this case may happen when it took long time
-// 	// to execute the last status.
-// 	UtcTime cur_time;
-// 	long diff_seconds = 0;
-
-// 	cur_time.getTime();
-// 	diff_seconds = cur_time.seconds() - m_last_status_time.seconds();
-
-// 	if( (diff_seconds < 10) && !m_last_status_result.IsEmpty() ) {
-// 		m_result_msg = m_last_status_result;
-// 		return true;
-// 	}
-
  	m_result_msg = "";
 
  	if( m_vm_networking ) {
@@ -1011,6 +919,8 @@ VirshType::parseXenDiskParam(const char *format)
 		return false;
 	}
 
+    vmprintf(D_FULLDEBUG, "format = %s\n", format);
+
 	StringList working_files;
 	find_all_files_in_dir(m_workingpath.Value(), working_files, true);
 
@@ -1024,7 +934,9 @@ VirshType::parseXenDiskParam(const char *format)
 	while( (one_disk = disk_files.next() ) != NULL ) {
 		// found a disk file
 		StringList single_disk_file(one_disk, ":");
-		if( single_disk_file.number() != 3 ) {
+        int iNumParams = single_disk_file.number();
+		if( iNumParams < 3 || iNumParams > 4 ) 
+        {
 			return false;
 		}
 
@@ -1071,15 +983,16 @@ VirshType::parseXenDiskParam(const char *format)
 		MyString disk_perm = single_disk_file.next();
 		disk_perm.trim();
 
-		if( !strcasecmp(disk_perm.Value(), "w") ||
-				!strcasecmp(disk_perm.Value(), "rw")) {
+		if( !strcasecmp(disk_perm.Value(), "w") || !strcasecmp(disk_perm.Value(), "rw")) 
+        {
 			// check if this disk file is writable
 			if( check_vm_write_access_file(disk_file.Value(), false) == false ) {
 				vmprintf(D_ALWAYS, "xen disk image file('%s') cannot be modified\n",
 					   	disk_file.Value());
 				return false;
 			}
-		}else {
+		}else 
+        {
 			// check if this disk file is readable
 			if( check_vm_read_access_file(disk_file.Value(), false) == false ) {
 				vmprintf(D_ALWAYS, "xen disk image file('%s') cannot be read\n",
@@ -1093,6 +1006,15 @@ VirshType::parseXenDiskParam(const char *format)
 		newdisk->filename = disk_file;
 		newdisk->device = disk_device;
 		newdisk->permission = disk_perm;
+
+        // only when a format is specified do we check
+        if (iNumParams == 4 )
+        {
+            newdisk->format = single_disk_file.next();
+            newdisk->format.trim();
+            newdisk->format.lower_case();
+        }
+        
 		m_disk_list.Append(newdisk);
 	}
 
@@ -1105,7 +1027,7 @@ VirshType::parseXenDiskParam(const char *format)
 }
 
 
-// This function should be called after parseVirshDiskParam and createISO
+// This function should be called after parseVirshDiskParam
 MyString
 VirshType::makeVirshDiskString(void)
 {
@@ -1120,7 +1042,22 @@ VirshType::makeVirshDiskString(void)
 			xendisk += "</disk>";
 		}
 		first_disk = false;
-		xendisk += "<disk type='file'>";
+        if ( strstr (vdisk->filename.Value(), ".iso") )
+        {
+            xendisk += "<disk type='file' device='cdrom'>";
+        }
+        else
+        {
+            xendisk += "<disk type='file'>";
+        }
+
+        if (vdisk->format.Length())
+        {
+           xendisk += "<driver name='qemu' type='";
+           xendisk += vdisk->format;
+           xendisk += "'/>";
+        }
+
 		xendisk += "<source file='";
 		xendisk += vdisk->filename;
 		xendisk += "'/>";
@@ -1134,18 +1071,6 @@ VirshType::makeVirshDiskString(void)
 	}
 	xendisk += "</disk>";
 
-	if( m_iso_file.IsEmpty() == false ) {
-		xendisk += "<disk type='file' device='cdrom'>";
-		xendisk += "<source file='";
-		xendisk += m_iso_file;
-		xendisk += "'/>";
-		xendisk += "<target dev='";
-		xendisk += m_xen_cdrom_device;
-		xendisk += "'/>";
-		xendisk += "<readonly/>";
-		xendisk += "</disk>";
-	}
-
 	return xendisk;
 }
 
@@ -1269,46 +1194,6 @@ bool KVMType::checkXenParams(VMGahpConfig * config)
   if( !config ) {
     return false;
   }
-// find script program for Virsh
-  config_value = param("VM_SCRIPT");
-  if( !config_value ) {
-    vmprintf(D_ALWAYS,
-	     "\nERROR: 'VM_SCRIPT' not defined in configuration\n");
-    return false;
-  }
-  fixedvalue = delete_quotation_marks(config_value);
-  free(config_value);
-
-
-  struct stat sbuf;
-  if( stat(fixedvalue.Value(), &sbuf ) < 0 ) {
-    vmprintf(D_ALWAYS, "\nERROR: Failed to access the script "
-	     "program for Virsh:(%s:%s)\n", fixedvalue.Value(),
-	     strerror(errno));
-    return false;
-  }
-
-  // Other writable bit
-  if( sbuf.st_mode & S_IWOTH ) {
-    vmprintf(D_ALWAYS, "\nFile Permission Error: "
-	     "other writable bit is not allowed for \"%s\" "
-	     "due to security issues\n", fixedvalue.Value());
-    return false;
-  }
-
-  // is executable?
-  if( !(sbuf.st_mode & S_IXUSR) ) {
-    vmprintf(D_ALWAYS, "\nFile Permission Error: "
-	     "User executable bit is not set for \"%s\"\n", fixedvalue.Value());
-    return false;
-  }
-
-
-  // Can read script program?
-  if( check_vm_read_access_file(fixedvalue.Value(), true) == false ) {
-    return false;
-  }
-  config->m_vm_script = fixedvalue;
 
   // Do we need to check for both read and write access?
   if(check_vm_read_access_file("/dev/kvm", true) == false) {
@@ -1342,51 +1227,7 @@ XenType::checkXenParams(VMGahpConfig* config)
 	if( !config ) {
 		return false;
 	}
-
-	// find script program for Virsh
-	config_value = param("XEN_SCRIPT");
-	if( !config_value )
-	{
-		if (!(config_value = param("VM_SCRIPT")))
-		{
-			vmprintf(D_ALWAYS,
-		         "\nERROR: Neither 'XEN_SCRIPT' or 'VM_SCRIPT' not defined in configuration\n");
-			return false;
-		}
-
-	}
-	fixedvalue = delete_quotation_marks(config_value);
-	free(config_value);
-
-	struct stat sbuf;
-	if( stat(fixedvalue.Value(), &sbuf ) < 0 ) {
-		vmprintf(D_ALWAYS, "\nERROR: Failed to access the script "
-				"program for Virsh:(%s:%s)\n", fixedvalue.Value(),
-			   	strerror(errno));
-		return false;
-	}
-
-	// Other writable bit
-	if( sbuf.st_mode & S_IWOTH ) {
-		vmprintf(D_ALWAYS, "\nFile Permission Error: "
-				"other writable bit is not allowed for \"%s\" "
-				"due to security issues\n", fixedvalue.Value());
-		return false;
-	}
-
-	// is executable?
-	if( !(sbuf.st_mode & S_IXUSR) ) {
-		vmprintf(D_ALWAYS, "\nFile Permission Error: "
-			"User executable bit is not set for \"%s\"\n", fixedvalue.Value());
-		return false;
-	}
-
-	// Can read script program?
-	if( check_vm_read_access_file(fixedvalue.Value(), true) == false ) {
-		return false;
-	}
-	config->m_vm_script = fixedvalue;
-
+	
 	// Read XEN_BOOTLOADER (required parameter)
 	config_value = param("XEN_BOOTLOADER");
 	if( !config_value ) {
@@ -1415,27 +1256,6 @@ XenType::killVMFast(const char* vmname)
 	return VirshType::killVMFast(vmname, libvirt_connection);
 }
 
-bool
-VirshType::testXen(VMGahpConfig* config)
-{
-	if( !config ) {
-		return false;
-	}
-
-
-	ArgList systemcmd;
-	systemcmd.AppendArg(config->m_vm_script);
-	systemcmd.AppendArg("check");
-
-	int result = systemCommand(systemcmd, PRIV_ROOT);
-	if( result != 0 ) {
-		vmprintf( D_ALWAYS, "Virsh script check failed:\n" );
-		return false;
-	}
-
-	return true;
-}
-
 void
 VirshType::makeNameofSuspendfile(MyString& name)
 {
@@ -1568,8 +1388,7 @@ VirshType::killVM()
 {
 	vmprintf(D_FULLDEBUG, "Inside VirshType::killVM\n");
 
-	if( (m_scriptname.Length() == 0 ) ||
-			( m_vm_name.Length() == 0 ) ) {
+	if( ( m_vm_name.Length() == 0 ) ) {
 		return false;
 	}
 
@@ -1612,55 +1431,8 @@ VirshType::killVMFast(const char* vmname, virConnectPtr libvirt_con)
 	return ret;
 }
 
-bool
-VirshType::createISO()
-{
-	vmprintf(D_FULLDEBUG, "Inside VirshType::createISO\n");
-
-	m_iso_file = "";
-
-	if( m_scriptname.IsEmpty() || m_vm_cdrom_files.isEmpty() ) {
-		return false;
-	}
-
-	MyString tmp_config;
-	MyString tmp_file;
-	if( createISOConfigAndName(&m_vm_cdrom_files, tmp_config,
-				tmp_file) == false ) {
-		return false;
-	}
-
-	ArgList systemcmd;
-	if( m_prog_for_script.IsEmpty() == false ) {
-		systemcmd.AppendArg(m_prog_for_script);
-	}
-	systemcmd.AppendArg(m_scriptname);
-	systemcmd.AppendArg("createiso");
-	systemcmd.AppendArg(tmp_config);
-	systemcmd.AppendArg(tmp_file);
-
-	int result = systemCommand(systemcmd, m_file_owner);
-	if( result != 0 ) {
-		return false;
-	}
-
-#if defined(LINUX)
-	// To avoid lazy-write behavior to disk
-	sync();
-#endif
-
-	unlink(tmp_config.Value());
-	m_iso_file = tmp_file;
-	m_local_iso = true;
-
-	// Insert the name of created iso file to classAd for future use
-	m_classAd.Assign("VMPARAM_ISO_NAME", condor_basename(m_iso_file.Value()));
-	return true;
-}
-
-
-XenType::XenType(const char * scriptname, const char * workingpath, ClassAd * ad)
-  : VirshType(scriptname, workingpath, ad)
+XenType::XenType(const char * workingpath, ClassAd * ad)
+  : VirshType(workingpath, ad)
 {
 
   m_sessionID="xen:///";
@@ -1771,9 +1543,9 @@ bool XenType::CreateConfigFile()
 
 	MyString xen_disk;
 	// Read the parameter of Virsh Disk
-	if( m_classAd.LookupString(VMPARAM_XEN_DISK, xen_disk) != 1 ) {
+	if( m_classAd.LookupString(VMPARAM_VM_DISK, xen_disk) != 1 ) {
 		vmprintf(D_ALWAYS, "%s cannot be found in job classAd\n",
-				VMPARAM_XEN_DISK);
+				VMPARAM_VM_DISK);
 		m_result_msg = VMGAHP_ERR_JOBCLASSAD_XEN_NO_DISK_PARAM;
 		return false;
 	}
@@ -1797,20 +1569,6 @@ bool XenType::CreateConfigFile()
 		m_xen_kernel_params.trim();
 	}
 
-	// Read the parameter of Virsh cdrom device
-	if( m_classAd.LookupString(VMPARAM_XEN_CDROM_DEVICE, m_xen_cdrom_device) == 1 ) {
-		m_xen_cdrom_device.trim();
-		m_xen_cdrom_device.lower_case();
-	}
-
-	if( (m_vm_cdrom_files.isEmpty() == false) &&
-			m_xen_cdrom_device.IsEmpty() ) {
-		vmprintf(D_ALWAYS, "A job user defined files for a CDROM, "
-				"but the job user didn't define CDROM device\n");
-		m_result_msg = VMGAHP_ERR_JOBCLASSAD_XEN_NO_CDROM_DEVICE;
-		return false;
-	}
-
 	// Check whether this is re-starting after vacating checkpointing,
 	if( m_transfer_intermediate_files.isEmpty() == false ) {
 		// we have chckecpointed files
@@ -1834,22 +1592,13 @@ bool XenType::CreateConfigFile()
 		}
 	}
 
-	if( (m_vm_cdrom_files.isEmpty() == false) && !m_has_iso) {
-		// Create ISO file
-		if( createISO() == false ) {
-			vmprintf(D_ALWAYS, "Cannot create a ISO file for CDROM\n");
-			m_result_msg = VMGAHP_ERR_CANNOT_CREATE_ISO_FILE;
-			return false;
-		}
-	}
-
 	// Here we check if this job actually can use checkpoint
 	if( m_vm_checkpoint ) {
 		// For vm checkpoint in Virsh
 		// 1. all disk files should be in a shared file system
 		// 2. If a job uses CDROM files, it should be
 		// 	  single ISO file and be in a shared file system
-		if( m_has_transferred_disk_file || m_local_iso ) {
+		if( m_has_transferred_disk_file ) {
 			// In this case, we cannot use vm checkpoint for Virsh
 			// To use vm checkpoint in Virsh,
 			// all disk and iso files should be in a shared file system
@@ -1881,8 +1630,8 @@ bool XenType::CreateConfigFile()
 }
 
 
-KVMType::KVMType(const char * scriptname, const char * workingpath, ClassAd * ad)
-  : VirshType(scriptname, workingpath, ad)
+KVMType::KVMType(const char * workingpath, ClassAd * ad)
+  : VirshType(workingpath, ad)
 {
 
 	m_sessionID="qemu:///session";
@@ -1911,9 +1660,9 @@ KVMType::CreateConfigFile()
 
 	MyString kvm_disk;
 	// Read the parameter of Virsh Disk
-	if( m_classAd.LookupString(VMPARAM_KVM_DISK, kvm_disk) != 1 ) {
+	if( m_classAd.LookupString(VMPARAM_VM_DISK, kvm_disk) != 1 ) {
 		vmprintf(D_ALWAYS, "%s cannot be found in job classAd\n",
-				VMPARAM_KVM_DISK);
+				VMPARAM_VM_DISK);
 		m_result_msg = VMGAHP_ERR_JOBCLASSAD_XEN_NO_DISK_PARAM;
 		return false;
 	}
@@ -1932,20 +1681,6 @@ KVMType::CreateConfigFile()
 	}
 	set_priv(priv);
 
-	// Read the parameter of Virsh cdrom device
-	if( m_classAd.LookupString(VMPARAM_KVM_CDROM_DEVICE, m_xen_cdrom_device) == 1 ) {
-		m_xen_cdrom_device.trim();
-		m_xen_cdrom_device.lower_case();
-	}
-
-	if( (m_vm_cdrom_files.isEmpty() == false) &&
-			m_xen_cdrom_device.IsEmpty() ) {
-		vmprintf(D_ALWAYS, "A job user defined files for a CDROM, "
-				"but the job user didn't define CDROM device\n");
-		m_result_msg = VMGAHP_ERR_JOBCLASSAD_KVM_NO_CDROM_DEVICE;
-		return false;
-	}
-
 	// Check whether this is re-starting after vacating checkpointing,
 	if( m_transfer_intermediate_files.isEmpty() == false ) {
 		// we have chckecpointed files
@@ -1969,22 +1704,11 @@ KVMType::CreateConfigFile()
 		}
 	}
 
-	if( (m_vm_cdrom_files.isEmpty() == false) && !m_has_iso) {
-		// Create ISO file
-		if( createISO() == false ) {
-			vmprintf(D_ALWAYS, "Cannot create a ISO file for CDROM\n");
-			m_result_msg = VMGAHP_ERR_CANNOT_CREATE_ISO_FILE;
-			return false;
-		}
-	}
-
 	// Here we check if this job actually can use checkpoint
 	if( m_vm_checkpoint ) {
 		// For vm checkpoint in Virsh
 		// 1. all disk files should be in a shared file system
-		// 2. If a job uses CDROM files, it should be
-		// 	  single ISO file and be in a shared file system
-		if( m_has_transferred_disk_file || m_local_iso ) {
+		if( m_has_transferred_disk_file ) {
 			// In this case, we cannot use vm checkpoint for Virsh
 			// To use vm checkpoint in Virsh,
 			// all disk and iso files should be in a shared file system
diff --git a/src/condor_vm-gahp/xen_type.linux.h b/src/condor_vm-gahp/xen_type.linux.h
index 3e2601d..9d1af11 100644
--- a/src/condor_vm-gahp/xen_type.linux.h
+++ b/src/condor_vm-gahp/xen_type.linux.h
@@ -34,15 +34,15 @@ class XenDisk {
 		MyString filename;
 		MyString device;
 		MyString permission;
+        MyString format;
 };
 
 class VirshType : public VMType
 {
 public:
-	static bool testXen(VMGahpConfig* config);
 	static bool killVMFast(const char* script, virConnectPtr libvirt_con);
 
-	VirshType(const char* scriptname, const char* workingpath, ClassAd* ad);
+	VirshType(const char* workingpath, ClassAd* ad);
 
 	virtual ~VirshType();
 
@@ -112,7 +112,7 @@ protected:
 class XenType : public VirshType
 {
  public:
-  XenType(const char* scriptname, const char* workingpath, ClassAd* ad);
+  XenType(const char* workingpath, ClassAd* ad);
   static bool checkXenParams(VMGahpConfig* config);
   virtual bool CreateConfigFile();
   static bool killVMFast(const char* script);
@@ -124,7 +124,7 @@ class XenType : public VirshType
 class KVMType : public VirshType
 {
  public:
-  KVMType(const char* scriptname, const char* workingpath, ClassAd* ad);
+  KVMType(const char* workingpath, ClassAd* ad);
   static bool checkXenParams(VMGahpConfig* config);
   virtual bool CreateConfigFile();
   static bool killVMFast(const char* script);
