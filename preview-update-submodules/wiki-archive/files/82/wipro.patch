diff --git a/src/condor_c++_util/file_transfer.cpp b/src/condor_c++_util/file_transfer.cpp
index 951221d..1402864 100644
--- a/src/condor_c++_util/file_transfer.cpp
+++ b/src/condor_c++_util/file_transfer.cpp
@@ -763,7 +763,47 @@ FileTransfer::Init( ClassAd *Ad, bool want_check_perms, priv_state priv,
 			SpooledIntermediateFiles = strnewp(dynamic_buf);
 			free(dynamic_buf);
 			dynamic_buf = NULL;
-		}
+		} else { // WIPRO Sateesh 25mar2009 - BEGIN
+				Ad->LookupString(ATTR_JOB_REMOTE_IWD,&dynamic_buf);
+				if ( dynamic_buf && *dynamic_buf ) { // WIPRO 1stmay2009
+				// If remote iwd has intermediate files, insert that
+				MyString filelist;
+				const char* current_file = NULL;
+				bool print_comma = false;
+				// if desired_priv_state is PRIV_UNKNOWN, the Directory
+				// object treats that just like we do: don't switch... 
+				Directory remote_iwd( dynamic_buf, desired_priv_state );
+				while ( (current_file=remote_iwd.Next()) ) {
+					if ( UserLogFile &&
+						 !file_strcmp(UserLogFile,current_file) )
+					{
+					// dont send UserLog file to the starter
+						continue;
+					}
+
+					if ( InputFiles->file_contains(current_file) ) {
+						continue;
+					}
+
+					if ( print_comma ) {
+						filelist += ",";
+					} else {
+						print_comma = true;
+					}
+					filelist += current_file;
+				}
+				if ( print_comma ) {
+				// we know that filelist has at least one entry, so
+				// insert it as an attribute into the ClassAd
+					MyString intermediateFilesBuf;
+					intermediateFilesBuf.sprintf( "%s=\"%s\"",
+					ATTR_TRANSFER_INTERMEDIATE_FILES,filelist.Value());
+					Ad->InsertOrUpdate(intermediateFilesBuf.Value());
+					dprintf(D_FULLDEBUG,"%s\n",intermediateFilesBuf.Value());
+				}
+				dynamic_buf = NULL;
+			}
+		} //WIPRO END
 	}
 	
 
diff --git a/src/condor_starter.V6.1/vm_proc.cpp b/src/condor_starter.V6.1/vm_proc.cpp
index 8f65f4a..2d25ab5 100644
--- a/src/condor_starter.V6.1/vm_proc.cpp
+++ b/src/condor_starter.V6.1/vm_proc.cpp
@@ -188,11 +188,12 @@ VMProc::StartJob()
 		return false;
 	}
 
+	// WIPRO sateesh 24mar2009 handle remote_initialdir
 	// // // // // // 
 	// Get IWD 
 	// // // // // // 
-	//const char* job_iwd = Starter->jic->jobRemoteIWD();
-	//dprintf( D_ALWAYS, "IWD: %s\n", job_iwd );
+	const char* job_iwd = Starter->jic->jobRemoteIWD();
+	dprintf( D_ALWAYS, "IWD: %s\n", job_iwd );
 
 	// // // // // // 
 	// Environment 
@@ -322,8 +323,14 @@ VMProc::StartJob()
 	ASSERT(m_vmgahp);
 
 	m_vmgahp->start_err_msg = "";
-	if( m_vmgahp->startUp(&job_env, Starter->GetWorkingDir(), nice_inc, 
-				&fi) == false ) {
+	// WIPRO sateesh 24mar2009 handle vmgahp startup if remote_initialdir is specified.  - BEGIN
+	bool p_rtn;
+	if( job_iwd && *job_iwd )
+		p_rtn = m_vmgahp->startUp(&job_env, job_iwd, nice_inc, &fi);
+	else
+		p_rtn = m_vmgahp->startUp(&job_env, Starter->GetWorkingDir(), nice_inc, &fi);	
+
+	if( p_rtn == false ) { // WIPRO - END
 		JobPid = -1;
 		err_msg = "Failed to start vm-gahp server";
 		dprintf( D_ALWAYS, "%s\n", err_msg.Value());
@@ -352,8 +359,12 @@ VMProc::StartJob()
 	new_req->setTimeout(m_vmoperation_timeout + 120);
 
 	int p_result;
-	p_result = new_req->vmStart(m_vm_type.Value(), Starter->GetWorkingDir());
-
+	// WIPRO sateesh 24mar2009 handle vm startup if remote_initialdir is specified.  - BEGIN
+    if ( job_iwd && *job_iwd )
+        p_result = new_req->vmStart(m_vm_type.Value(), job_iwd);
+    else
+        p_result = new_req->vmStart(m_vm_type.Value(), Starter->GetWorkingDir());
+	// WIPRO - END
 	// Because req is blocking mode, result should be VMGAHP_REQ_COMMAND_DONE
 	if(p_result != VMGAHP_REQ_COMMAND_DONE) {
 		err_msg = "Failed to create a new VM";
@@ -875,6 +886,10 @@ VMProc::ShutdownGraceful()
 	}
 
 	bool delete_working_files = true;
+	// WIPRO sateesh 24mar2009 not deleting the working dir  if remote_initialdir is specified
+	if ( Starter->jic->jobRemoteIWD() )
+		delete_working_files = false;
+
 
 	if( m_vm_checkpoint ) {
 		// We need to do checkpoint before vacating.
@@ -1198,6 +1213,10 @@ VMProc::PublishUpdateAd( ClassAd* ad )
 		unsigned long max_image = 0;
 
 		getUsageOfVM(sys_time, user_time, max_image);
+		
+		// WIPRO Manikanta 30Apr09 Added to update CPU Usage of VM in ESX
+		if ( (long)m_vm_cputime > user_time )
+			user_time = m_vm_cputime;
 
 		// Publish it into the ad.
 		ad->Assign(ATTR_JOB_REMOTE_SYS_CPU, (float)sys_time );
diff --git a/src/condor_vm-gahp/vm_type.h b/src/condor_vm-gahp/vm_type.h
index a533d39..84a2025 100644
--- a/src/condor_vm-gahp/vm_type.h
+++ b/src/condor_vm-gahp/vm_type.h
@@ -110,6 +110,9 @@ protected:
 	// Files list in working directory
 	StringList m_initial_working_files;
 
+	// WIPRO sateesh 22May2009
+	MyString m_remote_iwd;
+
 	ClassAd m_classAd;
 	int m_vm_mem;  // VM memory requested in Job classAd
 	bool m_vm_networking;
diff --git a/src/condor_vm-gahp/vmgahp_error_codes.h b/src/condor_vm-gahp/vmgahp_error_codes.h
index 9c6a06a..bf3d5f4 100644
--- a/src/condor_vm-gahp/vmgahp_error_codes.h
+++ b/src/condor_vm-gahp/vmgahp_error_codes.h
@@ -70,4 +70,9 @@
 #define VMGAHP_ERR_JOBCLASSAD_VMWARE_VMX_ERROR "VMGAHP_ERR_JOBCLASSAD_VMWARE_VMX_ERROR"
 #define VMGAHP_ERR_JOBCLASSAD_VMWARE_NO_CDROM_DEVICE "VMGAHP_ERR_JOBCLASSAD_VMWARE_NO_CDROM_DEVICE"
 
+// WIPRO Johnson 27may2009 Error codes for Remote_iwd fixes
+#define VMGAHP_ERR_CANNOT_FIND_VMX_FILE_IN_REMOTE_IWD "VMGAHP_ERR_CANNOT_FIND_VMX_FILE_IN_REMOTE_IWD"
+#define VMGAHP_ERR_CANNOT_ADJUST_VMX_FILE_IN_REMOTE_IWD "VMGAHP_ERR_CANNOT_ADJUST_VMX_FILE_IN_REMOTE_IWD"
+#define VMGAHP_ERR_CANNOT_START_VM_FROM_REMOTE_IWD_FILES "VMGAHP_ERR_CANNOT_START_VM_FROM_REMOTE_IWD_FILES"
+
 #endif
diff --git a/src/condor_vm-gahp/vmware_type.cpp b/src/condor_vm-gahp/vmware_type.cpp
index c5a0fb5..ff2d58e 100644
--- a/src/condor_vm-gahp/vmware_type.cpp
+++ b/src/condor_vm-gahp/vmware_type.cpp
@@ -416,6 +416,10 @@ VMwareType::VMwareType(const char* prog_for_script, const char* scriptname,
 	VMType(prog_for_script, scriptname, workingpath, ad)
 {
 	m_vmtype = CONDOR_VM_UNIVERSE_VMWARE;
+
+	// WIPRO Mani 1st May 09
+	//m_cputime_before_suspend = 0;
+
 	m_need_snapshot = false;
 	m_restart_with_ckpt = false;
 	m_vmware_transfer = false;
@@ -1042,6 +1046,18 @@ VMwareType::Start()
 			vmprintf(D_ALWAYS, "Succeeded to restart with checkpointed files\n");
 			return true;
 		}else {
+			// WIPRO Johnson 26May2009 If Remote IWD is set and not able to start 
+			// vm from that directory files, not allowing to create new config files 
+			// and start vm from scratch. 
+			if( !m_remote_iwd.IsEmpty() ) {
+				vmprintf(D_ALWAYS, "Failed to restart with checkpointed files\n");
+				vmprintf(D_ALWAYS, "Remote_Iwd is set - %s\n",m_remote_iwd.Value());
+				vmprintf(D_ALWAYS, "VM will be held. Fix the problem with the VM\n");
+				vmprintf(D_ALWAYS, "and release the job\n");
+				m_result_msg = VMGAHP_ERR_CANNOT_START_VM_FROM_REMOTE_IWD_FILES;
+				return false;
+			}// WIPRO END 
+
 			// Failed to restart with checkpointed files
 			vmprintf(D_ALWAYS, "Failed to restart with checkpointed files\n");
 			vmprintf(D_ALWAYS, "So, we will try to create a new configuration file\n");
@@ -1123,6 +1139,7 @@ VMwareType::Start()
 
 	setVMStatus(VM_RUNNING);
 	m_start_time.getTime();
+    //m_cpu_time = 0; //WIPRO Mani 1st May 09
 	return true;
 }
 
@@ -1210,6 +1227,7 @@ VMwareType::Shutdown()
 			if( m_vm_no_output_vm ) {
 				// A job user doesn't want to get back VM files.
 				// So we will delete all files in working directory.
+				vmprintf(D_FULLDEBUG, "Inside VMwareType::Shutdown - m_vm_no_output_vm\n");
 				m_delete_working_files = true;
 				m_is_checkpointed = false;
 			}
@@ -1242,6 +1260,7 @@ VMwareType::Shutdown()
 			}
 		}
 		// Now we don't need to keep working files any more
+		vmprintf(D_FULLDEBUG, "Inside VMwareType::Shutdown - getVMStatus VM_RUNNING\n");
 		m_delete_working_files = true;
 		m_is_checkpointed = false;
 	}
@@ -1381,6 +1400,10 @@ VMwareType::Suspend()
 	// Suspend succeeds. So there is no process for VM.
 	m_vm_pid = 0;
 	setVMStatus(VM_SUSPENDED);
+	// WIPRO BEGIN Mani 1st May 09
+	//m_cputime_before_suspend += m_cpu_time;
+	//m_cpu_time = 0;
+	// WIPRO END
 	return true;
 }
 
@@ -1446,6 +1469,8 @@ bool
 VMwareType::Status()
 {
 	vmprintf(D_FULLDEBUG, "Inside VMwareType::Status\n");
+	
+	float cputime=0; // WIPRO MANI	1st May 09
 
 	if( (m_scriptname.Length() == 0) ||
 			(m_configfile.Length() == 0)) {
@@ -1506,6 +1531,7 @@ VMwareType::Status()
 
 	MyString vm_status;
 	int vm_pid = 0;
+	//float cputime = 0; // WIPRO Mani 1st May 
 	cmd_out.rewind();
 	while( (next_line = cmd_out.next()) != NULL ) {
 		one_line = next_line;
@@ -1521,9 +1547,20 @@ VMwareType::Status()
 		}
 
 		parse_param_string(one_line.Value(), name, value, true);
+		vmprintf(D_FULLDEBUG, one_line.Value());
 		if( !name.Length() || !value.Length() ) {
 			continue;
 		}
+		
+		// WIPRO Manikanta 30Apr09 BEGIN
+		if( !strcasecmp(name.Value(), VMGAHP_STATUS_COMMAND_CPUTIME)) {
+			cputime = (float)strtod(value.Value(), (char **)NULL);
+				if( cputime <= 0 ) {
+					cputime = 0;
+				}
+				continue;
+		}
+		// WIPRO END
 
 		if( !strcasecmp(name.Value(), VMGAHP_STATUS_COMMAND_STATUS)) {
 			vm_status = value;
@@ -1597,6 +1634,20 @@ VMwareType::Status()
 		m_result_msg += VMGAHP_STATUS_COMMAND_PID;
 		m_result_msg += "=";
 		m_result_msg += m_vm_pid;
+		// WIPRO Manikanta 30Apr09 - BEGIN
+		if( cputime > 0 ) {
+			// Update vm running time
+			m_cpu_time = cputime;
+
+			m_result_msg += " ";
+			m_result_msg += VMGAHP_STATUS_COMMAND_CPUTIME;
+			m_result_msg += "=";
+			m_result_msg += m_cpu_time;
+			//m_result_msg += (double)(m_cpu_time + m_cputime_before_suspend);
+		}
+		vmprintf(D_FULLDEBUG, "intermediate CPUTIME = %f\n", cputime);
+		// WIPRO END 
+
 		return true;
 
 	}else if( strcasecmp(vm_status.Value(), "Suspended") == 0 ) {
@@ -1737,9 +1788,15 @@ VMwareType::CreateConfigFile()
 		if( findCkptConfig(ckpt_config_file) == false ) {
 			vmprintf(D_ALWAYS, "Checkpoint files exist but "
 					"cannot find the config file for them\n");
-			// Delete all non-transferred files from submit machine
-			deleteNonTransferredFiles();
-			m_restart_with_ckpt = false;
+			// WIPRO Johnson 26may2009 not allow fresh start if Remote_Iwd is set
+			if( !m_remote_iwd.IsEmpty() ) {
+				m_result_msg = VMGAHP_ERR_CANNOT_FIND_VMX_FILE_IN_REMOTE_IWD;
+				return false;
+			} else {
+				// Delete all non-transferred files from submit machine
+				deleteNonTransferredFiles();
+				m_restart_with_ckpt = false;
+			} // WIPRO END			
 		}else {
 			// We found a valid vm configuration file with checkpointed files
 			// Now, we need to adjust the configuration file, if necessary.
@@ -1747,8 +1804,15 @@ VMwareType::CreateConfigFile()
 				vmprintf(D_ALWAYS, "Failed to adjust vm config file(%s) for ckpt files "
 						"in VMwareType::CreateConfigFile()\n", 
 						ckpt_config_file.Value());
-				deleteNonTransferredFiles();
-				m_restart_with_ckpt = false;
+				// WIPRO Johnson 26may2009 not allow fresh start if Remote_Iwd is set
+				if( !m_remote_iwd.IsEmpty() ) {
+					m_result_msg = VMGAHP_ERR_CANNOT_ADJUST_VMX_FILE_IN_REMOTE_IWD;
+					return false;
+				} else {
+					// Delete all non-transferred files from submit machine
+					deleteNonTransferredFiles();
+					m_restart_with_ckpt = false;
+				}// WIPRO END			
 			}else {
 				m_configfile = ckpt_config_file;
 				m_need_snapshot = false;
