From 3194aae06b783fc6fadf3515592e3f3b7df56e7e Mon Sep 17 00:00:00 2001
From: Greg Thain <gthain@cs.wisc.edu>
Date: Wed, 19 Jun 2013 14:26:41 -0500
Subject: [PATCH] In group quota, constrain allocation when
 accept_surplus=false #3695

---
 src/condor_negotiator.V6/matchmaker.cpp | 47 ++++++++++++++++++++++++++++++++-
 src/condor_negotiator.V6/matchmaker.h   |  5 ++++
 2 files changed, 51 insertions(+), 1 deletion(-)

diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index 65816ac..d5011b8 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -60,6 +60,7 @@
 static int comparisonFunction (AttrList *, AttrList *, void *);
 #include "matchmaker.h"
 
+
 /* This extracts the machine name from the global job ID user@machine.name#timestamp#cluster.proc*/
 static int get_scheddname_from_gjid(const char * globaljobid, char * scheddname );
 
@@ -1540,7 +1541,7 @@ negotiationTime ()
                     }
 
                     if ((group->usage >= group->allocated) && !ConsiderPreemption) {
-                        dprintf(D_ALWAYS, "Group %s - skipping, at or over quota (usage=%g)\n", group->name.c_str(), group->usage);
+                        dprintf(D_ALWAYS, "Group %s - skipping, at or over quota (usage=%g) (quota=%g)\n", group->name.c_str(), group->usage, group->allocated);
                         continue;
                     }
 		    
@@ -1563,6 +1564,35 @@ negotiationTime ()
                     if (!accountant.UsingWeightedSlots()) {
                         slots = floor(slots);
                     }
+					
+					// GGT
+					if (param_boolean("NEGOTIATOR_STRICT_ENFORCE_QUOTA", true)) {
+						dprintf(D_FULLDEBUG, "NEGOTIATOR_STRICT_ENFORCE_QUOTA is true, current proposed allocation for %s is %g\n", group->name.c_str(), slots);
+						calculate_subtree_usage(hgq_root_group); // usage changes with every negotiation
+						GroupEntry *limitingGroup = group;
+
+						double my_new_allocation = slots - group->usage; // resources above what we already have
+						if (my_new_allocation < 0) {
+							continue; // shouldn't get here
+						}
+
+						while (limitingGroup != NULL) {
+							if ((limitingGroup->accept_surplus == false) && limitingGroup->static_quota) {
+								// This is the extra available at this node
+								double subtree_available = limitingGroup->config_quota - limitingGroup->subtree_usage;
+								if (subtree_available < 0) subtree_available = 0;
+								dprintf(D_ALWAYS, "my_new_allocation is %g subtree_available is %g\n", my_new_allocation, subtree_available);
+								if (my_new_allocation > subtree_available) {
+									dprintf(D_FULLDEBUG, "Group %s with accept_surplus=false has total usage = %g and config quota of %g -- constraining allocation in group %s to %g\n",
+											limitingGroup->name.c_str(), limitingGroup->subtree_usage, limitingGroup->config_quota, group->name.c_str(), subtree_available + group->usage);
+		
+									my_new_allocation = subtree_available; // cap new allocation to the available
+								}
+							}
+							limitingGroup = limitingGroup->parent;
+						}
+						slots = my_new_allocation + group->usage; // negotiation units are absolute quota, not new
+					}
 
                     if (autoregroup && (group == hgq_root_group)) {
                         // note that in autoregroup mode, root group is guaranteed to be last group to negotiate
@@ -2279,6 +2309,7 @@ GroupEntry::GroupEntry():
     allocated(0),
     subtree_quota(0),
     subtree_requested(0),
+    subtree_usage(0),
     rr(false),
     rr_time(0),
     subtree_rr_time(0),
@@ -5615,5 +5646,19 @@ Matchmaker::publishNegotiationCycleStats( ClassAd *ad )
 	}
 }
 
+double 
+Matchmaker::calculate_subtree_usage(GroupEntry *group) {
+	double subtree_usage = 0.0;
+
+    for (vector<GroupEntry*>::iterator i(group->children.begin());  i != group->children.end();  i++) {
+		subtree_usage += calculate_subtree_usage(*i);
+	}
+	subtree_usage += accountant.GetWeightedResourcesUsed(group->name.c_str());
+
+	group->subtree_usage = subtree_usage;;
+	dprintf(D_ALWAYS, "subtree_usage at %s is %g\n", group->name.c_str(), subtree_usage);
+	return subtree_usage;
+}
+
 GCC_DIAG_ON(float-equal)
 
diff --git a/src/condor_negotiator.V6/matchmaker.h b/src/condor_negotiator.V6/matchmaker.h
index 9443290..10be173 100644
--- a/src/condor_negotiator.V6/matchmaker.h
+++ b/src/condor_negotiator.V6/matchmaker.h
@@ -76,6 +76,9 @@ struct GroupEntry {
     double subtree_quota;
     // all slots requested by this group and its subtree
     double subtree_requested;
+
+	// sum of usage of this node and all children
+	double subtree_usage;
     // true if this group got served by most recent round robin
     bool rr;
     // timestamp of most recent allocation from round robin
@@ -495,6 +498,8 @@ class Matchmaker : public Service
 
 		void StartNewNegotiationCycleStat();
 		void publishNegotiationCycleStats( ClassAd *ad );
+
+		double calculate_subtree_usage(GroupEntry *group);
 };
 GCC_DIAG_ON(float-equal)
 
-- 
1.7.12

