#! /usr/bin/env perl
##**************************************************************
##
## Copyright (C) 1990-2009, Condor Team, Computer Sciences Department,
## University of Wisconsin-Madison, WI.
##
## Licensed under the Apache License, Version 2.0 (the "License"); you
## may not use this file except in compliance with the License.  You may
## obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, 
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
##**************************************************************

# Tests the generic boot/init script

# This is pretty naive, and frequently slurps in entire log files.
# However, we blow away the log file between tests, and since the
# daemons in question aren't doing anything interesting, they should
# be very small and cheap.

use CondorTest;
use CondorPersonal;
use strict;
use warnings;
use diagnostics;

my $TESTNAME = 'cmd_core_boot-script';
my $PERSONAL_CONDOR_CONFIG = "$TESTNAME.pcconf";

my $MAX_MASTER_STARTUP = 30; # seconds
my $MAX_MASTER_STOP = 20; # seconds
my $MAX_RECONFIG_WAIT = 10; # seconds

my $INIT_SCRIPT_ORIG = '../condor_examples/condor.boot.2.generic';

#CondorPersonal::DebugOn();
#CondorPersonal::DebugLevel(10);

exit main();

sub fatal;
sub main {
	my $piddir = CondorPersonal::SaveMeSetup($TESTNAME);
	if( $piddir == 0 ) {
		fatal "Failed to set up personal condor (CondorPersonal::SaveMeSetup failed)";
	}

	my $workdir = "$TESTNAME.saveme/$piddir";
	debug("$TESTNAME running as pid $piddir; working in $workdir");

	debug("Creating personal Condor.");
	# This will set $ENV{CONDOR_CONFIG} and $ENV{PATH} appropriately for us.
	my($personal_condor_info) = 
		CondorPersonal::StartCondor($TESTNAME, $PERSONAL_CONDOR_CONFIG, 'local');
	my($condor_config, $port) = split(/\+/, $personal_condor_info);

	my($logdir) = read_condor_config('LOG');
	if(not -d $logdir) { die_bad_install("LOG=$logdir: not a directory"); }

	my($masterlog) = read_condor_config('MASTER_LOG');

	# Ensure we have a file to watch
	open TMP, '>>', $masterlog or die "Failed to touch $masterlog: $!";
	close TMP;
	master_log_open($masterlog);

	# StartCondor should have left condor running.  Quick check that.
	wait_for_master_startup($MAX_MASTER_STARTUP,
		'Confirm initial setup is working');
	confirm_no_master_stop("Confirm initial setup didn't stop");

	# Shut it down directly before beginning our real tests
	debug("Shut down to begin real tests");
	mysystem_or_die('condor_off', '-master');
	wait_for_master_stop($MAX_MASTER_STOP, 
		'Confirm initial setup stopped');
	confirm_no_master_start("Confirm initial stayed stopped");


	# Get our init script.
	debug("Configuring init script");
	my $init_body = slurp($INIT_SCRIPT_ORIG);
	if(not defined $init_body) {
		die "Expected init script ($INIT_SCRIPT_ORIG) isn't available.";
	}
	my $condor_config_val = read_condor_config('BIN').'/condor_config_val';
	my $init_script = "./$TESTNAME.init";
	$init_body =~ s/^CONDOR_CONFIG=.*/CONDOR_CONFIG=$ENV{CONDOR_CONFIG}/gm;
	$init_body =~ s/^CONDOR_CONFIG_VAL=.*/CONDOR_CONFIG_VAL=$condor_config_val/gm;
	open OUT, '>', $init_script or die "Failed to write $init_script: $!";
	print OUT $init_body;
	close OUT;
	chmod 0755, $init_script or die "Failed to chmod $init_script: $!";

	# condor start
	debug("init start");
	mysystem_or_die($init_script, 'start');
	wait_for_master_startup($MAX_MASTER_STARTUP, 'Confirm "condor start"');
	confirm_no_master_stop("Confirm didn't stop");

	# condor restart
	ensure_ready($masterlog);
	debug("init restart");
	mysystem_or_die($init_script, 'restart');
	wait_for_master_stop($MAX_MASTER_STARTUP, 'Confirm "condor restart" (stop)');
	wait_for_master_startup($MAX_MASTER_STARTUP, 'Confirm "condor restart" (start)');
	confirm_no_master_stop("Confirm didn't stop again");

	# condor try-restart
	ensure_ready($masterlog);
	debug("init try-restart");
	mysystem_or_die($init_script, 'try-restart');
	wait_for_master_stop($MAX_MASTER_STARTUP, 'Confirm "condor try-restart" (stop)');
	wait_for_master_startup($MAX_MASTER_STARTUP, 'Confirm "condor try-restart" (start)');
	confirm_no_master_stop("Confirm didn't stop again");

	# condor status
		# No need to ensure_ready()
	debug("init status (running)");
	my $status = `"$init_script" status`;
	my $ret = $?;
	my($return, $signal, $core) = decode_exit($ret);
	chomp $status;
	if($ret != 0) {
		die "$init_script status didn't return 3 ($ret ($return, $signal, $core): $status)";
	}
	if($status !~ /^Condor is running \(pid \d+\)$/) {
		die "$init_script status returned '$status', which was not expected."
	}

	# condor reload
		# No need to ensure_ready()
	debug("init reload");
	mysystem_or_die($init_script, 'reload');
	wait_for_master_reconfig($MAX_RECONFIG_WAIT, 'Confirm reconfig worked');

	# condor force-reload
		# No need to ensure_ready()
	debug("init force-reload");
	mysystem_or_die($init_script, 'force-reload');
	wait_for_master_reconfig($MAX_RECONFIG_WAIT, 'Confirm reconfig worked');

	# condor stop
	ensure_ready($masterlog);
	debug("init stop");
	mysystem_or_die($init_script, 'stop');
	wait_for_master_stop($MAX_MASTER_STARTUP, 'Confirm "condor stop"');
	# TODO: Confirm didn't start before EOF
	confirm_no_master_start("Confirm stayed stopped");

	# condor try-restart
		# In this case, it should never start up.
	ensure_ready($masterlog);
	debug("init try-restart (no-op)");
	mysystem_or_die($init_script, 'try-restart');
	sleep(10); # How long do we wait to see if nothing happens?
	confirm_no_master_start("Confirm didn't start");
	confirm_no_master_stop("Confirm didn't stop without starting");

	# condor status
		# No need to ensure_ready()
	debug("init status (stopped)");
	$status = `"$init_script" status`;
	$ret = $?;
	($return, $signal, $core) = decode_exit($ret);
	chomp $status;
	if($return != 3) { # Why 3? "Not running" per Linux Standards Base
		die "$init_script status didn't return 3 ($ret ($return, $signal, $core): $status)";
	}
	if($status ne "Condor is not running") {
		die "$init_script status returned '$status', which was not expected."
	}


	# Cleanup
	master_log_close();

	debug("Success!");
	return 0;
}


# It can take a few seconds for daemons to be ready
# to handle signals.  If we call too soon, we'll fail.
sub ensure_ready {
	sleep(10);
}



# Logs a debug message.  Just a simple
# wrapper to keep code shorter.
sub debug { CondorTest::debug("@_\n", 1); }

# Read an entire file into a scalar.
# Returns undef on failure; use $! if you 
# care why.
sub slurp {
	my($filename) = @_;
	local $/;
	local *IN;
	if( not open(IN, '<', $filename) ) {
		return undef;
	}
	my $ret = <IN>;
	close IN;
	return $ret;
}

# Use condor_config_val to determine the
# value of a parameter.  It is a fatal error
# to not retrieve something.
sub read_condor_config {
	my($param) = @_;
	my $val = `condor_config_val "$param"`;
	my $msg = "INTERNAL ERROR: Failed to read \"$param\" from \"$ENV{CONDOR_CONFIG}\".";
	if($? != 0) {
		if(not defined $val) { $val = 'It returned no text'; }
		fatal "$msg condor_config_val returned with $? ($val)";
	}
	if(not defined $val) { 
		fatal "$msg condor_config_val returned successfully, but with no output";
	}
	CondorPersonal::fullchomp($val);
	if($val eq "Not defined: $param") {
		fatal "$msg condor_config_val couldn't find the parameter";
	}
	if(length($val) == 0) {
		fatal "$msg condor_config_val returned empty result"
	}
	return $val;
}

# Wait for $timeout seconds or until a line matching the given
# regular expression is found. Returns the matching line, or
# undef if $timeout passed.  Always reads to the first EOF
# encountered (assuming $regex isn't found), even if it takes
# longer than $timeout.
sub find_master_log_line {
	my($timeout, $regex) = @_;
	my $start = time;
	while(1) {
		my $line = master_log_readline($timeout-(time-$start));
		if(not defined $line) { last; }
		if($line =~ /$regex/) { return $line; }
	}
	while(1) {
		my $line = master_log_readline_block($timeout-(time-$start));
		if(not defined $line) { return undef; }
		if($line =~ /$regex/) { return $line; }
	}
}

# wait for $timeout seconds for the master to handle a reconfig
# request, based on reading the MasterLog.  Be sure to set $why
# to what you're waiting for; this is used for debug and error
# messages.  It is a fatal error for the master to not do so in
# time.
sub wait_for_master_reconfig {
	my($timeout, $why) = @_;
	debug("$why");
	my $line = find_master_log_line($timeout, 'Reconfiguring all running daemons.');
	if(not defined $line) {
		my $ln = master_log_line_number();
		fatal "$why: condor_master did not reconfigure within the timeout of $timeout seconds (last line of MasterLog read: $ln)";
	}
	return 1;
}

# wait for $timeout seconds for the master to start up, based on
# reading the MasterLog.  Be sure to set $why to what you're
# waiting for; this is used for debug and error messages.  It is
# a fatal error for the master to not start up in time.
sub wait_for_master_startup {
	my($timeout, $why) = @_;
	debug("$why");
	my $line = find_master_log_line($timeout, 'condor_master \(CONDOR_MASTER\) STARTING UP');
	if(not defined $line) {
		my $ln = master_log_line_number();
		fatal "$why: condor_master was not running within the timeout of $timeout seconds (last line of MasterLog read: $ln)";
	}
	return 1;
}

# wait for $timeout seconds for the master to stop, based on
# reading the MasterLog.  Be sure to set $why to what you're
# waiting for; this is used for debug and error messages.  It is
# a fatal error for the master to not stop in time, or to exit
# with any result other than 0.
sub wait_for_master_stop {
	my($timeout, $why) = @_;
	debug("$why");
	my $regex = 'condor_master \(condor_MASTER\) pid \d+ EXITING WITH STATUS (\d+)';
	my $line = find_master_log_line($timeout, $regex);
	if(not defined $line) {
		my $ln = master_log_line_number();
		fatal "$why: condor_master did not stop within the timeout of $timeout seconds (last line of MasterLog read: $ln)";
	}
	my($status) = ($line =~ /$regex/);
	if(not defined $status) {
		fatal "$why: Unexpected error: could not find exit status in line: $line";
	}
	if($status != 0) {
		fatal "$why: condor_master exited with unexpected result of $status";
	}
	return 1;
}

# Confirm that a new STARTING UP message does not appear in the
# MasterLog.  Fatal if one is found.  Does not wait.
sub confirm_no_master_start {
	my($why) = @_;
	debug("$why");
	my $line = find_master_log_line(0, 'condor_master \(CONDOR_MASTER\) STARTING UP');
	if(defined $line) {
		my $ln = master_log_line_number();
		fatal "$why: condor_master started unexpectedly";
	}
	return 1;
}

# Confirm that the master doesn't give any hints of exiting in the
# MasterLog.  Fatal if an exit is found.  Does not wait.
sub confirm_no_master_stop {
	my($why) = @_;
	debug("$why");

	my $regex = 'condor_master \(condor_MASTER\) pid \d+ EXITING WITH STATUS (\d+)|ERROR ".*?" at line \d+ in file';
	my $line = find_master_log_line(0, $regex);
	if(defined $line) {
		my $ln = master_log_line_number();
		fatal "$why: condor_master stopped unexpectedly ($line)";
	}
	return 1;
}


BEGIN {
my $lineno = 0;
local *MASTER_LOG;

# What is the current line number of the MasterLog
# we are reading?
sub master_log_line_number { return $lineno; }

# Open the MasterLog
sub master_log_open {
	my($filename) = @_;
	open MASTER_LOG, '<', $filename or die "Unable to open master log $filename for reading: $!";
	$lineno = 0;
}

# Close the MasterLog
sub master_log_close {
	close MASTER_LOG;
}

# Return one line from the MasterLog.
# Returns undef on an empty file.
sub master_log_readline {
	seek MASTER_LOG, 0, 1; # Clear EOF
	my $line = <MASTER_LOG>;
	if(defined $line) { $lineno++; }
	return $line;
}

}

# Block for $timeout seconds, or until the MasterLog
# returns a new line.  Returns the new line, or undef
# on a timeout.
sub master_log_readline_block {
	my($timeout) = @_;
	my $start = time;
	while((time-$start) < $timeout) {
		my $line = master_log_readline();
		if(defined $line) { return $line; }
		sleep(1);
	}
	return undef;
}

# Wraps system(), but with logging about the results.
# also breaks return code into ($return, $signal, $core)
# $return - value passed to exit(), -1 if exit on signal
# $signal - signal that killed process, -1 if exit via exit()
# $core - Was a core generated?
# If $return == $signal == -1, the command failed to start.
sub mysystem {
	my $argstr = '"'.join('", "', @_).'"';

	debug("system($argstr)");
	system(@_);

	my ($return, $signal, $core) = decode_exit($?);
	return($return,$signal,$core);
}

# given a status code, return:
# $return - value passed to exit(), -1 if exit on signal
# $signal - signal that killed process, -1 if exit via exit()
# $core - Was a core generated?
# If $return == $signal == -1, the command failed to start.
sub decode_exit {
	my($code) = @_;
	my ($return, $signal, $core) = (-1,-1,0);
	if( $code == -1 ) {
	} elsif ($code & 127) {
		$signal = $code & 127;
		$core = $code & 128;
	} else {
		$return = $?>>8;
	}
	return($return,$signal,$core);
}

# As mysystem(), but it is a fatal error for the
# program to exit with anything other than 0
sub mysystem_or_die {
	my($ret) = mysystem(@_);
	if($ret != 0) {
		die "Previous call to system() did not return 0 as expected.";
	}
}

# Rotate a file out of the way. It is a fatal error
# to fail.
BEGIN {
	my $counter = 0;
sub move_or_die {
	$counter++;
	if( not rename($_[0], "$_[0].$counter") ) {
		fatal "Tried to move $_[0] to $_[0].$counter, failed: $!";
	}
}
}

# wraps die, but duplicates message to debug()
sub fatal {
	debug(@_);
	die(@_);
}
