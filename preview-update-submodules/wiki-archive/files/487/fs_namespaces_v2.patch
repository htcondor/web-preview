diff --git a/src/condor_daemon_core.V6/condor_daemon_core.h b/src/condor_daemon_core.V6/condor_daemon_core.h
index aac1644..a70c91c 100644
--- a/src/condor_daemon_core.V6/condor_daemon_core.h
+++ b/src/condor_daemon_core.V6/condor_daemon_core.h
@@ -60,6 +60,7 @@
 #include "condor_sinful.h"
 #include "condor_sockaddr.h"
 #include "generic_stats.h"
+#include "filesystem_remap.h"
 
 #include "../condor_procd/proc_family_io.h"
 class ProcFamilyInterface;
@@ -1105,27 +1106,30 @@ class DaemonCore : public Service
         ...
         @param err_return_msg Returned with error message pertaining to
                failure inside the method.  Ignored if NULL (default).
+        @param remap Performs bind mounts for the child process.
+               Ignored if NULL (default).  Ignored on non-Linux.
         @return On success, returns the child pid.  On failure, returns FALSE.
     */
     int Create_Process (
-        const char    *name,
-        ArgList const &arglist,
-        priv_state    priv                 = PRIV_UNKNOWN,
-        int           reaper_id            = 1,
-        int           want_commanand_port  = TRUE,
-        Env const     *env                 = NULL,
-        const char    *cwd                 = NULL,
-        FamilyInfo    *family_info         = NULL,
-        Stream        *sock_inherit_list[] = NULL,
-        int           std[]                = NULL,
-        int           fd_inherit_list[]    = NULL,
-        int           nice_inc             = 0,
-        sigset_t      *sigmask             = NULL,
-        int           job_opt_mask         = 0,
-        size_t        *core_hard_limit     = NULL,
-		int			  *affinity_mask	   = NULL,
-		char const    *daemon_sock         = NULL,
-        MyString      *err_return_msg      = NULL
+        const char      *name,
+        ArgList const   &arglist,
+        priv_state      priv                 = PRIV_UNKNOWN,
+        int             reaper_id            = 1,
+        int             want_commanand_port  = TRUE,
+        Env const       *env                 = NULL,
+        const char      *cwd                 = NULL,
+        FamilyInfo      *family_info         = NULL,
+        Stream          *sock_inherit_list[] = NULL,
+        int             std[]                = NULL,
+        int             fd_inherit_list[]    = NULL,
+        int             nice_inc             = 0,
+        sigset_t        *sigmask             = NULL,
+        int             job_opt_mask         = 0,
+        size_t          *core_hard_limit     = NULL,
+        int              *affinity_mask	     = NULL,
+        char const      *daemon_sock         = NULL,
+        MyString        *err_return_msg      = NULL,
+        FilesystemRemap *remap               = NULL
         );
 
     //@}
diff --git a/src/condor_daemon_core.V6/daemon_core.cpp b/src/condor_daemon_core.V6/daemon_core.cpp
index c458868..44df57f 100644
--- a/src/condor_daemon_core.V6/daemon_core.cpp
+++ b/src/condor_daemon_core.V6/daemon_core.cpp
@@ -2732,7 +2732,7 @@ DaemonCore::reconfig(void) {
 		// If we are NOT the schedd, then do not use clone, as only
 		// the schedd benefits from clone, and clone is more susceptable
 		// to failures/bugs than fork.
-	if ( !(get_mySubSystem()->isType(SUBSYSTEM_TYPE_SCHEDD)) ) {
+	if ( !(get_mySubSystem()->isType(SUBSYSTEM_TYPE_SCHEDD)) && !(get_mySubSystem()->isType(SUBSYSTEM_TYPE_STARTER)) ) {
 		m_use_clone_to_create_processes = false;
 	}
 #endif /* HAVE CLONE */
@@ -6523,7 +6523,8 @@ public:
 		int the_want_command_port,
 		const sigset_t *the_sigmask,
 		size_t *core_hard_limit,
-		int		*affinity_mask
+		int		*affinity_mask,
+		FilesystemRemap *fs_remap
 	): m_errorpipe(the_errorpipe), m_args(the_args),
 	   m_job_opt_mask(the_job_opt_mask), m_env(the_env),
 	   m_inheritbuf(the_inheritbuf),
@@ -6538,7 +6539,8 @@ public:
 	   m_priv(the_priv), m_want_command_port(the_want_command_port),
 	   m_sigmask(the_sigmask), m_unix_args(0), m_unix_env(0),
 	   m_core_hard_limit(core_hard_limit),
-	   m_affinity_mask(affinity_mask)
+	   m_affinity_mask(affinity_mask),
+	   m_fs_remap(fs_remap)
 	{
 	}
 
@@ -6592,6 +6594,8 @@ private:
 	size_t *m_core_hard_limit;
 	const int    *m_affinity_mask;
 	Env m_envobject;
+        FilesystemRemap *m_fs_remap;
+	priv_state m_priv_state;
 };
 
 enum {
@@ -6670,6 +6674,16 @@ pid_t CreateProcessForkit::fork_exec() {
 			child_stack_ptr += stack_size;
 		}
 
+			// See if we have the right privileges to CLONE_NEWNS
+		if (m_fs_remap) {
+			if (can_switch_ids()) {
+				m_priv_state = set_root_priv();
+			} else {
+				dprintf(D_ALWAYS, "Disable FS remapping due to lack of privileges.");
+				m_fs_remap = NULL;
+			}
+		}
+
 			// save some state in dprintf
 		dprintf_before_shared_mem_clone();
 
@@ -6686,7 +6700,7 @@ pid_t CreateProcessForkit::fork_exec() {
 		newpid = clone(
 			CreateProcessForkit::clone_fn,
 			child_stack_ptr,
-			(CLONE_VM|CLONE_VFORK|SIGCHLD),
+			(CLONE_VM|CLONE_VFORK|SIGCHLD) | (m_fs_remap ? CLONE_NEWNS : 0),
 			this );
 
 		exitCreateProcessChild();
@@ -6697,6 +6711,10 @@ pid_t CreateProcessForkit::fork_exec() {
 			// restore state
 		dprintf_after_shared_mem_clone();
 
+		if (m_fs_remap) {
+			set_priv(m_priv_state);
+		}
+
 		return newpid;
 	}
 #endif /* HAVE_CLONE */
@@ -7093,6 +7111,10 @@ void CreateProcessForkit::exec() {
 			}
 		}
 	}
+	if (m_fs_remap && m_fs_remap->PerformMappings()) {
+		write(m_errorpipe[1], &errno, sizeof(errno));
+		_exit(errno);
+	}
 
 
 		/* Re-nice ourself */
@@ -7303,7 +7325,8 @@ int DaemonCore::Create_Process(
 			size_t        *core_hard_limit,
 			int			  *affinity_mask,
 			char const    *daemon_sock,
-			MyString      *err_return_msg
+			MyString      *err_return_msg,
+			FilesystemRemap *remap
             )
 {
 	int i, j;
@@ -7313,6 +7336,9 @@ int DaemonCore::Create_Process(
 	MyString executable_buf;
 	priv_state current_priv = PRIV_UNKNOWN;
 
+	// Remap our executable and CWD if necessary.
+	std::string alt_executable_fullpath, alt_cwd;
+
 	// For automagic DC std pipes.
 	int dc_pipe_fds[3][2] = {{-1, -1}, {-1, -1}, {-1, -1}};
 
@@ -8299,6 +8325,15 @@ int DaemonCore::Create_Process(
 		}
 	}
 
+	if (remap) {
+		alt_executable_fullpath = remap->RemapFile(executable_fullpath);
+		alt_cwd = remap->RemapDir(cwd);
+		if (alt_executable_fullpath.compare(executable_fullpath))
+			dprintf(D_ALWAYS, "Remapped file: %s\n", alt_executable_fullpath.c_str());
+		if (alt_cwd.compare(cwd))
+			dprintf(D_ALWAYS, "Remapped cwd: %s\n", alt_cwd.c_str());
+	}
+
 	{
 			// Create a "forkit" object to hold all the state that we need in the child.
 			// In some cases, the "fork" will actually be a clone() operation, which
@@ -8315,9 +8350,9 @@ int DaemonCore::Create_Process(
 			time_of_fork,
 			mii,
 			family_info,
-			cwd,
+			alt_cwd.length() ? alt_cwd.c_str() : cwd,
 			executable,
-			executable_fullpath,
+			alt_executable_fullpath.length() ? alt_executable_fullpath.c_str() : executable_fullpath,
 			std,
 			numInheritFds,
 			inheritFds,
@@ -8326,7 +8361,8 @@ int DaemonCore::Create_Process(
 			want_command_port,
 			sigmask,
 			core_hard_limit,
-			affinity_mask);
+			affinity_mask,
+			remap);
 
 		newpid = forkit.fork_exec();
 	}
diff --git a/src/condor_master.V6/masterDaemon.cpp b/src/condor_master.V6/masterDaemon.cpp
index 86e96d6..3e5ee02 100644
--- a/src/condor_master.V6/masterDaemon.cpp
+++ b/src/condor_master.V6/masterDaemon.cpp
@@ -575,7 +575,7 @@ int daemon::RealStart( )
 	shortname = condor_basename( process_name );
 
 	if( access(process_name,X_OK) != 0 ) {
-		dprintf(D_ALWAYS, "%s: Cannot execute\n", process_name );
+		dprintf(D_ALWAYS, "%s: Cannot execute (errno=%d, %s)\n", process_name, errno, strerror(errno) );
 		pid = 0; 
 		// Schedule to try and restart it a little later
 		Restart();
diff --git a/src/condor_schedd.V6/qmgmt.cpp b/src/condor_schedd.V6/qmgmt.cpp
index 10c3f06..2dd6922 100644
--- a/src/condor_schedd.V6/qmgmt.cpp
+++ b/src/condor_schedd.V6/qmgmt.cpp
@@ -1242,6 +1242,9 @@ QmgmtSetEffectiveOwner(char const *o)
 		if( !isQueueSuperUser(real_owner) ||
 			!SuperUserAllowedToSetOwnerTo( o ) )
 		{
+			dprintf(D_ALWAYS, "SetEffectiveOwner security violation: "
+				"setting owner to %s when active owner is \"%s\"\n",
+				o, real_owner);
 			errno = EACCES;
 			return -1;
 		}
diff --git a/src/condor_starter.V6.1/os_proc.cpp b/src/condor_starter.V6.1/os_proc.cpp
index c2709b5..fd1c01f 100644
--- a/src/condor_starter.V6.1/os_proc.cpp
+++ b/src/condor_starter.V6.1/os_proc.cpp
@@ -70,7 +70,7 @@ OsProc::~OsProc()
 
 
 int
-OsProc::StartJob(FamilyInfo* family_info)
+OsProc::StartJob(FamilyInfo* family_info, FilesystemRemap* fs_remap=NULL)
 {
 	int nice_inc = 0;
 	bool has_wrapper = false;
@@ -539,7 +539,8 @@ OsProc::StartJob(FamilyInfo* family_info)
 		                                     core_size_ptr,
                                              affinity_mask,
 											 NULL,
-                                             &create_process_err_msg);
+                                             &create_process_err_msg,
+                                             fs_remap);
 	}
 
 	// Create_Process() saves the errno for us if it is an "interesting" error.
diff --git a/src/condor_starter.V6.1/os_proc.h b/src/condor_starter.V6.1/os_proc.h
index 18a200d..8b5a581 100644
--- a/src/condor_starter.V6.1/os_proc.h
+++ b/src/condor_starter.V6.1/os_proc.h
@@ -46,9 +46,9 @@ public:
 			output, error files for re-direction, and (finally) call
 			daemonCore->Create_Process().
 		 */
-	virtual int StartJob() { return StartJob(NULL); };
+	virtual int StartJob() { return StartJob(NULL, NULL); };
 
-	int StartJob(FamilyInfo*);
+	int StartJob(FamilyInfo*, FilesystemRemap *);
 
 		/** In this function, we determine if pid == our pid, and if so
 			do a CONDOR_job_exit remote syscall.  
diff --git a/src/condor_starter.V6.1/vanilla_proc.cpp b/src/condor_starter.V6.1/vanilla_proc.cpp
index 7dc1978..1391308 100644
--- a/src/condor_starter.V6.1/vanilla_proc.cpp
+++ b/src/condor_starter.V6.1/vanilla_proc.cpp
@@ -32,6 +32,8 @@
 #include "condor_config.h"
 #include "domain_tools.h"
 #include "classad_helpers.h"
+#include "filesystem_remap.h"
+#include "directory.h"
 
 #ifdef WIN32
 #include "executable_scripts.WINDOWS.h"
@@ -191,6 +193,7 @@ VanillaProc::StartJob()
 		        fi.login);
 	}
 
+	FilesystemRemap * fs_remap = NULL;
 #if defined(LINUX)
 	// on Linux, we also have the ability to track processes via
 	// a phony supplementary group ID
@@ -229,9 +232,57 @@ VanillaProc::StartJob()
 	}
 #endif
 
+	// On Linux kernel 2.4.19 and later, we can give each job its
+	// own FS mounts.
+	if (param_boolean("USE_FS_NAMESPACES", false)) {
+		// It's very likely the 'condor' user doesn't have permission to stat some of these
+		// directories.  Switch to root for now.  We have to have the root priv to do this anyway
+		priv_state original_priv = set_root_priv();
+
+		fs_remap = new FilesystemRemap();
+		std::string working_dir = Starter->GetWorkingDir();
+		if (IsDirectory(working_dir.c_str())) {
+			if (IsDirectory("/tmp")) {
+				dprintf(D_FULLDEBUG, "Adding mapping: %s -> /tmp.\n", working_dir.c_str());
+				fs_remap->AddMapping(working_dir, "/tmp");
+			}
+			if (IsDirectory("/var/tmp")) {
+				dprintf(D_FULLDEBUG, "Adding mapping: %s -> /var/tmp.\n", working_dir.c_str());
+				fs_remap->AddMapping(working_dir, "/var/tmp");
+			}
+			StringList squash_dirs(param("SQUASH_DIRS"));
+			squash_dirs.rewind();
+			char * next_dir;
+			while ((next_dir = squash_dirs.next()) != NULL) {
+				if (IsDirectory(next_dir)) {
+					dprintf(D_FULLDEBUG, "Adding mapping: %s -> %s.\n", working_dir.c_str(), next_dir);
+					fs_remap->AddMapping(working_dir, next_dir);
+				}
+			}
+		}
+		// Don't mangle the IWD until we know how to rewrite the environment.
+		/*
+		const char* job_iwd = Starter->jic->jobRemoteIWD();
+		dprintf(D_ALWAYS, "Job IWD: %s\n", job_iwd);
+		if (IsDirectory(job_iwd)) {
+			std::string execute_dir;
+			param(execute_dir, "EXECUTE");
+			if (IsDirectory(execute_dir.c_str())) {
+				dprintf(D_FULLDEBUG, "Adding mapping: %s -> %s.\n", job_iwd, execute_dir.c_str());
+				fs_remap->AddMapping(job_iwd, execute_dir);
+			}
+		}
+		*/
+		set_priv(original_priv);
+	}
+
 	// have OsProc start the job
 	//
-	int retval = OsProc::StartJob(&fi);
+	int retval = OsProc::StartJob(&fi, fs_remap);
+
+	if (fs_remap != NULL) {
+		delete fs_remap;
+	}
 
 #if defined(HAVE_EXT_LIBCGROUP)
 	if (cgroup != NULL)
