diff --git a/src/condor_q.V6/queue.cpp b/src/condor_q.V6/queue.cpp
index 58ff6ed..3662032 100644
--- a/src/condor_q.V6/queue.cpp
+++ b/src/condor_q.V6/queue.cpp
@@ -49,11 +49,20 @@
 #include "condor_xml_classads.h"
 #include "condor_open.h"
 #include "condor_sockaddr.h"
+#include "read_user_log.h"
+#include "condor_event.h"
+#include "condor_id.h"
 #include "ipv6_hostname.h"
 #include <map>
 #include <vector>
 #include "../classad_analysis/analysis.h"
 
+#ifndef WIN32
+#include <sys/types.h>
+#include <unistd.h>
+#include <pwd.h>
+#endif
+
 #ifdef HAVE_EXT_POSTGRESQL
 #include "sqlquery.h"
 #endif /* HAVE_EXT_POSTGRESQL */
@@ -128,6 +137,7 @@ static void init_output_mask();
 typedef bool (*show_queue_fp)(const char* v1, const char* v2, const char* v3, const char* v4, bool useDB);
 
 static bool read_classad_file(const char *filename, ClassAdList &classads);
+static bool read_userlog_file(const char *filename, ClassAdList &classads);
 
 /* convert the -direct aqrgument prameter into an enum */
 unsigned int process_direct_argument(char *arg);
@@ -167,6 +177,8 @@ static 	int malformed, running, idle, held, suspended, completed, removed;
 static  char *jobads_file = NULL;
 static  char *machineads_file = NULL;
 
+static  char *userlog_file = NULL;
+
 static	CondorQ 	Q;
 static	QueryResult result;
 
@@ -417,7 +429,7 @@ int main (int argc, char **argv)
 	// Since we are assuming that we want to talk to a DB in the normal
 	// case, this will ensure that we don't try to when loading the job queue
 	// classads from file.
-	if (jobads_file != NULL) {
+	if ((jobads_file != NULL) || (userlog_file != NULL)) {
 		useDB = FALSE;
 	}
 
@@ -480,7 +492,7 @@ int main (int argc, char **argv)
            	// to the schedd time's out and the user gets nothing
            	// useful printed out. Therefore, we use show_queue,
            	// which fetches all of the ads, then analyzes them. 
-			if ( (unbuffered || verbose || better_analyze || jobads_file) && !g_stream_results ) {
+			if ( (unbuffered || verbose || better_analyze || jobads_file || userlog_file) && !g_stream_results ) {
 				sqfp = show_queue;
 			} else {
 				sqfp = show_queue_buffered;
@@ -1468,6 +1480,15 @@ processCommandLineArguments (int argc, char *argv[])
                 jobads_file = strdup(argv[i]);
             }
         }
+        else if (match_prefix(arg, "userlog")) {
+			if (argc <= i+1) {
+				fprintf( stderr, "Error: Argument -userlog require filename\n");
+				exit(1);
+			} else {
+                i++;
+                userlog_file = strdup(argv[i]);
+            }
+        }
         else if (match_prefix(arg, "machineads")) {
 			if (argc <= i+1) {
 				fprintf( stderr, "Error: Argument -machineads require filename\n");
@@ -2257,6 +2278,7 @@ usage (const char *myName)
 		"\t\t-expert\t\t\tDisplay shorter error messages\n"
 		"\t\t-constraint <expr>\tAdd constraint on classads\n"
 		"\t\t-jobads <file>\t\tFile of job ads to display\n"
+		"\t\t-userlog <file>\t\tFile of user log to display\n"
 		"\t\t-machineads <file>\tFile of machine ads for analysis\n"
 #ifdef HAVE_EXT_POSTGRESQL
 		"\t\t-direct <rdbms | schedd>\n"
@@ -3002,6 +3024,15 @@ show_queue( const char* v1, const char* v2, const char* v3, const char* v4, bool
 		/* The variable UseDB should be false in this branch since it was set 
 			in main() because jobads_file had a good value. */
 
+    } else if (userlog_file != NULL) {
+		/* get the "q" from the job ads file */
+        if (!read_userlog_file(userlog_file, jobs)) {
+            return false;
+        }
+		
+		/* The variable UseDB should be false in this branch since it was set 
+			in main() because userlog_file had a good value. */
+
     } else {
 		/* else get the job queue either from quill or the schedd. */
 
@@ -3896,6 +3927,502 @@ static bool read_classad_file(const char *filename, ClassAdList &classads)
     return success;
 }
 
+typedef long condor_time_t;
+static condor_time_t getEventTime(ULogEvent *event)
+{
+  return condor_time_t(mktime(&(event->eventTime)));
+}
+
+static double tmval2double(struct timeval &t)
+{
+  return t.tv_sec+t.tv_usec*1.0e-6;
+}
+
+static bool read_userlog_file(const char *filename, ClassAdList &classads)
+{
+  std::map<CondorID,ClassAd *> cmap;   // classad map ... current classad for job
+  std::map<CondorID,ULogEvent *> emap; // event map ... previous event for job
+  ReadUserLog userlog;
+  ULogEventOutcome res;
+  ULogEvent *event;
+
+  if (userlog.initialize(filename)!=true) {
+    fprintf(stderr, "Can't open user log: %s\n", filename);
+    return false;
+  }
+  
+  for (res=userlog.readEvent(event); res==ULOG_OK; res=userlog.readEvent(event)) {
+    CondorID jobid(event->cluster,event->proc,event->subproc);
+    ULogEventNumber eventNumber=event->eventNumber;
+    if (eventNumber!=ULOG_SUBMIT) {
+      // make sure we have seen the submit event
+      // else we just throw it away
+      if (cmap.find(jobid)==cmap.end()) {
+	//fprintf(stderr, "DEBUG: Missing submit event for %03i.%03i.%03i",event->cluster,event->proc,event->subproc);
+	delete event;
+	continue;	
+      }
+    }
+     
+    switch(eventNumber) {
+    case ULOG_SUBMIT:
+      {
+	SubmitEvent *submit_event=dynamic_cast<SubmitEvent*>(event);
+	ClassAd *jobClassAd = new ClassAd();
+
+	// Standard header of the job
+	jobClassAd->InsertAttr("MyType","Job");
+	jobClassAd->InsertAttr("TargetType","Machine");
+	// All jusbs must have a Cluster And Proc IDs
+	// SubprocID is not propagated
+	jobClassAd->InsertAttr("ClusterId",event->cluster);
+	jobClassAd->InsertAttr("ProcId",event->proc);
+
+	// Since we read from the log, let's propagate this info
+	jobClassAd->InsertAttr("UserLog",filename);
+
+	// Add the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("QDate",eventTime);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+
+	  // Create a reasonable looking global ID
+	  char globalid[256];
+	  sprintf(globalid,"localhost#%i.%i#%li",event->cluster,event->proc,long(eventTime));
+	  jobClassAd->InsertAttr("GlobalJobId",globalid);
+	}
+
+	{
+	  condor_time_t now = condor_time_t(time(NULL));
+	  jobClassAd->InsertAttr("ServerTime",now);
+	}
+
+	// SubmitHost is usually not available with condor_q
+	// but seems a waste not to propagate the info
+	jobClassAd->InsertAttr("SubmitHost",submit_event->getSubmitHost());
+
+	// Since this is the first event, we assume we are idle
+	jobClassAd->InsertAttr("JobStatus",IDLE);
+	jobClassAd->InsertAttr("LastJobStatus",0);
+
+	// Make up a few attributes needed by condor_q
+	// Take educated guesses wherever possible
+        jobClassAd->InsertAttr("Owner","???"); // start with an obviously fake default
+#ifndef WIN32
+	{
+	  // Assuming that the current user is also the Owner
+	  // is the best guess we can make.
+	  // Seems reasonable to assume only owners would read the log file
+          struct passwd *upass = getpwuid(getuid());
+          if (upass!=NULL) {
+            jobClassAd->InsertAttr("Owner",upass->pw_name);
+          }
+	}
+#endif
+
+	jobClassAd->InsertAttr("JobPrio",0);
+	jobClassAd->InsertAttr("ImageSize",0);
+
+	jobClassAd->InsertAttr("Cmd","???"); // no good default, make it obvious it is fake
+
+	// Add a few default values that are expected in all Job ClassAds
+	// and will be updated later on
+	jobClassAd->InsertAttr("LastSuspensionTime",0);
+	jobClassAd->InsertAttr("CompletionDate",0);
+
+	jobClassAd->InsertAttr("NumJobStarts",0);
+	jobClassAd->InsertAttr("TotalSuspensions",0);
+	jobClassAd->InsertAttr("NumSystemHolds",0);
+
+	jobClassAd->InsertAttr("LocalUserCpu",0.0);
+	jobClassAd->InsertAttr("RemoteUserCpu",0.0);
+	jobClassAd->InsertAttr("LocalSysCpu",0.0);
+	jobClassAd->InsertAttr("RemoteSysCpu",0.0);
+	jobClassAd->InsertAttr("RemoteWallClockTime",0.0);
+
+	// ignoring file transfer for now
+	// ignoring checkpointing for now
+
+	cmap[jobid]=jobClassAd;
+      }
+      break;
+
+    case ULOG_EXECUTE:
+      {
+	ExecuteEvent *start_event=dynamic_cast<ExecuteEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",RUNNING);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	  jobClassAd->InsertAttr("JobCurrentStartDate",eventTime);
+	}
+
+	{
+	  classad::Value v;
+	  int i;
+	  if (jobClassAd->EvaluateExpr("NumJobStarts+1",v) && v.IsIntegerValue(i)) {
+	    jobClassAd->InsertAttr("NumJobStarts",i);
+	  } else {
+	    jobClassAd->InsertAttr("NumJobStarts",1);
+	  }
+	}
+
+	jobClassAd->InsertAttr("StartdIpAddr",start_event->getExecuteHost());
+	if (start_event->getRemoteName()!=NULL) {
+	  jobClassAd->InsertAttr("RemoteHost",start_event->getRemoteName());
+	} else {
+	  // the execute host is the 2nd best we have
+	  jobClassAd->InsertAttr("RemoteHost",start_event->getExecuteHost());
+	}
+      }
+      break;
+
+
+    case ULOG_JOB_TERMINATED:
+      {
+	JobTerminatedEvent *term_event=dynamic_cast<JobTerminatedEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",COMPLETED);
+
+	jobClassAd->Insert("LastRemoteHost",jobClassAd->Remove("RemoteHost"));
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	  jobClassAd->InsertAttr("CompletionDate",eventTime);
+	}
+
+	if (term_event->normal) {
+	  // normal termination
+	  jobClassAd->InsertAttr("ExitBySignal",false);
+	  jobClassAd->InsertAttr("ExitCode",term_event->returnValue);
+	} else {
+	  jobClassAd->InsertAttr("ExitBySignal",true);
+	  jobClassAd->InsertAttr("ExitSignal",term_event->signalNumber);
+	}
+
+	jobClassAd->InsertAttr("LastLocalUserCpu",tmval2double(term_event->run_local_rusage.ru_utime));
+	jobClassAd->InsertAttr("LastRemoteUserCpu",tmval2double(term_event->run_remote_rusage.ru_utime));
+	jobClassAd->InsertAttr("LastLocalSysCpu",tmval2double(term_event->run_local_rusage.ru_stime));
+	jobClassAd->InsertAttr("LastRemoteSysCpu",tmval2double(term_event->run_remote_rusage.ru_stime));
+	{
+	  classad::Value v;
+	  if (jobClassAd->EvaluateExpr("real(EnteredCurrentStatus-JobCurrentStartDate)",v))
+	    {
+	      double t;
+	      if (v.IsRealValue(t)) {
+		jobClassAd->InsertAttr("LastRemoteWallClockTime",t);
+	      }
+	    }
+	}
+
+	jobClassAd->InsertAttr("LocalUserCpu",tmval2double(term_event->total_local_rusage.ru_utime));
+	jobClassAd->InsertAttr("RemoteUserCpu",tmval2double(term_event->total_remote_rusage.ru_utime));
+	jobClassAd->InsertAttr("LocalSysCpu",tmval2double(term_event->total_local_rusage.ru_stime));
+	jobClassAd->InsertAttr("RemoteSysCpu",tmval2double(term_event->total_remote_rusage.ru_stime));
+	{
+	  classad::Value v;
+	  if (jobClassAd->EvaluateExpr("RemoteWallClockTime+LastRemoteWallClockTime",v))
+	    {
+	      double t;
+	      if (v.IsRealValue(t)) {
+		jobClassAd->InsertAttr("RemoteWallClockTime",t);
+	      }
+	    }
+	}
+	// ignoring file transfer for now
+
+      }
+      break;
+
+    case ULOG_JOB_SUSPENDED:
+      {
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",SUSPENDED);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	  jobClassAd->InsertAttr("LastSuspensionTime",eventTime);
+	}
+	{
+	  classad::Value v;
+	  int i;
+	  if (jobClassAd->EvaluateExpr("TotalSuspensions+1",v) && v.IsIntegerValue(i)) {
+	    jobClassAd->InsertAttr("TotalSuspensions",i);
+	  } else {
+	    jobClassAd->InsertAttr("TotalSuspensions",1);
+	  }
+	}
+      }
+      break;
+
+    case ULOG_JOB_UNSUSPENDED:
+      {
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",RUNNING);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	}
+      }
+      break;
+
+    case ULOG_JOB_EVICTED:
+      {
+	JobEvictedEvent *evict_event=dynamic_cast<JobEvictedEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",IDLE);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	  jobClassAd->InsertAttr("LastVacateTime",eventTime);
+	}
+
+	jobClassAd->InsertAttr("LastVacateReason",evict_event->getReason());
+
+	// ignoring checkpointing and requeuing for now
+	// ignoring file transfer for now
+
+      }
+      break;
+
+    case ULOG_SHADOW_EXCEPTION:
+      {
+	ShadowExceptionEvent *evict_event=dynamic_cast<ShadowExceptionEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",IDLE);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	  if (evict_event->began_execution)
+	    jobClassAd->InsertAttr("LastVacateTime",eventTime);
+	}
+
+	jobClassAd->InsertAttr("LastVacateReason",evict_event->message);
+
+	// ignore file trasfer for now
+      }
+      break;
+
+    case ULOG_JOB_DISCONNECTED:
+    case ULOG_JOB_RECONNECTED:
+      // these are temporary problems, ignore
+      break;
+
+    case ULOG_JOB_RECONNECT_FAILED:
+      {
+	JobReconnectFailedEvent *evict_event=dynamic_cast<JobReconnectFailedEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",IDLE);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	  jobClassAd->InsertAttr("LastVacateTime",eventTime);
+	}
+
+	jobClassAd->InsertAttr("LastVacateReason",evict_event->getReason());
+      }
+      break;
+      
+    case ULOG_JOB_HELD:
+      {
+	JobHeldEvent *hold_event=dynamic_cast<JobHeldEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	int prev_status=IDLE;
+	{
+	  classad::Value v;
+	  jobClassAd->EvaluateExpr("JobStatus",v) && v.IsIntegerValue(prev_status);
+	}
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",HELD);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	  if (prev_status!=IDLE) {
+	    jobClassAd->InsertAttr("LastVacateTime",eventTime);
+	    jobClassAd->InsertAttr("LastVacateReason",hold_event->getReason());
+	  }
+	}
+
+	jobClassAd->InsertAttr("HoldReason",hold_event->getReason());
+	jobClassAd->InsertAttr("HoldReasonCode",hold_event->getReasonCode());
+      	jobClassAd->InsertAttr("HoldReasonSubCode",hold_event->getReasonSubCode());
+	if (hold_event->getReasonCode()!=1) {
+	  classad::Value v;
+	  int i;
+	  if (jobClassAd->EvaluateExpr("NumSystemHolds+1",v) && v.IsIntegerValue(i)) {
+	    jobClassAd->InsertAttr("NumSystemHolds",i);
+	  } else {
+	    jobClassAd->InsertAttr("NumSystemHolds",1);
+	  }
+	}
+      }
+      break;
+      
+    case ULOG_JOB_RELEASED:
+      {
+	JobReleasedEvent *rel_event=dynamic_cast<JobReleasedEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",IDLE);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+
+	}
+
+	jobClassAd->InsertAttr("ReleaseReason",rel_event->getReason());
+      }
+      break;
+
+    case ULOG_JOB_ABORTED:
+      {
+	JobAbortedEvent *abort_event=dynamic_cast<JobAbortedEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// Change status, preserving the old one
+	jobClassAd->Insert("LastJobStatus",jobClassAd->Remove("JobStatus"));
+	jobClassAd->InsertAttr("JobStatus",REMOVED);
+
+	// Update the time attributes
+	{
+	  condor_time_t eventTime = getEventTime(event);
+	  jobClassAd->InsertAttr("EnteredCurrentStatus",eventTime);
+	}
+
+	jobClassAd->InsertAttr("RemoveReason",abort_event->getReason());
+      }
+      break;
+
+      
+    case ULOG_IMAGE_SIZE:
+      {
+	JobImageSizeEvent *img_event=dynamic_cast<JobImageSizeEvent*>(event);
+	ClassAd *jobClassAd = cmap[jobid];
+
+	jobClassAd->InsertAttr("ImageSize",img_event->image_size_kb);
+	jobClassAd->InsertAttr("ResidentSetSize",img_event->resident_set_size_kb);
+	jobClassAd->InsertAttr("ProportionalSetSize",img_event->proportional_set_size_kb);
+      }
+      break;
+
+
+    case ULOG_JOB_AD_INFORMATION:
+      {
+	// The JobAdInformation ClassAd contains both
+	//   the interesting attributes and
+	//   the classad attributes of the previous event
+	// So I need to do a diff to get only the interesting ones
+
+	ClassAd *eventClassAd=event->toClassAd();
+	ClassAd *prevEventClassAd=emap[jobid]->toClassAd();
+	ClassAd *jobClassAd = cmap[jobid];
+
+	// delete attributes from the previous event
+	for (ClassAd::iterator it=prevEventClassAd->begin();
+	     it!=prevEventClassAd->end();
+	     ++it) {
+	  eventClassAd->Delete(it->first);
+	}
+
+	// plus, delete attributes that were added by JobAdEvent itself
+	eventClassAd->Delete("MyType");
+	eventClassAd->Delete("Cluster");
+	eventClassAd->Delete("Proc");
+	eventClassAd->Delete("Subproc");
+	eventClassAd->Delete("CurrentTime");
+	eventClassAd->Delete("EventTypeNumber");
+	eventClassAd->Delete("TriggerEventTypeNumber");
+	eventClassAd->Delete("TriggerEventTypeName");
+	
+	// merge the rest
+	jobClassAd->Update(*eventClassAd);
+
+	
+	delete eventClassAd; 
+	delete prevEventClassAd;
+      }
+      break;
+
+
+    case ULOG_EXECUTABLE_ERROR:
+      // Don't do anything here, because we seem to always
+      // also get an ABORTED event when we get an
+      // EXECUTABLE_ERROR event.  (Not doing anything
+    case ULOG_NODE_EXECUTE:
+    case ULOG_NODE_TERMINATED:
+    case ULOG_POST_SCRIPT_TERMINATED:
+    case ULOG_GENERIC:
+    // ignoring Grid events for now
+    // ignoring Checkpointing events for now
+    default:
+      break;
+    }
+    if (eventNumber!=ULOG_SUBMIT) {
+      // SUMBIT is the first to touch emap
+      delete emap[jobid];
+    }
+    emap[jobid]=event;
+  }
+
+  for (std::map<CondorID,ClassAd *>::iterator it=cmap.begin(); it!=cmap.end();++it) {
+    // delete all old events
+    /// can use the cmap index because the instertion happens at the same time
+    delete emap[it->first];
+
+    // output the classad
+    // the list now gets the ownership
+    classads.Insert(it->second);
+  }
+
+  return true;
+}
+
 #ifdef HAVE_EXT_POSTGRESQL
 
 /* get the quill address for the quillName specified */
diff --git a/src/condor_utils/condor_id.h b/src/condor_utils/condor_id.h
index d93ad10..b9a8ab5 100644
--- a/src/condor_utils/condor_id.h
+++ b/src/condor_utils/condor_id.h
@@ -69,6 +69,14 @@ class CondorID : public ServiceData
         return Compare (condorID) == 0;
     }
 
+    /** Test for inequality between two CondorID's.
+        @param the other CondorID object
+        @return true if less, false if not
+    */
+    inline bool operator< (const CondorID &condorID) const {
+        return Compare (condorID) == -1;
+    }
+
 		/** Comparison function for use with SelfDrainingQueue.
 			This method is static (to live in the CondorID namespace).
 			Takes pointers to two CondorID objects (though the
