diff --git a/src/condor_includes/condor_accountant.h b/src/condor_includes/condor_accountant.h
index 1e12086..14b6650 100644
--- a/src/condor_includes/condor_accountant.h
+++ b/src/condor_includes/condor_accountant.h
@@ -101,6 +101,12 @@ public:
 
   bool UsingWeightedSlots();
 
+  struct ci_less {
+      bool operator()(const string& a, const string& b) const {
+          return strcasecmp(a.c_str(), b.c_str()) < 0;
+      }
+  };
+
 private:
 
   //--------------------------------------------------------
@@ -147,7 +153,7 @@ private:
   HashTable<MyString, double> concurrencyLimits;
 
   GroupEntry* hgq_root_group;
-  map<string, GroupEntry*> hgq_submitter_group_map;
+  map<string, GroupEntry*, ci_less> hgq_submitter_group_map;
 
   //--------------------------------------------------------
   // Static values
diff --git a/src/condor_negotiator.V6/Accountant.cpp b/src/condor_negotiator.V6/Accountant.cpp
index f853caa..c762efc 100644
--- a/src/condor_negotiator.V6/Accountant.cpp
+++ b/src/condor_negotiator.V6/Accountant.cpp
@@ -316,16 +316,14 @@ GroupEntry* Accountant::GetAssignedGroup(const MyString& CustomerName) {
 }
 
 GroupEntry* Accountant::GetAssignedGroup(const MyString& CustomerName, bool& IsGroup) {
-    MyString t(CustomerName);
-    t.lower_case();
-    string subname = t.Value();
+    string subname = CustomerName.Value();
 
     // Is this an acct group, syntactically speaking?
     string::size_type pos = subname.find_last_of('@');
     IsGroup = (pos == string::npos);
 
     // cache results from previous invocations
-    map<string, GroupEntry*>::iterator fs(hgq_submitter_group_map.find(subname));
+    map<string, GroupEntry*, ci_less>::iterator fs(hgq_submitter_group_map.find(subname));
     if (fs != hgq_submitter_group_map.end()) return fs->second;
 
     ASSERT(NULL != hgq_root_group);
@@ -358,7 +356,7 @@ GroupEntry* Accountant::GetAssignedGroup(const MyString& CustomerName, bool& IsG
 
     // walk down the tree using the group path
     for (vector<string>::iterator j(gpath.begin());  j != gpath.end();  ++j) {
-        map<string, GroupEntry::size_type>::iterator f(group->chmap.find(*j));
+        map<string, GroupEntry::size_type, ci_less>::iterator f(group->chmap.find(*j));
         if (f == group->chmap.end()) {
             if (hgq_root_group->children.size() > 0) {
                 // I only want to log a warning if an HGQ configuration exists
@@ -581,11 +579,8 @@ void Accountant::SetLastTime(const MyString& CustomerName, int LastTime)
 // Add a match
 //------------------------------------------------------------------
 
-void Accountant::AddMatch(const MyString& CustomerNameP, ClassAd* ResourceAd) 
+void Accountant::AddMatch(const MyString& CustomerName, ClassAd* ResourceAd) 
 {
-  MyString CustomerName = CustomerNameP;
-  CustomerName.lower_case();
-
   // Get resource name and the time
   MyString ResourceName=GetResourceName(ResourceAd);
   time_t T=time(0);
diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index 8c8756b..6b17d72 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -1117,9 +1117,7 @@ negotiationTime ()
                 dprintf(D_ALWAYS, "group quotas: WARNING: ignoring submitter ad with no name\n");
                 continue;
             }
-            // important to case-fold these so group names match 
-            tname.lower_case();
-            // this holds the (case-folded) submitter name, which includes group, if present
+            // this holds the submitter name, which includes group, if present
             const string subname(tname.Value());
 
             // is there a username separator?
@@ -1344,9 +1342,6 @@ void Matchmaker::hgq_construct_tree() {
     hgq_root_name = "<none>";
 	vector<string> groups;
     if (NULL != groupnames) {
-        // map to lower case for case insensitivity
-        strlwr(groupnames);
-
         StringList group_name_list;
         group_name_list.initializeFromString(groupnames);
         group_name_list.rewind();
@@ -1369,7 +1364,7 @@ void Matchmaker::hgq_construct_tree() {
     }
 
     // This is convenient for making sure a parent group always appears before its children
-    std::sort(groups.begin(), groups.end());
+    std::sort(groups.begin(), groups.end(), Accountant::ci_less());
 
     // our root group always exists -- all configured HGQ groups are implicitly 
     // children / descendents of the root
@@ -1403,7 +1398,7 @@ void Matchmaker::hgq_construct_tree() {
         bool missing_parent = false;
         for (unsigned long k = 0;  k < gpath.size()-1;  ++k) {
             // chmap is mostly a structure to avoid n^2 behavior in groups with many children
-            map<string, GroupEntry::size_type>::iterator f(group->chmap.find(gpath[k]));
+            map<string, GroupEntry::size_type, Accountant::ci_less>::iterator f(group->chmap.find(gpath[k]));
             if (f == group->chmap.end()) {
                 dprintf(D_ALWAYS, "group quotas: WARNING: ignoring group name %s with missing parent %s\n", gname.c_str(), gpath[k].c_str());
                 missing_parent = true;
diff --git a/src/condor_negotiator.V6/matchmaker.h b/src/condor_negotiator.V6/matchmaker.h
index 8168bb9..e0d647b 100644
--- a/src/condor_negotiator.V6/matchmaker.h
+++ b/src/condor_negotiator.V6/matchmaker.h
@@ -83,7 +83,7 @@ struct GroupEntry {
     // tree structure
     GroupEntry* parent;
     vector<GroupEntry*> children;
-    map<string, size_type> chmap;
+    map<string, size_type, Accountant::ci_less> chmap;
 };
 
 
