diff --git a/src/condor_daemon_client/dc_startd.cpp b/src/condor_daemon_client/dc_startd.cpp
index ec3ab14..d365394 100644
--- a/src/condor_daemon_client/dc_startd.cpp
+++ b/src/condor_daemon_client/dc_startd.cpp
@@ -51,7 +51,7 @@ DCStartd::DCStartd( const char* tName, const char* tPool, const char* tAddr,
 	}
 }
 
-DCStartd::DCStartd( ClassAd *ad, const char *tPool )
+DCStartd::DCStartd( const ClassAd *ad, const char *tPool )
 	: Daemon(ad,DT_STARTD,tPool),
 	  claim_id(NULL)
 {
diff --git a/src/condor_daemon_client/dc_startd.h b/src/condor_daemon_client/dc_startd.h
index 7edd082..f44b584 100644
--- a/src/condor_daemon_client/dc_startd.h
+++ b/src/condor_daemon_client/dc_startd.h
@@ -49,7 +49,7 @@ public:
 	DCStartd( const char* const name, const char* const pool,
 			  const char* const addr, const char* const id );
 
-	DCStartd( ClassAd *ad, const char *pool = NULL );
+	DCStartd( const ClassAd *ad, const char *pool = NULL );
 
 		/// Destructor.
 	~DCStartd();
diff --git a/src/condor_utils/param_info.in b/src/condor_utils/param_info.in
index e192d42..162cdb8 100644
--- a/src/condor_utils/param_info.in
+++ b/src/condor_utils/param_info.in
@@ -10265,6 +10265,22 @@ url=http://cs.wisc.edu/condor/manual/v7.3/3_3Configuration.html#SECTION
 tags=defrag
 id=602
 
+[DEFRAG_CANCEL_REQUIREMENTS]
+aliases=
+default=$(DEFRAG_WHOLE_MACHINE_EXPR)
+version=0.0.0
+range=.*
+state=default
+type=string
+is_macro=false
+reconfig=true
+customization=seldom
+friendly_name=
+usage=
+url=http://cs.wisc.edu/condor/manual/v7.3/3_3Configuration.html#SECTION
+tags=defrag
+id=602
+
 [DEFRAG_WHOLE_MACHINE_EXPR]
 aliases=
 default=Cpus == TotalCpus && Offline=!=True
diff --git a/src/defrag/defrag.cpp b/src/defrag/defrag.cpp
index 26aec0a..98fa808 100644
--- a/src/defrag/defrag.cpp
+++ b/src/defrag/defrag.cpp
@@ -34,7 +34,8 @@
 #include "get_daemon_name.h"
 #include "defrag.h"
 
-char const * const ATTR_LAST_POLL = "LastPoll";
+static char const * const ATTR_LAST_POLL = "LastPoll";
+static char const * const DRAINING_CONSTRAINT = "Draining && Offline=!=True";
 
 Defrag::Defrag():
 	m_polling_interval(-1),
@@ -185,6 +186,12 @@ void Defrag::config()
 		}
 	}
 
+	if (param(m_cancel_requirements, "DEFRAG_CANCEL_REQUIREMENTS")) {
+		validateExpr( m_cancel_requirements.c_str(), "DEFRAG_CANCEL_REQUIREMENTS" );
+	} else {
+		m_cancel_requirements = "";
+	}
+
 	param(m_defrag_name,"DEFRAG_NAME");
 
 	int stats_quantum = m_polling_interval;
@@ -448,6 +455,64 @@ static int prorate(int n,int time_remaining,int period,int granularity)
 	return answer;
 }
 
+void Defrag::poll_cancel(MachineSet &cancelled_machines)
+{
+	if (!m_cancel_requirements.size())
+	{
+		return;
+	}
+
+	MachineSet draining_whole_machines;
+	std::stringstream draining_whole_machines_ss;
+	draining_whole_machines_ss << "(" <<  m_cancel_requirements << ") && (" << DRAINING_CONSTRAINT << ")";
+	int num_draining_whole_machines = countMachines(draining_whole_machines_ss.str().c_str(),
+		"<DEFRAG_CANCEL_REQUIREMENTS>", &draining_whole_machines);
+
+	if (num_draining_whole_machines)
+	{
+		dprintf(D_ALWAYS, "Of the whole machines, %d are in the draining state.\n", num_draining_whole_machines);
+	}
+	else
+	{	// Early exit: nothing to do.
+		return;
+	}
+
+	ClassAdList startdAds;
+	if (!queryMachines(DRAINING_CONSTRAINT, "DRAINING_CONSTRAINT <all draining slots>",startdAds))
+	{
+		return;
+	}
+
+	startdAds.Shuffle();
+	startdAds.Sort(StartdSortFunc,&m_rank_ad);
+
+	startdAds.Open();
+
+	unsigned int cancel_count = 0;
+	ClassAd *startd_ad_ptr;
+	while ( (startd_ad_ptr=startdAds.Next()) )
+	{
+		if (!startd_ad_ptr) continue;
+
+		ClassAd &startd_ad = *startd_ad_ptr;
+		std::string machine;
+		std::string name;
+		startd_ad.LookupString(ATTR_NAME,name);
+		slotNameToDaemonName(name,machine);
+
+		if( !cancelled_machines.count(machine) && draining_whole_machines.count(machine) ) {
+			cancel_drain(startd_ad);
+			cancelled_machines.insert(machine);
+			cancel_count ++;
+		}
+	}
+
+	startdAds.Close();
+
+
+	dprintf(D_ALWAYS, "Cancelled draining of %u whole machines.\n", cancel_count);
+}
+
 void Defrag::poll()
 {
 	dprintf(D_FULLDEBUG,"Evaluating defragmentation policy.\n");
@@ -479,8 +544,7 @@ void Defrag::poll()
 		num_to_drain += prorate(m_draining_per_poll_day,now-current_day,3600*24,m_polling_interval);
 	}
 
-	char const *draining_constraint = "Draining && Offline=!=True";
-	int num_draining = countMachines(draining_constraint,"<InternalDrainingConstraint>");
+	int num_draining = countMachines(DRAINING_CONSTRAINT,"<InternalDrainingConstraint>");
 	m_stats.MachinesDraining = num_draining;
 
 	MachineSet whole_machines;
@@ -492,6 +556,10 @@ void Defrag::poll()
 
 	queryDrainingCost();
 
+	// If possible, cancel some drains.
+	MachineSet cancelled_machines;
+	poll_cancel(cancelled_machines);
+
 	if( num_to_drain <= 0 ) {
 		dprintf(D_ALWAYS,"Doing nothing, because number to drain in next %ds is calculated to be 0.\n",
 				m_polling_interval);
@@ -559,14 +627,26 @@ void Defrag::poll()
 
 	startdAds.Open();
 	int num_drained = 0;
-	ClassAd *startd_ad;
+	ClassAd *startd_ad_ptr;
 	MachineSet machines_done;
-	while( (startd_ad=startdAds.Next()) ) {
+	while( (startd_ad_ptr=startdAds.Next()) ) {
+
+		if (!startd_ad_ptr) continue;
+		ClassAd &startd_ad = *startd_ad_ptr;
+
 		std::string machine;
 		std::string name;
-		startd_ad->LookupString(ATTR_NAME,name);
+		startd_ad.LookupString(ATTR_NAME,name);
 		slotNameToDaemonName(name,machine);
 
+		// If we have already cancelled draining on this machine, ignore it for this cycle.
+		if( cancelled_machines.count(machine) ) {
+			dprintf(D_FULLDEBUG,
+					"Skipping %s: already cancelled draining of %s in this cycle.\n",
+					name.c_str(),machine.c_str());
+			continue;
+		}
+
 		if( machines_done.count(machine) ) {
 			dprintf(D_FULLDEBUG,
 					"Skipping %s: already attempted to drain %s in this cycle.\n",
@@ -601,26 +681,24 @@ void Defrag::poll()
 }
 
 bool
-Defrag::drain(ClassAd *startd_ad)
+Defrag::drain(const ClassAd &startd_ad)
 {
-	ASSERT( startd_ad );
-
 	std::string name;
-	startd_ad->LookupString(ATTR_NAME,name);
+	startd_ad.LookupString(ATTR_NAME,name);
 
 	dprintf(D_ALWAYS,"Initiating %s draining of %s.\n",
 			m_draining_schedule_str.c_str(),name.c_str());
 
-	DCStartd startd( startd_ad );
+	DCStartd startd( &startd_ad );
 
 	int graceful_completion = 0;
-	startd_ad->LookupInteger(ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION,graceful_completion);
+	startd_ad.LookupInteger(ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_COMPLETION,graceful_completion);
 	int quick_completion = 0;
-	startd_ad->LookupInteger(ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION,quick_completion);
+	startd_ad.LookupInteger(ATTR_EXPECTED_MACHINE_QUICK_DRAINING_COMPLETION,quick_completion);
 	int graceful_badput = 0;
-	startd_ad->LookupInteger(ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT,graceful_badput);
+	startd_ad.LookupInteger(ATTR_EXPECTED_MACHINE_GRACEFUL_DRAINING_BADPUT,graceful_badput);
 	int quick_badput = 0;
-	startd_ad->LookupInteger(ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT,quick_badput);
+	startd_ad.LookupInteger(ATTR_EXPECTED_MACHINE_QUICK_DRAINING_BADPUT,quick_badput);
 
 	time_t now = time(NULL);
 	std::string draining_check_expr;
@@ -659,6 +737,27 @@ Defrag::drain(ClassAd *startd_ad)
 	return true;
 }
 
+bool
+Defrag::cancel_drain(const ClassAd &startd_ad)
+{
+
+	std::string name;
+	startd_ad.LookupString(ATTR_NAME,name);
+
+	dprintf(D_ALWAYS,"Initiating %s draining of %s.\n",
+		m_draining_schedule_str.c_str(),name.c_str());
+
+	DCStartd startd( &startd_ad );
+
+	bool rval = startd.cancelDrainJobs( NULL );
+	if ( rval ) {
+		dprintf(D_FULLDEBUG, "Sent request to cancel draining on %s\n", startd.name());
+	} else {
+		dprintf(D_ALWAYS, "Unable to cancel draining on %s: %s\n", startd.name(), startd.error());
+	}
+	return rval;
+}
+
 void
 Defrag::publish(ClassAd *ad)
 {
diff --git a/src/defrag/defrag.h b/src/defrag/defrag.h
index 8c7fd51..41923f2 100644
--- a/src/defrag/defrag.h
+++ b/src/defrag/defrag.h
@@ -40,11 +40,11 @@ class Defrag: public Service {
 	void stop();
 
 	void poll(); // do the periodic policy evaluation
-	bool drain(ClassAd *startd_ad);
 
 	typedef std::set< std::string > MachineSet;
 
  private:
+
 	int m_polling_interval; // delay between evaluations of the policy
 	int m_polling_timer;
 	double m_draining_per_hour;
@@ -58,6 +58,7 @@ class Defrag: public Service {
 	ClassAd m_rank_ad;
 	int m_draining_schedule;
 	std::string m_draining_schedule_str;
+	std::string m_cancel_requirements; // Requirements to stop a drain.
 
 	time_t m_last_poll;
 
@@ -70,6 +71,11 @@ class Defrag: public Service {
 	ClassAd m_public_ad;
 	DefragStats m_stats;
 
+	void poll_cancel(MachineSet &); // Cancel any machines that match DEFRAG_CANCEL_REQUIREMENTS
+
+	bool drain(const ClassAd &startd_ad);
+	bool cancel_drain(const ClassAd &startd_ad);
+
 	void validateExpr(char const *constraint,char const *constraint_source);
 	bool queryMachines(char const *constraint,char const *constraint_source,ClassAdList &startdAds);
 
