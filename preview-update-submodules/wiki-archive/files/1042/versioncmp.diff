diff --git a/src/classad/classad/fnCall.h b/src/classad/classad/fnCall.h
index 28f43533bf..0cf75146cc 100644
--- a/src/classad/classad/fnCall.h
+++ b/src/classad/classad/fnCall.h
@@ -187,7 +187,10 @@ class FunctionCall : public ExprTree
 						  Value&);
 	static bool compareString(const char*,const ArgumentList&,EvalState&,
 						  Value&);
-	
+
+    static bool compareVersion( const char * name, const ArgumentList & args,
+        EvalState & state, Value & result );
+
 	// pattern matching
 	static bool matchPattern(const char*,const ArgumentList&,EvalState&,
 							 Value&);
diff --git a/src/classad/fnCall.cpp b/src/classad/fnCall.cpp
index 007d398acc..945b19185c 100644
--- a/src/classad/fnCall.cpp
+++ b/src/classad/fnCall.cpp
@@ -28,6 +28,69 @@
 #include "classad/sink.h"
 #include "classad/util.h"
 
+// We don't want to depend on libcondor_utils, so for now just duplicate
+// the natural_cmp code here.
+// ----------------------------------------------------------------------------
+#include <ctype.h>
+
+// "natural" string compare -- a replacement for strcmp(3)
+// takes numeric portions into account, as specified in strverscmp(3)
+int natural_cmp(const char *s1, const char *s2)
+{
+	const char *s1_beg = s1;      // s1 begin
+	const char *n1_beg, *n2_beg;  // s1/s2 number begin
+	const char *n1_end, *n2_end;  // s1/s2 number end
+	const char *z1_end, *z2_end;  // s1/s2 zeros end
+
+	// find first mismatch
+	for ( ; *s1 && *s1 == *s2; ++s1, ++s2) {}
+	if (*s1 == *s2) {
+		return 0;
+	}
+
+	// find digits leading up to mismatch
+	for (n1_beg = s1; n1_beg > s1_beg && isdigit(n1_beg[-1]); --n1_beg) {}
+	n2_beg = s2 - (s1 - n1_beg);
+
+	// just compare mismatch unless it touches a digit in both strings
+	if (n1_beg == s1 && (!isdigit(*s1) || !isdigit(*s2))) {
+		return *s1 - *s2;
+	}
+
+	// find leading zeros
+	for (z1_end = n1_beg; *z1_end == '0'; ++z1_end) {}
+	for (z2_end = n2_beg; *z2_end == '0'; ++z2_end) {}
+
+	// don't count a final trailing zero as a leading zero
+	if (z1_end > n1_beg && !isdigit(*z1_end)) {
+		--z1_end;
+	}
+	if (z2_end > n2_beg && !isdigit(*z2_end)) {
+		--z2_end;
+	}
+
+	// fewer leading zeros comes first
+	if (z1_end - n1_beg != z2_end - n2_beg) {
+		return (int)((z2_end - n2_beg) - (z1_end - n1_beg));
+	}
+
+	// for an equal positive number of leading zeros, compare mismatch
+	if (z1_end > n1_beg) {
+		return *s1 - *s2;
+	}
+
+	// no leading zeros, the rest is an arbitrary length numeric compare
+	for (n1_end = z1_end; isdigit(*n1_end); ++n1_end) {}
+	for (n2_end = z2_end; isdigit(*n2_end); ++n2_end) {}
+
+	if (n1_end - n1_beg != n2_end - n2_beg) {
+		return (int)((n1_end - n1_beg) - (n2_end - n2_beg));
+	} else {
+		return *s1 - *s2;
+	}
+}
+// ----------------------------------------------------------------------------
+
 #ifdef WIN32
  #if _MSC_VER < 1900
  double rint(double rval) { return floor(rval + .5); }
@@ -148,6 +211,15 @@ FunctionCall( )
         functionTable["strcmp"      ] = (void*)compareString;
         functionTable["stricmp"     ] = (void*)compareString;
 
+			// version comparison
+        functionTable["versioncmp"  ] = (void*)compareVersion;
+        functionTable["versionLE"   ] = (void*)compareVersion;
+        functionTable["versionLT"   ] = (void*)compareVersion;
+        functionTable["versionGE"   ] = (void*)compareVersion;
+        functionTable["versionGT"   ] = (void*)compareVersion;
+		// Not identical to str1 =?= str2 because it won't eat undefined.
+        functionTable["versionEQ"   ] = (void*)compareVersion;
+
 			// pattern matching (regular expressions) 
 #if defined USE_POSIX_REGEX || defined USE_PCRE
 		functionTable["regexp"		] =	(void*)matchPattern;
@@ -1808,6 +1880,58 @@ subString( const char*, const ArgumentList &argList, EvalState &state,
 }
 
 bool FunctionCall::
+compareVersion( const char * name, const ArgumentList & argList,
+  EvalState & state, Value & result ) {
+	if( argList.size() != 2 ) {
+		result.SetErrorValue();
+		return true;
+	}
+
+	Value 	left, right;
+	if(!argList[0]->Evaluate(state, left) ||
+       !argList[1]->Evaluate(state, right)) {
+		result.SetErrorValue();
+		return false;
+	}
+
+	// It seems like the version*() functions are more useful this way.
+	if(left.IsUndefinedValue() || right.IsUndefinedValue()) {
+		result.SetUndefinedValue();
+		return true;
+	}
+
+	Value cLeft, cRight;
+	std::string sLeft, sRight;
+	if(  convertValueToStringValue( left, cLeft )
+	  && convertValueToStringValue( right, cRight )
+	  && cLeft.IsStringValue(sLeft)
+	  && cRight.IsStringValue(sRight) ) {
+	  	int r = natural_cmp( sLeft.c_str(), sRight.c_str() );
+	  	if( 0 == strcasecmp( name, "versioncmp" ) ) {
+	  		result.SetIntegerValue(r);
+	  	} else if( 0 == strcmp( name, "versionLE" ) ) {
+	  		result.SetBooleanValue( r <= 0 );
+	  	} else if( 0 == strcmp( name, "versionLT" ) ) {
+	  		result.SetBooleanValue( r < 0 );
+	  	} else if( 0 == strcmp( name, "versionGE" ) ) {
+	  		result.SetBooleanValue( r >= 0 );
+	  	} else if( 0 == strcmp( name, "versionGT" ) ) {
+	  		result.SetBooleanValue( r > 0 );
+	  	} else if( 0 == strcmp( name, "versionEQ" ) ) {
+	  		result.SetBooleanValue( r == 0 );
+	  	} else {
+	  		// This should never happen.
+	  		result.SetErrorValue();
+	  	}
+	} else {
+		result.SetErrorValue();
+		return true;
+	}
+
+	return true;
+}
+
+bool FunctionCall::
 compareString( const char*name, const ArgumentList &argList, EvalState &state, 
 	Value &result )
 {
