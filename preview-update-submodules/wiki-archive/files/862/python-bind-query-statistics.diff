diff --git a/src/python-bindings/collector.cpp b/src/python-bindings/collector.cpp
index f1a84f7..8dcd014 100644
--- a/src/python-bindings/collector.cpp
+++ b/src/python-bindings/collector.cpp
@@ -114,13 +114,19 @@ struct Collector {
         if (m_collectors) delete m_collectors;
     }
 
-    object query(AdTypes ad_type, const std::string &constraint, list attrs)
+    object query(AdTypes ad_type, const std::string &constraint, list attrs, const char *statistics)
     {
         CondorQuery query(ad_type);
         if (constraint.length())
         {
             query.addANDConstraint(constraint.c_str());
         }
+        if (statistics && statistics[0])
+        {
+            std::string buffer("STATISTICS_TO_PUBLISH = \"");
+            buffer += statistics; buffer += "\"";
+            query.addExtraAttribute(buffer.c_str());
+        }
         std::vector<const char *> attrs_char;
         std::vector<std::string> attrs_str;
         int len_attrs = py_len(attrs);
@@ -187,13 +193,13 @@ struct Collector {
     object locateAll(daemon_t d_type)
     {
         AdTypes ad_type = convert_to_ad_type(d_type);
-        return query(ad_type, "", list());
+        return query(ad_type, "", list(), NULL);
     }
 
     object locate(daemon_t d_type, const std::string &name)
     {
         std::string constraint = "stricmp(" ATTR_NAME ", \"" + name + "\") == 0";
-        object result = query(convert_to_ad_type(d_type), constraint, list());
+        object result = query(convert_to_ad_type(d_type), constraint, list(), NULL);
         if (py_len(result) >= 1) {
             return result[0];
         }
@@ -207,7 +213,7 @@ struct Collector {
         if (!m_default)
         {
             std::string constraint = "true";
-            object result = query(convert_to_ad_type(d_type), constraint, list());
+            object result = query(convert_to_ad_type(d_type), constraint, list(), NULL);
             if (py_len(result) >= 1) {
                 return result[0];
             }
@@ -284,15 +290,19 @@ struct Collector {
     // docstrings.
     object query0()
     {
-        return query(ANY_AD, "", list());
+        return query(ANY_AD, "", list(), NULL);
     }
     object query1(AdTypes ad_type)
     {
-        return query(ad_type, "", list());
+        return query(ad_type, "", list(), NULL);
     }
     object query2(AdTypes ad_type, const std::string &constraint)
     {
-        return query(ad_type, constraint, list());
+        return query(ad_type, constraint, list(), NULL);
+    }
+    object query3(AdTypes ad_type, const std::string &constraint, list attr_list)
+    {
+        return query(ad_type, constraint, attr_list, NULL);
     }
 
     // TODO: this has crappy error handling when there are multiple collectors.
@@ -380,12 +390,14 @@ void export_collector()
         .def("query", &Collector::query0)
         .def("query", &Collector::query1)
         .def("query", &Collector::query2)
+        .def("query", &Collector::query3)
         .def("query", &Collector::query,
             "Query the contents of a collector.\n"
             ":param ad_type: Type of ad to return from the AdTypes enum; if not specified, uses ANY_AD.\n"
             ":param constraint: A constraint for the ad query; defaults to true.\n"
             ":param attrs: A list of attributes; if specified, the returned ads will be "
             "projected along these attributes.\n"
+            ":param statistics: Statistics verbosity; if specified overrides the configured value of STATISTICS_TO_PUBLISH.\n"
             ":return: A list of ads in the collector matching the constraint.")
         .def("locate", &Collector::locateLocal)
         .def("locate", &Collector::locate,
