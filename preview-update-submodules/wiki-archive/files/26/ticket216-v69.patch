Index: condor_accountant.V6/Accountant.C
===================================================================
RCS file: /p/condor/repository/CONDOR_SRC/src/condor_accountant.V6/Accountant.C,v
retrieving revision 1.65
diff -u -r1.65 Accountant.C
--- condor_accountant.V6/Accountant.C	5 Mar 2008 21:12:51 -0000	1.65
+++ condor_accountant.V6/Accountant.C	24 Feb 2009 21:17:21 -0000
@@ -290,27 +290,28 @@
 //------------------------------------------------------------------
 
 // Get group priority local helper function.
-static float getGroupPriorityFactor(const MyString& CustomerName) 
+float Accountant::getGroupPriorityFactor(const MyString& CustomerName) 
 {
 	float priorityFactor = 0.0;	// "error" value
 
-	// Group names contain a '.' character.
-	// To do:  This is a weak test.  Improve the group test by also checking
-	// the GROUP_NAMES config macro value.
+	// Group names contain a '.' character, so check for it.
 	int pos = CustomerName.FindChar('.');
-	if ( pos == 0 ) return priorityFactor;
-
-	// Group separator character found: Accounting groups
+	if ( pos <= 0 ) return priorityFactor;
+	// Group separator character found: if the group name appears in
+	// config macro GROUP_NAMES, then we know to treat it as a group.
 	MyString GroupName = CustomerName;
 	GroupName.setChar(pos,'\0');
-	MyString groupPrioFactorConfig;
-	groupPrioFactorConfig.sprintf("GROUP_PRIO_FACTOR_%s",
-			GroupName.Value() );
+	if (GroupNamesList && GroupNamesList->contains_anycase(GroupName.Value())) 
+	{
+		MyString groupPrioFactorConfig;
+		groupPrioFactorConfig.sprintf("GROUP_PRIO_FACTOR_%s",
+				GroupName.Value() );
 #define ERR_CONVERT_DEFPRIOFACTOR   (-1.0)
-	double tmpPriorityFactor = param_double(groupPrioFactorConfig.Value(),
-			   ERR_CONVERT_DEFPRIOFACTOR);
-	if (tmpPriorityFactor != ERR_CONVERT_DEFPRIOFACTOR) {
-		priorityFactor = tmpPriorityFactor;
+		double tmpPriorityFactor = param_double(groupPrioFactorConfig.Value(),
+				   ERR_CONVERT_DEFPRIOFACTOR);
+		if (tmpPriorityFactor != ERR_CONVERT_DEFPRIOFACTOR) {
+			priorityFactor = tmpPriorityFactor;
+		}
 	}
 	return priorityFactor;
 }
Index: condor_c++_util/condor_attributes.C
===================================================================
RCS file: /p/condor/repository/CONDOR_SRC/src/condor_c++_util/condor_attributes.C,v
retrieving revision 1.37
diff -u -r1.37 condor_attributes.C
--- condor_c++_util/condor_attributes.C	13 Mar 2008 22:41:42 -0000	1.37
+++ condor_c++_util/condor_attributes.C	24 Feb 2009 21:17:21 -0000
@@ -441,6 +441,8 @@
 const char *ATTR_RANK					 = "Rank";
 const char *ATTR_REAL_UID				 = "RealUid";
 const char *ATTR_RELEASE_REASON			 = "ReleaseReason";
+const char *ATTR_REMOTE_GROUP_RESOURCES_IN_USE = "RemoteGroupResourcesInUse";
+const char *ATTR_REMOTE_GROUP_QUOTA		 = "RemoteGroupQuota";
 const char *ATTR_REMOTE_HOST				 = "RemoteHost";
 const char *ATTR_REMOTE_HOSTS			 = "RemoteHosts";
 const char *ATTR_REMOTE_JOB_ID			 = "RemoteJobId";
@@ -451,6 +453,7 @@
 const char *ATTR_REMOTE_SPOOL_DIR		 = "RemoteSpoolDir";
 const char *ATTR_REMOTE_USER              = "RemoteUser";
 const char *ATTR_REMOTE_USER_PRIO         = "RemoteUserPrio";
+const char *ATTR_REMOTE_USER_RESOURCES_IN_USE = "RemoteUserResourcesInUse";
 // Deprecated (cruft) -- use: ATTR_REMOTE_SLOT_ID 
 const char *ATTR_REMOTE_VIRTUAL_MACHINE_ID = "RemoteVirtualMachineID";
 const char *ATTR_REMOVE_KILL_SIG          = "RemoveKillSig";
@@ -492,8 +495,12 @@
 const char *ATTR_STREAM_INPUT			 = "StreamIn";
 const char *ATTR_STREAM_OUTPUT			 = "StreamOut";
 const char *ATTR_STREAM_ERROR			 = "StreamErr";
+const char *ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE = "SubmitterGroupResourcesInUse";
+const char *ATTR_SUBMITTER_GROUP_QUOTA	 = "SubmitterGroupQuota";
 const char *ATTR_SUBMITTER_ID			 = "SubmitterId";
-const char *ATTR_SUBMITTOR_PRIO           = "SubmittorPrio";
+const char *ATTR_SUBMITTOR_PRIO           = "SubmittorPrio";   // old-style for ATTR_SUBMITTER_USER_PRIO
+const char *ATTR_SUBMITTER_USER_PRIO	  = "SubmitterUserPrio";
+const char *ATTR_SUBMITTER_USER_RESOURCES_IN_USE = "SubmitterUserResourcesInUse";
 const char *ATTR_SUBNET                   = "Subnet";
 const char *ATTR_SUSPEND                  = "Suspend";
 const char *ATTR_SUSPEND_JOB_AT_EXEC      = "SuspendJobAtExec";
Index: condor_daemon_core.V6/condor_daemon_core.h
===================================================================
RCS file: /p/condor/repository/CONDOR_SRC/src/condor_daemon_core.V6/condor_daemon_core.h,v
retrieving revision 1.76
diff -u -r1.76 condor_daemon_core.h
--- condor_daemon_core.V6/condor_daemon_core.h	13 Mar 2008 22:41:43 -0000	1.76
+++ condor_daemon_core.V6/condor_daemon_core.h	24 Feb 2009 21:17:22 -0000
@@ -57,7 +57,7 @@
 #include "daemon_list.h"
 #include "limit.h"
 
-#include "../condor_procd/proc_family_io.h"
+#include "proc_family_interface.h"
 class ProcFamilyInterface;
 
 #if defined(WIN32)
Index: condor_includes/condor_accountant.h
===================================================================
RCS file: /p/condor/repository/CONDOR_SRC/src/condor_includes/condor_accountant.h,v
retrieving revision 1.28
diff -u -r1.28 condor_accountant.h
--- condor_includes/condor_accountant.h	7 Nov 2007 23:14:11 -0000	1.28
+++ condor_includes/condor_accountant.h	24 Feb 2009 21:17:22 -0000
@@ -80,6 +80,9 @@
   void AddMatch(const MyString& CustomerName, const MyString& ResourceName, time_t T);
   void RemoveMatch(const MyString& ResourceName, time_t T);
 
+  // Get group priority helper function.
+  float getGroupPriorityFactor(const MyString& CustomerName); 
+
   //--------------------------------------------------------
   // Configuration variables
   //--------------------------------------------------------
Index: condor_includes/condor_attributes.h
===================================================================
RCS file: /p/condor/repository/CONDOR_SRC/src/condor_includes/condor_attributes.h,v
retrieving revision 1.96
diff -u -r1.96 condor_attributes.h
--- condor_includes/condor_attributes.h	13 Mar 2008 22:41:45 -0000	1.96
+++ condor_includes/condor_attributes.h	24 Feb 2009 21:17:22 -0000
@@ -380,6 +380,8 @@
 extern const char * ATTR_RANK;
 extern const char * ATTR_REAL_UID;
 extern const char * ATTR_RELEASE_REASON;
+extern const char * ATTR_REMOTE_GROUP_RESOURCES_IN_USE;
+extern const char * ATTR_REMOTE_GROUP_QUOTA;
 extern const char * ATTR_REMOTE_HOST;
 extern const char * ATTR_REMOTE_HOSTS;
 extern const char * ATTR_REMOTE_JOB_ID;
@@ -390,6 +392,7 @@
 extern const char * ATTR_REMOTE_SPOOL_DIR;
 extern const char * ATTR_REMOTE_USER;
 extern const char * ATTR_REMOTE_USER_PRIO;
+extern const char * ATTR_REMOTE_USER_RESOURCES_IN_USE;
 // Deprecated (cruft) -- use: ATTR_REMOTE_SLOT_ID 
 extern const char * ATTR_REMOTE_VIRTUAL_MACHINE_ID;
 extern const char * ATTR_REMOVE_KILL_SIG;
@@ -432,7 +435,11 @@
 extern const char * ATTR_STREAM_OUTPUT;
 extern const char * ATTR_STREAM_ERROR;
 extern const char * ATTR_SUBMITTER_ID;
-extern const char * ATTR_SUBMITTOR_PRIO;
+extern const char * ATTR_SUBMITTOR_PRIO;  // old-style for ATTR_SUBMITTER_USER_PRIO
+extern const char * ATTR_SUBMITTER_USER_PRIO;
+extern const char * ATTR_SUBMITTER_USER_RESOURCES_IN_USE;
+extern const char * ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE;
+extern const char * ATTR_SUBMITTER_GROUP_QUOTA;
 extern const char * ATTR_SUBNET;
 extern const char * ATTR_SUSPEND;
 extern const char * ATTR_SUSPEND_JOB_AT_EXEC;
Index: condor_includes/condor_constants.h
===================================================================
RCS file: /p/condor/repository/CONDOR_SRC/src/condor_includes/condor_constants.h,v
retrieving revision 1.26
diff -u -r1.26 condor_constants.h
--- condor_includes/condor_constants.h	7 Nov 2007 23:14:12 -0000	1.26
+++ condor_includes/condor_constants.h	24 Feb 2009 21:17:22 -0000
@@ -115,6 +115,15 @@
  */
 #define SINFUL_STRING_BUF_SIZE 24
 
+/* MAXINT = Max value for a 32bit signed int.  On 
+ * many platforms this is defined as INT_MAX.
+ */
+#ifndef MAXINT
+#ifdef INT_MAX
+#define MAXINT INT_MAX
+#endif
+#endif
+
 #define MYPROXY_MAX_PASSWORD_BUFLEN 256
 
 /* Max space needed to hold a null-terminated
Index: condor_negotiator.V6/matchmaker.C
===================================================================
RCS file: /p/condor/repository/CONDOR_SRC/src/condor_negotiator.V6/matchmaker.C,v
retrieving revision 1.103
diff -u -r1.103 matchmaker.C
--- condor_negotiator.V6/matchmaker.C	5 Mar 2008 21:16:40 -0000	1.103
+++ condor_negotiator.V6/matchmaker.C	24 Feb 2009 21:17:22 -0000
@@ -105,6 +105,8 @@
 	update_interval = 5*MINUTE; 
     DynQuotaMachConstraint = NULL;
 
+	groupQuotasHash = NULL;
+
 	strcpy(RejectsTable, "rejects");
 	strcpy(MatchesTable, "matches");
 
@@ -134,7 +136,8 @@
 
 	if (NegotiatorName) free (NegotiatorName);
 	if (publicAd) delete publicAd;
-    if ( DynQuotaMachConstraint) delete DynQuotaMachConstraint;
+    if (DynQuotaMachConstraint) delete DynQuotaMachConstraint;
+	if (groupQuotasHash) delete groupQuotasHash;
 }
 
 
@@ -308,11 +311,11 @@
 			EXCEPT ("Error parsing PREEMPTION_RANK expression: %s", tmp);
 		}
 	}
-
 	dprintf (D_ALWAYS,"PREEMPTION_RANK = %s\n", (tmp?tmp:"None"));
-
 	if( tmp ) free( tmp );
 
+
+
 	if (NegotiatorPreJobRank) delete NegotiatorPreJobRank;
 	NegotiatorPreJobRank = NULL;
 	tmp = param("NEGOTIATOR_PRE_JOB_RANK");
@@ -363,6 +366,10 @@
 	want_inform_startd = param_boolean("NEGOTIATOR_INFORM_STARTD", true);
 	want_nonblocking_startd_contact = param_boolean("NEGOTIATOR_USE_NONBLOCKING_STARTD_CONTACT",true);
 
+	// we should figure these out automatically someday ....
+	preemption_req_unstable = ! (param_boolean("PREEMPTION_REQUIREMENTS_STABLE",true)) ;
+	preemption_rank_unstable = ! (param_boolean("PREEMPTION_RANK_STABLE",true)) ;
+
 	if (DynQuotaMachConstraint) delete DynQuotaMachConstraint;
 	DynQuotaMachConstraint = NULL;
 	tmp = param("GROUP_DYNAMIC_MACH_CONSTRAINT");
@@ -786,11 +793,16 @@
 	}
 		// Always get rid of the follow attrs:
 		//    CurrentTime - for obvious reasons
-		//    RemoteUserPrio - not needed since we negotiate per user
-		//    SubmittorPrio - not needed since we negotiate per user
+		//    RemoteUserPrio and friends - not needed since we negotiate per user
+		//    SubmittorPrio and friends - not needed since we negotiate per user
 	external_references.remove_anycase(ATTR_CURRENT_TIME);
 	external_references.remove_anycase(ATTR_REMOTE_USER_PRIO);
+	external_references.remove_anycase(ATTR_REMOTE_USER_RESOURCES_IN_USE);
+	external_references.remove_anycase(ATTR_REMOTE_GROUP_RESOURCES_IN_USE);
 	external_references.remove_anycase(ATTR_SUBMITTOR_PRIO);
+	external_references.remove_anycase(ATTR_SUBMITTER_USER_PRIO);
+	external_references.remove_anycase(ATTR_SUBMITTER_USER_RESOURCES_IN_USE);
+	external_references.remove_anycase(ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE);
 		// Note: print_to_string mallocs memory on the heap
 	result = external_references.print_to_string();
 	dprintf(D_FULLDEBUG,"Leaving compute_signficant_attrs() - result=%s\n",
@@ -799,6 +811,44 @@
 }
 
 
+bool Matchmaker::
+getGroupInfoFromUserId( const char *user, int & groupQuota, int & groupUsage )
+{
+	/*  Given a user id in the form group.user, strip off the group name
+		return any associated quota and usage for that group.  On failure,
+		return false and quota=usage=0.
+		NOTE - Since we discover the quotas in negotationTime(), we
+		assert that this function should not be called ahead of a call 
+		to negotationTime().
+	 */
+	ASSERT(groupQuotasHash);
+
+	groupQuota = 0;
+	groupUsage = 0;
+
+	if (!user) return false;
+
+	MyString groupname(user);
+
+		// User Id is group-name.user-name, so replace the
+		// '.' with a NULL.
+	int pos = groupname.FindChar('.');
+	if ( pos <= 0 ) {
+		return false;
+	}
+	groupname.setChar( pos , '\0' );
+	if ( groupQuotasHash->lookup(groupname,groupQuota) == -1 ) {
+		// hash lookup failed, must not be a group name
+		return false;
+	}
+
+	groupUsage = accountant.GetResourcesUsed(groupname.Value());
+
+	return true;
+}
+
+
+
 int Matchmaker::
 negotiationTime ()
 {
@@ -881,9 +931,6 @@
 	if ( num_trimmed > 0 ) {
 		dprintf(D_FULLDEBUG,
 			"Trimmed out %d startd ads not Unclaimed\n",num_trimmed);
-	} else {
-		// for ads which have RemoteUser set, add RemoteUserPrio
-		addRemoteUserPrios( startdAds ); 
 	}
 
 		// We insert NegotiatorMatchExprXXX attributes into the
@@ -928,6 +975,11 @@
 
 		MyString tmpstr;
 		i = 0;
+		if ( !groupQuotasHash ) {
+			groupQuotasHash = new groupQuotasHashType(100,HashFunc);
+			ASSERT(groupQuotasHash);
+		}
+		groupQuotasHash->clear();
 		groupList.rewind();
 		while ((groups = groupList.next ()))
 		{
@@ -961,6 +1013,7 @@
                     continue;
                 }
             }
+
             if ( quota <= 0 ) {
                 // Quota for group may have been set to zero by admin.
                 dprintf(D_ALWAYS,
@@ -969,6 +1022,14 @@
                 continue;
             }
 
+			// store this groups quota into our groupQuotas hash so we 
+			// can easily retrieve the quota for this group elsewhere in 
+			// this class.
+			MyString groupQuotaKey(groups);
+			groupQuotasHash->insert(groupQuotaKey,quota);
+
+			// fill in the info into the groupArray, so we can sort
+			// the groups into the order we want to negotiate them.
 			int usage  = accountant.GetResourcesUsed(groups);
 			groupArray[i].groupName = groups;  // don't free this! (in groupList)
 			groupArray[i].maxAllowed = quota;
@@ -1727,7 +1788,7 @@
 	ClassAd		*offer;
 	bool		only_consider_startd_rank;
 	bool		display_overlimit = true;
-	char		prioExpr[128], remoteUser[128];
+	char		remoteUser[128];
 	int negotiate_command = NEGOTIATE;
 
 	numMatched = 0;
@@ -1804,9 +1865,7 @@
 		return MM_ERROR;
 	}
 
-	// setup expression with the submittor's priority
-	(void) sprintf( prioExpr , "%s = %f" , ATTR_SUBMITTOR_PRIO , priority );
-
+	
 	// 2.  negotiation loop with schedd
 	for (numMatched=0;true;numMatched++)
 	{
@@ -1914,8 +1973,21 @@
 		}
 		dprintf(D_ALWAYS, "    Request %05d.%05d:\n", cluster, proc);
 
-		// insert the priority expression into the request
-		request.Insert( prioExpr );
+		// insert the submitter user priority attributes into the request ad
+		// first insert old-style ATTR_SUBMITTOR_PRIO
+		request.Assign(ATTR_SUBMITTOR_PRIO , (float)priority );  
+		// next insert new-style ATTR_SUBMITTER_USER_PRIO
+		request.Assign(ATTR_SUBMITTER_USER_PRIO , (float)priority );  
+		// next insert the submitter user usage attributes into the request
+		request.Assign(ATTR_SUBMITTER_USER_RESOURCES_IN_USE, 
+					   accountant.GetResourcesUsed ( scheddName ));
+		int temp_groupQuota, temp_groupUsage;
+		if (getGroupInfoFromUserId(scheddName,temp_groupQuota,temp_groupUsage))
+		{
+			// this is a group, so enter group usage info
+			request.Assign(ATTR_SUBMITTER_GROUP_RESOURCES_IN_USE,temp_groupUsage);
+			request.Assign(ATTR_SUBMITTER_GROUP_QUOTA,temp_groupQuota);
+		}
 
 		// 2e.  find a compatible offer for the request --- keep attempting
 		//		to find matches until we can successfully (1) find a match,
@@ -2131,7 +2203,9 @@
 		 cachedPrio == preemptPrio &&
 		 cachedOnlyForStartdRank == only_for_startdrank &&
 		 strcmp(cachedName,scheddName)==0 &&
-		 strcmp(cachedAddr,scheddAddr)==0 )
+		 strcmp(cachedAddr,scheddAddr)==0 &&
+		 MatchList->cache_still_valid(request,PreemptionReq,PreemptionRank,
+					preemption_req_unstable,preemption_rank_unstable) )
 	{
 		// we can use cached information.  pop off the best
 		// candidate from our sorted list.
@@ -2251,6 +2325,13 @@
 	startdAds.Open ();
 	while ((candidate = startdAds.Next ())) {
 
+			// this will insert remote user priority information into the 
+			// startd ad (if it is currently running a job), which can then
+			// be referenced via the various PREEMPTION_REQUIREMENTS expressions.
+			// we now need to do this inside the inner loop because we insert
+			// usage information 
+		addRemoteUserPrios(candidate);
+
 			// the candidate offer and request must match
 		if( !( *candidate == request ) ) {
 				// they don't match; continue
@@ -2943,64 +3024,101 @@
 }
 
 void Matchmaker::
-addRemoteUserPrios( ClassAdList &cal )
-{
-	ClassAd	*ad;
+addRemoteUserPrios( ClassAd	*ad )
+{	
 	MyString	remoteUser;
-	MyString	buffer;
+	MyString	buffer,buffer1,buffer2,buffer3;
 	MyString    slot_prefix;
 	float	prio;
 	int     total_slots, i;
 	float     preemptingRank;
+	int temp_groupQuota, temp_groupUsage;
 
-	cal.Open();
-	while( ( ad = cal.Next() ) ) {
-			// If there is a preempting user, use that for computing remote user prio.
-			// Otherwise, use the current user.
-		if (ad->LookupString(ATTR_PREEMPTING_ACCOUNTING_GROUP, remoteUser) ||
-			ad->LookupString(ATTR_PREEMPTING_USER, remoteUser) ||
-			ad->LookupString(ATTR_ACCOUNTING_GROUP, remoteUser) ||
-			ad->LookupString(ATTR_REMOTE_USER, remoteUser)) 
+	if ( !ConsiderPreemption ) {
+			// Hueristic - no need to take the time to populate ad with 
+			// accounting information if no preemption is to be considered.
+		return;
+	}
+
+		// If there is a preempting user, use that for computing remote user prio.
+		// Otherwise, use the current user.
+	if( ad->LookupString( ATTR_PREEMPTING_ACCOUNTING_GROUP , remoteUser ) ||
+		ad->LookupString( ATTR_PREEMPTING_USER , remoteUser ) ||
+		ad->LookupString( ATTR_ACCOUNTING_GROUP , remoteUser ) ||
+		ad->LookupString( ATTR_REMOTE_USER , remoteUser ) ) 
+	{
+		prio = (float) accountant.GetPriority( remoteUser.Value() );
+		ad->Assign(ATTR_REMOTE_USER_PRIO, prio);
+		ad->Assign(ATTR_REMOTE_USER_RESOURCES_IN_USE,
+			accountant.GetResourcesUsed( remoteUser.Value() ));
+		if (getGroupInfoFromUserId(remoteUser.Value(),
+									temp_groupQuota,temp_groupUsage))
 		{
-			prio = (float) accountant.GetPriority(remoteUser.Value());
-			ad->Assign(ATTR_REMOTE_USER_PRIO, prio); 
-		}
-		if (ad->LookupFloat( ATTR_PREEMPTING_RANK, preemptingRank)) {
-				// There is already a preempting claim (waiting for
-				// the previous claim to retire), so set current rank
-				// to the preempting rank, since any new preemption
-				// must trump the current preempter.
-			ad->Assign(ATTR_CURRENT_RANK, preemptingRank);
-		}
-		char* resource_prefix = param("STARTD_RESOURCE_PREFIX");
-		if (!resource_prefix) {
-			resource_prefix = strdup("slot");
+			// this is a group, so enter group usage info
+			ad->Assign(ATTR_REMOTE_GROUP_RESOURCES_IN_USE,temp_groupUsage);
+			ad->Assign(ATTR_REMOTE_GROUP_QUOTA,temp_groupQuota);
 		}
+	}
+	if( ad->LookupFloat( ATTR_PREEMPTING_RANK, preemptingRank ) ) {
+			// There is already a preempting claim (waiting for the previous
+			// claim to retire), so set current rank to the preempting
+			// rank, since any new preemption must trump the
+			// current preempter.
+		ad->Assign(ATTR_CURRENT_RANK, preemptingRank);
+	}
+		
+	char* resource_prefix = param("STARTD_RESOURCE_PREFIX");
+	if (!resource_prefix) {
+		resource_prefix = strdup("slot");
+	}
+	total_slots = 0;
+	if (!ad->LookupInteger(ATTR_TOTAL_SLOTS, total_slots)) {
 		total_slots = 0;
-		if (!ad->LookupInteger(ATTR_TOTAL_SLOTS, total_slots)) {
+	}
+	if (!total_slots && (param_boolean("ALLOW_VM_CRUFT", true))) {
+		if (!ad->LookupInteger(ATTR_TOTAL_VIRTUAL_MACHINES, total_slots)) {
 			total_slots = 0;
 		}
-		if (!total_slots && (param_boolean("ALLOW_VM_CRUFT", true))) {
-			if (!ad->LookupInteger(ATTR_TOTAL_VIRTUAL_MACHINES, total_slots)) {
-				total_slots = 0;
-			}
-		}
-			// This won't fire if total_slots is still 0...
-		for(i = 1; i <= total_slots; i++) {
-			slot_prefix.sprintf("%s%d_", resource_prefix, i);
-			buffer.sprintf("%s%s", slot_prefix.Value(), ATTR_REMOTE_USER);
-			if (ad->LookupString(buffer.Value(), remoteUser)) {
-				// If there is a user on that slot, stick that
-				// user's priority into the ad
-				prio = (float) accountant.GetPriority(remoteUser.Value());
-				buffer.sprintf("%s%s", slot_prefix.Value(),
-							   ATTR_REMOTE_USER_PRIO);
-				ad->Assign(buffer.Value(), prio);
+	}
+		// This won't fire if total_slots is still 0...
+	for(i = 1; i <= total_slots; i++) {
+		slot_prefix.sprintf("%s%d_", resource_prefix, i);
+		buffer.sprintf("%s%s", slot_prefix.Value(), ATTR_PREEMPTING_ACCOUNTING_GROUP);
+		buffer1.sprintf("%s%s", slot_prefix.Value(), ATTR_PREEMPTING_USER);
+		buffer2.sprintf("%s%s", slot_prefix.Value(), ATTR_ACCOUNTING_GROUP);
+		buffer3.sprintf("%s%s", slot_prefix.Value(), ATTR_REMOTE_USER);
+			// If there is a preempting user, use that for computing remote user prio.
+		if( ad->LookupString( buffer.Value() , remoteUser ) ||
+			ad->LookupString( buffer1.Value() , remoteUser ) ||
+			ad->LookupString( buffer2.Value() , remoteUser ) ||
+			ad->LookupString( buffer3.Value() , remoteUser ) ) 
+		{
+				// If there is a user on that VM, stick that user's priority
+				// information into the ad	
+			prio = (float) accountant.GetPriority( remoteUser.Value() );
+			buffer.sprintf("%s%s", slot_prefix.Value(), 
+					ATTR_REMOTE_USER_PRIO);
+			ad->Assign(buffer.Value(),prio);
+			buffer.sprintf("%s%s", slot_prefix.Value(), 
+					ATTR_REMOTE_USER_RESOURCES_IN_USE);
+			ad->Assign(buffer.Value(),
+					accountant.GetResourcesUsed(remoteUser.Value()));
+			if (getGroupInfoFromUserId(remoteUser.Value(),
+										temp_groupQuota,temp_groupUsage))
+			{
+					// this is a group, so enter group usage info
+				buffer.sprintf("%s%s = %d", slot_prefix.Value(), 
+					ATTR_REMOTE_GROUP_RESOURCES_IN_USE, 
+					temp_groupUsage);
+				ad->Insert( buffer.Value() );
+				buffer.sprintf("%s%s = %d", slot_prefix.Value(),
+					ATTR_REMOTE_GROUP_QUOTA, 
+					temp_groupQuota);
+				ad->Insert( buffer.Value() );
 			}
-		}
-		free( resource_prefix );
+		}	
 	}
-	cal.Close();
+	free( resource_prefix );
 }
 
 void Matchmaker::
@@ -3057,6 +3175,29 @@
 	}
 }
 
+
+#if 0
+Matchmaker::AdListEntry* Matchmaker::MatchListType::
+peek_candidate()
+{
+	ClassAd* candidate = NULL;
+	int temp_adListHead = adListHead;
+
+	while ( temp_adListHead < adListLen && !candidate ) {
+		candidate = AdListArray[temp_adListHead].ad;
+		temp_adListHead++;
+	}
+
+	if ( candidate ) {
+		temp_adListHead--;
+		ASSERT( temp_adListHead >= 0 );
+		return AdListArray[temp_adListHead];
+	} else {
+		return NULL;
+	}
+}
+#endif
+
 ClassAd* Matchmaker::MatchListType::
 pop_candidate()
 {
@@ -3070,6 +3211,76 @@
 	return candidate;
 }
 
+bool Matchmaker::MatchListType::
+cache_still_valid(ClassAd &request, ExprTree *preemption_req, ExprTree *preemption_rank,
+				  bool preemption_req_unstable, bool preemption_rank_unstable)
+{
+	AdListEntry* next_entry = NULL;
+
+	if ( !preemption_req_unstable && !preemption_rank_unstable ) {
+		return true;
+	}
+
+	// Set next_entry to be a "peek" at the next entry on
+	// our cached match list, i.e. don't actually pop it off our list.
+	{
+		ClassAd* candidate = NULL;
+		int temp_adListHead = adListHead;
+
+		while ( temp_adListHead < adListLen && !candidate ) {
+			candidate = AdListArray[temp_adListHead].ad;
+			temp_adListHead++;
+		}
+
+		if ( candidate ) {
+			temp_adListHead--;
+			ASSERT( temp_adListHead >= 0 );
+			next_entry =  &AdListArray[temp_adListHead];
+		} else {
+			next_entry = NULL;
+		}
+	}
+
+	if ( preemption_req_unstable ) 
+	{
+		if ( !next_entry ) {
+			return false;
+		}
+		
+		if ( next_entry->PreemptStateValue == PRIO_PREEMPTION ) {
+			EvalResult result;
+			if (preemption_req && 
+				!(preemption_req->EvalTree(next_entry->ad,&request,&result) &&
+						result.type == LX_INTEGER && result.i == TRUE) ) 
+			{
+				dprintf(D_FULLDEBUG,
+					"Cache invalidated due to preemption_requirements\n");
+				return false;
+			}
+		}
+	}
+
+	if ( next_entry && preemption_rank_unstable ) 
+	{		
+		if( next_entry->PreemptStateValue != NO_PREEMPTION) {
+			double candidatePreemptRankValue = -(FLT_MAX);
+			candidatePreemptRankValue = EvalNegotiatorMatchRank(
+					"PREEMPTION_RANK",preemption_rank,request,next_entry->ad);
+			if ( candidatePreemptRankValue != next_entry->PreemptRankValue ) {
+				// ranks don't match ....  now what?
+				// ideally we would just want to resort the cache, but for now
+				// we do the safest thing - just invalidate the cache.
+				dprintf(D_FULLDEBUG,
+					"Cache invalidated due to preemption_rank\n");
+				return false;
+				
+			}
+		}
+	}
+
+	return true;
+}
+
 
 void Matchmaker::MatchListType::
 get_diagnostics(int & rejForNetwork,
Index: condor_negotiator.V6/matchmaker.h
===================================================================
RCS file: /p/condor/repository/CONDOR_SRC/src/condor_negotiator.V6/matchmaker.h,v
retrieving revision 1.32
diff -u -r1.32 matchmaker.h
--- condor_negotiator.V6/matchmaker.h	5 Feb 2008 02:15:36 -0000	1.32
+++ condor_negotiator.V6/matchmaker.h	24 Feb 2009 21:17:22 -0000
@@ -81,10 +81,12 @@
 		/// Invalidate our negotiator ad at the collector(s).
 		void invalidateNegotiatorAd( void );
 
+		static float EvalNegotiatorMatchRank(char const *expr_name,ExprTree *expr,
+		                              ClassAd &request,ClassAd *resource);
+
     protected:
 		char * NegotiatorName;
 		int update_interval;
-		
 
 	private:
 		ClassAd * publicAd;
@@ -201,7 +203,7 @@
 		                              int &userprioCrumbs );
 
 		char *getCapability (const char *, const char *, ClassAdList &);
-		void addRemoteUserPrios( ClassAdList& );
+		void addRemoteUserPrios( ClassAd* ad );
 		void insertNegotiatorMatchExprs(ClassAd *ad);
 		void insertNegotiatorMatchExprs( ClassAdList &cal );
 		void reeval( ClassAd *ad );
@@ -210,9 +212,6 @@
 		friend int comparisonFunction (AttrList *, AttrList *,
 										void *);
 
-		float EvalNegotiatorMatchRank(char const *expr_name,ExprTree *expr,
-		                              ClassAd &request,ClassAd *resource);
-
 			// If we are not considering preemption, this function will
 			// trim out startd ads that are not in the Unclaimed state.
 		int trimStartdAds(ClassAdList &startdAds);
@@ -229,6 +228,8 @@
 		int  MaxTimePerSpin;        // How long per pie spin
 		ExprTree *PreemptionReq;	// only preempt if true
 		ExprTree *PreemptionRank; 	// rank preemption candidates
+		bool preemption_req_unstable;
+		bool preemption_rank_unstable;
 		ExprTree *NegotiatorPreJobRank;  // rank applied before job rank
 		ExprTree *NegotiatorPostJobRank; // rank applied after job rank
 		bool want_matchlist_caching;	// should we cache matches per autocluster?
@@ -248,6 +249,12 @@
 
 		typedef HashTable<MyString, MapEntry*> AdHash;
 		AdHash *stashedAds;			
+
+		typedef HashTable<MyString, int> groupQuotasHashType;
+		groupQuotasHashType *groupQuotasHash;
+
+		bool getGroupInfoFromUserId( const char *user, int & groupQuota, 
+			 int & groupUsage );
 		
 #ifdef WANT_NETMAN
 		// allocate network capacity
@@ -321,8 +328,10 @@
 		class MatchListType
 		{
 		public:
-
+			
 			ClassAd* pop_candidate();
+			bool cache_still_valid(ClassAd &request,ExprTree *preemption_req,
+				ExprTree *preemption_rank,bool preemption_req_unstable, bool preemption_rank_unstable);
 			void get_diagnostics(int & rejForNetwork,
 					int & rejForNetworkShare,
 					int & rejPreemptForPrio,
@@ -344,8 +353,10 @@
 
 			MatchListType(int maxlen);
 			~MatchListType();
-
+			
 		private:
+
+			// AdListEntry* peek_candidate();
 			static int sort_compare(const void*, const void*);
 			AdListEntry* AdListArray;			
 			int adListMaxLen;	// max length of AdListArray
