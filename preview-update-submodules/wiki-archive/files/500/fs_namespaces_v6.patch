diff --git a/src/condor_daemon_core.V6/condor_daemon_core.h b/src/condor_daemon_core.V6/condor_daemon_core.h
index b15ba63..81773bf 100644
--- a/src/condor_daemon_core.V6/condor_daemon_core.h
+++ b/src/condor_daemon_core.V6/condor_daemon_core.h
@@ -60,6 +60,7 @@
 #include "condor_sinful.h"
 #include "condor_sockaddr.h"
 #include "generic_stats.h"
+#include "filesystem_remap.h"
 
 #include "../condor_procd/proc_family_io.h"
 class ProcFamilyInterface;
@@ -1108,27 +1109,30 @@ class DaemonCore : public Service
         ...
         @param err_return_msg Returned with error message pertaining to
                failure inside the method.  Ignored if NULL (default).
+        @param remap Performs bind mounts for the child process.
+               Ignored if NULL (default).  Ignored on non-Linux.
         @return On success, returns the child pid.  On failure, returns FALSE.
     */
     int Create_Process (
-        const char    *name,
-        ArgList const &arglist,
-        priv_state    priv                 = PRIV_UNKNOWN,
-        int           reaper_id            = 1,
-        int           want_commanand_port  = TRUE,
-        Env const     *env                 = NULL,
-        const char    *cwd                 = NULL,
-        FamilyInfo    *family_info         = NULL,
-        Stream        *sock_inherit_list[] = NULL,
-        int           std[]                = NULL,
-        int           fd_inherit_list[]    = NULL,
-        int           nice_inc             = 0,
-        sigset_t      *sigmask             = NULL,
-        int           job_opt_mask         = 0,
-        size_t        *core_hard_limit     = NULL,
-		int			  *affinity_mask	   = NULL,
-		char const    *daemon_sock         = NULL,
-        MyString      *err_return_msg      = NULL
+        const char      *name,
+        ArgList const   &arglist,
+        priv_state      priv                 = PRIV_UNKNOWN,
+        int             reaper_id            = 1,
+        int             want_commanand_port  = TRUE,
+        Env const       *env                 = NULL,
+        const char      *cwd                 = NULL,
+        FamilyInfo      *family_info         = NULL,
+        Stream          *sock_inherit_list[] = NULL,
+        int             std[]                = NULL,
+        int             fd_inherit_list[]    = NULL,
+        int             nice_inc             = 0,
+        sigset_t        *sigmask             = NULL,
+        int             job_opt_mask         = 0,
+        size_t          *core_hard_limit     = NULL,
+        int              *affinity_mask	     = NULL,
+        char const      *daemon_sock         = NULL,
+        MyString        *err_return_msg      = NULL,
+        FilesystemRemap *remap               = NULL
         );
 
     //@}
diff --git a/src/condor_daemon_core.V6/daemon_core.cpp b/src/condor_daemon_core.V6/daemon_core.cpp
index 8de7e6b..7209b2e 100644
--- a/src/condor_daemon_core.V6/daemon_core.cpp
+++ b/src/condor_daemon_core.V6/daemon_core.cpp
@@ -2749,7 +2749,7 @@ DaemonCore::reconfig(void) {
 		// If we are NOT the schedd, then do not use clone, as only
 		// the schedd benefits from clone, and clone is more susceptable
 		// to failures/bugs than fork.
-	if ( !(get_mySubSystem()->isType(SUBSYSTEM_TYPE_SCHEDD)) ) {
+	if (!get_mySubSystem()->isType(SUBSYSTEM_TYPE_SCHEDD)) {
 		m_use_clone_to_create_processes = false;
 	}
 #endif /* HAVE CLONE */
@@ -6560,7 +6560,8 @@ public:
 		int the_want_command_port,
 		const sigset_t *the_sigmask,
 		size_t *core_hard_limit,
-		int		*affinity_mask
+		int		*affinity_mask,
+		FilesystemRemap *fs_remap
 	): m_errorpipe(the_errorpipe), m_args(the_args),
 	   m_job_opt_mask(the_job_opt_mask), m_env(the_env),
 	   m_inheritbuf(the_inheritbuf),
@@ -6576,6 +6577,7 @@ public:
 	   m_sigmask(the_sigmask), m_unix_args(0), m_unix_env(0),
 	   m_core_hard_limit(core_hard_limit),
 	   m_affinity_mask(affinity_mask),
+ 	   m_fs_remap(fs_remap),
 	   m_wrote_tracking_gid(false),
 	   m_no_dprintf_allowed(false)
 	{
@@ -6634,8 +6636,10 @@ private:
 	size_t *m_core_hard_limit;
 	const int    *m_affinity_mask;
 	Env m_envobject;
+    FilesystemRemap *m_fs_remap;
 	bool m_wrote_tracking_gid;
 	bool m_no_dprintf_allowed;
+	priv_state m_priv_state;
 };
 
 enum {
@@ -7094,6 +7098,8 @@ void CreateProcessForkit::exec() {
 		// This _must_ be called before calling exec().
 	writeTrackingGid(tracking_gid);
 
+		// Create new filesystem namespace if wanted
+
 	int openfds = getdtablesize();
 
 		// Here we have to handle re-mapping of std(in|out|err)
@@ -7180,6 +7186,35 @@ void CreateProcessForkit::exec() {
 		}
 	}
 
+	// Now remount filesystems with fs_bind option, to give this
+	// process per-process tree mount table
+
+	// This requires rootly power
+	if (m_fs_remap) {
+		if (can_switch_ids()) {
+			m_priv_state = set_priv_no_memory_changes(PRIV_ROOT);
+			int rc = ::unshare(CLONE_NEWNS|CLONE_FS);
+			if (rc) {
+				dprintf(D_ALWAYS, "Failed to unshare the mount namespace");
+				write(m_errorpipe[1], &errno, sizeof(errno));
+				_exit(errno);
+			}
+		} else {
+			dprintf(D_ALWAYS, "Not remapping FS as requested, due to lack of privileges.\n");
+			m_fs_remap = NULL;
+		}
+	}
+
+	if (m_fs_remap && m_fs_remap->PerformMappings()) {
+		write(m_errorpipe[1], &errno, sizeof(errno));
+		_exit(errno);
+	}
+
+	// And back to normal userness
+	if (m_fs_remap) {
+		set_priv_no_memory_changes( m_priv_state );
+	}
+
 
 		/* Re-nice ourself */
 	if( m_nice_inc > 0 ) {
@@ -7389,7 +7424,8 @@ int DaemonCore::Create_Process(
 			size_t        *core_hard_limit,
 			int			  *affinity_mask,
 			char const    *daemon_sock,
-			MyString      *err_return_msg
+			MyString      *err_return_msg,
+			FilesystemRemap *remap
             )
 {
 	int i, j;
@@ -7399,6 +7435,9 @@ int DaemonCore::Create_Process(
 	MyString executable_buf;
 	priv_state current_priv = PRIV_UNKNOWN;
 
+	// Remap our executable and CWD if necessary.
+	std::string alt_executable_fullpath, alt_cwd;
+
 	// For automagic DC std pipes.
 	int dc_pipe_fds[3][2] = {{-1, -1}, {-1, -1}, {-1, -1}};
 
@@ -8402,6 +8441,15 @@ int DaemonCore::Create_Process(
 		}
 	}
 
+	if (remap) {
+		alt_executable_fullpath = remap->RemapFile(executable_fullpath);
+		alt_cwd = remap->RemapDir(cwd);
+		if (alt_executable_fullpath.compare(executable_fullpath))
+			dprintf(D_ALWAYS, "Remapped file: %s\n", alt_executable_fullpath.c_str());
+		if (alt_cwd.compare(cwd))
+			dprintf(D_ALWAYS, "Remapped cwd: %s\n", alt_cwd.c_str());
+	}
+
 	{
 			// Create a "forkit" object to hold all the state that we need in the child.
 			// In some cases, the "fork" will actually be a clone() operation, which
@@ -8418,9 +8466,9 @@ int DaemonCore::Create_Process(
 			time_of_fork,
 			mii,
 			family_info,
-			cwd,
+			alt_cwd.length() ? alt_cwd.c_str() : cwd,
 			executable,
-			executable_fullpath,
+			alt_executable_fullpath.length() ? alt_executable_fullpath.c_str() : executable_fullpath,
 			std,
 			numInheritFds,
 			inheritFds,
@@ -8429,7 +8477,8 @@ int DaemonCore::Create_Process(
 			want_command_port,
 			sigmask,
 			core_hard_limit,
-			affinity_mask);
+			affinity_mask,
+			remap);
 
 		newpid = forkit.fork_exec();
 	}
diff --git a/src/condor_includes/condor_uid.h b/src/condor_includes/condor_uid.h
index 354f271..afcba2d 100644
--- a/src/condor_includes/condor_uid.h
+++ b/src/condor_includes/condor_uid.h
@@ -138,6 +138,32 @@ bool is_same_user(const char user1[], const char user2[], CompareUsersOpt opt);
 #if defined(__cplusplus) && !defined( WIN32 )
 #include "passwd_cache.unix.h"
 extern passwd_cache* pcache(void);
+
+// An object that automatically returns the previous privilege level when destroyed
+class TemporaryPrivSentry {
+
+public:
+	TemporaryPrivSentry(priv_state dest_state) {
+		m_orig_state = set_priv(dest_state);
+	}
+
+	~TemporaryPrivSentry() {
+		if (m_orig_state != PRIV_UNKNOWN) {
+			set_priv(m_orig_state);
+		}
+	}
+
+private:
+	// no default constructor
+	TemporaryPrivSentry();
+
+	// non-copyable.
+	TemporaryPrivSentry(const TemporaryPrivSentry&);
+	TemporaryPrivSentry& operator=(const TemporaryPrivSentry&);
+
+	priv_state m_orig_state;
+};
+
 #endif
 
 #endif /* _UID_H */
diff --git a/src/condor_includes/filename_tools.h b/src/condor_includes/filename_tools.h
index 5a48bef..be609e0 100644
--- a/src/condor_includes/filename_tools.h
+++ b/src/condor_includes/filename_tools.h
@@ -76,6 +76,8 @@ class MyString;
 int filename_split( const char *path, MyString &dir, MyString &file );
 int filename_split( const char *path, std::string &dir, std::string &file );
 
+int is_relative_to_cwd( std::string &path );
+
 /** 
 Take an input string which looks like this:
 "filename = url ; filename = url ; ..."
diff --git a/src/condor_starter.V6.1/os_proc.cpp b/src/condor_starter.V6.1/os_proc.cpp
index c2709b5..fd1c01f 100644
--- a/src/condor_starter.V6.1/os_proc.cpp
+++ b/src/condor_starter.V6.1/os_proc.cpp
@@ -70,7 +70,7 @@ OsProc::~OsProc()
 
 
 int
-OsProc::StartJob(FamilyInfo* family_info)
+OsProc::StartJob(FamilyInfo* family_info, FilesystemRemap* fs_remap=NULL)
 {
 	int nice_inc = 0;
 	bool has_wrapper = false;
@@ -539,7 +539,8 @@ OsProc::StartJob(FamilyInfo* family_info)
 		                                     core_size_ptr,
                                              affinity_mask,
 											 NULL,
-                                             &create_process_err_msg);
+                                             &create_process_err_msg,
+                                             fs_remap);
 	}
 
 	// Create_Process() saves the errno for us if it is an "interesting" error.
diff --git a/src/condor_starter.V6.1/os_proc.h b/src/condor_starter.V6.1/os_proc.h
index 18a200d..8b5a581 100644
--- a/src/condor_starter.V6.1/os_proc.h
+++ b/src/condor_starter.V6.1/os_proc.h
@@ -46,9 +46,9 @@ public:
 			output, error files for re-direction, and (finally) call
 			daemonCore->Create_Process().
 		 */
-	virtual int StartJob() { return StartJob(NULL); };
+	virtual int StartJob() { return StartJob(NULL, NULL); };
 
-	int StartJob(FamilyInfo*);
+	int StartJob(FamilyInfo*, FilesystemRemap *);
 
 		/** In this function, we determine if pid == our pid, and if so
 			do a CONDOR_job_exit remote syscall.  
diff --git a/src/condor_starter.V6.1/vanilla_proc.cpp b/src/condor_starter.V6.1/vanilla_proc.cpp
index 02c6f19..cd4ae8c 100644
--- a/src/condor_starter.V6.1/vanilla_proc.cpp
+++ b/src/condor_starter.V6.1/vanilla_proc.cpp
@@ -32,6 +32,8 @@
 #include "condor_config.h"
 #include "domain_tools.h"
 #include "classad_helpers.h"
+#include "filesystem_remap.h"
+#include "directory.h"
 
 #ifdef WIN32
 #include "executable_scripts.WINDOWS.h"
@@ -191,6 +193,7 @@ VanillaProc::StartJob()
 		        fi.login);
 	}
 
+	FilesystemRemap * fs_remap = NULL;
 #if defined(LINUX)
 	// on Linux, we also have the ability to track processes via
 	// a phony supplementary group ID
@@ -229,9 +232,66 @@ VanillaProc::StartJob()
 	}
 #endif
 
+	// On Linux kernel 2.4.19 and later, we can give each job its
+	// own FS mounts.
+	char * mount_under_scratch = param("MOUNT_UNDER_SCRATCH");
+	if (mount_under_scratch) {
+
+		std::string working_dir = Starter->GetWorkingDir();
+
+		if (IsDirectory(working_dir.c_str())) {
+			StringList mount_list(mount_under_scratch);
+			free(mount_under_scratch);
+
+			mount_list.rewind();
+			dprintf(D_FULLDEBUG, "About to create FS remap object\n");
+			fs_remap = new FilesystemRemap();
+			dprintf(D_FULLDEBUG, "Done creating FS remap object\n");
+			char * next_dir;
+			while ( (next_dir=mount_list.next()) ) {
+				if (!*next_dir) {
+					// empty string?
+					mount_list.deleteCurrent();
+					continue;
+				}
+				std::string next_dir_str(next_dir);
+				// Gah, I wish I could throw an exception to clean up these nested if statements.
+				if (IsDirectory(next_dir)) {
+					char * full_dir = dirscat(working_dir, next_dir_str);
+					if (full_dir) {
+						std::string full_dir_str(full_dir);
+						delete [] full_dir; full_dir = NULL;
+						if (!mkdir_and_parents_if_needed( full_dir_str.c_str(), S_IRWXU, PRIV_USER )) {
+							dprintf(D_ALWAYS, "Failed to create scratch directory %s\n", full_dir_str.c_str());
+							return FALSE;
+						}
+						dprintf(D_FULLDEBUG, "Adding mapping: %s -> %s.\n", full_dir_str.c_str(), next_dir_str.c_str());
+						if (fs_remap->AddMapping(full_dir_str, next_dir_str)) {
+							// FilesystemRemap object prints out an error message for us.
+							return FALSE;
+						}
+					} else {
+						dprintf(D_ALWAYS, "Unable to concatenate %s and %s.\n", working_dir.c_str(), next_dir_str.c_str());
+						return FALSE;
+					}
+				} else {
+					dprintf(D_ALWAYS, "Unable to add mapping %s -> %s because %s doesn't exist.\n", working_dir.c_str(), next_dir, next_dir);
+				}
+			}
+		} else {
+			dprintf(D_ALWAYS, "Unable to perform mappings because %s doesn't exist.\n", working_dir.c_str());
+			return FALSE;
+		}
+		dprintf(D_FULLDEBUG, "Finished creating FS remap object\n");
+	}
+
 	// have OsProc start the job
 	//
-	int retval = OsProc::StartJob(&fi);
+	int retval = OsProc::StartJob(&fi, fs_remap);
+
+	if (fs_remap != NULL) {
+		delete fs_remap;
+	}
 
 #if defined(HAVE_EXT_LIBCGROUP)
 	if (cgroup != NULL)
diff --git a/src/condor_utils/directory_util.cpp b/src/condor_utils/directory_util.cpp
index 795029a..7267e81 100755
--- a/src/condor_utils/directory_util.cpp
+++ b/src/condor_utils/directory_util.cpp
@@ -126,6 +126,11 @@ dirscat( const char *dirpath, const char *subdir )
 	return rval;
 }
 
+char*
+dirscat( std::string &dirpath, std::string &subdir ) {
+	return dirscat(dirpath.c_str(), subdir.c_str());
+}
+
 int 
 rec_touch_file(char *path, mode_t file_mode, mode_t directory_mode , int pos) 
 {
diff --git a/src/condor_utils/directory_util.h b/src/condor_utils/directory_util.h
index ac23407..f0718bd 100755
--- a/src/condor_utils/directory_util.h
+++ b/src/condor_utils/directory_util.h
@@ -20,6 +20,7 @@
 #ifndef DIRECTORY_UTIL_H
 #define DIRECTORY_UTIL_H
 
+#include <string>
 
 /** Returns a path to subdirectory to use for temporary files.
   @return The pointer returned must be de-allocated by the caller w/ free()
@@ -47,6 +48,7 @@ char* dircat( const char* dirpath, const char* filename );
   @param subdir The subdirectory.
   @return A string created with new() that contains the full pathname.
 */
+char* dirscat( std::string &dirpath, std::string &subdir );
 char* dirscat( const char* dirpath, const char* subdir );
 
 /** Touch a file and create directory path as well if necessary
diff --git a/src/condor_utils/filename_tools.cpp b/src/condor_utils/filename_tools.cpp
index 1dda4cf..6fa7e1a 100644
--- a/src/condor_utils/filename_tools.cpp
+++ b/src/condor_utils/filename_tools.cpp
@@ -81,6 +81,10 @@ void filename_url_parse_malloc( char const *input, char **method, char **server,
 	*path = strdup(p);
 }
 
+int is_relative_to_cwd( std::string &path ) {
+	return is_relative_to_cwd(path.c_str());
+}
+
 int is_relative_to_cwd( const char *path )
 {
 #if WIN32
diff --git a/src/condor_utils/filesystem_remap.cpp b/src/condor_utils/filesystem_remap.cpp
new file mode 100644
index 0000000..393acca
--- /dev/null
+++ b/src/condor_utils/filesystem_remap.cpp
@@ -0,0 +1,205 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2011, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+#include "filename_tools.h"
+#include "condor_debug.h"
+#include "MyString.h"
+#include "condor_uid.h"
+#include "filesystem_remap.h"
+
+#if defined(LINUX)
+#include <sys/mount.h>
+#endif
+
+FilesystemRemap::FilesystemRemap() :
+	m_mappings(),
+	m_mounts_shared()
+{
+	ParseMountinfo();
+}
+
+int FilesystemRemap::AddMapping(std::string source, std::string dest) {
+	if (!is_relative_to_cwd(source) && !is_relative_to_cwd(dest)) {
+		std::list<pair_strings>::const_iterator it;
+		for (it = m_mappings.begin(); it != m_mappings.end(); it++) {
+			if ((it->second.length() == dest.length()) && (it->second.compare(dest) == 0)) {
+				dprintf(D_ALWAYS, "Mapping already present for %s.\n", dest.c_str());
+				return -1;
+			}
+		}
+		if (CheckMapping(dest)) {
+			dprintf(D_ALWAYS, "Failed to convert shared mount to private mapping");
+			return -1;
+		}
+		m_mappings.push_back( std::pair<std::string, std::string>(source, dest) );
+	} else {
+		dprintf(D_ALWAYS, "Unable to add mappings for relative directories (%s, %s).\n", source.c_str(), dest.c_str());
+		return -1;
+	}
+	return 0;
+}
+
+int FilesystemRemap::CheckMapping(std::string & mount_point) {
+	bool best_is_shared = false;
+	size_t best_len = 0;
+	const std::string *best = NULL;
+
+	dprintf(D_FULLDEBUG, "Checking the mapping of mount point %s.\n", mount_point.c_str());
+
+	for (std::list<pair_str_bool>::const_iterator it = m_mounts_shared.begin(); it != m_mounts_shared.end(); it++) {
+		std::string first = it->first;
+		if ((strncmp(first.c_str(), mount_point.c_str(), first.size()) == 0) && (first.size() > best_len)) {
+			best_len = first.size();
+			best = &(it->first);
+			best_is_shared = it->second;
+		}
+	}
+
+	if (!best_is_shared) {
+		return 0;
+	}
+
+	dprintf(D_ALWAYS, "Current mount, %s, is shared.\n", best->c_str());
+
+	// Re-mount the mount point as a bind mount, so we can subsequently
+	// re-mount it as private.
+	TemporaryPrivSentry sentry(PRIV_ROOT);
+	if (mount(mount_point.c_str(), mount_point.c_str(), NULL, MS_BIND, NULL)) {	
+		dprintf(D_ALWAYS, "Marking %s as a bind mount failed. (errno=%d, %s)\n", mount_point.c_str(), errno, strerror(errno));
+		return -1;
+	}
+
+	if (mount(mount_point.c_str(), mount_point.c_str(), NULL, MS_PRIVATE, NULL)) {
+		dprintf(D_ALWAYS, "Marking %s as a private mount failed. (errno=%d, %s)\n", mount_point.c_str(), errno, strerror(errno));
+		return -1;
+	} else {
+		dprintf(D_FULLDEBUG, "Marking %s as a private mount successful.\n", mount_point.c_str());
+	}
+
+	return 0;
+}
+
+// This is called within the exec
+// IT CANNOT CALL DPRINTF!
+int FilesystemRemap::PerformMappings() {
+	int retval = 0;
+#if defined(LINUX)
+	std::list<pair_strings>::iterator it;
+	for (it = m_mappings.begin(); it != m_mappings.end(); it++) {
+		if ((retval = mount(it->first.c_str(), it->second.c_str(), NULL, MS_BIND, NULL))) {
+			break;
+		}
+	}
+#endif
+	return retval;
+}
+
+std::string FilesystemRemap::RemapFile(std::string target) {
+	if (target[0] != '/')
+		return std::string();
+	size_t pos = target.rfind("/");
+	if (pos == std::string::npos)
+		return target;
+	std::string filename = target.substr(pos, target.size() - pos);
+	std::string directory = target.substr(0, target.size() - filename.size());
+	return RemapDir(directory) + filename;
+}
+
+std::string FilesystemRemap::RemapDir(std::string target) {
+	if (target[0] != '/')
+		return std::string();
+	std::list<pair_strings>::iterator it;
+	for (it = m_mappings.begin(); it != m_mappings.end(); it++) {
+		if ((it->first.compare(0, it->first.length(), target, 0, it->first.length()) == 0)
+				&& (it->second.compare(0, it->second.length(), it->first, 0, it->second.length()) == 0)) {
+			target.replace(0, it->first.length(), it->second);
+		}
+	}
+	return target;
+}
+
+/*
+  Sample mountinfo contents (from http://www.kernel.org/doc/Documentation/filesystems/proc.txt):
+  36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 - ext3 /dev/root rw,errors=continue
+  (1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)
+
+  (1) mount ID:  unique identifier of the mount (may be reused after umount)
+  (2) parent ID:  ID of parent (or of self for the top of the mount tree)
+  (3) major:minor:  value of st_dev for files on filesystem
+  (4) root:  root of the mount within the filesystem
+  (5) mount point:  mount point relative to the process's root
+  (6) mount options:  per mount options
+  (7) optional fields:  zero or more fields of the form "tag[:value]"
+  (8) separator:  marks the end of the optional fields
+  (9) filesystem type:  name of filesystem of the form "type[.subtype]"
+  (10) mount source:  filesystem specific information or "none"
+  (11) super options:  per super block options
+ */
+
+#define ADVANCE_TOKEN(token, str) { \
+	if ((token = str.GetNextToken(" ", false)) == NULL) { \
+		dprintf(D_ALWAYS, "Invalid line in mountinfo file: %s\n", str.Value()); \
+		return; \
+	} \
+}
+
+#define SHARED_STR "shared:"
+
+void FilesystemRemap::ParseMountinfo() {
+	MyString str, str2;
+	const char * token;
+	FILE *fd;
+	bool is_shared;
+
+	dprintf(D_FULLDEBUG, "Starting to parse mountinfo.\n");
+
+	if ((fd = fopen("/proc/self/mountinfo", "r")) == NULL) {
+		if (errno == ENOENT) {
+			dprintf(D_FULLDEBUG, "The /proc/self/mountinfo file does not exist; kernel support probably lacking.  Will assume normal mount structure.\n");
+		} else {
+			dprintf(D_ALWAYS, "Unable to open the mountinfo file (/proc/self/mountinfo). (errno=%d, %s)\n", errno, strerror(errno));
+		}
+		return;
+	}
+
+	while (str2.readLine(fd, false)) {
+		str = str2;
+		str.Tokenize();
+		ADVANCE_TOKEN(token, str) // mount ID
+		ADVANCE_TOKEN(token, str) // parent ID
+		ADVANCE_TOKEN(token, str) // major:minor
+		ADVANCE_TOKEN(token, str) // root
+		ADVANCE_TOKEN(token, str) // mount point
+		std::string mp(token);
+		ADVANCE_TOKEN(token, str) // mount options
+		ADVANCE_TOKEN(token, str) // optional fields
+		is_shared = false;
+		while (strcmp(token, "-") != 0) {
+			is_shared = is_shared || (strncmp(token, SHARED_STR, strlen(SHARED_STR)) == 0);
+			ADVANCE_TOKEN(token, str)
+		}
+		dprintf(D_FULLDEBUG, "Mount: %s, shared: %d.\n", mp.c_str(), is_shared);
+		m_mounts_shared.push_back(pair_str_bool(mp, is_shared));
+	}
+
+	fclose(fd);
+
+	dprintf(D_FULLDEBUG, "Finished parsing mountinfo.\n");
+}
+
diff --git a/src/condor_utils/filesystem_remap.h b/src/condor_utils/filesystem_remap.h
new file mode 100644
index 0000000..218c17c
--- /dev/null
+++ b/src/condor_utils/filesystem_remap.h
@@ -0,0 +1,95 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2011, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+#ifndef FILESYSTEM_REMAP_H
+#define FILESYSTEM_REMAP_H
+
+#include <string>
+#include <list>
+#include <utility>
+
+/**
+ * Represents a set of mappings to perform on the filesystem.
+ *
+ * Contains a mapping of source directories that will be remounted to destinations.
+ * So, if we have the mapping (/var/lib/condor/execute/1234) -> (/tmp), this class
+ * will perform the equivalent of this command:
+ *    mount --bind /var/lib/condor/execute/1234 /tmp
+ * This is meant to give Condor the ability to provide per-job temporary directories.
+ */
+
+typedef std::pair<std::string, std::string> pair_strings;
+typedef std::pair<std::string, bool> pair_str_bool;
+
+class FilesystemRemap {
+
+public:
+
+	FilesystemRemap();
+
+	/**
+	 * Add a mapping to the filesystem remap.
+	 * @param source: A source directory that will be remapped to the destination.
+	 * @param dest: A destination directory
+	 * @returns: 0 on success, -1 if the directories were not mappable.
+	 */
+	int AddMapping(std::string source, std::string dest);
+
+	/**
+	 * Performs the mappings known to this class.
+	 * This method does not touch the privilege settings - the caller is responsible
+	 * for setting the appropriate context.  This is done because the primary usage
+	 * of this class is the 'exec' part of the clone, where we have special rules
+	 * for touching shared memory.
+	 * @returns: 0 if everything went well, -1 if the remounts failed.
+	 */
+	int PerformMappings();
+
+	/**
+	 * Determine where a directory will be accessible from after the mapping.
+	 * @param Directory to consider.
+	 * @return Renamed directory.
+	 */
+	std::string RemapDir(std::string);
+
+	/**
+	 * Determine where a file will be accessible from after the mapping.
+	 * @param Directory to consider.
+	 * @return Renamed directory.
+	 */
+	std::string RemapFile(std::string);
+
+private:
+
+	/**
+	 * Parse /proc/self/mountinfo file; look for mounts that are shared
+	 */
+	void ParseMountinfo();
+
+	/**
+	 * Check to see if the desired mount point is going to be shared
+	 * outside the current namespace.  If so, remount it as private.
+	 */
+	int CheckMapping(std::string &);
+
+	std::list<pair_strings> m_mappings;
+	std::list<pair_str_bool> m_mounts_shared;
+
+};
+#endif
