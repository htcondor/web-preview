From 72bc9ae333a53f81578a1228e60fbe9cb60b83a6 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Wed, 30 May 2012 18:43:09 -0500
Subject: [PATCH 1/2] Patch from Dan Bradley.

---
 src/condor_job_router/JobRouter.cpp   |   76 ++++++++++++++++++++++++---------
 src/condor_job_router/JobRouter.h     |   13 +++++-
 src/condor_job_router/Scheduler.h     |    4 +-
 src/condor_job_router/schedd_main.cpp |   15 ++++---
 src/condor_utils/JobLogMirror.cpp     |   13 ++++-
 src/condor_utils/JobLogMirror.h       |    3 +-
 6 files changed, 91 insertions(+), 33 deletions(-)

diff --git a/src/condor_job_router/JobRouter.cpp b/src/condor_job_router/JobRouter.cpp
index bc124b2..03b2fc9 100644
--- a/src/condor_job_router/JobRouter.cpp
+++ b/src/condor_job_router/JobRouter.cpp
@@ -61,8 +61,9 @@ const char JR_ATTR_TARGET_UNIVERSE[] = "TargetUniverse";
 
 const int THROTTLE_UPDATE_INTERVAL = 600;
 
-JobRouter::JobRouter(Scheduler *scheduler): m_jobs(5000,hashFuncStdString,rejectDuplicateKeys) {
+JobRouter::JobRouter(Scheduler *scheduler,Scheduler *scheduler2): m_jobs(5000,hashFuncStdString,rejectDuplicateKeys) {
 	m_scheduler = scheduler;
+	m_scheduler2 = scheduler2;
 	m_release_on_hold = true;
 	m_job_router_polling_timer = -1;
 	m_periodic_timer_id = -1;
@@ -119,6 +120,15 @@ JobRouter::~JobRouter() {
 	}
 #endif
 	InvalidatePublicAd();
+
+	m_scheduler->stop();
+	delete m_scheduler;
+	m_scheduler = NULL;
+	if( m_scheduler2 ) {
+		m_scheduler2->stop();
+		delete m_scheduler2;
+		m_scheduler2 = NULL;
+	}
 }
 
 #include "condor_new_classads.h"
@@ -168,6 +178,11 @@ JobRouter::config() {
 	bool allow_empty_requirements = false;
 	m_enable_job_routing = true;
 
+	m_scheduler->config();
+	if( m_scheduler2 ) {
+		m_scheduler2->config();
+	}
+
 #if HAVE_JOB_HOOKS
 	m_hook_mgr->reconfig();
 #endif
@@ -373,6 +388,24 @@ JobRouter::config() {
 			"JobRouter::TimerHandler_UpdateCollector",
 			this);
 	}
+
+	param(m_schedd2_name_buf,"JOB_ROUTER_SCHEDD2_NAME");
+	param(m_schedd2_pool_buf,"JOB_ROUTER_SCHEDD2_POOL");
+	m_schedd2_name = m_schedd2_name_buf.empty() ? NULL : m_schedd2_name_buf.c_str();
+	m_schedd2_pool = m_schedd2_pool_buf.empty() ? NULL : m_schedd2_pool_buf.c_str();
+	if( m_schedd2_name ) {
+		dprintf(D_ALWAYS,"Routing jobs to schedd %s in pool %s\n",
+				m_schedd2_name_buf.c_str(),m_schedd2_pool_buf.c_str());
+	}
+
+	param(m_schedd1_name_buf,"JOB_ROUTER_SCHEDD1_NAME");
+	param(m_schedd1_pool_buf,"JOB_ROUTER_SCHEDD1_POOL");
+	m_schedd1_name = m_schedd1_name_buf.empty() ? NULL : m_schedd1_name_buf.c_str();
+	m_schedd1_pool = m_schedd1_pool_buf.empty() ? NULL : m_schedd1_pool_buf.c_str();
+	if( m_schedd1_name ) {
+		dprintf(D_ALWAYS,"Routing jobs from schedd %s in pool %s\n",
+				m_schedd1_name_buf.c_str(),m_schedd1_pool_buf.c_str());
+	}
 }
 
 void
@@ -423,7 +456,7 @@ JobRouter::EvalAllSrcJobPeriodicExprs()
 			}
 
 			job->SetSrcJobAd(job->src_key.c_str(), orig_ad, ad_collection);
-			if (false == push_dirty_attributes(job->src_ad,NULL,NULL))
+			if (false == push_dirty_attributes(job->src_ad,m_schedd1_name,m_schedd1_pool))
 			{
 				dprintf(D_ALWAYS, "JobRouter failure (%s): "
 						"failed to reset src job "
@@ -540,7 +573,7 @@ JobRouter::SetJobHeld(classad::ClassAd& ad, const char* hold_reason, int hold_co
 
 		WriteHoldEventToUserLog(ad);
 
-		if(false == push_dirty_attributes(ad,NULL,NULL))
+		if(false == push_dirty_attributes(ad,m_schedd1_name,m_schedd1_pool))
 		{
 			dprintf(D_ALWAYS,"JobRouter failure (%d.%d): failed to "
 					"place job on hold.\n", cluster, proc);
@@ -577,7 +610,7 @@ JobRouter::SetJobRemoved(classad::ClassAd& ad, const char* remove_reason)
 		ad.InsertAttr(ATTR_JOB_STATUS, REMOVED);
 		ad.InsertAttr(ATTR_ENTERED_CURRENT_STATUS, (int)time(NULL));
 		ad.InsertAttr(ATTR_REMOVE_REASON, remove_reason);
-		if(false == push_dirty_attributes(ad,NULL,NULL))
+		if(false == push_dirty_attributes(ad,m_schedd1_name,m_schedd1_pool))
 		{
 			dprintf(D_ALWAYS,"JobRouter failure (%d.%d): failed to "
 					"remove job.\n", cluster, proc);
@@ -859,6 +892,7 @@ JobRouter::AdoptOrphans() {
 	classad::ExprTree *constraint_tree;
 	classad::ClassAdParser parser;
 	classad::ClassAdCollection *ad_collection = m_scheduler->GetClassAds();
+	classad::ClassAdCollection *ad_collection2 = m_scheduler2 ? m_scheduler2->GetClassAds() : m_scheduler->GetClassAds();
 	std::string dest_key,src_key;
 	std::string dest_jobs,src_jobs;
 
@@ -879,7 +913,7 @@ JobRouter::AdoptOrphans() {
 		EXCEPT("JobRouter: Failed to parse orphan dest job constraint: '%s'\n",dest_jobs.c_str());
 	}
 
-    query.Bind(ad_collection);
+    query.Bind(ad_collection2);
     if(!query.Query("root",constraint_tree)) {
 		dprintf(D_ALWAYS,"JobRouter: Error running orphan dest job query: %s\n",dest_jobs.c_str());
 		delete constraint_tree;
@@ -890,7 +924,7 @@ JobRouter::AdoptOrphans() {
     query.ToFirst();
     if( query.Current(dest_key) ) do {
 		std::string route_name;
-		classad::ClassAd *dest_ad = ad_collection->GetClassAd(dest_key);
+		classad::ClassAd *dest_ad = ad_collection2->GetClassAd(dest_key);
 		ASSERT(dest_ad);
 
 		if(!dest_ad->EvaluateAttrString(JR_ATTR_ROUTED_FROM_JOB_ID, src_key) ||
@@ -915,7 +949,7 @@ JobRouter::AdoptOrphans() {
 		if(!src_ad) {
 			dprintf(D_ALWAYS,"JobRouter (src=%s,dest=%s): removing orphaned destination job with no matching source job.\n",src_key.c_str(),dest_key.c_str());
 			MyString err_desc;
-			if(!remove_job(*dest_ad,dest_proc_id.cluster,dest_proc_id.proc,"JobRouter orphan",NULL,NULL,err_desc)) {
+			if(!remove_job(*dest_ad,dest_proc_id.cluster,dest_proc_id.proc,"JobRouter orphan",m_schedd2_name,m_schedd2_pool,err_desc)) {
 				dprintf(D_ALWAYS,"JobRouter (src=%s,dest=%s): failed to remove dest job: %s\n",src_key.c_str(),dest_key.c_str(),err_desc.Value());
 			}
 			continue;
@@ -963,7 +997,7 @@ JobRouter::AdoptOrphans() {
 		if(!AddJob(job)) {
 			dprintf(D_ALWAYS,"JobRouter (%s): failed to add orphaned job to my routed job list; aborting it.\n",job->JobDesc().c_str());
 			MyString err_desc;
-			if(!remove_job(job->dest_ad,dest_proc_id.cluster,dest_proc_id.proc,"JobRouter orphan",NULL,NULL,err_desc)) {
+			if(!remove_job(job->dest_ad,dest_proc_id.cluster,dest_proc_id.proc,"JobRouter orphan",m_schedd2_name,m_schedd2_pool,err_desc)) {
 				dprintf(D_ALWAYS,"JobRouter (%s): failed to remove dest job: %s\n",job->JobDesc().c_str(),err_desc.Value());
 			}
 			delete job;
@@ -1009,7 +1043,7 @@ JobRouter::AdoptOrphans() {
 
 		MyString error_details;
 		PROC_ID src_proc_id = getProcByString(src_key.c_str());
-		if(!yield_job(*src_ad,NULL,NULL,false,src_proc_id.cluster,src_proc_id.proc,&error_details,JobRouterName().c_str(),true,m_release_on_hold)) {
+		if(!yield_job(*src_ad,m_schedd1_name,m_schedd2_name,false,src_proc_id.cluster,src_proc_id.proc,&error_details,JobRouterName().c_str(),true,m_release_on_hold)) {
 			dprintf(D_ALWAYS,"JobRouter (src=%s): failed to yield orphan job: %s\n",
 					src_key.c_str(),
 					error_details.Value());
@@ -1267,7 +1301,7 @@ JobRouter::TakeOverJob(RoutedJob *job) {
 	if(job->state != RoutedJob::UNCLAIMED) return;
 
 	MyString error_details;
-	ClaimJobResult cjr = claim_job(job->src_ad,NULL,NULL,job->src_proc_id.cluster, job->src_proc_id.proc, &error_details, JobRouterName().c_str(), job->is_sandboxed);
+	ClaimJobResult cjr = claim_job(job->src_ad,m_schedd1_name,m_schedd1_pool,job->src_proc_id.cluster, job->src_proc_id.proc, &error_details, JobRouterName().c_str(), job->is_sandboxed);
 
 	switch(cjr) {
 	case CJR_ERROR: {
@@ -1367,7 +1401,7 @@ JobRouter::FinishSubmitJob(RoutedJob *job) {
 	int dest_cluster_id = -1;
 	int dest_proc_id = -1;
 	bool rc;
-	rc = submit_job(job->dest_ad,NULL,NULL,job->is_sandboxed,&dest_cluster_id,&dest_proc_id);
+	rc = submit_job(job->dest_ad,m_schedd2_name,m_schedd2_pool,job->is_sandboxed,&dest_cluster_id,&dest_proc_id);
 
 		// Now that the job is submitted, we can clean up any temporary
 		// x509 proxy files, because these will have been copied into
@@ -1523,13 +1557,13 @@ static bool ClassAdHasDirtyAttributes(classad::ClassAd *ad) {
 void
 JobRouter::UpdateRoutedJobStatus(RoutedJob *job, classad::ClassAd update) {
 	classad::ClassAd *new_ad = NULL;
-	classad::ClassAdCollection *ad_collection = m_scheduler->GetClassAds();
+	classad::ClassAdCollection *ad_collection2 = m_scheduler2 ? m_scheduler2->GetClassAds() : m_scheduler->GetClassAds();
 
 	// The dest_key (dest_ad) may have changed while we are running,
 	// meaning we'll be out of sync with the ClassAdCollection. To
 	// avoid writing stale data back into the collection we MUST pull
 	// from it before updating anything.
-	new_ad = ad_collection->GetClassAd(job->dest_key);
+	new_ad = ad_collection2->GetClassAd(job->dest_key);
 	if (NULL == new_ad)
 	{
 		dprintf (D_ALWAYS, "JobRouter failure (%s): Ad %s disappeared "
@@ -1563,7 +1597,7 @@ JobRouter::UpdateRoutedJobStatus(RoutedJob *job, classad::ClassAd update) {
 	}
 
 	// Update the local copy
-	ad_collection->UpdateClassAd(job->dest_key, &job->dest_ad);
+	ad_collection2->UpdateClassAd(job->dest_key, &job->dest_ad);
 	dprintf(D_FULLDEBUG,"JobRouter (%s): updated routed job status\n",job->JobDesc().c_str());
 
 	FinishCheckSubmittedJobStatus(job);
@@ -1603,6 +1637,7 @@ JobRouter::CheckSubmittedJobStatus(RoutedJob *job) {
 void
 JobRouter::FinishCheckSubmittedJobStatus(RoutedJob *job) {
 	classad::ClassAdCollection *ad_collection = m_scheduler->GetClassAds();
+	classad::ClassAdCollection *ad_collection2 = m_scheduler2 ? m_scheduler2->GetClassAds() : m_scheduler->GetClassAds();
 	classad::ClassAd *src_ad = ad_collection->GetClassAd(job->src_key);
 	std::string keyword;
 	std::string copy_attr_param;
@@ -1634,7 +1669,7 @@ JobRouter::FinishCheckSubmittedJobStatus(RoutedJob *job) {
 		return;
 	}
 
-	classad::ClassAd *ad = ad_collection->GetClassAd(job->dest_key);
+	classad::ClassAd *ad = ad_collection2->GetClassAd(job->dest_key);
 
 	// If ad is not found, this could be because Quill hasn't seen
 	// it yet, in which case this is not a problem.  The following
@@ -1763,7 +1798,7 @@ JobRouter::SetJobIdle(RoutedJob *job) {
 
 bool
 JobRouter::PushUpdatedAttributes(classad::ClassAd& src) {
-	if(false == push_dirty_attributes(src,NULL,NULL))
+	if(false == push_dirty_attributes(src,m_schedd1_name,m_schedd1_pool))
 	{
 		return false;
 	}
@@ -1776,7 +1811,7 @@ JobRouter::PushUpdatedAttributes(classad::ClassAd& src) {
 
 void
 JobRouter::FinishFinalizeJob(RoutedJob *job) {
-	if(!finalize_job(job->dest_ad,job->dest_proc_id.cluster,job->dest_proc_id.proc,NULL,NULL,job->is_sandboxed)) {
+	if(!finalize_job(job->dest_ad,job->dest_proc_id.cluster,job->dest_proc_id.proc,m_schedd2_name,m_schedd2_pool,job->is_sandboxed)) {
 		dprintf(D_ALWAYS,"JobRouter failure (%s): failed to finalize job\n",job->JobDesc().c_str());
 
 			// Put the src job back in idle state to prevent it from
@@ -1977,7 +2012,7 @@ JobRouter::FinishCleanupJob(RoutedJob *job) {
 	if(!job->is_done && job->dest_proc_id.cluster != -1) {
 		// Remove (abort) destination job.
 		MyString err_desc;
-		if(!remove_job(job->dest_ad,job->dest_proc_id.cluster,job->dest_proc_id.proc,"JobRouter aborted job",NULL,NULL,err_desc)) {
+		if(!remove_job(job->dest_ad,job->dest_proc_id.cluster,job->dest_proc_id.proc,"JobRouter aborted job",m_schedd2_name,m_schedd2_pool,err_desc)) {
 			dprintf(D_ALWAYS,"JobRouter (%s): failed to remove dest job: %s\n",job->JobDesc().c_str(),err_desc.Value());
 		}
 		else {
@@ -1988,7 +2023,7 @@ JobRouter::FinishCleanupJob(RoutedJob *job) {
 	if(job->is_claimed) {
 		MyString error_details;
 		bool keep_trying = true;
-		if(!yield_job(job->src_ad,NULL,NULL,job->is_done,job->src_proc_id.cluster,job->src_proc_id.proc,&error_details,JobRouterName().c_str(),job->is_sandboxed,m_release_on_hold,&keep_trying))
+		if(!yield_job(job->src_ad,m_schedd1_name,m_schedd1_pool,job->is_done,job->src_proc_id.cluster,job->src_proc_id.proc,&error_details,JobRouterName().c_str(),job->is_sandboxed,m_release_on_hold,&keep_trying))
 		{
 			dprintf(D_ALWAYS,"JobRouter (%s): failed to yield job: %s\n",
 					job->JobDesc().c_str(),
@@ -2073,7 +2108,8 @@ JobRouter::CleanupRetiredJob(RoutedJob *job) {
 		}
 	}
 
-	classad::ClassAd *dest_ad = ad_collection->GetClassAd(job->dest_key);
+	classad::ClassAdCollection *ad_collection2 = m_scheduler2 ? m_scheduler2->GetClassAds() : m_scheduler->GetClassAds();
+	classad::ClassAd *dest_ad = ad_collection2->GetClassAd(job->dest_key);
 	if(!dest_ad) {
 		dest_job_synchronized = true;
 	}
diff --git a/src/condor_job_router/JobRouter.h b/src/condor_job_router/JobRouter.h
index ed54d1e..2712c17 100644
--- a/src/condor_job_router/JobRouter.h
+++ b/src/condor_job_router/JobRouter.h
@@ -46,7 +46,7 @@ typedef HashTable<std::string,JobRoute *> RoutingTable;
 
 class JobRouter: public Service {
  public:
-	JobRouter(Scheduler *scheduler);
+	JobRouter(Scheduler *scheduler,Scheduler *scheduler2=NULL);
 	virtual ~JobRouter();
 
 	// Add a new job to be managed by JobRouter.
@@ -113,6 +113,17 @@ class JobRouter: public Service {
 	RoutingTable *m_routes; //key="route name"
 
 	Scheduler *m_scheduler;        // provides us with a mirror of the real schedd's job collection
+	Scheduler *m_scheduler2;       // if non-NULL, mirror of job queue in destination schedd
+
+	char const *m_schedd2_name;
+	char const *m_schedd2_pool;
+	std::string m_schedd2_name_buf;
+	std::string m_schedd2_pool_buf;
+
+	char const *m_schedd1_name;
+	char const *m_schedd1_pool;
+	std::string m_schedd1_name_buf;
+	std::string m_schedd1_pool_buf;
 
 	std::string m_constraint;
 	int m_max_jobs;
diff --git a/src/condor_job_router/Scheduler.h b/src/condor_job_router/Scheduler.h
index 288e41e..3fe0d43 100644
--- a/src/condor_job_router/Scheduler.h
+++ b/src/condor_job_router/Scheduler.h
@@ -27,8 +27,8 @@
 
 class Scheduler: virtual public JobLogMirror {
 public:
-	Scheduler(NewClassAdJobLogConsumer *_consumer):
-		JobLogMirror(_consumer),
+	Scheduler(NewClassAdJobLogConsumer *_consumer,char const *_alt_spool_param=NULL):
+		JobLogMirror(_consumer,_alt_spool_param),
 		m_consumer(_consumer)
 	{ }
 
diff --git a/src/condor_job_router/schedd_main.cpp b/src/condor_job_router/schedd_main.cpp
index b6f8f34..aaa644f 100644
--- a/src/condor_job_router/schedd_main.cpp
+++ b/src/condor_job_router/schedd_main.cpp
@@ -29,6 +29,7 @@
 
 
 Scheduler *schedd;
+Scheduler *schedd2 = NULL;
 JobRouter *job_router;
 NewClassAdJobLogConsumer *log_consumer;
 
@@ -40,11 +41,17 @@ void main_init(int   /*argc*/, char ** /*argv*/)
 
 	log_consumer = new NewClassAdJobLogConsumer();
 
-	schedd = new Scheduler(log_consumer);
+	schedd = new Scheduler(log_consumer,"JOB_ROUTER_SCHEDD1_SPOOL");
 
 	schedd->init();
 
-	job_router = new JobRouter(schedd);
+	std::string spool2;
+	if( param(spool2,"JOB_ROUTER_SCHEDD2_SPOOL") ) {
+		dprintf(D_ALWAYS,"Reading destination schedd spool %s\n",spool2.c_str());
+		schedd2 = new Scheduler(log_consumer,"JOB_ROUTER_SCHEDD2_SPOOL");
+	}
+
+	job_router = new JobRouter(schedd,schedd2);
 	job_router->init();
 }
 
@@ -55,16 +62,12 @@ main_config()
 {
 	dprintf(D_ALWAYS, "main_config() called\n");
 
-	schedd->config();
 	job_router->config();
 }
 
 static void Stop()
 {
 	// JobRouter creates an instance lock, so delete it now to clean up.
-	schedd->stop();
-	delete schedd;
-	schedd = NULL;
 	delete job_router;
 	job_router = NULL;
 	DC_Exit(0);
diff --git a/src/condor_utils/JobLogMirror.cpp b/src/condor_utils/JobLogMirror.cpp
index fba9812..2387bdf 100644
--- a/src/condor_utils/JobLogMirror.cpp
+++ b/src/condor_utils/JobLogMirror.cpp
@@ -21,8 +21,9 @@
 #include "JobLogMirror.h"
 #include "condor_config.h"
 
-JobLogMirror::JobLogMirror(ClassAdLogConsumer *consumer):
-	job_log_reader(consumer)
+JobLogMirror::JobLogMirror(ClassAdLogConsumer *consumer,char const *_alt_spool_param):
+	job_log_reader(consumer),
+	alt_spool_param(_alt_spool_param ? _alt_spool_param : "")
 {
 	log_reader_polling_timer = -1;
 	log_reader_polling_period = 10;
@@ -40,7 +41,13 @@ JobLogMirror::stop() {
 
 void
 JobLogMirror::config() {
-	char *spool = param("SPOOL");
+	char *spool = NULL;
+	if( !alt_spool_param.empty() ) {
+		spool = param(alt_spool_param.c_str());
+	}
+	if( !spool ) {
+		spool = param("SPOOL");
+	}
 	if(!spool) {
 		EXCEPT("No SPOOL defined in config file.\n");
 	}
diff --git a/src/condor_utils/JobLogMirror.h b/src/condor_utils/JobLogMirror.h
index c7d925e..eaff434 100644
--- a/src/condor_utils/JobLogMirror.h
+++ b/src/condor_utils/JobLogMirror.h
@@ -27,7 +27,7 @@
 
 class JobLogMirror: public Service {
 public:
-	JobLogMirror(ClassAdLogConsumer *consumer);
+	JobLogMirror(ClassAdLogConsumer *consumer,char const *_alt_spool_param=NULL);
 	void init();
 	void config();
 	void stop();
@@ -35,6 +35,7 @@ public:
 
 private:
 	ClassAdLogReader job_log_reader;
+	std::string alt_spool_param;
 
 	int log_reader_polling_timer;
 	int log_reader_polling_period;
-- 
1.7.4.1


From 82611d00428621718b4f2f3097c90c075debab37 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Wed, 30 May 2012 20:38:01 -0500
Subject: [PATCH 2/2] Small segfault fix for danb's patch.

---
 src/condor_job_router/NewClassAdJobLogConsumer.cpp |   12 ++++++------
 src/condor_job_router/schedd_main.cpp              |    4 +++-
 2 files changed, 9 insertions(+), 7 deletions(-)

diff --git a/src/condor_job_router/NewClassAdJobLogConsumer.cpp b/src/condor_job_router/NewClassAdJobLogConsumer.cpp
index e3186e5..a621d62 100644
--- a/src/condor_job_router/NewClassAdJobLogConsumer.cpp
+++ b/src/condor_job_router/NewClassAdJobLogConsumer.cpp
@@ -81,7 +81,7 @@ NewClassAdJobLogConsumer::NewClassAd(const char *key,
 				dprintf(D_ALWAYS,
 						"error processing %s: failed to add '%s' to "
 						"ClassAd collection.\n",
-						m_reader->GetClassAdLogFileName(), cluster_key);
+						m_reader ? m_reader->GetClassAdLogFileName() : "(null)", cluster_key);
 				delete ad;
 				return true; // XXX: why is this ok?
 			}
@@ -95,7 +95,7 @@ NewClassAdJobLogConsumer::NewClassAd(const char *key,
 			dprintf(D_ALWAYS,
 					"error processing %s: failed to add '%s' to "
 					"ClassAd collection.\n",
-					m_reader->GetClassAdLogFileName(),
+					m_reader ? m_reader->GetClassAdLogFileName() : "(null)",
 					key);
 				// XXX: why is this ok?
 		}
@@ -121,7 +121,7 @@ NewClassAdJobLogConsumer::SetAttribute(const char *key,
 	if (!ad) {
 		dprintf(D_ALWAYS,
 				"error reading %s: no such ad in collection: %s\n",
-				m_reader->GetClassAdLogFileName(), key);
+				m_reader ? m_reader->GetClassAdLogFileName() : "(null)", key);
 		return false;
 	}
 	MyString new_classad_value, err_msg;
@@ -131,7 +131,7 @@ NewClassAdJobLogConsumer::SetAttribute(const char *key,
 		dprintf(D_ALWAYS,
 				"error reading %s: failed to convert expression from "
 				"old to new ClassAd format: %s\n",
-				m_reader->GetClassAdLogFileName(), err_msg.Value());
+				m_reader ? m_reader->GetClassAdLogFileName() : "(null)", err_msg.Value());
 		return false;
 	}
 
@@ -142,7 +142,7 @@ NewClassAdJobLogConsumer::SetAttribute(const char *key,
 	if (!expr) {
 		dprintf(D_ALWAYS,
 				"error reading %s: failed to parse expression: %s\n",
-				m_reader->GetClassAdLogFileName(), value);
+				m_reader ? m_reader->GetClassAdLogFileName() : "(null)", value);
 		ASSERT(expr);
 		return false;
 	}
@@ -159,7 +159,7 @@ NewClassAdJobLogConsumer::DeleteAttribute(const char *key,
 	if (!ad) {
 		dprintf(D_ALWAYS,
 				"error reading %s: no such ad in collection: %s\n",
-				m_reader->GetClassAdLogFileName(), key);
+				m_reader ? m_reader->GetClassAdLogFileName() : "(null)", key);
 		return false;
 	}
 	ad->Delete(name);
diff --git a/src/condor_job_router/schedd_main.cpp b/src/condor_job_router/schedd_main.cpp
index aaa644f..6359c9b 100644
--- a/src/condor_job_router/schedd_main.cpp
+++ b/src/condor_job_router/schedd_main.cpp
@@ -32,6 +32,7 @@ Scheduler *schedd;
 Scheduler *schedd2 = NULL;
 JobRouter *job_router;
 NewClassAdJobLogConsumer *log_consumer;
+NewClassAdJobLogConsumer *log_consumer2;
 
 //-------------------------------------------------------------
 
@@ -40,6 +41,7 @@ void main_init(int   /*argc*/, char ** /*argv*/)
 	dprintf(D_ALWAYS, "main_init() called\n");
 
 	log_consumer = new NewClassAdJobLogConsumer();
+	log_consumer2 = new NewClassAdJobLogConsumer();
 
 	schedd = new Scheduler(log_consumer,"JOB_ROUTER_SCHEDD1_SPOOL");
 
@@ -48,7 +50,7 @@ void main_init(int   /*argc*/, char ** /*argv*/)
 	std::string spool2;
 	if( param(spool2,"JOB_ROUTER_SCHEDD2_SPOOL") ) {
 		dprintf(D_ALWAYS,"Reading destination schedd spool %s\n",spool2.c_str());
-		schedd2 = new Scheduler(log_consumer,"JOB_ROUTER_SCHEDD2_SPOOL");
+		schedd2 = new Scheduler(log_consumer2,"JOB_ROUTER_SCHEDD2_SPOOL");
 	}
 
 	job_router = new JobRouter(schedd,schedd2);
-- 
1.7.4.1

