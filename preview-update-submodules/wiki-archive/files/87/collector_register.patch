diff --git a/src/condor_collector.V6/collector.cpp b/src/condor_collector.V6/collector.cpp
index bdc207f..dd97834 100644
--- a/src/condor_collector.V6/collector.cpp
+++ b/src/condor_collector.V6/collector.cpp
@@ -89,6 +89,7 @@ ForkWork CollectorDaemon::forkQuery;
 
 ClassAd* CollectorDaemon::ad;
 DCCollector* CollectorDaemon::updateCollector;
+DCCollector* CollectorDaemon::updateRemoteCollector;
 int CollectorDaemon::UpdateTimerId;
 
 ClassAd *CollectorDaemon::query_any_result;
@@ -126,6 +127,7 @@ void CollectorDaemon::Init()
 	UpdateTimerId=-1;
 	sock_cache = NULL;
 	updateCollector = NULL;
+	updateRemoteCollector = NULL;
 	Config();
 
     // setup routine to report to condor developers
@@ -1216,49 +1218,47 @@ void CollectorDaemon::Config()
     if (CollectorName) free (CollectorName);
     CollectorName = param("COLLECTOR_NAME");
 
-    // handle params for Collector updates
-    if ( UpdateTimerId >= 0 ) {
-            daemonCore->Cancel_Timer(UpdateTimerId);
-            UpdateTimerId = -1;
-    }
+	// handle params for Collector updates
+	if ( UpdateTimerId >= 0 ) {
+		daemonCore->Cancel_Timer(UpdateTimerId);
+		UpdateTimerId = -1;
+	}
 
-    tmp = param ("CONDOR_DEVELOPERS_COLLECTOR");
-    if (tmp == NULL) {
-            tmp = strdup("condor.cs.wisc.edu");
-    }
-    if (stricmp(tmp,"NONE") == 0 ) {
-            free(tmp);
-            tmp = NULL;
-    }
-	int i = param_integer("COLLECTOR_UPDATE_INTERVAL",900); // default 15 min
+	if( updateCollector ) {
+		delete updateCollector;
+		updateCollector = NULL;
+	}
+	updateCollector = new DCCollector( NULL, DCCollector::UDP );
 
-    if ( tmp && i ) {
-		if( updateCollector ) {
-				// we should just delete it.  since we never use TCP
-				// for these updates, we don't really loose anything
-				// by destroying the object and recreating it...
-			delete updateCollector;
-			updateCollector = NULL;
-        }
-		updateCollector = new DCCollector( tmp, DCCollector::UDP );
-		if( UpdateTimerId < 0 ) {
-			UpdateTimerId = daemonCore->
-				Register_Timer( 1, i, (TimerHandler)sendCollectorAd,
-								"sendCollectorAd" );
-		}
-    } else {
-		if( updateCollector ) {
-			delete updateCollector;
-			updateCollector = NULL;
-		}
-		if( UpdateTimerId > 0 ) {
-			daemonCore->Cancel_Timer( UpdateTimerId );
-			UpdateTimerId = -1;
-		}
+	tmp = param ("CONDOR_DEVELOPERS_COLLECTOR");
+	if (tmp == NULL) {
+		tmp = strdup("condor.cs.wisc.edu");
+	}
+	if (stricmp(tmp,"NONE") == 0 ) {
+		free(tmp);
+		tmp = NULL;
+	}
+
+	if( updateRemoteCollector ) {
+		// we should just delete it.  since we never use TCP
+		// for these updates, we don't really loose anything
+		// by destroying the object and recreating it...
+		delete updateRemoteCollector;
+		updateRemoteCollector = NULL;
+	}
+	if ( tmp ) {
+		updateRemoteCollector = new DCCollector( tmp, DCCollector::UDP );
 	}
 
 	free( tmp );
 	
+	int i = param_integer("COLLECTOR_UPDATE_INTERVAL",900); // default 15 min
+	if( UpdateTimerId < 0 ) {
+		UpdateTimerId = daemonCore->
+			Register_Timer( 1, i, (TimerHandler)sendCollectorAd,
+							"sendCollectorAd" );
+	}
+
 	tmp = param(COLLECTOR_REQUIREMENTS);
 	MyString collector_req_err;
 	if( !collector.setCollectorRequirements( tmp, collector_req_err ) ) {
@@ -1374,11 +1374,19 @@ void CollectorDaemon::Config()
 
 void CollectorDaemon::Exit()
 {
+	if ( UpdateTimerId >= 0 ) {
+		daemonCore->Cancel_Timer(UpdateTimerId);
+		UpdateTimerId = -1;
+	}
 	return;
 }
 
 void CollectorDaemon::Shutdown()
 {
+	if ( UpdateTimerId >= 0 ) {
+		daemonCore->Cancel_Timer(UpdateTimerId);
+		UpdateTimerId = -1;
+	}
 	return;
 }
 
@@ -1431,7 +1439,7 @@ int CollectorDaemon::sendCollectorAd()
 	// Collector engine stats, too
 	collectorStats.publishGlobal( ad );
 
-    // Send the ad
+	// Send the ad
 	char *update_addr = updateCollector->addr();
 	if (!update_addr) update_addr = "(null)";
 	if( ! updateCollector->sendUpdate(UPDATE_COLLECTOR_AD, ad, NULL, false) ) {
@@ -1439,8 +1447,19 @@ int CollectorDaemon::sendCollectorAd()
 				 "(%s): %s\n", update_addr,
 				 updateCollector->error() );
 		return 0;
-    }
-    return 1;
+	}
+
+	update_addr = updateRemoteCollector->addr();
+	if (!update_addr) update_addr = "(null)";
+	if ( updateRemoteCollector ) {
+		if( ! updateRemoteCollector->sendUpdate(UPDATE_COLLECTOR_AD, ad, NULL, false) ) {
+			dprintf( D_ALWAYS, "Can't send UPDATE_COLLECTOR_AD to collector "
+					 "(%s): %s\n", update_addr,
+					 updateRemoteCollector->error() );
+			return 0;
+		}
+	}
+	return 1;
 }
 
 void CollectorDaemon::init_classad(int interval)
diff --git a/src/condor_collector.V6/collector.h b/src/condor_collector.V6/collector.h
index 7d357e7..bc5e95a 100644
--- a/src/condor_collector.V6/collector.h
+++ b/src/condor_collector.V6/collector.h
@@ -127,6 +127,7 @@ protected:
 
 	static ClassAd *ad;
 	static DCCollector* updateCollector;
+	static DCCollector* updateRemoteCollector;
 	static int UpdateTimerId;
 
 	static ForkWork forkQuery;
diff --git a/src/condor_collector.V6/collector_engine.cpp b/src/condor_collector.V6/collector_engine.cpp
index b433fa8..c6a5713 100644
--- a/src/condor_collector.V6/collector_engine.cpp
+++ b/src/condor_collector.V6/collector_engine.cpp
@@ -365,6 +365,7 @@ walkHashTable (AdTypes adType, int (*scanFunction)(ClassAd *))
 			StorageAds.walk(scanFunction) &&
 			CkptServerAds.walk(scanFunction) &&
 			LicenseAds.walk(scanFunction) &&
+			CollectorAds.walk(scanFunction) &&
 			StartdAds.walk(scanFunction) &&
 			ScheddAds.walk(scanFunction) &&
 			MasterAds.walk(scanFunction) &&
