diff --git a/src/condor_procapi/procapi.cpp b/src/condor_procapi/procapi.cpp
index 65ca543..7bb4573 100644
--- a/src/condor_procapi/procapi.cpp
+++ b/src/condor_procapi/procapi.cpp
@@ -465,7 +465,7 @@ ProcAPI::getProcInfo( pid_t pid, piPTR& pi, int &status )
 
 #if HAVE_PSS
 int
-ProcAPI::getPSSInfo( pid_t pid, procInfoRaw& procRaw, int &status ) 
+ProcAPI::getPSSInfo( pid_t pid, procInfo& procRaw, int &status ) 
 {
 	char path[64];
 	FILE *fp;
@@ -727,13 +727,6 @@ ProcAPI::getProcInfoRaw( pid_t pid, procInfoRaw& procRaw, int &status )
 		// close the file
 	fclose( fp );
 
-#if HAVE_PSS
-	getPSSInfo(pid,procRaw,status);
-	if( status != PROCAPI_OK ) {
-		return PROCAPI_FAILURE;
-	}
-#endif
-
 		// only one value for times
 	procRaw.user_time_2 = 0;
 	procRaw.sys_time_2 = 0;
diff --git a/src/condor_procapi/procapi.h b/src/condor_procapi/procapi.h
index c7f0253..4508936 100644
--- a/src/condor_procapi/procapi.h
+++ b/src/condor_procapi/procapi.h
@@ -549,6 +549,18 @@ class ProcAPI {
 	  */
   static int confirmProcessId(ProcessId& procId, int& status);
   
+#if HAVE_PSS
+  /**
+    * Calculate the Proportional Set Size, a Linux-specific metric
+    * for memory usage taking into account memory sharing.
+    *
+    * This will operate directly on the procInfo reference; if this
+    * function isn't called, PSS information will not be available through
+    * the "normal" means.
+    */
+  static int getPSSInfo( pid_t pid, procInfo& procInfo, int &status );
+#endif
+
  private:
 
   /** Default constructor.  It's private so that no one really
@@ -583,10 +595,6 @@ class ProcAPI {
   static void initProcInfoRaw(procInfoRaw& procRaw);
 
   
-#if HAVE_PSS
-  static int getPSSInfo( pid_t pid, procInfoRaw& procRaw, int &status );
-#endif
-
 	  /**
 		 Generates a control time by which a process birthday can be
 		 shifted in case of time shifting due to ntpd or the admin.
diff --git a/src/condor_procd/proc_family.cpp b/src/condor_procd/proc_family.cpp
index 684e9171..fe44521 100644
--- a/src/condor_procd/proc_family.cpp
+++ b/src/condor_procd/proc_family.cpp
@@ -805,7 +805,12 @@ ProcFamily::aggregate_usage(ProcFamilyUsage* usage)
 		usage->total_image_size += member->m_proc_info->imgsize;
 		usage->total_resident_set_size += member->m_proc_info->rssize;
 #if HAVE_PSS
-		if( member->m_proc_info->pssize_available ) {
+
+		// PSS is special: it's expensive to calculate for every process,
+		// so we calculate it on demand
+		int status; // Is ignored
+		int rc = ProcAPI::getPSSInfo(member->m_proc_info->pid, *(member->m_proc_info), status);
+		if( (rc == PROCAPI_SUCCESS) && (member->m_proc_info->pssize_available) ) {
 			usage->total_proportional_set_size_available = true;
 			usage->total_proportional_set_size += member->m_proc_info->pssize;
 		}
diff --git a/src/condor_procd/procd_ctl.cpp b/src/condor_procd/procd_ctl.cpp
index 42646ae..ec6bde2 100644
--- a/src/condor_procd/procd_ctl.cpp
+++ b/src/condor_procd/procd_ctl.cpp
@@ -426,6 +426,9 @@ get_usage(ProcFamilyClient& pfc, int argc, char* argv[])
 	printf("CPU Percentage (%%): %f\n", pfu.percent_cpu);
 	printf("Maximum Image Size (KB): %lu\n", pfu.max_image_size);
 	printf("Total Image Size(KB): %lu\n", pfu.total_image_size);
+	if (pfu.total_proportional_set_size_available) {
+		printf("Proportional Set Size (KB): %lu\n", pfu.total_proportional_set_size);
+	}
 	if (pfu.block_read_bytes >= 0)
 		printf("Bytes read from block devices (KB): %lu\n", pfu.block_read_bytes/1024);
 	if (pfu.block_write_bytes >= 0)
