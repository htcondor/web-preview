diff --git a/src/condor_schedd.V6/schedd.cpp b/src/condor_schedd.V6/schedd.cpp
index 95bf565..b0b029e 100644
--- a/src/condor_schedd.V6/schedd.cpp
+++ b/src/condor_schedd.V6/schedd.cpp
@@ -9148,7 +9148,7 @@ Scheduler::child_exit(int pid, int status)
  * @see condor_error_policy.h
  **/
 bool
-Scheduler::jobExitCode( PROC_ID job_id, int exit_code ) 
+Scheduler::jobExitCode( PROC_ID job_id, int exit_code, bool bRecycle ) 
 {
 	bool ret = true; 
 	
@@ -9235,7 +9235,7 @@ Scheduler::jobExitCode( PROC_ID job_id, int exit_code )
 				// for this, but it's the same number as
 				// JOB_NOT_CKPTED, so we're safe.
 		case JOB_NOT_STARTED:
-			if( srec != NULL && !srec->removed && srec->match ) {
+			if( srec != NULL && !srec->removed && srec->match && !bRecycle) {
 				DelMrec(srec->match);
 			}
 			break;
@@ -9267,7 +9267,7 @@ Scheduler::jobExitCode( PROC_ID job_id, int exit_code )
 			break;
 
 		case JOB_EXITED_AND_CLAIM_CLOSING:
-			if( srec != NULL && srec->match ) {
+			if( srec != NULL && srec->match && !bRecycle ) {
 					// startd is not accepting more jobs on this claim
 				srec->match->needs_release_claim = false;
 				DelMrec(srec->match);
@@ -13266,17 +13266,17 @@ Scheduler::RecycleShadow(int /*cmd*/, Stream *stream)
 		return FALSE;
 	}
 
-		// Now handle the exit reason specified for the existing job.
+	// Now handle the exit reason specified for the existing job.
 	if( prev_job_id.cluster != -1 ) {
 		dprintf(D_ALWAYS,
 			"Shadow pid %d for job %d.%d reports job exit reason %d.\n",
 			shadow_pid, prev_job_id.cluster, prev_job_id.proc,
 			previous_job_exit_reason );
 
-		jobExitCode( prev_job_id, previous_job_exit_reason );
+		jobExitCode( prev_job_id, previous_job_exit_reason, true );
 		srec->exit_already_handled = true;
 	}
-
+	
 	new_job_id.cluster = -1;
 	new_job_id.proc = -1;
 	if( mrec->my_match_ad && !ExitWhenDone ) {
@@ -13300,12 +13300,16 @@ Scheduler::RecycleShadow(int /*cmd*/, Stream *stream)
 	if( new_job_id.proc == -1 ) {
 		stream->put((int)0);
 		stream->end_of_message();
+		dprintf(D_ALWAYS,
+			"NO RECYCLE_MATCH FOUND for shadow pid %d(%d) for job %d.%d.\n",
+			shadow_pid, previous_job_exit_reason, prev_job_id.cluster, prev_job_id.proc);
+
 		return TRUE;
 	}
 
 	dprintf(D_ALWAYS,
-			"Shadow pid %d switching to job %d.%d.\n",
-			shadow_pid, new_job_id.cluster, new_job_id.proc );
+			"RECYCLE_MATCH FOUND Shadow pid %d(%d) switching to job %d.%d.\n",
+			shadow_pid, previous_job_exit_reason, new_job_id.cluster, new_job_id.proc );
 
 		// the add/delete_shadow_rec() functions update the job
 		// ads, so we need to do that here
diff --git a/src/condor_schedd.V6/scheduler.h b/src/condor_schedd.V6/scheduler.h
index 05cf204..acf8dc9 100644
--- a/src/condor_schedd.V6/scheduler.h
+++ b/src/condor_schedd.V6/scheduler.h
@@ -640,7 +640,7 @@ private:
 	int				jobThrottle( void );
 	void			initLocalStarterDir( void );
 	void	noShadowForJob( shadow_rec* srec, NoShadowFailure_t why );
-	bool			jobExitCode( PROC_ID job_id, int exit_code );
+	bool			jobExitCode( PROC_ID job_id, int exit_code, bool bRecycle=false );
 	
 	// -----------------------------------------------
 	// CronTab Jobs
diff --git a/src/condor_shadow.V6.1/shadow_v61_main.cpp b/src/condor_shadow.V6.1/shadow_v61_main.cpp
index e18aa4c..afdc3b7 100644
--- a/src/condor_shadow.V6.1/shadow_v61_main.cpp
+++ b/src/condor_shadow.V6.1/shadow_v61_main.cpp
@@ -451,9 +451,18 @@ main_pre_command_sock_init( )
 bool
 recycleShadow(int previous_job_exit_reason)
 {
-	if( previous_job_exit_reason != JOB_EXITED ) {
-		return false;
+	switch(previous_job_exit_reason)
+	{
+		// recycle conditions. 
+		case JOB_SHOULD_REQUEUE: //107
+		case JOB_NOT_STARTED:    //108
+		case JOB_EXITED:         //100
+		case JOB_EXITED_AND_CLAIM_CLOSING: //115
+			break;
+		default:
+			return false;
 	}
+	
 	if( shadow_worklife_expires && time(NULL) > shadow_worklife_expires ) {
 		return false;
 	}
