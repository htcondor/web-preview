>From 4cf2c43552a1d656b474ddda4be52b1714e4adeb Mon Sep 17 00:00:00 2001
From: "Timothy St. Clair" <tstclair@redhat.com>
Date: Wed, 5 Jun 2013 13:29:28 -0500
Subject: [PATCH] BZ919037 - Fix for fatal error on invalid
 KILL/PREEMPT/SUSPEND/CONTINUE

---
 src/condor_startd.V6/ResState.cpp |  8 ++++----
 src/condor_startd.V6/Resource.cpp | 18 +++++++++---------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/src/condor_startd.V6/ResState.cpp b/src/condor_startd.V6/ResState.cpp
index 8969e70..ded772f 100644
--- a/src/condor_startd.V6/ResState.cpp
+++ b/src/condor_startd.V6/ResState.cpp
@@ -270,7 +270,7 @@ ResState::eval( void )
 			//had PREEMPT turn TRUE, in which case, we don't need
 			//to keep trying to retire over and over.
 
-			if( rip->eval_preempt() ) {
+			if( 1 == rip->eval_preempt() ) {
 				dprintf( D_ALWAYS, "State change: PREEMPT is TRUE\n" );
 				// irreversible retirement
 				// STATE TRANSITION #12 or #16
@@ -292,7 +292,7 @@ ResState::eval( void )
 			}
 		}
 		if( (r_act == busy_act || r_act == retiring_act) && want_suspend ) {
-			if( rip->eval_suspend() ) {
+			if( 1 == rip->eval_suspend() ) {
 				// STATE TRANSITION #14 or #17
 				dprintf( D_ALWAYS, "State change: SUSPEND is TRUE\n" );
 				change( suspended_act );
@@ -300,7 +300,7 @@ ResState::eval( void )
 			}
 		}
 		if( r_act == suspended_act ) {
-			if( rip->eval_continue() ) {
+			if( 1 == rip->eval_continue() ) {
 				// STATE TRANSITION #15
 				dprintf( D_ALWAYS, "State change: CONTINUE is TRUE\n" );
 				if( !rip->inRetirement() ) {
@@ -368,7 +368,7 @@ ResState::eval( void )
 
 	case preempting_state:
 		if( r_act == vacating_act ) {
-			if( rip->eval_kill() ) {
+			if( 1 == rip->eval_kill() ) {
 				dprintf( D_ALWAYS, "State change: KILL is TRUE\n" );
 					// STATE TRANSITION #19
 				change( killing_act );
diff --git a/src/condor_startd.V6/Resource.cpp b/src/condor_startd.V6/Resource.cpp
index 74295c7..d72f2a6 100644
--- a/src/condor_startd.V6/Resource.cpp
+++ b/src/condor_startd.V6/Resource.cpp
@@ -1603,7 +1603,10 @@ Resource::eval_expr( const char* expr_name, bool fatal, bool check_vanilla )
 			// otherwise, fall through and try the non-vm version
 	}
 	if( (r_classad->EvalBool(expr_name, r_cur ? r_cur->ad() : NULL , tmp) ) == 0 ) {
-		if( fatal ) {
+		
+        dprintf( D_ALWAYS, "WARNING: EvalBool of %s resulted in ERROR or UNDEFINED\n", expr_name );
+        
+        if( fatal ) {
 			dprintf(D_ALWAYS, "Can't evaluate %s in the context of following ads\n", expr_name );
 			r_classad->dPrint(D_ALWAYS);
 			dprintf(D_ALWAYS, "=============================\n");
@@ -1612,7 +1615,7 @@ Resource::eval_expr( const char* expr_name, bool fatal, bool check_vanilla )
 			} else {
 				dprintf( D_ALWAYS, "<no job ad>\n" );
 			}
-			EXCEPT( "Can't evaluate %s", expr_name );
+			EXCEPT( "Invalid evaluation of %s was marked as fatal", expr_name );
 		} else {
 				// anything else for here?
 			return -1;
@@ -1645,31 +1648,28 @@ Resource::evaluateHibernate( MyString &state_str ) const
 int
 Resource::eval_kill()
 {
-		// fatal if undefined, check vanilla
-	return eval_expr( "KILL", true, true );
+	return eval_expr( "KILL", false, true );
 }
 
 
 int
 Resource::eval_preempt( void )
 {
-		// fatal if undefined, check vanilla
-	return eval_expr( "PREEMPT", true, true );
+	return eval_expr( "PREEMPT", false, true );
 }
 
 
 int
 Resource::eval_suspend( void )
 {
-		// fatal if undefined, check vanilla
-	return eval_expr( "SUSPEND", true, true );
+	return eval_expr( "SUSPEND", false, true );
 }
 
 
 int
 Resource::eval_continue( void )
 {
-	return (m_bUserSuspended)?false:eval_expr( "CONTINUE", true, true );
+	return (m_bUserSuspended)?false:eval_expr( "CONTINUE", false, true );
 }
 
 
-- 
1.8.1.4

