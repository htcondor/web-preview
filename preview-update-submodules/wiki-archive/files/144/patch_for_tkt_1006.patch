diff --git a/src/condor_status.V6/status.cpp b/src/condor_status.V6/status.cpp
index 848370b..191f054 100644
--- a/src/condor_status.V6/status.cpp
+++ b/src/condor_status.V6/status.cpp
@@ -323,14 +323,22 @@ main (int argc, char *argv[])
 		exit (1);
 	}
 
-
-	char* addr = pool ? pool->addr() : NULL;
-	if( direct ) {
+        // The node of interest is taken from requested pool, if given.
+	char* addr = (NULL != pool) ? pool->addr() : NULL;
+        Daemon* requested_daemon = pool;
+
+        // If in "direct" mode, then we override the node of interest
+        // with the argument of "-direct", and verify that we can obtain
+        // address of the requested subsystem (here encoded by value of mode)
+        // In this case the address of pool (if given) denotes which
+        // manager to consult
+        if (direct) {
 		Daemon *d = NULL;
-		switch( mode ) {
+		switch (mode) {
 		case MODE_MASTER_NORMAL:
 			d = new Daemon( DT_MASTER, direct, addr );
 			break;
+
 		case MODE_STARTD_NORMAL:
 		case MODE_STARTD_AVAIL:
 		case MODE_STARTD_RUN:
@@ -348,9 +356,11 @@ main (int argc, char *argv[])
 		case MODE_SCHEDD_SUBMITTORS:
 			d = new Daemon( DT_SCHEDD, direct, addr );
 			break;
+
 		case MODE_NEGOTIATOR_NORMAL:
 			d = new Daemon( DT_NEGOTIATOR, direct, addr );
 			break;
+
 		case MODE_CKPT_SRVR_NORMAL:
 		case MODE_COLLECTOR_NORMAL:
 		case MODE_LICENSE_NORMAL:
@@ -360,48 +370,79 @@ main (int argc, char *argv[])
 		case MODE_OTHER:
 		case MODE_GRID_NORMAL:
 		case MODE_HAD_NORMAL:
-				// These have to go to the collector, anyway.
+			// These have to go to the collector, anyway.
 			break;
+
 		default:
-            fprintf( stderr, "Error:  Illegal mode %d\n", mode );
+                        fprintf( stderr, "Error:  Illegal mode %d\n", mode );
 			exit( 1 );
 			break;
 		}
-		if( d ) {
+
+                // Here is where we actually override node of interest, if we can obtain
+                // address of the requested subsystem.  If a requested subsytem can't be
+                // located, then fail with error msg.
+                // d will be null (unset) if mode is one of above that must go to
+                // collector (MODE_ANY_NORMAL, MODE_COLLECTOR_NORMAL, etc)
+		if (NULL != d) {
 			if( d->locate() ) {
 				addr = d->addr();
+				requested_daemon = d;
 			} else {
-				fprintf( stderr, "%s: %s\n", myName, d->error() );
+				fprintf( stderr, "Error: failed to locate %s: %s\n", myName, d->error() );
 				exit( 1 );
 			}
 		}
 	}
 
 	CondorError errstack;	
-	if (addr) {
+	if (NULL != addr) {
+	        // this case executes if pool was provided, or if in "direct" mode with
+	        // subsystem that corresponds to a daemon (above).
+                // Here 'addr' represents either node of interest from requested pool, or
+                // alternatively the node obtained from "-direct" argument
 		q = query->fetchAds (result, addr, &errstack);
 	} else {
+                // otherwise obtain list of collectors and submit query that way
 		CollectorList * collectors = CollectorList::create();
 		q = collectors->query (*query, result, &errstack);
 		delete collectors;
 	}
-		
 
-	if (q != Q_OK) {
-		if (q == Q_COMMUNICATION_ERROR) {
-			fprintf( stderr, "%s\n", errstack.getFullText(true) );
-				// if we're not an expert, we want verbose output
-			if (errstack.code(0) == CEDAR_ERR_CONNECT_FAILED) {
-				printNoCollectorContact( stderr, addr, !expert );
+
+        if (Q_OK != q) {
+                // we can always provide these messages:
+	        fprintf( stderr, "Error: %s\n", getStrQueryResult(q) );
+		fprintf( stderr, "%s\n", errstack.getFullText(true) );
+
+                switch (q) {
+                case Q_COMMUNICATION_ERROR: {
+                        if (NULL != requested_daemon) {
+                                // more helpful message for failure to connect to some daemon/subsys
+			        char* id = const_cast<char*>(requested_daemon->idStr());
+                                if (NULL == id) id = const_cast<char*>(requested_daemon->name());
+				if (NULL == id) id = "daemon";
+                                fprintf(stderr, "\n");
+			        fprintf(stderr, "Failed to contact the %s\n", id);
 			}
-		}
-		else {
-			fprintf (stderr, "Error:  Could not fetch ads --- %s\n",
-					 getStrQueryResult(q));
-		}
-		exit (1);
+		} break;
+
+                case Q_NO_COLLECTOR_HOST: {
+                        // Specific long message if connection to collector failed.
+		        // This function handles the case of null fullhost argument.
+	                char* fullhost = (NULL != requested_daemon) ? requested_daemon->fullHostname() : NULL;
+                        fprintf(stderr, "\n");
+		        printNoCollectorContact( stderr, fullhost, !expert );
+		} break;
+
+                default: break;
+	        }
+
+                // fail
+                exit (1);
 	}
 
+
 	// sort the ad
 	if( sortLessThanExprs.getlast() > -1 ) {
 		result.Sort((SortFunctionType) customLessThanFunc );
