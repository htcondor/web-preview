From 6d04e41d32e2a345c205b6fdf68a2a6acb9de93d Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Sat, 18 Aug 2012 14:42:31 -0500
Subject: [PATCH 1/2] Cleanup static char array.  Fix garbage characters in the secman errstack.

---
 src/condor_c-gahp/schedd_client.cpp                |    8 +++---
 src/condor_contrib/aviary/src/HistoryFile.cpp      |    4 +-
 .../aviary/src/HistoryProcessingUtils.cpp          |    6 ++--
 .../mgmt/qmf/daemons/HistoryFile.cpp               |    4 +-
 .../mgmt/qmf/daemons/HistoryProcessingUtils.cpp    |    6 ++--
 .../mgmt/qmf/daemons/test_history.cpp              |    4 +-
 src/condor_contrib/plumage/src/ODSHistoryFile.cpp  |    2 +-
 src/condor_contrib/plumage/src/ODSHistoryUtils.cpp |    6 ++--
 src/condor_contrib/triggerd/src/Triggerd.cpp       |    2 +-
 src/condor_credd/list_cred.cpp                     |    2 +-
 src/condor_credd/rm_cred.cpp                       |    2 +-
 src/condor_credd/store_cred.cpp                    |    2 +-
 src/condor_daemon_client/daemon.cpp                |    6 ++--
 src/condor_daemon_client/dc_master.cpp             |    2 +-
 src/condor_daemon_client/dc_message.cpp            |    6 ++--
 src/condor_daemon_client/dc_message.h              |    2 +-
 src/condor_daemon_client/dc_schedd.cpp             |   24 ++++++++++----------
 src/condor_daemon_client/dc_startd.cpp             |    2 +-
 src/condor_daemon_client/dc_starter.cpp            |    4 +-
 src/condor_daemon_client/dc_transfer_queue.cpp     |    4 +-
 src/condor_daemon_client/dc_transferd.cpp          |    6 ++--
 src/condor_daemon_core.V6/daemon_command.cpp       |    4 +-
 src/condor_dagman/dagman_main.cpp                  |    2 +-
 src/condor_dagman/job.cpp                          |    4 +-
 src/condor_gridmanager/gridmanager.cpp             |    4 +-
 src/condor_io/condor_secman.cpp                    |    5 +---
 src/condor_job_router/submit_job.cpp               |    4 +-
 src/condor_negotiator.V6/matchmaker.cpp            |    2 +-
 src/condor_q.V6/queue.cpp                          |    8 +++---
 src/condor_rm.V6/rm.cpp                            |   12 +++++-----
 src/condor_schedd.V6/qmgmt_receivers.cpp           |    2 +-
 src/condor_schedd.V6/qmgr_job_updater.cpp          |    2 +-
 src/condor_schedd.V6/qmgr_lib_support.cpp          |    6 ++--
 src/condor_schedd.V6/schedd.cpp                    |   12 +++++-----
 src/condor_schedd.V6/schedd_td.cpp                 |    4 +-
 src/condor_schedd.V6/tdman.cpp                     |    2 +-
 src/condor_startd.V6/vm_common.cpp                 |    2 +-
 src/condor_starter.V6.1/starter_v61_main.cpp       |    2 +-
 src/condor_status.V6/status.cpp                    |    2 +-
 src/condor_submit.V6/submit.cpp                    |   10 ++++----
 src/condor_tools/tool.cpp                          |   20 ++++++++--------
 src/condor_tools/transfer_data.cpp                 |    6 ++--
 src/condor_transferd/td_init.cpp                   |    4 +-
 src/condor_transferd/td_read_files.cpp             |    2 +-
 src/condor_transferd/td_write_files.cpp            |    2 +-
 src/condor_userlog/condor_check_userlogs.cpp       |    4 +-
 src/condor_utils/CondorError.cpp                   |   24 ++++++++++----------
 src/condor_utils/CondorError.h                     |    3 +-
 src/condor_utils/classad_command_util.cpp          |    2 +-
 src/condor_utils/file_transfer.cpp                 |    6 ++--
 src/condor_utils/read_multiple_logs.cpp            |    2 +-
 src/condor_utils/test_multi_log.cpp                |    4 +-
 src/condor_who/who.cpp                             |    4 +-
 53 files changed, 136 insertions(+), 140 deletions(-)

diff --git a/src/condor_c-gahp/schedd_client.cpp b/src/condor_c-gahp/schedd_client.cpp
index 32f0059..71a95e6 100644
--- a/src/condor_c-gahp/schedd_client.cpp
+++ b/src/condor_c-gahp/schedd_client.cpp
@@ -263,7 +263,7 @@ doContactSchedd()
 		if (!result_ad) {
 			error = TRUE;
 			sprintf( error_msg, "Error connecting to schedd %s %s: %s",
-					 ScheddAddr, dc_schedd.addr(), errstack.getFullText() );
+					 ScheddAddr, dc_schedd.addr(), errstack.getFullText().c_str() );
 		}
 		else {
 			result_ad->dPrint (D_FULLDEBUG);
@@ -395,7 +395,7 @@ doContactSchedd()
 										  array,
 										  &errstack )) {
 				error = TRUE;
-				sprintf( error_msg, "Error sending files to schedd %s: %s", ScheddAddr, errstack.getFullText() );
+				sprintf( error_msg, "Error sending files to schedd %s: %s", ScheddAddr, errstack.getFullText().c_str() );
 				dprintf( D_ALWAYS, "%s\n", error_msg.c_str() );
 			}
 			delete [] array;
@@ -457,7 +457,7 @@ doContactSchedd()
 										  &errstack, &jobssent )) {
 			error = TRUE;
 			sprintf( error_msg, "Error receiving files from schedd %s: %s",
-							   ScheddAddr, errstack.getFullText() );
+							   ScheddAddr, errstack.getFullText().c_str() );
 			dprintf( D_ALWAYS, "%s\n", error_msg.c_str() );
 		}
 
@@ -538,7 +538,7 @@ doContactSchedd()
 
 		if (result == false) {
 			sprintf( error_msg, "Error refreshing proxy to schedd %s: %s",
-					 ScheddAddr, errstack.getFullText() );
+					 ScheddAddr, errstack.getFullText().c_str() );
 			dprintf( D_ALWAYS, "%s\n", error_msg.c_str() );
 
 			const char * result_to_queue[] = {
diff --git a/src/condor_contrib/aviary/src/HistoryFile.cpp b/src/condor_contrib/aviary/src/HistoryFile.cpp
index 13f6d0b..6b7e86e 100644
--- a/src/condor_contrib/aviary/src/HistoryFile.cpp
+++ b/src/condor_contrib/aviary/src/HistoryFile.cpp
@@ -79,7 +79,7 @@ HistoryFile::operator=(const HistoryFile &base)
 		if (!init(errstack)) {
 			// XXX: Should throw an exception here
 			dprintf ( D_ALWAYS, "HistoryFile::operator=: %s\n",
-					errstack.getFullText(true));		
+					errstack.getFullText(true).c_str());		
 		}
 	}
 
@@ -182,7 +182,7 @@ HistoryFile::poll(CondorError &/*errstack*/)
 	// Load from the index
 	CondorError ignored_errstack;
 	if (!pollIndex(ignored_errstack)) {
-		dprintf(D_FULLDEBUG, "%s\n", ignored_errstack.getFullText(true));		
+		dprintf(D_FULLDEBUG, "%s\n", ignored_errstack.getFullText(true).c_str());		
 	}
 
 	// Seek to the end of the last known record
diff --git a/src/condor_contrib/aviary/src/HistoryProcessingUtils.cpp b/src/condor_contrib/aviary/src/HistoryProcessingUtils.cpp
index 5a474e3..f328050 100644
--- a/src/condor_contrib/aviary/src/HistoryProcessingUtils.cpp
+++ b/src/condor_contrib/aviary/src/HistoryProcessingUtils.cpp
@@ -133,7 +133,7 @@ aviary::history::processHistoryDirectory()
         CondorError errstack;
         if ( !h_file.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         errstack.clear();
@@ -230,7 +230,7 @@ aviary::history::processCurrentHistory()
         force_reset = false;
         if ( !currentHistory.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         ASSERT ( currentHistory.getId ( id ) );
@@ -268,7 +268,7 @@ aviary::history::processCurrentHistory()
         currentHistory = HistoryFile ( currentHistoryFilename.Value() );
         if ( !currentHistory.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         ASSERT ( currentHistory.getId ( id ) );
diff --git a/src/condor_contrib/mgmt/qmf/daemons/HistoryFile.cpp b/src/condor_contrib/mgmt/qmf/daemons/HistoryFile.cpp
index 13f6d0b..6b7e86e 100644
--- a/src/condor_contrib/mgmt/qmf/daemons/HistoryFile.cpp
+++ b/src/condor_contrib/mgmt/qmf/daemons/HistoryFile.cpp
@@ -79,7 +79,7 @@ HistoryFile::operator=(const HistoryFile &base)
 		if (!init(errstack)) {
 			// XXX: Should throw an exception here
 			dprintf ( D_ALWAYS, "HistoryFile::operator=: %s\n",
-					errstack.getFullText(true));		
+					errstack.getFullText(true).c_str());		
 		}
 	}
 
@@ -182,7 +182,7 @@ HistoryFile::poll(CondorError &/*errstack*/)
 	// Load from the index
 	CondorError ignored_errstack;
 	if (!pollIndex(ignored_errstack)) {
-		dprintf(D_FULLDEBUG, "%s\n", ignored_errstack.getFullText(true));		
+		dprintf(D_FULLDEBUG, "%s\n", ignored_errstack.getFullText(true).c_str());		
 	}
 
 	// Seek to the end of the last known record
diff --git a/src/condor_contrib/mgmt/qmf/daemons/HistoryProcessingUtils.cpp b/src/condor_contrib/mgmt/qmf/daemons/HistoryProcessingUtils.cpp
index e7acc61..7016b07 100644
--- a/src/condor_contrib/mgmt/qmf/daemons/HistoryProcessingUtils.cpp
+++ b/src/condor_contrib/mgmt/qmf/daemons/HistoryProcessingUtils.cpp
@@ -140,7 +140,7 @@ ProcessHistoryDirectory()
         CondorError errstack;
         if ( !h_file.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         errstack.clear();
@@ -236,7 +236,7 @@ ProcessCurrentHistory()
         force_reset = false;
         if ( !currentHistory.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         ASSERT ( currentHistory.getId ( id ) );
@@ -273,7 +273,7 @@ ProcessCurrentHistory()
         currentHistory = HistoryFile ( currentHistoryFilename.Value() );
         if ( !currentHistory.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         ASSERT ( currentHistory.getId ( id ) );
diff --git a/src/condor_contrib/mgmt/qmf/daemons/test_history.cpp b/src/condor_contrib/mgmt/qmf/daemons/test_history.cpp
index af98b36..6ff79a1 100644
--- a/src/condor_contrib/mgmt/qmf/daemons/test_history.cpp
+++ b/src/condor_contrib/mgmt/qmf/daemons/test_history.cpp
@@ -96,7 +96,7 @@ main2(int argc, char **argv)
 		HistoryFile h_file((path + DIR_DELIM_STRING + file).Value());
 		CondorError errstack;
 		if (!h_file.init(errstack)) {
-			fprintf(stderr, "%s\n", errstack.getFullText());
+			fprintf(stderr, "%s\n", errstack.getFullText().c_str());
 			return 1;
 		}
 		errstack.clear();
@@ -140,7 +140,7 @@ main2(int argc, char **argv)
 	HistoryFile h_file((path + DIR_DELIM_STRING + file).Value());
 	CondorError errstack;
 	if (!h_file.init(errstack)) {
-		fprintf(stderr, "%s\n", errstack.getFullText());
+		fprintf(stderr, "%s\n", errstack.getFullText().c_str());
 		return 1;
 	}
 	HistoryFile::HistoryEntriesTypeIterators poll = h_file.poll(errstack);
diff --git a/src/condor_contrib/plumage/src/ODSHistoryFile.cpp b/src/condor_contrib/plumage/src/ODSHistoryFile.cpp
index 95d0806..a214716 100644
--- a/src/condor_contrib/plumage/src/ODSHistoryFile.cpp
+++ b/src/condor_contrib/plumage/src/ODSHistoryFile.cpp
@@ -83,7 +83,7 @@ ODSHistoryFile::operator=(const ODSHistoryFile &base)
 		if (!init(errstack)) {
 			// XXX: Should throw an exception here
 			dprintf ( D_ALWAYS, "ODSHistoryFile::operator=: %s\n",
-					errstack.getFullText(true));		
+					errstack.getFullText(true).c_str());		
 		}
 	}
 
diff --git a/src/condor_contrib/plumage/src/ODSHistoryUtils.cpp b/src/condor_contrib/plumage/src/ODSHistoryUtils.cpp
index 5629c90..7c48587 100644
--- a/src/condor_contrib/plumage/src/ODSHistoryUtils.cpp
+++ b/src/condor_contrib/plumage/src/ODSHistoryUtils.cpp
@@ -76,7 +76,7 @@ plumage::etl::processHistoryDirectory()
         CondorError errstack;
         if ( !h_file.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         errstack.clear();
@@ -118,7 +118,7 @@ plumage::etl::processCurrentHistory(bool force_reset)
     {
         if ( !currentHistory.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         ASSERT ( currentHistory.getId ( id ) );
@@ -149,7 +149,7 @@ plumage::etl::processCurrentHistory(bool force_reset)
         currentHistory = ODSHistoryFile ( currentHistoryFilename.Value() );
         if ( !currentHistory.init ( errstack ) )
         {
-            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText() );
+            dprintf ( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
             return;
         }
         ASSERT ( currentHistory.getId ( id ) );
diff --git a/src/condor_contrib/triggerd/src/Triggerd.cpp b/src/condor_contrib/triggerd/src/Triggerd.cpp
index 40e1197..49516ac 100644
--- a/src/condor_contrib/triggerd/src/Triggerd.cpp
+++ b/src/condor_contrib/triggerd/src/Triggerd.cpp
@@ -830,7 +830,7 @@ Triggerd::PerformQueries()
             // Problem with the query
             if (Q_COMMUNICATION_ERROR == status)
             {
-               dprintf(D_ALWAYS, "Triggerd Error: Error contacting the collecter - %s\n", errstack.getFullText(true));
+               dprintf(D_ALWAYS, "Triggerd Error: Error contacting the collecter - %s\n", errstack.getFullText(true).c_str());
                if (CEDAR_ERR_CONNECT_FAILED == errstack.code(0))
                {
                   dprintf(D_ALWAYS, "Triggerd Error: Couldn't contact the collector on the central manager\n");
diff --git a/src/condor_credd/list_cred.cpp b/src/condor_credd/list_cred.cpp
index e26cf61..fb8a4d1 100644
--- a/src/condor_credd/list_cred.cpp
+++ b/src/condor_credd/list_cred.cpp
@@ -116,7 +116,7 @@ int main(int argc, char **argv)
 								number,
 								errorstack)) {
 		fprintf (stderr, "Unable to retrieve credentials (%s)\n",
-				 errorstack.getFullText(true));
+				 errorstack.getFullText(true).c_str());
 		return 1;
 	}
 	 
diff --git a/src/condor_credd/rm_cred.cpp b/src/condor_credd/rm_cred.cpp
index 8173692..cf20223 100644
--- a/src/condor_credd/rm_cred.cpp
+++ b/src/condor_credd/rm_cred.cpp
@@ -132,7 +132,7 @@ int main(int argc, char **argv)
 
 	if (dc_credd.removeCredential(cred_name, errstack)) {
 		fprintf (stderr, "Unable to remove credential '%s'\n%s\n",
-				cred_name, errstack.getFullText(true));
+				cred_name, errstack.getFullText(true).c_str());
 		return 1;
 	}
 
diff --git a/src/condor_credd/store_cred.cpp b/src/condor_credd/store_cred.cpp
index 61639ed..0edde8e 100644
--- a/src/condor_credd/store_cred.cpp
+++ b/src/condor_credd/store_cred.cpp
@@ -279,7 +279,7 @@ int main(int argc, char **argv)
 		printf ("Credential submitted successfully\n");
 	} else {
 		fprintf (stderr, "Unable to submit credential\n%s\n",
-				 errstack.getFullText(true));
+				 errstack.getFullText(true).c_str());
 		return 1;
 	}
 
diff --git a/src/condor_daemon_client/daemon.cpp b/src/condor_daemon_client/daemon.cpp
index e2afded..6e08da9 100644
--- a/src/condor_daemon_client/daemon.cpp
+++ b/src/condor_daemon_client/daemon.cpp
@@ -787,14 +787,14 @@ Daemon::sendCACmd( ClassAd* req, ClassAd* reply, ReliSock* cmd_sock,
 			err_msg += "CA_AUTH_CMD";
 		}
 		err_msg += "): ";
-		err_msg += errstack.getFullText();
+		err_msg += errstack.getFullText().c_str();
 		newError( CA_COMMUNICATION_ERROR, err_msg.c_str() );
 		return false;
 	}
 	if( force_auth ) {
 		CondorError e;
 		if( ! forceAuthentication(cmd_sock, &e) ) {
-			newError( CA_NOT_AUTHENTICATED, e.getFullText() );
+			newError( CA_NOT_AUTHENTICATED, e.getFullText().c_str() );
 			return false;
 		}
 	}
@@ -1245,7 +1245,7 @@ Daemon::getDaemonInfo( AdTypes adtype, bool query_collector )
 		CondorError errstack;
 		if (collectors->query (query, ads) != Q_OK) {
 			delete collectors;
-			newError( CA_LOCATE_FAILED, errstack.getFullText() );
+			newError( CA_LOCATE_FAILED, errstack.getFullText().c_str() );
 			return false;
 		};
 		delete collectors;
diff --git a/src/condor_daemon_client/dc_master.cpp b/src/condor_daemon_client/dc_master.cpp
index e4e59b5..f522b8c 100644
--- a/src/condor_daemon_client/dc_master.cpp
+++ b/src/condor_daemon_client/dc_master.cpp
@@ -94,7 +94,7 @@ DCMaster::sendMasterCommand( bool insure_update, int my_cmd )
 			m_master_safesock = NULL;
 		}
 		if( errstack.code() != 0 ) {
-		        dprintf( D_ALWAYS, "ERROR: %s\n", errstack.getFullText() );
+		        dprintf( D_ALWAYS, "ERROR: %s\n", errstack.getFullText().c_str() );
 		}
 		return false;
 	}
diff --git a/src/condor_daemon_client/dc_message.cpp b/src/condor_daemon_client/dc_message.cpp
index 0026038..edf5acf 100644
--- a/src/condor_daemon_client/dc_message.cpp
+++ b/src/condor_daemon_client/dc_message.cpp
@@ -217,7 +217,7 @@ DCMsg::reportFailure( DCMessenger *messenger )
 	dprintf( debug_level, "Failed to send %s to %s: %s\n",
 			 name(),
 			 messenger->peerDescription(),
-			 m_errstack.getFullText() );
+			 m_errstack.getFullText().c_str() );
 }
 
 void
@@ -231,7 +231,7 @@ DCMsg::addError( int code, char const *format, ... )
 	va_end(args);
 }
 
-char const *
+std::string
 DCMsg::getErrorStackText()
 {
 	return m_errstack.getFullText();
@@ -756,7 +756,7 @@ ChildAliveMsg::messageSendFailed( DCMessenger *messenger )
 			messenger->peerDescription(),
 			m_tries,
 			m_max_tries,
-			getErrorStackText());
+			getErrorStackText().c_str());
 
 	if( m_tries < m_max_tries ) {
 		if( getDeadlineExpired() ) {
diff --git a/src/condor_daemon_client/dc_message.h b/src/condor_daemon_client/dc_message.h
index 7115d4a..e3c7290 100644
--- a/src/condor_daemon_client/dc_message.h
+++ b/src/condor_daemon_client/dc_message.h
@@ -212,7 +212,7 @@ public:
 		/* add an error message to the error stack */
 	void addError( int code, char const *format, ... );
 
-	char const *getErrorStackText();
+	std::string getErrorStackText();
 
 		/* this calls addError() after a failed call to sock->put()/get() */
 	void sockFailed( Sock *sock );
diff --git a/src/condor_daemon_client/dc_schedd.cpp b/src/condor_daemon_client/dc_schedd.cpp
index e410e63..0cf6693 100644
--- a/src/condor_daemon_client/dc_schedd.cpp
+++ b/src/condor_daemon_client/dc_schedd.cpp
@@ -370,7 +370,7 @@ DCSchedd::receiveJobSandbox(const char* constraint, CondorError * errstack, int
 	if (!forceAuthentication( &rsock, errstack )) {
 		dprintf( D_ALWAYS, 
 			"DCSchedd::receiveJobSandbox: authentication failure: %s\n",
-			errstack ? errstack->getFullText() : "" );
+			errstack ? errstack->getFullText().c_str() : "" );
 		return false;
 	}
 
@@ -572,7 +572,7 @@ DCSchedd::register_transferd(MyString sinful, MyString id, int timeout,
 		// First, if we're not already authenticated, force that now. 
 	if (!forceAuthentication( rsock, errstack )) {
 		dprintf( D_ALWAYS, "DCSchedd::register_transferd authentication "
-				"failure: %s\n", errstack->getFullText() );
+				"failure: %s\n", errstack->getFullText().c_str() );
 		errstack->push("DC_SCHEDD", 1, 
 			"Failed to authenticate properly.");
 		return false;
@@ -772,7 +772,7 @@ DCSchedd::requestSandboxLocation(ClassAd *reqad, ClassAd *respad,
 		// First, if we're not already authenticated, force that now. 
 	if (!forceAuthentication( &rsock, errstack )) {
 		dprintf( D_ALWAYS, "DCSchedd: authentication failure: %s\n",
-				 errstack->getFullText() );
+				 errstack->getFullText().c_str() );
 		return false;
 	}
 
@@ -929,7 +929,7 @@ DCSchedd::spoolJobFiles(int JobAdsArrayLen, ClassAd* JobAdsArray[], CondorError
 		// First, if we're not already authenticated, force that now. 
 	if (!forceAuthentication( &rsock, errstack )) {
 		dprintf( D_ALWAYS, "DCSchedd: authentication failure: %s\n",
-				 errstack ? errstack->getFullText() : "" );
+				 errstack ? errstack->getFullText().c_str() : "" );
 		return false;
 	}
 
@@ -1083,7 +1083,7 @@ DCSchedd::updateGSIcredential(const int cluster, const int proc,
 	if( ! startCommand(UPDATE_GSI_CRED, (Sock*)&rsock, 0, errstack) ) {
 		dprintf( D_ALWAYS, "DCSchedd::updateGSIcredential: "
 				 "Failed send command to the schedd: %s\n",
-				 errstack->getFullText());
+				 errstack->getFullText().c_str());
 		return false;
 	}
 
@@ -1092,7 +1092,7 @@ DCSchedd::updateGSIcredential(const int cluster, const int proc,
 	if (!forceAuthentication( &rsock, errstack )) {
 		dprintf( D_ALWAYS, 
 				"DCSchedd:updateGSIcredential authentication failure: %s\n",
-				 errstack->getFullText() );
+				 errstack->getFullText().c_str() );
 		return false;
 	}
 
@@ -1155,7 +1155,7 @@ DCSchedd::delegateGSIcredential(const int cluster, const int proc,
 	if( ! startCommand(DELEGATE_GSI_CRED_SCHEDD, (Sock*)&rsock, 0, errstack) ) {
 		dprintf( D_ALWAYS, "DCSchedd::delegateGSIcredential: "
 				 "Failed send command to the schedd: %s\n",
-				 errstack->getFullText());
+				 errstack->getFullText().c_str());
 		return false;
 	}
 
@@ -1164,7 +1164,7 @@ DCSchedd::delegateGSIcredential(const int cluster, const int proc,
 	if (!forceAuthentication( &rsock, errstack )) {
 		dprintf( D_ALWAYS, 
 				"DCSchedd::delegateGSIcredential authentication failure: %s\n",
-				 errstack->getFullText() );
+				 errstack->getFullText().c_str() );
 		return false;
 	}
 
@@ -1305,7 +1305,7 @@ DCSchedd::actOnJobs( JobAction action,
 		// First, if we're not already authenticated, force that now. 
 	if (!forceAuthentication( &rsock, errstack )) {
 		dprintf( D_ALWAYS, "DCSchedd: authentication failure: %s\n",
-				 errstack->getFullText() );
+				 errstack->getFullText().c_str() );
 		return NULL;
 	}
 
@@ -1766,19 +1766,19 @@ bool DCSchedd::recycleShadow( int previous_job_exit_reason, ClassAd **new_job_ad
 	ReliSock sock;
 	if( !connectSock(&sock,timeout,&errstack) ) {
 		error_msg.sprintf("Failed to connect to schedd: %s",
-						  errstack.getFullText());
+						  errstack.getFullText().c_str());
 		return false;
 	}
 
 	if( !startCommand(RECYCLE_SHADOW, &sock, timeout, &errstack) ) {
 		error_msg.sprintf("Failed to send RECYCLE_SHADOW to schedd: %s",
-						  errstack.getFullText());
+						  errstack.getFullText().c_str());
 		return false;
 	}
 
 	if( !forceAuthentication(&sock, &errstack) ) {
 		error_msg.sprintf("Failed to authenticate: %s",
-						  errstack.getFullText());
+						  errstack.getFullText().c_str());
 		return false;
 	}
 
diff --git a/src/condor_daemon_client/dc_startd.cpp b/src/condor_daemon_client/dc_startd.cpp
index d365394..d2e3219 100644
--- a/src/condor_daemon_client/dc_startd.cpp
+++ b/src/condor_daemon_client/dc_startd.cpp
@@ -927,7 +927,7 @@ DCStartd::getAds( ClassAdList &adsList )
 		q = query->fetchAds(adsList, ad_addr, &errstack);
 		if (q != Q_OK) {
         	if (q == Q_COMMUNICATION_ERROR) {
-            	dprintf( D_ALWAYS, "%s\n", errstack.getFullText(true) );
+            	dprintf( D_ALWAYS, "%s\n", errstack.getFullText(true).c_str() );
         	}
         	else {
             	dprintf (D_ALWAYS, "Error:  Could not fetch ads --- %s\n",
diff --git a/src/condor_daemon_client/dc_starter.cpp b/src/condor_daemon_client/dc_starter.cpp
index c77ad29..19ee572 100644
--- a/src/condor_daemon_client/dc_starter.cpp
+++ b/src/condor_daemon_client/dc_starter.cpp
@@ -133,7 +133,7 @@ DCStarter::updateX509Proxy( const char * filename, char const *sec_session_id)
 	if( ! startCommand(UPDATE_GSI_CRED, &rsock, 0, &errstack, NULL, false, sec_session_id) ) {
 		dprintf( D_ALWAYS, "DCStarter::updateX509Proxy: "
 				 "Failed send command to the starter: %s\n",
-				 errstack.getFullText());
+				 errstack.getFullText().c_str());
 		return XUS_Error;
 	}
 
@@ -179,7 +179,7 @@ DCStarter::delegateX509Proxy( const char * filename, time_t expiration_time, cha
 	if( ! startCommand(DELEGATE_GSI_CRED_STARTER, &rsock, 0, &errstack, NULL, false, sec_session_id) ) {
 		dprintf( D_ALWAYS, "DCStarter::delegateX509Proxy: "
 				 "Failed send command to the starter: %s\n",
-				 errstack.getFullText());
+				 errstack.getFullText().c_str());
 		return XUS_Error;
 	}
 
diff --git a/src/condor_daemon_client/dc_transfer_queue.cpp b/src/condor_daemon_client/dc_transfer_queue.cpp
index 2705e64..c39e3fb 100644
--- a/src/condor_daemon_client/dc_transfer_queue.cpp
+++ b/src/condor_daemon_client/dc_transfer_queue.cpp
@@ -177,7 +177,7 @@ DCTransferQueue::RequestTransferQueueSlot(bool downloading,char const *fname,cha
 	if( !m_xfer_queue_sock ) {
 		sprintf(m_xfer_rejected_reason,
 			"Failed to connect to transfer queue manager for job %s (%s): %s.",
-			jobid, fname, errstack.getFullText() );
+			jobid, fname, errstack.getFullText().c_str() );
 		error_desc = m_xfer_rejected_reason;
 		dprintf(D_ALWAYS,"%s\n",m_xfer_rejected_reason.c_str());
 		return false;
@@ -199,7 +199,7 @@ DCTransferQueue::RequestTransferQueueSlot(bool downloading,char const *fname,cha
 		m_xfer_queue_sock = NULL;
 		sprintf(m_xfer_rejected_reason,
 			"Failed to initiate transfer queue request for job %s (%s): %s.",
-			jobid, fname, errstack.getFullText() );
+			jobid, fname, errstack.getFullText().c_str() );
 		error_desc = m_xfer_rejected_reason;
 		dprintf(D_ALWAYS,"%s\n",m_xfer_rejected_reason.c_str());
 		return false;
diff --git a/src/condor_daemon_client/dc_transferd.cpp b/src/condor_daemon_client/dc_transferd.cpp
index 9d42d19..8e04f07 100644
--- a/src/condor_daemon_client/dc_transferd.cpp
+++ b/src/condor_daemon_client/dc_transferd.cpp
@@ -90,7 +90,7 @@ DCTransferD::setup_treq_channel(ReliSock **treq_sock_ptr,
 		// First, if we're not already authenticated, force that now. 
 	if (!forceAuthentication( rsock, errstack )) {
 		dprintf( D_ALWAYS, "DCTransferD::setup_treq_channel() authentication "
-				"failure: %s\n", errstack->getFullText() );
+				"failure: %s\n", errstack->getFullText().c_str() );
 		errstack->push("DC_TRANSFERD", 1, 
 			"Failed to authenticate properly.");
 		return false;
@@ -149,7 +149,7 @@ DCTransferD::upload_job_files(int JobAdsArrayLen, ClassAd* JobAdsArray[],
 		// First, if we're not already authenticated, force that now. 
 	if (!forceAuthentication( rsock, errstack )) {
 		dprintf( D_ALWAYS, "DCTransferD::upload_job_files() authentication "
-				"failure: %s\n", errstack->getFullText() );
+				"failure: %s\n", errstack->getFullText().c_str() );
 		errstack->push("DC_TRANSFERD", 1, 
 			"Failed to authenticate properly.");
 		return false;
@@ -320,7 +320,7 @@ DCTransferD::download_job_files(ClassAd *work_ad, CondorError * errstack)
 		// First, if we're not already authenticated, force that now. 
 	if (!forceAuthentication( rsock, errstack )) {
 		dprintf( D_ALWAYS, "DCTransferD::download_job_files() authentication "
-				"failure: %s\n", errstack->getFullText() );
+				"failure: %s\n", errstack->getFullText().c_str() );
 		errstack->push("DC_TRANSFERD", 1, 
 			"Failed to authenticate properly.");
 		return false;
diff --git a/src/condor_daemon_core.V6/daemon_command.cpp b/src/condor_daemon_core.V6/daemon_command.cpp
index e6da114..a3a7482 100644
--- a/src/condor_daemon_core.V6/daemon_command.cpp
+++ b/src/condor_daemon_core.V6/daemon_command.cpp
@@ -1010,7 +1010,7 @@ DaemonCommandProtocol::CommandProtocolResult DaemonCommandProtocol::Authenticate
 		if( !auth_success ) {
 			dprintf( D_ALWAYS,
 					 "DC_AUTHENTICATE: reason for authentication failure: %s\n",
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 		}
 		m_result = FALSE;
 		return CommandProtocolFinished;
@@ -1037,7 +1037,7 @@ DaemonCommandProtocol::CommandProtocolResult DaemonCommandProtocol::Authenticate
 			dprintf( D_ALWAYS,
 					 "DC_AUTHENTICATE: required authentication of %s failed: %s\n",
 					 m_sock->peer_ip_str(),
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			m_result = FALSE;
 			return CommandProtocolFinished;
 		}
diff --git a/src/condor_dagman/dagman_main.cpp b/src/condor_dagman/dagman_main.cpp
index d8b2937..ffd337b 100644
--- a/src/condor_dagman/dagman_main.cpp
+++ b/src/condor_dagman/dagman_main.cpp
@@ -797,7 +797,7 @@ void main_init (int argc, char ** const argv) {
 	if ( !MultiLogFiles::makePathAbsolute( tmpDefaultLog, errstack) ) {
        	debug_printf( DEBUG_QUIET, "Unable to convert default log "
 					"file name to absolute path: %s\n",
-					errstack.getFullText() );
+					errstack.getFullText().c_str() );
 		dagman.dag->GetJobstateLog().WriteDagmanFinished( EXIT_ERROR );
 		DC_Exit( EXIT_ERROR );
 	}
diff --git a/src/condor_dagman/job.cpp b/src/condor_dagman/job.cpp
index 5cb012f..b6b5d2e 100644
--- a/src/condor_dagman/job.cpp
+++ b/src/condor_dagman/job.cpp
@@ -868,7 +868,7 @@ Job::MonitorLogFile( ReadMultipleUserLogs &condorLogReader,
 		errstack.pushf( "DAGMan::Job", DAGMAN_ERR_LOG_FILE,
 					"ERROR: Unable to monitor log file for node %s",
 					GetJobName() );
-		debug_printf( DEBUG_QUIET, "%s\n", errstack.getFullText() );
+		debug_printf( DEBUG_QUIET, "%s\n", errstack.getFullText().c_str() );
 		LogMonitorFailed();
 		EXCEPT( "Fatal log file monitoring error!\n" );
 		return false;
@@ -905,7 +905,7 @@ Job::UnmonitorLogFile( ReadMultipleUserLogs &condorLogReader,
 		errstack.pushf( "DAGMan::Job", DAGMAN_ERR_LOG_FILE,
 					"ERROR: Unable to unmonitor log " "file for node %s",
 					GetJobName() );
-		debug_printf( DEBUG_QUIET, "%s\n", errstack.getFullText() );
+		debug_printf( DEBUG_QUIET, "%s\n", errstack.getFullText().c_str() );
 		EXCEPT( "Fatal log file monitoring error!\n" );
 	}
 
diff --git a/src/condor_gridmanager/gridmanager.cpp b/src/condor_gridmanager/gridmanager.cpp
index 1f97ef7..b9898bd 100644
--- a/src/condor_gridmanager/gridmanager.cpp
+++ b/src/condor_gridmanager/gridmanager.cpp
@@ -618,7 +618,7 @@ doContactSchedd()
 		rval = ScheddObj->vacateJobs( &job_ids, VACATE_FAST, &errstack );
 		if ( rval == NULL ) {
 			sprintf( error_str, "vacateJobs returned NULL, CondorError: %s!",
-							   errstack.getFullText() );
+							   errstack.getFullText().c_str() );
 			goto contact_schedd_failure;
 		} else {
 			pendingScheddVacates.startIterations();
@@ -1149,7 +1149,7 @@ contact_schedd_next_add_job:
 		dirty_job_ids.rewind();
 		rval = ScheddObj->clearDirtyAttrs( &dirty_job_ids, &errstack );
 		if ( rval == NULL ) {
-			dprintf(D_ALWAYS, "Failed to notify schedd to clear dirty attributes.  CondorError: %s\n", errstack.getFullText() );
+			dprintf(D_ALWAYS, "Failed to notify schedd to clear dirty attributes.  CondorError: %s\n", errstack.getFullText().c_str() );
 		}
 		delete rval;
 	}
diff --git a/src/condor_io/condor_secman.cpp b/src/condor_io/condor_secman.cpp
index 393b32e..5628d38 100644
--- a/src/condor_io/condor_secman.cpp
+++ b/src/condor_io/condor_secman.cpp
@@ -1082,10 +1082,7 @@ SecManStartCommand::doCallback( StartCommandResult result )
 			// caller did not provide an errstack, so print out the
 			// internal one
 
-		char const *error_msg = m_internal_errstack.getFullText();
-		if(error_msg && *error_msg) {
-			dprintf(D_ALWAYS, "ERROR: %s\n",error_msg);
-		}
+		dprintf(D_ALWAYS, "ERROR: %s\n", m_internal_errstack.getFullText().c_str());
 	}
 
 	if(result != StartCommandInProgress) {
diff --git a/src/condor_job_router/submit_job.cpp b/src/condor_job_router/submit_job.cpp
index 3e9edbb..5d0992a 100644
--- a/src/condor_job_router/submit_job.cpp
+++ b/src/condor_job_router/submit_job.cpp
@@ -177,7 +177,7 @@ static Qmgr_connection *open_q_as_owner(char const *effective_owner,DCSchedd &sc
 	CondorError errstack;
 	Qmgr_connection * qmgr = ConnectQ(schedd.addr(), 0 /*timeout==default*/, false /*read-only*/, & errstack, effective_owner, schedd.version());
 	if( ! qmgr ) {
-		failobj.fail("Unable to connect\n%s\n", errstack.getFullText(true));
+		failobj.fail("Unable to connect\n%s\n", errstack.getFullText(true).c_str());
 		return NULL;
 	}
 	failobj.SetQmgr(qmgr);
@@ -504,7 +504,7 @@ static bool submit_job_with_current_priv( ClassAd & src, const char * schedd_nam
 		ClassAd * adlist[1];
 		adlist[0] = &src;
 		if( ! schedd.spoolJobFiles(1, adlist, &errstack) ) {
-			failobj.fail("Failed to spool job files: %s\n",errstack.getFullText(true));
+			failobj.fail("Failed to spool job files: %s\n",errstack.getFullText(true).c_str());
 			return false;
 		}
 	}
diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index c0367e2..5c8867a 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -2735,7 +2735,7 @@ obtainAdsFromCollector (
 	result = collects->query (publicQuery, allAds, &errstack);
 	if( result!=Q_OK ) {
 		dprintf(D_ALWAYS, "Couldn't fetch ads: %s\n", 
-           errstack.code() ? errstack.getFullText(false) : getStrQueryResult(result)
+           errstack.code() ? errstack.getFullText(false).c_str() : getStrQueryResult(result)
            );
 		return false;
 	}
diff --git a/src/condor_q.V6/queue.cpp b/src/condor_q.V6/queue.cpp
index b62b0ee..9caf796 100644
--- a/src/condor_q.V6/queue.cpp
+++ b/src/condor_q.V6/queue.cpp
@@ -2701,7 +2701,7 @@ show_queue_buffered( const char* v1, const char* v2, const char* v3, const char*
 			fprintf( stderr, 
 					"\n-- Failed to fetch ads from db [%s] at database "
 					"server %s\n%s\n",
-					db_name, db_ipAddr, errstack.getFullText(true) );
+					db_name, db_ipAddr, errstack.getFullText(true).c_str() );
 
 			if(dbconn) {
 				free(dbconn);
@@ -2745,7 +2745,7 @@ show_queue_buffered( const char* v1, const char* v2, const char* v3, const char*
 				default:
 					fprintf(stderr,
 						"\n-- Failed to fetch ads from: %s : %s\n%s\n",
-						scheddAddress, scheddMachine, errstack.getFullText(true) );
+						scheddAddress, scheddMachine, errstack.getFullText(true).c_str() );
 			}
 
 			return false;
@@ -3037,7 +3037,7 @@ show_queue( const char* v1, const char* v2, const char* v3, const char* v4, bool
 			if( Q.fetchQueueFromDB(jobs, lastUpdate, dbconn, &errstack) != Q_OK ) {
 				fprintf( stderr,
 						"\n-- Failed to fetch ads from: %s : %s\n%s\n",
-						db_ipAddr, db_name, errstack.getFullText(true) );
+						db_ipAddr, db_name, errstack.getFullText(true).c_str() );
 				if(dbconn) {
 					free(dbconn);
 				}
@@ -3066,7 +3066,7 @@ show_queue( const char* v1, const char* v2, const char* v3, const char* v4, bool
 				default:
 					fprintf(stderr,
 						"\n-- Failed to fetch ads from: %s : %s\n%s\n",
-						scheddAddress, scheddMachine, errstack.getFullText(true) );
+						scheddAddress, scheddMachine, errstack.getFullText(true).c_str() );
 			}
 			return false;
 			}
diff --git a/src/condor_rm.V6/rm.cpp b/src/condor_rm.V6/rm.cpp
index a4b5d2f..5cda2b4 100644
--- a/src/condor_rm.V6/rm.cpp
+++ b/src/condor_rm.V6/rm.cpp
@@ -468,7 +468,7 @@ main( int argc, char *argv[] )
 		CondorError errstack;
 		ClassAd* result_ad = doWorkByList( job_ids, &errstack );
 		if (had_error) {
-			fprintf( stderr, "%s\n", errstack.getFullText(true) );
+			fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 		}
 		printNewMessages( result_ad, job_ids );
 		delete( result_ad );
@@ -480,7 +480,7 @@ main( int argc, char *argv[] )
 		Daemon  my_schedd(DT_SCHEDD, NULL, NULL);
 		CondorError errstack;
 		if (!my_schedd.sendCommand(RESCHEDULE, Stream::safe_sock, 0, &errstack)) {
-			fprintf( stderr, "%s\n", errstack.getFullText(true) );
+			fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 		}
 	}
 
@@ -630,7 +630,7 @@ procArg(const char* arg)
 						 "has been removed locally (remote state unknown)" :
 						 actionWord(mode,true) );
 			} else {
-				fprintf( stderr, "%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 				if (had_error)
 				{
 					fprintf( stderr, 
@@ -674,7 +674,7 @@ procArg(const char* arg)
 					 "have been removed locally (remote state unknown)" :
 					 actionWord(mode,true) );
 		} else {
-			fprintf( stderr, "%s\n", errstack.getFullText(true) );
+			fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 			if (had_error)
 			{
 				fprintf( stderr, 
@@ -749,7 +749,7 @@ handleAll()
 				 "removed locally (remote state unknown)" :
 				 actionWord(mode,true) );
 	} else {
-		fprintf( stderr, "%s\n", errstack.getFullText(true) );
+		fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 		if (had_error)
 		{
 			fprintf( stderr, "Could not %s all jobs.\n",
@@ -777,7 +777,7 @@ handleConstraints( void )
 				 actionWord(mode,true) );
 
 	} else {
-		fprintf( stderr, "%s\n", errstack.getFullText(true) );
+		fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 		if (had_error)
 		{
 			fprintf( stderr, 
diff --git a/src/condor_schedd.V6/qmgmt_receivers.cpp b/src/condor_schedd.V6/qmgmt_receivers.cpp
index 98e1960..32da39e 100644
--- a/src/condor_schedd.V6/qmgmt_receivers.cpp
+++ b/src/condor_schedd.V6/qmgmt_receivers.cpp
@@ -74,7 +74,7 @@ do_Q_request(ReliSock *syscall_sock,bool &may_fork)
 			if( ! SecMan::authenticate_sock(syscall_sock, WRITE, &errstack) ) {
 					// Failed to authenticate
 				dprintf( D_ALWAYS, "SCHEDD: authentication failed: %s\n", 
-						 errstack.getFullText() );
+						 errstack.getFullText().c_str() );
 				authenticated = false;
 			}
 		}
diff --git a/src/condor_schedd.V6/qmgr_job_updater.cpp b/src/condor_schedd.V6/qmgr_job_updater.cpp
index f9c100a..43992a9 100644
--- a/src/condor_schedd.V6/qmgr_job_updater.cpp
+++ b/src/condor_schedd.V6/qmgr_job_updater.cpp
@@ -407,7 +407,7 @@ QmgrJobUpdater::retrieveJobUpdates( void )
 
 	DCSchedd schedd( schedd_addr );
 	if ( schedd.clearDirtyAttrs( &job_ids, &errstack ) == NULL ) {
-		dprintf( D_ALWAYS, "clearDirtyAttrs() failed: %s\n", errstack.getFullText( ) );
+		dprintf( D_ALWAYS, "clearDirtyAttrs() failed: %s\n", errstack.getFullText().c_str() );
 		return false;
 	}
 	return true;
diff --git a/src/condor_schedd.V6/qmgr_lib_support.cpp b/src/condor_schedd.V6/qmgr_lib_support.cpp
index 64bfffd..b646a1ca 100644
--- a/src/condor_schedd.V6/qmgr_lib_support.cpp
+++ b/src/condor_schedd.V6/qmgr_lib_support.cpp
@@ -89,7 +89,7 @@ ConnectQ(const char *qmgr_location, int timeout, bool read_only, CondorError* er
 		ok = qmgmt_sock != NULL;
 		if( !ok && !errstack) {
 			dprintf(D_ALWAYS, "Can't connect to queue manager: %s\n",
-					errstack_select->getFullText() );
+					errstack_select->getFullText().c_str() );
 		}
 	}
 
@@ -110,7 +110,7 @@ ConnectQ(const char *qmgr_location, int timeout, bool read_only, CondorError* er
 			qmgmt_sock = NULL;
 			if (!errstack) {
 				dprintf( D_ALWAYS, "Authentication Error: %s\n",
-						 errstack_select->getFullText() );
+						 errstack_select->getFullText().c_str() );
 			}
 			return 0;
 		}
@@ -160,7 +160,7 @@ ConnectQ(const char *qmgr_location, int timeout, bool read_only, CondorError* er
                 qmgmt_sock = NULL;
 				if (!errstack) {
 					dprintf( D_ALWAYS, "Authentication Error: %s\n",
-							 errstack_select->getFullText() );
+							 errstack_select->getFullText().c_str() );
 				}
                 return 0;
             }
diff --git a/src/condor_schedd.V6/schedd.cpp b/src/condor_schedd.V6/schedd.cpp
index ac99b80..4a1a93e 100644
--- a/src/condor_schedd.V6/schedd.cpp
+++ b/src/condor_schedd.V6/schedd.cpp
@@ -3443,7 +3443,7 @@ Scheduler::spoolJobFiles(int mode, Stream* s)
 			errstack.push( "SCHEDD", SCHEDD_ERR_SPOOL_FILES_FAILED,
 					"Failure to spool job files - Authentication failed" );
 			dprintf( D_ALWAYS, "spoolJobFiles() aborting: %s\n",
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			refuse( s );
 			return FALSE;
 		}
@@ -3699,7 +3699,7 @@ Scheduler::updateGSICred(int cmd, Stream* s)
 			errstack.push( "SCHEDD", SCHEDD_ERR_UPDATE_GSI_CRED_FAILED,
 					"Failure to update GSI cred - Authentication failed" );
 			dprintf( D_ALWAYS, "updateGSICred(%d) aborting: %s\n", cmd,
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			refuse( s );
 			return FALSE;
 		}
@@ -3910,7 +3910,7 @@ Scheduler::actOnJobs(int, Stream* s)
 			errstack.push( "SCHEDD", SCHEDD_ERR_JOB_ACTION_FAILED,
 					"Failed to act on jobs - Authentication failed");
 			dprintf( D_ALWAYS, "actOnJobs() aborting: %s\n",
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			refuse( s );
 			return FALSE;
 		}
@@ -12109,7 +12109,7 @@ Scheduler::get_job_connect_info_handler_implementation(int, Stream* s) {
 		{
 			dprintf( D_ALWAYS,
 					 "GET_JOB_CONNECT_INFO: authentication failed: %s\n", 
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			return FALSE;
 		}
 	}
@@ -13659,7 +13659,7 @@ Scheduler::RecycleShadow(int /*cmd*/, Stream *stream)
 		{
 			dprintf( D_ALWAYS,
 					 "RecycleShadow(): authentication failed: %s\n", 
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			return FALSE;
 		}
 	}
@@ -13869,7 +13869,7 @@ Scheduler::clear_dirty_job_attrs_handler(int /*cmd*/, Stream *stream)
 		{
 			dprintf( D_ALWAYS,
 					 "clear_dirty_job_attrs_handler(): authentication failed: %s\n", 
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			return FALSE;
 		}
 	}
diff --git a/src/condor_schedd.V6/schedd_td.cpp b/src/condor_schedd.V6/schedd_td.cpp
index 3e30f27..0359b58 100644
--- a/src/condor_schedd.V6/schedd_td.cpp
+++ b/src/condor_schedd.V6/schedd_td.cpp
@@ -85,7 +85,7 @@ Scheduler::requestSandboxLocation(int mode, Stream* s)
 			errstack.push( "SCHEDD", SCHEDD_ERR_SPOOL_FILES_FAILED,
 					"Failure to spool job files - Authentication failed" );
 			dprintf( D_ALWAYS, "requestSandBoxLocation() aborting: %s\n",
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 
 			respad.Assign(ATTR_TREQ_INVALID_REQUEST, TRUE);
 			respad.Assign(ATTR_TREQ_INVALID_REASON, "Authentication failed.");
@@ -1530,7 +1530,7 @@ Scheduler::downloadJobFiles(int mode, Stream* s)
 			errstack.push( "SCHEDD", SCHEDD_ERR_SPOOL_FILES_FAILED,
 					"Failure to spool job files - Authentication failed" );
 			dprintf( D_ALWAYS, "spoolJobFiles() aborting: %s\n",
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			refuse( s );
 			return FALSE;
 		}
diff --git a/src/condor_schedd.V6/tdman.cpp b/src/condor_schedd.V6/tdman.cpp
index 53c6000..16a519f 100644
--- a/src/condor_schedd.V6/tdman.cpp
+++ b/src/condor_schedd.V6/tdman.cpp
@@ -878,7 +878,7 @@ TDMan::transferd_registration(int cmd, Stream *sock)
 			errstack.push( "SCHEDD::TDMan", 42,
 					"Failure to register transferd - Authentication failed" );
 			dprintf( D_ALWAYS, "transferd_registration() aborting: %s\n",
-					 errstack.getFullText() );
+					 errstack.getFullText().c_str() );
 			refuse( rsock );
 			dprintf(D_ALWAYS, "Leaving TDMan::transferd_registration()\n");
 			return CLOSE_STREAM;
diff --git a/src/condor_startd.V6/vm_common.cpp b/src/condor_startd.V6/vm_common.cpp
index 7ac560b..cae345d 100644
--- a/src/condor_startd.V6/vm_common.cpp
+++ b/src/condor_startd.V6/vm_common.cpp
@@ -275,7 +275,7 @@ _FindDaemon( char *host_name, daemon_t real_dt, Daemon *pool)
 	q_result = query.fetchAds(ads, pool_addr, &errstack);
 
 	if( q_result != Q_OK ) {
-		dprintf( D_FULLDEBUG, "%s\n", errstack.getFullText(TRUE) );
+		dprintf( D_FULLDEBUG, "%s\n", errstack.getFullText(true).c_str() );
 		dprintf( D_FULLDEBUG, "ERROR: can't connect to %s\n", pool->idStr());
 		had_error = TRUE;
 	} else if( ads.Length() <= 0 ) { 
diff --git a/src/condor_starter.V6.1/starter_v61_main.cpp b/src/condor_starter.V6.1/starter_v61_main.cpp
index f598531..af952f2 100644
--- a/src/condor_starter.V6.1/starter_v61_main.cpp
+++ b/src/condor_starter.V6.1/starter_v61_main.cpp
@@ -148,7 +148,7 @@ printClassAd( void )
 	CondorError e;
 	ft.InitializePlugins(e);
 	if (e.code()) {
-		dprintf(D_ALWAYS, "WARNING: Initializing plugins returned: %s\n", e.getFullText());
+		dprintf(D_ALWAYS, "WARNING: Initializing plugins returned: %s\n", e.getFullText().c_str());
 	}
 
 	MyString method_list = ft.GetSupportedMethods();
diff --git a/src/condor_status.V6/status.cpp b/src/condor_status.V6/status.cpp
index 7e03585..1e8546d 100644
--- a/src/condor_status.V6/status.cpp
+++ b/src/condor_status.V6/status.cpp
@@ -455,7 +455,7 @@ main (int argc, char *argv[])
         if (Q_OK != q) {
                 // we can always provide these messages:
 	        fprintf( stderr, "Error: %s\n", getStrQueryResult(q) );
-		fprintf( stderr, "%s\n", errstack.getFullText(true) );
+		fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 
 	        if ((NULL != requested_daemon) && ((Q_NO_COLLECTOR_HOST == q) || (requested_daemon->type() == DT_COLLECTOR))) {
                         // Specific long message if connection to collector failed.
diff --git a/src/condor_submit.V6/submit.cpp b/src/condor_submit.V6/submit.cpp
index d674df1..392bd45 100644
--- a/src/condor_submit.V6/submit.cpp
+++ b/src/condor_submit.V6/submit.cpp
@@ -1274,7 +1274,7 @@ main( int argc, char *argv[] )
 											  JobAdsArray.getarray(),
 											  &errstack );
 					if ( !result ) {
-						fprintf( stderr, "\n%s\n", errstack.getFullText(true) );
+						fprintf( stderr, "\n%s\n", errstack.getFullText(true).c_str() );
 						fprintf( stderr, "ERROR: Failed to spool job files.\n" );
 						exit(1);
 					}
@@ -1296,7 +1296,7 @@ main( int argc, char *argv[] )
 												JobAdsArray.getarray(), FTP_CFTP,
 												&respad, &errstack );
 					if ( !result ) {
-						fprintf( stderr, "\n%s\n", errstack.getFullText(true) );
+						fprintf( stderr, "\n%s\n", errstack.getFullText(true).c_str() );
 						fprintf( stderr, 
 							"ERROR: Failed to get a sandbox location.\n" );
 						exit(1);
@@ -1326,7 +1326,7 @@ main( int argc, char *argv[] )
 											  JobAdsArray.getarray(),
 											  &respad, &errstack );
 					if ( !result ) {
-						fprintf( stderr, "\n%s\n", errstack.getFullText(true) );
+						fprintf( stderr, "\n%s\n", errstack.getFullText(true).c_str() );
 						fprintf( stderr, "ERROR: Failed to spool job files.\n" );
 						exit(1);
 					}
@@ -6260,11 +6260,11 @@ connect_to_the_schedd()
 		if( ScheddName ) {
 			fprintf( stderr, 
 					"\nERROR: Failed to connect to queue manager %s\n%s\n",
-					 ScheddName, errstack.getFullText(true) );
+					 ScheddName, errstack.getFullText(true).c_str() );
 		} else {
 			fprintf( stderr, 
 				"\nERROR: Failed to connect to local queue manager\n%s\n",
-				errstack.getFullText(true) );
+				errstack.getFullText(true).c_str() );
 		}
 		exit(1);
 	}
diff --git a/src/condor_tools/tool.cpp b/src/condor_tools/tool.cpp
index 5e63dc7..e8acaf2 100644
--- a/src/condor_tools/tool.cpp
+++ b/src/condor_tools/tool.cpp
@@ -1175,7 +1175,7 @@ resolveNames( DaemonList* daemon_list, StringList* name_list )
 		delete collectors;
 	}
 	if( q_result != Q_OK ) {
-		fprintf( stderr, "%s\n", errstack.getFullText(true) );
+		fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 		fprintf( stderr, "ERROR: can't connect to %s\n",
 				 pool ? pool->idStr() : "local collector" );
 		had_error = true;
@@ -1392,7 +1392,7 @@ doCommand( Daemon* d )
 					my_cmd = VACATE_CLAIM_FAST;
 				}
 				if (!d->startCommand(my_cmd, &sock, 0, &errstack)) {
-					fprintf(stderr, "ERROR\n%s\n", errstack.getFullText(true));
+					fprintf(stderr, "ERROR\n%s\n", errstack.getFullText(true).c_str());
 				}
 				if( !sock.code(name) || !sock.end_of_message() ) {
 					fprintf( stderr, "Can't send %s command to %s\n", 
@@ -1416,7 +1416,7 @@ doCommand( Daemon* d )
 					// we've got a specific slot, so send the claim after
 					// the command.
 				if( !d->startCommand(my_cmd, &sock, 0, &errstack) ) {
-					fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true));
+					fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true).c_str());
 				}
 				if( !sock.code(name) || !sock.end_of_message() ) {
 					fprintf( stderr, "Can't send %s command to %s\n",
@@ -1439,7 +1439,7 @@ doCommand( Daemon* d )
 				my_cmd = DAEMON_OFF_PEACEFUL;
 			}
 			if( !d->startCommand( my_cmd, &sock, 0, &errstack) ) {
-				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true).c_str() );
 			}
 			if( !sock.code( psubsys ) || !sock.end_of_message() ) {
 				fprintf( stderr, "Can't send %s command to %s\n",
@@ -1453,7 +1453,7 @@ doCommand( Daemon* d )
 
 		case DAEMON_ON:
 			if( !d->startCommand(my_cmd, &sock, 0, &errstack) ) {
-				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true).c_str() );
 			}
 			if( !sock.code( psubsys ) || !sock.end_of_message() ) {
 				fprintf( stderr, "Can't send %s command to %s\n",
@@ -1509,7 +1509,7 @@ doCommand( Daemon* d )
 		{
 			char	*pexec = const_cast<char *>(exec_program); 
 			if( !d->startCommand(my_cmd, &sock, 0, &errstack) ) {
-				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true).c_str() );
 			}
 			if( !sock.code( pexec ) || !sock.end_of_message() ) {
 				fprintf( stderr, "Can't send %s command to %s\n",
@@ -1528,7 +1528,7 @@ doCommand( Daemon* d )
 
 		if( !done ) {
 			if( !d->sendCommand(my_cmd, &sock, 0, &errstack) ) {
-				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true).c_str() );
 				fprintf( stderr, "Can't send %s command to %s\n",
 							 cmdToStr(my_cmd), d->idStr() );
 				all_good = false;
@@ -1666,7 +1666,7 @@ handleSquawk( char *line, char *addr ) {
 		Daemon d( DT_ANY, addr );
 		CondorError errstack;
         if (!d.startCommand(DUMP_STATE, &sock, 0, &errstack)) {
-			fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
+			fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true).c_str() );
 		}
 
 		sock.decode();
@@ -1698,7 +1698,7 @@ handleSquawk( char *line, char *addr ) {
 		Daemon d( DT_ANY, addr );
 		CondorError errstack;
 		if (!d.startCommand (DC_RAISESIGNAL, &sock, 0, &errstack)) {
-			fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
+			fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true).c_str() );
 		}
 
 		sock.encode();
@@ -1723,7 +1723,7 @@ handleSquawk( char *line, char *addr ) {
 		Daemon d( DT_ANY, addr );
 		CondorError errstack;
 		if (!d.startCommand ( command, &sock, 0, &errstack)) {
-			fprintf( stderr, "%s\n", errstack.getFullText(true) );
+			fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 		}
 		sock.encode();
 		while( (token = strtok(NULL, " ")) ) {
diff --git a/src/condor_tools/transfer_data.cpp b/src/condor_tools/transfer_data.cpp
index 37090b8..20c131f 100644
--- a/src/condor_tools/transfer_data.cpp
+++ b/src/condor_tools/transfer_data.cpp
@@ -374,7 +374,7 @@ main(int argc, char *argv[])
 			result = schedd->receiveJobSandbox(global_constraint.Value(),
 				&errstack);
 			if ( !result ) {
-				fprintf( stderr, "\n%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "\n%s\n", errstack.getFullText(true).c_str() );
 				fprintf( stderr, "ERROR: Failed to spool job files.\n" );
 				exit(1);
 			}
@@ -401,7 +401,7 @@ main(int argc, char *argv[])
 			result = schedd->requestSandboxLocation(FTPD_DOWNLOAD, 
 				global_constraint, FTP_CFTP, &respad, &errstack);
 			if ( !result ) {
-				fprintf( stderr, "\n%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "\n%s\n", errstack.getFullText(true).c_str() );
 				fprintf( stderr, "ERROR: Failed to spool job files.\n" );
 				exit(1);
 			}
@@ -424,7 +424,7 @@ main(int argc, char *argv[])
 
 			result = dctd.download_job_files(&respad, &errstack);
 			if ( !result ) {
-				fprintf( stderr, "\n%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "\n%s\n", errstack.getFullText(true).c_str() );
 				fprintf( stderr, "ERROR: Failed to spool job files.\n" );
 				exit(1);
 			}
diff --git a/src/condor_transferd/td_init.cpp b/src/condor_transferd/td_init.cpp
index 1fccebd..32c7e0f 100644
--- a/src/condor_transferd/td_init.cpp
+++ b/src/condor_transferd/td_init.cpp
@@ -287,7 +287,7 @@ TransferD::setup_transfer_request_handler(int  /*cmd*/, Stream *sock)
 				"Failure to register transferd - Authentication failed" );
 			dprintf( D_ALWAYS, "setup_transfer_request_handler() "
 				"aborting: %s\n",
-				errstack.getFullText() );
+				errstack.getFullText().c_str() );
 			refuse(rsock);
 			return CLOSE_STREAM;
 		} 
@@ -550,7 +550,7 @@ TransferD::register_to_schedd(ReliSock **regsock_ptr)
 	if (rval == false) {
 		// emit why 
 		dprintf(D_ALWAYS, "TransferRequest::register_to_schedd(): Failed to "
-			"register. Schedd gave reason '%s'\n", errstack.getFullText());
+			"register. Schedd gave reason '%s'\n", errstack.getFullText().c_str());
 		return REG_RESULT_FAILED;
 	}
 
diff --git a/src/condor_transferd/td_read_files.cpp b/src/condor_transferd/td_read_files.cpp
index a6c7f87..7cc11d4 100644
--- a/src/condor_transferd/td_read_files.cpp
+++ b/src/condor_transferd/td_read_files.cpp
@@ -77,7 +77,7 @@ TransferD::read_files_handler(int cmd, Stream *sock)
 				"Failure to register transferd - Authentication failed" );
 			dprintf( D_ALWAYS, "setup_transfer_request_handler() "
 				"aborting: %s\n",
-				errstack.getFullText() );
+				errstack.getFullText().c_str() );
 			refuse( rsock );
 			return CLOSE_STREAM;
 		} 
diff --git a/src/condor_transferd/td_write_files.cpp b/src/condor_transferd/td_write_files.cpp
index 412a552..e9ea5ea 100644
--- a/src/condor_transferd/td_write_files.cpp
+++ b/src/condor_transferd/td_write_files.cpp
@@ -77,7 +77,7 @@ TransferD::write_files_handler(int cmd, Stream *sock)
 				"Failure to register transferd - Authentication failed" );
 			dprintf( D_ALWAYS, "setup_transfer_request_handler() "
 				"aborting: %s\n",
-				errstack.getFullText() );
+				errstack.getFullText().c_str() );
 			refuse( rsock );
 			return CLOSE_STREAM;
 		} 
diff --git a/src/condor_userlog/condor_check_userlogs.cpp b/src/condor_userlog/condor_check_userlogs.cpp
index ab7f278..5dbddec 100644
--- a/src/condor_userlog/condor_check_userlogs.cpp
+++ b/src/condor_userlog/condor_check_userlogs.cpp
@@ -57,7 +57,7 @@ int main(int argc, char **argv)
 		CondorError errstack;
 		if ( !ru.monitorLogFile( filestring, false, errstack ) ) {
 			fprintf( stderr, "Error monitoring log file %s: %s\n", filename,
-						errstack.getFullText() );
+						errstack.getFullText().c_str() );
 			result = 1;
 		}
 	}
@@ -147,7 +147,7 @@ int main(int argc, char **argv)
 		CondorError errstack;
 		if ( !ru.unmonitorLogFile( filestring, errstack ) ) {
 			fprintf( stderr, "Error unmonitoring log file %s: %s\n", filename,
-						errstack.getFullText() );
+						errstack.getFullText().c_str() );
 			result = 1;
 		}
 	}
diff --git a/src/condor_utils/CondorError.cpp b/src/condor_utils/CondorError.cpp
index 343bf52..d96a619 100644
--- a/src/condor_utils/CondorError.cpp
+++ b/src/condor_utils/CondorError.cpp
@@ -22,6 +22,8 @@
 #include "condor_snutils.h"
 #include "condor_debug.h"
 
+#include <sstream>
+
 CondorError::CondorError() {
 	init();
 }
@@ -114,33 +116,31 @@ void CondorError::pushf( const char* the_subsys, int the_code, const char* the_f
 	va_end(ap);
 }
 
-const char*
+std::string
 CondorError::getFullText( bool want_newline )
 {
-	PRAGMA_REMIND("Why keep this static? -matt");
-	static std::string errbuf;
+	std::stringstream err_ss;
 	bool printed_one = false;
 
-	errbuf = "";
 	CondorError* walk = _next;
 	while (walk) {
 		if( printed_one ) {
 			if( want_newline ) {
-				errbuf += '\n';
+				err_ss << '\n';
 			} else {
-				errbuf += '|';
+				err_ss << '|';
 			}
 		} else {
 			printed_one = true;
 		}
-		errbuf += walk->_subsys;
-		errbuf += ':';
-		errbuf += walk->_code;
-		errbuf += ':';
-		errbuf += walk->_message;
+		err_ss << walk->_subsys;
+		err_ss << ':';
+		err_ss << walk->_code;
+		err_ss << ':';
+		err_ss << walk->_message;
 		walk = walk->_next;
 	}
-	return errbuf.c_str();
+	return err_ss.str();
 }
 
 const char*
diff --git a/src/condor_utils/CondorError.h b/src/condor_utils/CondorError.h
index 6d4f694..8273f5d 100644
--- a/src/condor_utils/CondorError.h
+++ b/src/condor_utils/CondorError.h
@@ -33,7 +33,7 @@ class CondorError {
 		CondorError& operator=(CondorError&);
 		void push( const char* subsys, int code, const char* message );
 		void pushf( const char* subsys, int code, const char* format, ... ) CHECK_PRINTF_FORMAT(4,5); 
-		const char* getFullText( bool want_newline = false );
+		std::string getFullText( bool want_newline = false );
 		const char* subsys(int level = 0);
 		int   code(int level = 0);
 		const char* message(int level = 0);
@@ -50,7 +50,6 @@ class CondorError {
 		int   _code;
 		char* _message;
 		CondorError *_next;
-
 };
 
 
diff --git a/src/condor_utils/classad_command_util.cpp b/src/condor_utils/classad_command_util.cpp
index 56d7ddb..e498d7f 100644
--- a/src/condor_utils/classad_command_util.cpp
+++ b/src/condor_utils/classad_command_util.cpp
@@ -99,7 +99,7 @@ getCmdFromReliSock( ReliSock* s, ClassAd* ad, bool force_auth )
 			sendErrorReply( s, "CA_AUTH_CMD", CA_NOT_AUTHENTICATED,
 							"Server: client failed to authenticate" );
 			dprintf( D_ALWAYS, "getCmdFromSock: authenticate failed\n" );
-			dprintf( D_ALWAYS, "%s\n", errstack.getFullText() );
+			dprintf( D_ALWAYS, "%s\n", errstack.getFullText().c_str() );
 			return FALSE;
         }
     }
diff --git a/src/condor_utils/file_transfer.cpp b/src/condor_utils/file_transfer.cpp
index b86e9d8..dcc88f0 100644
--- a/src/condor_utils/file_transfer.cpp
+++ b/src/condor_utils/file_transfer.cpp
@@ -1971,7 +1971,7 @@ FileTransfer::DoDownload( filesize_t *total_bytes, ReliSock *s)
 				// defined state
 
 				if (rc == GET_FILE_PLUGIN_FAILED) {
-					error_buf.sprintf_cat(": %s", errstack.getFullText());
+					error_buf.sprintf_cat(": %s", errstack.getFullText().c_str());
 				} else {
 					error_buf.replaceString("receive","write to");
 					error_buf.sprintf_cat(": (errno %d) %s",the_error,strerror(the_error));
@@ -2903,7 +2903,7 @@ FileTransfer::DoUpload(filesize_t *total_bytes, ReliSock *s)
 					}
 				} else {
 					// add on the error string from the errstack used
-					error_desc.sprintf_cat(": %s", errstack.getFullText());
+					error_desc.sprintf_cat(": %s", errstack.getFullText().c_str());
 				}
 				try_again = false; // put job on hold
 				hold_code = CONDOR_HOLD_CODE_UploadFileError;
@@ -3799,7 +3799,7 @@ int FileTransfer::InitializePlugins(CondorError &e) {
 			I_support_filetransfer_plugins = true;
 			InsertPluginMappings(methods, p);
 		} else {
-			dprintf(D_ALWAYS, "FILETRANSFER: failed to add plugin \"%s\" because: %s\n", p, e.getFullText());
+			dprintf(D_ALWAYS, "FILETRANSFER: failed to add plugin \"%s\" because: %s\n", p, e.getFullText().c_str());
 		}
 	}
 
diff --git a/src/condor_utils/read_multiple_logs.cpp b/src/condor_utils/read_multiple_logs.cpp
index 45acfcf..0f13379 100644
--- a/src/condor_utils/read_multiple_logs.cpp
+++ b/src/condor_utils/read_multiple_logs.cpp
@@ -453,7 +453,7 @@ MultiLogFiles::loadLogFileNameFromSubFile(const MyString &strSubFilename,
 				// comparing paths to the log files.  wenger 2004-05-27.
 			CondorError errstack;
 			if ( !makePathAbsolute( logFileName, errstack ) ) {
-				dprintf(D_ALWAYS, "%s\n", errstack.getFullText());
+				dprintf(D_ALWAYS, "%s\n", errstack.getFullText().c_str());
 				return "";
 			}
 		}
diff --git a/src/condor_utils/test_multi_log.cpp b/src/condor_utils/test_multi_log.cpp
index 734af6d..f338c99 100644
--- a/src/condor_utils/test_multi_log.cpp
+++ b/src/condor_utils/test_multi_log.cpp
@@ -692,7 +692,7 @@ monitorLogFile( ReadMultipleUserLogs &reader, const char *logfile,
 	CondorError errstack;
 	if ( !reader.monitorLogFile( logfile, truncateIfFirst, errstack ) ) {
 		printf( "Error monitoring log file %s: %s\n", logfile,
-					errstack.getFullText() );
+					errstack.getFullText().c_str() );
 		return false;
 	}
 
@@ -706,7 +706,7 @@ unmonitorLogFile( ReadMultipleUserLogs &reader, const char *logfile )
 	CondorError errstack;
 	if ( !reader.unmonitorLogFile( logfile, errstack ) ) {
 		printf( "Error unmonitoring log file %s: %s\n", logfile,
-					errstack.getFullText() );
+					errstack.getFullText().c_str() );
 		return false;
 	}
 
diff --git a/src/condor_who/who.cpp b/src/condor_who/who.cpp
index a9abc29..1f2c1eb 100644
--- a/src/condor_who/who.cpp
+++ b/src/condor_who/who.cpp
@@ -1464,11 +1464,11 @@ main( int argc, char *argv[] )
 			QueryResult qr = query->fetchAds (result, addr, &errstack);
 			if (Q_OK != qr) {
 				fprintf( stderr, "Error: %s\n", getStrQueryResult(qr) );
-				fprintf( stderr, "%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "%s\n", errstack.getFullText(true).c_str() );
 				exit(1);
 			}
 			else if (App.diagnostic) {
-				printf("QueryResult is %d : %s\n", qr, errstack.getFullText(true));
+				printf("QueryResult is %d : %s\n", qr, errstack.getFullText(true).c_str());
 				printf("    %d records\n", result.Length());
 			}
 		}
-- 
1.7.4.1


From e8a5ec6c2ac630cdbcd529639b082ef6cf217567 Mon Sep 17 00:00:00 2001
From: Brian Bockelman <bbockelm@cse.unl.edu>
Date: Sat, 18 Aug 2012 14:44:13 -0500
Subject: [PATCH 2/2] Remove spurious newline from secman error message.

---
 src/condor_io/condor_secman.cpp |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/condor_io/condor_secman.cpp b/src/condor_io/condor_secman.cpp
index 5628d38..3532d6d 100644
--- a/src/condor_io/condor_secman.cpp
+++ b/src/condor_io/condor_secman.cpp
@@ -2209,7 +2209,7 @@ SecManStartCommand::TCPAuthCallback_inner( bool auth_succeeded, Sock *tcp_auth_s
 				  "SECMAN: unable to create security session to %s via TCP, "
 		          "failing.\n", m_sock->get_sinful_peer() );
 		m_errstack->pushf("SECMAN", SECMAN_ERR_NO_SESSION,
-		                 "Failed to create security session to %s with TCP.\n",
+		                 "Failed to create security session to %s with TCP.",
 		                 m_sock->get_sinful_peer());
 		rc = StartCommandFailed;
 	}
-- 
1.7.4.1

