diff --git a/src/condor_dagman/condor_submit_dag.cpp b/src/condor_dagman/condor_submit_dag.cpp
index d086bfd..72a6e77 100644
--- a/src/condor_dagman/condor_submit_dag.cpp
+++ b/src/condor_dagman/condor_submit_dag.cpp
@@ -33,6 +33,7 @@
 #include "condor_version.h"
 #include "tmp_dir.h"
 #include "my_popen.h"
+#include "condor_attributes.h"
 
 
 #ifdef WIN32
@@ -648,6 +649,7 @@ void writeSubmitFile(/* const */ SubmitDagDeepOptions &deepOpts,
 #if !defined ( WIN32 )
     fprintf(pSubFile, "remove_kill_sig\t= SIGUSR1\n" );
 #endif
+    fprintf(pSubFile, "+%s\t= True\n", ATTR_REMOVE_DAG_CHILDREN );
 
 		// ensure DAGMan is automatically requeued by the schedd if it
 		// exits abnormally or is killed (e.g., during a reboot)
diff --git a/src/condor_dagman/dag.cpp b/src/condor_dagman/dag.cpp
index bf82ad3..cf13a52 100644
--- a/src/condor_dagman/dag.cpp
+++ b/src/condor_dagman/dag.cpp
@@ -1692,6 +1692,10 @@ Dag::PrintReadyQ( debug_level_t level ) const {
 }
 
 //---------------------------------------------------------------------------
+// Note: the Condor part of this method essentially duplicates functionality
+// that is now in schedd.cpp.  We are keeping this here for now in case
+// someone needs to run a 7.5.6 DAGMan with an older schedd.
+// wenger 2011-01-26
 void Dag::RemoveRunningJobs ( const Dagman &dm) const {
 
 	debug_printf( DEBUG_NORMAL, "Removing any/all submitted Condor/"
diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index 59ad63d..0445122 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -440,6 +440,7 @@ extern const char * const  ATTR_REMOTE_USER_PRIO;
 extern const char * const  ATTR_REMOTE_USER_RESOURCES_IN_USE;
 // Deprecated (cruft) -- use: ATTR_REMOTE_SLOT_ID 
 extern const char * const  ATTR_REMOTE_VIRTUAL_MACHINE_ID;
+extern const char * const  ATTR_REMOVE_DAG_CHILDREN;
 extern const char * const  ATTR_REMOVE_KILL_SIG;
 extern const char * const  ATTR_REMOVE_REASON;
 extern const char * const  ATTR_REQUEUE_REASON;
diff --git a/src/condor_schedd.V6/schedd.cpp b/src/condor_schedd.V6/schedd.cpp
index 03fa6f6..9dab21a 100644
--- a/src/condor_schedd.V6/schedd.cpp
+++ b/src/condor_schedd.V6/schedd.cpp
@@ -4302,27 +4302,36 @@ Scheduler::actOnJobMyselfHandler( ServiceData* data )
 	case JA_VACATE_JOBS:
 	case JA_VACATE_FAST_JOBS: {
 		abort_job_myself( job_id, action, true, notify );		
-#ifdef WIN32
-			/*	This is a small patch so when DAGMan jobs are removed
-				on Win32, jobs submitted by the DAGMan are removed as well.
-				This patch is small and acceptable for the 6.8 stable series,
-				but for v6.9 and beyond we should remove this patch and have things
-				work on Win32 the same way they work on Unix.  However, doing this
-				was deemed to much code churning for a stable series, thus this
-				simpler but temporary patch.  -Todd 8/2006.
-			*/
-		int job_universe = CONDOR_UNIVERSE_MIN;
-		GetAttributeInt(job_id.cluster, job_id.proc, 
-						ATTR_JOB_UNIVERSE, &job_universe);
-		if ( job_universe == CONDOR_UNIVERSE_SCHEDULER ) {
-			MyString constraint;
-			constraint.sprintf( "%s == %d", ATTR_DAGMAN_JOB_ID,
-								job_id.cluster );
-			abortJobsByConstraint(constraint.Value(),
-				"removed because controlling DAGMan was removed",
-				true);
+
+			//
+			// Changes here to fix gittrac #741 and #1490:
+			// 1) Child job removing code below is enabled for all
+			//    platforms.
+			// 2) Child job removing code below is only executed when
+			//    *removing* a job.
+			// 3) Child job removing code is only executed when removing
+			//    a job with RemoveDagChildren set to true in its
+			//    classad.
+			// The main reason for doing this is that, if we don't, when
+			// a DAGMan job is held and then removed, its child jobs
+			// are left running.
+			//
+		if ( action == JA_REMOVE_JOBS ) {
+			int removeDagChildren = false;
+			int success = GetAttributeBool(job_id.cluster, job_id.proc,
+						ATTR_REMOVE_DAG_CHILDREN, &removeDagChildren);
+			if ( success == 0 && removeDagChildren ) {
+				dprintf( D_ALWAYS,
+							"Removing child jobs of DAGMan (%d.%d)\n",
+							job_id.cluster, job_id.proc );
+				MyString constraint;
+				constraint.sprintf( "%s == %d", ATTR_DAGMAN_JOB_ID,
+									job_id.cluster );
+				abortJobsByConstraint(constraint.Value(),
+					"removed because controlling DAGMan was removed",
+					true);
+			}
 		}
-#endif
 		break;
     }
 	case JA_RELEASE_JOBS: {
diff --git a/src/condor_utils/condor_attributes.cpp b/src/condor_utils/condor_attributes.cpp
index c89cda1..02de288 100644
--- a/src/condor_utils/condor_attributes.cpp
+++ b/src/condor_utils/condor_attributes.cpp
@@ -500,6 +500,7 @@ const char * const ATTR_REMOTE_USER_PRIO         = "RemoteUserPrio";
 const char * const ATTR_REMOTE_USER_RESOURCES_IN_USE = "RemoteUserResourcesInUse";
 // Deprecated (cruft) -- use: ATTR_REMOTE_SLOT_ID 
 const char * const ATTR_REMOTE_VIRTUAL_MACHINE_ID = "RemoteVirtualMachineID";
+const char * const ATTR_REMOVE_DAG_CHILDREN      = "RemoveDagChildren";
 const char * const ATTR_REMOVE_KILL_SIG          = "RemoveKillSig";
 const char * const ATTR_REMOVE_REASON            = "RemoveReason";
 const char * const ATTR_REQUEUE_REASON           = "RequeueReason";
