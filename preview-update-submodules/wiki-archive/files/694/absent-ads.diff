diff --git a/src/condor_collector.V6/collector.cpp b/src/condor_collector.V6/collector.cpp
index ab34b29..2a2a229 100644
--- a/src/condor_collector.V6/collector.cpp
+++ b/src/condor_collector.V6/collector.cpp
@@ -1012,8 +1012,18 @@ void CollectorDaemon::process_query_public (AdTypes whichAds,
 	dprintf (D_ALWAYS, "(Sending %d ads in response to query)\n", __numAds__);
 }	
 
+int CollectorDaemon::expiration_scanFunc (ClassAd *cad)
+{
+    return setAttrLastHeardFrom( cad, 1 );
+}
+
 int CollectorDaemon::invalidation_scanFunc (ClassAd *cad)
 {
+    return setAttrLastHeardFrom( cad, 0 );
+}
+
+int CollectorDaemon::setAttrLastHeardFrom (ClassAd* cad, unsigned long time)
+{
 	if ( !__adType__.empty() ) {
 		std::string type = "";
 		cad->LookupString( ATTR_MY_TYPE, type );
@@ -1027,7 +1037,7 @@ int CollectorDaemon::invalidation_scanFunc (ClassAd *cad)
 	if ( EvalExprTree( __filter__, cad, NULL, result ) &&
 		 result.IsBooleanValueEquiv(val) && val ) {
 
-		cad->Assign( ATTR_LAST_HEARD_FROM, 0 );
+		cad->Assign( ATTR_LAST_HEARD_FROM, time );
         __numAds__++;
     }
 
@@ -1045,7 +1055,14 @@ void CollectorDaemon::process_invalidation (AdTypes whichAds, ClassAd &query, St
 	sock->timeout(QueryTimeout);
 
 	bool query_contains_hash_key = false;
+
+    bool expireInvalidatedAds = param_boolean( "EXPIRE_INVALIDATED_ADS", false );
+    if( expireInvalidatedAds ) {
+        __numAds__ = collector.expire( whichAds, query, &query_contains_hash_key );
+    } else {        
 	__numAds__ = collector.remove( whichAds, query, &query_contains_hash_key );
+    }
+
     if ( !query_contains_hash_key )
 	{
 		dprintf ( D_ALWAYS, "Walking tables to invalidate... O(n)\n" );
@@ -1070,7 +1087,11 @@ void CollectorDaemon::process_invalidation (AdTypes whichAds, ClassAd &query, St
 			return;
 		}
 
-		if (param_boolean("HOUSEKEEPING_ON_INVALIDATE", true)) 
+        if (expireInvalidatedAds)
+        {
+            collector.walkHashTable (whichAds, expiration_scanFunc);
+            collector.invokeHousekeeper (whichAds);
+        } else if (param_boolean("HOUSEKEEPING_ON_INVALIDATE", true)) 
 		{
 			// first set all the "LastHeardFrom" attributes to low values ...
 			collector.walkHashTable (whichAds, invalidation_scanFunc);
diff --git a/src/condor_collector.V6/collector.h b/src/condor_collector.V6/collector.h
index 2c87aa5..3ff7514 100644
--- a/src/condor_collector.V6/collector.h
+++ b/src/condor_collector.V6/collector.h
@@ -109,6 +109,7 @@ public:
 
 	static int query_scanFunc(ClassAd*);
 	static int invalidation_scanFunc(ClassAd*);
+	static int expiration_scanFunc(ClassAd*);
 
 	static int reportStartdScanFunc(ClassAd*);
 	static int reportSubmittorScanFunc(ClassAd*);
@@ -181,6 +182,7 @@ protected:
 
 private:
 
+	static int setAttrLastHeardFrom( ClassAd* cad, unsigned long time );
 
 };
 
diff --git a/src/condor_collector.V6/collector_engine.cpp b/src/condor_collector.V6/collector_engine.cpp
index d2108a8..128773a 100644
--- a/src/condor_collector.V6/collector_engine.cpp
+++ b/src/condor_collector.V6/collector_engine.cpp
@@ -927,6 +927,44 @@ int CollectorEngine::remove (AdTypes t_AddType, const ClassAd & c_query, bool *q
 	return ( iRet );
 }
 
+int CollectorEngine::expire( AdTypes adType, const ClassAd & query, bool * queryContainsHashKey ) {
+    int rVal = 0;
+    if( queryContainsHashKey ) { * queryContainsHashKey = false; }
+
+    HashFunc hFunc;
+    CollectorHashTable * hTable;
+    if( LookupByAdType( adType, hTable, hFunc ) ) {
+        AdNameHashKey hKey;
+        if( (* hFunc)( hKey, const_cast< ClassAd * >( & query ) ) ) {
+            if( queryContainsHashKey ) { * queryContainsHashKey = true; }
+
+            ClassAd * cAd = NULL;
+            if( hTable->lookup( hKey, cAd ) != -1 ) {
+                cAd->Assign( ATTR_LAST_HEARD_FROM, 1 );
+                
+                if( CollectorDaemon::offline_plugin_.expire( * cAd ) == true ) {
+                    return rVal;
+                }
+                
+                rVal = hTable->remove( hKey );
+                if( rVal == -1 ) {
+                    dprintf( D_ALWAYS, "\t\t Error removing ad\n" );
+                    return 0;
+                }
+                rVal = (! rVal);
+                
+                MyString hkString;
+                hKey.sprint( hkString );                
+                dprintf( D_ALWAYS, "\t\t**** Removed(%d) stale ad(s): \"%s\"\n", rVal, hkString.Value() );
+
+                delete cAd;
+            }
+        }
+    }
+
+	return rVal;
+}
+
 int CollectorEngine::
 remove (AdTypes adType, AdNameHashKey &hk)
 {
diff --git a/src/condor_collector.V6/collector_engine.h b/src/condor_collector.V6/collector_engine.h
index 5a91733..b85da5a 100644
--- a/src/condor_collector.V6/collector_engine.h
+++ b/src/condor_collector.V6/collector_engine.h
@@ -60,6 +60,12 @@ class CollectorEngine : public Service
 	*/
 	int remove (AdTypes t_AddType, const ClassAd & c_query, bool *hash_key_specified);
 
+    /**
+     * expire() - as remove(), above, except that it expires the ad.
+     *
+     */
+	int expire (AdTypes t_AddType, const ClassAd & c_query, bool *hash_key_specified);
+
 	// remove classad in the specified table with the given hashkey
 	int remove (AdTypes, AdNameHashKey &);
 
