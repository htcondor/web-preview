#! /usr/bin/perl -w

# In 2008 our download system was overhauled.  The key change was to have
# downloads be directly handled by the web server to reduce problems for end
# users.  As part of this a new system was put in front of the downloads.  This
# system created the risk that a person might erroneously be listed as
# downloading the same file repeatedly, when in fact they hadn't.  This was
# judged to an acceptable at the time.  After a few months of suspicious data,
# this was judged to no longer be acceptable and the system was overhauled
# again to address this.
#
# Now we've got duplicate download records.  This is causes bad graphs of
# downloads.  This script's job is to detect the duplicates and emit a
# "scrubbed" version of the sendfile-v logs with the duplicates eliminated.  It
# is not possible to exactly detect them, it's done by guessing.
#
# Pass the sendmail in as stdin, or as a command line argument.  Output is to
# stdout.

use strict;

# if we get multiple download attempts from the same person in the
# this window (in seconds), ignore all but one.
my $WINDOW = 60*60*24;

my %last_seen;
my $total = 0;
my $bad = 0;
my $old = 0;
my $newgood = 0;
while(<>) {
	# time - time of log message
	# state - START or END
	# file - filename downloaded
	# bytes - size of file  (bytes transmitted in old system?)
	# ip_host - ip address (hostname)
	# person - Name of person downloading
	# email - Email of person
	# group - group/organization of person
	# website - of person
	# id - kinda unique identifier for the START/END pair.  Only unique over
	#      short time spans.  (It's basically the PID)
	# source - Where from (Italy (INFN), New York (RIT), etc)
	$total++;
	my($time, $state, $file, $bytes, $ip_host, $person, $email, $group, $website, $id, $source) = split(/\t/);
	if($id !~ /_/) {
		# Old style doesn't have an underscore and didn't have the problem,
		# so just emit it.
		$old++;
		print;
		next;
	};

	my $download_id = "$file\t$email";

	if(exists $last_seen{$download_id}) {
		my($last_time, $last_id) = @{$last_seen{$download_id}};
		if( ($last_id ne $id) and (($last_time+$WINDOW) >= $time) ) {
			# appears to be an unwelcome duplicate.
			$bad++;
			next;
		}
	}
	$newgood++;
	print;

	$last_seen{$download_id} = [$time, $id];
}
print STDERR "$total records. Kept: $newgood new, $old old. Rejected: $bad\n";
