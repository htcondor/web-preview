diff --git a/src/condor_daemon_core.V6/condor_daemon_core.h b/src/condor_daemon_core.V6/condor_daemon_core.h
index 9e91243..5d106d0 100644
--- a/src/condor_daemon_core.V6/condor_daemon_core.h
+++ b/src/condor_daemon_core.V6/condor_daemon_core.h
@@ -45,6 +45,7 @@
 #include "extArray.h"
 #include "Queue.h"
 #include "MapFile.h"
+#include <string>
 #ifdef WIN32
 #include "ntsysinfo.h"
 #endif
@@ -1020,6 +1021,8 @@ class DaemonCore : public Service
                mask if a given bit is set ("HAS_DCJOBOPT_...")
 		@param fd_inherit_list An array of fds which you want the child to
 		       inherit. The last element must be 0.
+        @param err_return_msg Returned with error message pertaining to
+               failure inside the method.  Ignored if NULL (default).
         @return On success, returns the child pid.  On failure, returns FALSE.
     */
     int Create_Process (
@@ -1038,7 +1041,8 @@ class DaemonCore : public Service
         sigset_t      *sigmask             = NULL,
         int           job_opt_mask         = 0,
         size_t        *core_hard_limit     = NULL,
-		int			  *affinity_mask	   = NULL
+		int			  *affinity_mask	   = NULL,
+        std::string*  err_return_msg       = NULL
         );
 
     //@}
diff --git a/src/condor_daemon_core.V6/daemon_core.cpp b/src/condor_daemon_core.V6/daemon_core.cpp
index b6de9c0..cd16c02 100644
--- a/src/condor_daemon_core.V6/daemon_core.cpp
+++ b/src/condor_daemon_core.V6/daemon_core.cpp
@@ -6713,7 +6713,8 @@ int DaemonCore::Create_Process(
 			sigset_t      *sigmask,
 			int           job_opt_mask,
 			size_t        *core_hard_limit,
-			int			  *affinity_mask
+			int			  *affinity_mask,
+            std::string*  err_return_msg
             )
 {
 	int i, j;
@@ -7502,8 +7503,13 @@ int DaemonCore::Create_Process(
 	if( cwd && (cwd[0] != '\0') ) {
 		if( stat(cwd, &stat_struct) == -1 ) {
 			return_errno = errno;
+            if (NULL != err_return_msg) {
+                char errbuf[512];
+                sprintf(errbuf, "Cannot access specified iwd \"%s\"", cwd);
+                *err_return_msg = errbuf;
+            }
 			dprintf( D_ALWAYS, "Create_Process: "
-					 "Cannot access specified cwd \"%s\": "
+					 "Cannot access specified iwd \"%s\": "
 					 "errno = %d (%s)\n", cwd, errno, strerror(errno) );
 			if ( priv != PRIV_UNKNOWN ) {
 				set_priv( current_priv );
diff --git a/src/condor_starter.V6.1/os_proc.cpp b/src/condor_starter.V6.1/os_proc.cpp
index a08f90b..7884402 100644
--- a/src/condor_starter.V6.1/os_proc.cpp
+++ b/src/condor_starter.V6.1/os_proc.cpp
@@ -437,6 +437,10 @@ OsProc::StartJob(FamilyInfo* family_info)
 
 	set_priv ( priv );
 
+    // use this to return more detailed and reliable error message info
+    // from create-process operation.
+    std::string create_process_err_msg;
+
 	if (privsep_helper != NULL) {
 		const char* std_file_names[3] = {
 			privsep_stdin_name.Value(),
@@ -471,14 +475,22 @@ OsProc::StartJob(FamilyInfo* family_info)
 		                                     NULL,
 		                                     job_opt_mask, 
 		                                     core_size_ptr,
-											 affinity_mask );
+                                             affinity_mask,
+                                             &create_process_err_msg);
 	}
 
-	//NOTE: Create_Process() saves the errno for us if it is an
-	//"interesting" error.
-	char const *create_process_error = NULL;
+	// Create_Process() saves the errno for us if it is an "interesting" error.
 	int create_process_errno = errno;
-	if(JobPid == FALSE && errno) create_process_error = strerror(errno);
+	char const *create_process_error = NULL;
+
+    // errno is 0 in the privsep case.  This executes for the daemon core create-process logic
+    if ((FALSE == JobPid) && (0 != create_process_errno)) {
+        if (create_process_err_msg != "") create_process_err_msg += " ";
+        char errbuf[512];
+        sprintf(errbuf, "(errno=%d: '%s')", create_process_errno, strerror(create_process_errno));
+        create_process_err_msg += errbuf;
+        create_process_error = create_process_err_msg.c_str();       
+    }
 
 	// now close the descriptors in fds array.  our child has inherited
 	// them already, so we should close them so we do not leak descriptors.
