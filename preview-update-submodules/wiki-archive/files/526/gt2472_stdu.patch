diff --git a/src/condor_utils/param_info.cpp b/src/condor_utils/param_info.cpp
index 68d54f8..15cdb98 100644
--- a/src/condor_utils/param_info.cpp
+++ b/src/condor_utils/param_info.cpp
@@ -85,10 +85,10 @@ param_default_string(const char* param)
 	return ret;
 }
 
-param_info_t::int_t
+long long
 param_default_integer(const char* param, int* valid) {
 	const param_info_t* p;
-    param_info_t::int_t ret = 0;
+    long long ret = 0;
 
 	param_info_init();
 
@@ -133,7 +133,7 @@ param_default_double(const char* param, int* valid) {
 }
 
 int
-param_range_integer(const char* param, param_info_t::int_t* min, param_info_t::int_t* max) {
+param_range_integer(const char* param, long long* min, long long* max) {
 
 	const param_info_t* p;
 
diff --git a/src/condor_utils/param_info.h b/src/condor_utils/param_info.h
index f180149..82a55bd 100644
--- a/src/condor_utils/param_info.h
+++ b/src/condor_utils/param_info.h
@@ -22,7 +22,6 @@
 #define __PARAM_INFO_H__
 
 #include "condor_common.h"
-#include "condor_classad.h"
 
 typedef enum param_info_t_type_e {
 	PARAM_TYPE_STRING = 0,
@@ -35,7 +34,6 @@ typedef enum param_info_t_type_e {
 // will be followed by an int or double when default_valid is true,
 // ranged params will have min and max values following that if range_valid is true.
 typedef struct param_info_t_s {
-    typedef ClassAd::IntType int_t;
 
 	char const *  name;
     //char const *  aliases;
@@ -72,14 +70,14 @@ struct param_info_str_ranged_t_s {
 
 struct param_info_int_t_s {
     param_info_t hdr;
-    param_info_t::int_t int_val;
+    long long int_val;
 };
 
 struct param_info_int_ranged_t_s {
     param_info_t hdr;
-    param_info_t::int_t int_val;
-    param_info_t::int_t int_min;
-    param_info_t::int_t int_max;
+    long long int_val;
+    long long int_min;
+    long long int_max;
 };
 
 struct param_info_dbl_t_s {
@@ -106,7 +104,7 @@ BEGIN_C_DECLS
 
 	void param_info_init(void);
 
-	ClassAd::IntType param_default_integer(const char* param, int* valid);
+	long long param_default_integer(const char* param, int* valid);
 	int param_default_boolean(const char* param, int* valid);
 	double param_default_double(const char* param, int* valid);
 	//returns pointer to internal object (or null), do not free
@@ -115,7 +113,7 @@ BEGIN_C_DECLS
 	// Returns -1 if param is not of the specified type.
 	// Otherwise, returns 0 and sets min and max to the minimum and maximum
 	// possible values.
-	int param_range_integer(const char* param, ClassAd::IntType* min, ClassAd::IntType* max);
+	int param_range_integer(const char* param, long long* min, long long* max);
 	int param_range_double(const char* param, double* min, double* max);
 	
 	// Iterate the list of parameter information.
