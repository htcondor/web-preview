diff --git a/src/condor_startd.V6/ResAttributes.cpp b/src/condor_startd.V6/ResAttributes.cpp
index 2543357..3ea87da 100644
--- a/src/condor_startd.V6/ResAttributes.cpp
+++ b/src/condor_startd.V6/ResAttributes.cpp
@@ -21,13 +21,14 @@
 #include "condor_common.h"
 #include "startd.h"
 #include <math.h>
+#include "filesystem_remap.h"
 
 #ifdef WIN32
 #include "winreg.windows.h"
 #endif
 
 MachAttributes::MachAttributes()
-   : m_user_specified(NULL, ";"), m_user_settings_init(false)
+   : m_user_specified(NULL, ";"), m_user_settings_init(false), m_named_chroot()
 {
 	m_mips = -1;
 	m_kflops = -1;
@@ -46,7 +47,6 @@ MachAttributes::MachAttributes()
 	m_filesystem_domain = NULL;
 	m_idle_interval = -1;
 	m_ckptpltfrm = NULL;
-	m_named_chroot = NULL;
 
 	m_clock_day = -1;
 	m_clock_min = -1;
@@ -127,7 +127,6 @@ MachAttributes::~MachAttributes()
 	if( m_uid_domain ) free( m_uid_domain );
 	if( m_filesystem_domain ) free( m_filesystem_domain );
 	if( m_ckptpltfrm ) free( m_ckptpltfrm );
-	if( m_named_chroot ) free( m_named_chroot );
 
 	if( m_utsname_sysname ) free( m_utsname_sysname );
 	if( m_utsname_nodename ) free( m_utsname_nodename );
@@ -405,32 +404,21 @@ MachAttributes::compute( amask_t how_much )
 		}
 		m_ckptpltfrm = strdup(sysapi_ckptpltfrm());
 
-		const char * allowed_root_dirs = param("NAMED_CHROOT");
-		if (allowed_root_dirs) {
-			MyString result;
-			bool prev = false;
-			StringList chroot_list(allowed_root_dirs);
-			chroot_list.rewind();
-			const char * next_chroot;
-			std::string requested_chroot;
-			while ( (next_chroot=chroot_list.next()) ) {
-				MyString chroot_spec(next_chroot);
-				chroot_spec.Tokenize();
-				const char * chroot_name = chroot_spec.GetNextToken("=", false);
-				if (chroot_name == NULL) {
-					dprintf(D_ALWAYS, "Invalid named chroot: %s\n", chroot_spec.Value());
-				}
-				if (prev) {
-					result += ", ";
-				}
-				prev = true;
-				result += chroot_name;
-			}
-			if (prev) {
-				dprintf(D_FULLDEBUG, "Named chroots: %s\n", result.Value() );
-				if (m_named_chroot) free(m_named_chroot);
-				m_named_chroot = strdup( result.Value() );
+		pair_strings_vector root_dirs = root_dir_list();
+		std::stringstream result;
+		unsigned int chroot_count = 0;
+		for (pair_strings_vector::const_iterator it=root_dirs.begin();
+				it != root_dirs.end(); 
+				++it, ++chroot_count) {
+			if (chroot_count) {
+				result << ", ";
 			}
+			result << it->first;
+		}
+		if (chroot_count > 1) {
+			std::string result_str = result.str();
+			dprintf(D_FULLDEBUG, "Named chroots: %s\n", result_str.c_str() );
+			m_named_chroot = result_str;
 		}
 
     }
@@ -707,8 +695,8 @@ MachAttributes::publish( ClassAd* cp, amask_t how_much)
 	cp->Assign( ATTR_UTSNAME_MACHINE, m_utsname_machine );
 
 	// Advertise chroot information
-	if ( m_named_chroot ) {
-		cp->Assign( "NamedChroot", m_named_chroot );
+	if ( m_named_chroot.size() > 0 ) {
+		cp->Assign( "NamedChroot", m_named_chroot.c_str() );
 	}
 }
 
diff --git a/src/condor_startd.V6/ResAttributes.h b/src/condor_startd.V6/ResAttributes.h
index 23cc076..1750f65 100644
--- a/src/condor_startd.V6/ResAttributes.h
+++ b/src/condor_startd.V6/ResAttributes.h
@@ -268,7 +268,7 @@ private:
 	StringList      m_user_specified;
 	int             m_user_settings_init;  // set to true when init_user_settings has been called at least once.
 
-	char *			m_named_chroot;
+	std::string		m_named_chroot;
 #if defined ( WIN32 )
 	int				m_got_windows_version_info;
 	OSVERSIONINFOEX	m_window_version_info;
diff --git a/src/condor_startd.V6/util.cpp b/src/condor_startd.V6/util.cpp
index a8a4df7..83dbf38 100644
--- a/src/condor_startd.V6/util.cpp
+++ b/src/condor_startd.V6/util.cpp
@@ -24,6 +24,7 @@
 #include "dynuser.h"	// used in cleanup_execute_dir() for WinNT
 #include "daemon.h"
 #include "../condor_privsep/condor_privsep.h"
+#include "filesystem_remap.h"
 
 // helper method to determine whether the given execute directory
 // is root-squashed. this function assumes that the given directory
@@ -268,21 +269,27 @@ cleanup_execute_dirs( StringList &list )
 		// us to remove subdirectories of EXECUTE - so we need to
 		// list them and ask the Switchboard to delete each one
 		//
-		Directory execute_dir( exec_path, PRIV_ROOT );
 
-		execute_dir.Rewind();
-		while ( execute_dir.Next() ) {
-			check_recovery_file( execute_dir.GetFullPath() );
-		}
+		pair_strings_vector root_dirs = root_dir_list();
+		for (pair_strings_vector::const_iterator it=root_dirs.begin(); it != root_dirs.end(); ++it) {
+			const char * exec_path_full = dirscat(it->second.c_str(), exec_path);
+			Directory execute_dir( exec_path_full, PRIV_ROOT );
 
-		if (privsep_enabled()) {
 			execute_dir.Rewind();
-			while (execute_dir.Next()) {
-				privsep_remove_dir(execute_dir.GetFullPath());
+			while ( execute_dir.Next() ) {
+				check_recovery_file( execute_dir.GetFullPath() );
 			}
-		}
-		else {
-			execute_dir.Remove_Entire_Directory();
+
+			if (privsep_enabled()) {
+				execute_dir.Rewind();
+				while (execute_dir.Next()) {
+					privsep_remove_dir(execute_dir.GetFullPath());
+				}
+			}
+			else {
+				execute_dir.Remove_Entire_Directory();
+			}
+			delete [] exec_path_full;
 		}
 #endif
 	}
@@ -353,13 +360,19 @@ cleanup_execute_dir(int pid, char const *exec_path)
 	}
 
 	// Instantiate a directory object pointing at the execute directory
-	Directory execute_dir( exec_path, PRIV_ROOT );
+	pair_strings_vector root_dirs = root_dir_list();
+	for (pair_strings_vector::const_iterator it=root_dirs.begin(); it != root_dirs.end(); ++it) {
+		const char * exec_path_full = dirscat(it->second.c_str(), exec_path);
 
-		// Look for it
-	if ( execute_dir.Find_Named_Entry( pid_dir.Value() ) ) {
+		Directory execute_dir( exec_path_full, PRIV_ROOT );
 
-			// Remove the execute directory
-		execute_dir.Remove_Current_File();
+			// Look for it
+		if ( execute_dir.Find_Named_Entry( pid_dir.Value() ) ) {
+
+				// Remove the execute directory
+			execute_dir.Remove_Current_File();
+		}
+		delete [] exec_path_full;
 	}
 #endif  /* UNIX */
 }
diff --git a/src/condor_starter.V6.1/baseStarter.cpp b/src/condor_starter.V6.1/baseStarter.cpp
index 36840a2..27cc2a4 100644
--- a/src/condor_starter.V6.1/baseStarter.cpp
+++ b/src/condor_starter.V6.1/baseStarter.cpp
@@ -2816,21 +2816,33 @@ CStarter::removeTempExecuteDir( void )
 	}
 #endif
 
-	Directory execute_dir( Execute, PRIV_ROOT );
-	if ( execute_dir.Find_Named_Entry( dir_name.Value() ) ) {
-
-		// since we chdir()'d to the execute directory, we can't
-		// delete it until we get out (at least on WIN32). So lets
-		// just chdir() to EXECUTE so we're sure we can remove it. 
-		if (chdir(Execute)) {
-			dprintf(D_ALWAYS, "Error: chdir(%s) failed: %s\n", Execute, strerror(errno));
+		// Remove the directory from all possible chroots.
+	pair_strings_vector root_dirs = root_dir_list();
+	bool has_failed = false;
+	for (pair_strings_vector::const_iterator it=root_dirs.begin(); it != root_dirs.end(); ++it) {
+		const char *full_execute_dir = dirscat(it->second.c_str(), Execute);
+		if (!full_execute_dir) {
+			continue;
 		}
+		Directory execute_dir( full_execute_dir, PRIV_ROOT );
+		if ( execute_dir.Find_Named_Entry( dir_name.Value() ) ) {
+
+			// since we chdir()'d to the execute directory, we can't
+			// delete it until we get out (at least on WIN32). So lets
+			// just chdir() to EXECUTE so we're sure we can remove it. 
+			if (chdir(Execute)) {
+				dprintf(D_ALWAYS, "Error: chdir(%s) failed: %s\n", Execute, strerror(errno));
+			}
 
-		dprintf( D_FULLDEBUG, "Removing %s%c%s\n", Execute,
-				 DIR_DELIM_CHAR, dir_name.Value() );
-		return execute_dir.Remove_Current_File();
+			dprintf( D_FULLDEBUG, "Removing %s%c%s\n", Execute,
+					 DIR_DELIM_CHAR, dir_name.Value() );
+			if (!execute_dir.Remove_Current_File()) {
+				has_failed = true;
+			}
+		}
+		delete [] full_execute_dir;
 	}
-	return true;
+	return !has_failed;
 }
 
 #if !defined(WIN32)
diff --git a/src/condor_starter.V6.1/vanilla_proc.cpp b/src/condor_starter.V6.1/vanilla_proc.cpp
index 044cb10..41932fc 100644
--- a/src/condor_starter.V6.1/vanilla_proc.cpp
+++ b/src/condor_starter.V6.1/vanilla_proc.cpp
@@ -36,6 +36,7 @@
 #include "directory.h"
 #include "subsystem_info.h"
 #include "cgroup_limits.h"
+#include "condor_uid.h"
 
 #ifdef WIN32
 #include "executable_scripts.WINDOWS.h"
@@ -275,20 +275,30 @@
                }
                dprintf(D_FULLDEBUG, "Will attempt to set the chroot to %s.\n", requested_chroot.c_str());
 
-               std::string execute_dir(Starter->GetExecuteDir());
-               const char * full_dir = dirscat(requested_chroot, execute_dir);
-               std::string full_dir_str;
-               if (full_dir) {
-                       full_dir_str = full_dir;
-               } else {
-                       dprintf(D_ALWAYS, "Unable to concatenate %s and %s.\n", requested_chroot.c_str(), execute_dir.c_str());
-                       return FALSE;
-               }
-               delete [] full_dir;
+               std::stringstream ss;
+               std::stringstream ss2;
+               ss2 << Starter->GetExecuteDir() << DIR_DELIM_CHAR << "dir_" << getpid();
+               std::string execute_dir = ss2.str();
+               ss << requested_chroot << DIR_DELIM_CHAR << ss2.str();
+               std::string full_dir_str = ss.str();
                if (IsDirectory(execute_dir.c_str())) {
-                       if (!mkdir_and_parents_if_needed( full_dir_str.c_str(), S_IRWXU, PRIV_USER )) {
-                               dprintf(D_ALWAYS, "Failed to create scratch directory %s\n", full_dir_str.c_str());
+                       {
+                           TemporaryPrivSentry sentry(PRIV_ROOT);
+                           if( mkdir(full_dir_str.c_str(), S_IRWXU) < 0 ) {
+                               dprintf( D_FAILURE|D_ALWAYS,
+                                   "Failed to create sandbox directory in chroot (%s): %s\n",
+                                   full_dir_str.c_str(),
+                                   strerror(errno) );
                                return FALSE;
+                           }
+                           if (chown(full_dir_str.c_str(),
+                                     get_user_uid(),
+                                     get_user_gid()) == -1)
+                           {
+                               EXCEPT("chown error on %s: %s",
+                                      full_dir_str.c_str(),
+                                      strerror(errno));
+                           }
                        }
                        if (!fs_remap) {
                                fs_remap = new FilesystemRemap();
diff --git a/src/condor_utils/filesystem_remap.cpp b/src/condor_utils/filesystem_remap.cpp
index e0f2e61..422f3d2 100644
--- a/src/condor_utils/filesystem_remap.cpp
+++ b/src/condor_utils/filesystem_remap.cpp
@@ -22,6 +22,8 @@
 #include "MyString.h"
 #include "condor_uid.h"
 #include "filesystem_remap.h"
+#include "condor_config.h"
+#include "directory.h"
 
 #if defined(LINUX)
 #include <sys/mount.h>
@@ -216,3 +218,35 @@ void FilesystemRemap::ParseMountinfo() {
 
 }
 
+pair_strings_vector
+root_dir_list()
+{
+	pair_strings_vector execute_dir_list;
+	execute_dir_list.push_back(pair_strings("root","/"));
+	const char * allowed_root_dirs = param("NAMED_CHROOT");
+	if (allowed_root_dirs) {
+		StringList chroot_list(allowed_root_dirs);
+		chroot_list.rewind();
+		const char * next_chroot;
+		while ( (next_chroot=chroot_list.next()) ) {
+			MyString chroot_spec(next_chroot);
+			chroot_spec.Tokenize();
+			const char * chroot_name = chroot_spec.GetNextToken("=", false);
+			if (chroot_name == NULL) {
+				dprintf(D_ALWAYS, "Invalid named chroot: %s\n", chroot_spec.Value());
+				continue;
+			}
+			const char * next_dir = chroot_spec.GetNextToken("=", false);
+			if (next_dir == NULL) {
+				dprintf(D_ALWAYS, "Invalid named chroot: %s\n", chroot_spec.Value());
+				continue;
+			}
+			if (IsDirectory(next_dir)) {
+				pair_strings p(chroot_name, next_dir);
+				execute_dir_list.push_back(p);
+			}
+		}
+	}
+	return execute_dir_list;
+}
+
diff --git a/src/condor_utils/filesystem_remap.h b/src/condor_utils/filesystem_remap.h
index 5e9362d..0085928 100644
--- a/src/condor_utils/filesystem_remap.h
+++ b/src/condor_utils/filesystem_remap.h
@@ -22,8 +22,11 @@
 
 #include <string>
 #include <list>
+#include <vector>
 #include <utility>
 
+
+
 /**
  * Represents a set of mappings to perform on the filesystem.
  *
@@ -35,6 +38,7 @@
  */
 typedef std::pair<std::string, std::string> pair_strings;
 typedef std::pair<std::string, bool> pair_str_bool;
+typedef std::vector<pair_strings> pair_strings_vector;
 
 class FilesystemRemap {
 
@@ -91,4 +95,10 @@ private:
 	std::list<pair_str_bool> m_mounts_shared;
 
 };
+
+/**
+ * Get a list of the named chroots
+ */
+pair_strings_vector root_dir_list();
+
 #endif
