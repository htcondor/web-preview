diff --git a/src/condor_dagman/dag.cpp b/src/condor_dagman/dag.cpp
index e56720b..526168b 100644
--- a/src/condor_dagman/dag.cpp
+++ b/src/condor_dagman/dag.cpp
@@ -73,6 +73,7 @@ static const int NODE_HASH_SIZE = 10007; // prime, allow for big DAG...
 Dag::Dag( /* const */ StringList &dagFiles,
 		  const int maxJobsSubmitted,
 		  const int maxPreScripts, const int maxPostScripts,
+		  const int maxOpenedLogFiles,
 		  bool allowLogError,
 		  bool useDagDir, int maxIdleJobProcs, bool retrySubmitFirst,
 		  bool retryNodeFirst, const char *condorRmExe,
@@ -83,10 +84,12 @@ Dag::Dag( /* const */ StringList &dagFiles,
 		  const MyString &spliceScope ) :
     _maxPreScripts        (maxPreScripts),
     _maxPostScripts       (maxPostScripts),
+    _maxOpenedLogFiles	  (maxOpenedLogFiles),
 	MAX_SIGNAL			  (64),
 	_splices              (200, hashFuncMyString, rejectDuplicateKeys),
 	_dagFiles             (dagFiles),
 	_useDagDir            (useDagDir),
+	_condorLogRdr		  (maxOpenedLogFiles),
 	_nodeNameHash		  (NODE_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
 	_nodeIDHash			  (NODE_HASH_SIZE, hashFuncInt, rejectDuplicateKeys),
 	_condorIDHash		  (NODE_HASH_SIZE, hashFuncInt, rejectDuplicateKeys),
diff --git a/src/condor_dagman/dag.h b/src/condor_dagman/dag.h
index 52e913f..cbcc357 100644
--- a/src/condor_dagman/dag.h
+++ b/src/condor_dagman/dag.h
@@ -131,7 +131,7 @@ class Dag {
     Dag( /* const */ StringList &dagFiles,
 		 const int maxJobsSubmitted,
 		 const int maxPreScripts, const int maxPostScripts, 
-		 bool allowLogError,
+		 const int maxOpenedLogFiles, bool allowLogError,
 		 bool useDagDir, int maxIdleJobProcs, bool retrySubmitFirst,
 		 bool retryNodeFirst, const char *condorRmExe,
 		 const char *storkRmExe, const CondorID *DAGManJobId,
@@ -469,6 +469,7 @@ class Dag {
 	// max number of PRE & POST scripts to run at once (0 means no limit)
     const int _maxPreScripts;
     const int _maxPostScripts;
+    const int _maxOpenedLogFiles;
 
 	void SetDotFileName(const char *dot_file_name);
 	void SetDotIncludeFileName(const char *include_file_name);
@@ -560,6 +561,7 @@ class Dag {
 	int MaxIdleJobProcs(void) { return _maxIdleJobProcs; }
 	int MaxPreScripts(void) { return _maxPreScripts; }
 	int MaxPostScripts(void) { return _maxPostScripts; }
+	int MaxOpenedLogFiles(void) { return _maxOpenedLogFiles; }
 
 	bool RetrySubmitFirst(void) { return m_retrySubmitFirst; }
 
diff --git a/src/condor_dagman/dagman_main.cpp b/src/condor_dagman/dagman_main.cpp
index 4ac7be4..3294f40 100644
--- a/src/condor_dagman/dagman_main.cpp
+++ b/src/condor_dagman/dagman_main.cpp
@@ -67,6 +67,7 @@ static void Usage() {
             "\t\t[-MaxJobs <int N>]\n"
             "\t\t[-MaxPre <int N>]\n"
             "\t\t[-MaxPost <int N>]\n"
+            "\t\t[-MaxOpenedLogs <int N>]\n"
             "\t\t[-WaitForDebug]\n"
             "\t\t[-NoEventChecks]\n"
             "\t\t[-AllowLogError]\n"
@@ -96,6 +97,7 @@ Dagman::Dagman() :
 	maxJobs (0),
 	maxPreScripts (0),
 	maxPostScripts (0),
+	maxOpenedLogFiles (0),
 	rescueFileToWrite (NULL),
 	paused (false),
 	condorSubmitExe (NULL),
@@ -207,6 +209,10 @@ Dagman::Config()
 		param_integer( "DAGMAN_USER_LOG_SCAN_INTERVAL", 5, 1, INT_MAX);
 	debug_printf( DEBUG_NORMAL, "DAGMAN_USER_LOG_SCAN_INTERVAL setting: %d\n",
 				m_user_log_scan_interval );
+	maxOpenedLogFiles =
+		param_integer( "DAGMAN_MAX_OPENED_LOG_FILES", 0, 0, INT_MAX);
+	debug_printf( DEBUG_NORMAL, "DAGMAN_MAX_OPENED_LOG_FILES setting: %d\n",
+				maxOpenedLogFiles );
 
 
 		// Event checking setup...
@@ -469,6 +475,12 @@ void main_init (int argc, char ** const argv) {
 
 	printf ("Executing condor dagman ... \n");
 
+#ifdef WIN32
+	int max_fds = FD_SETSIZE;
+#else
+	int max_fds = getdtablesize();
+#endif
+
 		// flag used if DAGMan is invoked with -WaitForDebug so we
 		// wait for a developer to attach with a debugger...
 	volatile int wait_for_debug = 0;
@@ -529,6 +541,8 @@ void main_init (int argc, char ** const argv) {
 				MIN_SUBMIT_FILE_VERSION.subMinorVer );
 	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+	// TODO: shall there be some warning if the fd limit in OS is set too low?
+
     //
     // Process command-line arguments
     //
@@ -599,6 +613,14 @@ void main_init (int argc, char ** const argv) {
                 Usage();
             }
             dagman.maxPostScripts = atoi( argv[i] );
+        } else if( !strcasecmp( "-MaxOpenedLogs", argv[i] ) ) {
+            i++;
+            if( argc <= i || strcmp( argv[i], "" ) == 0 ) {
+                debug_printf( DEBUG_SILENT,
+							  "Integer missing after -MaxOpenedLogs\n" );
+                Usage();
+            }
+            dagman.maxOpenedLogFiles = atoi( argv[i] );
         } else if( !strcasecmp( "-NoEventChecks", argv[i] ) ) {
 			debug_printf( DEBUG_SILENT, "Warning: -NoEventChecks is "
 						"ignored; please use the DAGMAN_ALLOW_EVENTS "
@@ -800,6 +822,22 @@ void main_init (int argc, char ** const argv) {
         debug_printf( DEBUG_SILENT, "-MaxPost must be non-negative\n" );
         Usage();
     }
+    if (dagman.maxOpenedLogFiles < 0) {
+        debug_printf( DEBUG_SILENT, "-MaxOpenedLogs must be non-negative\n" );
+        Usage();
+    } else if (dagman.maxOpenedLogFiles > max_fds) {
+    	// TODO: if it is going to be too close to the limit than it is not
+    	// going to work. we should have some threshold for that, no?
+        debug_printf( DEBUG_SILENT, "-MaxOpenedLogs must be at most %d - the "
+        							"limit given by OS\n", max_fds );
+        Usage();
+    } else if (dagman.maxOpenedLogFiles == 0) {
+    	debug_printf( DEBUG_VERBOSE, "No limit set for the maximum opened "
+    			"log files\n");
+    } else {
+    	debug_printf( DEBUG_VERBOSE, "Limiting the maximum of opened log files "
+    			"to %d\n", dagman.maxOpenedLogFiles);
+    }
     if( dagman.doRescueFrom < 0 ) {
         debug_printf( DEBUG_SILENT, "-DoRescueFrom must be non-negative\n" );
         Usage();
@@ -926,6 +964,7 @@ void main_init (int argc, char ** const argv) {
 	// wenger 2010-03-25
     dagman.dag = new Dag( dagman.dagFiles, dagman.maxJobs,
 						  dagman.maxPreScripts, dagman.maxPostScripts,
+						  dagman.maxOpenedLogFiles,
 						  dagman.allowLogError, dagman.useDagDir,
 						  dagman.maxIdle, dagman.retrySubmitFirst,
 						  dagman.retryNodeFirst, dagman.condorRmExe,
@@ -1023,6 +1062,8 @@ void main_init (int argc, char ** const argv) {
 		return;
 	}
 
+	debug_printf(DEBUG_VERBOSE, "Maximum number of open files: %d, \n",
+			max_fds);
     //------------------------------------------------------------------------
     // Bootstrap and Recovery
     //
@@ -1135,14 +1176,11 @@ void condor_event_timer () {
 					  justSubmitted, justSubmitted == 1 ? "" : "s" );
 	}
 
-    // If the log has grown
-    if( dagman.dag->DetectCondorLogGrowth() ) {
-		if( dagman.dag->ProcessLogEvents( CONDORLOG ) == false ) {
-			dagman.dag->PrintReadyQ( DEBUG_DEBUG_1 );
-			main_shutdown_rescue( EXIT_ERROR );
-			return;
-        }
-    }
+	if( dagman.dag->ProcessLogEvents( CONDORLOG ) == false ) {
+		dagman.dag->PrintReadyQ( DEBUG_DEBUG_1 );
+		main_shutdown_rescue( EXIT_ERROR );
+		return;
+	}
 
     if( dagman.dag->DetectDaPLogGrowth() ) {
       if( dagman.dag->ProcessLogEvents( DAPLOG ) == false ) {
diff --git a/src/condor_dagman/dagman_main.h b/src/condor_dagman/dagman_main.h
index 686aff3..3eae7f1 100644
--- a/src/condor_dagman/dagman_main.h
+++ b/src/condor_dagman/dagman_main.h
@@ -50,6 +50,7 @@ class Dagman {
     int maxJobs;  // Maximum number of Jobs to run at once
     int maxPreScripts;  // max. number of PRE scripts to run at once
     int maxPostScripts;  // max. number of POST scripts to run at once
+    int maxOpenedLogFiles;
 	char *rescueFileToWrite; // "old style" of rescue DAG -- null for new
 	bool paused;
 
diff --git a/src/condor_dagman/parse.cpp b/src/condor_dagman/parse.cpp
index d9c6eed..3247f74 100644
--- a/src/condor_dagman/parse.cpp
+++ b/src/condor_dagman/parse.cpp
@@ -1480,6 +1480,7 @@ parse_splice(
 							dag->MaxJobsSubmitted(),
 							dag->MaxPreScripts(),
 							dag->MaxPostScripts(),
+							dag->MaxOpenedLogFiles(),
 							dag->AllowLogError(),
 							dag->UseDagDir(),
 							dag->MaxIdleJobProcs(),
diff --git a/src/condor_utils/read_multiple_logs.cpp b/src/condor_utils/read_multiple_logs.cpp
index 82fef26..8d696e5 100644
--- a/src/condor_utils/read_multiple_logs.cpp
+++ b/src/condor_utils/read_multiple_logs.cpp
@@ -30,6 +30,7 @@
 #define WANT_CLASSAD_NAMESPACE
 #endif
 #include <iostream>
+#include <queue>
 #include "classad/classad_distribution.h"
 
 #include "fs_util.h"
@@ -54,12 +55,27 @@
 
 ReadMultipleUserLogs::ReadMultipleUserLogs() :
 	allLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
-	activeLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys)
+	activeLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
+	previousPassOneStats(""),
+	previousPassTwoStats(""),
+	maxOpenedLogFiles(0) // no limit
 {
 }
 
 ///////////////////////////////////////////////////////////////////////////////
 
+ReadMultipleUserLogs::ReadMultipleUserLogs(int maxLogs) :
+	allLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
+	activeLogFiles(LOG_INFO_HASH_SIZE, MyStringHash, rejectDuplicateKeys),
+	previousPassOneStats(""),
+	previousPassTwoStats(""),
+	maxOpenedLogFiles(maxLogs)
+{
+}
+
+
+///////////////////////////////////////////////////////////////////////////////
+
 ReadMultipleUserLogs::~ReadMultipleUserLogs()
 {
 	if (activeLogFileCount() != 0) {
@@ -107,43 +123,241 @@ operator>(const tm &lhs, const tm &rhs)
 
 ///////////////////////////////////////////////////////////////////////////////
 
-ULogEventOutcome
-ReadMultipleUserLogs::readEvent (ULogEvent * & event)
-{
-    dprintf(D_FULLDEBUG, "ReadMultipleUserLogs::readEvent()\n");
+ULogEventOutcome ReadMultipleUserLogs::readEvent(ULogEvent * & event) {
+	dprintf(D_FULLDEBUG, "ReadMultipleUserLogs::readEvent()\n");
 
 	LogFileMonitor *oldestEventMon = NULL;
 
+	// all log monitors that have opened file descriptors
+	std::queue<LogFileMonitor *> openedMonitors;
+
+	// all log monitors that have closed file descriptors and that were not read
+	// during the first pass
+	std::queue<LogFileMonitor *> closedMonitors;
+
+	// iteration variable used in both loops
+	LogFileMonitor *monitor = NULL;
+
+	// stats
+	int numCached = 0;	// number of monitors with cached events
+	int numRead = 0;	// number of monitors we read from
+	int numOpen = 0;	// number of monitors that were already opened
+						// in 1. pass and were opened in 2. pass
+	int numClose = 0;	// number of monitors that were already closed
+						// in 1. pass and were closed in 2. pass
+	time_t ts = NULL;   // start time for stats
+	double span = 0;	// for counting the time span
+
+	// 1. pass over all monitors, but only read from the ones that are opened
 	activeLogFiles.startIterations();
-	LogFileMonitor *monitor;
-	while ( activeLogFiles.iterate( monitor ) ) {
-		ULogEventOutcome outcome = ULOG_OK;
-			// If monitor->lastLogEvent != null, we already have an
-			// unconsumed event from that log, so we don't need to
-			// actually read the log again.
-		if ( !monitor->lastLogEvent ) {
-			outcome = readEventFromLog( monitor );
-
-			if ( outcome == ULOG_RD_ERROR || outcome == ULOG_UNK_ERROR ) {
-				// peter says always return an error immediately,
-				// then go on our merry way trying again if they
-				// call us again.
-				dprintf( D_ALWAYS, "ReadMultipleUserLogs: read error "
-							"on log %s\n", monitor->logFile.Value() );
-				return outcome;
+
+	// take time at the beginning of the 1. pass
+	ts = time(NULL);
+	while (activeLogFiles.iterate(monitor)) {
+		ULogEventOutcome outcome = ULOG_NO_EVENT;
+
+		// if monitor->lastLogEvent != null, we already have an
+		// unconsumed event from that log, so we don't need to
+		// actually read the log again.
+		if (!monitor->lastLogEvent) {
+			if (maxOpenedLogFiles == 0 || monitor->readUserLog->isOpened()) {
+				if (maxOpenedLogFiles == 0) {
+					dprintf(D_FULLDEBUG, "readEvent(): reading %s\n",
+							monitor->logFile.Value());
+				} else {
+					dprintf(D_FULLDEBUG,
+							"readEvent(): %s is opened (%lu/%u) and reading\n",
+							monitor->logFile.Value(), openedMonitors.size() + 1,
+							maxOpenedLogFiles);
+				}
+
+				// the log file does not have a pending event and it is opened
+				// (or we do not have any limit on number of FDs) so we process
+				// it
+				outcome = readEventFromLog(monitor);
+				// update stats
+				numRead++;
+				numOpen++;
+
+				if (maxOpenedLogFiles != 0 && (int) openedMonitors.size()
+						>= maxOpenedLogFiles) {
+					EXCEPT("ReadMultipleUserLogs::readEvent() - "
+							"too many opened log monitors.");
+				}
+
+				// since we have opened it
+				openedMonitors.push(monitor);
+			} else {
+				dprintf(D_FULLDEBUG,
+						"readEvent(): %s closed so not reading now\n",
+						monitor->logFile.Value());
+
+				// the log file does not have a pending event and it is closed
+				// we will read it the next the 2. part
+				closedMonitors.push(monitor);
+				// update stats
+				numClose++;
+
+				// no event read so go to the next iteration
+				continue;
 			}
+		} else {
+			dprintf(D_FULLDEBUG,
+					"readEvent(): %s has already cached event\n",
+					monitor->logFile.Value());
+
+			// there is an already pending event
+			outcome = ULOG_OK;
+			// update stats
+			numCached++;
+
+			// if the log file is opened than add it to the queue otherwise we
+			// do not need to take care of it in the next step since it already
+			// has pending event
+			if (monitor->readUserLog->isOpened()) {
+				openedMonitors.push(monitor);
+				// update stats
+				numOpen++;
+			}
+		}
+
+		if (outcome == ULOG_RD_ERROR || outcome == ULOG_UNK_ERROR) {
+			// peter says always return an error immediately,
+			// then go on our merry way trying again if they
+			// call us again.
+			dprintf(D_ALWAYS,
+					"readEvent() read error on log %s\n",
+					monitor->logFile.Value());
+			return outcome;
 		}
 
-		if ( outcome != ULOG_NO_EVENT ) {
-			if ( oldestEventMon == NULL ||
-						(oldestEventMon->lastLogEvent->eventTime >
-						monitor->lastLogEvent->eventTime) ) {
+		if (outcome != ULOG_NO_EVENT) {
+			if (oldestEventMon == NULL
+					|| (oldestEventMon->lastLogEvent->eventTime
+							> monitor->lastLogEvent->eventTime)) {
 				oldestEventMon = monitor;
 			}
 		}
 	}
 
-	if ( oldestEventMon == NULL ) {
+	span = difftime(time(NULL), ts);
+
+	// this makes a stats summary to see whether they have changed or not
+	MyString stats;
+	ASSERT(stats.sprintf("%d,%.0lf,%d,%d,%d,%d",activeLogFiles.getNumElements(), span,
+			numCached, numOpen, numRead, numClose));
+
+	if (previousPassOneStats == stats) {
+		dprintf(D_FULLDEBUG, "readEvent(): 1. pass statistics have not changed\n");
+	} else {
+		// print stats
+		dprintf(D_FULLDEBUG, "readEvent(): during 1. pass %d file(s) were processed "
+				"in %.0lf seconds\n", activeLogFiles.getNumElements(), span);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) have already a cached event\n",
+				numCached);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were already opened\n",
+				numOpen);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were read\n", numRead);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were closed and will be "
+				"processed in the 2. pass\n",	numClose);
+
+		previousPassOneStats = stats;
+	}
+
+
+	// at this point at max maxOpenedLogFiles should be opened
+	if (maxOpenedLogFiles != 0
+			&& (int)openedMonitors.size() > maxOpenedLogFiles) {
+		EXCEPT("ReadMultipleUserLogs::readEvent() - "
+				"too many opened log monitors after the 1. pass: %ld opened, "
+				"but only %d available.",
+				openedMonitors.size(), maxOpenedLogFiles);
+	}
+
+	// 2. pass over the monitors that were closed
+	// reset the stats
+	numCached = numRead = numOpen = numClose = 0;
+
+	// number of files that were closed and will be processed in the 2. pass
+	int numClosed = closedMonitors.size();
+
+	// reset the iteration variable
+	monitor = NULL;
+
+	// take time at the beginning of the 2. pass
+	ts = time(NULL);
+	while (!closedMonitors.empty()) {
+		ULogEventOutcome outcome = ULOG_NO_EVENT;
+
+		if ((int) openedMonitors.size()	>= maxOpenedLogFiles) {
+			// close one monitor
+			monitor = openedMonitors.front();
+			openedMonitors.pop();
+
+			dprintf(D_FULLDEBUG,
+					"readEvent(): closing %s\n",
+					monitor->logFile.Value());
+
+			monitor->readUserLog->CloseLogFile();
+			monitor = NULL;
+			// update stats
+			numClose++;
+		}
+
+		// open a closed monitor
+		monitor = closedMonitors.front();
+		closedMonitors.pop();
+
+		dprintf(D_FULLDEBUG,
+				"readEvent(): opening %s (%lu/%u) and reading\n",
+				monitor->logFile.Value(), openedMonitors.size() + 1,
+				maxOpenedLogFiles);
+
+		outcome = readEventFromLog(monitor);
+		// it is now opened - so push to opened monitors queue
+		openedMonitors.push(monitor);
+		// update stats
+		numOpen++;
+
+		if (outcome == ULOG_RD_ERROR || outcome == ULOG_UNK_ERROR) {
+			// peter says always return an error immediately,
+			// then go on our merry way trying again if they
+			// call us again.
+			dprintf(D_ALWAYS,
+					"readEvent(): read error on log %s\n",
+					monitor->logFile.Value());
+			return outcome;
+		}
+
+		if (outcome != ULOG_NO_EVENT) {
+			if (oldestEventMon == NULL
+					|| (oldestEventMon->lastLogEvent->eventTime
+							> monitor->lastLogEvent->eventTime)) {
+				oldestEventMon = monitor;
+			}
+		}
+	}
+
+	span = difftime(time(NULL), ts);
+
+	// this makes a stats summary to see whether they have changed or not
+	ASSERT(stats.sprintf("%d,%.0lf,%d,%d",numClosed, span, numOpen, numClose));
+
+	if (previousPassTwoStats == stats) {
+		dprintf(D_FULLDEBUG, "readEvent(): 2. pass statistics have not changed\n");
+	} else {
+		// print stat
+		dprintf(D_FULLDEBUG, "readEvent(): during 2. pass %d file(s) were processed"
+			" in %.0lf seconds\n", numClosed, span);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were opened and read\n",
+			numOpen);
+		dprintf(D_FULLDEBUG, "readEvent(): %d file(s) were closed\n", numClose);
+
+		previousPassTwoStats = stats;
+	}
+
+
+	if (oldestEventMon == NULL) {
 		return ULOG_NO_EVENT;
 	}
 
@@ -988,6 +1202,9 @@ ReadMultipleUserLogs::monitorLogFile( MyString logfile,
 						new ReadUserLog( monitor->logFile.Value() );
 		}
 
+		// explicitly close the monitor
+		monitor->readUserLog->CloseLogFile();
+
 		if ( activeLogFiles.insert( fileID, monitor ) != 0 ) {
 			errstack.pushf( "ReadMultipleUserLogs", UTIL_ERR_LOG_FILE,
 						"Error inserting %s (%s) into activeLogFiles",
@@ -998,6 +1215,9 @@ ReadMultipleUserLogs::monitorLogFile( MyString logfile,
 						"file %s (%s) to active list\n", logfile.Value(),
 						fileID.Value() );
 		}
+
+		// make sure it is closed
+		ASSERT(!monitor->readUserLog->isOpened());
 	}
 
 	monitor->refCount++;
diff --git a/src/condor_utils/read_multiple_logs.h b/src/condor_utils/read_multiple_logs.h
index 5313195..2f4e952 100644
--- a/src/condor_utils/read_multiple_logs.h
+++ b/src/condor_utils/read_multiple_logs.h
@@ -184,6 +184,7 @@ class ReadMultipleUserLogs
 {
 public:
 	ReadMultipleUserLogs();
+	ReadMultipleUserLogs(int maxLogs);
 
 	~ReadMultipleUserLogs();
 
@@ -296,6 +297,15 @@ private:
 
 	HashTable<MyString, LogFileMonitor *>	activeLogFiles;
 
+	// readEvent statistics summary for the pass 1
+	MyString previousPassOneStats;
+
+	// readEvent statistics summary for the pass 2
+	MyString previousPassTwoStats;
+
+	// the threshold of how many log files can be opened at the time
+	int maxOpenedLogFiles;
+
 	// For instantiation in programs that use this class.
 #define MULTI_LOG_HASH_INSTANCE template class \
 		HashTable<MyString, ReadMultipleUserLogs::LogFileMonitor *>
diff --git a/src/condor_utils/read_user_log.h b/src/condor_utils/read_user_log.h
index c89decc..d12da7d 100644
--- a/src/condor_utils/read_user_log.h
+++ b/src/condor_utils/read_user_log.h
@@ -110,6 +110,9 @@ class ReadUserLog
 	*/
     bool isInitialized( void ) const { return m_initialized; };
 
+    /** Returns true when the underlying file descriptor is opened, false otherwise
+     */
+    bool isOpened( void ) const { return m_fd >= 0; };
 
     /** Initialize to read the EventLog file.  This function will return
 		false if it can't open the event log (among other problems).
@@ -194,6 +197,10 @@ class ReadUserLog
 	void Lock(void)   { Lock(true);   };
 	void Unlock(void) { Unlock(true); };
 
+ 	/** Close the log file
+ 	 */
+	void CloseLogFile(void) { CloseLogFile(true); };
+
 	/** Enable / disable locking
 	 */
 	void setLock( bool enable ) { m_lock_enable = enable; };
