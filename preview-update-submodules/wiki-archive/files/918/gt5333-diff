diff --git a/src/condor_dagman/dag.cpp b/src/condor_dagman/dag.cpp
index c1c92ee..23112e5 100644
--- a/src/condor_dagman/dag.cpp
+++ b/src/condor_dagman/dag.cpp
@@ -584,7 +584,7 @@ bool Dag::ProcessOneEvent (ULogEventOutcome outcome,
 							_metrics );
 #endif
 					// Make sure we don't count finished jobs as idle.
-				ProcessNotIdleEvent(job);
+				ProcessNotIdleEvent( job, event->proc );
 				ProcessAbortEvent(event, job, recovery);
 				break;
               
@@ -594,7 +594,7 @@ bool Dag::ProcessOneEvent (ULogEventOutcome outcome,
 							_metrics );
 #endif
 					// Make sure we don't count finished jobs as idle.
-				ProcessNotIdleEvent(job);
+				ProcessNotIdleEvent( job, event->proc );
 				ProcessTerminatedEvent(event, job, recovery);
 				break;
 
@@ -604,23 +604,23 @@ bool Dag::ProcessOneEvent (ULogEventOutcome outcome,
 
 			case ULOG_SUBMIT:
 				ProcessSubmitEvent(job, recovery, submitEventIsSane);
-				ProcessIsIdleEvent(job);
+				ProcessIsIdleEvent( job, event->proc );
 				break;
 
 			case ULOG_JOB_RECONNECT_FAILED:
 			case ULOG_JOB_EVICTED:
 			case ULOG_JOB_SUSPENDED:
 			case ULOG_SHADOW_EXCEPTION:
-				ProcessIsIdleEvent(job);
+				ProcessIsIdleEvent( job, event->proc );
 				break;
 
 			case ULOG_JOB_HELD:
 				ProcessHeldEvent(job, event);
-				ProcessIsIdleEvent(job);
+				ProcessIsIdleEvent(job, event->proc);
 				break;
 
 			case ULOG_JOB_UNSUSPENDED:
-				ProcessNotIdleEvent(job);
+				ProcessNotIdleEvent( job, event->proc );
 				break;
 
 			case ULOG_EXECUTE:
@@ -628,7 +628,7 @@ bool Dag::ProcessOneEvent (ULogEventOutcome outcome,
 				job->ExecMetrics( event->proc, event->eventTime,
 							_metrics );
 #endif
-				ProcessNotIdleEvent(job);
+				ProcessNotIdleEvent( job, event->proc );
 				break;
 
 			case ULOG_JOB_RELEASED:
@@ -682,7 +682,7 @@ Dag::ProcessAbortEvent(const ULogEvent *event, Job *job,
   // same *job* (not job proc).
 
 	if ( job ) {
-		DecrementJobCounts( job );
+		DecrementProcCount( job );
 
 			// This code is here because if a held job is removed, we
 			// don't get a released event for that job.  This may not
@@ -722,7 +722,7 @@ Dag::ProcessTerminatedEvent(const ULogEvent *event, Job *job,
 		bool recovery) {
 	if( job ) {
 
-		DecrementJobCounts( job );
+		DecrementProcCount( job );
 
 		const JobTerminatedEvent * termEvent =
 					(const JobTerminatedEvent*) event;
@@ -1149,15 +1149,18 @@ Dag::ProcessSubmitEvent(Job *job, bool recovery, bool &submitEventIsSane) {
 
 //---------------------------------------------------------------------------
 void
-Dag::ProcessIsIdleEvent(Job *job) {
+Dag::ProcessIsIdleEvent( Job *job, int proc ) {
 
 	if ( !job ) {
 		return;
 	}
 
-	if ( !job->GetIsIdle() &&
+		// Note:  we need to make sure here that the job proc isn't already
+		// idle so we don't count it twice if, for example, we get a hold
+		// event for a job that's already idle.
+	if ( !job->GetProcIsIdle( proc ) &&
 				( job->GetStatus() == Job::STATUS_SUBMITTED ) ) {
-		job->SetIsIdle(true);
+		job->SetProcIsIdle( proc, true );
 		_numIdleJobProcs++;
 	}
 
@@ -1176,15 +1179,16 @@ Dag::ProcessIsIdleEvent(Job *job) {
 
 //---------------------------------------------------------------------------
 void
-Dag::ProcessNotIdleEvent(Job *job) {
+Dag::ProcessNotIdleEvent( Job *job, int proc ) {
 
 	if ( !job ) {
 		return;
 	}
 
-	if ( job->GetIsIdle() &&
-				( job->GetStatus() == Job::STATUS_SUBMITTED ) ) {
-		job->SetIsIdle(false);
+	if ( job->GetProcIsIdle( proc ) &&
+				( ( job->GetStatus() == Job::STATUS_SUBMITTED ) ||
+				( job->GetStatus() == Job::STATUS_ERROR ) ) ) {
+		job->SetProcIsIdle( proc, false );
 		_numIdleJobProcs--;
 	}
 
@@ -2893,7 +2897,7 @@ Dag::DumpNodeStatus( bool held, bool removed )
 	fprintf( outfile, "  NodesUnready = %d;\n",NumNodesUnready( true ) );
 	fprintf( outfile, "  NodesFailed = %d;\n", nodesFailed );
 	fprintf( outfile, "  JobProcsHeld = %d;\n", nodesHeld );
-	fprintf( outfile, "  JobProcsIdle = %d;\n", nodesIdle );
+	fprintf( outfile, "  JobProcsIdle = %d; /* includes held */\n", nodesIdle );
 	fprintf( outfile, "]\n" );
 
 		//
@@ -2925,7 +2929,10 @@ Dag::DumpNodeStatus( bool held, bool removed )
 				jobProcsQueued = 0;
 				jobProcsHeld = 0;
 			} else {
-				nodeNote = node->GetIsIdle() ? "idle" : "not_idle";
+					// This isn't really the right thing to do for multi-
+					// proc nodes, but I want to get in a fix for
+					// gittrac #5333 today...  wenger 2015-11-05
+				nodeNote = node->GetProcIsIdle( 0 ) ? "idle" : "not_idle";
 				// Note: add info here about whether the job(s) are
 				// held, once that code is integrated.
 			}
@@ -4075,13 +4082,14 @@ Dag::ProcessFailedSubmit( Job *node, int max_submit_attempts )
 
 //---------------------------------------------------------------------------
 void
-Dag::DecrementJobCounts( Job *node )
+Dag::DecrementProcCount( Job *node )
 {
 	node->_queuedNodeJobProcs--;
 	ASSERT( node->_queuedNodeJobProcs >= 0 );
 
 	if( node->_queuedNodeJobProcs == 0 ) {
 		UpdateJobCounts( node, -1 );
+		node->Cleanup();
 	}
 }
 
diff --git a/src/condor_dagman/dag.h b/src/condor_dagman/dag.h
index de45a04..99832d1 100644
--- a/src/condor_dagman/dag.h
+++ b/src/condor_dagman/dag.h
@@ -258,7 +258,7 @@ class Dag {
 		a different method.
 		@param The job corresponding to this event.
 	*/
-	void ProcessIsIdleEvent(Job *job);
+	void ProcessIsIdleEvent( Job *job, int proc );
 
 	/** Process an event that indicates that a job is NOT in an idle state.
 	    Note that this method only does processing relating to keeping
@@ -266,7 +266,7 @@ class Dag {
 		a different method.
 		@param The job corresponding to this event.
 	*/
-	void ProcessNotIdleEvent(Job *job);
+	void ProcessNotIdleEvent( Job *job, int proc );
 
 	/** Process a held event for a job.
 		@param The job corresponding to this event.
@@ -840,15 +840,17 @@ class Dag {
 	*/
 	void ProcessFailedSubmit( Job *node, int max_submit_attempts );
 
-	/** Decrement the job counts for this node.
+	/** Decrement the proc count for this node (and also the overall
+	    	job count if appropriate).
 		@param The node for which to decrement the job counts.
 	*/
-	void DecrementJobCounts( Job *node );
+	void DecrementProcCount( Job *node );
 
 	// Note: there's no IncrementJobCounts method because the code isn't
 	// exactly duplicated when incrementing.
 
-	/** Update the job counts for the given node.
+	/** Update the overall submitted job count (and the appropriate
+			category count, if the node belongs to a category).
 		@param The amount by which to change the job counts.
 	*/
 	void UpdateJobCounts( Job *node, int change );
diff --git a/src/condor_dagman/dagman_main.cpp b/src/condor_dagman/dagman_main.cpp
index 219e1b2..882384f 100644
--- a/src/condor_dagman/dagman_main.cpp
+++ b/src/condor_dagman/dagman_main.cpp
@@ -96,10 +96,13 @@ static void Usage() {
 
 //---------------------------------------------------------------------------
 
+#define MAX_IDLE_DEFAULT 1000
+#define MAX_SUBMITS_PER_INT_DEFAULT 5
+#define LOG_SCAN_INT_DEFAULT 5
 
 Dagman::Dagman() :
 	dag (NULL),
-	maxIdle (1000),
+	maxIdle (MAX_IDLE_DEFAULT),
 	maxJobs (0),
 	maxPreScripts (20),
 	maxPostScripts (20),
@@ -108,8 +111,8 @@ Dagman::Dagman() :
 	condorRmExe (NULL),
 	submit_delay (0),
 	max_submit_attempts (6),
-	max_submits_per_interval (5), // so Coverity is happy
-	m_user_log_scan_interval (5),
+	max_submits_per_interval (MAX_SUBMITS_PER_INT_DEFAULT), // so Coverity is happy
+	m_user_log_scan_interval (LOG_SCAN_INT_DEFAULT),
 	primaryDagFile (""),
 	multiDags (false),
 	startup_cycle_detect (false), // so Coverity is happy
@@ -939,6 +942,70 @@ void main_init (int argc, char ** const argv) {
         Usage();
     }
 
+		// This is kind of a guess at adjusting
+		// DAGMAN_MAX_SUBMITS_PER_INTERVAL and DAGMAN_USER_LOG_SCAN_INTERVAL
+		// so that they don't goof up DAGMAN_MAX_JOBS_IDLE too much...
+		// wenger 2015-11-05
+	if ( dagman.maxIdle != MAX_IDLE_DEFAULT ) {
+    	debug_printf( DEBUG_QUIET,
+					"Note:  DAGMAN_MAX_JOBS_IDLE has been changed from "
+					"the default setting; if your submit files create "
+					"multiple procs, you should probably set "
+					"DAGMAN_MAX_SUBMITS_PER_INTERVAL to 1\n" );
+
+		int submitsLimit = MAX( 1, dagman.maxIdle / 10 );
+		if ( dagman.max_submits_per_interval > submitsLimit ) {
+			if ( dagman.max_submits_per_interval ==
+						MAX_SUBMITS_PER_INT_DEFAULT ) {
+					// The user hasn't changed DAGMAN_MAX_SUBMITS_PER_INTERVAL,
+					// so change it to our best guess at something that will
+					// work with DAGMAN_MAX_JOBS_IDLE.
+				dagman.max_submits_per_interval = submitsLimit;
+    			debug_printf( DEBUG_QUIET,
+							"Note:  DAGMAN_MAX_SUBMITS_PER_INTERVAL has been "
+							"changed to %d because of your "
+							"DAGMAN_MAX_JOBS_IDLE setting of %d\n",
+							dagman.max_submits_per_interval, dagman.maxIdle );
+			} else {
+					// If the user has changed this from the default, leave
+					// their setting alone.
+				debug_printf( DEBUG_QUIET,
+							"Warning: your DAGMAN_MAX_SUBMITS_PER_INTERVAL "
+							"setting of %d may interfere with your "
+							"DAGMAN_MAX_JOBS_IDLE setting of %d\n",
+							dagman.max_submits_per_interval, dagman.maxIdle );
+				check_warning_strictness( DAG_STRICT_2 );
+			}
+		}
+
+		if ( dagman.m_user_log_scan_interval >
+					dagman.max_submits_per_interval ) {
+			if ( dagman.m_user_log_scan_interval == LOG_SCAN_INT_DEFAULT ) {
+					// The user hasn't changed DAGMAN_USER_LOG_SCAN_INTERVAL,
+					// so change it to our best guess at something that will
+					// work with DAGMAN_MAX_SUBMITS_PER_INTERVAL.
+				dagman.m_user_log_scan_interval =
+							dagman.max_submits_per_interval;
+    			debug_printf( DEBUG_QUIET,
+							"Note:  DAGMAN_USER_LOG_SCAN_INTERVAL has been "
+							"changed to %d because of the "
+							"DAGMAN_MAX_SUBMITS_PER_INTERVAL setting of %d\n",
+							dagman.m_user_log_scan_interval,
+							dagman.max_submits_per_interval );
+			} else {
+					// If the user has changed this from the default, leave
+					// their setting alone.
+				debug_printf( DEBUG_QUIET,
+							"Warning: your DAGMAN_USER_LOG_SCAN_INTERVAL "
+							"setting of %d may interfere with the "
+							"DAGMAN_MAX_SUBMITS_PER_INTERVAL setting of %d\n",
+							dagman.m_user_log_scan_interval,
+							dagman.max_submits_per_interval );
+				check_warning_strictness( DAG_STRICT_2 );
+			}
+		}
+	}
+
 	//
 	// ...done checking arguments.
 	//
diff --git a/src/condor_dagman/job.cpp b/src/condor_dagman/job.cpp
index 57f3c98..7c75953 100644
--- a/src/condor_dagman/job.cpp
+++ b/src/condor_dagman/job.cpp
@@ -96,7 +96,6 @@ Job::Job( const char* jobName,
 	_scriptPre = NULL;
 	_scriptPost = NULL;
 	_Status = STATUS_READY;
-	_isIdle = false;
 	countedAsDone = false;
 
 	_jobName = strnewp (jobName);
@@ -304,7 +303,46 @@ Job::SetStatus( status_t newStatus )
 	return true;
 }
 
+//---------------------------------------------------------------------------
+bool
+Job::GetProcIsIdle( int proc )
+{
+	if ( GetNoop() ) {
+		proc = 0;
+	}
+
+	if ( proc >= static_cast<int>( _isIdle.size() ) ) {
+		_isIdle.resize( proc+1, false );
+	}
+	return _isIdle[proc];
+}
+
+//---------------------------------------------------------------------------
+void
+Job::SetProcIsIdle( int proc, bool isIdle )
+{
+	if ( GetNoop() ) {
+		proc = 0;
+	}
 
+	if ( proc >= static_cast<int>( _isIdle.size() ) ) {
+		_isIdle.resize( proc+1, false );
+	}
+	_isIdle[proc] = isIdle;
+}
+
+//---------------------------------------------------------------------------
+void
+Job::PrintProcIsIdle()
+{
+	for ( int proc = 0;
+				proc < static_cast<int>( _isIdle.size() ); ++proc ) {
+		debug_printf( DEBUG_QUIET, "  Job(%s)::_isIdle[%d]: %d\n",
+					GetJobName(), proc, _isIdle[proc] );
+	}
+}
+
+//---------------------------------------------------------------------------
 bool
 Job::AddParent( Job* parent )
 {
@@ -441,7 +479,6 @@ Job::CanAddChild( Job* child, MyString &whynot )
 bool
 Job::TerminateSuccess()
 {
-	Cleanup();
 	SetStatus( STATUS_DONE );
 	return true;
 } 
@@ -449,7 +486,6 @@ Job::TerminateSuccess()
 bool
 Job::TerminateFailure()
 {
-	Cleanup();
 	SetStatus( STATUS_ERROR );
 	return true;
 } 
@@ -903,6 +939,10 @@ Job::TermAbortMetrics( int proc, const struct tm &eventTime,
 }
 
 //---------------------------------------------------------------------------
+// Note:  For multi-proc jobs, if one proc failed this was getting called
+// immediately, which was not correct.  I changed how this was called, but
+// we should probably put in code to make sure it's not called too soon,
+// but is called...  wenger 2015-11-05
 void
 Job::Cleanup()
 {
@@ -921,4 +961,7 @@ Job::Cleanup()
 
 	std::vector<unsigned char> s2;
 	_gotEvents.swap(s2); // Free memory in _gotEvents
+	
+	std::vector<unsigned char> s3;
+	_isIdle.swap(s3); // Free memory in _isIdle
 }
diff --git a/src/condor_dagman/job.h b/src/condor_dagman/job.h
index 63c7fb2..59da259 100644
--- a/src/condor_dagman/job.h
+++ b/src/condor_dagman/job.h
@@ -159,6 +159,14 @@ class Job {
   
     ~Job();
 
+		/** Clean up memory that's no longer needed once a node has
+			finished.  (Note that this doesn't mean that the Job object
+			is not valid -- it just cleans up some temporary memory.)
+			Also check that we got a consistent set of events for the
+			metrics.
+		*/
+	void Cleanup();
+
 	void PrefixName(const MyString &prefix);
 	inline const char* GetJobName() const { return _jobName; }
 	inline const char* GetDirectory() const { return _directory; }
@@ -233,15 +241,17 @@ class Job {
     */
 	bool SetStatus( status_t newStatus );
 
-		/** Get whether this job is idle.
-		    @return true if job is idle, false otherwise.
-		*/
-	bool GetIsIdle() const { return _isIdle; }
+	/** Get whether the specified proc is idle.
+		@param proc The proc for which we're getting idle status
+		@return true iff the specified proc is idle; false otherwise
+	*/
+	bool GetProcIsIdle( int proc );
 
-		/** Set whether this job is idle.
-		    @param true if job is idle, false otherwise.
-		*/
-	void SetIsIdle(bool isIdle) { _isIdle = isIdle; }
+	/** Set whether the specified proc is idle.
+		@param proc The proc for which we're setting idle status
+		@param isIdle True iff the specified proc is idle; false otherwise
+	*/
+	void SetProcIsIdle( int proc, bool isIdle );
 
 		/** Is the specified node a child of this node?
 			@param child Pointer to the node to check for childhood.
@@ -492,14 +502,6 @@ public:
 	bool Release(int proc);
 
 private:
-		/** Clean up memory that's no longer needed once a node has
-			finished.  (Note that this doesn't mean that the Job object
-			is not valid -- it just cleans up some temporary memory.)
-			Also check that we got a consistent set of events for the
-			metrics.
-		*/
-	void Cleanup();
-
 		/** _onHold[proc] is nonzero if the condor job 
  			with ProcId == proc is on hold, and zero
 			otherwise
@@ -552,9 +554,6 @@ private:
     */
     static JobID_t _jobID_counter;
 
-		// True if the node job has been submitted and is idle.
-	bool _isIdle;
-
 		// This node's category; points to an object "owned" by the
 		// ThrottleByCategory object.
 	ThrottleByCategory::ThrottleInfo *_throttleInfo;
@@ -605,6 +604,15 @@ private:
 		// is true iff we've gotten an aborted or terminated event
 		// for proc.
 	std::vector<unsigned char> _gotEvents;	
+
+		// _isIdle[proc] is true iff proc is currently idle, held, etc.
+		// (in the queue but not running)
+	std::vector<unsigned char> _isIdle;	
+
+	/** Print the list of which procs are idle/not idle for this node
+	 *  (for debugging).
+	*/
+	void PrintProcIsIdle();
 };
 
 #if 0 // not used -- wenger 2015-02-17
diff --git a/src/condor_tests/job_dagman_maxidle-A-nodeA.cmd b/src/condor_tests/job_dagman_maxidle-A-nodeA.cmd
new file mode 100644
index 0000000..2300bde
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-A-nodeA.cmd
@@ -0,0 +1,6 @@
+universe = vanilla
+executable = x_sleep.pl
+arguments = 30
+# So we stay idle...
+request_foobar = 1234
+queue 4
diff --git a/src/condor_tests/job_dagman_maxidle-A-nodeB.cmd b/src/condor_tests/job_dagman_maxidle-A-nodeB.cmd
new file mode 100644
index 0000000..5feada4
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-A-nodeB.cmd
@@ -0,0 +1,5 @@
+universe = vanilla
+executable = x_sleep.pl
+arguments = 30
+periodic_hold = true
+queue 4
diff --git a/src/condor_tests/job_dagman_maxidle-A.config b/src/condor_tests/job_dagman_maxidle-A.config
new file mode 100644
index 0000000..bf3aac8
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-A.config
@@ -0,0 +1 @@
+DAGMAN_MAX_JOBS_IDLE = 10
diff --git a/src/condor_tests/job_dagman_maxidle-A.dag b/src/condor_tests/job_dagman_maxidle-A.dag
new file mode 100644
index 0000000..1b79b39
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-A.dag
@@ -0,0 +1,14 @@
+# This is testing how maxidle works with multi-proc clusters.
+# A nodes are permanently idle; B nodes are on hold.
+Node_status_file job_dagman_maxidle-A.status
+Config job_dagman_maxidle-A.config
+Job A0 job_dagman_maxidle-A-nodeA.cmd
+Job B0 job_dagman_maxidle-A-nodeB.cmd
+Job A1 job_dagman_maxidle-A-nodeA.cmd
+Job B1 job_dagman_maxidle-A-nodeB.cmd
+Job A2 job_dagman_maxidle-A-nodeA.cmd
+Job B2 job_dagman_maxidle-A-nodeB.cmd
+Job A3 job_dagman_maxidle-A-nodeA.cmd
+Job B3 job_dagman_maxidle-A-nodeB.cmd
+Job A4 job_dagman_maxidle-A-nodeA.cmd
+Job B4 job_dagman_maxidle-A-nodeB.cmd
diff --git a/src/condor_tests/job_dagman_maxidle-B-node.cmd b/src/condor_tests/job_dagman_maxidle-B-node.cmd
new file mode 100644
index 0000000..721358d
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-B-node.cmd
@@ -0,0 +1,6 @@
+universe = vanilla
+executable = x_sleep.pl
+arguments = 30
+# So we stay idle...
+request_foobar = 1234
+queue
diff --git a/src/condor_tests/job_dagman_maxidle-B.config b/src/condor_tests/job_dagman_maxidle-B.config
new file mode 100644
index 0000000..1982c5e
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-B.config
@@ -0,0 +1,2 @@
+DAGMAN_MAX_JOBS_IDLE = 3
+DAGMAN_MAX_SUBMITS_PER_INTERVAL = 10
diff --git a/src/condor_tests/job_dagman_maxidle-B.dag b/src/condor_tests/job_dagman_maxidle-B.dag
new file mode 100644
index 0000000..56b0144
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-B.dag
@@ -0,0 +1,12 @@
+# This is testing how maxidle interacts with DAGMAN_MAX_SUBMITS_PER_INTERVAL.
+Config job_dagman_maxidle-B.config
+Job A0 job_dagman_maxidle-B-node.cmd
+Job A1 job_dagman_maxidle-B-node.cmd
+Job A2 job_dagman_maxidle-B-node.cmd
+Job A3 job_dagman_maxidle-B-node.cmd
+Job A4 job_dagman_maxidle-B-node.cmd
+Job A5 job_dagman_maxidle-B-node.cmd
+Job A6 job_dagman_maxidle-B-node.cmd
+Job A7 job_dagman_maxidle-B-node.cmd
+Job A8 job_dagman_maxidle-B-node.cmd
+Job A9 job_dagman_maxidle-B-node.cmd
diff --git a/src/condor_tests/job_dagman_maxidle-C-node.cmd b/src/condor_tests/job_dagman_maxidle-C-node.cmd
new file mode 100644
index 0000000..721358d
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-C-node.cmd
@@ -0,0 +1,6 @@
+universe = vanilla
+executable = x_sleep.pl
+arguments = 30
+# So we stay idle...
+request_foobar = 1234
+queue
diff --git a/src/condor_tests/job_dagman_maxidle-C.config b/src/condor_tests/job_dagman_maxidle-C.config
new file mode 100644
index 0000000..6bc8ae8
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-C.config
@@ -0,0 +1 @@
+DAGMAN_MAX_JOBS_IDLE = 5
diff --git a/src/condor_tests/job_dagman_maxidle-C.dag b/src/condor_tests/job_dagman_maxidle-C.dag
new file mode 100644
index 0000000..236a88b
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-C.dag
@@ -0,0 +1,17 @@
+# This is testing a simple maxidle case.
+Config job_dagman_maxidle-C.config
+Job A0 job_dagman_maxidle-C-node.cmd
+Job A1 job_dagman_maxidle-C-node.cmd
+Job A2 job_dagman_maxidle-C-node.cmd
+Job A3 job_dagman_maxidle-C-node.cmd
+Job A4 job_dagman_maxidle-C-node.cmd
+Job A5 job_dagman_maxidle-C-node.cmd
+Job A6 job_dagman_maxidle-C-node.cmd
+Job A7 job_dagman_maxidle-C-node.cmd
+Job A8 job_dagman_maxidle-C-node.cmd
+Job A9 job_dagman_maxidle-C-node.cmd
+Job A10 job_dagman_maxidle-C-node.cmd
+Job A11 job_dagman_maxidle-C-node.cmd
+Job A12 job_dagman_maxidle-C-node.cmd
+Job A13 job_dagman_maxidle-C-node.cmd
+Job A14 job_dagman_maxidle-C-node.cmd
diff --git a/src/condor_tests/job_dagman_maxidle-D-node.cmd b/src/condor_tests/job_dagman_maxidle-D-node.cmd
new file mode 100644
index 0000000..07fa05e
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-D-node.cmd
@@ -0,0 +1,4 @@
+universe = vanilla
+executable = x_sleep.pl
+arguments = 30
+queue
diff --git a/src/condor_tests/job_dagman_maxidle-D.config b/src/condor_tests/job_dagman_maxidle-D.config
new file mode 100644
index 0000000..d6115cc
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-D.config
@@ -0,0 +1 @@
+DAGMAN_MAX_JOBS_IDLE = 1
diff --git a/src/condor_tests/job_dagman_maxidle-D.dag b/src/condor_tests/job_dagman_maxidle-D.dag
new file mode 100644
index 0000000..c295ddb
--- /dev/null
+++ b/src/condor_tests/job_dagman_maxidle-D.dag
@@ -0,0 +1,7 @@
+# This is testing a simple maxidle case.
+Config job_dagman_maxidle-D.config
+Job A0 job_dagman_maxidle-D-node.cmd
+Job A1 job_dagman_maxidle-D-node.cmd
+Job A2 job_dagman_maxidle-D-node.cmd
+Job A3 job_dagman_maxidle-D-node.cmd
+Job A4 job_dagman_maxidle-D-node.cmd
