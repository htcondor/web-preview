diff --git a/src/condor_dagman/dagman_commands.cpp b/src/condor_dagman/dagman_commands.cpp
index f8d227d..c34fa69 100644
--- a/src/condor_dagman/dagman_commands.cpp
+++ b/src/condor_dagman/dagman_commands.cpp
@@ -79,7 +79,7 @@ AddNode( Dag *dag, Job::job_type_t type, const char *name,
 	if( done && isFinal) {
 		failReason.sprintf( "Warning: FINAL Job %s cannot be set to DONE\n",
 					name );
-        debug_printf( DEBUG_QUIET, failReason.Value() );
+        debug_printf( DEBUG_QUIET, "%s", failReason.Value() );
 		(void)check_warning_strictness( DAG_STRICT_1, false );
 		done = false;
 	}
diff --git a/src/condor_had/CMakeLists.txt b/src/condor_had/CMakeLists.txt
index 9a07baa..f5eb7e4 100644
--- a/src/condor_had/CMakeLists.txt
+++ b/src/condor_had/CMakeLists.txt
@@ -20,6 +20,11 @@ if (NOT WIN_EXEC_NODE_ONLY)
 
 	condor_selective_glob("StateMachine.*;HAD.*;Utils.*" HADSrcs)
 
+	if ( DARWIN )
+        # Mac OS X has deprecated OpenSSL
+        set_source_files_properties(Utils.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
+	endif ( DARWIN )
+
 	condor_exe(condor_had "${HADSrcs}" ${C_SBIN} "${PCRE_FOUND};${CONDOR_LIBS};${OPENSSL_FOUND};${COREDUMPER_FOUND};${KRB5_FOUND}" ON)
 
 	condor_selective_glob("AbstractReplicatorStateMachine.*;ReplicatorStateMachine.*;HAD_Version.*;Utils.*;Replication.*;FilesOperations.*" RepSrcs)
diff --git a/src/condor_includes/condor_system.h b/src/condor_includes/condor_system.h
index ba72ee9..bb4f251 100644
--- a/src/condor_includes/condor_system.h
+++ b/src/condor_includes/condor_system.h
@@ -65,6 +65,13 @@
 #   error "condor_system.h: Don't know what Unix this is!"
 #endif
 
+/*
+ *  Mac OS X fixes
+ */
+#if defined(Darwin) && !defined(Darwin_10_4)
+// Request that the stat structure always use 64-bits
+#define _DARWIN_USE_64_BIT_INODE
+#endif
 
 /********************************************************************
 ** Declare base system types (currently the int64_t types, but will
diff --git a/src/condor_io/CMakeLists.txt b/src/condor_io/CMakeLists.txt
index 1b31510..72a9a49 100644
--- a/src/condor_io/CMakeLists.txt
+++ b/src/condor_io/CMakeLists.txt
@@ -21,3 +21,4 @@ file( GLOB CeadarRmvSrcs *.t* test.h )
 condor_glob( CedarHdrs CedarSrcs "${CeadarRmvSrcs}" )
 
 set( CEDAR_UTIL_SRCS "${CedarHdrs};${CedarSrcs}" PARENT_SCOPE )
+
diff --git a/src/condor_privsep/safe.unix.cpp b/src/condor_privsep/safe.unix.cpp
index 005f039..1527dcf 100644
--- a/src/condor_privsep/safe.unix.cpp
+++ b/src/condor_privsep/safe.unix.cpp
@@ -1146,6 +1146,8 @@ safe_exec_as_user(uid_t uid,
             fatal_error_exit(1, "error setting personality: %s");
         }
     }
+#else
+    if (is_std_univ) {} // Done to suppress compiler warnings
 #endif
 
     /* finally do the exec */
diff --git a/src/condor_procapi/procapi.cpp b/src/condor_procapi/procapi.cpp
index 65ca543..42e1c2d 100644
--- a/src/condor_procapi/procapi.cpp
+++ b/src/condor_procapi/procapi.cpp
@@ -2699,7 +2699,7 @@ ProcAPI::printProcInfo(FILE* fp, piPTR pi){
 uid_t 
 ProcAPI::getFileOwner(int fd) {
 	
-#if HAVE_FSTAT64
+#if HAVE_FSTAT64 && !defined(_DARWIN_USE_64_BIT_INODE)
 	// If we do not use fstat64(), fstat() fails if the inode number
 	// is too big and possibly for a few other reasons as well.
 	struct stat64 si;
diff --git a/src/condor_startd.V6/Starter.cpp b/src/condor_startd.V6/Starter.cpp
index 859f683..ad7d9cd 100644
--- a/src/condor_startd.V6/Starter.cpp
+++ b/src/condor_startd.V6/Starter.cpp
@@ -414,6 +414,7 @@ Starter::reallykill( int signo, int type )
 				// stale NFS mount.  So, we can at least EXCEPT with a
 				// more specific error message.
 		case ESTALE:
+			if (first_time) {} // Done to suppress compiler warnings
 			EXCEPT( "Condor binaries are on a stale NFS mount.  Aborting." );
 			break;
 #else
diff --git a/src/condor_sysapi/idle_time.cpp b/src/condor_sysapi/idle_time.cpp
index c514261..d9cd5ae 100644
--- a/src/condor_sysapi/idle_time.cpp
+++ b/src/condor_sysapi/idle_time.cpp
@@ -813,7 +813,7 @@ calc_idle_time_cpp(time_t * user_idle, time_t * console_idle)
         hidMatchDictionary = IOServiceMatching("IOHIDSystem");
         if (IOServiceGetMatchingServices(masterPort, hidMatchDictionary, &hidObjectIterator) != kIOReturnSuccess) {
             dprintf(D_ALWAYS, "IDLE: Can't find IOHIDSystem\n");
-        } else if (hidObjectIterator == NULL) {
+        } else if (hidObjectIterator == 0) {
             dprintf(D_ALWAYS, "IDLE Can't find IOHIDSystem\n");
         } else {
             // Note that IOServiceGetMatchingServices consumes a reference to the dictionary
@@ -855,7 +855,7 @@ extract_idle_time(
     CFMutableDictionaryRef  properties)
 {
     time_t    idle_time = -1;
-	UInt64  nanoseconds, billion, seconds_64, remainder;
+	UInt64  nanoseconds, billion, seconds_64;
 	UInt32  seconds;
     CFTypeRef object = CFDictionaryGetValue(properties, CFSTR(kIOHIDIdleTimeKey));
 	CFRetain(object);
@@ -884,7 +884,7 @@ extract_idle_time(
 			return idle_time;
 		}	
 		billion = U64SetU(1000000000);
-		seconds_64 = U64Divide(nanoseconds, billion, &remainder);
+		seconds_64 = U64Divide(nanoseconds, billion, NULL);
 		seconds = U32SetU(seconds_64);
 		idle_time = seconds;
     }
diff --git a/src/condor_sysapi/vsyscall_gate_addr.cpp b/src/condor_sysapi/vsyscall_gate_addr.cpp
index 5f59819..35a0438 100644
--- a/src/condor_sysapi/vsyscall_gate_addr.cpp
+++ b/src/condor_sysapi/vsyscall_gate_addr.cpp
@@ -30,12 +30,14 @@ static char *_sysapi_vsyscall_gate_addr = NULL;
 #define BUFFER_SIZE 2048
 
 /* The memory returned from here must be freed */
+#if defined(LINUX)
 static char* find_ckpt_probe(void);
 
 static char* find_ckpt_probe(void)
 {
 	return param("CKPT_PROBE");
 }
+#endif
 
 /* the raw version */
 /* Do not free the returned pointer */
@@ -90,6 +92,12 @@ sysapi_vsyscall_gate_addr_raw(void)
 		free(_sysapi_vsyscall_gate_addr);
 		_sysapi_vsyscall_gate_addr = strdup(addr);
 	}
+#else
+	// Done to suppress compiler warnings
+	if (tmp) {}
+	if (fin) {}
+	if (buf[0]) {}
+	if (addr[0]) {}
 #endif
 
 	return _sysapi_vsyscall_gate_addr;
diff --git a/src/condor_utils/CMakeLists.txt b/src/condor_utils/CMakeLists.txt
index 7287357..2d94fd7 100644
--- a/src/condor_utils/CMakeLists.txt
+++ b/src/condor_utils/CMakeLists.txt
@@ -51,6 +51,8 @@ condor_shared_lib( condor_utils "${HeaderFiles};${SourceFiles};${EXTRA_SRCS}" )
 add_dependencies(condor_utils utils_genparams syscall_numbers )
 target_link_libraries(condor_utils ${CLASSADS_FOUND} ${PCRE_FOUND} ${VOMS_FOUND} ${GLOBUS_FOUND} ${OPENSSL_FOUND} ${KRB5_FOUND} ${POSTGRESQL_FOUND})
 if ( DARWIN )
+	# Mac OS X has deprecated OpenSSL
+	set_source_files_properties(../condor_io/condor_auth_ssl.cpp ../condor_io/condor_auth_passwd.cpp ../condor_io/condor_crypt_blowfish.cpp ../condor_io/condor_crypt.cpp ../condor_io/condor_crypt_3des.cpp condor_base64.cpp condor_dh.cpp condor_md.cpp PROPERTIES COMPILE_FLAGS -Wno-deprecated-declarations)
 	target_link_libraries( condor_utils ${IOKIT_FOUND} ${COREFOUNDATION_FOUND} resolv )
 	add_custom_command( TARGET condor_utils
 		POST_BUILD
diff --git a/src/condor_utils/condor_event.cpp b/src/condor_utils/condor_event.cpp
index 269779a..eb64059 100644
--- a/src/condor_utils/condor_event.cpp
+++ b/src/condor_utils/condor_event.cpp
@@ -2597,7 +2597,7 @@ TerminatedEvent::writeEvent( FILE *file, const char* header )
 
 
 int
-TerminatedEvent::readEvent( FILE *file, const char* header )
+TerminatedEvent::readEvent( FILE *file, bool isJob )
 {
 	char buffer[128];
 	int  normalTerm;
@@ -2644,19 +2644,19 @@ TerminatedEvent::readEvent( FILE *file, const char* header )
 		// In particular: fscanf() when you don't convert anything to
 		// a local variable returns 0, but we think that's failure.
 	if( fscanf (file, "\t%f  -  Run Bytes Sent By ", &sent_bytes) == 0 ||
-		fscanf (file, header) == 0 ||
+		fscanf (file, isJob ? "Job" : "Node") == 0 ||
 		fscanf (file, "\n") == 0 ||
 		fscanf (file, "\t%f  -  Run Bytes Received By ",
 				&recvd_bytes) == 0 ||
-		fscanf (file, header) == 0 ||
+		fscanf (file, isJob ? "Job" : "Node") == 0 ||
 		fscanf (file, "\n") == 0 ||
 		fscanf (file, "\t%f  -  Total Bytes Sent By ",
 				&total_sent_bytes) == 0 ||
-		fscanf (file, header) == 0 ||
+		fscanf (file, isJob ? "Job" : "Node") == 0 ||
 		fscanf (file, "\n") == 0 ||
 		fscanf (file, "\t%f  -  Total Bytes Received By ",
 				&total_recvd_bytes) == 0 ||
-		fscanf (file, header) == 0 ||
+		fscanf (file, isJob ? "Job" : "Node") == 0 ||
 		fscanf (file, "\n") == 0 ) {
 		return 1;		// backwards compatibility
 	}
@@ -2717,7 +2717,7 @@ JobTerminatedEvent::readEvent (FILE *file)
 	if( fscanf(file, "Job terminated.") == EOF ) {
 		return 0;
 	}
-	return TerminatedEvent::readEvent( file, "Job" );
+	return TerminatedEvent::readEvent( file, true );
 }
 
 ClassAd*
@@ -3747,7 +3747,7 @@ NodeTerminatedEvent::readEvent( FILE *file )
 	if( fscanf(file, "Node %d terminated.", &node) == EOF ) {
 		return 0;
 	}
-	return TerminatedEvent::readEvent( file, "Node" );
+	return TerminatedEvent::readEvent( file, false );
 }
 
 ClassAd*
diff --git a/src/condor_utils/condor_event.h b/src/condor_utils/condor_event.h
index c5834a2..d5c7edf 100644
--- a/src/condor_utils/condor_event.h
+++ b/src/condor_utils/condor_event.h
@@ -778,11 +778,10 @@ class TerminatedEvent : public ULogEvent
 
     /** Read the body of the next Terminated event.
         @param file the non-NULL readable log file
-		@param header the header to use for this event (either "Job"
-		or "Node")
+		@param isJob true for "Job", false for "Node"
         @return 0 for failure, 1 for success
     */
-    int readEvent( FILE *, const char* header );
+    int readEvent( FILE *, bool );
 
 
     /** Write the body of the next Terminated event.
diff --git a/src/condor_utils/condor_pidenvid.cpp b/src/condor_utils/condor_pidenvid.cpp
index 30c1f52..c509db8 100644
--- a/src/condor_utils/condor_pidenvid.cpp
+++ b/src/condor_utils/condor_pidenvid.cpp
@@ -292,5 +292,7 @@ pidenvid_optimize_final_env(char **env)
 {
 #if defined(LINUX)
 	pidenvid_shuffle_to_front(env);
+#else
+	if (env) {} // Done to suppress compiler warnings
 #endif
 }
diff --git a/src/condor_utils/get_exec_path.cpp b/src/condor_utils/get_exec_path.cpp
index e9f0c22..7b4c587 100644
--- a/src/condor_utils/get_exec_path.cpp
+++ b/src/condor_utils/get_exec_path.cpp
@@ -190,8 +190,14 @@ win32_getExecPath()
    rest of this file, and it's important to get the right stuff from
    the system headers for what we're doing here for OS X.
    Derek Wright <wright@cs.wisc.edu> 2004-05-13
+
+   On >10.4, we can just use good-old dlsym.
 */
+#if defined(Darwin_10_4) 
 #include <mach-o/dyld.h>
+#else
+#include <dlfcn.h>
+#endif
 #include <crt_externs.h>
 
 typedef int (*NSGetExecutablePathProcPtr)(char *buf, size_t *bufsize);
@@ -199,7 +205,17 @@ typedef int (*NSGetExecutablePathProcPtr)(char *buf, size_t *bufsize);
 int
 darwin_NSGetExecutablePath_getExecPath( char* buf, size_t* bufsize )
 {
-	return ((NSGetExecutablePathProcPtr)NSAddressOfSymbol(NSLookupAndBindSymbol("__NSGetExecutablePath")))(buf, bufsize);
+#if defined(Darwin_10_4)
+        if( NSIsSymbolNameDefined("__NSGetExecutablePath") ) {
+		return ((NSGetExecutablePathProcPtr)NSAddressOfSymbol(NSLookupAndBindSymbol("__NSGetExecutablePath")))(buf, bufsize);
+	} else {
+		return -1;
+	}
+#else
+	NSGetExecutablePathProcPtr fptr = 0;
+	*reinterpret_cast<void**>(&fptr) = dlsym(RTLD_DEFAULT, "__NSGetExecutablePath");
+	return fptr(buf, bufsize);
+#endif
 }
 
 int
@@ -241,7 +257,7 @@ darwin_NSGetArgv_getExecPath( char* buf, size_t* bufsize )
 		/* Now we're finally pointing at the thing we want */
 	path = *ptr;
 	len = strlen( path ) + 1;
-	if( len > *bufsize ) {
+	if( (size_t)len > *bufsize ) {
 		return -1;
 	}
 	strncpy( buf, path, len );
@@ -262,19 +278,10 @@ darwin_getExecPath( void )
     memset( buf, '\0', MAXPATHLEN );
     memset( full_buf, '\0', MAXPATHLEN );
 
-		// Figure out dynamically if we can use the special method or
-		// if we have to do it ourselves...
-	if( NSIsSymbolNameDefined("__NSGetExecutablePath") ) {
-			// We've got the handy function that does all this work
-			// for us, so use it.
-		rval = darwin_NSGetExecutablePath_getExecPath( buf, &size );
-	    if( rval < 0 ) {
-			dprintf( D_ALWAYS, "getExecName(): NSGetExecutablePath() "
-					 "returned failure (%d): %s (errno %d)\n", 
-					 rval, strerror(errno), errno );
-			return NULL;
-	    }
-	} else {
+		// We've got the handy function that does all this work
+		// for us, so use it.
+	rval = darwin_NSGetExecutablePath_getExecPath( buf, &size );
+	if( rval < 0 ) {
 			// No handy function that does it for us, so instead we
 			// use a slightly more convoluted method...
 		rval = darwin_NSGetArgv_getExecPath( buf, &size );
diff --git a/src/condor_utils/network_adapter.cpp b/src/condor_utils/network_adapter.cpp
index 77c7183..df29045 100644
--- a/src/condor_utils/network_adapter.cpp
+++ b/src/condor_utils/network_adapter.cpp
@@ -102,6 +102,7 @@ NetworkAdapterBase::createNetworkAdapter ( const char *sinful_or_name,
 
 	return adapter;
 #else
+	if (is_primary) {} // Done to suppress compiler warnings
 	return NULL;
 # endif
 
diff --git a/src/condor_utils/open_files_in_pid.cpp b/src/condor_utils/open_files_in_pid.cpp
index 9976d7c..c551523 100644
--- a/src/condor_utils/open_files_in_pid.cpp
+++ b/src/condor_utils/open_files_in_pid.cpp
@@ -47,7 +47,7 @@ set<MyString> open_files_in_pid(pid_t pid)
 	}
 
 #else
-
+	if (pid) {} // Done to suppress compiler warnings
 	EXCEPT("open_files(): Only available for LINUX!");
 
 #endif
diff --git a/src/condor_utils/selector.cpp b/src/condor_utils/selector.cpp
index cad514c..baa1acf 100644
--- a/src/condor_utils/selector.cpp
+++ b/src/condor_utils/selector.cpp
@@ -174,6 +174,8 @@ describe_fd(int fd) {
   link_buf[end] = '\0';
   return strdup(link_buf);
  cleanup:
+#else
+  if (fd) {} // Done to suppress compiler warnings
 #endif
   return strdup("");
 }
diff --git a/src/condor_utils/stat_struct.h b/src/condor_utils/stat_struct.h
index 61faffa..338896b 100644
--- a/src/condor_utils/stat_struct.h
+++ b/src/condor_utils/stat_struct.h
@@ -23,7 +23,7 @@
 #include "config.h"
 
 	// Define a common "struct stat" type
-#if HAVE_STAT64
+#if HAVE_STAT64 && !defined(_DARWIN_USE_64_BIT_INODE)
 typedef struct stat64 StatStructType;
 #elif HAVE__STATI64	/* Win32 */
 typedef struct _stati64 StatStructType;
diff --git a/src/condor_utils/stat_wrapper.cpp b/src/condor_utils/stat_wrapper.cpp
index 53c7621..1f9b01f 100644
--- a/src/condor_utils/stat_wrapper.cpp
+++ b/src/condor_utils/stat_wrapper.cpp
@@ -34,7 +34,7 @@ extern "C" {
 #endif
 
 // These are the actual stat functions that we'll use below
-#if defined(HAVE_STAT64)
+#if defined(HAVE_STAT64) && !defined(_DARWIN_USE_64_BIT_INODE)
 #  define STAT_FUNC stat64
    const char *STAT_NAME = "stat64";
 #elif defined(HAVE__STATI64)
@@ -46,7 +46,7 @@ extern "C" {
 #endif
 
 // Ditto for lstat.  NOTE: We fall back to stat if there is no lstat
-#if defined(HAVE_LSTAT64)
+#if defined(HAVE_LSTAT64) && !defined(_DARWIN_USE_64_BIT_INODE)
 #  define LSTAT_FUNC lstat64
    const char *LSTAT_NAME = "lstat64";
 #  define HAVE_AN_LSTAT
@@ -65,7 +65,7 @@ extern "C" {
 #endif
 
 // These are the actual fstat functions that we'll use below
-#if defined(HAVE_FSTAT64)
+#if defined(HAVE_FSTAT64) && !defined(_DARWIN_USE_64_BIT_INODE)
 #  define FSTAT_FUNC fstat64
    const char *FSTAT_NAME = "fstat64";
 #elif defined(HAVE__FSTATI64)
