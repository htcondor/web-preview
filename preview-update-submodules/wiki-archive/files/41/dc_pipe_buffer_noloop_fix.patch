diff --git a/src/condor_daemon_core.V6/HookClientMgr.cpp b/src/condor_daemon_core.V6/HookClientMgr.cpp
index f38fa40..ab902a6 100644
--- a/src/condor_daemon_core.V6/HookClientMgr.cpp
+++ b/src/condor_daemon_core.V6/HookClientMgr.cpp
@@ -107,7 +107,6 @@ HookClientMgr::spawn(HookClient* client, ArgList* args, MyString *hook_stdin, pr
     if (hook_stdin && hook_stdin->Length()) {
 		daemonCore->Write_Stdin_Pipe(pid, hook_stdin->Value(),
 									 hook_stdin->Length());
-		daemonCore->Close_Stdin_Pipe(pid);
 	}
 
 	if (wants_output) {
diff --git a/src/condor_daemon_core.V6/condor_daemon_core.h b/src/condor_daemon_core.V6/condor_daemon_core.h
index bbdbd67..5fabf2a 100644
--- a/src/condor_daemon_core.V6/condor_daemon_core.h
+++ b/src/condor_daemon_core.V6/condor_daemon_core.h
@@ -757,6 +757,8 @@ class DaemonCore : public Service
 	*/
 	int Close_Pipe(int pipe_end);
 
+	int Get_Max_Pipe_Buffer() { return maxPipeBuffer; };
+
 #if !defined(WIN32)
 	/** Get the FD underlying the given pipe end. Returns FALSE
 	 *  if not given a valid pipe end.
@@ -778,7 +780,7 @@ class DaemonCore : public Service
 
 	/**
 	   Write data to the given DC process's stdin pipe.
-	   @see Write_Pipe()
+	   @see pipeFullWrite()
 	*/
 	int Write_Stdin_Pipe(int pid, const void* buffer, int len);
 
@@ -1495,6 +1497,7 @@ class DaemonCore : public Service
 	int pipeHandleTableInsert(PipeHandle);
 	void pipeHandleTableRemove(int);
 	int pipeHandleTableLookup(int, PipeHandle* = NULL);
+	int maxPipeBuffer;
 
 	// this table is for dispatching registered pipes
 	class PidEntry;  // forward reference
@@ -1542,6 +1545,7 @@ class DaemonCore : public Service
 		PidEntry();
 		~PidEntry();
 		int pipeHandler(int pipe_fd);
+		void pipeFullWrite(int pipe_fd);
 
         pid_t pid;
         int new_process_group;
@@ -1564,6 +1568,7 @@ class DaemonCore : public Service
         int was_not_responding;
         int std_pipes[3];  // Pipe handles for automagic DC std pipes.
         MyString* pipe_buf[3];  // Buffers for data written to DC std pipes.
+        int stdin_offset;
 
 		/* the environment variables which allow me the track the pidfamily
 			of this pid (where applicable) */
diff --git a/src/condor_daemon_core.V6/daemon_core.cpp b/src/condor_daemon_core.V6/daemon_core.cpp
index fbca911..86f03fb 100644
--- a/src/condor_daemon_core.V6/daemon_core.cpp
+++ b/src/condor_daemon_core.V6/daemon_core.cpp
@@ -59,7 +59,7 @@ static const char* DEFAULT_INDENT = "DaemonCore--> ";
 static const int MAX_TIME_SKIP = (60*20); //20 minutes
 static const int MIN_FILE_DESCRIPTOR_SAFETY_LIMIT = 20;
 static const int MIN_REGISTERED_SOCKET_SAFETY_LIMIT = 15;
-static const int DC_PIPE_BUF_SIZE = 1024;
+static const int DC_PIPE_BUF_SIZE = 65536;
 
 #include "authentication.h"
 #include "daemon.h"
@@ -344,6 +344,7 @@ DaemonCore::DaemonCore(int PidSize, int ComSize,int SigSize,
 
 	pipeHandleTable = new ExtArray<PipeHandle>(maxPipe);
 	maxPipeHandleIndex = -1;
+	maxPipeBuffer = 10240;
 
 	if(maxReap == 0)
 		maxReap = DEFAULT_MAXREAPS;
@@ -1964,7 +1965,10 @@ DaemonCore::Write_Stdin_Pipe(int pid, const void* buffer, int len) {
 			// TODO-pipe: set custom errno?
 		return -1;
 	}
-	return Write_Pipe(pidinfo->std_pipes[0], buffer, len);
+	pidinfo->pipe_buf[0] = new MyString;
+	*pidinfo->pipe_buf[0] = (char*)buffer;
+	daemonCore->Register_Pipe(pidinfo->std_pipes[0], "DC stdin pipe", (PipeHandlercpp)& DaemonCore::PidEntry::pipeFullWrite, "Guarantee all data written to pipe", pidinfo, HANDLE_WRITE);
+	return 0;
 }
 
 
@@ -2292,6 +2296,10 @@ DaemonCore::reconfig(void) {
 		m_refresh_dns_timer = -1;
 	}
 
+	// Maximum number of bytes read from a stdout/stderr pipes.
+	// Default is 10k (10*1024 bytes)
+	maxPipeBuffer = param_integer("PIPE_BUFFER_MAX", 10240);
+
 		// Grab a copy of our private network name (if any).
 	if (m_private_network_name) {
 		free(m_private_network_name);
@@ -9501,13 +9509,13 @@ DaemonCore::PidEntry::PidEntry() {
 		pipe_buf[i] = NULL;
 		std_pipes[i] = DC_STD_FD_NOPIPE;
 	}
+	stdin_offset = 0;
 }
 
 
 DaemonCore::PidEntry::~PidEntry() {
 	int i;
-	ASSERT(pipe_buf[0] == NULL);
-	for (i=1; i<=2; i++) {
+	for (i=0; i<=2; i++) {
 		if (pipe_buf[i]) {
 			delete pipe_buf[i];
 		}
@@ -9524,8 +9532,7 @@ DaemonCore::PidEntry::~PidEntry() {
 int
 DaemonCore::PidEntry::pipeHandler(int pipe_fd) {
     char buf[DC_PIPE_BUF_SIZE + 1];
-    int bytes;
-    int reads = 0;
+    int bytes, max_read_bytes, max_buffer;
 	int pipe_index = 0;
 	MyString* cur_buf = NULL;
 	char* pipe_desc;
@@ -9549,38 +9556,81 @@ DaemonCore::PidEntry::pipeHandler(int pipe_fd) {
 	cur_buf = pipe_buf[pipe_index];
 
 	// Read until we consume all the data (or loop too many times...)
-    while ((++reads < 10) && (std_pipes[pipe_index] >= 0 )) {
-        bytes = daemonCore->Read_Pipe(pipe_fd, buf, DC_PIPE_BUF_SIZE);
-        if (bytes == 0) {
-            dprintf(D_FULLDEBUG, "DC %s pipe closed for pid %d\n",
-					pipe_desc, (int)pid);
+	max_buffer = daemonCore->Get_Max_Pipe_Buffer();
+
+	max_read_bytes = max_buffer - cur_buf->Length();
+	if (max_read_bytes > DC_PIPE_BUF_SIZE) {
+		max_read_bytes = DC_PIPE_BUF_SIZE;
+	}
+
+	bytes = daemonCore->Read_Pipe(pipe_fd, buf, max_read_bytes);
+	if (bytes > 0) {
+		// Actually read some data, so append it to our MyString.
+		// First, null-terminate the buffer so that sprintf_cat()
+		// doesn't go berserk. This is always safe since buf was
+		// created on the stack with 1 extra byte, just in case.
+		buf[bytes] = '\0';
+		*cur_buf += buf;
+
+		if (cur_buf->Length() >= max_buffer) {
+			dprintf(D_DAEMONCORE, "DC %s pipe closed for "
+					"pid %d because max bytes (%d)"
+					"read\n", pipe_desc, (int)pid,
+					max_buffer);
 			daemonCore->Close_Pipe(pipe_fd);
 			std_pipes[pipe_index] = DC_STD_FD_NOPIPE;
-        }
-        else if (bytes > 0) {
-			// Actually read some data, so append it to our MyString.
-			// First, null-terminate the buffer so that sprintf_cat()
-			// doesn't go berserk. This is always safe since buf was
-			// created on the stack with 1 extra byte, just in case.
-			buf[bytes] = '\0';
-			*cur_buf += buf;
-		}
-		// Negative is an error; check for EWOULDBLOCK
-        else if ((EWOULDBLOCK == errno) || (EAGAIN == errno)) {
-			// No more data -- we're done.
-            break;
-        }
-        else {
-			// Something bad	
-            dprintf(D_ALWAYS|D_FAILURE, "DC pipeHandler: "
-					"read %s failed for pid %d: '%s' (errno: %d)\n",
-					pipe_desc, (int)pid, strerror(errno), errno);
-            return FALSE;
-        }
-    }
+		}
+	}
+	else if ((bytes < 0) && ((EWOULDBLOCK != errno) && (EAGAIN != errno))) {
+		// Negative is an error; If not EWOULDBLOCK or EAGAIN then:
+		// Something bad	
+		dprintf(D_ALWAYS|D_FAILURE, "DC pipeHandler: "
+				"read %s failed for pid %d: '%s' (errno: %d)\n",
+				pipe_desc, (int)pid, strerror(errno), errno);
+		return FALSE;
+	}
 	return TRUE;
 }
 
+
+void
+DaemonCore::PidEntry::pipeFullWrite(int fd)
+{
+	int bytes_written = 0;
+	void* data_left = NULL;
+	int total_len = 0;
+
+	if (pipe_buf[0] != NULL)
+	{
+		data_left = (void*)(((const char*) pipe_buf[0]->Value()) + stdin_offset);
+		total_len = pipe_buf[0]->Length();
+		bytes_written = daemonCore->Write_Pipe(fd, data_left, total_len - stdin_offset);
+		dprintf(D_DAEMONCORE, "DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\n", total_len, bytes_written);
+	}
+
+	if (0 <= bytes_written)
+	{
+		stdin_offset = stdin_offset + bytes_written;
+		if ((stdin_offset == total_len) || (pipe_buf[0] == NULL))
+		{
+			dprintf(D_DAEMONCORE, "DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\n");
+			// All data has been written to the pipe
+			daemonCore->Close_Stdin_Pipe(pid);
+		}
+	}
+	else if (errno != EINTR && errno != EAGAIN)
+	{
+		// Problem writting to the pipe and it's not an acceptable
+		// failure case, so close the pipe
+		dprintf(D_ALWAYS, "DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\n", fd, errno);
+		daemonCore->Close_Stdin_Pipe(pid);
+	}
+	else
+	{
+		dprintf(D_DAEMONCORE|D_FULLDEBUG, "DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\n", fd, errno);
+	}
+}
+
 void DaemonCore::send_invalidate_session ( const char* sinful, const char* sessid ) {
 	if ( !sinful ) {
 		dprintf (D_SECURITY, "DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\n", sessid);
