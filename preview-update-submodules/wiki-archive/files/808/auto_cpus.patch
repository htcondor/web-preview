diff --git a/src/condor_startd.V6/ResAttributes.cpp b/src/condor_startd.V6/ResAttributes.cpp
index a38cc1c..95e011b 100644
--- a/src/condor_startd.V6/ResAttributes.cpp
+++ b/src/condor_startd.V6/ResAttributes.cpp
@@ -1315,7 +1315,10 @@ AvailAttributes::decrement( CpuAttributes* cap )
 	int new_cpus, new_phys_mem;
 	float new_virt_mem, new_disk, floor = -0.000001f;
 	
-	new_cpus = a_num_cpus - cap->c_num_cpus;
+	new_cpus = a_num_cpus;
+	if( cap->c_num_cpus != AUTO_CPU ) {
+		new_cpus -= cap->c_num_cpus;
+	}
 
 	new_phys_mem = a_phys_mem;
 	if( cap->c_phys_mem != AUTO_MEM ) {
@@ -1350,6 +1353,9 @@ AvailAttributes::decrement( CpuAttributes* cap )
     }
 
     a_num_cpus = new_cpus;
+    if( cap->c_num_cpus == AUTO_CPU ) {
+        a_num_cpus_auto_count += 1;
+    }
 
     a_phys_mem = new_phys_mem;
     if( cap->c_phys_mem == AUTO_MEM ) {
@@ -1379,6 +1385,15 @@ AvailAttributes::decrement( CpuAttributes* cap )
 bool
 AvailAttributes::computeAutoShares( CpuAttributes* cap )
 {
+	if( cap->c_num_cpus == AUTO_CPU ) {
+		ASSERT( a_num_cpus_auto_count > 0 );
+		int new_value = a_num_cpus / a_num_cpus_auto_count;
+		if( new_value < 1 ) {
+			return false;
+		}
+		cap->c_num_cpus = new_value;
+	}
+
 	if( cap->c_phys_mem == AUTO_MEM ) {
 		ASSERT( a_phys_mem_auto_count > 0 );
 		int new_value = a_phys_mem / a_phys_mem_auto_count;
diff --git a/src/condor_startd.V6/slot_builder.cpp b/src/condor_startd.V6/slot_builder.cpp
index ec3ffc2..7b206ca 100644
--- a/src/condor_startd.V6/slot_builder.cpp
+++ b/src/condor_startd.V6/slot_builder.cpp
@@ -314,8 +314,9 @@ int compute_cpus( int num_cpus, float share )
 {
 	int cpus;
 	if( IS_AUTO_SHARE(share) ) {
-			// Currently, "auto" for cpus just means 1 cpu per slot.
-		return 1;
+			// This will be replaced later with an even share of whatever
+			// cpus are left over.
+		return AUTO_CPU;
 	}
 	if( share > 0 ) {
 		cpus = (int)floor( share * num_cpus );
