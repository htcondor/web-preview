diff --git a/src/condor_amazon/amazongahp_common.cpp b/src/condor_amazon/amazongahp_common.cpp
index 9bcf100..74ea21a 100644
--- a/src/condor_amazon/amazongahp_common.cpp
+++ b/src/condor_amazon/amazongahp_common.cpp
@@ -26,6 +26,8 @@
 
 static MyString amazon_proxy_host;
 static int amazon_proxy_port;
+static MyString amazon_proxy_user;
+static MyString amazon_proxy_passwd;
 
 static MyString amazon_ec2_url(DEFAULT_AMAZON_EC2_URL);
 
@@ -103,7 +105,25 @@ void set_amazon_proxy_server(const char* url)
 		amazon_proxy_port = 80;
 	}
 
-	int pos = -1; 
+	int pos = -1;
+	
+	/* sateesh added code to even handle proxy username and password */
+	/* This code cannot handle passwords containing @ ? */
+	/* Exact format of AMAZON_HTTP_PROXY is -- http://userid:password@host:port */
+	if( -1 != (pos = amazon_proxy_host.FindChar('@')) ) {
+	  amazon_proxy_user = amazon_proxy_host.Substr(0, pos - 1);
+	  
+	  amazon_proxy_host = amazon_proxy_host.Substr(pos + 1,
+		  amazon_proxy_host.Length());
+
+	  pos = -1;
+	  if( -1 != (pos = amazon_proxy_user.FindChar(':')) ) {
+		amazon_proxy_passwd = amazon_proxy_user.Substr(pos + 1,
+			amazon_proxy_user.Length());
+		amazon_proxy_user = amazon_proxy_user.Substr(0, pos - 1);
+	  }
+	}
+
 	if( -1 != (pos = amazon_proxy_host.FindChar(':')) ) {
 		int port =
 			atoi(amazon_proxy_host.Substr(pos + 1,
@@ -116,15 +136,18 @@ void set_amazon_proxy_server(const char* url)
 		amazon_proxy_host = amazon_proxy_host.Substr(0, pos - 1);
 	}
          
-	dprintf(D_ALWAYS, "Using proxy server, host=%s, port=%d\n", 
-			amazon_proxy_host.Value(), amazon_proxy_port);
+	dprintf(D_ALWAYS, "Using proxy server, host=%s, port=%d user=%s\n", 
+		amazon_proxy_host.Value(), amazon_proxy_port, 
+		amazon_proxy_user.Value());
 }
 
-bool get_amazon_proxy_server(const char* &host_name, int& port )
+bool get_amazon_proxy_server(const char* &host_name, int& port, const char* &user_name, const char* &passwd )
 {
 	if( amazon_proxy_host.IsEmpty() == false ) {
 		host_name = amazon_proxy_host.Value();
 		port = amazon_proxy_port;
+		user_name = amazon_proxy_user.Value();
+		passwd = amazon_proxy_passwd.Value();
 		return true;
 	}
 
diff --git a/src/condor_amazon/amazongahp_common.h b/src/condor_amazon/amazongahp_common.h
index 5b90f9e..817407c 100644
--- a/src/condor_amazon/amazongahp_common.h
+++ b/src/condor_amazon/amazongahp_common.h
@@ -78,7 +78,7 @@ MyString create_success_result( int req_id, StringList *result_list);
 bool set_gahp_log_file(const char* logfile);
 
 void set_amazon_proxy_server(const char* url);
-bool get_amazon_proxy_server(const char* &host_name, int& port );
+bool get_amazon_proxy_server(const char* &host_name, int& port, const char* &user_name, const char* &passwd );
 
 const char* get_ec2_url(void);
 void set_ec2_url(const char* url);
diff --git a/src/condor_amazon/gsoap_commands.cpp b/src/condor_amazon/gsoap_commands.cpp
index ef12b23..689bfea 100644
--- a/src/condor_amazon/gsoap_commands.cpp
+++ b/src/condor_amazon/gsoap_commands.cpp
@@ -156,10 +156,15 @@ AmazonRequest::SetupSoap(void)
 
 	const char* proxy_host_name;
 	int proxy_port = 0;
-	if( get_amazon_proxy_server(proxy_host_name, proxy_port) ) {
+	const char* proxy_user_name;
+	const char* proxy_passwd;
+	if( get_amazon_proxy_server(proxy_host_name, proxy_port, 
+				    proxy_user_name, proxy_passwd) ) {
 		m_soap->proxy_host = proxy_host_name;
 		m_soap->proxy_port = proxy_port; 
-	}
+		m_soap->proxy_userid = proxy_user_name;
+		m_soap->proxy_passwd = proxy_passwd;
+ 	}
 
 	if (soap_register_plugin(m_soap, soap_wsse)) {
 		ParseSoapError("setup WS-Security plugin");
@@ -201,6 +206,16 @@ AmazonRequest::SetupSoap(void)
 		return false;
 	}
 
+	if (soap_ssl_client_context(m_soap, SOAP_SSL_DEFAULT,
+				    NULL,
+				    NULL,
+				    NULL,
+				    param("SOAP_SSL_CA_DIR"),
+				    NULL))
+	{
+	    soap_print_fault(m_soap, stderr);
+	}
+
 	// Timestamp must be signed, the "Timestamp" value just needs
 	// to be non-NULL
 	if( soap_wsse_add_Timestamp(m_soap, "Timestamp", 137)) { 
