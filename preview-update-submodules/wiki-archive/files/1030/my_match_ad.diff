diff --git a/src/condor_schedd.V6/schedd.cpp b/src/condor_schedd.V6/schedd.cpp
index 86d032b505..e81eda1db9 100644
--- a/src/condor_schedd.V6/schedd.cpp
+++ b/src/condor_schedd.V6/schedd.cpp
@@ -384,7 +384,7 @@ match_rec::match_rec( char const* claim_id, char const* p, PROC_ID* job_id,
 			dprintf( D_MACHINE, "*** ClassAd of Matched Resource ***\n" );
 			dPrintAd( D_MACHINE, *my_match_ad );
 			dprintf( D_MACHINE | D_NOHEADER, "*** End of ClassAd ***\n" );
-		}		
+		}
 	} else {
 		my_match_ad = NULL;
 	}
@@ -7779,6 +7779,7 @@ Scheduler::contactStartd( ContactStartdArgs* args )
     // make a subway transfer from slot/match ad to job/request ad, on their way
     // to the claim, and then eventually back around to the negotiator for use in
     // preemption policies:
+    ASSERT(mrec->my_match_ad != NULL);
     CopyAttribute(ATTR_REMOTE_GROUP, *jobAd, *mrec->my_match_ad);
     CopyAttribute(ATTR_REMOTE_NEGOTIATING_GROUP, *jobAd, *mrec->my_match_ad);
     CopyAttribute(ATTR_REMOTE_AUTOREGROUP, *jobAd, *mrec->my_match_ad);
@@ -7910,11 +7911,12 @@ Scheduler::claimedStartd( DCMsgCallback *cb ) {
 			msg_ad->LookupInteger(ATTR_CLUSTER_ID, jobid.cluster);
 			msg_ad->LookupInteger(ATTR_PROC_ID, jobid.proc);
 		}
-	
+
 		std::string last_slot_name;
 		msg->leftover_startd_ad()->LookupString(ATTR_LAST_SLOT_NAME, last_slot_name);
 
 		if (last_slot_name.length() > 0) {
+			ASSERT(mrec->my_match_ad != NULL);
 			match->my_match_ad->Assign(ATTR_NAME, last_slot_name);
 		}
 
@@ -7926,6 +7928,7 @@ Scheduler::claimedStartd( DCMsgCallback *cb ) {
 			// Carry Negotiator Match expressions over from the
 			// match record.
 		size_t len = strlen(ATTR_NEGOTIATOR_MATCH_EXPR);
+		ASSERT(mrec->my_match_ad != NULL);
 		for ( auto itr = match->my_match_ad->begin(); itr != match->my_match_ad->end(); itr++ ) {
 			if( !strncmp(itr->first.c_str(),ATTR_NEGOTIATOR_MATCH_EXPR,len) ) {
 				ExprTree *expr = msg->leftover_startd_ad()->LookupExpr(itr->first.c_str());
@@ -8477,7 +8480,9 @@ Scheduler::swappedClaims( DCMsgCallback *cb )
 
 	std::string active_rec_slot_name;
 	std::string idle_rec_slot_name;
+	ASSERT(active_rec->my_match_ad);
 	active_rec->my_match_ad->LookupString( ATTR_NAME, active_rec_slot_name );
+	ASSERT(idle_rec->my_match_ad);
 	idle_rec->my_match_ad->LookupString( ATTR_NAME, idle_rec_slot_name );
 
 	if ( !strcmp( active_rec_slot_name.c_str(), msg->dest_slot_name() ) ) {
@@ -8528,6 +8533,7 @@ Scheduler::CheckForClaimSwap(match_rec *mrec)
 					this, NULL);
 
 		std::string paired_slot_name;
+		ASSERT(mrec->m_paired_mrec->my_match_ad != NULL);
 		mrec->m_paired_mrec->my_match_ad->LookupString( ATTR_NAME, paired_slot_name );
 
 		// AsyncXfer: TODO Why is this a classy_counted_ptr instead of a regular
@@ -9991,7 +9997,7 @@ Scheduler::spawnJobHandlerRaw( shadow_rec* srec, const char* path,
 
 	{
 		ClassAd *machine_ad = NULL;
-		if(srec->match ) {
+		if(srec->match) {
 			machine_ad = srec->match->my_match_ad;
 		}
 		setNextJobDelay( job_ad, machine_ad );
