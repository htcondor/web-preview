diff --git a/src/condor_starter.V6.1/vanilla_proc.cpp b/src/condor_starter.V6.1/vanilla_proc.cpp
index f89d730..5f85202 100644
--- a/src/condor_starter.V6.1/vanilla_proc.cpp
+++ b/src/condor_starter.V6.1/vanilla_proc.cpp
@@ -296,6 +296,79 @@ VanillaProc::StartJob()
 }
 */
 
+{
+        // Have Condor manage a chroot
+       std::string requested_chroot_name;
+       JobAd->EvalString("RequestedChroot", NULL, requested_chroot_name);
+       const char * allowed_root_dirs = param("NAMED_CHROOT");
+       if (requested_chroot_name.size()) {
+               dprintf(D_FULLDEBUG, "Checking for chroot: %s\n", requested_chroot_name.c_str());
+               StringList chroot_list(allowed_root_dirs);
+               chroot_list.rewind();
+               const char * next_chroot;
+               bool acceptable_chroot = false;
+               std::string requested_chroot;
+               while ( (next_chroot=chroot_list.next()) ) {
+                       MyString chroot_spec(next_chroot);
+                       chroot_spec.Tokenize();
+                       const char * chroot_name = chroot_spec.GetNextToken("=", false);
+                       if (chroot_name == NULL) {
+                               dprintf(D_ALWAYS, "Invalid named chroot: %s\n", chroot_spec.Value());
+                       }
+                       const char * next_dir = chroot_spec.GetNextToken("=", false);
+                       if (chroot_name == NULL) {
+                               dprintf(D_ALWAYS, "Invalid named chroot: %s\n", chroot_spec.Value());
+                       }
+                       dprintf(D_FULLDEBUG, "Considering directory %s for chroot %s.\n", next_dir, chroot_spec.Value());
+                       if (IsDirectory(next_dir) && (strcmp(requested_chroot_name.c_str(), chroot_name) == 0)) {
+                               acceptable_chroot = true;
+                               requested_chroot = next_dir;
+                       }
+               }
+               // TODO: path to chroot MUST be all root-owned, or we have a nice security exploit.
+               // Is this the responsibility of Condor to check, or the sysadmin who set it up?
+               if (!acceptable_chroot) {
+                       return FALSE;
+               }
+               dprintf(D_FULLDEBUG, "Will attempt to set the chroot to %s.\n", requested_chroot.c_str());
+
+               std::string execute_dir(Starter->GetExecuteDir());
+               const char * full_dir = dirscat(requested_chroot, execute_dir);
+               std::string full_dir_str;
+               if (full_dir) {
+                       full_dir_str = full_dir;
+               } else {
+                       dprintf(D_ALWAYS, "Unable to concatenate %s and %s.\n", requested_chroot.c_str(), execute_dir.c_str());
+                       return FALSE;
+               }
+               delete [] full_dir;
+               if (IsDirectory(execute_dir.c_str())) {
+                       if (!mkdir_and_parents_if_needed( full_dir_str.c_str(), S_IRWXU, PRIV_USER )) {
+                               dprintf(D_ALWAYS, "Failed to create scratch directory %s\n", full_dir_str.c_str());
+                               return FALSE;
+                       }
+                       if (!fs_remap) {
+                               fs_remap = new FilesystemRemap();
+                       }
+                       dprintf(D_FULLDEBUG, "Adding mapping: %s -> %s.\n", execute_dir.c_str(), full_dir_str.c_str());
+                       if (fs_remap->AddMapping(execute_dir, full_dir_str)) {
+                               // FilesystemRemap object prints out an error message for us.
+                               return FALSE;
+                       }
+                       dprintf(D_FULLDEBUG, "Adding mapping %s -> %s.\n", requested_chroot.c_str(), "/");
+                       std::string root_str("/");
+                       if (fs_remap->AddMapping(requested_chroot, root_str)) {
+                               return FALSE;
+                       }
+               } else {
+                       dprintf(D_ALWAYS, "Unable to do chroot because working dir %s does not exist.\n", execute_dir.c_str());
+               }
+       } else {
+               dprintf(D_FULLDEBUG, "Value of RequestedChroot is unset.\n");
+       }
+}
+
+
        // On Linux kernel 2.4.19 and later, we can give each job its
        // own FS mounts.
        char * mount_under_scratch = param("MOUNT_UNDER_SCRATCH");
@@ -308,7 +381,9 @@ VanillaProc::StartJob()
                        free(mount_under_scratch);
 
                        mount_list.rewind();
-                       fs_remap = new FilesystemRemap();
+                       if (!fs_remap) {
+                               fs_remap = new FilesystemRemap();
+                       }
                        char * next_dir;
                        while ( (next_dir=mount_list.next()) ) {
                                if (!*next_dir) {
diff --git a/src/condor_utils/filesystem_remap.cpp b/src/condor_utils/filesystem_remap.cpp
index 4b6f1eb..bc4e874 100644
--- a/src/condor_utils/filesystem_remap.cpp
+++ b/src/condor_utils/filesystem_remap.cpp
@@ -103,13 +103,15 @@ int FilesystemRemap::CheckMapping(const std::string & mount_point) {
 }
 
 // This is called within the exec
-// IT CANNOT CALL DPRINTF!
+// It shouldn't call dprintf (arguably - might be safe).
+// Just in case, commented out the dprintf statements.
 int FilesystemRemap::PerformMappings() {
        int retval = 0;
 #if defined(LINUX)
        std::list<pair_strings>::iterator it;
        for (it = m_mappings.begin(); it != m_mappings.end(); it++) {
                if (strcmp(it->second.c_str(), "/") == 0) {
+                       //dprintf(D_FULLDEBUG, "Chroot'ing to %s.\n", it->first.c_str());
                        if ((retval = chroot(it->first.c_str()))) {
                                break;
                        }
@@ -118,6 +120,8 @@ int FilesystemRemap::PerformMappings() {
                        }
                } else if ((retval = mount(it->first.c_str(), it->second.c_str(), NULL, MS_BIND, NULL))) {
                        break;
+               } else {
+                       //dprintf(D_FULLDEBUG, "Re-mount'ing %s->%s.\n", it->first.c_str(), it->second.c_str());
                }
        }
 #endif
