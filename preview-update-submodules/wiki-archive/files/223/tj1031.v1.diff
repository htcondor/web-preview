diff --git a/src/condor_daemon_core.V6/daemon_core_main.cpp b/src/condor_daemon_core.V6/daemon_core_main.cpp
index 4b9e53f..5ab4844 100644
--- a/src/condor_daemon_core.V6/daemon_core_main.cpp
+++ b/src/condor_daemon_core.V6/daemon_core_main.cpp
@@ -723,7 +723,14 @@ drop_core_in_log( void )
 	char* ptmp = param("LOG");
 	if ( ptmp ) {
 		if ( chdir(ptmp) < 0 ) {
-			EXCEPT("cannot chdir to dir <%s>",ptmp);
+#ifdef WIN32
+			if (MATCH == strcmpi(get_mySubSystem()->getName(), "KBDD")) {
+				dprintf (D_FULLDEBUG, "chdir() to LOG directory failed for KBDD, "
+					     "cannot drop core in LOG dir\n");
+				return;
+			}
+#endif
+    	EXCEPT("cannot chdir to dir <%s>",ptmp);
 		}
 	} else {
 		dprintf( D_FULLDEBUG, 
diff --git a/src/condor_util_lib/dprintf.c b/src/condor_util_lib/dprintf.c
index f087d0b..b4ee2b2 100644
--- a/src/condor_util_lib/dprintf.c
+++ b/src/condor_util_lib/dprintf.c
@@ -101,6 +101,14 @@ time_t	DebugLastMod = 0;
 int		DebugUseTimestamps = 0;
 
 /*
+ * When true, don't exit even if we fail to open the debug output file.
+ * Added so that on Win32 the kbdd (which is running as a user) won't quit 
+ * if it does't have access to the directory where log files live.
+ *
+ */
+int      DebugContinueOnOpenFailure = 0;
+
+/*
 ** These arrays must be D_NUMLEVELS+1 in size since we can have a
 ** debug file for each level plus an additional catch-all debug file
 ** at index 0.
@@ -550,7 +558,12 @@ debug_lock(int debug_level, const char *mode)
 		if( DebugFP == NULL ) {
 			if (debug_level > 0) return NULL;
 			save_errno = errno;
-#if !defined(WIN32)
+#ifdef WIN32
+			if (DebugContinueOnOpenFailure) {
+				_set_priv(priv, __FILE__, __LINE__, 0);
+				return NULL;
+			}
+#else
 			if( errno == EMFILE ) {
 				_condor_fd_panic( __LINE__, __FILE__ );
 			}
@@ -870,9 +883,12 @@ open_debug_file(int debug_level, char flags[])
 		if( debug_level == 0 ) {
 			snprintf( msg_buf, sizeof(msg_buf), "Can't open \"%s\"\n",
 					 DebugFile[debug_level] );
-			_condor_dprintf_exit( save_errno, msg_buf );
+
+			if ( ! DebugContinueOnOpenFailure) {
+			    _condor_dprintf_exit( save_errno, msg_buf );
+			}
 		}
-		return NULL;
+		// fp is guaranteed to be NULL here.
 	}
 
 	_set_priv(priv, __FILE__, __LINE__, 0);
diff --git a/src/condor_util_lib/dprintf_config.c b/src/condor_util_lib/dprintf_config.c
index 9390533..91f070f 100644
--- a/src/condor_util_lib/dprintf_config.c
+++ b/src/condor_util_lib/dprintf_config.c
@@ -27,7 +27,7 @@
 
 #include "condor_common.h"
 #include "condor_debug.h"
-#include "condor_string.h"
+#include "condor_string.h" 
 #include "condor_sys_types.h"
 
 #if HAVE_BACKTRACE
@@ -46,6 +46,7 @@ extern char		*_condor_DebugFlagNames[];
 extern int		_condor_dprintf_works;
 extern time_t	DebugLastMod;
 extern int		DebugUseTimestamps;
+extern int      DebugContinueOnOpenFailure;
 
 extern void		_condor_set_debug_flags( const char *strflags );
 extern void		_condor_dprintf_saved_lines( void );
@@ -123,6 +124,19 @@ dprintf_config( const char *subsys )
 		free( pval );
 	}
 
+#ifdef WIN32
+	/*
+	** On Win32 the keyboard daemon runs as a user, so it may not have
+	** access to the log file directory, if we fail to open the log file
+	** we don't want to quit the daemon.  This flag causes debug_lock and
+	** open_debug_file to return NULL rather than EXCEPTing if they cannot
+	** open the log file.  
+	*/
+	if (subsys && (MATCH == strcmpi(subsys, "KBDD"))) {
+		DebugContinueOnOpenFailure = TRUE;
+	}
+#endif
+
 	/*
 	**	If this is not going to the terminal, pick up the name
 	**	of the log file, maximum log size, and the name of the
@@ -245,8 +259,28 @@ dprintf_config( const char *subsys )
 				}
 
 				if( DebugFP == NULL && debug_level == 0 ) {
-					EXCEPT("Cannot open log file '%s'",
-						   DebugFile[debug_level]);
+                   #ifdef WIN32
+					/*
+					** If we could not open the log file, we might want to keep running anyway.
+					** If we do, then set the log filename to NUL so we don't keep trying
+					** (and failing) to open the file.
+					*/
+					if (DebugContinueOnOpenFailure) {
+
+						// change the debug file to point to the NUL device.
+						static const char strDevNull[] = "NUL";//"\\\\.\\Device\\Null";
+						char * psz = (char*)malloc(sizeof(strDevNull));
+						strcpy(psz, strDevNull);
+						if (DebugFile[debug_level]) 
+							free(DebugFile[debug_level]);
+						DebugFile[debug_level] = psz;
+
+					} else
+                   #endif
+					{
+					    EXCEPT("Cannot open log file '%s'",
+						       DebugFile[debug_level]);
+					}
 				}
 
 				if (DebugFP) (void)debug_unlock( debug_level );
