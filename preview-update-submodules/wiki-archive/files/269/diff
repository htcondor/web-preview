diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index fc3afd1..6378813 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -200,6 +200,7 @@ extern const char * const  ATTR_HAS_JOB_AD_FROM_FILE;
 extern const char * const  ATTR_HAS_JOB_DEFERRAL;
 extern const char * const  ATTR_HAS_MPI;
 extern const char * const  ATTR_HAS_OLD_VANILLA;
+extern const char * const  ATTR_HAS_PARROT;
 extern const char * const  ATTR_HAS_PVM;
 extern const char * const  ATTR_HAS_RECONNECT;
 extern const char * const  ATTR_HAS_REMOTE_SYSCALLS;
diff --git a/src/condor_startd.V6/ResAttributes.cpp b/src/condor_startd.V6/ResAttributes.cpp
index beddd90..5d50210 100644
--- a/src/condor_startd.V6/ResAttributes.cpp
+++ b/src/condor_startd.V6/ResAttributes.cpp
@@ -37,6 +37,7 @@ MachAttributes::MachAttributes()
 	m_filesystem_domain = NULL;
 	m_idle_interval = -1;
 	m_ckptpltfrm = NULL;
+	m_parrot = NULL;
 
 	m_clock_day = -1;
 	m_clock_min = -1;
@@ -105,6 +106,7 @@ MachAttributes::~MachAttributes()
 	if( m_uid_domain ) free( m_uid_domain );
 	if( m_filesystem_domain ) free( m_filesystem_domain );
 	if( m_ckptpltfrm ) free( m_ckptpltfrm );
+	if( m_parrot ) free( m_parrot );
 #if defined(WIN32)
 	if( m_local_credd ) free( m_local_credd );
 #endif
@@ -162,6 +164,11 @@ MachAttributes::compute( amask_t how_much )
 			free(m_ckptpltfrm);
 		}
 		m_ckptpltfrm = strdup(sysapi_ckptpltfrm());
+
+		if (m_parrot) {
+			free(m_parrot);
+		}
+		m_parrot = param( "PARROT" );
     }
 
 
@@ -697,6 +704,8 @@ MachAttributes::publish( ClassAd* cp, amask_t how_much)
 
 		cp->Assign( ATTR_CHECKPOINT_PLATFORM, m_ckptpltfrm );
 
+		cp->Assign( ATTR_HAS_PARROT, (m_parrot != NULL) );
+
 #if defined ( WIN32 )
 		// publish the Windows version information
 		if ( m_got_windows_version_info ) {
diff --git a/src/condor_startd.V6/ResAttributes.h b/src/condor_startd.V6/ResAttributes.h
index b8c2d1c..2a1aae4 100644
--- a/src/condor_startd.V6/ResAttributes.h
+++ b/src/condor_startd.V6/ResAttributes.h
@@ -148,6 +148,7 @@ private:
 	char*			m_filesystem_domain;
 	int				m_idle_interval; 	// for D_IDLE dprintf messages
 	char*			m_ckptpltfrm;
+	char*			m_parrot;
 
 #if defined ( WIN32 )
 	int				m_got_windows_version_info;
diff --git a/src/condor_starter.V6.1/os_proc.cpp b/src/condor_starter.V6.1/os_proc.cpp
index 089f6e5..feb58c3 100644
--- a/src/condor_starter.V6.1/os_proc.cpp
+++ b/src/condor_starter.V6.1/os_proc.cpp
@@ -173,7 +173,6 @@ OsProc::StartJob(FamilyInfo* family_info)
 	}
 	
 		// Support USE_PARROT 
-	bool use_parrot = false;
 	if( JobAd->LookupBool( ATTR_USE_PARROT, use_parrot) ) {
 			// Check for parrot executable
 		char *parrot = NULL;
@@ -184,6 +183,7 @@ OsProc::StartJob(FamilyInfo* family_info)
 				free( parrot );
 				return 0;
 			} else {
+				args.AppendArg("-c");
 				args.AppendArg("-d");
 				args.AppendArg("all");
 				args.AppendArg("-o");
@@ -567,6 +567,11 @@ OsProc::StartJob(FamilyInfo* family_info)
 	return 1;
 }
 
+#ifdef WIN32
+#define ERROR_EXIT_CODE 1
+#else
+#define ERROR_EXIT_CODE (SIGTERM)
+#endif
 
 bool
 OsProc::JobReaper( int pid, int status )
@@ -583,6 +588,35 @@ OsProc::JobReaper( int pid, int status )
 			// core files back at the submit site.
 		checkCoreFile();
 	}
+
+	if(use_parrot) {
+		MyString parrot_rval;
+		char tmp[11]; // enough for "abnormal"
+		parrot_rval.sprintf("parrot.rval");
+		FILE *file = safe_fopen_wrapper(parrot_rval.Value(),"r");
+		if(file) {
+			fscanf(file, "%10s", tmp);
+			if(strcmp(tmp, "normal") == MATCH) {
+				dprintf( D_FAILURE|D_ALWAYS, "Job running under parrot exited "
+					"normally.\n");
+			} else if(strcmp(tmp, "noexec") == MATCH) {
+				dprintf( D_FAILURE|D_ALWAYS, "Parrot unable to execute job.\n");
+				status = ERROR_EXIT_CODE;
+			} else if(strcmp(tmp, "nofork") == MATCH) {
+				dprintf( D_FAILURE|D_ALWAYS, "Parrot unable to fork job.\n");
+				status = ERROR_EXIT_CODE;
+			} else if(strcmp(tmp, "abnormal") == MATCH) {
+				fscanf(file, "%10s", tmp);
+				status = strtol(tmp, NULL, 10);
+				dprintf( D_FAILURE|D_ALWAYS, "Job running under parrot exited "
+					"abnormally with status %d.\n", status);
+			}
+		} else {
+			dprintf(D_FAILURE|D_ALWAYS, "Parrot did not leave job return value"
+				"record %s\n", parrot_rval.Value());
+		}
+	}
+
 	return UserProc::JobReaper(pid, status);
 }
 
diff --git a/src/condor_starter.V6.1/os_proc.h b/src/condor_starter.V6.1/os_proc.h
index 18a200d..c495424 100644
--- a/src/condor_starter.V6.1/os_proc.h
+++ b/src/condor_starter.V6.1/os_proc.h
@@ -105,6 +105,7 @@ protected:
 
 	bool is_suspended;
 	bool is_checkpointed;
+	bool use_parrot;
 	
 		/// Number of pids under this OsProc
 	int num_pids;
diff --git a/src/condor_utils/condor_attributes.cpp b/src/condor_utils/condor_attributes.cpp
index bb8f7df..2108e3a 100644
--- a/src/condor_utils/condor_attributes.cpp
+++ b/src/condor_utils/condor_attributes.cpp
@@ -260,6 +260,7 @@ const char * const ATTR_HAS_JOB_DEFERRAL         = "HasJobDeferral";
 const char * const ATTR_HAS_MPI                  = "HasMPI";
 const char * const ATTR_HAS_OLD_VANILLA          = "HasOldVanilla";
 const char * const ATTR_HAS_PVM                  = "HasPVM";
+const char * const ATTR_HAS_PARROT               = "HasParrot";
 const char * const ATTR_HAS_RECONNECT            = "HasReconnect";
 const char * const ATTR_HAS_REMOTE_SYSCALLS      = "HasRemoteSyscalls";
 const char * const ATTR_HAS_TDP                  = "HasTDP";
