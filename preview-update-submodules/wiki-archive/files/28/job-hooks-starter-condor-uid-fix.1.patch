diff --git a/src/condor_c++_util/uids.C b/src/condor_c++_util/uids.C
index 8c25066..ca682f8 100644
--- a/src/condor_c++_util/uids.C
+++ b/src/condor_c++_util/uids.C
@@ -1131,6 +1131,11 @@ _set_priv(priv_state s, char file[], int line, int dologging)
 				"warning: attempted switch out of PRIV_USER_FINAL\n");
 		return PRIV_USER_FINAL;
 	}
+	if (CurrentPrivState == PRIV_CONDOR_FINAL) {
+		dprintf(D_ALWAYS,
+				"warning: attempted switch out of PRIV_CONDOR_FINAL\n");
+		return PRIV_CONDOR_FINAL;
+	}
 	CurrentPrivState = s;
 
 	if (can_switch_ids()) {
diff --git a/src/condor_daemon_core.V6/daemon_core.C b/src/condor_daemon_core.V6/daemon_core.C
index 9ea6d02..b4c12b0 100644
--- a/src/condor_daemon_core.V6/daemon_core.C
+++ b/src/condor_daemon_core.V6/daemon_core.C
@@ -6455,15 +6455,17 @@ int DaemonCore::Create_Process(
 	// job starts in a new console windows.  This allows Condor to 
 	// find the window when we want to send it a WM_CLOSE
 	//
-	if ( priv == PRIV_USER_FINAL ) {
+	if ( priv == PRIV_USER_FINAL || priv == PRIV_CONDOR_FINAL) {
 		create_process_flags |= CREATE_NEW_CONSOLE;
 	}	
 
-   	if ( priv != PRIV_USER_FINAL || !can_switch_ids() ) {
+   	if ( ( priv != PRIV_USER_FINAL && priv != PRIV_CONDOR_FINAL ) ||
+		 !can_switch_ids() ) {
 		cp_result = ::CreateProcess(bIs16Bit ? NULL : executable,(char*)strArgs.Value(),NULL,
 			NULL,inherit_handles, create_process_flags,newenv,cwd,&si,&piProcess);
 	} else {
 		// here we want to create a process as user for PRIV_USER_FINAL
+		// or PRIV_CONDOR_FINAL
 
 			// Get the token for the user
 		HANDLE user_token = priv_state_get_handle();
@@ -6503,12 +6505,17 @@ int DaemonCore::Create_Process(
 			//
 			// "Who's your Daddy ?!?!?!   JEFF B.!"
 
-		// we set_user_priv() here because it really doesn't hurt, and more importantly,
+		// we set_user_priv() or set_condor_priv here because it really doesn't hurt, and more importantly,
 		// if we're using an encrypted execute directory, SYSTEM can't read the user's
 		// executable, so the CreateProcessAsUser() call fails. We avoid this by
-		// flipping into user priv mode first, then making the call, and all is well.
+		// flipping into user or condor priv mode first, then making the call, and all is well.
 
-		priv_state s = set_user_priv();
+		priv_state s;
+		if ( priv == PRIV_USER_FINAL ) {
+			s = set_user_priv();
+		} else {
+			s = set_condor_priv();
+		}
 
 		cp_result = ::CreateProcessAsUser(user_token,bIs16Bit ? NULL : executable,
 			(char *)strArgs.Value(),NULL,NULL, inherit_handles,
@@ -6562,13 +6569,16 @@ int DaemonCore::Create_Process(
 
 		// We have to do some checks on the executable name and the
 		// cwd before we fork.  We want to do these in priv state
-		// specified, but in the user priv if PRIV_USER_FINAL specified.
+		// specified, but in the user priv if PRIV_USER_FINAL specified
+		// or in the condor priv if PRIV_CONDOR_FINAL is specified.
 		// Don't do anything in PRIV_UNKNOWN case.
 
 	priv_state current_priv;
 	if ( priv != PRIV_UNKNOWN ) {
 		if ( priv == PRIV_USER_FINAL ) {
 			current_priv = set_user_priv();
+		} else if ( priv == PRIV_CONDOR_FINAL ) {
+			current_priv = set_condor_priv();
 		} else {
 			current_priv = set_priv( priv );
 		}
