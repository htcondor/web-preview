#! /usr/bin/env perl
use strict;
# Perl 5.003 bombs like crazy on 'use warnings;', so don't.
# use warnings;
use Config;
# this next line is crazy -- it's clearly mac-specific and should be fixed
use lib '/Users/condor/hawkeye_modules';

# Update the module include path
BEGIN
{
    my $Dir = $0;
    if ( $Dir =~ /(.*)\/.*/ )
    {
	push @INC, "$1";
    }
}
use HawkeyePublish;
use HawkeyeLib;

# Global Hawkeye data
my $Hawkeye;

my %uname_cmd = 
(
    "arch", "uname -m",
    "os", "uname -s",
    "os_ver", "uname -r",
);

my %short_os = 
(
    "SunOS", "sol",
    "IRIX64", "irix",
    "Darwin", "macos",
    "OSF1", "osf",
    "AIX", "aix",
    "HP-UX", "hpux",
    "Microsoft Windows XP Professional", "winnt",
    "NT", "winnt",
    "FreeBSD", "freebsd",
    "Ubuntu", "ubuntu"
);

my %short_arch = 
(
    "alpha", "alpha",
    "sun4u", "sun4u",
    "powerpc", "ppc",
    "ppc", "ppc",
    "ppc64", "ppc64",
    "ps3", "ps3",
    "i686", "x86",
    "i386", "x86",
    "i86pc", "i86pc",
    "x86", "x86",
    "ia32", "ia32",
    "ia64", "ia64",
    "x86_64", "x86_64",
    "X86-based PC", "x86",
    "HP-UX", "hppa",
);

# Override the flags based on a system
if ( ($Config{'archname'} =~ m!aix!) or
     ($Config{'archname'} =~ m!aix!) or
     ($Config{'archname'} =~ m!darwin!) ) {
    $uname_cmd{"arch"} = "uname -p";
}

# $Config{'archname'} = PA-RISC2.0 on hpux 10.20
if ( ($Config{'archname'} =~ m!PA!) ) {
    $uname_cmd{"arch"} = "uname -s";
}

Init();
RunIt();

sub Init ()
{
    HawkeyeLib::DoConfig( );

    # Setup the hawkeye stuff
    $Hawkeye = HawkeyePublish->new;
    $Hawkeye->Quiet( 1 );
    $Hawkeye->AutoIndexSet( 0 );
}

sub RunIt ()
{
    my $Hash = HawkeyeHash->new( \$Hawkeye, "" );
    my ($arch, $os, $os_version, $os_sp);

    if ($Config{'archname'} =~ m!MSWin!) {
        my $info_str = `systeminfo.exe`;
        my @info = split /\n/, $info_str;
        $arch = (split /:\s*/, $info[14])[1];
        $os = (split /:\s*/, $info[2])[1];
        $os_version = (split /\./ ,(split /:\s*/, $info[3])[1])[0] . "." .
                      (split /\./ ,(split /:\s*/, $info[3])[1])[1];
        if ($info[3] =~ m/Service Pack/){
            $os_sp = "SP" . (split " ", (split /:\s*/, $info[3])[1])[3];
        }
    }
    else {
        $arch = `$uname_cmd{"arch"}`;
        $os = `$uname_cmd{"os"}`;
        $os_version = `$uname_cmd{"os_ver"}`;

        chomp($arch);
        chomp($os);
        chomp($os_version);
    }

    if ($os =~ m!CYGWIN!) {
        $os_version = substr($os, 10);
        $os = substr($os, 7, 2);
    }

    if ($Config{'archname'} =~ m!aix!) {
        my $major = `uname -v`;
        my $minor = `uname -r`;
        chomp $major;
        chomp $minor;
        $os_version = "$major.$minor";
        
        if( $major == 5 && $minor == 2 ) {
            my $patchlevel = `/usr/sbin/instfix -i | /usr/bin/grep AIX_ML | /usr/bin/tail -1`;
               $patchlevel =~ s/.*([^ ]+_AIX_ML).*/$1/;
               $patchlevel =~ s/5200-//;
               $patchlevel =~ s/_AIX_ML//;
            chomp( $patchlevel );
            # Special case so that the 'ppc_aix_5.2' platform continues
            # to exist.   
            if( $patchlevel != 1 ) {
                $os_version .= "-pl$patchlevel";
            }
        } # end if it's AIX 5.2
    }

    # differentiate IBM PPC64 from Sony PS3
    if ( $arch eq "ppc64" && $os_version =~ /ps3$/ || `grep platform </proc/cpuinfo` =~ /PS3/ ) {
	$arch = "ps3";
    }

    # OpenSolaris: x86 vs. x86/64?
    if ( $arch eq "i86pc" ) {
	my $t = "";
	if ( -x "/usr/bin/isainfo" ) {
	    $t = `/usr/bin/isainfo -kv`;
	    chomp $t;
	}
	$arch = ( $t =~ /64/ ) ? "x86_64" : "x86";
    }

    # Simplify HPUX 11 version string
    if ($Config{'archname'} =~ m!PA!) {
      if ($os_version eq "B.11.11") {
        $os_version = "11";
      }
    }

    # Add a prefix if this is an unmanaged host.
    my $isUnmanagedHost = `/usr/local/condor/bin/condor_config_val NMI_isUnmanagedHost 2> /dev/null`;
    if( $isUnmanagedHost =~ /TRUE/ ) {
        # All of the cases below use $short_arch{ $arch }.  Using
        # a - instead of an _ for great parsing justice.
        $short_arch{ $arch } = "unmanaged-" . $short_arch{ $arch };
    }

    # Use new naming for updated platforms.
    my $isUpdatedHost = `/usr/local/condor/bin/condor_config_val NMI_isUpdatedHost 2> /dev/null`;

    if ( lc($os) eq "linux") {
        my %distro = &get_linux_distro();
        if( $isUnmanagedHost =~ /TRUE/ ) {
            $distro{'version'} =~ s/\.\d+$//;
        }
        if( $isUpdatedHost =~ /TRUE/ ) {
            #  Using a - instead of an _ for great parsing justice.
            $distro{'version'} = $distro{'version'} . "-updated";
        }

        $Hash->Add( "nmi_platform", HawkeyePublish::TypeString, "$short_arch{$arch}_$distro{'short'}_$distro{'version'}" );
    }
    elsif($short_os{$os} eq "macos") { # need something like 'ppc_macos_10.3'
        my $vers = `/usr/bin/sw_vers -productVersion`;
        chomp $vers;
        $vers =~ s/(^\d+\.\d+).*/$1/;
        if( $isUpdatedHost =~ /TRUE/ ) {
            #  Using a - instead of an _ for great parsing justice.
            $vers = $vers . "-updated";
        }

        # MacOS 10.5 is a 64-bit OS.  The following detects if the underlying hardware is x86_64.
        if ( `sysctl -n hw.optional.x86_64` == 1 ) {
          $arch = "x86_64";
        }


        $Hash->Add( "nmi_platform", HawkeyePublish::TypeString, "$short_arch{$arch}_$short_os{$os}_$vers" );
    }
    elsif($short_os{$os} eq "irix") {
        $Hash->Add( "nmi_platform", HawkeyePublish::TypeString, "$short_os{$os}_$os_version" );
    }
    ##
    ## FreeBSD
    ## Andy - 06.06.06 (!!)
    ##
    elsif ( lc($os) eq "freebsd" ) {
        $os_version =~ s/\.[\d]-RELEASE//i;
        $Hash->Add( "nmi_platform", HawkeyePublish::TypeString, "$short_arch{$arch}_$short_os{$os}_$os_version" );
    }
    else {
        $Hash->Add( "nmi_platform", HawkeyePublish::TypeString, "$short_arch{$arch}_$short_os{$os}_$os_version" );
    }

    # Ok, summary is done...
    $Hash->Store( );

    # Publish
    $Hawkeye->Publish( );
}

sub get_linux_distro () {
    my $issue_file;
    if (-f "/etc/rocks-release") {
        $issue_file = "/etc/rocks-release";
    }
    else {
        $issue_file = "/etc/issue";
    }
    open(DISTRO, $issue_file) || die "Unable to open $issue_file";
    my %distro =
    ( "long", "unknown",
      "short", "unknown",
      "version", "unknown",
    );

    while(<DISTRO>) {
        next if /^(\s)*$/;      # skip blank lines
        chomp;
        my $line = $_;
        my @distro_strs = split(" ", $line);

        if($line =~ m!Red Hat!) {
            if($line =~ m!Red Hat Enterprise Linux AS release!) {
                $distro{"long"} = "$distro_strs[0]$distro_strs[1]$distro_strs[4]";
                $distro{"version"} = "$distro_strs[6]";
                $distro{"short"} = "rhas";
            }
            elsif($line =~ m!Red Hat Enterprise Linux ES release!) {
                $distro{"long"} = "$distro_strs[0]$distro_strs[1]$distro_strs[4]";
                $distro{"version"} = "$distro_strs[6]";
                $distro{"short"} = "rhes";
            }
            elsif($line =~ m!Red Hat Enterprise Linux WS release!) {
                $distro{"long"} = "$distro_strs[0]$distro_strs[1]$distro_strs[4]";
                $distro{"version"} = "$distro_strs[6]";
                $distro{"short"} = "rhws";
            }
            elsif($line =~ m!Red Hat Enterprise Linux Server release!) {
                $distro{"long"} = "$distro_strs[0]$distro_strs[1]$distro_strs[4]";
                $distro{"version"} = "$distro_strs[6]";
                $distro{"short"} = "rhap";
            }           
            else {
                $distro{"long"} = "$distro_strs[0]$distro_strs[1]";
                $distro{"version"} = "$distro_strs[4]";
                $distro{"short"} = "rh";
            }
        }
        elsif($line =~ m!Rocks !) {
            $distro{"long"} = "$distro_strs[0]";
            $distro{"version"} = "$distro_strs[2]";
            $distro{"short"} = "rocks";
        }
        elsif($line =~ m!SuSE! || $line =~ m!SUSE!) {
            if ($line =~ m!Enterprise Server!) {
              $distro{"long"} = "$distro_strs[3]";
              $distro{"version"} = "$distro_strs[6]";

            } elsif ($line =~ m!openSUSE!) {
              $distro{"long"} = "$distro_strs[3]";
              $distro{"version"} = "$distro_strs[3]";

            } else {
              $distro{"long"} = "$distro_strs[3]";
              $distro{"version"} = "$distro_strs[4]";
            }

            if($line =~ m!SuSE SLES! || $line =~ m!Enterprise!) {
                $distro{"short"} = "sles";
            }
            else {
                $distro{"short"} = "suse";
            }
        }
        elsif($line =~ m!Fedora Core!) {
            $distro{"long"} = "$distro_strs[0] $distro_strs[1]";
            $distro{"version"} = "$distro_strs[3]";
            $distro{"short"} = "fc";
        }
        elsif($line =~ m!Fedora release!) {
            $distro{"long"} = "$distro_strs[0]";
            $distro{"version"} = "$distro_strs[2]";
            $distro{"short"} = "fedora";
        }
        elsif($line =~ m!Tao Linux!) {
            $distro{"long"} = "$distro_strs[0]";
            $distro{"version"} = "$distro_strs[3]";
            $distro{"short"} = "tao";
        }
        elsif($line =~ m!Scientific Linux!) {
            $distro{"long"} = "Scientific Linux";
	    $distro{"version"} = 'xxx';
	    if ($line =~ m/(\d)/) {
              $distro{"version"} = $1;
            }
	    if ($line =~ m/CERN/i) {
	      $distro{"short"} = "slc";
	    } elsif ($line =~ m/Fermi/i) {
	      $distro{"short"} = "slf";
	    } else {
              $distro{"short"} = "sl";
            
	      if ($line =~ m/(\d)/) {
                $distro{"version"} = "$distro_strs[4]";
              }
	    }
        }
        elsif ($line =~ m!CentOS!) {  
            $distro{"long"} = "$distro_strs[0]";
            $distro{"version"} = "$distro_strs[2]";
            $distro{"short"} = "cent";   
        } 

        elsif ($line =~ m!Yellow!) {
            $distro{"long"} = "$distro_strs[0] $distro_strs[1]";
            $distro{"version"} = "$distro_strs[4]";
            $distro{"short"} = "ydl";
        } 
        elsif($line =~ m!Debian!) {
            $distro{"long"} = "$distro_strs[0]";
            $distro{"version"} = "$distro_strs[2]";
            $distro{"short"} = "deb";
        }
        elsif($line =~ m!Ubuntu!) {
            $distro{"long"} = "$distro_strs[0]";
            $distro{"version"} = "$distro_strs[1]";
            $distro{"short"} = "ubuntu";
        }

        return %distro;
    }
}

sub trim () {
    my @str = @_;
    return &ltrim(&rtrim(@str));
}

sub rtrim () { 
    my @str = @_;
    for (@str) {
        s/\s+$//;
    }   
    return @str == 1 ? $str[0] : @str;
}
    
sub ltrim () {
    my @str = @_;
    for (@str) {
        s/^\s+//;
    }
    return @str == 1 ? $str[0] : @str;
}
