From 0d8866006a43598b5ae62c37cc179606452a30fd Mon Sep 17 00:00:00 2001
From: Doug Strain <dstrain@google.com>
Date: Sat, 30 Dec 2017 18:48:47 +0000
Subject: [PATCH 1/1] Adding managed group support to GCE GAHP

---
 src/gce_gahp/gceCommands.cpp     | 434 ++++++++++++++++++++++++++++++++++++++-
 src/gce_gahp/gceCommands.h       |  22 ++
 src/gce_gahp/gce_io_checkfn.cpp  |  41 +++-
 src/gce_gahp/io_loop_pthread.cpp |   6 +
 4 files changed, 499 insertions(+), 4 deletions(-)

diff --git a/src/gce_gahp/gceCommands.cpp b/src/gce_gahp/gceCommands.cpp
index f017172..82e11ef 100644
--- a/src/gce_gahp/gceCommands.cpp
+++ b/src/gce_gahp/gceCommands.cpp
@@ -429,6 +429,77 @@ bool GetAccessToken( const string &auth_file, string &access_token,
        }
 }
 
+// Repeatedly calls GCP for operation status until the operation
+// is completed.  Returns an failure result string if not successful
+// or a success result if successful
+string verifyRequest(string &serviceUrl, int requestID, 
+                                       string auth_file, bool require_instance_id)
+{
+       string status;
+       string instance_id;
+       string err_msg;
+       bool in_err = false;
+       do {
+
+               // Give the operation some time to complete.
+               // TODO Is there a better way to do this?
+               gce_gahp_release_big_mutex();
+               sleep( 5 );
+               gce_gahp_grab_big_mutex();
+
+               GceRequest op_request;
+               op_request.serviceURL = serviceUrl;
+               op_request.requestMethod = "GET";
+
+               if ( !GetAccessToken( auth_file, op_request.accessToken,
+                                                         op_request.errorMessage ) ) {
+                       return create_failure_result( requestID,
+                                                                                                  op_request.errorMessage.c_str() );
+               }
+
+               if ( !op_request.SendRequest() ) {
+                       // TODO Fix construction of error message
+                       return create_failure_result( requestID,
+                                                               op_request.errorMessage.c_str(),
+                                                               op_request.errorCode.c_str() );
+               }
+
+               int nesting = 0;
+               string key;
+               string value;
+               const char *pos = op_request.resultString.c_str();
+               while ( ParseJSONLine( pos, key, value, nesting ) ) {
+                       if ( key == "status" ) {
+                               status = value;
+                       } else if ( key == "error" ) {
+                               in_err = true;
+                       } else if ( key == "warnings" ) {
+                               in_err = false;
+                       } else if ( key == "message" && in_err ) {
+                               err_msg = value;
+                       } else if ( key == "targetId" ) {
+                               instance_id = value;
+                       }
+               }
+       } while ( status != "DONE" );
+
+       if ( !err_msg.empty() ) {
+               return create_failure_result( requestID, err_msg.c_str() );
+       }
+
+       if ( require_instance_id ) {
+               if ( instance_id.empty() ) {
+                       return create_failure_result( requestID,
+                                                               "Completed instance insert has no id" );
+               }
+               StringList reply;
+               reply.append( instance_id.c_str() );
+               return create_success_result( requestID, &reply );
+    } else {
+               return create_success_result( requestID, NULL );
+       }
+}
+
 
 //
 // "This function gets called by libcurl as soon as there is data received
@@ -1051,7 +1122,7 @@ GceInstanceDelete::GceInstanceDelete() { }
 
 GceInstanceDelete::~GceInstanceDelete() { }
 
-// Expecting:GCE_INSTACE_DELETE <req_id> <serviceurl> <authfile> <project> <zone> <instance_name>
+// Expecting:GCE_INSTANCE_DELETE <req_id> <serviceurl> <authfile> <project> <zone> <instance_name>
 bool GceInstanceDelete::workerFunction(char **argv, int argc, string &result_string) {
        assert( strcasecmp( argv[0], "GCE_INSTANCE_DELETE" ) == 0 );
 
@@ -1284,3 +1355,364 @@ bool GceInstanceList::workerFunction(char **argv, int argc, string &result_strin
                }
        }
 }
+
+// ---------------------------------------------------------------------------
+
+GceGroupInsert::GceGroupInsert() { }
+
+GceGroupInsert::~GceGroupInsert() { }
+
+// Expecting GCE_GROUP_INSERT <req_id> <serviceurl> <authfile> <project> <zone>
+//     <group_name> <machine_type> <image> <metadata> <metadata_file>
+//     <preemptible> <json_file> <count> <duration_hours>
+
+bool GceGroupInsert::workerFunction(char **argv, int argc, string &result_string) {
+       assert( strcasecmp( argv[0], "GCE_GROUP_INSERT" ) == 0 );
+
+       int requestID;
+       get_int( argv[1], & requestID );
+
+       if( ! verify_number_args( argc, 15 ) ) {
+               result_string = create_failure_result( requestID, "Wrong_Argument_Number" );
+               dprintf( D_ALWAYS, "Wrong number of arguments (%d should be >= %d) to %s\n",
+                                argc, 15, argv[0] );
+               return false;
+       }
+
+       // Fill in required attributes & parameters.
+       GceGroupInsert insert_request;
+       insert_request.serviceURL = argv[2];
+       insert_request.serviceURL += "/projects/";
+       insert_request.serviceURL += argv[4];
+       insert_request.serviceURL += "/global/instanceTemplates";
+       insert_request.requestMethod = "POST";
+
+       std::map<string, string> metadata;
+       if ( strcasecmp( argv[9], NULLSTRING ) ) {
+               string key;
+               string value;
+               const char *pos = argv[9];
+               while ( ParseMetadataLine( pos, key, value, ',' ) ) {
+                       metadata[key] = value;
+               }
+       }
+       if ( strcasecmp( argv[10], NULLSTRING ) ) {
+               string file_contents;
+               if ( !readShortFile( argv[10], file_contents ) ) {
+                       result_string = create_failure_result( requestID, "Failed to open metadata file" );
+                       return true;
+               }
+               string key;
+               string value;
+               const char *pos = file_contents.c_str();
+               while( ParseMetadataLine( pos, key, value, '\n' ) ) {
+                       metadata[key] = value;
+               }
+       }
+       string json_file_contents;
+       if ( strcasecmp( argv[12], NULLSTRING ) ) {
+               if ( !readShortFile( argv[12], json_file_contents ) ) {
+                       result_string = create_failure_result( requestID, "Failed to open additional JSON file" );
+                       return true;
+               }
+       }
+
+       insert_request.requestBody = "{\n";
+       insert_request.requestBody += " \"name\": \"";
+       insert_request.requestBody += argv[6];
+       insert_request.requestBody += "-template\",\n";
+       insert_request.requestBody += "  \"properties\": \n";
+       insert_request.requestBody += "  {\n";
+       insert_request.requestBody += "   \"machineType\": \"";
+       insert_request.requestBody += argv[7];
+       insert_request.requestBody += "\",\n";
+       insert_request.requestBody += "    \"scheduling\":\n";
+       insert_request.requestBody += "    {\n";
+       insert_request.requestBody += "      \"preemptible\": ";
+       insert_request.requestBody += argv[11];
+       insert_request.requestBody += "\n    },\n";
+       insert_request.requestBody += "   \"disks\": [\n  {\n";
+       insert_request.requestBody += "     \"boot\": true,\n";
+       insert_request.requestBody += "     \"autoDelete\": true,\n";
+       insert_request.requestBody += "     \"initializeParams\": {\n";
+       insert_request.requestBody += "      \"sourceImage\": \"";
+       insert_request.requestBody += argv[8];
+       insert_request.requestBody += "\"\n";
+       insert_request.requestBody += "   }\n  }\n ],\n";
+       if ( !metadata.empty() ) {
+               insert_request.requestBody += " \"metadata\": {\n";
+               insert_request.requestBody += "  \"items\": [\n";
+
+               for ( map<string, string>::const_iterator itr = metadata.begin(); itr != metadata.end(); itr++ ) {
+                       if ( itr != metadata.begin() ) {
+                               insert_request.requestBody += ",\n";
+                       }
+                       insert_request.requestBody += "   {\n    \"key\": \"";
+                       insert_request.requestBody += itr->first;
+                       insert_request.requestBody += "\",\n";
+                       insert_request.requestBody += "    \"value\": \"";
+                       insert_request.requestBody += escapeJSONString( itr->second.c_str() );
+                       insert_request.requestBody += "\"\n   }";
+               }
+
+               insert_request.requestBody += "\n  ]\n";
+               insert_request.requestBody += " },\n";
+       }
+       insert_request.requestBody += " \"networkInterfaces\": [\n  {\n";
+       insert_request.requestBody += "   \"network\": \"";
+       insert_request.requestBody += argv[2];
+       insert_request.requestBody += "/projects/";
+       insert_request.requestBody += argv[4];
+       insert_request.requestBody += "/global/networks/default\",\n";
+       insert_request.requestBody += "   \"accessConfigs\": [\n    {\n";
+       insert_request.requestBody += "     \"name\": \"External NAT\",\n";
+       insert_request.requestBody += "     \"type\": \"ONE_TO_ONE_NAT\"\n";
+       insert_request.requestBody += "    }\n   ]\n";
+       insert_request.requestBody += "  }\n ]";
+       insert_request.requestBody += "}\n}\n";
+
+       if ( !json_file_contents.empty() ) {
+               classad::ClassAd instance_ad;
+               classad::ClassAd custom_ad;
+               classad::ClassAdJsonParser parser;
+               classad::ClassAdJsonUnParser unparser;
+               string wrap_custom_attrs = "{" + json_file_contents + "}";
+
+               if ( !parser.ParseClassAd( insert_request.requestBody, instance_ad, true ) ) {
+                       result_string = create_failure_result( requestID,
+                                                                       "Failed to parse instance description" );
+                       return true;
+               }
+
+               if ( !parser.ParseClassAd( wrap_custom_attrs, custom_ad, true ) ) {
+                       result_string = create_failure_result( requestID,
+                                                                       "Failed to parse custom attributes" );
+                       return true;
+               }
+
+               instance_ad.Update( custom_ad );
+
+               insert_request.requestBody.clear();
+               unparser.Unparse( insert_request.requestBody, &instance_ad );
+       }
+
+       string auth_file = argv[3];
+       if ( !GetAccessToken( auth_file, insert_request.accessToken,
+                                                 insert_request.errorMessage ) ) {
+               result_string = create_failure_result( requestID,
+                                                                                          insert_request.errorMessage.c_str() );
+               return true;
+       }
+
+       // Send the request.
+       if( ! insert_request.SendRequest() ) {
+               dprintf( D_ALWAYS, "Error is '%s'\n", insert_request.errorMessage.c_str() );
+               // TODO Fix construction of error message
+               result_string = create_failure_result( requestID,
+                                                       insert_request.errorMessage.c_str(),
+                                                       insert_request.errorCode.c_str() );
+               return true;
+       }
+
+       string op_name;
+       string key;
+       string value;
+       int nesting = 0;
+
+       const char *pos = insert_request.resultString.c_str();
+       while( ParseJSONLine( pos, key, value, nesting ) ) {
+               if ( key == "name" ) {
+                       op_name = value;
+                       break;
+               }
+       }
+
+       // Wait for instance template to be created
+       string opUrl = argv[2];
+       opUrl += "/projects/";
+       opUrl += argv[4];
+       opUrl += "/global/operations/";
+       opUrl += op_name;
+       verifyRequest(opUrl, requestID, auth_file, false);
+
+       // Now construct managed instance group
+       GceRequest group_request;
+       group_request.serviceURL = argv[2];
+       group_request.serviceURL += "/projects/";
+       group_request.serviceURL += argv[4];
+       group_request.serviceURL += "/zones/";
+       group_request.serviceURL += argv[5];
+       group_request.serviceURL += "/instanceGroupManagers";
+       group_request.requestMethod = "POST";
+       group_request.requestBody = "{\n";
+       group_request.requestBody += " \"name\": \"";
+       group_request.requestBody += argv[6];
+       group_request.requestBody += "-group\",\n";
+       group_request.requestBody += " \"instanceTemplate\": \"";
+       group_request.requestBody += "/projects/";
+       group_request.requestBody += argv[4];
+       group_request.requestBody += "/global/instanceTemplates/";
+       group_request.requestBody += argv[6];
+       group_request.requestBody += "-template\",\n";
+       group_request.requestBody += " \"baseInstanceName\": \"";
+       group_request.requestBody += argv[6];
+       group_request.requestBody += "-instance\",\n";
+       group_request.requestBody += " \"targetSize\": \"";
+       group_request.requestBody += argv[13];
+       group_request.requestBody += "\"\n";
+       group_request.requestBody += "}\n";
+
+
+       if ( !GetAccessToken( auth_file, group_request.accessToken,
+                                                 group_request.errorMessage ) ) {
+               result_string = create_failure_result( requestID,
+                                                                                          group_request.errorMessage.c_str() );
+               return true;
+       }
+
+       if ( !group_request.SendRequest() ) {
+               result_string = create_failure_result( requestID,
+                                                       group_request.errorMessage.c_str(),
+                                                       group_request.errorCode.c_str() );
+               return true;
+       }
+
+       nesting = 0;
+       pos = group_request.resultString.c_str();
+       while( ParseJSONLine( pos, key, value, nesting ) ) {
+               if ( key == "name" ) {
+                       op_name = value;
+                       break;
+               }
+       }
+
+       // Wait for group template to be created
+       opUrl = argv[2];
+       opUrl += "/projects/";
+       opUrl += argv[4];
+       opUrl += "/zones/";
+       opUrl += argv[5];
+       opUrl += "/operations/";
+       opUrl += op_name;
+       result_string = verifyRequest(opUrl, requestID, auth_file, false);
+
+       return true;
+}
+
+
+// ---------------------------------------------------------------------------
+
+GceGroupDelete::GceGroupDelete() { }
+
+GceGroupDelete::~GceGroupDelete() { }
+
+// Expecting GCE_GROUP_DELETE <req_id> <serviceurl> <authfile> <project> <zone> <group_name>
+
+bool GceGroupDelete::workerFunction(char **argv, int argc, string &result_string) {
+       assert( strcasecmp( argv[0], "GCE_GROUP_DELETE" ) == 0 );
+
+       int requestID;
+       get_int( argv[1], & requestID );
+
+       if( ! verify_number_args( argc, 7 ) ) {
+               result_string = create_failure_result( requestID, "Wrong_Argument_Number" );
+               dprintf( D_ALWAYS, "Wrong number of arguments (%d should be >= %d) to %s\n",
+                                argc, 7, argv[0] );
+               return false;
+       }
+
+       // Now construct managed instance group
+       GceRequest group_request;
+       group_request.serviceURL = argv[2];
+       group_request.serviceURL += "/projects/";
+       group_request.serviceURL += argv[4];
+       group_request.serviceURL += "/zones/";
+       group_request.serviceURL += argv[5];
+       group_request.serviceURL += "/instanceGroupManagers/";
+       group_request.serviceURL += argv[6];
+       group_request.serviceURL += "-group";
+       group_request.requestMethod = "DELETE";
+
+       string auth_file = argv[3];
+       if ( !GetAccessToken( auth_file, group_request.accessToken,
+                                                 group_request.errorMessage ) ) {
+               result_string = create_failure_result( requestID,
+                                                                                          group_request.errorMessage.c_str() );
+               return true;
+       }
+
+       if ( !group_request.SendRequest() ) {
+               result_string = create_failure_result( requestID,
+                                                       group_request.errorMessage.c_str(),
+                                                       group_request.errorCode.c_str() );
+               return true;
+       }
+
+       string op_name;
+       string key;
+       string value;
+       int nesting = 0;
+
+       const char *pos = group_request.resultString.c_str();
+       while( ParseJSONLine( pos, key, value, nesting ) ) {
+               if ( key == "name" ) {
+                       op_name = value;
+                       break;
+               }
+       }
+
+       // Wait for group template to be created
+       string opUrl = argv[2];
+       opUrl += "/projects/";
+       opUrl += argv[4];
+       opUrl += "/zones/";
+       opUrl += argv[5];
+       opUrl += "/operations/";
+       opUrl += op_name;
+       verifyRequest(opUrl, requestID, auth_file, false);
+
+       // Fill in required attributes & parameters.
+       GceGroupDelete delete_request;
+       delete_request.serviceURL = argv[2];
+       delete_request.serviceURL += "/projects/";
+       delete_request.serviceURL += argv[4];
+       delete_request.serviceURL += "/global/instanceTemplates/";
+       delete_request.serviceURL += argv[6];
+       delete_request.serviceURL += "-template";
+       delete_request.requestMethod = "DELETE";
+
+       if ( !GetAccessToken( auth_file, delete_request.accessToken,
+                                                 delete_request.errorMessage ) ) {
+               result_string = create_failure_result( requestID,
+                                                                                          delete_request.errorMessage.c_str() );
+               return true;
+       }
+
+       // Send the request.
+       if( ! delete_request.SendRequest() ) {
+               dprintf( D_ALWAYS, "Error is '%s'\n", delete_request.errorMessage.c_str() );
+               // TODO Fix construction of error message
+               result_string = create_failure_result( requestID,
+                                                       delete_request.errorMessage.c_str(),
+                                                       delete_request.errorCode.c_str() );
+               return true;
+       }
+
+       nesting = 0;
+       pos = delete_request.resultString.c_str();
+       while( ParseJSONLine( pos, key, value, nesting ) ) {
+               if ( key == "name" ) {
+                       op_name = value;
+                       break;
+               }
+       }
+
+       // Wait for instance template to be created
+       opUrl = argv[2];
+       opUrl += "/projects/";
+       opUrl += argv[4];
+       opUrl += "/global/operations/";
+       opUrl += op_name;
+       verifyRequest(opUrl, requestID, auth_file, false);
+       return true;
+}
diff --git a/src/gce_gahp/gceCommands.h b/src/gce_gahp/gceCommands.h
index 0bc377f..2890f7f 100644
--- a/src/gce_gahp/gceCommands.h
+++ b/src/gce_gahp/gceCommands.h
@@ -27,6 +27,8 @@
 #define GCE_COMMAND_INSTANCE_INSERT            "GCE_INSTANCE_INSERT"
 #define GCE_COMMAND_INSTANCE_DELETE            "GCE_INSTANCE_DELETE"
 #define GCE_COMMAND_INSTANCE_LIST              "GCE_INSTANCE_LIST"
+#define GCE_COMMAND_GROUP_INSERT               "GCE_GROUP_INSERT"
+#define GCE_COMMAND_GROUP_DELETE               "GCE_GROUP_DELETE"
 
 #define GENERAL_GAHP_ERROR_CODE             "GAHPERROR"
 #define GENERAL_GAHP_ERROR_MSG              "GAHP_ERROR"
@@ -91,4 +93,24 @@ class GceInstanceList : public GceRequest {
        static bool workerFunction( char **argv, int argc, std::string &result_string );
 };
 
+class GceGroupInsert : public GceRequest {
+ public:
+       GceGroupInsert();
+       virtual ~GceGroupInsert();
+
+       static bool ioCheck( char **argv, int argc );
+       static bool workerFunction( char **argv, int argc, std::string &result_string );
+};
+
+class GceGroupDelete : public GceRequest {
+ public:
+       GceGroupDelete();
+       virtual ~GceGroupDelete();
+
+       static bool ioCheck( char **argv, int argc );
+       static bool workerFunction( char **argv, int argc, std::string &result_string );
+};
+
+
+
 #endif
diff --git a/src/gce_gahp/gce_io_checkfn.cpp b/src/gce_gahp/gce_io_checkfn.cpp
index 7eadd98..1196361 100644
--- a/src/gce_gahp/gce_io_checkfn.cpp
+++ b/src/gce_gahp/gce_io_checkfn.cpp
@@ -34,9 +34,9 @@ bool GcePing::ioCheck(char **argv, int argc)
                verify_string_name(argv[5]);
 }
 
-// Expecting:GCE_INSTACE_INSERT <req_id> <serviceurl> <authfile> <project> <zone>
+// Expecting:GCE_INSTANCE_INSERT <req_id> <serviceurl> <authfile> <project> <zone>
 //     <instance_name> <machine_type> <image> <metadata> <metadata_file>
-//     <preemptible>
+//     <preemptible> <json_file>
 bool GceInstanceInsert::ioCheck(char **argv, int argc)
 {
        return verify_number_args(argc, 13) &&
@@ -54,7 +54,7 @@ bool GceInstanceInsert::ioCheck(char **argv, int argc)
                verify_string_name(argv[12]);
 }
 
-// Expecting:GCE_INSTACE_DELETE <req_id> <serviceurl> <authfile> <project> <zone> <instance_name>
+// Expecting:GCE_INSTANCE_DELETE <req_id> <serviceurl> <authfile> <project> <zone> <instance_name>
 bool GceInstanceDelete::ioCheck(char **argv, int argc)
 {
        return verify_number_args(argc, 7) &&
@@ -76,3 +76,38 @@ bool GceInstanceList::ioCheck(char **argv, int argc)
                verify_string_name(argv[4]) &&
                verify_string_name(argv[5]);
 }
+
+// Expecting:GCE_GROUP_INSERT <req_id> <serviceurl> <authfile> <project> <zone>
+//     <instance_name> <machine_type> <image> <metadata> <metadata_file>
+//     <preemptible> <json_file> <count> <duration_hours>
+bool GceGroupInsert::ioCheck(char **argv, int argc)
+{
+       return verify_number_args(argc, 15) &&
+               verify_request_id(argv[1]) &&
+               verify_string_name(argv[2]) &&
+               verify_string_name(argv[3]) &&
+               verify_string_name(argv[4]) &&
+               verify_string_name(argv[5]) &&
+               verify_string_name(argv[6]) &&
+               verify_string_name(argv[7]) &&
+               verify_string_name(argv[8]) &&
+               verify_string_name(argv[9]) &&
+               verify_string_name(argv[10]) &&
+               verify_string_name(argv[11]) &&
+               verify_string_name(argv[12]) &&
+               verify_string_name(argv[13]) &&
+               verify_string_name(argv[14]);
+}
+
+// Expecting:GCE_GROUP_DELETE <req_id> <serviceurl> <authfile> <project> <zone> <instance_name>
+bool GceGroupDelete::ioCheck(char **argv, int argc)
+{
+       return verify_number_args(argc, 7) &&
+               verify_request_id(argv[1]) &&
+               verify_string_name(argv[2]) &&
+               verify_string_name(argv[3]) &&
+               verify_string_name(argv[4]) &&
+               verify_string_name(argv[5]) &&
+               verify_string_name(argv[6]);
+}
+
diff --git a/src/gce_gahp/io_loop_pthread.cpp b/src/gce_gahp/io_loop_pthread.cpp
index 22c2d88..2dfc47e 100644
--- a/src/gce_gahp/io_loop_pthread.cpp
+++ b/src/gce_gahp/io_loop_pthread.cpp
@@ -94,6 +94,12 @@ registerAllGceCommands(void)
 
        registerGceGahpCommand(GCE_COMMAND_INSTANCE_LIST,
                        GceInstanceList::ioCheck, GceInstanceList::workerFunction);
+
+       registerGceGahpCommand(GCE_COMMAND_GROUP_INSERT,
+                       GceGroupInsert::ioCheck, GceGroupInsert::workerFunction);
+
+       registerGceGahpCommand(GCE_COMMAND_GROUP_DELETE,
+                       GceGroupDelete::ioCheck, GceGroupDelete::workerFunction);
 
        return true;
 }
-- 
2.1.4

