From 51d5b9774ba82d30bee99f7b9fc4603a846f6cf5 Mon Sep 17 00:00:00 2001
From: Samuel Friedman <samf@cs.wisc.edu>
Date: Fri, 22 Mar 2013 15:44:15 -0500
Subject: [PATCH] Ticket #3535. Changed ServiceCommandSocket to loop over all
 registered sockets. This makes commands like
 condor_userprio not necessarily run for a long time.
 ===VersionHistory:Pending===

---
 src/condor_daemon_core.V6/daemon_core.cpp | 72 ++++++++++++++++++++++---------
 1 file changed, 51 insertions(+), 21 deletions(-)

diff --git a/src/condor_daemon_core.V6/daemon_core.cpp b/src/condor_daemon_core.V6/daemon_core.cpp
index 087477d..37231b8 100644
--- a/src/condor_daemon_core.V6/daemon_core.cpp
+++ b/src/condor_daemon_core.V6/daemon_core.cpp
@@ -4090,37 +4090,67 @@ int DaemonCore::ServiceCommandSocket()
 	if ( !( (*sockTable)[initial_command_sock].iosock) )
 		return 0;
 
-	// Setting timeout to 0 means do not block, i.e. just poll the socket
-	selector.set_timeout( 0 );
-	selector.add_fd( (*sockTable)[initial_command_sock].iosock->get_file_desc(),
-					 Selector::IO_READ );
-
 	inServiceCommandSocket_flag = TRUE;
-	do {
 
-		errno = 0;
-		selector.execute();
+	int local_nSock = nSock; //CallSocketHandler_worker called inside the loop can change nSock and nRegisteredSock. We want a variable that won't change during the loop.
+	for( int i = -1; i < local_nSock; i++) {
+		bool use_loop = true;
+
+			// We start with i = -1 so that we always start with the initial command socket.
+		if( i == -1 ) {
+			selector.add_fd( (*sockTable)[initial_command_sock].iosock->get_file_desc(), Selector::IO_READ );
+		}
+			// If (*sockTable)[i].iosock is a valid socket
+			// and that we don't use the initial command socket (could substitute i != initial_command_socket)
+			// and that the handler description is "DaemonCommandProtocol::WaitForSocketData"
+		else if( ((*sockTable)[i].iosock) && ((*sockTable)[i].iosock->get_file_desc() != (*sockTable)[initial_command_sock].iosock->get_file_desc()) && (strcmp((*sockTable)[i].handler_descrip,"DaemonCommandProtocol::WaitForSocketData") == 0)) {
+			selector.add_fd( (*sockTable)[i].iosock->get_file_desc(), Selector::IO_READ );
+		}
+		else {
+			use_loop = false;
+		}
+
+		if(use_loop) {
+			// Setting timeout to 0 means do not block, i.e. just poll the socket
+			selector.set_timeout( 0 );
+
+			do {
+
+				errno = 0;
+				selector.execute();
 #ifndef WIN32
 		// Unix
-		if ( selector.failed() ) {
+				if ( selector.failed() ) {
 				// not just interrupted by a signal...
-				EXCEPT("select, error # = %d", errno);
-		}
+					EXCEPT("select, error # = %d", errno);
+				}
 #else
 		// Win32
-		if ( selector.select_retval() == SOCKET_ERROR ) {
-			EXCEPT("select, error # = %d",WSAGetLastError());
-		}
+				if ( selector.select_retval() == SOCKET_ERROR ) {
+					EXCEPT("select, error # = %d",WSAGetLastError());
+				}
 #endif
 
-		if ( selector.has_ready() ) {
-			HandleReq( initial_command_sock );
-			commands_served++;
-				// Make sure we didn't leak our priv state
-			CheckPrivState();
-		}
+				if ( selector.has_ready() ) {
+						// CallSocketHandler_worker also calls CheckPrivState to
+						// Make sure we didn't leak our priv state
+					CallSocketHandler_worker( i, true, NULL); // true needed to ensure HandleReq(i, asock) is called if no handlers. NULL for asock=NULL
+					commands_served++;
+						// If the slot in sockTable just got removed, make sure we exit the loop by running selector.execute(). 
+						// Otherwise, selector.execute run earlier in the loop will return FAILED and the process that called ServiceCommandSocket will fail.
+					if ( ((*sockTable)[i].iosock == NULL) ||  // slot is empty
+						 ((*sockTable)[i].remove_asap &&	   // slot available
+						  (*sockTable)[i].servicing_tid==0 ) ) {
+						selector.execute();
+					}
+				}
+
+			} while ( selector.has_ready() );	// loop until no more commands waiting on socket
+
+			selector.reset(); // Reset selector for next socket
+		} // if(use_loop)
+	} // for( int i = -1; i < local_nSock; i++)
 
-	} while ( selector.has_ready() );	// loop until no more commands waiting on socket
 
 	inServiceCommandSocket_flag = FALSE;
 	return commands_served;
-- 
1.7.12

