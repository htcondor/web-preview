diff -rNup condor-7.4.4.orig/src/condor_tools/preen.cpp condor-7.4.4/src/condor_tools/preen.cpp
--- condor-7.4.4.orig/src/condor_tools/preen.cpp	2011-04-07 16:11:52.000000000 -0400
+++ condor-7.4.4/src/condor_tools/preen.cpp	2011-04-08 11:18:04.000000000 -0400
@@ -62,11 +62,12 @@ char		*MyName;			// name this program wa
 char        *ValidSpoolFiles;   // well known files in the spool dir
 char        *InvalidLogFiles;   // files we know we want to delete from log
 char		*MailPrg;			// what program to use to send email
-BOOLEAN		MailFlag;			// true if we should send mail about problems
-BOOLEAN		VerboseFlag;		// true if we should produce verbose output
+BOOLEAN		MailFlag;			// true if we should send mail
+BOOLEAN		NotifyFlag;			// true if we should send mail regardless of finding problems
 BOOLEAN		RmFlag;				// true if we should remove extraneous files
-StringList	*BadFiles;			// list of files which don't belong
-
+StringList	*OutputList;			// list of output contents toggled by flags
+int             DebugLevel; 
+int             badfiles;
 // prototypes of local interest
 void usage();
 void send_mail_file();
@@ -78,7 +79,8 @@ void rec_lock_cleanup(const char *path, 
 void check_tmp_dir();
 void bad_file( const char *, const char *, Directory & );
 void good_file( const char *, const char * );
-void produce_output();
+void dump_output();
+void perform_output( int, const char *);
 BOOLEAN is_valid_shared_exe( const char *name );
 BOOLEAN is_ckpt_file( const char *name );
 BOOLEAN is_v2_ckpt( const char *name );
@@ -88,13 +90,17 @@ BOOLEAN proc_exists( int, int );
 BOOLEAN is_myproxy_file( const char *name );
 BOOLEAN is_ccb_file( const char *name );
 
+#define PREEN_ALWAYS  (1<<0)
+#define PREEN_VERBOSE (1<<1)
+#define PREEN_DEBUG   (1<<2)
+
 /*
   Tell folks how to use this program.
 */
 void
 usage()
 {
-	fprintf( stderr, "Usage: %s [-mail] [-remove] [-verbose]\n", MyName );
+	fprintf( stderr, "Usage: %s [-mail] -[notify] [-remove] [-verbose] [-debug] \n", MyName );
 	exit( 1 );
 }
 
@@ -113,25 +119,34 @@ main( int argc, char *argv[] )
 	myDistro->Init( argc, argv );
 	config();
 	init_params();
-	BadFiles = new StringList;
-
+	OutputList = new StringList;
+	DebugLevel = PREEN_ALWAYS;
+	badfiles = 0;
 		// Parse command line arguments
 	for( argv++; *argv; argv++ ) {
 		if( (*argv)[0] == '-' ) {
 			switch( (*argv)[1] ) {
 			
 			  case 'v':
-				VerboseFlag = TRUE;
+				DebugLevel |= PREEN_VERBOSE;
 				break;
 
 			  case 'm':
 				MailFlag = TRUE;
 				break;
 
+			  case 'n':
+				NotifyFlag = TRUE;
+				break;
+				
 			  case 'r':
 				RmFlag = TRUE;
 				break;
-
+                          
+			  case 'd':
+				DebugLevel |= PREEN_DEBUG | PREEN_VERBOSE ;
+				break;
+				
 			  default:
 				usage();
 
@@ -148,12 +163,16 @@ main( int argc, char *argv[] )
 	check_tmp_dir();
 
 		// Produce output, either on stdout or by mail
-	if( !BadFiles->isEmpty() ) {
-		produce_output();
+		//
+	if( !OutputList->isEmpty() ) {
+		dump_output();
+	} else if (MailFlag && NotifyFlag) {
+	        perform_output ( PREEN_ALWAYS, "No bad files found.");
+		dump_output();
 	}
 
 		// Clean up
-	delete BadFiles;
+	delete OutputList;
 
 	return 0;
 }
@@ -165,14 +184,14 @@ main( int argc, char *argv[] )
   via mail, otherwise we just print it on stdout.
 */
 void
-produce_output()
+dump_output()
 {
 	char	*str;
 	FILE	*mailer;
 	MyString subject;
-	subject.sprintf("condor_preen results %s: %d old file%s found", 
-		my_full_hostname(), BadFiles->number(), 
-		(BadFiles->number() > 1)?"s":"");
+	subject.sprintf("condor_preen results %s: %d old file%s/dir%s found", 
+		my_full_hostname(), badfiles, 
+		(badfiles > 1)?"s":"",(badfiles > 1)?"s":"");
 
 	if( MailFlag ) {
 		if( (mailer=email_open(PreenAdmin, subject.Value())) == NULL ) {
@@ -184,12 +203,11 @@ produce_output()
 
 	if( MailFlag ) {
 		fprintf( mailer, "\n" );
-		fprintf( mailer,
-			 "The condor_preen process has found the following\n"
-			 "stale condor files on <%s>:\n\n", my_hostname() );
+		fprintf( mailer,"Output from condor_preen for <%s>\n", my_hostname() );
+		
 	}
 
-	for( BadFiles->rewind(); (str = BadFiles->next()); ) {
+	for( OutputList->rewind(); (str = OutputList->next()); ) {
 		fprintf( mailer, "  %s\n", str );
 	}
 
@@ -229,9 +247,12 @@ check_spool_dir()
 	Directory  		dir(Spool, PRIV_ROOT);
 	StringList 		well_known_list, bad_spool_files;
 	Qmgr_connection *qmgr;
-
+        MyString buf;
+	buf.sprintf("check_spool_dir() on %s", Spool);
+	perform_output( PREEN_DEBUG, buf.Value());
+	
 	if ( ValidSpoolFiles == NULL ) {
-		dprintf( D_ALWAYS, "Not cleaning spool directory: No VALID_SPOOL_FILES defined\n");
+		perform_output( PREEN_VERBOSE, "Not cleaning spool directory: No VALID_SPOOL_FILES defined");
 		return;
 	}
 
@@ -260,7 +281,7 @@ check_spool_dir()
 
 	// connect to the Q manager
 	if (!(qmgr = ConnectQ (0))) {
-		dprintf( D_ALWAYS, "Not cleaning spool directory: Can't contact schedd\n" );
+		perform_output( PREEN_VERBOSE, "Not cleaning spool directory: Can't contact schedd" );
 		return;
 	}
 
@@ -328,6 +349,10 @@ check_spool_dir()
 			// if DisconnectQ() fails, we can abort and not actually
 			// delete any of these files.  -Derek Wright 3/31/99
 		bad_spool_files.append( f );
+
+	        buf.sprintf( "check_spool_dir() appending %s to badfile list", f);
+		perform_output(PREEN_DEBUG, buf.Value() );
+	
 	}
 
 	if( DisconnectQ(qmgr) ) {
@@ -338,9 +363,9 @@ check_spool_dir()
 		while( (f = bad_spool_files.next()) ) {
 			bad_file( Spool, f, dir );
 		}
-	} else {
-		dprintf( D_ALWAYS, 
-				 "Error disconnecting from job queue, not deleting spool files.\n" );
+	} else {	
+		perform_output( PREEN_VERBOSE, "Error disconnecting from job queue, not deleting spool files." );
+		
 	}
 }
 
@@ -353,13 +378,15 @@ is_valid_shared_exe( const char *name )
 		return FALSE;
 	}
 	MyString path;
+	MyString buf;
 	path.sprintf("%s/%s", Spool, name);
 	int count = link_count(path.Value());
 	if (count == 1) {
 		return FALSE;
 	}
-	if (count == -1) {
-		dprintf(D_ALWAYS, "link_count error on %s; not deleting\n", name);
+	if (count == -1) {	
+		buf.sprintf( "link_count error on %s; not deleting", name);
+                perform_output( PREEN_VERBOSE, buf.Value());			
 	}
 	return TRUE;
 }
@@ -522,12 +549,18 @@ check_execute_dir()
 	const char	*f;
 	bool	busy;
 	State	s = get_machine_state();
-
+        MyString buf;
+	
 		// If we know the state of the machine, we can use a simple
 		// algorithm.  If we are hosting a job - anything goes,
 		// otherwise the execute directory should be empty.  If we
 		// can't find the state, just leave the execute directory
 		// alone.  -Derek Wright 4/2/99
+        const char* machstate=state_to_string(s);
+	
+	buf.sprintf( "check_execute_dir() machine state is %s", machstate );
+	perform_output (PREEN_DEBUG, buf.Value());
+	
 	switch( s ) {
 	case owner_state:	
 	case unclaimed_state:
@@ -539,14 +572,15 @@ check_execute_dir()
 		busy = true;
 		break;
 	default:
-		dprintf( D_ALWAYS, 
-				 "Error getting startd state, not cleaning execute directory.\n" );
+		perform_output (PREEN_VERBOSE, "Error getting startd state, not cleaning execute directory.");
 		return;
 	}
 
 	ExecuteDirs.rewind();
 	char const *Execute;
 	while( (Execute=ExecuteDirs.next()) ) {
+	        buf.sprintf( "check_execute_dir() looking at %s, busy is %s", Execute, (busy)?"TRUE":"FALSE");
+		perform_output (PREEN_DEBUG, buf.Value());
 		Directory dir( Execute, PRIV_ROOT );
 		while( (f = dir.Next()) ) {
 			if( busy ) {
@@ -561,8 +595,10 @@ check_execute_dir()
 						// (So any files forward dated in time will have
 						// to wait for the startd to restart before they
 						// are cleaned up.)
-					dprintf(D_FULLDEBUG, "In %s, found %s with recent "
-					        "creation time.  Not removing.\n", Execute, f );
+					buf.sprintf("In %s, found %s with recent "
+					        "creation time.  Not removing.", Execute, f );
+					perform_output ( PREEN_DEBUG,  buf.Value());	
+						
 					good_file( Execute, f ); // too young to kill
 				}
 			}
@@ -580,7 +616,9 @@ check_log_dir()
 	const char	*f;
 	Directory dir(Log, PRIV_ROOT);
 	StringList invalid;
-
+	MyString buf;
+	buf.sprintf("check_log_dir() on %s", Log);
+        perform_output (PREEN_DEBUG, buf.Value());
 	invalid.initializeFromString (InvalidLogFiles ? InvalidLogFiles : "");
 
 	while( (f = dir.Next()) ) {
@@ -594,6 +632,7 @@ check_log_dir()
 
 void rec_lock_cleanup(const char *path, int depth, bool remove_self) {
 #if !defined(WIN32)
+        MyString buf;
 	FileLock *lock = NULL;
 	if (depth == 0) {
 		lock = new FileLock(path, true, true);
@@ -611,11 +650,13 @@ void rec_lock_cleanup(const char *path, 
 			lock = new FileLock(path, false, true);
 			bool result = lock->obtain(WRITE_LOCK);
 			if (!result) {
-					dprintf(D_FULLDEBUG, "Cannot lock %s\n", path);
+					buf.sprintf("Cannot lock %s", path);
+					perform_output(PREEN_DEBUG, buf.Value());
 			}
 			int res = unlink(dir->GetFullPath());
 			if (res != 0) {
-				dprintf(D_FULLDEBUG, "Cannot delete %s (%s) \n", path, strerror(errno));
+				buf.sprintf("Cannot delete %s (%s)", path, strerror(errno));
+				perform_output(PREEN_DEBUG, buf.Value());
 			}
 			delete lock;
 		} else {
@@ -626,7 +667,8 @@ void rec_lock_cleanup(const char *path, 
 	if (remove_self) {		
 		int res = rmdir(path);
 		if (res != 0) {
-			dprintf(D_FULLDEBUG, "Directory %s could not be removed.\n", path);
+			buf.sprintf("Directory %s could not be removed.", path);
+			perform_output(PREEN_DEBUG, buf.Value());
 		}
 	}
 	
@@ -637,11 +679,16 @@ void rec_lock_cleanup(const char *path, 
 void check_tmp_dir(){
 #if !defined(WIN32)
 	const char *tmpDir = NULL;
+	MyString buf;
 	bool newLock = param_boolean("CREATE_LOCKS_ON_LOCAL_DISK", true);
+	buf.sprintf("check_tmp_dir() looking at CREATE_LOCKS_ON_LOCAL_DISK=%s", (newLock)?"TRUE":"FALSE");
+	perform_output( PREEN_DEBUG, buf.Value());
 	if (newLock) {
 				// create a dummy FileLock for TmpPath access
 		FileLock *lock = new FileLock(-1, NULL, NULL);
-		tmpDir = lock->GetTempPath();	
+		tmpDir = lock->GetTempPath();
+		buf.sprintf("check_tmp_dir() on %s", tmpDir);
+		perform_output(PREEN_DEBUG, buf.Value());	
 		delete lock;
 		rec_lock_cleanup(tmpDir, 4);
 		if (tmpDir != NULL)
@@ -718,9 +765,10 @@ init_params()
 void
 good_file( const char *dir, const char *name )
 {
-	if( VerboseFlag ) {
-		printf( "%s%c%s - OK\n", dir, DIR_DELIM_CHAR, name );
-	}
+        MyString buf;
+	buf.sprintf( "%s%c%s - OK", dir, DIR_DELIM_CHAR, name );
+	perform_output ( PREEN_VERBOSE, buf.Value());
+	
 }
 
 /*
@@ -734,21 +782,19 @@ bad_file( const char *dirpath, const cha
 	MyString	pathname;
 	MyString	buf;
 
-	pathname.sprintf( "%s%c%s", dirpath, DIR_DELIM_CHAR, name );
-
-	if( VerboseFlag ) {
-		printf( "%s - BAD\n", pathname.Value() );
-	}
+	pathname.sprintf( "%s%c%s", dirpath, DIR_DELIM_CHAR, name );
+        buf.sprintf("%s - BAD", pathname.Value()); 
+	perform_output( PREEN_VERBOSE, buf.Value());
+	
 
 	if( RmFlag ) {
 		bool removed = dir.Remove_Full_Path( pathname.Value() );
 		if( !removed && privsep_enabled() ) {
 			removed = privsep_remove_dir( pathname.Value() );
-			if( VerboseFlag ) {
-				if( removed ) {
-					printf( "%s - failed to remove directly, but succeeded via privsep switchboard\n", pathname.Value() );
-				}
-			}
+			if( removed ) {
+				buf.sprintf( "%s - failed to remove directly, but succeeded via privsep switchboard", pathname.Value() );
+			        perform_output (PREEN_VERBOSE, buf.Value());
+			}	
 		}
 		if( removed ) {
 			buf.sprintf( "%s - Removed", pathname.Value() );
@@ -758,7 +804,10 @@ bad_file( const char *dirpath, const cha
 	} else {
 		buf.sprintf( "%s - Not Removed", pathname.Value() );
 	}
-	BadFiles->append( buf.Value() );
+	
+	perform_output( PREEN_ALWAYS, buf.Value() );
+	badfiles++;
+	
 }
 
 
@@ -768,25 +817,27 @@ get_machine_state()
 {
 	char* state_str = NULL;
 	State s;
-
+        MyString	buf;
 	ReliSock* sock;
+	
 	Daemon my_startd( DT_STARTD );
 	if( ! my_startd.locate() ) {
-		dprintf( D_ALWAYS, "Can't find local startd address.\n" );
+		perform_output( PREEN_DEBUG, "Can't find local startd address." );
 		return _error_state_;
 	}
    
 	if( !(sock = (ReliSock*)
-		  my_startd.startCommand(GIVE_STATE, Stream::reli_sock, 0)) ) {
-		dprintf( D_ALWAYS, "Can't connect to startd at %s\n", 
+		 my_startd.startCommand(GIVE_STATE, Stream::reli_sock, 0)) ) {
+		buf.sprintf( "Can't connect to startd at %s", 
 				 my_startd.addr() );
+		perform_output( PREEN_DEBUG, buf.Value());
 		return _error_state_;
 	}
 
 	sock->eom();
 	sock->decode();
 	if( !sock->code( state_str ) || !sock->end_of_message() ) {
-		dprintf( D_ALWAYS, "Can't read state/eom from startd.\n" );
+		perform_output( PREEN_DEBUG,"Can't read state/eom from startd." );
 		free(state_str);
 		return _error_state_;
 	}
@@ -799,3 +850,16 @@ get_machine_state()
 	return s;
 }
 
+
+void
+perform_output( int level, const char *output_string) {
+
+        if (level & DebugLevel){
+	       if (MailFlag){
+	          OutputList->append( output_string );
+	       } else {		
+                  printf("%s\n", output_string);
+	       }
+	} 	
+
+}
