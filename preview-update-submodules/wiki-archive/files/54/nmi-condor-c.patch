diff --git a/src/condor_schedd.V6/qmgmt.h b/src/condor_schedd.V6/qmgmt.h
index 9faaf29..050a16f 100644
--- a/src/condor_schedd.V6/qmgmt.h
+++ b/src/condor_schedd.V6/qmgmt.h
@@ -88,6 +88,7 @@ bool OwnerCheck2( ClassAd *ad, const char *test_owner );
 bool BuildPrioRecArray(bool no_match_found=false);
 void DirtyPrioRecArray();
 extern ClassAd *dollarDollarExpand(int cid, int pid, ClassAd *job, ClassAd *res, bool persist_expansions);
+ClassAd* GetJobAd(int cluster_id, int proc_id, bool expStartdAd, bool persist_expansions);
 ClassAd* GetNextJobByCluster( int, int );
 
 int get_myproxy_password_handler(Service *, int, Stream *sock);
diff --git a/src/condor_shadow.V6.1/baseshadow.cpp b/src/condor_shadow.V6.1/baseshadow.cpp
index 7f613f2..27bfb75 100644
--- a/src/condor_shadow.V6.1/baseshadow.cpp
+++ b/src/condor_shadow.V6.1/baseshadow.cpp
@@ -1124,6 +1124,23 @@ BaseShadow::updateJobInQueue( update_t type )
 void
 BaseShadow::evalPeriodicUserPolicy( void )
 {
+    // HACK FOR NMI USING CONDOR-C
+    // always update the job ad and then pull down a fresh copy
+    // so that everything, in particular the condor-c lease info,
+    // is up-to-date at the time of evaluation.  this is a major
+    // scalability issue, so it's off by default and needs the
+    // ALWAYS_UPDATE_JOB_AD_ON_PERIODIC_EVALUATION knob set to true.
+    bool always_update_job_ad =
+        param_boolean("ALWAYS_UPDATE_JOB_AD_ON_PERIODIC_EVALUATION", false);
+    if (jobAd && always_update_job_ad) {
+        job_updater->updateJob( U_PERIODIC );
+
+               delete jobAd;
+               jobAd = GetJobAd(cluster, proc);
+    }
+    // END NMI HACK
+
+
        shadow_user_policy.checkPeriodic();
 }
 
