diff --git a/src/condor_util_lib/dprintf.c b/src/condor_util_lib/dprintf.c
index 11d1c6b..c6d447b 100644
--- a/src/condor_util_lib/dprintf.c
+++ b/src/condor_util_lib/dprintf.c
@@ -479,6 +479,7 @@ debug_lock(int debug_level)
 	priv_state	priv;
 	int save_errno;
 	char msg_buf[DPRINTF_ERR_MAX];
+	struct stat fstatus;
 
 	if ( DebugFP == NULL ) {
 		DebugFP = stderr;
@@ -502,13 +503,23 @@ debug_lock(int debug_level)
 
 		/* Acquire the lock */
 	if( DebugLock ) {
-		if( use_kernel_mutex == FALSE && LockFd < 0 ) {
-			LockFd = _condor_open_lock_file(DebugLock,O_CREAT|O_WRONLY,0660);
-			if( LockFd < 0 ) {
-				save_errno = errno;
-				snprintf( msg_buf, sizeof(msg_buf), "Can't open \"%s\"\n", DebugLock );
-				_condor_dprintf_exit( save_errno, msg_buf );
+		
+		if( use_kernel_mutex == FALSE) {
+			if (LockFd > 0 ) {
+				fstat(LockFd, &fstatus);
+				if (fstatus.st_nlink == 0){
+					close(LockFd);
+					LockFd = -1;
+				}	
 			}
+			if (LockFd < 0) {
+				LockFd = _condor_open_lock_file(DebugLock,O_CREAT|O_WRONLY,0660);
+				if( LockFd < 0 ) {
+					save_errno = errno;
+					snprintf( msg_buf, sizeof(msg_buf), "Can't open \"%s\"\n", DebugLock );
+					_condor_dprintf_exit( save_errno, msg_buf );
+				} 
+			}	
 		}
 
 		errno = 0;
diff --git a/src/condor_util_lib/dprintf_config.c b/src/condor_util_lib/dprintf_config.c
index 616a32f..64e035a 100644
--- a/src/condor_util_lib/dprintf_config.c
+++ b/src/condor_util_lib/dprintf_config.c
@@ -29,6 +29,7 @@
 #include "condor_debug.h"
 #include "condor_string.h"
 #include "condor_sys_types.h"
+#include "file_lock.h"
 
 #if HAVE_BACKTRACE
 #include "sig_install.h"
@@ -94,6 +95,9 @@ dprintf_config( const char *subsys )
 	static int first_time = 1;
 	int want_truncate;
 	int debug_level;
+	int errno;
+	int lock_fd = -1;
+	char msg_buf[BUFSIZ];
 
 	/*  
 	**  We want to initialize this here so if we reconfig and the
@@ -169,6 +173,14 @@ dprintf_config( const char *subsys )
 						DebugLastMod = -errno;
 					}
 				}
+				
+				if (debug_level == 0) {
+					(void)sprintf(pname, "%s_LOCK", subsys);
+					if (DebugLock) {
+						free(DebugLock);
+					}
+					DebugLock = param(pname);
+				}
 
 				if (debug_level == 0) {
 					(void)sprintf(pname, "TRUNC_%s_LOG_ON_OPEN", subsys);
@@ -183,6 +195,27 @@ dprintf_config( const char *subsys )
 					} 
 					free(pval);
 				}
+				
+				if (DebugLock) {
+					lock_fd = _condor_open_lock_file(DebugLock,O_CREAT|O_WRONLY,0660);
+					if( lock_fd < 0 ) {
+						EXCEPT("Cannot open lock file '%s' \n", DebugLock);
+					}
+					
+				
+					errno = 0;
+					
+#ifdef WIN32
+					if( lock_or_mutex_file(lock_fd,WRITE_LOCK,TRUE) < 0 ) 
+#else
+					if( lock_file_plain(lock_fd,WRITE_LOCK,TRUE) < 0 ) 
+#endif
+					{
+						snprintf( msg_buf, sizeof(msg_buf), "Can't get exclusive lock on \"%s\", "
+						 "LockFd = %d - failed with error: %i \n", DebugLock, lock_fd, errno );
+						EXCEPT(msg_buf);
+					}	
+				}
 				if( first_time && want_truncate ) {
 					DebugFP = open_debug_file(debug_level, "w");
 				} else {
@@ -196,6 +229,24 @@ dprintf_config( const char *subsys )
 
 				if (DebugFP) (void)fclose( DebugFP );
 				DebugFP = (FILE *)0;
+				
+				if (DebugLock) {	
+					
+					errno = 0;
+					
+#ifdef WIN32
+					if( lock_or_mutex_file(lock_fd,UN_LOCK,TRUE) < 0 ) 
+#else
+					if( lock_file_plain(lock_fd,UN_LOCK,TRUE) < 0 ) 
+#endif
+					{
+						snprintf( msg_buf, sizeof(msg_buf), "Can't release exclusive lock on \"%s\", "
+						 "LockFd = %d - failed with error: %i \n", DebugLock, lock_fd, errno );
+						EXCEPT(msg_buf);
+					}
+					close(lock_fd);
+					lock_fd = -1;	
+				}
 
 				if (debug_level == 0) {
 					(void)sprintf(pname, "MAX_%s_LOG", subsys);
@@ -210,14 +261,6 @@ dprintf_config( const char *subsys )
 				} else {
 					MaxLog[debug_level] = 1024*1024;
 				}
-
-				if (debug_level == 0) {
-					(void)sprintf(pname, "%s_LOCK", subsys);
-					if (DebugLock) {
-						free(DebugLock);
-					}
-					DebugLock = param(pname);
-				}
 			}
 		}
 	} else {
