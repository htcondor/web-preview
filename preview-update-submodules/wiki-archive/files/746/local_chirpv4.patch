diff -rNup condor-7.9.1.orig/src/condor_chirp/chirp_client.c condor-7.9.1/src/condor_chirp/chirp_client.c
--- condor-7.9.1.orig/src/condor_chirp/chirp_client.c	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_chirp/chirp_client.c	2013-06-06 15:32:42.894715492 -0400
@@ -692,6 +692,8 @@ chirp_client_putfile_buffer( struct chir
 	result = fflush(c->wstream);
 	if(result < 0) chirp_fatal_request("putfile");
 	
+	if (length == 0 ) return 0;
+	
 	// Now send actual file
 	actual = fwrite(buffer,1,length,c->wstream);
 	if(actual!=length) chirp_fatal_request("putfile");
diff -rNup condor-7.9.1.orig/src/condor_includes/filename_tools.h condor-7.9.1/src/condor_includes/filename_tools.h
--- condor-7.9.1.orig/src/condor_includes/filename_tools.h	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_includes/filename_tools.h	2013-06-06 15:32:42.894715492 -0400
@@ -93,6 +93,7 @@ as a ClassAd within a ClassAd.  However,
 new ClassAds are deployed.
 */
 int filename_remap_find( const char *input, const char *filename, MyString &output );
+int filename_remap_find( const char *input, const char *filename, std::string &output );
 
 void canonicalize_dir_delimiters( MyString &path );
 void filename_url_parse( char *input, MyString &method, MyString &server, int *port, MyString &path );
diff -rNup condor-7.9.1.orig/src/condor_shadow.V6.1/NTreceivers.cpp condor-7.9.1/src/condor_shadow.V6.1/NTreceivers.cpp
--- condor-7.9.1.orig/src/condor_shadow.V6.1/NTreceivers.cpp	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_shadow.V6.1/NTreceivers.cpp	2013-06-06 15:32:42.895715505 -0400
@@ -1286,7 +1286,7 @@ case CONDOR_putfile:
 		errno = 0;
 		fd = safe_open_wrapper_follow(path, O_CREAT | O_WRONLY | O_TRUNC | _O_BINARY, mode);
 		terrno = (condor_errno_t)errno;
-		dprintf( D_SYSCALLS, "\trval = %d, errno = %d\n", rval, terrno );
+		dprintf( D_SYSCALLS, "\trval = %d, errno = %d\n", fd, terrno );
 		
 		// Need to send reply after file creation
 		syscall_sock->encode();
@@ -1298,35 +1298,38 @@ case CONDOR_putfile:
 		}
 		result = ( syscall_sock->end_of_message() );
 		ASSERT( result );
-		
-		int num = -1;
-		if(fd >= 0) {
-			syscall_sock->decode();
-			buffer = (char*)malloc( (unsigned)length );
-			ASSERT( buffer );
-			memset( buffer, 0, (unsigned)length );
-			result = ( syscall_sock->code_bytes_bool(buffer, length) );
+
+		if (length >0) {		
+			int num = -1;
+			if(fd >= 0 ) {
+				syscall_sock->decode();
+				buffer = (char*)malloc( (unsigned)length );
+				ASSERT( buffer );
+				memset( buffer, 0, (unsigned)length );
+				result = ( syscall_sock->code_bytes_bool(buffer, length) );
+				ASSERT( result );
+				result = ( syscall_sock->end_of_message() );
+				ASSERT( result );
+				num = write(fd, buffer, length);
+			} else {
+				dprintf(D_SYSCALLS, "Unable to put file %s\n", path);
+			}
+
+			syscall_sock->encode();
+			result = ( syscall_sock->code(num) );
 			ASSERT( result );
+			if( num < 0 ) {
+				result = ( syscall_sock->code( terrno ) );
+				ASSERT( result );
+			}
+			dprintf(D_SYSCALLS, "recieversputfile2\n");
+			free((char*)path);
+			free((char*)buffer);
 			result = ( syscall_sock->end_of_message() );
 			ASSERT( result );
-			num = write(fd, buffer, length);
-		}
-		else {
-			dprintf(D_SYSCALLS, "Unable to put file %s\n", path);
 		}
 		close(fd);
 		
-		syscall_sock->encode();
-		result = ( syscall_sock->code(num) );
-		ASSERT( result );
-		if( num < 0 ) {
-			result = ( syscall_sock->code( terrno ) );
-			ASSERT( result );
-		}
-		free((char*)path);
-		free((char*)buffer);
-		result = ( syscall_sock->end_of_message() );
-		ASSERT( result );
 		return 0;
 	}
 case CONDOR_getlongdir:
@@ -1362,7 +1365,7 @@ case CONDOR_getlongdir:
 			msg.sprintf_cat("%s", line);
 		}
 		terrno = (condor_errno_t)errno;
-		if(msg.Length() > 0) {
+		if(msg.Length() >= 0) {
 			msg.sprintf_cat("\n");	// Needed to signify end of data
 			rval = msg.Length();
 		}
@@ -1404,7 +1407,7 @@ case CONDOR_getdir:
 			msg.sprintf_cat("\n");
 		}
 		terrno = (condor_errno_t)errno;
-		if(msg.Length() > 0) {
+		if(msg.Length() >= 0) {
 			msg.sprintf_cat("\n");	// Needed to signify end of data
 			rval = msg.Length();
 		}
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/baseStarter.cpp condor-7.9.1/src/condor_starter.V6.1/baseStarter.cpp
--- condor-7.9.1.orig/src/condor_starter.V6.1/baseStarter.cpp	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/baseStarter.cpp	2013-06-06 15:32:42.896715517 -0400
@@ -2975,3 +2975,22 @@ CStarter::WriteAdFiles()
 
 	return ret_val;
 }
+
+int
+CStarter::updateJobAttr (const char *name, const char *expr)
+{
+	if( jic && (jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {		
+		return (jic->updateJobAttr( name, expr));
+	}
+       return  0;	
+}
+
+int
+CStarter::getJobAttr (const char *name, std::string * expr )
+{
+	if( jic && (jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL) ) {		
+		return (jic->getJobAttr( name, expr ));
+	}
+       return  0 ;	
+}
+
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/io_proxy_handler.cpp condor-7.9.1/src/condor_starter.V6.1/io_proxy_handler.cpp
--- condor-7.9.1.orig/src/condor_starter.V6.1/io_proxy_handler.cpp	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/io_proxy_handler.cpp	2013-06-06 15:32:42.897715529 -0400
@@ -360,17 +360,19 @@ void IOProxyHandler::handle_standard_req
 
 	} else if(sscanf_chirp(line,"get_job_attr %s",name)==1) {
 
-		char *recv_expr = NULL;
-		result = REMOTE_CONDOR_get_job_attr(name,recv_expr);
+		std::string recv_expr;
+		
+		result = REMOTE_CONDOR_get_job_attr(name,&recv_expr);
+		dprintf ( D_FULLDEBUG, "get_job attr= %d %s\n",recv_expr.length(),recv_expr.c_str() );
+		
 		if(result==0) {
-			sprintf(line,"%u",(unsigned int)strlen(recv_expr));
+			sprintf(line,"%u",(unsigned int)recv_expr.length());
 			r->put_line_raw(line);
-			r->put_bytes_raw(recv_expr,strlen(recv_expr));
+			r->put_bytes_raw(recv_expr.c_str(),recv_expr.length());
 		} else {
 			sprintf(line,"%d",convert(result,errno));
 			r->put_line_raw(line);
 		}	
-		free( recv_expr );
 
 	} else if(sscanf_chirp(line,"constrain %s",expr)==1) {
 
@@ -562,47 +564,43 @@ void IOProxyHandler::handle_standard_req
 			free(buffer);
 		}
 
-	} else if(sscanf_chirp(line,"putfile %s %d %d", &path, &mode, &length) == 3)
-	{
-
+	} else if(sscanf_chirp(line,"putfile %s %d %d", &path, &mode, &length) == 3) {
 		// First check if putfile is possible
-		result = REMOTE_CONDOR_putfile(path, mode, length);
-		sprintf(line, "%d", convert(result, errno));
+		int fd = REMOTE_CONDOR_putfile(path, mode, length);
+
+		sprintf(line, "%d", convert(fd, errno));
 		r->put_line_raw(line);
 
-		if(result >= 0) {
+		if (length > 0 && fd >= 0){
 			char *buffer = (char*) malloc(length);
-			if(buffer) {
+			if (buffer) {
 				result = r->get_bytes_raw(buffer,length);
 
 				// Now actually putfile
-				result = REMOTE_CONDOR_putfile_buffer(buffer, length);
-				sprintf(line, "%d", convert(result, errno));
-				r->put_line_raw(line);
+				result = REMOTE_CONDOR_putfile_buffer(fd, buffer, length);
 			} else {
 				sprintf(line,"%d",CHIRP_ERROR_NO_MEMORY);
 				r->put_line_raw(line);
 			}
-		}
-
+		} 	
 	} else if(sscanf_chirp(line,"getlongdir %s", &path) == 1) {
 
-		char *buffer = NULL;
-		result = REMOTE_CONDOR_getlongdir(path, buffer);
+		std::string buffer;
+		result = REMOTE_CONDOR_getlongdir(path, &buffer);
 		sprintf(line, "%d", convert(result, errno));
 		r->put_line_raw(line);
 		if(result>0) {
-			r->put_bytes_raw(buffer,strlen(buffer));
+			r->put_bytes_raw(buffer.c_str(),buffer.length());
 		}
 
 	} else if(sscanf_chirp(line,"getdir %s", &path) == 1) {
 
-		char *buffer = NULL;
-		result = REMOTE_CONDOR_getdir(path, buffer);
+		std::string buffer;
+		result = REMOTE_CONDOR_getdir(path, &buffer);
 		sprintf(line, "%d", convert(result, errno));
 		r->put_line_raw(line);
 		if(result>0) {
-			r->put_bytes_raw(buffer,strlen(buffer));
+			r->put_bytes_raw(buffer.c_str(),buffer.length());
 		}
 
 	} else if(sscanf_chirp(line,"whoami %d", &length) == 1) {
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/jic_local_schedd.cpp condor-7.9.1/src/condor_starter.V6.1/jic_local_schedd.cpp
--- condor-7.9.1.orig/src/condor_starter.V6.1/jic_local_schedd.cpp	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/jic_local_schedd.cpp	2013-06-06 15:32:42.897715529 -0400
@@ -108,6 +108,13 @@ JICLocalSchedd::init( void )
 		this->starter_user_policy->init( this->job_ad, this );
 		this->starter_user_policy->startTimer( );
 	}
+	
+	// If the user wants it, initialize our io proxy
+	// Must have user priv to drop the config info	
+	// into the execute dir.
+        priv_state priv = set_user_priv();
+	initIOProxy();
+	priv = set_priv(priv);
 	return ( ret );
 }
 
@@ -551,3 +558,71 @@ JICLocalSchedd::notifyStarterError( cons
 	}
 	return true;
 }
+
+int
+JICLocalSchedd::getJobAttr( const char *name, std::string * expr )
+{
+
+	ExprTree *e = job_ad->LookupExpr(name);
+	if(e) {
+		*expr = ExprTreeToString(e);
+		dprintf(D_FULLDEBUG,"JICLocalSchedd::getJobAttr(%s) = %s\n",name,expr->c_str());
+		
+	} else {
+		dprintf(D_FULLDEBUG,"JICLocalSchedd::getJobAttr(%s) is UNDEFINED\n",name);
+		*expr = "UNDEFINED";
+	}	
+	return 0;
+}
+
+int
+JICLocalSchedd::updateJobAttr( const char *name, const char *expr)
+{
+       dprintf(D_FULLDEBUG,"JICLocalSchedd::updateJobAttr(%s) = %s\n",name,expr);
+	int result = (int)job_updater->updateAttr( name, expr, false, true );
+	if (result){
+		ASSERT(job_ad);
+	 	job_ad->AssignExpr(name,expr);
+	}
+	return result; 
+}
+
+bool
+JICLocalSchedd::initIOProxy( void )
+{
+	int want_io_proxy = 0;
+	std::string io_proxy_config_file;
+
+		// the admin should have the final say over whether
+		// chirp is enabled
+        bool enableIOProxy = true;
+	enableIOProxy = param_boolean("ENABLE_CHIRP", true);
+	
+	if (!enableIOProxy) {
+		dprintf(D_ALWAYS, "ENABLE_CHIRP is false in config file, not enabling chirp\n");
+		return false;
+	}
+
+	if( job_ad->LookupBool( ATTR_WANT_IO_PROXY, want_io_proxy ) < 1 ) {
+		dprintf( D_FULLDEBUG, "JICLocalSchedd::initIOProxy(): "
+				 "Job does not define %s\n", ATTR_WANT_IO_PROXY );
+		want_io_proxy = 0;
+	} else {
+		dprintf( D_ALWAYS, "Job has %s=%s\n", ATTR_WANT_IO_PROXY,
+				 want_io_proxy ? "true" : "false" );
+	}
+
+	if( want_io_proxy ) {
+		std::string workingdir = Starter->GetWorkingDir();
+		io_proxy_config_file =  workingdir + DIR_DELIM_CHAR + "chirp.config";
+		if( !io_proxy.init(io_proxy_config_file.c_str()) ) {
+			dprintf( D_FAILURE|D_ALWAYS, 
+					 "Couldn't initialize IO Proxy.\n" );
+			return false;
+		}
+		dprintf( D_ALWAYS, "Initialized IO Proxy.\n" );
+		return true;
+	}
+	return false;
+}
+
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/jic_local_schedd.h condor-7.9.1/src/condor_starter.V6.1/jic_local_schedd.h
--- condor-7.9.1.orig/src/condor_starter.V6.1/jic_local_schedd.h	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/jic_local_schedd.h	2013-06-06 15:32:42.898715541 -0400
@@ -24,6 +24,8 @@
 #include "jic_local_file.h"
 #include "../condor_schedd.V6/qmgr_job_updater.h"
 #include "starter_user_policy.h"
+#include "file_transfer.h"
+#include "io_proxy.h"
 
 /** 
 	This is the child class of JICLocalFile (and therefore JICLocal
@@ -151,8 +153,19 @@ public:
 
 	virtual bool notifyStarterError( const char* err_msg, bool critical, int hold_reason_code, int hold_reason_subcode );
 
+		/** get a job attribute */
+        int getJobAttr( const char *name, std::string *expr );
+	
+		/** update a job attribute */
+        int updateJobAttr( const char *name, const char *expr);
+	
 protected:
 
+	IOProxy io_proxy;
+	
+	        /// If the job ad says so, initialize our IO proxy
+	bool initIOProxy( void );
+	        	
 	void setExitCodeToRequeue();
 
 		/// This version confirms we're handling a "local" universe job. 
@@ -196,6 +209,10 @@ protected:
 	StarterUserPolicy *starter_user_policy;
 
 	bool m_tried_notify_job_exit;
+	
+		/// Controls whether the ioproxy object is created
+	int want_io_proxy;
+	bool enableIOProxy;
 };
 
 #endif /* _CONDOR_JIC_LOCAL_SCHEDD_H */
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/job_info_communicator.h condor-7.9.1/src/condor_starter.V6.1/job_info_communicator.h
--- condor-7.9.1.orig/src/condor_starter.V6.1/job_info_communicator.h	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/job_info_communicator.h	2013-06-06 15:32:42.898715541 -0400
@@ -358,6 +358,15 @@ public:
 	
 		/* Update Job ClassAd with checkpoint info and log it */
 	virtual void updateCkptInfo(void) {};
+	
+		/* Get a job attribute */
+        virtual int getJobAttr( const char *, std::string * ) { return 0; }
+	
+		/* Update a job attribute */
+        virtual int updateJobAttr( const char *, const char *){ return 0; }
+	
+		/* Get the user log for writing */
+	virtual WriteUserLog * getUserLog(){ return u_log->getWriteUserLog();}
 
 protected:
 
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/local_user_log.h condor-7.9.1/src/condor_starter.V6.1/local_user_log.h
--- condor-7.9.1.orig/src/condor_starter.V6.1/local_user_log.h	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/local_user_log.h	2013-06-06 15:32:42.898715541 -0400
@@ -132,7 +132,10 @@ public:
 		 * @param checkpointed - whether the job was checkpointed or not
 		 **/
 	bool logRequeueEvent( ClassAd* ad, bool checkpointed );
-
+	
+		/** Get the u_log object for writing */
+        WriteUserLog * getWriteUserLog(){ return &u_log;}
+	
 private:
 		// // // // // // // // // // // //
 		// Private helper methods
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/NTsenders.cpp condor-7.9.1/src/condor_starter.V6.1/NTsenders.cpp
--- condor-7.9.1.orig/src/condor_starter.V6.1/NTsenders.cpp	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/NTsenders.cpp	2013-06-06 15:33:00.279922442 -0400
@@ -27,7 +27,10 @@
 #include "condor_sys.h"
 #include "starter.h"
 #include "condor_event.h"
-
+#include "directory.h"
+#include "filename_tools.h"
+#include "basename.h"
+#include <errno.h>
 #include "NTsenders.h"
 
 #define ON_ERROR_RETURN(x) if (x <= 0) {dprintf(D_ALWAYS, "i/o error result is %d, errno is %d\n", x, errno);errno=ETIMEDOUT;return x;}
@@ -36,6 +39,25 @@ static int CurrentSysCall;
 extern ReliSock *syscall_sock;
 extern CStarter *Starter;
 
+/** helper functions */
+int get_file_info_new( const char *logical_name, char *&actual_url );
+static void append_buffer_info( std::string &url, const char *method, char const *path );
+int get_buffer_info( int *bytes_out, int *block_size_out, int *prefetch_bytes_out );
+static void complete_path( const char *short_path, std::string &full_path );
+static int use_local_access( const char *file );
+static int use_compress( const char *method, const char *path );
+static int use_fetch( const char *method, const char *path );
+static int use_append( const char *method, const char *path );
+static int use_special_access( const char *file );
+int ulog( ClassAd *ad );
+static int stat_string( char *line, struct stat *info );
+#if defined(Solaris)
+static int statfs_string( char *line, struct statvfs *info );
+#else
+static int statfs_string( char *line, struct statfs *info );
+#endif
+
+
 extern "C" {
 int
 REMOTE_CONDOR_register_starter_info( ClassAd* ad )
@@ -398,38 +420,47 @@ REMOTE_CONDOR_open( char const *  path ,
 {
         int     rval;
         condor_errno_t     terrno;
-		int result = 0;
+	int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_open\n" );
-
-        CurrentSysCall = CONDOR_open;
-
-        syscall_sock->encode();
-        result = syscall_sock->code(CurrentSysCall);
-		ON_ERROR_RETURN( result );
-        result = syscall_sock->code(flags);
-		ON_ERROR_RETURN( result );
-        result = syscall_sock->code(lastarg);
-		ON_ERROR_RETURN( result );
-        result = syscall_sock->put(path);
-		ON_ERROR_RETURN( result );
-        result = syscall_sock->end_of_message();
-		ON_ERROR_RETURN( result );
-
-        syscall_sock->decode();
-        result = syscall_sock->code(rval);
-		ON_ERROR_RETURN( result );
-        if( rval < 0 ) {
-                result = syscall_sock->code(terrno);
-				ON_ERROR_RETURN( result );
-                result = syscall_sock->end_of_message();
-				ON_ERROR_RETURN( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        result = syscall_sock->end_of_message();
-		ON_ERROR_RETURN( result );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = safe_open_wrapper_follow( path , flags , lastarg);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+        	CurrentSysCall = CONDOR_open;
+
+        	syscall_sock->encode();
+        	result = syscall_sock->code(CurrentSysCall);
+			ON_ERROR_RETURN( result );
+        	result = syscall_sock->code(flags);
+			ON_ERROR_RETURN( result );
+        	result = syscall_sock->code(lastarg);
+			ON_ERROR_RETURN( result );
+        	result = syscall_sock->put(path);
+			ON_ERROR_RETURN( result );
+        	result = syscall_sock->end_of_message();
+			ON_ERROR_RETURN( result );
+
+        	syscall_sock->decode();
+        	result = syscall_sock->code(rval);
+			ON_ERROR_RETURN( result );
+        	if( rval < 0 ) {
+          	      result = syscall_sock->code(terrno);
+			ON_ERROR_RETURN( result );
+         	      result = syscall_sock->end_of_message();
+			ON_ERROR_RETURN( result );
+         	      errno = terrno;
+          	      dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+         	      return rval;
+        	}
+        	result = syscall_sock->end_of_message();
+			ON_ERROR_RETURN( result );
+	}
+	
         return rval;
 }
 
@@ -441,31 +472,39 @@ REMOTE_CONDOR_close(int   fd)
 		int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_close\n" );
-
-        CurrentSysCall = CONDOR_close;
-
-        syscall_sock->encode();
-        result = syscall_sock->code(CurrentSysCall);
-		ON_ERROR_RETURN( result );
-        result = syscall_sock->code(fd);
-		ON_ERROR_RETURN( result );
-        result = syscall_sock->end_of_message();
-		ON_ERROR_RETURN( result );
-
-        syscall_sock->decode();
-        result = syscall_sock->code(rval);
-		ON_ERROR_RETURN( result );
-        if( rval < 0 ) {
-                result = syscall_sock->code(terrno);
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = close (fd);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+	        CurrentSysCall = CONDOR_close;
+
+    	    	syscall_sock->encode();
+      		result = syscall_sock->code(CurrentSysCall);
+			ON_ERROR_RETURN( result );
+      	  	result = syscall_sock->code(fd);
+			ON_ERROR_RETURN( result );
+        	result = syscall_sock->end_of_message();
+			ON_ERROR_RETURN( result );
+
+        	syscall_sock->decode();
+        	result = syscall_sock->code(rval);
+			ON_ERROR_RETURN( result );
+        	if( rval < 0 ) {
+                	result = syscall_sock->code(terrno);
 				ON_ERROR_RETURN( result );
-                result = syscall_sock->end_of_message();
+                	result = syscall_sock->end_of_message();
 				ON_ERROR_RETURN( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        result = syscall_sock->end_of_message();
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = syscall_sock->end_of_message();
 		ON_ERROR_RETURN( result );
+	}
         return rval;
 }
 
@@ -477,36 +516,46 @@ REMOTE_CONDOR_read(int   fd , void *  bu
 		int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_read\n" );
-
-        CurrentSysCall = CONDOR_read;
-
-        syscall_sock->encode();
-        result = ( syscall_sock->code(CurrentSysCall) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code(fd) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code(len) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->end_of_message() );
-		ON_ERROR_RETURN( result );
-
-        syscall_sock->decode();
-        result = ( syscall_sock->code(rval) );
-		ON_ERROR_RETURN( result );
-        if( rval < 0 ) {
-                result = ( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		memset( buf, 0, (unsigned)len );
+		errno = 0;
+		rval = read( fd, buf, (size_t) len);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+        	CurrentSysCall = CONDOR_read;
+
+        	syscall_sock->encode();
+        	result = ( syscall_sock->code(CurrentSysCall) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->code(fd) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->code(len) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+
+        	syscall_sock->decode();
+        	result = ( syscall_sock->code(rval) );
+			ON_ERROR_RETURN( result );
+        	if( rval < 0 ) {
+                	result = ( syscall_sock->code(terrno) );
 				ON_ERROR_RETURN( result );
-                result = ( syscall_sock->end_of_message() );
+                	result = ( syscall_sock->end_of_message() );
 				ON_ERROR_RETURN( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = ( syscall_sock->code_bytes_bool(buf, rval) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
         }
-        result = ( syscall_sock->code_bytes_bool(buf, rval) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->end_of_message() );
-		ON_ERROR_RETURN( result );
-        return rval;
+	return rval;
 }
 
 int
@@ -517,36 +566,45 @@ REMOTE_CONDOR_write(int   fd , void *  b
 		int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_write\n" );
-
-        CurrentSysCall = CONDOR_write;
-
-        syscall_sock->encode();
-        result = ( syscall_sock->code(CurrentSysCall) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code(fd) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code(len) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code_bytes_bool(buf, len) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->end_of_message() );
-		ON_ERROR_RETURN( result );
-
-        syscall_sock->decode();
-        result = ( syscall_sock->code(rval) );
-		ON_ERROR_RETURN( result );
-        if( rval < 0 ) {
-                result = ( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		errno = 0;
+		rval = write( fd,  buf, len);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+        	CurrentSysCall = CONDOR_write;
+
+        	syscall_sock->encode();
+        	result = ( syscall_sock->code(CurrentSysCall) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->code(fd) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->code(len) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->code_bytes_bool(buf, len) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+
+        	syscall_sock->decode();
+        	result = ( syscall_sock->code(rval) );
+			ON_ERROR_RETURN( result );
+        	if( rval < 0 ) {
+                	result = ( syscall_sock->code(terrno) );
 				ON_ERROR_RETURN( result );
-                result = ( syscall_sock->end_of_message() );
+                	result = ( syscall_sock->end_of_message() );
 				ON_ERROR_RETURN( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
         }
-        result = ( syscall_sock->end_of_message() );
-		ON_ERROR_RETURN( result );
-        return rval;
+	return rval;
 }
 
 
@@ -558,35 +616,43 @@ REMOTE_CONDOR_lseek(int   fd , off_t   o
 		int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_lseek\n" );
-
-        CurrentSysCall = CONDOR_lseek;
-
-        syscall_sock->encode();
-        result = ( syscall_sock->code(CurrentSysCall) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code(fd) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code(offset) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code(whence) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->end_of_message() );
-		ON_ERROR_RETURN( result );
-
-        syscall_sock->decode();
-        result = ( syscall_sock->code(rval) );
-		ON_ERROR_RETURN( result );
-        if( rval < 0 ) {
-                result = ( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = lseek( fd , offset , whence);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+	        CurrentSysCall = CONDOR_lseek;
+
+        	syscall_sock->encode();
+        	result = ( syscall_sock->code(CurrentSysCall) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->code(fd) );
+			ON_ERROR_RETURN( result );
+       	 	result = ( syscall_sock->code(offset) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->code(whence) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+
+        	syscall_sock->decode();
+        	result = ( syscall_sock->code(rval) );
+			ON_ERROR_RETURN( result );
+        	if( rval < 0 ) {
+                	result = ( syscall_sock->code(terrno) );
 				ON_ERROR_RETURN( result );
-                result = ( syscall_sock->end_of_message() );
+                	result = ( syscall_sock->end_of_message() );
 				ON_ERROR_RETURN( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        result = ( syscall_sock->end_of_message() );
-		ON_ERROR_RETURN( result );
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+	}
         return rval;
 }
 
@@ -595,35 +661,43 @@ REMOTE_CONDOR_unlink( char *  path )
 {
         int     rval;
         condor_errno_t     terrno;
-		int result = 0;
+	int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_unlink\n" );
-
-        CurrentSysCall = CONDOR_unlink;
-
-        syscall_sock->encode();
-        result = ( syscall_sock->code(CurrentSysCall) );
-		ASSERT( result );
-        result = ( syscall_sock->code(path) );
-		ASSERT( result );
-        result = ( syscall_sock->end_of_message() );
-		ASSERT( result );
-
-        syscall_sock->decode();
-        result = ( syscall_sock->code(rval) );
-		ASSERT( result );
-        if( rval < 0 ) {
-                result = ( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = unlink( path );
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+       	 	CurrentSysCall = CONDOR_unlink;
+
+        	syscall_sock->encode();
+        	result = ( syscall_sock->code(CurrentSysCall) );
+			ASSERT( result );
+        	result = ( syscall_sock->code(path) );
+			ASSERT( result );
+        	result = ( syscall_sock->end_of_message() );
+			ASSERT( result );
+
+        	syscall_sock->decode();
+        	result = ( syscall_sock->code(rval) );
+			ASSERT( result );
+        	if( rval < 0 ) {
+                	result = ( syscall_sock->code(terrno) );
 				ASSERT( result );
-                result = ( syscall_sock->end_of_message() );
+                	result = ( syscall_sock->end_of_message() );
 				ASSERT( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        result = ( syscall_sock->end_of_message() );
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = ( syscall_sock->end_of_message() );
 		ASSERT( result );
-        return rval;
+        }
+	return rval;
 }
 
 int
@@ -634,34 +708,42 @@ REMOTE_CONDOR_rename( char *  from , cha
 		int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_rename\n" );
-
-        CurrentSysCall = CONDOR_rename;
-
-        syscall_sock->encode();
-        result = ( syscall_sock->code(CurrentSysCall) );
-		ASSERT( result );
-        result = ( syscall_sock->code(from) );
-		ASSERT( result );
-        result = ( syscall_sock->code(to) );
-		ASSERT( result );
-        result = ( syscall_sock->end_of_message() );
-		ASSERT( result );
-
-        syscall_sock->decode();
-        result = ( syscall_sock->code(rval) );
-		ASSERT( result );
-        if( rval < 0 ) {
-                result = ( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = rename(  from , to);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+        	CurrentSysCall = CONDOR_rename;
+
+        	syscall_sock->encode();
+        	result = ( syscall_sock->code(CurrentSysCall) );
+			ASSERT( result );
+        	result = ( syscall_sock->code(from) );
+			ASSERT( result );
+        	result = ( syscall_sock->code(to) );
+			ASSERT( result );
+       	 	result = ( syscall_sock->end_of_message() );
+			ASSERT( result );
+
+        	syscall_sock->decode();
+        	result = ( syscall_sock->code(rval) );
+			ASSERT( result );
+        	if( rval < 0 ) {
+                	result = ( syscall_sock->code(terrno) );
 				ASSERT( result );
-                result = ( syscall_sock->end_of_message() );
+                	result = ( syscall_sock->end_of_message() );
 				ASSERT( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        result = ( syscall_sock->end_of_message() );
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = ( syscall_sock->end_of_message() );
 		ASSERT( result );
-        return rval;
+        }
+	return rval;
 }
 
 int
@@ -713,33 +795,41 @@ REMOTE_CONDOR_mkdir( char *  path, int m
 		int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_mkdir\n" );
-
-        CurrentSysCall = CONDOR_mkdir;
-
-        syscall_sock->encode();
-        result = ( syscall_sock->code(CurrentSysCall) );
-		ASSERT( result );
-        result = ( syscall_sock->code(path) );
-		ASSERT( result );
-        result = ( syscall_sock->code(mode) );
-		ASSERT( result );
-        result = ( syscall_sock->end_of_message() );
-		ASSERT( result );
-
-        syscall_sock->decode();
-        result = ( syscall_sock->code(rval) );
-		ASSERT( result );
-        if( rval < 0 ) {
-                result = ( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = mkdir(path,mode);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+        	CurrentSysCall = CONDOR_mkdir;
+	
+        	syscall_sock->encode();
+        	result = ( syscall_sock->code(CurrentSysCall) );
+			ASSERT( result );
+        	result = ( syscall_sock->code(path) );
+			ASSERT( result );
+       		result = ( syscall_sock->code(mode) );
+			ASSERT( result );
+        	result = ( syscall_sock->end_of_message() );
+			ASSERT( result );
+
+        	syscall_sock->decode();
+        	result = ( syscall_sock->code(rval) );
+			ASSERT( result );
+        	if( rval < 0 ) {
+                	result = ( syscall_sock->code(terrno) );
 				ASSERT( result );
-                result = ( syscall_sock->end_of_message() );
+                	result = ( syscall_sock->end_of_message() );
 				ASSERT( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        result = ( syscall_sock->end_of_message() );
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = ( syscall_sock->end_of_message() );
 		ASSERT( result );
+	}
         return rval;
 }
 
@@ -753,29 +843,37 @@ REMOTE_CONDOR_rmdir( char *  path )
         dprintf ( D_SYSCALLS, "Doing CONDOR_rmdir\n" );
 
         CurrentSysCall = CONDOR_rmdir;
-
-        syscall_sock->encode();
-        result = ( syscall_sock->code(CurrentSysCall) );
-		ASSERT( result );
-        result = ( syscall_sock->code(path) );
-		ASSERT( result );
-        result = ( syscall_sock->end_of_message() );
-		ASSERT( result );
-
-        syscall_sock->decode();
-        result = ( syscall_sock->code(rval) );
-		ASSERT( result );
-        if( rval < 0 ) {
-                result = ( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = rmdir( path);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+        	syscall_sock->encode();
+        	result = ( syscall_sock->code(CurrentSysCall) );
+			ASSERT( result );
+        	result = ( syscall_sock->code(path) );
+			ASSERT( result );
+        	result = ( syscall_sock->end_of_message() );
+			ASSERT( result );
+
+        	syscall_sock->decode();
+        	result = ( syscall_sock->code(rval) );
+			ASSERT( result );
+        	if( rval < 0 ) {
+                	result = ( syscall_sock->code(terrno) );
 				ASSERT( result );
-                result = ( syscall_sock->end_of_message() );
+                	result = ( syscall_sock->end_of_message() );
 				ASSERT( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        result = ( syscall_sock->end_of_message() );
-		ASSERT( result );
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = ( syscall_sock->end_of_message() );
+			ASSERT( result );
+	}
         return rval;
 }
 
@@ -787,32 +885,40 @@ REMOTE_CONDOR_fsync(int   fd)
 		int result = 0;
 
         dprintf ( D_SYSCALLS, "Doing CONDOR_fsync\n" );
-
-        CurrentSysCall = CONDOR_fsync;
-
-        syscall_sock->encode();
-        result = ( syscall_sock->code(CurrentSysCall) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->code(fd) );
-		ON_ERROR_RETURN( result );
-        result = ( syscall_sock->end_of_message() );
-		ON_ERROR_RETURN( result );
-
-        syscall_sock->decode();
-        result = ( syscall_sock->code(rval) );
-		ON_ERROR_RETURN( result );
-        if( rval < 0 ) {
-                result = ( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = fsync(fd);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+        	CurrentSysCall = CONDOR_fsync;
+
+       	 	syscall_sock->encode();
+        	result = ( syscall_sock->code(CurrentSysCall) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->code(fd) );
+			ON_ERROR_RETURN( result );
+        	result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+
+        	syscall_sock->decode();
+        	result = ( syscall_sock->code(rval) );
+			ON_ERROR_RETURN( result );
+        	if( rval < 0 ) {
+                	result = ( syscall_sock->code(terrno) );
 				ON_ERROR_RETURN( result );
-                result = ( syscall_sock->end_of_message() );
+                	result = ( syscall_sock->end_of_message() );
 				ON_ERROR_RETURN( result );
-                errno = terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        result = ( syscall_sock->end_of_message() );
+                	errno = terrno;
+                	dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+                	return rval;
+        	}
+        	result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-        return rval;
+        }
+	return rval;
 }
 
 int
@@ -825,25 +931,33 @@ REMOTE_CONDOR_get_file_info_new(char *
 
         CurrentSysCall = CONDOR_get_file_info_new;
 
-		ASSERT( actual_url == NULL );
- 
-        syscall_sock->encode();
-        ASSERT( syscall_sock->code(CurrentSysCall) );
-        ASSERT( syscall_sock->code(logical_name) );
-        ASSERT( syscall_sock->end_of_message() );
+	ASSERT( actual_url == NULL );
+ 	
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = get_file_info_new(logical_name,actual_url);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+ 	} else {
+        	syscall_sock->encode();
+        	ASSERT( syscall_sock->code(CurrentSysCall) );
+        	ASSERT( syscall_sock->code(logical_name) );
+        	ASSERT( syscall_sock->end_of_message() );
  
-        syscall_sock->decode();
-        ASSERT( syscall_sock->code(rval) );
-        if( rval < 0 ) {
-                ASSERT( syscall_sock->code(terrno) );
-                ASSERT( syscall_sock->end_of_message() );
-                errno = (int)terrno;
-                dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-                return rval;
-        }
-        ASSERT( syscall_sock->get(actual_url) );
-        ASSERT( syscall_sock->end_of_message() );
-
+        	syscall_sock->decode();
+        	ASSERT( syscall_sock->code(rval) );
+        	if( rval < 0 ) {
+        	        ASSERT( syscall_sock->code(terrno) );
+        	        ASSERT( syscall_sock->end_of_message() );
+        	        errno = (int)terrno;
+        	        dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+         	       return rval;
+        	}
+	        ASSERT( syscall_sock->get(actual_url) );
+        	ASSERT( syscall_sock->end_of_message() );
+	}
         return rval;
 }                                                                              
 
@@ -885,53 +999,68 @@ REMOTE_CONDOR_ulog( ClassAd *ad )
 	int result = 0;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_ulog\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		result = ulog( ad );
+		if ( result < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  result, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_ulog;
 
-	CurrentSysCall = CONDOR_ulog;
-
-	if( ! ad ) {
-		EXCEPT( "CONDOR_ulog called with NULL ClassAd!" ); 
-		return -1;
-	}
-
-	syscall_sock->encode();
-	result = syscall_sock->code(CurrentSysCall);
-	ASSERT( result );
-	result = ad->put(*syscall_sock);
-	ASSERT( result );
-	result = syscall_sock->end_of_message();
-	ASSERT( result );
+		if( ! ad ) {
+			EXCEPT( "CONDOR_ulog called with NULL ClassAd!" ); 
+			return -1;
+		}
 
-	//NOTE: we expect no response.
+		syscall_sock->encode();
+		result = syscall_sock->code(CurrentSysCall);
+		ASSERT( result );
+		result = ad->put(*syscall_sock);
+		ASSERT( result );
+		result = syscall_sock->end_of_message();
+		ASSERT( result );
 
+		//NOTE: we expect no response.
+	}
 	return 0;
 }
 
 int
-REMOTE_CONDOR_get_job_attr(char *  attrname , char *& expr)
+REMOTE_CONDOR_get_job_attr(char *  attrname , std::string * expr)
 {
 	int	rval;
 	condor_errno_t	terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_get_job_attr\n" );
-
-	CurrentSysCall = CONDOR_get_job_attr;
-
-	syscall_sock->encode();
-	ASSERT( syscall_sock->code(CurrentSysCall) );
-	ASSERT( syscall_sock->code(attrname) );
-	ASSERT( syscall_sock->end_of_message() );
-
-	syscall_sock->decode();
-	ASSERT( syscall_sock->code(rval) );
-	if( rval < 0 ) {
-		ASSERT( syscall_sock->code(terrno) );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = Starter->getJobAttr(attrname,expr);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_get_job_attr;
+
+		syscall_sock->encode();
+		ASSERT( syscall_sock->code(CurrentSysCall) );
+		ASSERT( syscall_sock->code(attrname) );
 		ASSERT( syscall_sock->end_of_message() );
-		errno = (int)terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
+
+		syscall_sock->decode();
+		ASSERT( syscall_sock->code(rval) );
+		if( rval < 0 ) {
+			ASSERT( syscall_sock->code(terrno) );
+			ASSERT( syscall_sock->end_of_message() );
+			errno = (int)terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		assert ( syscall_sock->get(*expr));
+		ASSERT( syscall_sock->end_of_message());
 	}
-	ASSERT( syscall_sock->code(expr) );
-	ASSERT( syscall_sock->end_of_message() );
 	return rval;
 }
 
@@ -942,25 +1071,33 @@ REMOTE_CONDOR_set_job_attr(char *  attrn
 	condor_errno_t	terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_set_job_attr\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = Starter->updateJobAttr(attrname,expr);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_set_job_attr;
+
+		syscall_sock->encode();
+		ASSERT( syscall_sock->code(CurrentSysCall) );
+		ASSERT( syscall_sock->code(expr) );
+		ASSERT( syscall_sock->code(attrname) );
+		ASSERT( syscall_sock->end_of_message() );
 
-	CurrentSysCall = CONDOR_set_job_attr;
-
-	syscall_sock->encode();
-	ASSERT( syscall_sock->code(CurrentSysCall) );
-	ASSERT( syscall_sock->code(expr) );
-	ASSERT( syscall_sock->code(attrname) );
-	ASSERT( syscall_sock->end_of_message() );
-
-	syscall_sock->decode();
-	ASSERT( syscall_sock->code(rval) );
-	if( rval < 0 ) {
-		ASSERT( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		ASSERT( syscall_sock->code(rval) );
+		if( rval < 0 ) {
+			ASSERT( syscall_sock->code(terrno) );
+			ASSERT( syscall_sock->end_of_message() );
+			errno = (int)terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		ASSERT( syscall_sock->end_of_message() );
-		errno = (int)terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	ASSERT( syscall_sock->end_of_message() );
 	return rval;
 }
 
@@ -971,24 +1108,43 @@ REMOTE_CONDOR_constrain( char *  expr)
 	condor_errno_t	terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_constrain\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		std::string reqs;
+		std::string newreqs;
+		priv_state old_priv = set_user_priv();
+		rval = 0;
+		if (( Starter->updateJobAttr("AgentRequirements",expr) == 1) && 
+			( Starter->getJobAttr("Requirements",&reqs) == 1)) {
+			if(!strstr(reqs.c_str(),"AgentRequirements")) {
+				newreqs = "(" + reqs + ")" + " && AgentRequirements";
+				dprintf(D_SYSCALLS,"\tchanging Requirements to %s\n",newreqs.c_str());
+				rval = Starter->updateJobAttr("Requirements", newreqs.c_str());
+			}	
+			
+		}
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_constrain;
+
+		syscall_sock->encode();
+		ASSERT( syscall_sock->code(CurrentSysCall) );
+		ASSERT( syscall_sock->code(expr) );
+		ASSERT( syscall_sock->end_of_message() );
 
-	CurrentSysCall = CONDOR_constrain;
-
-	syscall_sock->encode();
-	ASSERT( syscall_sock->code(CurrentSysCall) );
-	ASSERT( syscall_sock->code(expr) );
-	ASSERT( syscall_sock->end_of_message() );
-
-	syscall_sock->decode();
-	ASSERT( syscall_sock->code(rval) );
-	if( rval < 0 ) {
-		ASSERT( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		ASSERT( syscall_sock->code(rval) );
+		if( rval < 0 ) {
+			ASSERT( syscall_sock->code(terrno) );
+			ASSERT( syscall_sock->end_of_message() );
+			errno = (int)terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		ASSERT( syscall_sock->end_of_message() );
-		errno = (int)terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	ASSERT( syscall_sock->end_of_message() );
 	return rval;
 }
 
@@ -1055,37 +1211,47 @@ REMOTE_CONDOR_pread(int fd , void* buf ,
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_pread\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		memset( buf, 0, (unsigned)len );
+		errno = 0;
+		rval = pread( fd, buf, len, offset );
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_pread;
 
-	CurrentSysCall = CONDOR_pread;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(len) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(offset) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(len) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(offset) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buf, rval) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buf, rval) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1096,129 +1262,191 @@ REMOTE_CONDOR_pwrite(int fd , void* buf
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_pwrite\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		errno = 0;
+		rval = pwrite( fd, buf, len, (off_t)offset);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);	
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_pwrite;
 
-	CurrentSysCall = CONDOR_pwrite;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(len) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(offset) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code_bytes_bool(buf, len) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(len) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(offset) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code_bytes_bool(buf, len) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
-	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		}
 	return rval;
 }
 
 int
-REMOTE_CONDOR_sread(int fd , void* buf , size_t len, size_t offset,
+REMOTE_CONDOR_sread(int fd , char* buf , size_t len, size_t offset,
 	size_t stride_length, size_t stride_skip)
 {
 	int rval = -1, result = 0;
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_sread\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		memset( buf, 0, (unsigned)len );
+		errno = EINVAL;
+		rval = -1;
+		unsigned int total = 0;
+
+		while(total < len && stride_length > 0) {
+			// For last read (make sure we only read total of 'len' bytes)
+			if(len - total < stride_length) {
+				stride_length = len - total;
+			}
+			rval = pread( fd, (void*)&buf[total], stride_length, offset );
+			if(rval >= 0) {
+				total += rval;
+				offset += stride_skip;
+			} else {
+				break;
+			}
+		}
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		} else {
+		 	rval = total;
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_sread;
 
-	CurrentSysCall = CONDOR_sread;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(len) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(offset) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(stride_length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(stride_skip) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(len) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(offset) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(stride_length) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(stride_skip) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buf, rval) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buf, rval) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
 int
-REMOTE_CONDOR_swrite(int fd , void* buf ,size_t len, size_t offset, 
+REMOTE_CONDOR_swrite(int fd , char* buf ,size_t len, size_t offset, 
 		size_t stride_length, size_t stride_skip)
 {
 	int rval = -1, result = 0;
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_swrite\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		errno = EINVAL;
+		rval = -1;
+		unsigned int total = 0;
+		
+		while(total < len && stride_length > 0) {
+			// For last write (make sure we only write 'len' bytes)
+			if(len - total < stride_length) {
+				stride_length = len - total;
+			}
+			rval = pwrite( fd, (void*)&buf[total], stride_length, offset);
+			if(rval >= 0) {
+				total += rval;
+				offset += stride_skip;
+			} else {
+				break;
+			}
+		}
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		} else {
+		 	rval = total;
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_swrite;
 
-	CurrentSysCall = CONDOR_swrite;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(len) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(offset) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(stride_length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(stride_skip) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code_bytes_bool(buf, len) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(len) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(offset) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(stride_length) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(stride_skip) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code_bytes_bool(buf, len) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1229,31 +1457,48 @@ REMOTE_CONDOR_rmall(char *path)
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_rmall\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = rmdir(path);
+		// If rmdir failed, try again after removing everthing in directory
+		if(rval == -1) {
+			Directory dir(path);
+			if(dir.Remove_Entire_Directory()) {
+				rval = rmdir(path);
+			}	
+		}
+		
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+	
+		CurrentSysCall = CONDOR_rmall;
 
-	CurrentSysCall = CONDOR_rmall;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1264,34 +1509,55 @@ REMOTE_CONDOR_getfile(char *path, char *
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_getfile\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		errno = 0;
+		int fd  = safe_open_wrapper_follow( path, O_RDONLY );
+		rval = fd;
+		if(rval >= 0) {
+			struct stat info;
+			errno = 0;
+			rval = stat(path, &info);
+			int length = info.st_size;
+			*buffer = (char*)malloc( (unsigned)length );
+			if (*buffer){
+				errno = 0;
+				rval = read( fd , *buffer , length);
+			}
+		} 
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_getfile;
 
-	CurrentSysCall = CONDOR_getfile;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		*buffer = (char*)malloc(rval);
+		result = ( syscall_sock->code_bytes_bool(*buffer, rval) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	*buffer = (char*)malloc(rval);
-	result = ( syscall_sock->code_bytes_bool(*buffer, rval) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1302,106 +1568,181 @@ REMOTE_CONDOR_putfile(char *path, int mo
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_putfile\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		errno = 0;
+		rval = safe_open_wrapper_follow(path, O_CREAT | O_WRONLY | O_TRUNC | _O_BINARY, mode);	
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_putfile;
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(mode) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(length) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
+		
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
 
-	CurrentSysCall = CONDOR_putfile;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(mode) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+		}
+		result = ( syscall_sock->end_of_message() );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
 int
-REMOTE_CONDOR_getlongdir(char *path, char *&buffer)
+REMOTE_CONDOR_getlongdir(char *path, std::string * buffer)
 {
 	int rval = -1, result = 0;
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_getlongdir\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();	
+	
+		rval = -1;
+		std::string check;	
+			
+		errno = 0;		
+		Directory directory(path);
+		struct stat stat_buf;
+		char line[1024];
+			
+		const char *next;
+		while((next = directory.Next())) {
+			buffer->append (next);
+			buffer->append ( "\n");       
+			check = path; 
+			check.append(&DIR_DELIM_CHAR);
+			check.append(next);
+			rval = stat(check.c_str(), &stat_buf);
+			if(rval == -1) {
+				break;
+			}
+			if(stat_string(line, &stat_buf) < 0) {
+				rval= -1;
+				break;
+			}
+			buffer -> append ( line );
+			next = directory.Next();
+		}
 
-	CurrentSysCall = CONDOR_getlongdir;
+		
+		buffer->append ("\n");  // Needed to signify end of data
+		rval = buffer->length();
+		
+	
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_getlongdir;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n", rval, errno );
+			return rval;
+		}
+		result = ( syscall_sock->get(*buffer));
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n", rval, errno );
-		return rval;
 	}
-	result = ( syscall_sock->code(buffer) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
 int
-REMOTE_CONDOR_getdir(char *path, char *&buffer)
+REMOTE_CONDOR_getdir(char *path, std::string *buffer)
 {
 	int rval = -1, result = 0;
 	condor_errno_t terrno;
 	
 	dprintf ( D_SYSCALLS, "Doing CONDOR_getdir\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		errno = 0;
+		rval= -1;
+
+		Directory directory(path);
+		
+		const char *  next;
+	
+		while((next = directory.Next())) { 
+			buffer->append( next ); 
+			buffer->append("\n");		
+		}
 
-	CurrentSysCall = CONDOR_getdir;
+		
+		buffer->append("\n");	// Needed to signify end of data
+		rval= buffer->length();
+		
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_getdir;
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval <= 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
+
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		
+		result = ( syscall_sock->get(*buffer));
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code(buffer) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1412,33 +1753,49 @@ REMOTE_CONDOR_whoami(int length, void *b
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_whoami\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		memset( (void *) buffer, 0, (unsigned)length );
+		errno = 0;
+		int size = 6;
+		if(length < size) {
+			rval= -1;
+		} else {
+			rval = sprintf((char *)buffer, "CONDOR");
+		}	
 
-	CurrentSysCall = CONDOR_whoami;
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_whoami;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(length) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buffer, rval) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buffer, rval) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1449,35 +1806,50 @@ REMOTE_CONDOR_whoareyou(char *host, int
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_whoareyou\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		memset( (void *) buffer, 0, (unsigned)length );
+		errno = 0;
+		int size = 6;
+		if(length < size) {
+			rval= -1;
+		} else {
+			rval = sprintf((char *) buffer, "CONDOR");
+		}	
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_whoareyou;
 
-	CurrentSysCall = CONDOR_whoareyou;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(host) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(host) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(length) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buffer, rval) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buffer, rval) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1488,70 +1860,119 @@ REMOTE_CONDOR_fstat(int fd, char* buffer
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_fstat\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();;
+		errno = 0;
+		memset( (void *) buffer, 0, 1024 );
+		errno = 0;
+		struct stat stat_buf;
+		result = fstat(fd, &stat_buf);
+
+		if(result == 0) {
+			if(stat_string(buffer, &stat_buf) < 0) {
+				result = -1;	
+			}
+		}
 
-	CurrentSysCall = CONDOR_fstat;
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_fstat;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
 int
 REMOTE_CONDOR_fstatfs(int fd, char* buffer)
 {
+
 	int rval = -1, result = 0;
 	condor_errno_t terrno;
-
+	
 	dprintf ( D_SYSCALLS, "Doing CONDOR_fstatfs\n" );
+	
 
-	CurrentSysCall = CONDOR_fstat;
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		errno = 0;
+#if defined(Solaris)
+		struct statvfs statfs_buf;
+		rval = fstatvfs(fd, &statfs_buf);
+#else
+		struct statfs statfs_buf;
+		rval = fstatfs(fd, &statfs_buf);
+#endif			
+		terrno = (condor_errno_t)errno;
+		if(rval == 0) {
+			if(statfs_string(buffer, &statfs_buf) < 0) {
+				rval = -1;
+			}
+		}
+		
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_fstat;
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
+
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+
 	return rval;
 }
 
@@ -1563,34 +1984,47 @@ REMOTE_CONDOR_fchown(int fd, int uid, in
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_fchown\n" );
 
-	CurrentSysCall = CONDOR_fchown;
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		rval = fchown(fd, uid, gid);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(uid) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(gid) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_fchown;
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(uid) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(gid) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
+
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1601,33 +2035,45 @@ REMOTE_CONDOR_fchmod(int fd, int mode)
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_fchmod\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		rval = fchmod(fd, (mode_t)mode);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_fchmod;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(mode) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_fchmod;
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(mode) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
+
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1638,68 +2084,105 @@ REMOTE_CONDOR_ftruncate(int fd, int leng
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_truncate\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		rval = ftruncate(fd, length);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_ftruncate;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_ftruncate;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(fd) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(fd) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(length) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
 
-
-
-
 int
-REMOTE_CONDOR_putfile_buffer(void *buffer, int length)
+REMOTE_CONDOR_putfile_buffer(int fd, void *buffer, int length)
 {
 	int rval = -1, result = 0;
 	condor_errno_t terrno;
 	
 	dprintf ( D_SYSCALLS, "Doing CONDOR_putfile_buffer\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		errno = 0;
+		if( fd < 0 ) {
+			return -1;
+		}
+
+		if ( length > 0) {
+			// Now actually putfile
+			errno = 0;
+			rval = write(fd, buffer, length);
+		} else {
+			rval = 0;
+		}
+		close(fd);
 	
-	syscall_sock->encode();
-	result = ( syscall_sock->code_bytes_bool(buffer, length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
-	
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		syscall_sock->encode();
+
+		result = ( syscall_sock->code_bytes_bool(buffer, length) );
+
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
+
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+		}
+
+		result = ( syscall_sock->end_of_message() );
+
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
+
 int
 REMOTE_CONDOR_link(char *path, char *newpath)
 {
@@ -1707,33 +2190,45 @@ REMOTE_CONDOR_link(char *path, char *new
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_link\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		rval = link ( path, newpath);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_link;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_link;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(newpath) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(newpath) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1744,33 +2239,45 @@ REMOTE_CONDOR_symlink(char *path, char *
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_symlink\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		rval= symlink(path, newpath);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_symlink;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_symlink;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(newpath) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(newpath) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1781,36 +2288,53 @@ REMOTE_CONDOR_readlink(char *path, int l
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_readlink\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		*buffer = (char*)malloc(length);
+		if (*buffer) {
+			rval= readlink(path, *buffer, length);
+			if ( rval < 0) {
+				dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+			}
+		} else {
+			dprintf ( D_ALWAYS, "Out of memory, unable to malloc(%d)\n",  length);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_readlink;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_readlink;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(length) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		*buffer = (char*)malloc(rval);
+		result = ( syscall_sock->code_bytes_bool(*buffer, rval) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	*buffer = (char*)malloc(rval);
-	result = ( syscall_sock->code_bytes_bool(*buffer, rval) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1821,33 +2345,50 @@ REMOTE_CONDOR_stat(char *path, char *buf
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_stat\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		memset( (void *) buffer, 0, 1024 );	
+		errno = 0;
+		struct stat stat_buf;
+		rval = stat(path, &stat_buf);
+		if (rval == 0) {
+			if(stat_string(buffer, &stat_buf) < 0) {
+				rval = -1;
+			}
+		}
 
-	CurrentSysCall = CONDOR_stat;
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_stat;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval == -1 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval == -1 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1858,33 +2399,52 @@ REMOTE_CONDOR_lstat(char *path, char *bu
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_lstat\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		result = readlink(path, buffer, 1024);
+		struct stat stat_buf;
+		rval= lstat(path, &stat_buf);
+		if(rval == 0) {
+			if(stat_string(buffer, &stat_buf) < 0) {
+				rval = -1;
+				}
+			}
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_lstat;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_lstat;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1895,33 +2455,57 @@ REMOTE_CONDOR_statfs(char *path, char *b
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_statfs\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		errno = 0;
+#if defined(Solaris)
+		struct statvfs statfs_buf;
+		rval = statvfs(path, &statfs_buf);
+#else
+		struct statfs statfs_buf;
+		rval = statfs(path, &statfs_buf);
+#endif
+		if(rval == 0) {
+			if(statfs_string(buffer, &statfs_buf) < 0) {
+				rval= -1;
+			}
+		}		
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_statfs;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_statfs;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
+		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
+		result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
 		ON_ERROR_RETURN( result );
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->code_bytes_bool(buffer, 1024) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1932,33 +2516,41 @@ REMOTE_CONDOR_access(char *path, int mod
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_access\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = access(path, mode);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_access;
 
-	CurrentSysCall = CONDOR_access;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(mode) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(mode) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem %d , errno = %d\n", result, errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -1969,33 +2561,41 @@ REMOTE_CONDOR_chmod(char *path, int mode
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_chmod\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		rval = chmod(path, mode);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_chmod;
 
-	CurrentSysCall = CONDOR_chmod;
-
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(mode) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(mode) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -2006,35 +2606,47 @@ REMOTE_CONDOR_chown(char *path, int uid,
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_chown\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		rval= chown(path, uid, gid);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_chown;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_chown;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(uid) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(gid) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(uid) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(gid) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -2045,35 +2657,47 @@ REMOTE_CONDOR_lchown(char *path, int uid
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_lchown\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		rval= lchown(path, uid, gid);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_lchown;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_lchown;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(uid) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(gid) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(uid) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(gid) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -2084,33 +2708,45 @@ REMOTE_CONDOR_truncate(char *path, int l
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_truncate\n" );
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+#ifdef WIN32
+#else
+		priv_state old_priv = set_user_priv();
+		rval= truncate(path, length);
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
 
-	CurrentSysCall = CONDOR_truncate;
+#endif	// ! WIN32
+	} else {
+		CurrentSysCall = CONDOR_truncate;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(length) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(length) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
@@ -2121,36 +2757,410 @@ REMOTE_CONDOR_utime(char *path, int acti
 	condor_errno_t terrno;
 
 	dprintf ( D_SYSCALLS, "Doing CONDOR_utime\n" );
-	
-	CurrentSysCall = CONDOR_utime;
+	if( Starter->jic && (Starter->jic->jobUniverse() == CONDOR_UNIVERSE_LOCAL)) {
+		priv_state old_priv = set_user_priv();
+		struct utimbuf ut;
+		ut.actime = actime;
+		ut.modtime = modtime;
+		errno = 0;
+		rval= utime(path, &ut);
+		
+		if ( rval < 0) {
+			dprintf ( D_SYSCALLS, "Return val problem(%d), errno = %d\n",  rval, errno);
+		}
+		set_priv( old_priv );
+	} else {
+		CurrentSysCall = CONDOR_utime;
 
-	syscall_sock->encode();
-	result = ( syscall_sock->code(CurrentSysCall) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(path) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(actime) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->code(modtime) );
-	ON_ERROR_RETURN( result );
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
+		syscall_sock->encode();
+		result = ( syscall_sock->code(CurrentSysCall) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(path) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(actime) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->code(modtime) );
+		ON_ERROR_RETURN( result );
+		result = ( syscall_sock->end_of_message() );
+		ON_ERROR_RETURN( result );
 
-	syscall_sock->decode();
-	result = ( syscall_sock->code(rval) );
-	ON_ERROR_RETURN( result );
-	if( rval < 0 ) {
-		result = ( syscall_sock->code(terrno) );
+		syscall_sock->decode();
+		result = ( syscall_sock->code(rval) );
 		ON_ERROR_RETURN( result );
+		if( rval < 0 ) {
+			result = ( syscall_sock->code(terrno) );
+			ON_ERROR_RETURN( result );
+			result = ( syscall_sock->end_of_message() );
+			ON_ERROR_RETURN( result );
+			errno = terrno;
+			dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
+			return rval;
+		}
 		result = ( syscall_sock->end_of_message() );
 		ON_ERROR_RETURN( result );
-		errno = terrno;
-		dprintf ( D_SYSCALLS, "Return val problem, errno = %d\n", errno );
-		return rval;
 	}
-	result = ( syscall_sock->end_of_message() );
-	ON_ERROR_RETURN( result );
 	return rval;
 }
 
 } // extern "C"
+
+
+
+int
+get_file_info_new( const char *logical_name, char *&actual_url )
+{
+	std::string 	remap_list;
+	std::string	split_dir;
+	std::string	split_file;
+	std::string	full_path;
+	std::string	remap;
+	std::string 	urlbuf;
+	const char	*method;
+
+	dprintf( D_SYSCALLS, "\tlogical_name = \"%s\"\n", logical_name );
+
+	ASSERT( actual_url == NULL );
+
+	/* The incoming logical name might be a simple, relative, or complete path */
+	/* We need to examine both the full path and the simple name. */
+
+	filename_split( logical_name, split_dir, split_file );
+	complete_path( logical_name, full_path );
+
+	/* Any name comparisons must check the logical name, the simple name, and the full path */
+
+	if(Starter->jic->jobClassAd()->LookupString(ATTR_FILE_REMAPS,remap_list) &&
+	  (filename_remap_find( remap_list.c_str(), logical_name, remap ) ||
+	   filename_remap_find( remap_list.c_str(), split_file.c_str(), remap ) ||
+	   filename_remap_find( remap_list.c_str(), full_path.c_str(), remap ))) {
+
+		dprintf(D_SYSCALLS,"\tremapped to: %s\n",remap.c_str());
+
+		/* If the remap is a full URL, return right away */
+		/* Otherwise, continue processing */
+
+		if(strchr(remap.c_str(),':')) {
+			dprintf(D_SYSCALLS,"\tremap is complete url\n");
+			actual_url = strdup(remap.c_str());
+			return 0;
+		} else {
+			dprintf(D_SYSCALLS,"\tremap is simple file\n");
+			complete_path( remap.c_str(), full_path );
+		}
+	} else {
+		dprintf(D_SYSCALLS,"\tnot remapped\n");
+	}
+
+	dprintf( D_SYSCALLS,"\tfull_path = \"%s\"\n", full_path.c_str() );
+
+	/* Now, we have a full pathname. */
+	/* Figure out what url modifiers to slap on it. */
+
+#ifdef HPUX
+	/* I have no idea why this is happening, but I have seen it happen many
+	 * times on the HPUX version, so here is a quick hack -Todd 5/19/95 */
+	if ( full_path == "/usr/lib/nls////strerror.cat" )
+		full_path = "/usr/lib/nls/C/strerror.cat\0";
+#endif
+
+	if( use_special_access(full_path.c_str()) ) {
+		method = "special";
+	} else if( use_local_access(full_path.c_str()) ) {
+		method = "local";
+	} else {
+		method = "remote";
+	}
+
+	if( use_fetch(method,full_path.c_str()) ) {
+		urlbuf += "fetch:";
+	}
+
+	if( use_compress(method,full_path.c_str()) ) {
+		urlbuf += "compress:";
+	}
+
+	append_buffer_info(urlbuf,method,full_path.c_str());
+
+	if( use_append(method,full_path.c_str()) ) {
+		urlbuf += "append:";
+	}
+
+	urlbuf += method;
+	urlbuf += ":";
+	urlbuf += full_path;
+	actual_url = strdup(urlbuf.c_str());
+
+	dprintf(D_SYSCALLS,"\tactual_url: %s\n",actual_url);
+
+	return 0;
+}
+
+int get_buffer_info( int *bytes_out, int *block_size_out, int *prefetch_bytes_out )
+{
+	int bytes=0, block_size=0;
+
+	Starter->jic->jobClassAd()->LookupInteger(ATTR_BUFFER_SIZE,bytes);
+	Starter->jic->jobClassAd()->LookupInteger(ATTR_BUFFER_BLOCK_SIZE,block_size);
+
+	if( bytes<0 ) bytes = 0;
+	if( block_size<0 ) block_size = 0;
+	if( bytes<block_size ) block_size = bytes;
+
+	*bytes_out = bytes;
+	*block_size_out = block_size;
+	*prefetch_bytes_out = 0;
+
+	dprintf(D_SYSCALLS,"\tbuffer configuration is bytes=%d block_size=%d\n",bytes, block_size );
+
+	return 0;
+}
+
+
+static void append_buffer_info( std::string &url, const char *method, char const *path )
+{
+	std::string buffer_list;
+	std::string buffer_string;
+	std::string dir;
+	std::string file;
+	int s,bs,ps;
+	int result;
+
+	filename_split(path,dir,file);
+
+	/* Do not buffer special device files, whether local or remote */
+	if(!strncmp(path,"/dev/",5)) return;
+
+	/* Get the default buffer setting */
+	get_buffer_info( &s, &bs, &ps );
+
+	/* Now check for individual file overrides */
+	/* These lines have the same syntax as a remap list */
+
+	if(Starter->jic->jobClassAd()->LookupString(ATTR_BUFFER_FILES,buffer_list)) {
+		if( filename_remap_find(buffer_list.c_str(),path,buffer_string) ||
+		    filename_remap_find(buffer_list.c_str(),file.c_str(),buffer_string) ) {
+
+			/* If the file is merely mentioned, turn on the default buffer */
+			url += "buffer:";
+
+			/* If there is also a size setting, use that */
+			result = sscanf(buffer_string.c_str(),"(%d,%d)",&s,&bs);
+			if( result==2 ) url += buffer_string;
+
+			return;
+		}
+	}
+
+	/* Turn on buffering if the value is set and is not special or local */
+	/* In this case, use the simple syntax 'buffer:' so as not to confuse old libs */
+
+	if( s>0 && bs>0 && strcmp(method,"local") && strcmp(method,"special")  ) {
+		url += "buffer:";
+	}
+}
+
+/* Return true if this JobAd attribute contains this path */
+
+static int attr_list_has_file( const char *attr, const char *path )
+{
+	char const *file;
+	std::string str;
+
+	file = condor_basename(path);
+
+	Starter->jic->jobClassAd()->LookupString(attr,str);
+	StringList list(str.c_str());
+
+	if( list.contains_withwildcard(path) || list.contains_withwildcard(file) ) {
+		return 1;
+	} else {
+		return 0;
+	}
+}
+
+/*
+If short_path is an absolute path, copy it to full path.
+Otherwise, tack the current directory on to the front
+of short_path, and copy it to full_path.
+Notice that the old shadow kept track of the job as it
+moved around, but there is no such notion in this shadow,
+so CurrentWorkingDir is replaced with the job's iwd.
+*/
+ 
+static void complete_path( const char *short_path, std::string &full_path )
+{
+	if(short_path[0]==DIR_DELIM_CHAR) {
+		full_path = short_path;
+	} else {
+		std::string jobiwd(Starter->jic->jobIWD());
+		full_path = jobiwd + DIR_DELIM_STRING + short_path;         
+					
+						  
+						  
+	}
+}
+
+static int use_special_access( const char *file )
+{
+	return
+		!strcmp(file,"/dev/tcp") ||
+		!strcmp(file,"/dev/udp") ||
+		!strcmp(file,"/dev/icmp") ||
+		!strcmp(file,"/dev/ip");	
+}
+
+static int use_local_access( const char *file )
+{
+	return
+		!strcmp(file,"/dev/null") ||
+		!strcmp(file,"/dev/zero") ||
+		attr_list_has_file( ATTR_LOCAL_FILES, file );
+}
+
+static int use_compress( const char * /* method */, const char *path )
+{
+	return attr_list_has_file( ATTR_COMPRESS_FILES, path );
+}
+
+static int use_fetch( const char * /* method */, const char *path )
+{
+	return attr_list_has_file( ATTR_FETCH_FILES, path );
+}
+static int use_append( const char * /* method */, const char *path )
+{
+	return attr_list_has_file( ATTR_APPEND_FILES, path );
+}
+
+int
+ulog( ClassAd *ad )
+{
+	ULogEvent *event = instantiateEvent(ad);
+	int result = 0;
+	char const *critical_error = NULL;
+	std::string CriticalErrorBuf;
+	bool event_already_logged = false;
+	bool put_job_on_hold = false;
+	char const *hold_reason = NULL;
+	char *hold_reason_buf = NULL;
+	int hold_reason_code = 0;
+	int hold_reason_sub_code = 0;
+
+	if(!event) {
+		std::string add_str;
+		ad->sPrint(add_str);
+		dprintf(
+		  D_ALWAYS,
+		  "invalid event ClassAd in ulog: %s\n",
+		  add_str.c_str());
+		return 0;
+	}
+
+	if(ad->LookupInteger(ATTR_HOLD_REASON_CODE,hold_reason_code)) {
+		put_job_on_hold = true;
+		ad->LookupInteger(ATTR_HOLD_REASON_SUBCODE,hold_reason_sub_code);
+		ad->LookupString(ATTR_HOLD_REASON,&hold_reason_buf);
+		if(hold_reason_buf) {
+			hold_reason = hold_reason_buf;
+		}
+	}
+
+	if( event->eventNumber == ULOG_REMOTE_ERROR ) {
+		RemoteErrorEvent *err = (RemoteErrorEvent *)event;
+
+		if(!err->getExecuteHost() || !*err->getExecuteHost()) {
+			//Insert remote host information.
+			char *execute_host = NULL;
+			err->setExecuteHost(daemonCore->InfoCommandSinfulString());
+			delete[] execute_host;
+		}
+
+		if(err->isCriticalError()) {
+			std::string errtext(err->getErrorText());   
+			std::string errhost(err->getExecuteHost());
+			CriticalErrorBuf =  "Error from " + errhost + ": " + errtext; 
+			 
+
+			critical_error = CriticalErrorBuf.c_str();
+			if(!hold_reason) {
+				hold_reason = critical_error;
+			}
+
+			event_already_logged = true;
+		}
+	}
+	
+	if( !event_already_logged ) {
+			if(!Starter->jic->getUserLog()->writeEvent( event, ad ) ) {
+				std::string add_str;
+				ad->sPrint(add_str);
+				dprintf(
+				  D_ALWAYS,
+				  "unable to log event in ulog: %s\n",
+				  add_str.c_str());
+				result = -1;
+			}
+
+	}
+	
+	delete event;
+	
+	if(put_job_on_hold) {
+		hold_reason = critical_error;
+		if(!hold_reason) {
+			hold_reason = "Job put on hold by remote host.";
+		}
+		Starter->jic->holdJob(hold_reason_buf,hold_reason_code,hold_reason_sub_code);
+	}
+
+	return result;
+}
+static int stat_string( char *line, struct stat *info )
+{
+#ifdef WIN32
+	return 0;
+#else
+	return sprintf(line,"%lld %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld %lld\n",
+		(long long) info->st_dev,
+		(long long) info->st_ino,
+		(long long) info->st_mode,
+		(long long) info->st_nlink,
+		(long long) info->st_uid,
+		(long long) info->st_gid,
+		(long long) info->st_rdev,
+		(long long) info->st_size,
+		(long long) info->st_blksize,
+		(long long) info->st_blocks,
+		(long long) info->st_atime,
+		(long long) info->st_mtime,
+		(long long) info->st_ctime
+	);
+#endif
+}
+
+#if defined(Solaris)
+static int statfs_string( char *line, struct statvfs *info )
+#else
+static int statfs_string( char *line, struct statfs *info )
+#endif
+{
+#ifdef WIN32
+	return 0;
+#else
+	return sprintf(line,"%lld %lld %lld %lld %lld %lld %lld\n",
+#  if defined(Solaris)
+		(long long) info->f_fsid,
+		(long long) info->f_frsize,
+#  else
+		(long long) info->f_type,
+		(long long) info->f_bsize,
+#  endif
+		(long long) info->f_blocks,
+		(long long) info->f_bfree,
+		(long long) info->f_bavail,
+		(long long) info->f_files,
+		(long long) info->f_ffree
+	);
+#endif
+}
+
+
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/NTsenders.h condor-7.9.1/src/condor_starter.V6.1/NTsenders.h
--- condor-7.9.1.orig/src/condor_starter.V6.1/NTsenders.h	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/NTsenders.h	2013-06-06 15:32:42.902715591 -0400
@@ -48,14 +48,14 @@ extern "C" {
 	int REMOTE_CONDOR_ulog_printf( int hold_reason_code, int hold_reason_subcode, char const *str, ... ) CHECK_PRINTF_FORMAT(3,4);
 	int REMOTE_CONDOR_ulog_error( int hold_reason_code, int hold_reason_subcode, char const *str );
 	int REMOTE_CONDOR_ulog( ClassAd *ad );
-	int REMOTE_CONDOR_get_job_attr( char *name, char *&expr );
+	int REMOTE_CONDOR_get_job_attr( char *name, std::string * expr) ;
 	int REMOTE_CONDOR_set_job_attr( char *name, char *expr );
 	int REMOTE_CONDOR_constrain( char *expr );
 	int REMOTE_CONDOR_pread( int fd, void *data, size_t length, size_t offset );
-	int REMOTE_CONDOR_pwrite( int fd , void* buf ,size_t len, size_t offset );
-	int REMOTE_CONDOR_sread(int fd , void* buf , size_t len, size_t offset,
+	int REMOTE_CONDOR_pwrite( int fd , void *buf ,size_t len, size_t offset );
+	int REMOTE_CONDOR_sread(int fd , char *buf , size_t len, size_t offset,
 		size_t stride_length, size_t stride_skip );
-	int REMOTE_CONDOR_swrite( int fd , void* buf ,size_t len, size_t offset,
+	int REMOTE_CONDOR_swrite( int fd , char *buf ,size_t len, size_t offset,
 		size_t stride_length, size_t stride_skip );
 	int REMOTE_CONDOR_rmall( char *path );
 	int REMOTE_CONDOR_fstat( int fd, char *buffer );
@@ -64,10 +64,10 @@ extern "C" {
 	int REMOTE_CONDOR_fchmod( int fd, int mode );
 	int REMOTE_CONDOR_ftruncate( int fd, int length );
 	int REMOTE_CONDOR_getfile( char *path, char **buffer );
-	int REMOTE_CONDOR_putfile( char *path, int mode, int length );
-	int REMOTE_CONDOR_putfile_buffer( void *buffer, int length );
-	int REMOTE_CONDOR_getlongdir( char *path, char *&buffer );
-	int REMOTE_CONDOR_getdir( char *path, char *&buffer );
+	int REMOTE_CONDOR_putfile( char *path, int mode, int length);
+	int REMOTE_CONDOR_putfile_buffer( int fd, void *buffer, int length );
+	int REMOTE_CONDOR_getlongdir( char *path, std::string *buffer );
+	int REMOTE_CONDOR_getdir( char *path, std::string * buffer );
 	int REMOTE_CONDOR_whoami( int length, void *buffer);
 	int REMOTE_CONDOR_whoareyou( char *host, int length, void *buffer );
 	int REMOTE_CONDOR_link( char *path, char *newpath );
diff -rNup condor-7.9.1.orig/src/condor_starter.V6.1/starter.h condor-7.9.1/src/condor_starter.V6.1/starter.h
--- condor-7.9.1.orig/src/condor_starter.V6.1/starter.h	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_starter.V6.1/starter.h	2013-06-06 15:32:42.902715591 -0400
@@ -189,7 +189,13 @@ public:
 			once everything is cleaned, calls JIC::allJobsGone().
 		*/
 	virtual bool cleanupJobs( void );
-
+	
+		/** Update a job attribute - local*/
+	virtual int updateJobAttr (const char *name, const char *expr);
+	
+		/** Get a job attribute - local*/
+        virtual int getJobAttr (const char *name, std::string * expr);
+	
 		/** Return the Execute dir */
 	const char *GetExecuteDir() const { return Execute; }
 
diff -rNup condor-7.9.1.orig/src/condor_utils/filename_tools_cpp.cpp condor-7.9.1/src/condor_utils/filename_tools_cpp.cpp
--- condor-7.9.1.orig/src/condor_utils/filename_tools_cpp.cpp	2012-08-16 15:51:24.000000000 -0400
+++ condor-7.9.1/src/condor_utils/filename_tools_cpp.cpp	2013-06-06 15:32:42.903715603 -0400
@@ -163,6 +163,54 @@ int filename_remap_find( const char *inp
 	return found;
 }
 
+int filename_remap_find( const char *input, const char *filename, std::string &output )
+{
+	char *name;
+	char *url;
+	char *buffer,*p;
+	int found = 0;
+	size_t input_len = strlen(input);
+
+	/* First make a copy of the input in canonical form */
+
+	buffer = (char *)malloc(input_len+1);
+	name = (char *)malloc(input_len+1);
+	url = (char *)malloc(input_len+1);
+	if(!buffer || !name || !url) {
+		free(buffer);
+		free(name);
+		free(url);
+		return 0;
+	}
+	eat_space(input,buffer);
+
+	/* Now find things like name=url; name=url; ... */
+	/* A trailing url with no ; shouldn't cause harm. */
+
+	p = buffer;
+
+	while(1) {
+		p = copy_upto(p,name,'=',input_len);
+		if(!p) break;
+		p++;
+		p = copy_upto(p,url,';',input_len);
+
+		if(!strncmp(name,filename,input_len)) {
+			output = url;
+			found = 1;
+			break;
+		}
+
+		if(!p) break;
+		p++;
+	}
+
+	free(buffer);
+	free(name);
+	free(url);
+	return found;
+}
+
 // changes all directory separators to match the DIR_DELIM_CHAR
 // makes changes in place
 void
