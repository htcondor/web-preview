diff --git a/src/condor_gridmanager/basejob.cpp b/src/condor_gridmanager/basejob.cpp
index 7f48043..504bf8c 100644
--- a/src/condor_gridmanager/basejob.cpp
+++ b/src/condor_gridmanager/basejob.cpp
@@ -32,6 +32,7 @@
 #include "condor_email.h"
 #include "classad_helpers.h"
 #include "classad_merge.h"
+#include "exit.h"
 
 #define HASH_TABLE_SIZE			500
 
@@ -1630,186 +1631,12 @@ d_format_time( double dsecs )
 void
 EmailTerminateEvent(ClassAd * job_ad, bool exit_status_known)
 {
-		// TODO We should use the Email class here, rather than duplicating
-		//   most of what it does.
 	if ( !job_ad ) {
 		dprintf(D_ALWAYS, 
 				"email_terminate_event called with invalid ClassAd\n");
 		return;
 	}
 
-	int cluster, proc;
-	job_ad->LookupInteger( ATTR_CLUSTER_ID, cluster );
-	job_ad->LookupInteger( ATTR_PROC_ID, proc );
-
-	int notification = NOTIFY_COMPLETE; // default
-	job_ad->LookupInteger(ATTR_JOB_NOTIFICATION,notification);
-
-	switch( notification ) {
-		case NOTIFY_NEVER:    return;
-		case NOTIFY_ALWAYS:   break;
-		case NOTIFY_COMPLETE: break;
-		case NOTIFY_ERROR:    return;
-		default:
-			dprintf(D_ALWAYS, 
-				"Condor Job %d.%d has unrecognized notification of %d\n",
-				cluster, proc, notification );
-				// When in doubt, better send it anyway...
-			break;
-	}
-
-	char subjectline[50];
-	sprintf( subjectline, "Condor Job %d.%d", cluster, proc );
-	FILE * mailer =  email_user_open( job_ad, subjectline );
-
-	if( ! mailer ) {
-		// Is message redundant?  Check email_user_open and euo's children.
-		dprintf(D_ALWAYS, 
-			"email_terminate_event failed to open a pipe to a mail program.\n");
-		return;
-	}
-
-		// gather all the info out of the job ad which we want to 
-		// put into the email message.
-	std::string JobName;
-	job_ad->LookupString( ATTR_JOB_CMD, JobName );
-
-	MyString Args;
-	ArgList::GetArgsStringForDisplay(job_ad,&Args);
-	
-	/*
-	// Not present.  Probably doesn't make sense for Globus
-	int had_core = FALSE;
-	job_ad->LookupBool( ATTR_JOB_CORE_DUMPED, had_core );
-	*/
-
-	int q_date = 0;
-	job_ad->LookupInteger(ATTR_Q_DATE,q_date);
-	
-	float remote_sys_cpu = 0.0;
-	job_ad->LookupFloat(ATTR_JOB_REMOTE_SYS_CPU, remote_sys_cpu);
-	
-	float remote_user_cpu = 0.0;
-	job_ad->LookupFloat(ATTR_JOB_REMOTE_USER_CPU, remote_user_cpu);
-	
-	int image_size = 0;
-	job_ad->LookupInteger(ATTR_IMAGE_SIZE, image_size);
-	
-	/*
-	int shadow_bday = 0;
-	job_ad->LookupInteger( ATTR_SHADOW_BIRTHDATE, shadow_bday );
-	*/
-	
-	float previous_runs = 0;
-	job_ad->LookupFloat( ATTR_JOB_REMOTE_WALL_CLOCK, previous_runs );
-	
-	time_t arch_time=0;	/* time_t is 8 bytes some archs and 4 bytes on other
-						   archs, and this means that doing a (time_t*)
-						   cast on & of a 4 byte int makes my life hell.
-						   So we fix it by assigning the time we want to
-						   a real time_t variable, then using ctime()
-						   to convert it to a string */
-	
-	time_t now = time(NULL);
-
-	fprintf( mailer, "Your Condor job %d.%d \n", cluster, proc);
-	if ( JobName.length() ) {
-		fprintf(mailer,"\t%s %s\n",JobName.c_str(),Args.Value());
-	}
-	if(exit_status_known) {
-		fprintf(mailer, "has ");
-
-		int int_val;
-		if( job_ad->LookupBool(ATTR_ON_EXIT_BY_SIGNAL, int_val) ) {
-			if( int_val ) {
-				if( job_ad->LookupInteger(ATTR_ON_EXIT_SIGNAL, int_val) ) {
-					fprintf(mailer, "exited with the signal %d.\n", int_val);
-				} else {
-					fprintf(mailer, "exited with an unknown signal.\n");
-					dprintf( D_ALWAYS, "(%d.%d) Job ad lacks %s.  "
-						 "Signal code unknown.\n", cluster, proc, 
-						 ATTR_ON_EXIT_SIGNAL);
-				}
-			} else {
-				if( job_ad->LookupInteger(ATTR_ON_EXIT_CODE, int_val) ) {
-					fprintf(mailer, "exited normally with status %d.\n",
-						int_val);
-				} else {
-					fprintf(mailer, "exited normally with unknown status.\n");
-					dprintf( D_ALWAYS, "(%d.%d) Job ad lacks %s.  "
-						 "Return code unknown.\n", cluster, proc, 
-						 ATTR_ON_EXIT_CODE);
-				}
-			}
-		} else {
-			fprintf(mailer,"has exited.\n");
-			dprintf( D_ALWAYS, "(%d.%d) Job ad lacks %s.  ",
-				 cluster, proc, ATTR_ON_EXIT_BY_SIGNAL);
-		}
-	} else {
-		fprintf(mailer,"has exited.\n");
-	}
-
-	/*
-	if( had_core ) {
-		fprintf( mailer, "Core file is: %s\n", getCoreName() );
-	}
-	*/
-
-	arch_time = q_date;
-	fprintf(mailer, "\n\nSubmitted at:        %s", ctime(&arch_time));
-	
-	double real_time = now - q_date;
-	arch_time = now;
-	fprintf(mailer, "Completed at:        %s", ctime(&arch_time));
-	
-	fprintf(mailer, "Real Time:           %s\n", 
-			d_format_time(real_time));
-
-
-	fprintf( mailer, "\n" );
-	
-		// TODO We don't necessarily have this information even if we do
-		//   have the exit status
-	if( exit_status_known ) {
-		fprintf(mailer, "Virtual Image Size:  %d Kilobytes\n\n", image_size);
-	}
-
-	double rutime = remote_user_cpu;
-	double rstime = remote_sys_cpu;
-	double trtime = rutime + rstime;
-	/*
-	double wall_time = now - shadow_bday;
-	fprintf(mailer, "Statistics from last run:\n");
-	fprintf(mailer, "Allocation/Run time:     %s\n",d_format_time(wall_time) );
-	*/
-		// TODO We don't necessarily have this information even if we do
-		//   have the exit status
-	if( exit_status_known ) {
-		fprintf(mailer, "Remote User CPU Time:    %s\n", d_format_time(rutime) );
-		fprintf(mailer, "Remote System CPU Time:  %s\n", d_format_time(rstime) );
-		fprintf(mailer, "Total Remote CPU Time:   %s\n\n", d_format_time(trtime));
-	}
-
-	/*
-	double total_wall_time = previous_runs + wall_time;
-	fprintf(mailer, "Statistics totaled from all runs:\n");
-	fprintf(mailer, "Allocation/Run time:     %s\n",
-			d_format_time(total_wall_time) );
-
-	// TODO: Can we/should we get this for Globus jobs.
-		// TODO: deal w/ total bytes <- obsolete? in original code)
-	float network_bytes;
-	network_bytes = bytesSent();
-	fprintf(mailer, "\nNetwork:\n" );
-	fprintf(mailer, "%10s Run Bytes Received By Job\n", 
-			metric_units(network_bytes) );
-	network_bytes = bytesReceived();
-	fprintf(mailer, "%10s Run Bytes Sent By Job\n",
-			metric_units(network_bytes) );
-	*/
-
-	email_custom_attributes(mailer, job_ad);
-
-	email_close(mailer);
+	Email email;
+	email.sendExit(job_ad, JOB_EXITED);
 }
diff --git a/src/condor_includes/condor_email.h b/src/condor_includes/condor_email.h
index b239dca..b62eda2 100644
--- a/src/condor_includes/condor_email.h
+++ b/src/condor_includes/condor_email.h
@@ -110,6 +110,10 @@ public:
 		*/
 	void sendHold( ClassAd* ad, const char* reason );
 	void sendRemove( ClassAd* ad, const char* reason );
+	void sendRelease( ClassAd* ad, const char* reason );
+	void sendHoldAdmin( ClassAd* ad, const char* reason );
+	void sendRemoveAdmin( ClassAd* ad, const char* reason );
+	void sendReleaseAdmin( ClassAd* ad, const char* reason );
 
 private:
 		// // // // // //
@@ -119,6 +123,7 @@ private:
 	FILE* fp;	/// The currently open message (if any)
 	int cluster;
 	int proc;
+	bool email_admin;
 
 
 		// // // // // //
diff --git a/src/condor_job_router/submit_job.cpp b/src/condor_job_router/submit_job.cpp
index cd82c69..1a75c37 100644
--- a/src/condor_job_router/submit_job.cpp
+++ b/src/condor_job_router/submit_job.cpp
@@ -37,6 +37,7 @@
 #include "classad/classad_distribution.h"
 #include "set_user_from_ad.h"
 #include "file_transfer.h"
+#include "exit.h"
 
 	// Simplify my error handling and reporting code
 class FailObj {
@@ -952,178 +953,8 @@ EmailTerminateEvent(ClassAd * job_ad, bool exit_status_known)
 		return;
 	}
 
-	int cluster, proc;
-	job_ad->LookupInteger( ATTR_CLUSTER_ID, cluster );
-	job_ad->LookupInteger( ATTR_PROC_ID, proc );
-
-	int notification = NOTIFY_COMPLETE; // default
-	job_ad->LookupInteger(ATTR_JOB_NOTIFICATION,notification);
-
-	switch( notification ) {
-		case NOTIFY_NEVER:    return;
-		case NOTIFY_ALWAYS:   break;
-		case NOTIFY_COMPLETE: break;
-		case NOTIFY_ERROR:    return;
-		default:
-			dprintf(D_ALWAYS, 
-				"Condor Job %d.%d has unrecognized notification of %d\n",
-				cluster, proc, notification );
-				// When in doubt, better send it anyway...
-			break;
-	}
-
-	char subjectline[50];
-	sprintf( subjectline, "Condor Job %d.%d", cluster, proc );
-	FILE * mailer =  email_user_open( job_ad, subjectline );
-
-	if( ! mailer ) {
-		// Is message redundant?  Check email_user_open and euo's children.
-		dprintf(D_ALWAYS, 
-			"email_terminate_event failed to open a pipe to a mail program.\n");
-		return;
-	}
-
-		// gather all the info out of the job ad which we want to 
-		// put into the email message.
-	MyString JobName;
-	job_ad->LookupString( ATTR_JOB_CMD, JobName );
-
-	MyString Args;
-	ArgList::GetArgsStringForDisplay(job_ad,&Args);
-	
-	/*
-	// Not present.  Probably doesn't make sense for Globus
-	int had_core = FALSE;
-	job_ad->LookupBool( ATTR_JOB_CORE_DUMPED, had_core );
-	*/
-
-	int q_date = 0;
-	job_ad->LookupInteger(ATTR_Q_DATE,q_date);
-	
-	float remote_sys_cpu = 0.0;
-	job_ad->LookupFloat(ATTR_JOB_REMOTE_SYS_CPU, remote_sys_cpu);
-	
-	float remote_user_cpu = 0.0;
-	job_ad->LookupFloat(ATTR_JOB_REMOTE_USER_CPU, remote_user_cpu);
-	
-	int image_size = 0;
-	job_ad->LookupInteger(ATTR_IMAGE_SIZE, image_size);
-	
-	/*
-	int shadow_bday = 0;
-	job_ad->LookupInteger( ATTR_SHADOW_BIRTHDATE, shadow_bday );
-	*/
-	
-	float previous_runs = 0;
-	job_ad->LookupFloat( ATTR_JOB_REMOTE_WALL_CLOCK, previous_runs );
-	
-	time_t arch_time=0;	/* time_t is 8 bytes some archs and 4 bytes on other
-						   archs, and this means that doing a (time_t*)
-						   cast on & of a 4 byte int makes my life hell.
-						   So we fix it by assigning the time we want to
-						   a real time_t variable, then using ctime()
-						   to convert it to a string */
-	
-	time_t now = time(NULL);
-
-	fprintf( mailer, "Your Condor job %d.%d \n", cluster, proc);
-	if ( JobName.Length() ) {
-		fprintf(mailer,"\t%s %s\n",JobName.Value(),Args.Value());
-	}
-	if(exit_status_known) {
-		fprintf(mailer, "has ");
-
-		int int_val;
-		if( job_ad->LookupBool(ATTR_ON_EXIT_BY_SIGNAL, int_val) ) {
-			if( int_val ) {
-				if( job_ad->LookupInteger(ATTR_ON_EXIT_SIGNAL, int_val) ) {
-					fprintf(mailer, "exited with the signal %d.\n", int_val);
-				} else {
-					fprintf(mailer, "exited with an unknown signal.\n");
-					dprintf( D_ALWAYS, "(%d.%d) Job ad lacks %s.  "
-						 "Signal code unknown.\n", cluster, proc, 
-						 ATTR_ON_EXIT_SIGNAL);
-				}
-			} else {
-				if( job_ad->LookupInteger(ATTR_ON_EXIT_CODE, int_val) ) {
-					fprintf(mailer, "exited normally with status %d.\n",
-						int_val);
-				} else {
-					fprintf(mailer, "exited normally with unknown status.\n");
-					dprintf( D_ALWAYS, "(%d.%d) Job ad lacks %s.  "
-						 "Return code unknown.\n", cluster, proc, 
-						 ATTR_ON_EXIT_CODE);
-				}
-			}
-		} else {
-			fprintf(mailer,"has exited.\n");
-			dprintf( D_ALWAYS, "(%d.%d) Job ad lacks %s.  ",
-				 cluster, proc, ATTR_ON_EXIT_BY_SIGNAL);
-		}
-	} else {
-		fprintf(mailer,"has exited.\n");
-	}
-
-	/*
-	if( had_core ) {
-		fprintf( mailer, "Core file is: %s\n", getCoreName() );
-	}
-	*/
-
-	arch_time = q_date;
-	fprintf(mailer, "\n\nSubmitted at:        %s", ctime(&arch_time));
-	
-	double real_time = now - q_date;
-	arch_time = now;
-	fprintf(mailer, "Completed at:        %s", ctime(&arch_time));
-	
-	fprintf(mailer, "Real Time:           %s\n", 
-			format_time((int)real_time));
-
-
-	fprintf( mailer, "\n" );
-	
-		// TODO We don't necessarily have this information even if we do
-		//   have the exit status
-	if( exit_status_known ) {
-		fprintf(mailer, "Virtual Image Size:  %d Kilobytes\n\n", image_size);
-	}
-
-	double rutime = remote_user_cpu;
-	double rstime = remote_sys_cpu;
-	double trtime = rutime + rstime;
-	/*
-	double wall_time = now - shadow_bday;
-	fprintf(mailer, "Statistics from last run:\n");
-	fprintf(mailer, "Allocation/Run time:     %s\n",format_time(wall_time) );
-	*/
-		// TODO We don't necessarily have this information even if we do
-		//   have the exit status
-	if( exit_status_known ) {
-		fprintf(mailer, "Remote User CPU Time:    %s\n", format_time((int)rutime) );
-		fprintf(mailer, "Remote System CPU Time:  %s\n", format_time((int)rstime) );
-		fprintf(mailer, "Total Remote CPU Time:   %s\n\n", format_time((int)trtime));
-	}
-
-	/*
-	double total_wall_time = previous_runs + wall_time;
-	fprintf(mailer, "Statistics totaled from all runs:\n");
-	fprintf(mailer, "Allocation/Run time:     %s\n",
-			format_time(total_wall_time) );
-
-	// TODO: Can we/should we get this for Globus jobs.
-		// TODO: deal w/ total bytes <- obsolete? in original code)
-	float network_bytes;
-	network_bytes = bytesSent();
-	fprintf(mailer, "\nNetwork:\n" );
-	fprintf(mailer, "%10s Run Bytes Received By Job\n", 
-			metric_units(network_bytes) );
-	network_bytes = bytesReceived();
-	fprintf(mailer, "%10s Run Bytes Sent By Job\n",
-			metric_units(network_bytes) );
-	*/
-
-	email_close(mailer);
+	Email email;
+	email.sendExit(job_ad, JOB_EXITED);
 }
 
 bool EmailTerminateEvent( classad::ClassAd const &ad )
diff --git a/src/condor_schedd.V6/schedd.cpp b/src/condor_schedd.V6/schedd.cpp
index 05f046f..703b583 100644
--- a/src/condor_schedd.V6/schedd.cpp
+++ b/src/condor_schedd.V6/schedd.cpp
@@ -90,6 +90,7 @@
 #include "condor_open.h"
 #include "schedd_negotiate.h"
 #include "filename_tools.h"
+#include "condor_email.h"
 
 #if defined(WANT_CONTRIB) && defined(WITH_MANAGEMENT)
 #if defined(HAVE_DLOPEN)
@@ -1810,6 +1811,7 @@ abort_job_myself( PROC_ID job_id, JobAction action, bool log_hold,
 				msg.sprintf("Unable to switch to user: %s", owner.Value());
 #endif
 				holdJob(job_id.cluster, job_id.proc, msg.Value(), 
+					CONDOR_HOLD_CODE_CorruptedCredential,
 					false, false, true, false, false);
 				return;
 			}
@@ -1984,8 +1986,10 @@ PeriodicExprEval( ClassAd *jobad )
 
 	// Build a "reason" string for logging
 	MyString reason = policy.FiringReason();
+	int code = CONDOR_HOLD_CODE_JobPolicy;
 	if ( reason == "" ) {
 		reason = "Unknown user policy expression";
+		code = CONDOR_HOLD_CODE_JobPolicyUndefined;
 	}
 
 	switch(action) {
@@ -1996,7 +2000,7 @@ PeriodicExprEval( ClassAd *jobad )
 			break;
 		case HOLD_IN_QUEUE:
 			if(status!=HELD) {
-				holdJob(cluster, proc, reason.Value(),
+				holdJob(cluster, proc, reason.Value(), code,
 						true, false, false, false, false);
 			}
 			break;
@@ -6923,6 +6927,7 @@ Scheduler::noShadowForJob( shadow_rec* srec, NoShadowFailure_t why )
 		// hold the job, since we won't be able to run it without
 		// human intervention
 	holdJob( job_id.cluster, job_id.proc, hold_reason, 
+			 CONDOR_HOLD_CODE_JobShadowMismatch,
 			 true, true, true, *notify_admin );
 
 		// regardless of what it used to be, we need to record that we
@@ -7027,6 +7032,7 @@ Scheduler::spawnLocalStarter( shadow_rec* srec )
 				 job_id->proc );
 		holdJob( job_id->cluster, job_id->proc,
 				 "No condor_starter installed that supports local universe",
+				 CONDOR_HOLD_CODE_FailedToCreateProcess,
 				 false, true, notify_admin, true );
 		notify_admin = false;
 		return;
@@ -7248,6 +7254,7 @@ Scheduler::start_sched_universe_job(PROC_ID* job_id)
 		tmpstr.sprintf("Unable to switch to user: %s", owner.Value());
 #endif
 		holdJob(job_id->cluster, job_id->proc, tmpstr.Value(),
+				CONDOR_HOLD_CODE_CorruptedCredential,
 				false, false, true, false, false);
 		goto wrapup;
 	}
@@ -7276,6 +7283,7 @@ Scheduler::start_sched_universe_job(PROC_ID* job_id)
 
 			holdJob(job_id->cluster, job_id->proc, 
 				"Spooled executable is not executable!",
+				 CONDOR_HOLD_CODE_FailedToCreateProcess,
 				false, false, true, false, false );
 
 			delete filestat;
@@ -7300,6 +7308,7 @@ Scheduler::start_sched_universe_job(PROC_ID* job_id)
 			set_priv( priv );  // back to regular privs...
 			holdJob(job_id->cluster, job_id->proc, 
 				"Executable unknown - not specified in job ad!",
+				 CONDOR_HOLD_CODE_FailedToCreateProcess,
 				false, false, true, false, false );
 			goto wrapup;
 		}
@@ -7316,6 +7325,7 @@ Scheduler::start_sched_universe_job(PROC_ID* job_id)
 			tmpstr.sprintf( "File '%s' is missing or not executable", a_out_name.Value() );
 			set_priv( priv );  // back to regular privs...
 			holdJob(job_id->cluster, job_id->proc, tmpstr.Value(),
+				 	CONDOR_HOLD_CODE_FailedToCreateProcess,
 					false, false, true, false, false);
 			goto wrapup;
 		}
@@ -8710,109 +8720,6 @@ Scheduler::mail_problem_message()
 	email_close(mailer);
 }
 
-void
-Scheduler::NotifyUser(shadow_rec* srec, const char* msg, int status, int JobStatus)
-{
-	int notification;
-	MyString owner;
-	MyString subject;
-	MyString cmd;
-	MyString args;
-
-	if (GetAttributeInt(srec->job_id.cluster, srec->job_id.proc,
-						ATTR_JOB_NOTIFICATION, &notification) < 0) {
-		dprintf(D_ALWAYS, "GetAttributeInt() failed "
-				"-- presumably job was just removed\n");
-		return;
-	}
-
-	switch(notification) {
-	case NOTIFY_NEVER:
-		return;
-	case NOTIFY_ALWAYS:
-		break;
-	case NOTIFY_COMPLETE:
-		if (JobStatus == COMPLETED) {
-			break;
-		} else {
-			return;
-		}
-	case NOTIFY_ERROR:
-		if( (JobStatus == REMOVED) ) {
-			break;
-		} else {
-			return;
-		}
-	default:
-		dprintf(D_ALWAYS, "Condor Job %d.%d has a notification of %d\n",
-				srec->job_id.cluster, srec->job_id.proc, notification );
-	}
-
-	if (GetAttributeString(srec->job_id.cluster, srec->job_id.proc,
-						   ATTR_NOTIFY_USER, owner) < 0) {
-		if (GetAttributeString(srec->job_id.cluster, srec->job_id.proc,
-							   ATTR_OWNER, owner) < 0) {
-			EXCEPT("GetAttributeString(%d, %d, \"%s\")",
-					srec->job_id.cluster,
-					srec->job_id.proc, ATTR_OWNER);
-		}
-	}
-
-	if (GetAttributeString(srec->job_id.cluster, srec->job_id.proc, 
-							ATTR_JOB_CMD,
-							cmd) < 0) {
-		EXCEPT("GetAttributeString(%d, %d, \"cmd\")", srec->job_id.cluster,
-				srec->job_id.proc);
-	}
-	{
-		ClassAd *job_ad = GetJobAd(srec->job_id.cluster,srec->job_id.proc);
-		if(!job_ad) {
-			EXCEPT("Failed to get job ad when sending notification.");
-		}
-		ArgList::GetArgsStringForDisplay(job_ad,&args);
-	}
-
-	// Send mail to user
-	subject.sprintf("Condor Job %d.%d", srec->job_id.cluster, 
-					srec->job_id.proc);
-	dprintf( D_FULLDEBUG, "Unknown user notification selection\n");
-	dprintf( D_FULLDEBUG, "\tNotify user with subject: %s\n",subject.Value());
-
-	FILE* mailer = email_open(owner.Value(), subject.Value());
-	if( mailer ) {
-		fprintf( mailer, "Your condor job %s%d.\n\n", msg, status );
-		fprintf( mailer, "Job: %s %s\n", cmd.Value(), args.Value() );
-		email_close( mailer );
-	}
-
-/*
-	sprintf(url, "mailto:%s", owner);
-	if ((fd = open_url(url, O_WRONLY)) < 0) {
-		EXCEPT("condor_open_mailto_url(%s, %d, 0)", owner, O_WRONLY, 0);
-	}
-
-//	sprintf(subject, "From: Condor\n");
-//	write(fd, subject, strlen(subject));
-//	sprintf(subject, "To: %s\n", owner);
-//	write(fd, subject, strlen(subject));
-	sprintf(subject, "Subject: Condor Job %d.%d\n\n", srec->job_id.cluster,
-			srec->job_id.proc);
-	write(fd, subject, strlen(subject));
-	sprintf(subject, "Your condor job\n\t");
-	write(fd, subject, strlen(subject));
-	write(fd, cmd.Value(), cmd.Length());
-	write(fd, " ", 1);
-	write(fd, args, strlen(args));
-	write(fd, "\n", 1);
-	write(fd, msg, strlen(msg));
-	sprintf(subject, "%d.\n", status);
-	write(fd, subject, strlen(subject));
-	close(fd);
-*/
-
-}
-
-
 static bool
 IsSchedulerUniverse( shadow_rec* srec )
 {
@@ -9368,13 +9275,10 @@ Scheduler::scheduler_univ_job_exit(int pid, int status, shadow_rec * srec)
 			reason = "Unknown user policy expression";
 		}
 	}
-	FreeJobAd(job_ad);
-	job_ad = NULL;
-
 
 	switch(action) {
 		case REMOVE_FROM_QUEUE:
-			scheduler_univ_job_leave_queue(job_id, status, srec);
+			scheduler_univ_job_leave_queue(job_id, status, job_ad);
 			break;
 
 		case STAYS_IN_QUEUE:
@@ -9384,6 +9288,7 @@ Scheduler::scheduler_univ_job_exit(int pid, int status, shadow_rec * srec)
 
 		case HOLD_IN_QUEUE:
 			holdJob(job_id.cluster, job_id.proc, reason.Value(),
+				CONDOR_HOLD_CODE_JobPolicy,
 				true,false,false,false,false);
 			break;
 
@@ -9392,7 +9297,7 @@ Scheduler::scheduler_univ_job_exit(int pid, int status, shadow_rec * srec)
 				"(%d.%d) Job exited.  User policy attempted to release "
 				"job, but it wasn't on hold.  Allowing job to exit queue.\n", 
 				job_id.cluster, job_id.proc);
-			scheduler_univ_job_leave_queue(job_id, status, srec);
+			scheduler_univ_job_leave_queue(job_id, status, job_ad);
 			break;
 
 		case UNDEFINED_EVAL:
@@ -9401,6 +9306,7 @@ Scheduler::scheduler_univ_job_exit(int pid, int status, shadow_rec * srec)
 				"Putting job on hold.\n",
 				 job_id.cluster, job_id.proc, reason.Value());
 			holdJob(job_id.cluster, job_id.proc, reason.Value(),
+				CONDOR_HOLD_CODE_JobPolicyUndefined,
 				true,false,false,false,true);
 			break;
 
@@ -9414,26 +9320,23 @@ Scheduler::scheduler_univ_job_exit(int pid, int status, shadow_rec * srec)
 			reason2 += ") ";
 			reason2 += reason;
 			holdJob(job_id.cluster, job_id.proc, reason2.Value(),
+				CONDOR_HOLD_CODE_JobPolicyUndefined,
 				true,false,false,false,true);
 			break;
 	}
 
-}
+	FreeJobAd(job_ad);
+	job_ad = NULL;
 
+}
 
 void
-Scheduler::scheduler_univ_job_leave_queue(PROC_ID job_id, int status, shadow_rec * srec)
+Scheduler::scheduler_univ_job_leave_queue(PROC_ID job_id, int status, ClassAd *ad)
 {
-	ASSERT(srec);
 	set_job_status( job_id.cluster,	job_id.proc, COMPLETED ); 
 	WriteTerminateToUserLog( job_id, status );
-	if(WIFEXITED(status)) {
-		NotifyUser( srec, "exited with status ",
-					WEXITSTATUS(status), COMPLETED );
-	} else { // signal
-		NotifyUser( srec, "was killed by signal ",
-					WTERMSIG(status), COMPLETED );
-	}
+	Email email;
+	email.sendExit(ad, JOB_EXITED);
 }
 
 void
@@ -12066,7 +11969,7 @@ Does not start or end a transaction.
 */
 
 static bool
-holdJobRaw( int cluster, int proc, const char* reason,
+holdJobRaw( int cluster, int proc, const char* reason, int code,
 		 bool notify_shadow, bool email_user,
 		 bool email_admin, bool system_hold )
 {
@@ -12114,6 +12017,12 @@ holdJobRaw( int cluster, int proc, const char* reason,
 		}
 	}
 
+	if( SetAttributeInt(cluster, proc, ATTR_HOLD_REASON_CODE, code) < 0 ) {
+		dprintf( D_ALWAYS, "ERROR: Failed to set %s to %d for "
+				 "job %d.%d\n", ATTR_HOLD_REASON_CODE, code, cluster, proc );
+		return false;
+	}
+
 	if( SetAttributeInt(cluster, proc, ATTR_JOB_STATUS, HELD) < 0 ) {
 		dprintf( D_ALWAYS, "ERROR: Failed to set %s to HELD for "
 				 "job %d.%d\n", ATTR_JOB_STATUS, cluster, proc );
@@ -12156,31 +12065,15 @@ holdJobRaw( int cluster, int proc, const char* reason,
 			return true;  
 		}
 
-		MyString msg_buf;
-		msg_buf.sprintf( "Condor job %d.%d has been put on hold.\n%s\n"
-						 "Please correct this problem and release the "
-						 "job with \"condor_release\"\n",
-						 cluster, proc, reason );
-
-		MyString msg_subject;
-		msg_subject.sprintf( "Condor job %d.%d put on hold", cluster, proc );
-
-		FILE* fp;
 		if( email_user ) {
-			fp = email_user_open( job_ad, msg_subject.Value() );
-			if( fp ) {
-				fprintf( fp, "%s", msg_buf.Value() );
-				email_close( fp );
-			}
+			Email email;
+			email.sendHold( job_ad, reason );
 		}
-		FreeJobAd( job_ad );
 		if( email_admin ) {
-			fp = email_admin_open( msg_subject.Value() );
-			if( fp ) {
-				fprintf( fp, "%s", msg_buf.Value() );
-				email_close( fp );
-			}
+			Email email;
+			email.sendHoldAdmin( job_ad, reason );
 		}			
+		FreeJobAd( job_ad );
 	}
 	return true;
 }
@@ -12192,7 +12085,7 @@ Performs a complete transaction if desired.
 */
 
 bool
-holdJob( int cluster, int proc, const char* reason,
+holdJob( int cluster, int proc, const char* reason, int code,
 		 bool use_transaction, bool notify_shadow, bool email_user,
 		 bool email_admin, bool system_hold )
 {
@@ -12202,7 +12095,7 @@ holdJob( int cluster, int proc, const char* reason,
 		BeginTransaction();
 	}
 
-	result = holdJobRaw(cluster,proc,reason,notify_shadow,email_user,email_admin,system_hold);
+	result = holdJobRaw(cluster,proc,reason,code,notify_shadow,email_user,email_admin,system_hold);
 
 	if(use_transaction) {
 		if(result) {
@@ -12301,30 +12194,15 @@ releaseJobRaw( int cluster, int proc, const char* reason,
 			return true;  
 		}
 
-		MyString msg_buf;
-		msg_buf.sprintf( "Condor job %d.%d has been released from being "
-						 "on hold.\n%s", cluster, proc, reason );
-
-		MyString msg_subject;
-		msg_subject.sprintf( "Condor job %d.%d released from hold state",
-							 cluster, proc );
-
-		FILE* fp;
 		if( email_user ) {
-			fp = email_user_open( job_ad, msg_subject.Value() );
-			if( fp ) {
-				fprintf( fp, "%s", msg_buf.Value() );
-				email_close( fp );
-			}
+			Email email;
+			email.sendRelease( job_ad, reason );
 		}
-		FreeJobAd( job_ad );
 		if( email_admin ) {
-			fp = email_admin_open( msg_subject.Value() );
-			if( fp ) {
-				fprintf( fp, "%s", msg_buf.Value() );
-				email_close( fp );
-			}
+			Email email;
+			email.sendReleaseAdmin( job_ad, reason );
 		}			
+		FreeJobAd( job_ad );
 	}
 	return true;
 }
diff --git a/src/condor_schedd.V6/scheduler.h b/src/condor_schedd.V6/scheduler.h
index 8d4a879..7d17228 100644
--- a/src/condor_schedd.V6/scheduler.h
+++ b/src/condor_schedd.V6/scheduler.h
@@ -54,6 +54,7 @@
 #include "condor_timeslice.h"
 #include "condor_claimid_parser.h"
 #include "transfer_queue.h"
+#include "condor_holdcodes.h"
 
 extern  int         STARTD_CONTACT_TIMEOUT;
 const	int			NEGOTIATOR_CONTACT_TIMEOUT = 30;
@@ -608,7 +609,7 @@ private:
 	int				insert_owner(char const*);
 	void			child_exit(int, int);
 	void			scheduler_univ_job_exit(int pid, int status, shadow_rec * srec);
-	void			scheduler_univ_job_leave_queue(PROC_ID job_id, int status, shadow_rec * srec);
+	void			scheduler_univ_job_leave_queue(PROC_ID job_id, int status, ClassAd *ad);
 	void			clean_shadow_recs();
 	void			preempt( int n, bool force_sched_jobs = false );
 	void			attempt_shutdown();
@@ -674,7 +675,6 @@ private:
 	void			kill_zombie(int, PROC_ID*);
 	int				is_alive(shadow_rec* srec);
 	shadow_rec*     find_shadow_rec(PROC_ID*);
-	void			NotifyUser(shadow_rec*, const char*, int, int);
 	
 #ifdef CARMI_OPS
 	shadow_rec*		find_shadow_by_cluster( PROC_ID * );
@@ -748,7 +748,8 @@ extern bool moveIntAttr( PROC_ID job_id, const char* old_attr,
 extern bool abortJob( int cluster, int proc, const char *reason, bool use_transaction );
 extern bool abortJobsByConstraint( const char *constraint, const char *reason, bool use_transaction );
 extern bool holdJob( int cluster, int proc, const char* reason = NULL, 
-					 bool use_transaction = false, 
+					 int code = CONDOR_HOLD_CODE_Unspecified, 
+					 bool use_transaction = false,
 					 bool notify_shadow = true,  
 					 bool email_user = false, bool email_admin = false,
 					 bool system_hold = true);
diff --git a/src/condor_utils/email_cpp.cpp b/src/condor_utils/email_cpp.cpp
index 8b2f3b8..1770bb2 100644
--- a/src/condor_utils/email_cpp.cpp
+++ b/src/condor_utils/email_cpp.cpp
@@ -29,6 +29,7 @@
 #include "exit.h"               // for possible job exit_reason values
 #include "metric_units.h"
 #include "condor_arglist.h"
+#include "condor_holdcodes.h"
 
 
 extern "C" char* d_format_time(double);   // this should be in a .h
@@ -214,6 +215,7 @@ Email::init()
 	fp = NULL;
 	cluster = -1;
 	proc = -1;
+	email_admin = false;
 }
 
 
@@ -230,6 +232,33 @@ Email::sendRemove( ClassAd* ad, const char* reason )
 	sendAction( ad, reason, "removed" );
 }
 
+void
+Email::sendRelease( ClassAd* ad, const char* reason )
+{
+	sendAction( ad, reason, "released from hold" );
+}
+
+void
+Email::sendHoldAdmin( ClassAd* ad, const char* reason )
+{
+	email_admin = true;
+	sendAction( ad, reason, "put on hold" );
+}
+
+void
+Email::sendRemoveAdmin( ClassAd* ad, const char* reason )
+{
+	email_admin = true;
+	sendAction( ad, reason, "removed" );
+}
+
+void
+Email::sendReleaseAdmin( ClassAd* ad, const char* reason )
+{
+	email_admin = true;
+	sendAction( ad, reason, "released from hold" );
+}
+
 
 void
 Email::sendAction( ClassAd* ad, const char* reason,
@@ -280,7 +309,11 @@ Email::open_stream( ClassAd* ad, int exit_reason, const char* subject )
 		full_subject += " ";
 		full_subject += subject;
 	}
-	fp = email_user_open_id( ad, cluster, proc, full_subject.Value() );
+	if(email_admin) {
+		fp = email_admin_open( full_subject.Value() );
+	} else {
+		fp = email_user_open_id( ad, cluster, proc, full_subject.Value() );
+	}
 	return fp; 
 }
 
@@ -363,7 +396,7 @@ Email::writeExit( ClassAd* ad, int exit_reason )
 	time_t now = time(NULL);
 
 	writeJobId( ad );
-	MyString msg = "has ";
+	MyString msg;
 	if( ! printExitString(ad, exit_reason, msg)	) {
 		msg += "exited in an unknown way";
 	}
@@ -394,8 +427,11 @@ Email::writeExit( ClassAd* ad, int exit_reason )
 	double rutime = remote_user_cpu;
 	double rstime = remote_sys_cpu;
 	double trtime = rutime + rstime;
-	double wall_time = now - shadow_bday;
+	double wall_time = 0;
 	fprintf(fp, "Statistics from last run:\n");
+	if(shadow_bday != 0) {	// Handle cases where this wasn't set (grid)
+		wall_time = now - shadow_bday;
+	}
 	fprintf(fp, "Allocation/Run time:     %s\n",d_format_time(wall_time) );
 	fprintf(fp, "Remote User CPU Time:    %s\n", d_format_time(rutime) );
 	fprintf(fp, "Remote System CPU Time:  %s\n", d_format_time(rstime) );
@@ -495,6 +531,7 @@ Email::shouldSend( ClassAd* ad, int exit_reason, bool is_error )
 
 	int ad_cluster = 0, ad_proc = 0;
 	int exit_by_signal = FALSE;
+	int code = -1, status = -1;
 
 	// send email if user requested it
 	int notification = NOTIFY_COMPLETE;	// default
@@ -522,6 +559,17 @@ Email::shouldSend( ClassAd* ad, int exit_reason, bool is_error )
 			if( exit_reason == JOB_EXITED && exit_by_signal ) {
 				return true;
 			}
+				// send mail if job was put on hold because of some problem
+				// (not via condor_hold, periodic hold, or submitted on hold)
+			if( (ad->LookupInteger(ATTR_JOB_STATUS, status) &&
+				status == HELD) &&
+				(ad->LookupInteger(ATTR_HOLD_REASON_CODE, code) &&
+				code != CONDOR_HOLD_CODE_UserRequest &&
+				code != CONDOR_HOLD_CODE_JobPolicy &&
+				code != CONDOR_HOLD_CODE_SubmittedOnHold) )
+			{
+					return true;
+			}
 			break;
 		default:
 			ad->LookupInteger( ATTR_CLUSTER_ID, ad_cluster );
