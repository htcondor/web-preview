2efbbc99e76798a4a7b3b18b66410ceda1928a19
diff --git a/src/condor_dagman/dagman_commands.cpp b/src/condor_dagman/dagman_commands.cpp
index e3625b4..02c7c7b 100644
--- a/src/condor_dagman/dagman_commands.cpp
+++ b/src/condor_dagman/dagman_commands.cpp
@@ -65,6 +65,7 @@ AddNode( Dag *dag, Job::job_type_t type, const char *name,
 		 const char* submitFile,
 		 const char *precmd, const char *postcmd, bool noop,
 		 bool done,
+		 bool isSubDag,
 		 MyString &failReason )
 {
 	MyString why;
@@ -77,7 +78,7 @@ AddNode( Dag *dag, Job::job_type_t type, const char *name,
 		return false;
 	}
 	Job* node = new Job( type, name, directory, submitFile,
-				dag->ProhibitMultiJobs() );
+				dag->ProhibitMultiJobs() && !isSubDag);
 	if( !node ) {
 		dprintf( D_ALWAYS, "ERROR: out of memory!\n" );
 			// we already know we're out of memory, so filling in
diff --git a/src/condor_dagman/dagman_commands.h b/src/condor_dagman/dagman_commands.h
index f40d9ba..4809945 100644
--- a/src/condor_dagman/dagman_commands.h
+++ b/src/condor_dagman/dagman_commands.h
@@ -35,7 +35,7 @@ bool AddNode( Dag *dag, Job::job_type_t type, const char *name,
 			  const char* directory,
 			  const char* submitFile,
 			  const char *precmd, const char *postcmd, bool noop,
-			  bool done, MyString &failReason );
+			  bool done, bool isSubDag, MyString &failReason );
 
 /** Set the DAG file (if any) for a node.
 	@param dag: the DAG this node is part of
diff --git a/src/condor_dagman/parse.cpp b/src/condor_dagman/parse.cpp
index 446cc4c..48cbced 100644
--- a/src/condor_dagman/parse.cpp
+++ b/src/condor_dagman/parse.cpp
@@ -517,7 +517,8 @@ parse_node( Dag *dag, Job::job_type_t nodeType,
 
 	// looks ok, so add it
 	if( !AddNode( dag, nodeType, nodeName, directory,
-				submitFile, NULL, NULL, noop, done, whynot ) )
+			submitFile, NULL, NULL, noop, done, strcasecmp( nodeTypeKeyword, "SUBDAG" ) == MATCH,
+			whynot ) )
 	{
 		debug_printf( DEBUG_QUIET, "ERROR: %s (line %d): %s\n",
 					  dagFile, lineNum, whynot.Value() );
