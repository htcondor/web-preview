diff --git a/src/condor_c++_util/condor_attributes.cpp b/src/condor_c++_util/condor_attributes.cpp
index 231e2d5..41260a7 100644
--- a/src/condor_c++_util/condor_attributes.cpp
+++ b/src/condor_c++_util/condor_attributes.cpp
@@ -852,12 +852,28 @@ const char * const ATTR_LEASE_MANAGER_IP_ADDR = "LeaseManagerIpAddr";
 //************* End of Lease Manager    *******************//
 
 const char * const ATTR_LAST_NEGOTIATION_CYCLE_TIME = "LastNegotiationCycleTime";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_END = "LastNegotiationCycleEnd";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_PERIOD = "LastNegotiationCyclePeriod";
 const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION = "LastNegotiationCycleDuration";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE1 = "LastNegotiationCyclePhase1Duration";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE2 = "LastNegotiationCyclePhase2Duration";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE3 = "LastNegotiationCyclePhase3Duration";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE4 = "LastNegotiationCyclePhase4Duration";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_TOTAL_SLOTS = "LastNegotiationCycleTotalSlots";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_TRIMMED_SLOTS = "LastNegotiationCycleTrimmedSlots";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_CANDIDATE_SLOTS = "LastNegotiationCycleCandidateSlots";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_SLOT_SHARE_ITER = "LastNegotiationCycleSlotShareIter";
 const char * const ATTR_LAST_NEGOTIATION_CYCLE_MATCHES = "LastNegotiationCycleMatches";
 const char * const ATTR_LAST_NEGOTIATION_CYCLE_REJECTIONS = "LastNegotiationCycleRejections";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_SHARE_LIMIT = "LastNegotiationCycleSubmittersShareLimit";
 const char * const ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_FAILED = "LastNegotiationCycleSubmittersFailed";
 const char * const ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_OUT_OF_TIME = "LastNegotiationCycleSubmittersOutOfTime";
 const char * const ATTR_LAST_NEGOTIATION_CYCLE_ACTIVE_SUBMITTER_COUNT = "LastNegotiationCycleActiveSubmitterCount";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_MATCH_RATE = "LastNegotiationCycleMatchRate";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_MATCH_RATE_SUSTAINED = "LastNegotiationCycleMatchRateSustained";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_NUM_SCHEDULERS = "LastNegotiationCycleNumSchedulers";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_NUM_IDLE_JOBS = "LastNegotiationCycleNumIdleJobs";
+const char * const ATTR_LAST_NEGOTIATION_CYCLE_NUM_JOBS_CONSIDERED = "LastNegotiationCycleNumJobsConsidered";
 
 const char * const ATTR_JOB_MACHINE_ATTRS = "JobMachineAttrs";
 const char * const ATTR_MACHINE_ATTR_PREFIX = "MachineAttr";
diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index 9e6c939..d77f84e 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -782,12 +782,28 @@ extern const char * const ATTR_SOCK;
 extern const char * const ATTR_JOB_AD_INFORMATION_ATTRS;
 
 extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_TIME;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_END;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_PERIOD;
 extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE1;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE2;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE3;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE4;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_TOTAL_SLOTS;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_TRIMMED_SLOTS;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_CANDIDATE_SLOTS;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_SLOT_SHARE_ITER;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_NUM_SCHEDULERS;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_NUM_IDLE_JOBS;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_NUM_JOBS_CONSIDERED;
 extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_MATCHES;
 extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_REJECTIONS;
 extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_FAILED;
 extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_OUT_OF_TIME;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_SHARE_LIMIT;
 extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_ACTIVE_SUBMITTER_COUNT;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_MATCH_RATE;
+extern const char * const ATTR_LAST_NEGOTIATION_CYCLE_MATCH_RATE_SUSTAINED;
 
 extern const char * const ATTR_JOB_MACHINE_ATTRS;
 extern const char * const ATTR_MACHINE_ATTR_PREFIX;
diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index 3e757c7..bf96075 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -67,21 +67,65 @@ class NegotiationCycleStats
 {
 public:
 	NegotiationCycleStats();
-	typedef std::set<std::string>::value_type StringSetType;
-
-	void SubmitterOutOfTime( StringSetType const &submitter );
-	void SubmitterFailed( StringSetType const &submitter );
-	void SubmitterActive( StringSetType const &submitter );
 
 	time_t start_time;
+    time_t end_time;
+
 	int duration;
-	std::set<std::string> submitters_out_of_time;
-	std::set<std::string> submitters_failed;
-	std::set<std::string> active_submitters;
+    int duration_phase1;
+    int duration_phase2;
+    int duration_phase3;
+    int duration_phase4;
+
+    int total_slots;
+    int trimmed_slots;
+    int candidate_slots;
+
+    int slot_share_iterations;
+
+    int num_idle_jobs;
+    int num_jobs_considered;
+
 	int matches;
 	int rejections;
+
+    // set of unique active schedd, id by sinful strings:
+    std::set<std::string> active_schedds;
+
+    // active submitters
+	std::set<std::string> active_submitters;
+
+    // submitters_share_limit is currently a placeholder 
+    std::set<std::string> submitters_share_limit;
+	std::set<std::string> submitters_out_of_time;
+	std::set<std::string> submitters_failed;
 };
 
+NegotiationCycleStats::NegotiationCycleStats():
+    start_time(time(NULL)),
+    end_time(start_time),
+	duration(0),
+    duration_phase1(0),
+    duration_phase2(0),
+    duration_phase3(0),
+    duration_phase4(0),
+    total_slots(0),
+    trimmed_slots(0),
+    candidate_slots(0),
+    slot_share_iterations(0),
+    num_idle_jobs(0),
+    num_jobs_considered(0),
+	matches(0),
+	rejections(0),
+    active_schedds(),
+    active_submitters(),
+    submitters_share_limit(),
+    submitters_out_of_time(),
+    submitters_failed()
+{
+}
+
+
 static MyString MachineAdID(ClassAd * ad)
 {
 	ASSERT(ad);
@@ -449,7 +493,8 @@ reinitialize ()
         free (tmp);
 	}
 
-	num_negotiation_cycle_stats = param_integer("NEGOTIATION_CYCLE_STATS_LENGTH",3,0,MAX_NEGOTIATION_CYCLE_STATS);
+    // number of cycle stats maintained must always be >= 1
+	num_negotiation_cycle_stats = param_integer("NEGOTIATION_CYCLE_STATS_LENGTH",3,1,MAX_NEGOTIATION_CYCLE_STATS);
 	ASSERT( num_negotiation_cycle_stats <= MAX_NEGOTIATION_CYCLE_STATS );
 
 	if( first_time ) {
@@ -918,6 +963,7 @@ negotiationTime ()
 	MatchList = NULL;
 
 	// ----- Get all required ads from the collector
+    time_t start_time_phase1 = time(NULL);
 	dprintf( D_ALWAYS, "Phase 1:  Obtaining ads from collector ...\n" );
 	if( !obtainAdsFromCollector( allAds, startdAds, scheddAds,
 		claimIds ) )
@@ -947,6 +993,8 @@ negotiationTime ()
 	// This _must_ come before trimming the startd ads.
 	int untrimmed_num_startds = startdAds.MyLength();
 	int numDynGroupSlots = untrimmed_num_startds;
+    negotiation_cycle_stats[0]->total_slots = untrimmed_num_startds;
+
 	double minSlotWeight = 0;
 	double untrimmedSlotWeightTotal = sumSlotWeights(startdAds,&minSlotWeight);
 	float unclaimed = 0;
@@ -961,6 +1009,10 @@ negotiationTime ()
 	}
 	job_attr_references = compute_significant_attrs(startdAds);
 
+    // Transition Phase 1 --> Phase 2
+    time_t start_time_phase2 = time(NULL);
+    negotiation_cycle_stats[0]->duration_phase1 += start_time_phase2 - start_time_phase1;
+
 	// ----- Recalculate priorities for schedds
 	dprintf( D_ALWAYS, "Phase 2:  Performing accounting ...\n" );
 	accountant.UpdatePriorities();
@@ -971,9 +1023,11 @@ negotiationTime ()
 	// any of the claimed machines!).
 	int num_trimmed = trimStartdAds(startdAds);
 	if ( num_trimmed > 0 ) {
-		dprintf(D_FULLDEBUG,
-			"Trimmed out %d startd ads not Unclaimed\n",num_trimmed);
+		dprintf(D_FULLDEBUG, "Trimmed out %d startd ads not Unclaimed\n",num_trimmed);
 	}
+    negotiation_cycle_stats[0]->trimmed_slots = startdAds.MyLength();
+    // candidate slots may be pruned further below
+    negotiation_cycle_stats[0]->candidate_slots = startdAds.MyLength();
 
 		// We insert NegotiatorMatchExprXXX attributes into the
 		// "matched ad".  In the negotiator, this means the machine ad.
@@ -1021,6 +1075,8 @@ negotiationTime ()
             }
         }
 
+        negotiation_cycle_stats[0]->candidate_slots = numDynGroupSlots;
+
 		MyString tmpstr;
 		i = 0;
 		groupQuotasHash->clear();		
@@ -1349,17 +1405,10 @@ negotiationTime ()
 		dprintf(D_ALWAYS,"Group *none* - negotiating\n");
 
 	} // if (groups)
-	
+
 		// negotiate w/ all users who do not belong to a group.
 	negotiateWithGroup(untrimmed_num_startds, untrimmedSlotWeightTotal, minSlotWeight, startdAds, claimIds, scheddAds);
 	
-	// ----- Done with the negotiation cycle
-	dprintf( D_ALWAYS, "---------- Finished Negotiation Cycle ----------\n" );
-
-	completedLastCycleTime = time(NULL);
-
-	negotiation_cycle_stats[0]->duration = time(NULL) - negotiation_cycle_stats[0]->start_time;
-
 	ClassAd *tmp;
 	startdAds.Open();
 	while ( (tmp = startdAds.Next()) ) {
@@ -1371,6 +1420,21 @@ negotiationTime ()
 		scheddAds.Remove( tmp );
 	}
 	scheddAds.Close();
+	
+	// ----- Done with the negotiation cycle
+	dprintf( D_ALWAYS, "---------- Finished Negotiation Cycle ----------\n" );
+
+	completedLastCycleTime = time(NULL);
+
+    negotiation_cycle_stats[0]->end_time = completedLastCycleTime;
+
+    // Phase 2 is time to do "all of the above" since end of phase 1, less the time we spent in phase 3 and phase 4
+    // (phase 3 and 4 occur inside of negotiateWithGroup(), which may be called in multiple places, inside looping)
+    negotiation_cycle_stats[0]->duration_phase2 = completedLastCycleTime - start_time_phase2;
+    negotiation_cycle_stats[0]->duration_phase2 -= negotiation_cycle_stats[0]->duration_phase3;
+    negotiation_cycle_stats[0]->duration_phase2 -= negotiation_cycle_stats[0]->duration_phase4;
+
+	negotiation_cycle_stats[0]->duration = completedLastCycleTime - negotiation_cycle_stats[0]->start_time;
 }
 
 Matchmaker::SimpleGroupEntry::
@@ -1397,6 +1461,7 @@ negotiateWithGroup ( int untrimmed_num_startds,
 					 ClassAdList& scheddAds, 
 					 float groupQuota, float groupusage,const char* groupAccountingName)
 {
+    time_t start_time_phase3 = time(NULL);
 	ClassAd		*schedd;
 	MyString    scheddName;
 	MyString    scheddAddr;
@@ -1424,6 +1489,10 @@ negotiateWithGroup ( int untrimmed_num_startds,
 	dprintf( D_ALWAYS, "Phase 3:  Sorting submitter ads by priority ...\n" );
 	scheddAds.Sort( (lessThanFunc)comparisonFunction, this );
 
+    // transition Phase 3 --> Phase 4
+    time_t start_time_phase4 = time(NULL);
+    negotiation_cycle_stats[0]->duration_phase3 += start_time_phase4 - start_time_phase3;
+
 	int spin_pie=0;
 	do {
 		spin_pie++;
@@ -1597,7 +1666,7 @@ negotiateWithGroup ( int untrimmed_num_startds,
 				dprintf(D_ALWAYS,
 					"  %d seconds spent, max allowed %d\n ",
 					totalTime, MaxTimePerSubmitter);
-				negotiation_cycle_stats[0]->SubmitterOutOfTime( scheddName.Value() );
+				negotiation_cycle_stats[0]->submitters_out_of_time.insert(scheddName.Value());
 				result = MM_DONE;
 			} else {
 				if ( (submitterLimit <= 0 || pieLeft < minSlotWeight) && spin_pie > 1 ) {
@@ -1611,14 +1680,16 @@ negotiateWithGroup ( int untrimmed_num_startds,
 					int numMatched = 0;
 					startTime = time(NULL);
 					double limitUsed = 0.0;
+                    if (negotiation_cycle_stats[0]->active_submitters.count(scheddName.Value()) <= 0)
+                        negotiation_cycle_stats[0]->num_idle_jobs += num_idle_jobs;
+					negotiation_cycle_stats[0]->active_submitters.insert(scheddName.Value());
+					negotiation_cycle_stats[0]->active_schedds.insert(scheddAddr.Value());
 					result=negotiate( scheddName.Value(),schedd,submitterPrio,
 								  submitterAbsShare, submitterLimit,
 								  startdAds, claimIds, 
 								  scheddVersion, ignore_schedd_limit,
 								  startTime, numMatched, limitUsed, pieLeft);
-					negotiation_cycle_stats[0]->SubmitterActive( scheddName.Value() );
 					updateNegCycleEndTime(startTime, schedd);
-
 				}
 			}
 
@@ -1650,7 +1721,7 @@ negotiateWithGroup ( int untrimmed_num_startds,
 					dprintf(D_ALWAYS,"  Error: Ignoring submitter for this cycle\n" );
 					sockCache->invalidateSock( scheddAddr.Value() );
 					scheddAds.Remove( schedd );
-					negotiation_cycle_stats[0]->SubmitterFailed( scheddName.Value() );
+					negotiation_cycle_stats[0]->submitters_failed.insert(scheddName.Value());
 			}
 		}
 		scheddAds.Close();
@@ -1658,6 +1729,8 @@ negotiateWithGroup ( int untrimmed_num_startds,
 			  && (scheddAds.MyLength() > 0)
 			  && (startdAds.MyLength() > 0) );
 
+    negotiation_cycle_stats[0]->duration_phase4 += time(NULL) - start_time_phase4;    
+
 	return TRUE;
 }
 
@@ -2304,6 +2377,7 @@ negotiate( char const *scheddName, const ClassAd *scheddAd, double priority, dou
 			return MM_ERROR;
 		}
 		dprintf(D_ALWAYS, "    Request %05d.%05d:\n", cluster, proc);
+        negotiation_cycle_stats[0]->num_jobs_considered += 1;
 
 #if !defined(WANT_OLD_CLASSADS)
 		request.AddTargetRefs( TargetMachineAttrs );
@@ -4156,26 +4230,6 @@ void Matchmaker::RegisterAttemptedOfflineMatch( ClassAd *job_ad, ClassAd *startd
 	}
 }
 
-NegotiationCycleStats::NegotiationCycleStats():
-	duration(0),
-	matches(0),
-	rejections(0)
-{
-	start_time = time(NULL);
-}
-
-void NegotiationCycleStats::SubmitterOutOfTime( StringSetType const &submitter )
-{
-	submitters_out_of_time.insert( submitter );
-}
-void NegotiationCycleStats::SubmitterFailed( StringSetType const &submitter )
-{
-	submitters_failed.insert( submitter );
-}
-void NegotiationCycleStats::SubmitterActive( StringSetType const &submitter )
-{
-	active_submitters.insert( submitter );
-}
 
 void Matchmaker::StartNewNegotiationCycleStat()
 {
@@ -4219,6 +4273,14 @@ SetAttrN( ClassAd *ad, char const *attr, int n, int value )
 }
 
 static void
+SetAttrN( ClassAd *ad, char const *attr, int n, double value )
+{
+	MyString attrn;
+	attrn.sprintf("%s%d",attr,n);
+	ad->Assign(attrn.Value(),value);
+}
+
+static void
 SetAttrN( ClassAd *ad, char const *attr, int n, std::set<std::string> &string_list )
 {
 	MyString attrn;
@@ -4242,37 +4304,71 @@ SetAttrN( ClassAd *ad, char const *attr, int n, std::set<std::string> &string_li
 void
 Matchmaker::publishNegotiationCycleStats( ClassAd *ad )
 {
-	int i;
-	char const *attrs[8];
-	attrs[0] = ATTR_LAST_NEGOTIATION_CYCLE_TIME;
-	attrs[1] = ATTR_LAST_NEGOTIATION_CYCLE_DURATION;
-	attrs[2] = ATTR_LAST_NEGOTIATION_CYCLE_MATCHES;
-	attrs[3] = ATTR_LAST_NEGOTIATION_CYCLE_REJECTIONS;
-	attrs[4] = ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_FAILED;
-	attrs[5] = ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_OUT_OF_TIME;
-	attrs[6] = ATTR_LAST_NEGOTIATION_CYCLE_ACTIVE_SUBMITTER_COUNT;
-	attrs[7] = NULL;
+	char const* attrs[] = {
+        ATTR_LAST_NEGOTIATION_CYCLE_TIME,
+        ATTR_LAST_NEGOTIATION_CYCLE_END,
+        ATTR_LAST_NEGOTIATION_CYCLE_PERIOD,
+        ATTR_LAST_NEGOTIATION_CYCLE_DURATION,
+        ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE1,
+        ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE2,
+        ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE3,
+        ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE4,
+        ATTR_LAST_NEGOTIATION_CYCLE_TOTAL_SLOTS,
+        ATTR_LAST_NEGOTIATION_CYCLE_TRIMMED_SLOTS,
+        ATTR_LAST_NEGOTIATION_CYCLE_CANDIDATE_SLOTS,
+        //ATTR_LAST_NEGOTIATION_CYCLE_SLOT_SHARE_ITER,
+        ATTR_LAST_NEGOTIATION_CYCLE_NUM_SCHEDULERS,
+        ATTR_LAST_NEGOTIATION_CYCLE_NUM_IDLE_JOBS,
+        ATTR_LAST_NEGOTIATION_CYCLE_NUM_JOBS_CONSIDERED,
+        ATTR_LAST_NEGOTIATION_CYCLE_MATCHES,
+        ATTR_LAST_NEGOTIATION_CYCLE_REJECTIONS,
+        ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_FAILED,
+        ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_OUT_OF_TIME,
+        //ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_SHARE_LIMIT,
+        ATTR_LAST_NEGOTIATION_CYCLE_ACTIVE_SUBMITTER_COUNT,
+        ATTR_LAST_NEGOTIATION_CYCLE_MATCH_RATE,
+        ATTR_LAST_NEGOTIATION_CYCLE_MATCH_RATE_SUSTAINED
+    };
+    const int nattrs = sizeof(attrs)/sizeof(*attrs);
 
 		// clear out all negotiation cycle attributes in the ad
-	for(i=0; i<MAX_NEGOTIATION_CYCLE_STATS; i++) {
-		int a;
-		for(a=0; a<sizeof(attrs)/sizeof(char *) && attrs[a]; a++) {
+	for (int i=0; i<MAX_NEGOTIATION_CYCLE_STATS; i++) {
+		for (int a=0; a<nattrs; a++) {
 			DelAttrN( ad, attrs[a], i );
 		}
 	}
 
-	for(i=0; i<num_negotiation_cycle_stats; i++) {
-		NegotiationCycleStats *s = negotiation_cycle_stats[i];
-		if( !s ) {
-			continue;
-		}
-
-		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_MATCHES, i, s->matches);
-		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_REJECTIONS, i, s->rejections);
-		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_TIME, i, s->start_time);
-		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_DURATION, i, s->duration);
-		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_ACTIVE_SUBMITTER_COUNT, i, s->active_submitters.size());
+	for (int i=0; i<num_negotiation_cycle_stats; i++) {
+		NegotiationCycleStats* s = negotiation_cycle_stats[i];
+		if (s == NULL) continue;
+
+        int period = 0;
+        if (((1+i) < num_negotiation_cycle_stats) && (negotiation_cycle_stats[1+i] != NULL))
+            period = s->end_time - negotiation_cycle_stats[1+i]->end_time;
+
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_TIME, i, (int)s->start_time);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_END, i, (int)s->end_time);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_PERIOD, i, (int)period);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_DURATION, i, (int)s->duration);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE1, i, (int)s->duration_phase1);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE2, i, (int)s->duration_phase2);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE3, i, (int)s->duration_phase3);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_DURATION_PHASE4, i, (int)s->duration_phase4);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_TOTAL_SLOTS, i, (int)s->total_slots);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_TRIMMED_SLOTS, i, (int)s->trimmed_slots);
+        SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_CANDIDATE_SLOTS, i, (int)s->candidate_slots);
+        //SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_SLOT_SHARE_ITER, i, (int)s->slot_share_iterations);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_NUM_SCHEDULERS, i, (int)s->active_schedds.size());
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_NUM_IDLE_JOBS, i, (int)s->num_idle_jobs);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_NUM_JOBS_CONSIDERED, i, (int)s->num_jobs_considered);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_MATCHES, i, (int)s->matches);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_REJECTIONS, i, (int)s->rejections);
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_MATCH_RATE, i, (s->duration > 0) ? (double)(s->matches)/double(s->duration) : double(0.0));
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_MATCH_RATE_SUSTAINED, i, (period > 0) ? (double)(s->matches)/double(period) : double(0.0));
+		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_ACTIVE_SUBMITTER_COUNT, i, (int)s->active_submitters.size());
 		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_FAILED, i, s->submitters_failed);
 		SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_OUT_OF_TIME, i, s->submitters_out_of_time);
+        // placeholder -- need to modify negotiation loop to implement this correctly
+        //SetAttrN( ad, ATTR_LAST_NEGOTIATION_CYCLE_SUBMITTERS_SHARE_LIMIT, i, s->submitters_share_limit);
 	}
 }
