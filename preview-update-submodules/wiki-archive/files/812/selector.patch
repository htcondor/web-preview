diff --git a/src/condor_io/condor_rw.cpp b/src/condor_io/condor_rw.cpp
index 47b4234..dee9a94 100644
--- a/src/condor_io/condor_rw.cpp
+++ b/src/condor_io/condor_rw.cpp
@@ -155,7 +155,9 @@ condor_read( char const *peer_description, SOCKET fd, char *buf, int sz, int tim
 		
 		start_thread_safe("recv");
 		nro = recv(fd, &buf[nr], sz - nr, flags);
+		int save_errno = errno;
 		stop_thread_safe("recv");
+		errno = save_errno;
 
 		if( nro <= 0 ) {
 
diff --git a/src/condor_procd/CMakeLists.txt b/src/condor_procd/CMakeLists.txt
index 450bc97..6660955 100644
--- a/src/condor_procd/CMakeLists.txt
+++ b/src/condor_procd/CMakeLists.txt
@@ -27,7 +27,7 @@ else(WINDOWS)
     condor_selective_glob( "proc_family_client*;proc_family_io*;local_client.*;named_pipe_reader*;named_pipe_writer*;named_pipe_util*;named_pipe_watchdog*" ProcClientElements )
 endif(WINDOWS)
 
-set( ProcdUtilsSrcs "${SAFE_OPEN_SRC};../condor_utils/condor_pidenvid.cpp;../condor_utils/condor_full_io.cpp;../condor_utils/condor_blkng_full_disk_io.cpp;../condor_procapi/procapi.cpp;../condor_procapi/processid.cpp;../condor_procapi/procapi_killfamily.cpp;../condor_starter.V6.1/cgroup.linux.cpp" )
+set( ProcdUtilsSrcs "${SAFE_OPEN_SRC};../condor_utils/condor_pidenvid.cpp;../condor_utils/condor_full_io.cpp;../condor_utils/condor_blkng_full_disk_io.cpp;../condor_utils/selector.cpp;../condor_procapi/procapi.cpp;../condor_procapi/processid.cpp;../condor_procapi/procapi_killfamily.cpp;../condor_starter.V6.1/cgroup.linux.cpp" )
 if (WINDOWS)
 	set( ProcdUtilsSrcs "${ProcdUtilsSrcs};../condor_utils/process_control.WINDOWS.cpp;../condor_utils/ntsysinfo.WINDOWS.cpp" )
 endif(WINDOWS)
@@ -35,7 +35,7 @@ condor_static_lib( procdutils "${ProcdUtilsSrcs}" )
 condor_daemon(procd "${ProcdRmvElements}" "procdutils;${PROCD_WIN_LINK_LIBS};${LIBCGROUP_FOUND}" "${C_SBIN}" OFF)
 
 if (LINUX AND WANT_FULL_DEPLOYMENT)
-	condor_exe( procd_ctl "procd_ctl.cpp;${ProcClientElements};${SAFE_OPEN_SRC};../condor_utils/distribution.cpp;../condor_utils/my_distribution.cpp;../condor_utils/condor_pidenvid.cpp" ${C_SBIN} "procdutils" OFF)
+	condor_exe( procd_ctl "procd_ctl.cpp;${ProcClientElements};${SAFE_OPEN_SRC};../condor_utils/distribution.cpp;../condor_utils/my_distribution.cpp;../condor_utils/condor_pidenvid.cpp;dprintf_lite.cpp" ${C_SBIN} "procdutils" OFF)
 
 	condor_exe( gidd_alloc "gidd_alloc.cpp" ${C_SBIN} "" OFF)
 endif(LINUX AND WANT_FULL_DEPLOYMENT)
diff --git a/src/condor_procd/dprintf_lite.cpp b/src/condor_procd/dprintf_lite.cpp
index 8344ae5..f2694fc 100644
--- a/src/condor_procd/dprintf_lite.cpp
+++ b/src/condor_procd/dprintf_lite.cpp
@@ -215,3 +215,15 @@ preserve_log_file()
 		}
 	}
 }
+
+/* Some additional symbols referenced by ../condor_utils/selector.cpp.
+ */
+DebugOutputChoice AnyDebugBasicListener;
+
+BEGIN_C_DECLS
+void _mark_thread_safe(int /* start_or_stop */, int /* dologging */,
+					   const char* /* descrip */, const char* /* func */,
+					   const char* /* file */, int /* line */)
+{
+}
+END_C_DECLS
diff --git a/src/condor_procd/named_pipe_reader.unix.cpp b/src/condor_procd/named_pipe_reader.unix.cpp
index 0947334..716d26c 100644
--- a/src/condor_procd/named_pipe_reader.unix.cpp
+++ b/src/condor_procd/named_pipe_reader.unix.cpp
@@ -20,6 +20,7 @@
 
 #include "condor_common.h"
 #include "condor_debug.h"
+#include "selector.h"
 #include "named_pipe_reader.unix.h"
 #include "named_pipe_watchdog.unix.h"
 #include "named_pipe_util.unix.h"
@@ -100,22 +101,20 @@ NamedPipeReader::read_data(void* buffer, int len)
 	// something for us to read and then exited
 	//
 	if (m_watchdog != NULL) {
-		fd_set read_fd_set;
-		FD_ZERO(&read_fd_set);
-		FD_SET(m_pipe, &read_fd_set);
 		int watchdog_pipe = m_watchdog->get_file_descriptor();
-		FD_SET(watchdog_pipe, &read_fd_set);
-		int max_fd = (m_pipe > watchdog_pipe) ? m_pipe : watchdog_pipe;
-		int ret = select(max_fd + 1, &read_fd_set, NULL, NULL, NULL);
-		if (ret == -1) {
+		Selector selector;
+		selector.add_fd( m_pipe, Selector::IO_READ );
+		selector.add_fd( watchdog_pipe, Selector::IO_READ );
+		selector.execute();
+		if ( selector.failed() || selector.signalled() ) {
 			dprintf(D_ALWAYS,
 			        "select error: %s (%d)\n",
-			        strerror(errno),
-			        errno);
+			        strerror(selector.select_errno()),
+			        selector.select_errno());
 			return false;
 		}
-		if (FD_ISSET(watchdog_pipe, &read_fd_set) &&
-		    !FD_ISSET(m_pipe, &read_fd_set)
+		if ( selector.fd_ready( watchdog_pipe, Selector::IO_READ ) &&
+		     !selector.fd_ready( m_pipe, Selector::IO_READ )
 		) {
 			dprintf(D_ALWAYS,
 			        "error reading from named pipe: "
@@ -155,36 +154,31 @@ NamedPipeReader::poll(int timeout, bool& ready)
 
 	assert(timeout >= -1);
 
-	fd_set read_fd_set;
-	FD_ZERO(&read_fd_set);
-	FD_SET(m_pipe, &read_fd_set);
+	Selector selector;
+	selector.add_fd( m_pipe, Selector::IO_READ );
 
-	struct timeval* tv_ptr = NULL;
-	struct timeval tv;
 	if (timeout != -1) {
-		tv.tv_sec = timeout;
-		tv.tv_usec = 0;
-		tv_ptr = &tv;
+		selector.set_timeout( timeout );
 	}
 
-	int ret = select(m_pipe + 1, &read_fd_set, NULL, NULL, tv_ptr);
-	if (ret == -1) {
-		if( errno == EINTR ) {
-				// We could keep looping until all of the time has passed,
-				// but currently nothing depends on this, so just return
-				// true here to avoid having the whole procd die when
-				// somebody attaches with a debugger.
-			ready = false;
-			return true;
-		}
+	selector.execute();
+	if ( selector.signalled() ) {
+			// We could keep looping until all of the time has passed,
+			// but currently nothing depends on this, so just return
+			// true here to avoid having the whole procd die when
+			// somebody attaches with a debugger.
+		ready = false;
+		return true;
+	}
+	if ( selector.failed() ) {
 		dprintf(D_ALWAYS,
 		        "select error: %s (%d)\n",
-		        strerror(errno),
-		        errno);
+		        strerror(selector.select_errno()),
+		        selector.select_errno());
 		return false;
 	}
 
-	ready = FD_ISSET(m_pipe, &read_fd_set);
+	ready = selector.fd_ready( m_pipe, Selector::IO_READ );
 
 	return true;
 }
diff --git a/src/condor_procd/named_pipe_writer.unix.cpp b/src/condor_procd/named_pipe_writer.unix.cpp
index 9a1b312..5e9191b 100644
--- a/src/condor_procd/named_pipe_writer.unix.cpp
+++ b/src/condor_procd/named_pipe_writer.unix.cpp
@@ -20,6 +20,7 @@
 
 #include "condor_common.h"
 #include "condor_debug.h"
+#include "selector.h"
 #include "named_pipe_writer.unix.h"
 #include "named_pipe_watchdog.unix.h"
 
@@ -101,23 +102,19 @@ NamedPipeWriter::write_data(void* buffer, int len)
 	// crashes
 	//
 	if (m_watchdog != NULL) {
-		fd_set write_fd_set;
-		FD_ZERO(&write_fd_set);
-		FD_SET(m_pipe, &write_fd_set);
 		int watchdog_pipe = m_watchdog->get_file_descriptor();
-		fd_set read_fd_set;
-		FD_ZERO(&read_fd_set);
-		FD_SET(watchdog_pipe, &read_fd_set);
-		int max_fd = (m_pipe > watchdog_pipe) ? m_pipe : watchdog_pipe;
-		int ret = select(max_fd + 1, &read_fd_set, &write_fd_set, NULL, NULL);
-		if (ret == -1) {
+		Selector selector;
+		selector.add_fd( m_pipe, Selector::IO_WRITE );
+		selector.add_fd( watchdog_pipe, Selector::IO_READ );
+		selector.execute();
+		if ( selector.failed() || selector.signalled() ) {
 			dprintf(D_ALWAYS,
 			        "select error: %s (%d)\n",
-			        strerror(errno),
-			        errno);
+			        strerror(selector.select_errno()),
+			        selector.select_errno());
 			return false;
 		}
-		if (FD_ISSET(watchdog_pipe, &read_fd_set)) {
+		if ( selector.fd_ready( watchdog_pipe, Selector::IO_READ ) ) {
 			dprintf(D_ALWAYS,
 			        "error writing to named pipe: "
 			            "watchdog pipe has closed\n");
diff --git a/src/condor_utils/do_connect.unix.cpp b/src/condor_utils/do_connect.unix.cpp
index 4614bdc..25ec6ce 100644
--- a/src/condor_utils/do_connect.unix.cpp
+++ b/src/condor_utils/do_connect.unix.cpp
@@ -27,6 +27,7 @@
 #include "condor_network.h"
 #include "condor_sockfunc.h"
 #include "ipv6_hostname.h"
+#include "selector.h"
 
 /*
  * FYI: This code is used by the old shadow/starter and by the syscall lib
@@ -253,10 +254,6 @@ mk_config_name( const char *service_name )
 int tcp_connect_timeout( int sockfd, const condor_sockaddr& serv_addr,
 						int timeout )
 {
-	struct timeval  timer;
-	fd_set			writefds;
-	int				nfound;
-	int				nfds;
 	socklen_t		sz;
 	int				val = 0;
 	int				save_errno;
@@ -294,44 +291,29 @@ int tcp_connect_timeout( int sockfd, const condor_sockaddr& serv_addr,
 	/* set up the wait for the timeout. yeah, I know, dueling select loops
 		and all, it sucks a lot when it is the schedd doing it. :(
 	*/
-	timer.tv_sec = timeout;
-	timer.tv_usec = 0;
-	nfds = sockfd + 1;
-	FD_ZERO( &writefds );
-	FD_SET( sockfd, &writefds );
-
-	DO_AGAIN:
-	nfound = select( nfds,
-					(fd_set*) 0,
-					(fd_set*) &writefds,
-					(fd_set*) 0,
-					(struct timeval *)&timer );
-
-	if (nfound < 0) {
-		if (errno == EINTR) {
-
-			/* Got a signal, try again. Under the right frequency of signals
-				this may never end. This is improbable... */
-			timer.tv_sec = timeout;
-			timer.tv_usec = 0;
-			nfds = sockfd + 1;
-			FD_ZERO( &writefds );
-			FD_SET( sockfd, &writefds );
-			goto DO_AGAIN;
-		}
+	Selector selector;
+	selector.add_fd( sockfd, Selector::IO_WRITE );
+	selector.set_timeout( timeout );
+
+	/* Keep retrying if we get a signal. Under the right frequency of
+	 * signals this may never end. This is improbable...
+	 */
+	do {
+		selector.execute();
+	} while ( selector.signalled() );
 
+	if ( selector.failed() ) {
 		/* wasn't a signal, so select failed with some other error */
-		save_errno = errno;
 		if (set_fd_blocking(sockfd) < 0) {
 			return -1;
 		}
-		errno = save_errno;
+		errno = selector.select_errno();
 		/* The errno I'm returning here isn't right, since it is the
 			one from select(), not the one from connect(), but there really
 			isn't a good option at this point. */
 		return -1;
 
-	} else if (nfound == 0) {
+	} else if ( selector.timed_out() ) {
 		/* connection timed out */
 
 		if (set_fd_blocking(sockfd) < 0) {
@@ -428,41 +410,29 @@ int set_fd_blocking(int fd)
 int tcp_accept_timeout(int ConnectionSock, struct sockaddr *sinful, int *len,
                        int timeout)
 {
-	int             count;
-	fd_set  		readfds;
-	struct timeval 	timer;
 	int				newsock;
 	SOCKET_LENGTH_TYPE slt_len;
 
 	slt_len = *len;
 
-    timer.tv_sec = timeout;
-    timer.tv_usec = 0;
-    FD_ZERO( &readfds );
-    FD_SET( ConnectionSock, &readfds );
-#if defined(AIX31) || defined(AIX32)
-	errno = EINTR;  /* Shouldn't have to do this... */
-#endif
-    count = select(ConnectionSock+1,
-				   (SELECT_FDSET_PTR) &readfds,
-				   (SELECT_FDSET_PTR) 0,
-				   (SELECT_FDSET_PTR) 0,
-                   (struct timeval *)&timer );
-    if( count < 0 ) {
-		if( errno == EINTR ) {
-			dprintf( D_ALWAYS, "select() interrupted, restarting...\n");
-			return -3;
-		} else {
-			EXCEPT( "select() returns %d, errno = %d", count, errno );
-		}
+	Selector selector;
+	selector.add_fd( ConnectionSock, Selector::IO_READ );
+	selector.set_timeout( timeout );
+	selector.execute();
+	if ( selector.signalled() ) {
+		dprintf( D_ALWAYS, "select() interrupted, restarting...\n");
+		return -3;
+	}
+	if ( selector.failed() ) {
+		EXCEPT( "select() returns %d, errno = %d", selector.select_retval(), selector.select_errno() );
     }
 	/*
 	 ** dprintf( D_FULLDEBUG, "Select returned %d\n", NFDS(count) );
 	 */
 
-    if( count == 0 ) {
+    if( selector.timed_out() ) {
 		return -2;
-    } else if( FD_ISSET(ConnectionSock,&readfds) ) {
+    } else if ( selector.fd_ready( ConnectionSock, Selector::IO_READ ) ) {
 		newsock =  accept( ConnectionSock, (struct sockaddr *)sinful, (socklen_t*)&slt_len);
 		if ( newsock > -1 ) {
 			int on = 1;
@@ -471,7 +441,7 @@ int tcp_accept_timeout(int ConnectionSock, struct sockaddr *sinful, int *len,
 		}
 		return (newsock);
     } else {
-		EXCEPT( "select: unknown connection, count = %d", count );
+		EXCEPT( "select: unknown connection, count = %d", selector.select_retval() );
     }
 
     return -1;
diff --git a/src/condor_utils/selector.cpp b/src/condor_utils/selector.cpp
index b331465..2b9e870 100644
--- a/src/condor_utils/selector.cpp
+++ b/src/condor_utils/selector.cpp
@@ -298,6 +298,7 @@ void
 Selector::execute()
 {
 	int		nfds;
+	struct timeval timeout_copy;
 	struct timeval	*tp;
 
 	memcpy( read_fds, save_read_fds, fd_set_size * sizeof(fd_set) );
@@ -305,7 +306,8 @@ Selector::execute()
 	memcpy( except_fds, save_except_fds, fd_set_size * sizeof(fd_set) );
 
 	if( timeout_wanted ) {
-		tp = &timeout;
+		timeout_copy = timeout;
+		tp = &timeout_copy;
 	} else {
 		tp = NULL;
 	}
@@ -318,13 +320,13 @@ Selector::execute()
 				  (SELECT_FDSET_PTR) write_fds, 
 				  (SELECT_FDSET_PTR) except_fds, 
 				  tp );
+	_select_errno = errno;
 	stop_thread_safe("select");
 	_select_retval = nfds;
 
 	if( nfds < 0 ) {
-		_select_errno = errno;
 #if !defined(WIN32)
-		if( errno == EINTR ) {
+		if( _select_errno == EINTR ) {
 			state = SIGNALLED;
 			return;
 		}
