diff --git a/src/condor_includes/condor_accountant.h b/src/condor_includes/condor_accountant.h
index 14b6650..1d9c240 100644
--- a/src/condor_includes/condor_accountant.h
+++ b/src/condor_includes/condor_accountant.h
@@ -86,7 +86,7 @@ public:
   double GetLimitMax(const MyString& limit);
   void ReportLimits(AttrList *attrList);
 
-  AttrList* ReportState();
+  ClassAd* ReportState(bool rollup = false);
   AttrList* ReportState(const MyString& CustomerName, int * NumResources = NULL, float * NumResourcesRW = NULL);
                                                 
   void DisplayLog();
@@ -185,6 +185,8 @@ private:
   bool GetAttributeString(const MyString& Key, const MyString& AttrName, MyString& AttrValue);
 
   bool LoadState(const MyString& OldLogFileName);
+
+  void ReportGroups(GroupEntry* group, ClassAd* ad, bool rollup, map<string, int>& gnmap);
 };
 
 
diff --git a/src/condor_includes/condor_commands.h b/src/condor_includes/condor_commands.h
index 5006571..6546782 100644
--- a/src/condor_includes/condor_commands.h
+++ b/src/condor_includes/condor_commands.h
@@ -166,6 +166,9 @@
 #define RECYCLE_SHADOW (SCHED_VERS+110) // schedd: get a new job for a shadow
 #define CLEAR_DIRTY_JOB_ATTRS (SCHED_VERS+111) // schedd: clear dirty attributes for a job
 
+#define GET_PRIORITY_ROLLUP (SCHED_VERS+112) // negotiator
+
+
 // HAD-related commands
 #define HAD_ALIVE_CMD                   (HAD_COMMANDS_BASE + 0)
 #define HAD_SEND_ID_CMD                 (HAD_COMMANDS_BASE + 1)
diff --git a/src/condor_negotiator.V6/Accountant.cpp b/src/condor_negotiator.V6/Accountant.cpp
index 87c90ee..05de929 100644
--- a/src/condor_negotiator.V6/Accountant.cpp
+++ b/src/condor_negotiator.V6/Accountant.cpp
@@ -1041,83 +1041,233 @@ AttrList* Accountant::ReportState(const MyString& CustomerName, int* NumResource
 // Report the whole list of priorities
 //------------------------------------------------------------------
 
-AttrList* Accountant::ReportState() {
-    dprintf(D_ACCOUNTANT,"Reporting State\n");
+ClassAd* Accountant::ReportState(bool rollup) {
+    dprintf(D_ACCOUNTANT, "Reporting State%s\n", (rollup) ? " using rollup mode" : "");
+
+    ClassAd* ad = new ClassAd();
+    ad->Assign("LastUpdate", LastUpdateTime);
+
+    // assign acct group index numbers first, breadth first ordering
+    int EntryNum=1;
+    map<string, int> gnmap;
+    deque<GroupEntry*> grpq;
+    grpq.push_back(hgq_root_group);
+    while (!grpq.empty()) {
+        GroupEntry* group = grpq.front();
+        grpq.pop_front();
+        gnmap[group->name] = EntryNum++;
+        for (vector<GroupEntry*>::iterator j(group->children.begin());  j != group->children.end();  ++j) {
+            grpq.push_back(*j);
+        }
+    }
+
+    // populate the ad with acct group entries, with optional rollup of
+    // attributes up the group hierarchy
+    ReportGroups(hgq_root_group, ad, rollup, gnmap);
 
     HashKey HK;
-    ClassAd* CustomerAd;
-    float PriorityFactor;
-    float AccumulatedUsage;
-    float WeightedAccumulatedUsage;
-    int BeginUsageTime;
-    int LastUsageTime;
-    int ResourcesUsed;
-    float WeightedResourcesUsed;
-
-    AttrList* ad=new AttrList();
-    MyString tmp;
-    tmp.sprintf("LastUpdate = %d", LastUpdateTime);
-    ad->Insert(tmp.Value());
-
-    int OwnerNum=1;
+    ClassAd* CustomerAd = NULL;
     AcctLog->table.startIterations();
     while (AcctLog->table.iterate(HK,CustomerAd)) {
         MyString key;
         HK.sprint(key);
-        if (strncmp(CustomerRecord.Value(),key.Value(),CustomerRecord.Length())) continue;
+        if (strncmp(CustomerRecord.Value(), key.Value(), CustomerRecord.Length())) continue;
+        MyString CustomerName = key.Value()+CustomerRecord.Length();
 
-        MyString CustomerName=key.Value()+CustomerRecord.Length();
-        tmp.sprintf("Name%d = \"%s\"",OwnerNum,CustomerName.Value());
-        ad->Insert(tmp.Value());
+        bool isGroup=false;
+        GroupEntry* cgrp = GetAssignedGroup(CustomerName, isGroup);
 
-        tmp.sprintf("Priority%d = %f",OwnerNum,GetPriority(CustomerName));
-        ad->Insert(tmp.Value());
+        // entries for acct groups are now handled in ReportGroups(), above
+        if (isGroup) continue;
 
-        if (CustomerAd->LookupInteger(ResourcesUsedAttr,ResourcesUsed)==0) ResourcesUsed=0;
-        tmp.sprintf("ResourcesUsed%d = %d",OwnerNum,ResourcesUsed);
-        ad->Insert(tmp.Value());
+        std::string cgname(cgrp->name);
+        int snum = EntryNum++;
 
-        if (CustomerAd->LookupFloat(WeightedResourcesUsedAttr,WeightedResourcesUsed)==0) WeightedResourcesUsed=0;
-        tmp.sprintf("WeightedResourcesUsed%d = %f",OwnerNum,WeightedResourcesUsed);
-        ad->Insert(tmp.Value());
+        string tmp;
+        sprintf(tmp, "Name%d", snum);
+        ad->Assign(tmp.c_str(), CustomerName);
 
-        if (CustomerAd->LookupFloat(AccumulatedUsageAttr,AccumulatedUsage)==0) AccumulatedUsage=0;
-        tmp.sprintf("AccumulatedUsage%d = %f",OwnerNum,AccumulatedUsage);
-        ad->Insert(tmp.Value());
+        sprintf(tmp, "IsAccountingGroup%d", snum);
+        ad->Assign(tmp.c_str(), isGroup);
 
-        if (CustomerAd->LookupFloat(WeightedAccumulatedUsageAttr,WeightedAccumulatedUsage)==0) WeightedAccumulatedUsage=0;
-        tmp.sprintf("WeightedAccumulatedUsage%d = %f",OwnerNum,WeightedAccumulatedUsage);
-        ad->Insert(tmp.Value());
+        sprintf(tmp, "AccountingGroup%d", snum);
+        ad->Assign(tmp.c_str(), cgname);
 
-        if (CustomerAd->LookupInteger(BeginUsageTimeAttr,BeginUsageTime)==0) BeginUsageTime=0;
-        tmp.sprintf("BeginUsageTime%d = %d",OwnerNum,BeginUsageTime);
-        ad->Insert(tmp.Value());
-
-        if (CustomerAd->LookupInteger(LastUsageTimeAttr,LastUsageTime)==0) LastUsageTime=0;
-        tmp.sprintf("LastUsageTime%d = %d",OwnerNum,LastUsageTime);
-        ad->Insert(tmp.Value());
+        float Priority = GetPriority(CustomerName);
+        sprintf(tmp, "Priority%d", snum);
+        ad->Assign(tmp.c_str(), Priority);
 
+        float PriorityFactor = 0;
         if (CustomerAd->LookupFloat(PriorityFactorAttr,PriorityFactor)==0) PriorityFactor=0;
-        tmp.sprintf("PriorityFactor%d = %f",OwnerNum,PriorityFactor);
-        ad->Insert(tmp.Value());
-
-        bool isGroup=false;
-        string cgrp = GetAssignedGroup(CustomerName, isGroup)->name;
-        tmp.sprintf("AccountingGroup%d = \"%s\"",OwnerNum,cgrp.c_str());
-        ad->Insert(tmp.Value());
-        tmp.sprintf("IsAccountingGroup%d = %s",OwnerNum,(isGroup)?"TRUE":"FALSE");
-        ad->Insert(tmp.Value());
+        sprintf(tmp, "PriorityFactor%d", snum);
+        ad->Assign(tmp.c_str(), PriorityFactor);
 
-        OwnerNum++;
+        int ResourcesUsed = 0;
+        if (CustomerAd->LookupInteger(ResourcesUsedAttr,ResourcesUsed)==0) ResourcesUsed=0;
+        sprintf(tmp, "ResourcesUsed%d", snum);
+        ad->Assign(tmp.c_str(), ResourcesUsed);
+        
+        float WeightedResourcesUsed = 0;
+        if (CustomerAd->LookupFloat(WeightedResourcesUsedAttr,WeightedResourcesUsed)==0) WeightedResourcesUsed=0;
+        sprintf(tmp, "WeightedResourcesUsed%d", snum);
+        ad->Assign(tmp.c_str(), WeightedResourcesUsed);
+        
+        float AccumulatedUsage = 0;
+        if (CustomerAd->LookupFloat(AccumulatedUsageAttr,AccumulatedUsage)==0) AccumulatedUsage=0;
+        sprintf(tmp, "AccumulatedUsage%d", snum);
+        ad->Assign(tmp.c_str(), AccumulatedUsage);
+        
+        float WeightedAccumulatedUsage = 0;
+        if (CustomerAd->LookupFloat(WeightedAccumulatedUsageAttr,WeightedAccumulatedUsage)==0) WeightedAccumulatedUsage=0;
+        sprintf(tmp, "WeightedAccumulatedUsage%d", snum);
+        ad->Assign(tmp.c_str(), WeightedAccumulatedUsage);
+        
+        int BeginUsageTime = 0;
+        if (CustomerAd->LookupInteger(BeginUsageTimeAttr,BeginUsageTime)==0) BeginUsageTime=0;
+        sprintf(tmp, "BeginUsageTime%d", snum);
+        ad->Assign(tmp.c_str(), BeginUsageTime);
+        
+        int LastUsageTime = 0;
+        if (CustomerAd->LookupInteger(LastUsageTimeAttr,LastUsageTime)==0) LastUsageTime=0;
+        sprintf(tmp, "LastUsageTime%d", snum);
+        ad->Assign(tmp.c_str(), LastUsageTime);
     }
 
+    // total number of accountant entries, for acct groups and submittors
+    ad->Assign("NumSubmittors", EntryNum-1);
+
+    // include concurrency limit information
     ReportLimits(ad);
 
-    tmp.sprintf("NumSubmittors = %d", OwnerNum-1);
-    ad->Insert(tmp.Value());
     return ad;
 }
 
+
+void Accountant::ReportGroups(GroupEntry* group, ClassAd* ad, bool rollup, map<string, int>& gnmap) {
+    // begin by loading straight "non-rolled" data into the attributes for (group)
+    MyString CustomerName = group->name;
+
+    ClassAd* CustomerAd = NULL;
+    MyString HK(CustomerRecord + CustomerName);
+    if (AcctLog->table.lookup(HashKey(HK.Value()), CustomerAd) == -1) {
+        EXCEPT("Expected AcctLog entry \"%s\" to exist", HK.Value());
+    } 
+
+    bool isGroup=false;
+    GroupEntry* cgrp = GetAssignedGroup(CustomerName, isGroup);
+
+    std::string cgname;
+    int gnum = 0;
+    if (isGroup) {
+        cgname = (cgrp->parent != NULL) ? cgrp->parent->name : cgrp->name;
+        gnum = gnmap[cgrp->name];
+    } else {
+        EXCEPT("Expected \"%s\" to be a defined group in the accountant", CustomerName.Value());
+    }
+
+    string tmp;
+    sprintf(tmp, "Name%d", gnum);
+    ad->Assign(tmp.c_str(), CustomerName);
+
+    sprintf(tmp, "IsAccountingGroup%d", gnum);
+    ad->Assign(tmp.c_str(), isGroup);
+    
+    sprintf(tmp, "AccountingGroup%d", gnum);
+    ad->Assign(tmp.c_str(), cgname);
+    
+    float Priority = (!rollup) ? GetPriority(CustomerName) : 0;
+    sprintf(tmp, "Priority%d", gnum);
+    ad->Assign(tmp.c_str(), Priority);
+    
+    float PriorityFactor = 0;
+    if (!rollup && CustomerAd->LookupFloat(PriorityFactorAttr,PriorityFactor)==0) PriorityFactor=0;
+    sprintf(tmp, "PriorityFactor%d", gnum);
+    ad->Assign(tmp.c_str(), PriorityFactor);
+    
+    int ResourcesUsed = 0;
+    if (CustomerAd->LookupInteger(ResourcesUsedAttr,ResourcesUsed)==0) ResourcesUsed=0;
+    sprintf(tmp, "ResourcesUsed%d", gnum);
+    ad->Assign(tmp.c_str(), ResourcesUsed);
+    
+    float WeightedResourcesUsed = 0;
+    if (CustomerAd->LookupFloat(WeightedResourcesUsedAttr,WeightedResourcesUsed)==0) WeightedResourcesUsed=0;
+    sprintf(tmp, "WeightedResourcesUsed%d", gnum);
+    ad->Assign(tmp.c_str(), WeightedResourcesUsed);
+    
+    float AccumulatedUsage = 0;
+    if (CustomerAd->LookupFloat(AccumulatedUsageAttr,AccumulatedUsage)==0) AccumulatedUsage=0;
+    sprintf(tmp, "AccumulatedUsage%d", gnum);
+    ad->Assign(tmp.c_str(), AccumulatedUsage);
+    
+    float WeightedAccumulatedUsage = 0;
+    if (CustomerAd->LookupFloat(WeightedAccumulatedUsageAttr,WeightedAccumulatedUsage)==0) WeightedAccumulatedUsage=0;
+    sprintf(tmp, "WeightedAccumulatedUsage%d", gnum);
+    ad->Assign(tmp.c_str(), WeightedAccumulatedUsage);
+    
+    int BeginUsageTime = 0;
+    if (CustomerAd->LookupInteger(BeginUsageTimeAttr,BeginUsageTime)==0) BeginUsageTime=0;
+    sprintf(tmp, "BeginUsageTime%d", gnum);
+    ad->Assign(tmp.c_str(), BeginUsageTime);
+    
+    int LastUsageTime = 0;
+    if (CustomerAd->LookupInteger(LastUsageTimeAttr,LastUsageTime)==0) LastUsageTime=0;
+    sprintf(tmp, "LastUsageTime%d", gnum);
+    ad->Assign(tmp.c_str(), LastUsageTime);
+    
+    // Populate group's children recursively, if it has any
+    // Recursion is to allow for proper rollup from children to parents
+    for (vector<GroupEntry*>::iterator j(group->children.begin());  j != group->children.end();  ++j) {
+        ReportGroups(*j, ad, rollup, gnmap);
+    }
+
+    // if we aren't doing rollup, finish now
+    if (!rollup || (NULL == group->parent)) return;
+
+    // get the index of our parent
+    int pnum = gnmap[group->parent->name];
+
+    int ival = 0;
+    float fval = 0;
+
+    // roll up values to parent
+    sprintf(tmp, "ResourcesUsed%d", gnum);
+    ad->LookupInteger(tmp.c_str(), ResourcesUsed);
+    sprintf(tmp, "ResourcesUsed%d", pnum);
+    ad->LookupInteger(tmp.c_str(), ival);
+    ad->Assign(tmp.c_str(), ival + ResourcesUsed);
+
+    sprintf(tmp, "WeightedResourcesUsed%d", gnum);
+    ad->LookupFloat(tmp.c_str(), WeightedResourcesUsed);
+    sprintf(tmp, "WeightedResourcesUsed%d", pnum);
+    ad->LookupFloat(tmp.c_str(), fval);    
+    ad->Assign(tmp.c_str(), fval + WeightedResourcesUsed);
+
+    sprintf(tmp, "AccumulatedUsage%d", gnum);
+    ad->LookupFloat(tmp.c_str(), AccumulatedUsage);
+    sprintf(tmp, "AccumulatedUsage%d", pnum);
+    ad->LookupFloat(tmp.c_str(), fval);
+    ad->Assign(tmp.c_str(), fval + AccumulatedUsage);
+
+    sprintf(tmp, "WeightedAccumulatedUsage%d", gnum);
+    ad->LookupFloat(tmp.c_str(), WeightedAccumulatedUsage);
+    sprintf(tmp, "WeightedAccumulatedUsage%d", pnum);
+    ad->LookupFloat(tmp.c_str(), fval);
+    ad->Assign(tmp.c_str(), fval + WeightedAccumulatedUsage);
+
+    sprintf(tmp, "BeginUsageTime%d", gnum);
+    ad->LookupInteger(tmp.c_str(), BeginUsageTime);
+    sprintf(tmp, "BeginUsageTime%d", pnum);
+    ad->LookupInteger(tmp.c_str(), ival);
+    ad->Assign(tmp.c_str(), min(ival, BeginUsageTime));
+
+    sprintf(tmp, "LastUsageTime%d", gnum);
+    ad->LookupInteger(tmp.c_str(), LastUsageTime);
+    sprintf(tmp, "LastUsageTime%d", pnum);
+    ad->LookupInteger(tmp.c_str(), ival);
+    ad->Assign(tmp.c_str(), max(ival, LastUsageTime));
+}
+
+
 //------------------------------------------------------------------
 // Extract resource name from class-ad
 //------------------------------------------------------------------
diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index d699d03..2ac0552 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -387,6 +387,9 @@ initialize ()
     daemonCore->Register_Command (GET_PRIORITY, "GetPriority",
 		(CommandHandlercpp) &Matchmaker::GET_PRIORITY_commandHandler, 
 			"GET_PRIORITY_commandHandler", this, READ);
+    daemonCore->Register_Command (GET_PRIORITY_ROLLUP, "GetPriorityRollup",
+		(CommandHandlercpp) &Matchmaker::GET_PRIORITY_ROLLUP_commandHandler, 
+			"GET_PRIORITY_ROLLUP_commandHandler", this, READ);
     daemonCore->Register_Command (GET_RESLIST, "GetResList",
 		(CommandHandlercpp) &Matchmaker::GET_RESLIST_commandHandler, 
 			"GET_RESLIST_commandHandler", this, READ);
@@ -890,6 +893,30 @@ GET_PRIORITY_commandHandler (int, Stream *strm)
 
 
 int Matchmaker::
+GET_PRIORITY_ROLLUP_commandHandler(int, Stream *strm) {
+    // read the required data off the wire
+    if (!strm->end_of_message()) {
+        dprintf (D_ALWAYS, "GET_PRIORITY_ROLLUP: Could not read eom\n");
+        return FALSE;
+    }
+
+    // get the priority
+    dprintf(D_ALWAYS, "Getting state information from the accountant\n");
+    AttrList* ad = accountant.ReportState(true);
+
+    if (!ad->putAttrList(*strm) ||
+        !strm->end_of_message()) {
+        dprintf (D_ALWAYS, "Could not send priority information\n");
+        delete ad;
+        return FALSE;
+	}
+
+    delete ad;
+    return TRUE;
+}
+
+
+int Matchmaker::
 GET_RESLIST_commandHandler (int, Stream *strm)
 {
     char    scheddName[64];
diff --git a/src/condor_negotiator.V6/matchmaker.h b/src/condor_negotiator.V6/matchmaker.h
index 7d8635f..87f3b0f 100644
--- a/src/condor_negotiator.V6/matchmaker.h
+++ b/src/condor_negotiator.V6/matchmaker.h
@@ -114,6 +114,7 @@ class Matchmaker : public Service
 		int SET_BEGINTIME_commandHandler(int, Stream*);
 		int SET_LASTTIME_commandHandler(int, Stream*);
 		int GET_PRIORITY_commandHandler(int, Stream*);
+		int GET_PRIORITY_ROLLUP_commandHandler(int, Stream*);
 		int GET_RESLIST_commandHandler(int, Stream*);
 
 		// timeout handler (for periodic negotiations)
diff --git a/src/condor_tools/user_prio.cpp b/src/condor_tools/user_prio.cpp
index 51f3b5d..cb71a37 100644
--- a/src/condor_tools/user_prio.cpp
+++ b/src/condor_tools/user_prio.cpp
@@ -61,15 +61,38 @@ static void PrintResList(AttrList* ad);
 
 //-----------------------------------------------------------------
 
-extern "C" {
-int CompPrio(const void * a, const void * b);
-}
+int DetailFlag=0;
+bool GroupOrder = false;
+time_t MinLastUsageTime;
 
 
-//-----------------------------------------------------------------
+struct LineRecLT {
+    int detail_flag;
+    bool group_order;
 
-int DetailFlag=0;
-time_t MinLastUsageTime;
+    LineRecLT() : detail_flag(0), group_order(false) {}
+    LineRecLT(int df, bool go) : detail_flag(df), group_order(go) {}
+
+    bool operator()(const LineRec& a, const LineRec& b) const {
+        if (group_order) {
+            // Acct groups come out of the acct classad ordered before the 
+            // individual submitters, and in breadth-first order of hierarchy.
+            // This preserves that ordering:
+            if (a.IsAcctGroup || b.IsAcctGroup) {
+                return &a < &b;
+            }
+        }
+
+        // Order submitters by accumulated usage or priority depending on CL flags
+        if (detail_flag == 2) {
+            return a.AccUsage < b.AccUsage;
+        } else {
+            return a.Priority < b.Priority;
+        }
+
+        return false;
+    }
+};
 
 
 int
@@ -87,6 +110,7 @@ main(int argc, char* argv[])
   bool ResetAll=false;
   int GetResList=0;
   char* pool = NULL;
+  bool GroupRollup = false;
 
   myDistro->Init( argc, argv );
   config();
@@ -135,6 +159,12 @@ main(int argc, char* argv[])
     else if (strcmp(argv[i],"-l")==0) {
       LongFlag=true;
     }
+    else if (strcmp(argv[i],"-grouprollup")==0) {
+      GroupRollup=true;
+    }
+    else if (strcmp(argv[i],"-grouporder")==0) {
+      GroupOrder=true;
+    }
     else if (strcmp(argv[i],"-all")==0) {
       DetailFlag=1;
     }
@@ -460,15 +490,12 @@ main(int argc, char* argv[])
   else {  // list priorities
 
     Sock* sock;
-    if( !(sock = negotiator.startCommand( GET_PRIORITY,
-										  Stream::reli_sock, 0)) ) {
-      fprintf( stderr, "failed to send GET_PRIORITY command to negotiator\n" );
-      exit(1);
+    if (!(sock = negotiator.startCommand((GroupRollup) ? GET_PRIORITY_ROLLUP : GET_PRIORITY, Stream::reli_sock, 0)) ||
+        !sock->end_of_message()) {
+        fprintf(stderr, "failed to send %s command to negotiator\n", (GroupRollup) ? "GET_PRIORITY_ROLLUP" : "GET_PRIORITY");
+        exit(1);
     }
 
-	// ship it out
-	sock->end_of_message();
-
     // get reply
     sock->decode();
     AttrList* ad=new AttrList();
@@ -499,7 +526,7 @@ static void ProcessInfo(AttrList* ad)
   }
   LineRec* LR=new LineRec[NumElem];
   CollectInfo(NumElem,ad,LR);
-  qsort(LR,NumElem,sizeof(LineRec),CompPrio);  
+  std::sort(LR, LR+NumElem, LineRecLT(DetailFlag, GroupOrder));
   PrintInfo(ad,LR,NumElem);
   delete[] LR;
 } 
@@ -517,21 +544,6 @@ static int CountElem(AttrList* ad)
 
 //-----------------------------------------------------------------
 
-extern "C" {
-int CompPrio(const void * ina, const void * inb) 
-{
-  LineRec* a = (LineRec *)ina;
-  LineRec* b = (LineRec *)inb;
-
-  if (DetailFlag==2) {
-    if (a->AccUsage>b->AccUsage) return 1;
-  }
-  else {
-    if (a->Priority>b->Priority) return 1;
-  }
-  return -1;
-}
-}
 
 //-----------------------------------------------------------------
 
@@ -659,7 +671,7 @@ static void PrintInfo(AttrList* ad, LineRec* LR, int NumElem)
     if (DetailFlag==2)
       printf(Fmt1,LR[i].Name.Value(),LR[i].AccUsage/3600.0,format_date_year(LR[i].BeginUsage),LastUsageStr);
     else 
-      printf(Fmt1,LR[i].Name.Value(),LR[i].Priority,(LR[i].Priority/LR[i].Factor),LR[i].Factor,LR[i].wtRes,LR[i].AccUsage/3600.0,format_date_year(LR[i].BeginUsage),LastUsageStr);
+        printf(Fmt1,LR[i].Name.Value(),LR[i].Priority, (LR[i].Factor>0) ? (LR[i].Priority/LR[i].Factor) : 0, LR[i].Factor,LR[i].wtRes,LR[i].AccUsage/3600.0,format_date_year(LR[i].BeginUsage),LastUsageStr);
 
     if (!is_group) {
       Totals.wtRes+=LR[i].wtRes;
@@ -686,7 +698,7 @@ static void PrintInfo(AttrList* ad, LineRec* LR, int NumElem)
 static void usage(char* name) {
   fprintf( stderr, "usage: %s [ -pool hostname ] [ -all | -usage | { -setprio | -setfactor | -setaccum | -setbegin | -setlast }  user value | "
 			"-resetusage user | -resetall | -getreslist user | -delete user ] "
-			"[-allusers | -activefrom month day year] [-l]\n", name );
+			"[-allusers | -activefrom month day year] [-l] [-grouprollup] [-grouporder]\n", name );
   exit(1);
 }
 
@@ -700,7 +712,7 @@ static void PrintResList(AttrList* ad)
   char  name[128];
   int   StartTime;
 
-  char* Fmt="%-30s %12s %12s\n";
+  const char* Fmt="%-30s %12s %12s\n";
 
   printf(Fmt,"Resource Name"," Start Time"," Match Time");
   printf(Fmt,"-------------"," ----------"," ----------");
