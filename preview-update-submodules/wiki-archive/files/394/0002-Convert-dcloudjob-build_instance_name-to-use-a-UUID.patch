From 392d84423ed2550ed029e37dd8cf889ff21a0ffa Mon Sep 17 00:00:00 2001
From: Chris Lalancette <clalance@redhat.com>
Date: Tue, 31 May 2011 15:00:12 -0400
Subject: [PATCH 02/13] Convert dcloudjob build_instance_name to use a UUID.

This is so that we can shorten up the name (some clouds
require fairly short names), and also maintain the uniqueness
of the names.

Signed-off-by: Chris Lalancette <clalance@redhat.com>
---
 build/cmake/CondorConfigure.cmake             |    1 +
 externals/bundles/libuuid/2.18/CMakeLists.txt |   64 +++++++++++++++++++++++++
 src/condor_gridmanager/CMakeLists.txt         |    2 +-
 src/condor_gridmanager/dcloudjob.cpp          |   31 ++++--------
 4 files changed, 77 insertions(+), 21 deletions(-)
 create mode 100644 externals/bundles/libuuid/2.18/CMakeLists.txt

diff --git a/build/cmake/CondorConfigure.cmake b/build/cmake/CondorConfigure.cmake
index f26d94a..b16ac74 100644
--- a/build/cmake/CondorConfigure.cmake
+++ b/build/cmake/CondorConfigure.cmake
@@ -495,6 +495,7 @@ if (NOT WINDOWS)
 	add_subdirectory(${CONDOR_EXTERNAL_DIR}/bundles/libvirt/0.6.2)
 	add_subdirectory(${CONDOR_EXTERNAL_DIR}/bundles/libdeltacloud/0.8)
 	add_subdirectory(${CONDOR_EXTERNAL_DIR}/bundles/libcgroup/0.37)
+	add_subdirectory(${CONDOR_EXTERNAL_DIR}/bundles/libuuid/2.18)
 
 	# globus is an odd *beast* which requires a bit more config.
 	add_subdirectory(${CONDOR_EXTERNAL_DIR}/bundles/globus/5.0.1-p1)
diff --git a/externals/bundles/libuuid/2.18/CMakeLists.txt b/externals/bundles/libuuid/2.18/CMakeLists.txt
new file mode 100644
index 0000000..1ebcba4
--- /dev/null
+++ b/externals/bundles/libuuid/2.18/CMakeLists.txt
@@ -0,0 +1,64 @@
+ ###############################################################
+ #
+ # Copyright 2011 Red Hat, Inc.
+ #
+ # Licensed under the Apache License, Version 2.0 (the "License"); you
+ # may not use this file except in compliance with the License.  You may
+ # obtain a copy of the License at
+ #
+ #    http://www.apache.org/licenses/LICENSE-2.0
+ #
+ # Unless required by applicable law or agreed to in writing, software
+ # distributed under the License is distributed on an "AS IS" BASIS,
+ # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ # See the License for the specific language governing permissions and
+ # limitations under the License.
+ #
+ ###############################################################
+
+if ( LINUX )
+	option(WITH_LIBUUID "Compiling with libuuid" ON)
+endif( LINUX )
+
+if (WITH_LIBUUID)
+
+	if ( NOT PROPER )
+
+		set(LIBUUID_VER libuuid-2.18)
+
+		ExternalProject_Add(libuuid
+				PREFIX ${EXTERNAL_BUILD_PREFIX}/${LIBUUID_VER}
+				#-- Download Step ----------
+				DOWNLOAD_COMMAND wget -N http://parrot.cs.wisc.edu/externals/${LIBUUID_VER}.tar.gz ${CMD_TERM}
+				DOWNLOAD_DIR ${EXTERNAL_DL}
+				URL http://parrot.cs.wisc.edu/externals/${LIBUUID_VER}.tar.gz
+				#--Configure step ----------
+				CONFIGURE_COMMAND cd ${LIBUUID_VER} && ./configure --prefix=${EXTERNAL_STAGE} --disable-shared
+				#--Build Step ----------
+				BUILD_COMMAND cd ${LIBUUID_VER} && make
+				BUILD_IN_SOURCE 1
+				#--install Step ----------
+				INSTALL_DIR ${EXTERNAL_STAGE}
+				INSTALL_COMMAND cd ${LIBUUID_VER} && make install )
+
+		# Set the target dependencies which the rest of condor depends on.
+		set(LIBUUID_FOUND "${EXTERNAL_STAGE}/lib/libuuid.a")
+		append_var( CONDOR_EXTERNALS libuuid )
+
+	else( NOT PROPER )
+
+		find_multiple( "uuid" LIBUUID_FOUND )
+
+	endif( NOT PROPER )
+
+	if (LIBUUID_FOUND)
+		message (STATUS "external configured (LIBUUID_FOUND=${LIBUUID_FOUND})")
+		set( LIBUUID_FOUND ${LIBUUID_FOUND} PARENT_SCOPE )
+		set( HAVE_EXT_LIBUUID ON PARENT_SCOPE )
+	endif(LIBUUID_FOUND)
+
+else(WITH_LIBUUID)
+
+	message (STATUS "external skipped (libuuid)")
+
+endif(WITH_LIBUUID)
diff --git a/src/condor_gridmanager/CMakeLists.txt b/src/condor_gridmanager/CMakeLists.txt
index 108f8e4..e07c129 100644
--- a/src/condor_gridmanager/CMakeLists.txt
+++ b/src/condor_gridmanager/CMakeLists.txt
@@ -23,7 +23,7 @@ if(NOT WIN_EXEC_NODE_ONLY)
 	file( GLOB RmvSrcs *_gahp_wrapper* )
 	condor_glob( GMHDRS GMSRCS "${RmvSrcs}" )
 
-	condor_exe( condor_gridmanager "${GMHDRS};${GMSRCS}" ${C_SBIN} "qmgmt;daemon_core;${GM_LINK_LIBS}" OFF )
+	condor_exe( condor_gridmanager "${GMHDRS};${GMSRCS}" ${C_SBIN} "qmgmt;daemon_core;${GM_LINK_LIBS};${LIBUUID_FOUND}" OFF )
 
 	if (NOT WINDOWS)
         if (HAVE_EXT_GLOBUS)
diff --git a/src/condor_gridmanager/dcloudjob.cpp b/src/condor_gridmanager/dcloudjob.cpp
index ade467c..dcfb249 100644
--- a/src/condor_gridmanager/dcloudjob.cpp
+++ b/src/condor_gridmanager/dcloudjob.cpp
@@ -31,6 +31,8 @@
 #include "dcloudjob.h"
 #include "condor_config.h"
   
+#include <uuid/uuid.h>
+
 #define GM_INIT							0
 #define GM_UNSUBMITTED					1
 #define GM_CREATE_VM					2
@@ -1022,28 +1024,17 @@ void DCloudJob::StatusUpdate( const char *new_status )
 MyString DCloudJob::build_instance_name()
 {
 	// Build a name that will be unique to this job.
-	// Our pattern is Condor_<collector name>_<GlobalJobId>
-
-	// get condor pool name
-	// In case there are multiple collectors, strip out the spaces
-	// If there's no collector, insert a dummy name
-	char* pool_name = param( "COLLECTOR_HOST" );
-	if ( pool_name ) {
-		StringList collectors( pool_name );
-		free( pool_name );
-		pool_name = collectors.print_to_string();
-	}
-	if ( !pool_name ) {
-		pool_name = strdup( "NoPool" );
-	}
+	// We use a generated UUID
+
+	uuid_t uuid;
+	char *instance_name;
+
+	uuid_generate(uuid);
 
-	// use "ATTR_GLOBAL_JOB_ID" to get unique global job id
-	MyString job_id;
-	jobAd->LookupString( ATTR_GLOBAL_JOB_ID, job_id );
+	// A UUID parses out to 36 characters plus a \0, so allocate 37 here
+	instance_name = (char *)malloc(37);
 
-	MyString instance_name;
-	instance_name.sprintf( "Condor_%s_%s", pool_name, job_id.Value() );
+	uuid_unparse(uuid, instance_name);
 
-	free( pool_name );
 	return instance_name;
 }
-- 
1.7.4.4

