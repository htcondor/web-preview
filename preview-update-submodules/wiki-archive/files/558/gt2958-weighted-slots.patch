diff --git a/doc/version-history/7-7.history.tex b/doc/version-history/7-7.history.tex
index 4f6d8d7..369c1f9 100644
--- a/doc/version-history/7-7.history.tex
+++ b/doc/version-history/7-7.history.tex
@@ -183,6 +183,11 @@ and this attribute would be the count of jobs that have started.
 
 \begin{itemize}
 
+\item Added logic to \Condor{negotiator} to negotiate with full group quota instead 
+of allocated-slots when no surplus sharing is in effect, to address bug in handling
+weighted slots.
+\Ticket{2958}
+
 \item Fixed a bug in \Condor{vm-gahp} that caused 64-bit guest OSes that
 need network access to fail on start-up when run under VMware.
 \Ticket{2922}
diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index 38f6359..31d895f 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -286,6 +286,7 @@ Matchmaker ()
 	num_negotiation_cycle_stats = 0;
 
     hgq_root_group = NULL;
+    accept_surplus = false;
     autoregroup = false;
     allow_quota_oversub = false;
 
@@ -1442,7 +1443,8 @@ negotiationTime ()
                 allocated_total += group->allocated;
                 if (group->allocated > 0) served_groups += 1;
                 else if (group->requested > 0) unserved_groups += 1;
-                maxdelta = max(maxdelta, max(0.0, group->allocated - group->usage));
+                double target = (accept_surplus) ? group->allocated : group->quota;
+                maxdelta = max(maxdelta, max(0.0, target - group->usage));
             }
 
             dprintf(D_ALWAYS, "group quotas: groups= %lu  requesting= %lu  served= %lu  unserved= %lu  slots= %g  requested= %g  allocated= %g  surplus= %g\n", 
@@ -1516,12 +1518,15 @@ negotiationTime ()
 		    
                     dprintf(D_ALWAYS, "Group %s - BEGIN NEGOTIATION\n", group->name.c_str());
 
-                    double delta = max(0.0, group->allocated - group->usage);
+                    // if allocating surplus, use allocated, otherwise just use the group's quota directly
+                    double target = (accept_surplus) ? group->allocated : group->quota;
+
+                    double delta = max(0.0, target - group->usage);
                     // If delta > 0, we know maxdelta also > 0.  Otherwise, it means we actually are using more than
                     // we just got allocated, so just negotiate for what we were allocated.
-                    double slots = (delta > 0) ? group->usage + (delta * (n / maxdelta)) : group->allocated;
+                    double slots = (delta > 0) ? group->usage + (delta * (n / maxdelta)) : target;
                     // Defensive -- do not exceed allocated slots
-                    slots = min(slots, group->allocated);
+                    slots = min(slots, target);
                     if (!accountant.UsingWeightedSlots()) {
                         slots = floor(slots);
                     }
@@ -1658,7 +1663,7 @@ void Matchmaker::hgq_construct_tree() {
 
     allow_quota_oversub = param_boolean("NEGOTIATOR_ALLOW_QUOTA_OVERSUBSCRIPTION", false);
 
-    bool accept_surplus = false;
+    accept_surplus = false;
     autoregroup = false;
     const bool default_accept_surplus = param_boolean("GROUP_ACCEPT_SURPLUS", false);
     const bool default_autoregroup = param_boolean("GROUP_AUTOREGROUP", false);
@@ -1740,10 +1745,6 @@ void Matchmaker::hgq_construct_tree() {
         if (group->accept_surplus) accept_surplus = true;
     }
 
-    if (autoregroup && accept_surplus) {
-        EXCEPT("GROUP_AUTOREGROUP is not compatible with GROUP_ACCEPT_SURPLUS\n");
-    }
-
     // Set the root group's autoregroup state to match the effective global value for autoregroup
     // we do this for the benefit of the accountant, it also can be use to remove some special cases
     // in the negotiator loops.
@@ -1953,12 +1954,6 @@ double Matchmaker::hgq_allocate_surplus(GroupEntry* group, double surplus) {
     // Nothing to allocate
     if (surplus <= 0) return 0;
 
-    // If we are in autoregroup mode, proportional surplus allocation is disabled
-    if (autoregroup) {
-        dprintf(D_ALWAYS, "group quotas: autoregroup mode: proportional surplus allocation disabled\n");
-        return surplus;
-    }
-
     // If entire subtree requests nothing, halt now
     if (group->subtree_requested <= 0) return surplus;
 
diff --git a/src/condor_negotiator.V6/matchmaker.h b/src/condor_negotiator.V6/matchmaker.h
index cf8bb42..644db4e 100644
--- a/src/condor_negotiator.V6/matchmaker.h
+++ b/src/condor_negotiator.V6/matchmaker.h
@@ -461,6 +461,7 @@ class Matchmaker : public Service
         string hgq_root_name;
         vector<GroupEntry*> hgq_groups;
         map<string, GroupEntry*> group_entry_map;
+        bool accept_surplus;
         bool autoregroup;
         bool allow_quota_oversub;
 
