diff --git a/src/condor_daemon_core.V6/daemon_core.cpp b/src/condor_daemon_core.V6/daemon_core.cpp
index ccf86d1..b80f365 100644
--- a/src/condor_daemon_core.V6/daemon_core.cpp
+++ b/src/condor_daemon_core.V6/daemon_core.cpp
@@ -6063,18 +6063,23 @@ DaemonCore::Forked_Child_Wants_Exit_By_Exec( bool exit_by_exec )
 }
 
 #if !defined(WIN32)
-int g_create_process_errorpipe = -1;
+class CreateProcessForkit;
+CreateProcessForkit *g_create_process_forkit = NULL;
 
 void
-enterCreateProcessChild(int errorpipe) {
-	ASSERT( g_create_process_errorpipe == -1 );
-	g_create_process_errorpipe = errorpipe;
+enterCreateProcessChild(CreateProcessForkit *forkit) {
+	ASSERT( g_create_process_forkit == NULL );
+	g_create_process_forkit = forkit;
 }
 
 void
 exitCreateProcessChild() {
-	g_create_process_errorpipe = -1;
+	g_create_process_forkit = NULL;
 }
+
+void
+writeExecError(CreateProcessForkit *forkit,int exec_errno);
+
 #endif
 
 #if !defined(WIN32)
@@ -6104,7 +6109,7 @@ extern "C" {
 void __real_exit(int status);
 void __wrap_exit(int status)
 {
-	if ( _condor_exit_with_exec == 0 && g_create_process_errorpipe == -1 ) {
+	if ( _condor_exit_with_exec == 0 && g_create_process_forkit == NULL ) {
 			// The advantage of calling the real exit() rather than
 			// _exit() is that things like gprof and google-perftools
 			// can write a final profile dump.
@@ -6126,11 +6131,10 @@ void exit(int status)
 	fflush( stdout );
 	fflush( stderr );
 
-	if( g_create_process_errorpipe != -1 ) {
+	if( g_create_process_forkit ) {
 			// We are inside fork() or clone() and we need to tell our
 			// parent process that something has gone horribly wrong.
-		int child_errno = DaemonCore::ERRNO_EXIT;
-		write(g_create_process_errorpipe, &child_errno, sizeof(child_errno));
+		writeExecError(g_create_process_forkit,DaemonCore::ERRNO_EXIT);
 	}
 
 	if ( _condor_exit_with_exec == 0 ) {
@@ -6313,7 +6317,8 @@ public:
 	   m_priv(the_priv), m_want_command_port(the_want_command_port),
 	   m_sigmask(the_sigmask), m_unix_args(0), m_unix_env(0),
 	   m_core_hard_limit(core_hard_limit),
-	   m_affinity_mask(affinity_mask)
+	   m_affinity_mask(affinity_mask),
+	   m_wrote_tracking_gid(false)
 	{
 	}
 
@@ -6331,6 +6336,9 @@ public:
 	pid_t clone_safe_getpid();
 	pid_t clone_safe_getppid();
 
+	void writeTrackingGid(gid_t tracking_gid);
+	void writeExecError(int exec_errno);
+
 private:
 		// Data passed to us from the parent:
 		// The following are mostly const, just to avoid accidentally
@@ -6367,6 +6375,7 @@ private:
 	size_t *m_core_hard_limit;
 	const int    *m_affinity_mask;
 	Env m_envobject;
+	bool m_wrote_tracking_gid;
 };
 
 enum {
@@ -6456,7 +6465,7 @@ pid_t CreateProcessForkit::fork_exec() {
 			// SIGCHLD     - we want this signal when child dies, as opposed
 			//               to some other non-standard signal
 
-		enterCreateProcessChild(m_errorpipe[1]);
+		enterCreateProcessChild(this);
 
 		newpid = clone(
 			CreateProcessForkit::clone_fn,
@@ -6479,7 +6488,7 @@ pid_t CreateProcessForkit::fork_exec() {
 	newpid = fork();
 	if( newpid == 0 ) {
 			// in child
-		enterCreateProcessChild(m_errorpipe[1]);
+		enterCreateProcessChild(this);
 		exec(); // never returns
 	}
 
@@ -6494,8 +6503,38 @@ int CreateProcessForkit::clone_fn( void *arg ) {
 	return 0;
 }
 
+void CreateProcessForkit::writeTrackingGid(gid_t tracking_gid)
+{
+	m_wrote_tracking_gid = true;
+	full_write(m_errorpipe[1], &tracking_gid, sizeof(tracking_gid));
+		// If the write fails, our parent should fail to read it and
+		// will handle the error.  There's not much else we can do
+		// about that here.  dprintf() may not even be possible at
+		// this time.
+}
+
+void CreateProcessForkit::writeExecError(int child_errno)
+{
+	if( !m_wrote_tracking_gid ) {
+			// Tracking gid must come before errno on the pipe,
+			// so write a bogus gid now.  The value doesn't
+			// matter, because we are reporting failure to
+			// call exec().
+		writeTrackingGid(0);
+	}
+	full_write(m_errorpipe[1], &child_errno, sizeof(child_errno));
+		// If the write fails, we have no good way to handle it.
+		// dprintf() may not even be possible at this time.
+}
+
+void writeExecError(CreateProcessForkit *forkit,int exec_errno)
+{
+	forkit->writeExecError(exec_errno);
+}
+
 void CreateProcessForkit::exec() {
 	extern char **environ;
+	gid_t  tracking_gid = 0;
 
 		// Keep in mind that there are two cases:
 		//   1. We got here by forking, (cannot modify parent's memory)
@@ -6556,8 +6595,7 @@ void CreateProcessForkit::exec() {
 	if( (daemonCore->pidTable->lookup(pid, pidinfo) >= 0) ) {
 			// we've already got this pid in our table! we've got
 			// to bail out immediately so our parent can retry.
-		int child_errno = DaemonCore::ERRNO_PID_COLLISION;
-		write(m_errorpipe[1], &child_errno, sizeof(child_errno));
+		writeExecError(DaemonCore::ERRNO_PID_COLLISION);
 		_exit(4);
 	}
 		// If we made it here, we didn't find the PID in our
@@ -6648,7 +6686,7 @@ void CreateProcessForkit::exec() {
 						  PIDENVID_MAX );
 					// before we exit, make sure our parent knows something
 					// went wrong before the exec...
-				write(m_errorpipe[1], &errno, sizeof(errno));
+				writeExecError(errno);
 				_exit(errno);
 			}
 
@@ -6672,7 +6710,7 @@ void CreateProcessForkit::exec() {
 					  "\"%s\" due to bad format. !\n", envid );
 				// before we exit, make sure our parent knows something
 				// went wrong before the exec...
-			write(m_errorpipe[1], &errno, sizeof(errno));
+			writeExecError(errno);
 			_exit(errno);
 		}
 
@@ -6687,7 +6725,7 @@ void CreateProcessForkit::exec() {
 				  "Error.\n", envid );
 			// before we exit, make sure our parent knows something
 			// went wrong before the exec...
-		write(m_errorpipe[1], &errno, sizeof(errno));
+		writeExecError(errno);
 		_exit(errno);
 	}
 		// END pid family environment id propogation 
@@ -6729,7 +6767,7 @@ void CreateProcessForkit::exec() {
 							strerror(errno) );
 						// before we exit, make sure our parent knows something
 						// went wrong before the exec...
-					write(m_errorpipe[1], &errno, sizeof(errno));
+					writeExecError(errno);
 					_exit(errno);
 				}
 		}
@@ -6760,7 +6798,9 @@ void CreateProcessForkit::exec() {
 			//
 			gid_t* tracking_gid_ptr = NULL;
 #if defined(LINUX)
-			tracking_gid_ptr = m_family_info->group_ptr;
+			if( m_family_info->group_ptr ) {
+				tracking_gid_ptr = &tracking_gid;
+			}
 #endif
 
 			bool ok =
@@ -6773,7 +6813,7 @@ void CreateProcessForkit::exec() {
 				                            m_family_info->glexec_proxy);
 			if (!ok) {
 				errno = DaemonCore::ERRNO_REGISTRATION_FAILED;
-				write(m_errorpipe[1], &errno, sizeof(errno));
+				writeExecError(errno);
 				_exit(4);
 			}
 
@@ -6783,6 +6823,9 @@ void CreateProcessForkit::exec() {
 		}
 	}
 
+		// This _must_ be called before calling exec().
+	writeTrackingGid(tracking_gid);
+
 	int openfds = getdtablesize();
 
 		// Here we have to handle re-mapping of std(in|out|err)
@@ -7002,8 +7045,7 @@ void CreateProcessForkit::exec() {
 	if ( m_priv != PRIV_ROOT ) {
 			// Final check to make sure we're not root anymore.
 		if( getuid() == 0 ) {
-			int priv_errno = DaemonCore::ERRNO_EXEC_AS_ROOT;
-			write(m_errorpipe[1], &priv_errno, sizeof(priv_errno));
+			writeExecError(DaemonCore::ERRNO_EXEC_AS_ROOT);
 			_exit(4);
 		}
 	}
@@ -7013,7 +7055,7 @@ void CreateProcessForkit::exec() {
 		if( chdir(m_cwd) == -1 ) {
 				// before we exit, make sure our parent knows something
 				// went wrong before the exec...
-			write(m_errorpipe[1], &errno, sizeof(errno));
+			writeExecError(errno);
 			_exit(errno);
 		}
 	}
@@ -7028,7 +7070,7 @@ void CreateProcessForkit::exec() {
 			new_mask = &empty_mask;
 		}
 		if (sigprocmask(SIG_SETMASK, new_mask, NULL) == -1) {
-			write(m_errorpipe[1], &errno, sizeof(errno));
+			writeExecError(errno);
 			_exit(errno);
 		}
 	}
@@ -7036,7 +7078,7 @@ void CreateProcessForkit::exec() {
 #if defined(LINUX) && defined(TDP)
 	if( HAS_DCJOBOPT_SUSPEND_ON_EXEC(m_job_opt_mask) ) {
 		if(ptrace(PTRACE_TRACEME, 0, 0, 0) == -1) {
-			write(m_errorpipe[1], &errno, sizeof(errno));
+			writeExecError(errno);
 			_exit (errno);
 		}
 	}
@@ -7054,7 +7096,7 @@ void CreateProcessForkit::exec() {
 			// Let's exit with our errno.
 			// before we exit, make sure our parent knows something
 			// went wrong before the exec...
-		write(m_errorpipe[1], &errno, sizeof(errno));
+		writeExecError(errno);
 		_exit(errno);
 	}
 }
@@ -8126,9 +8168,24 @@ int DaemonCore::Create_Process(
 			// close the write end of our error pipe
 		close(errorpipe[1]);
 
+			// read the tracking gid from the child.
+		gid_t child_tracking_gid = 0;
+		int tracking_gid_rc = full_read(errorpipe[0], &child_tracking_gid, sizeof(gid_t));
+		if( tracking_gid_rc != sizeof(gid_t)) {
+			dprintf(D_ALWAYS,"Error: Create_Process(%s): failed to read child tracking gid: rc=%d, gid=%d, errno=%d %s.\n",
+					executable,tracking_gid_rc,child_tracking_gid,errno,strerror(errno));
+
+			if( family_info && family_info->group_ptr ) {
+				EXCEPT("Create_Process() failed to read required child tracking gid");
+			}
+		}
+		if( family_info && family_info->group_ptr ) {
+			*(family_info->group_ptr) = child_tracking_gid;
+		}
+
 			// check our error pipe for any problems before the exec
 		int child_errno = 0;
-		if (read(errorpipe[0], &child_errno, sizeof(int)) == sizeof(int)) {
+		if (full_read(errorpipe[0], &child_errno, sizeof(int)) == sizeof(int)) {
 				// If we were able to read the errno from the
 				// errorpipe before it was closed, then we know the
 				// error happened before the exec.  We need to reap
