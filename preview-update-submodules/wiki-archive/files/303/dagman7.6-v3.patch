diff -rNup grid.orig/src/condor_includes/condor_attributes.h grid/src/condor_includes/condor_attributes.h
--- grid.orig/src/condor_includes/condor_attributes.h	2011-03-29 08:57:04.000000000 -0400
+++ grid/src/condor_includes/condor_attributes.h	2011-03-29 09:02:03.000000000 -0400
@@ -286,6 +286,10 @@ extern const char * const  ATTR_JOB_OUTP
 extern const char * const  ATTR_JOB_OUTPUT_ORIG;
 extern const char * const  ATTR_JOB_OUTPUT_SIZE;
 extern const char * const  ATTR_JOB_PID;
+extern const char * const  ATTR_PRE_JOB_PRIO1;
+extern const char * const  ATTR_PRE_JOB_PRIO2;
+extern const char * const  ATTR_POST_JOB_PRIO1;
+extern const char * const  ATTR_POST_JOB_PRIO2;
 extern const char * const  ATTR_JOB_PRIO;
 extern const char * const  ATTR_JOB_COMMITTED_TIME;
 extern const char * const  ATTR_JOB_LANGUAGE;
diff -rNup grid.orig/src/condor_schedd.V6/dedicated_scheduler.cpp grid/src/condor_schedd.V6/dedicated_scheduler.cpp
--- grid.orig/src/condor_schedd.V6/dedicated_scheduler.cpp	2011-03-29 08:57:03.000000000 -0400
+++ grid/src/condor_schedd.V6/dedicated_scheduler.cpp	2011-03-29 10:29:58.000000000 -0400
@@ -4247,27 +4247,71 @@ clusterSortByPrioAndDate( const void *pt
 {
 	int cluster1 = *((const int*)ptr1);
 	int cluster2 = *((const int*)ptr2);
-	int qdate1, qdate2;
-
-	int prio1, prio2;
-
-	if( (GetAttributeInt(cluster1, 0, ATTR_Q_DATE, &qdate1) < 0) || 
-		(GetAttributeInt(cluster2, 0, ATTR_Q_DATE, &qdate2) < 0) ||
-		(GetAttributeInt(cluster1, 0, ATTR_JOB_PRIO, &prio1) < 0) ||
-		(GetAttributeInt(cluster2, 0, ATTR_JOB_PRIO, &prio2) < 0)) {
+	int c1_qdate, c2_qdate;	
+	int c1_prio, c1_preprio1, c1_preprio2, c1_postprio1, c1_postprio2=0;	
+	int c2_prio, c2_preprio1, c2_preprio2, c2_postprio1, c2_postprio2=0;
+
+	if ((GetAttributeInt(cluster1, 0, ATTR_Q_DATE, &c1_qdate) < 0) || 
+	        (GetAttributeInt(cluster2, 0, ATTR_Q_DATE, &c2_qdate) < 0) ||
+	        (GetAttributeInt(cluster1, 0, ATTR_JOB_PRIO, &c1_prio) < 0) ||
+	        (GetAttributeInt(cluster2, 0, ATTR_JOB_PRIO, &c2_prio) < 0)) {
 		
 		return -1;
 	}
+	
+        if (GetAttributeInt(cluster1, 0, ATTR_PRE_JOB_PRIO1, &c1_preprio1) > -1 &&
+	       GetAttributeInt(cluster2, 0, ATTR_PRE_JOB_PRIO1, &c2_preprio1) > -1 ){
+	     if (c1_preprio1 < c2_preprio1) {
+		return 1;
+	     }
+
+	     if (c1_preprio1 > c2_preprio1) {
+		return -1;
+	     }
+        }
+	
+	if (GetAttributeInt(cluster1, 0, ATTR_PRE_JOB_PRIO2, &c1_preprio2) > -1 &&
+	       GetAttributeInt(cluster2, 0, ATTR_PRE_JOB_PRIO2, &c2_preprio2) > -1 ) {
+	     if (c1_preprio2 < c2_preprio2) {
+		return 1;
+	     }
 
-	if (prio1 < prio2) {
+	     if (c1_preprio2 > c2_preprio2) {
+		return -1;
+	     }
+        }
+	
+	if (c1_prio < c2_prio) {
 		return 1;
 	}
 
-	if (prio1 > prio2) {
+	if (c1_prio > c2_prio) {
 		return -1;
 	}
+	
+        if (GetAttributeInt(cluster1, 0, ATTR_POST_JOB_PRIO1, &c1_postprio1) > -1 &&
+	       GetAttributeInt(cluster2, 0, ATTR_POST_JOB_PRIO1, &c2_postprio1) > -1 ) { 
+	     if (c1_postprio1 < c2_postprio1) {
+		return 1;
+	     }
+
+	     if (c1_postprio1 > c2_postprio1) {
+		return -1;
+	     }
+        }
+	
+	if (GetAttributeInt(cluster1, 0, ATTR_POST_JOB_PRIO2, &c1_postprio2) > -1 &&
+	       GetAttributeInt(cluster2, 0, ATTR_POST_JOB_PRIO2, &c2_postprio2) > -1 ) {
+	     if (c1_postprio2 < c2_postprio2) {
+		return 1;
+	     }
 
-	return (qdate1 - qdate2);
+	     if (c1_postprio2 > c2_postprio2) {
+		return -1;
+	     }
+        }
+	
+	return (c1_qdate - c2_qdate);
 }
 
 
diff -rNup grid.orig/src/condor_schedd.V6/prio_rec.h grid/src/condor_schedd.V6/prio_rec.h
--- grid.orig/src/condor_schedd.V6/prio_rec.h	2011-03-29 08:57:03.000000000 -0400
+++ grid/src/condor_schedd.V6/prio_rec.h	2011-03-29 09:02:47.000000000 -0400
@@ -34,6 +34,10 @@ const 	int		INITIAL_MAX_PRIO_REC = 2048;
 class prio_rec {
 public:
     PROC_ID     id;
+    int         pre_job_prio1;
+    int         pre_job_prio2;
+    int         post_job_prio1;
+    int         post_job_prio2;
     int         job_prio;
     int         status;
     int         qdate;
diff -rNup grid.orig/src/condor_schedd.V6/qmgmt.cpp grid/src/condor_schedd.V6/qmgmt.cpp
--- grid.orig/src/condor_schedd.V6/qmgmt.cpp	2011-03-29 08:57:03.000000000 -0400
+++ grid/src/condor_schedd.V6/qmgmt.cpp	2011-03-29 10:28:49.000000000 -0400
@@ -4080,16 +4080,20 @@ PrintQ()
 // seperate. 
 int get_job_prio(ClassAd *job)
 {
-    int job_prio;
-    int job_status;
+    int     job_prio, 
+            pre_job_prio1, 
+            pre_job_prio2, 
+            post_job_prio1, 
+            post_job_prio2;
+    int     job_status;
     PROC_ID id;
     int     q_date;
     char    buf[100];
-	char	owner[100];
+    char    owner[100];
     int     cur_hosts;
     int     max_hosts;
-	int 	niceUser;
-	int		universe;
+    int     niceUser;
+    int     universe;
 
 	ASSERT(job);
 
@@ -4125,9 +4129,24 @@ int get_job_prio(ClassAd *job)
         return cur_hosts;
 	}
 
-
 	// --- Insert this job into the PrioRec array ---
-
+     	
+       // If pre/post prios are not defined as forced attributes, set them to INT_MIN
+	// to flag priocompare routine to not use them.
+	 
+    if (!job->LookupInteger(ATTR_PRE_JOB_PRIO1, pre_job_prio1)) {
+         pre_job_prio1 = INT_MIN;
+    }
+    if (!job->LookupInteger(ATTR_PRE_JOB_PRIO2, pre_job_prio2)) {
+         pre_job_prio2 = INT_MIN;
+    } 
+    if (!job->LookupInteger(ATTR_POST_JOB_PRIO1, post_job_prio1)) {
+         post_job_prio1 = INT_MIN;
+    }	 
+    if (!job->LookupInteger(ATTR_POST_JOB_PRIO2, post_job_prio2)) {
+         post_job_prio2 = INT_MIN;
+    }
+		   
     job->LookupInteger(ATTR_JOB_PRIO, job_prio);
     job->LookupInteger(ATTR_Q_DATE, q_date);
 	if( job->LookupInteger( ATTR_NICE_USER, niceUser ) && niceUser ) {
@@ -4151,11 +4170,15 @@ int get_job_prio(ClassAd *job)
     // Rather look at if it has all the hosts that it wanted.
     if (cur_hosts>=max_hosts || job_status==HELD)
         return cur_hosts;
-
-    PrioRec[N_PrioRecs].id       = id;
-    PrioRec[N_PrioRecs].job_prio = job_prio;
-    PrioRec[N_PrioRecs].status   = job_status;
-    PrioRec[N_PrioRecs].qdate    = q_date;
+	     
+    PrioRec[N_PrioRecs].id             = id;
+    PrioRec[N_PrioRecs].job_prio       = job_prio;
+    PrioRec[N_PrioRecs].pre_job_prio1  = pre_job_prio1;
+    PrioRec[N_PrioRecs].pre_job_prio2  = pre_job_prio2;
+    PrioRec[N_PrioRecs].post_job_prio1 = post_job_prio1;
+    PrioRec[N_PrioRecs].post_job_prio2 = post_job_prio2;
+    PrioRec[N_PrioRecs].status         = job_status;
+    PrioRec[N_PrioRecs].qdate          = q_date;
 	if ( auto_id == -1 ) {
 		PrioRec[N_PrioRecs].auto_cluster_id = id.cluster;
 	} else {
diff -rNup grid.orig/src/condor_schedd.V6/schedd.cpp grid/src/condor_schedd.V6/schedd.cpp
--- grid.orig/src/condor_schedd.V6/schedd.cpp	2011-03-29 08:57:03.000000000 -0400
+++ grid/src/condor_schedd.V6/schedd.cpp	2011-03-29 10:31:18.000000000 -0400
@@ -10577,6 +10577,26 @@ extern "C" {
 int
 prio_compar(prio_rec* a, prio_rec* b)
 {
+	 /* compare submitted job preprio's: higher values have more priority */
+	 /* Typically used to prioritize entire DAG jobs over other DAG jobs */
+	 if (a->pre_job_prio1 > INT_MIN && b->pre_job_prio1 > INT_MIN ) { 
+	      if( a->pre_job_prio1 < b->pre_job_prio1 ) {
+		  return 1;
+              }
+	      if( a->pre_job_prio1 > b->pre_job_prio1 ) {
+		  return -1;
+	      }
+	 }
+		 
+	 if( a->pre_job_prio2 > INT_MIN && b->pre_job_prio2 > INT_MIN ) {
+	      if( a->pre_job_prio2 < b->pre_job_prio2 ) {
+		  return 1;
+	      }
+	      if( a->pre_job_prio2 > b->pre_job_prio2 ) {
+		  return -1;
+	      }
+	 }
+	 
 	 /* compare job priorities: higher values have more priority */
 	 if( a->job_prio < b->job_prio ) {
 		  return 1;
@@ -10584,7 +10604,27 @@ prio_compar(prio_rec* a, prio_rec* b)
 	 if( a->job_prio > b->job_prio ) {
 		  return -1;
 	 }
-
+	 
+	 /* compare submitted job postprio's: higher values have more priority */
+	 /* Typically used to prioritize entire DAG jobs over other DAG jobs */
+	 if( a->post_job_prio1 > INT_MIN && b->post_job_prio1 > INT_MIN ) {
+	      if( a->post_job_prio1 < b->post_job_prio1 ) {
+		  return 1;
+	      }
+	      if( a->post_job_prio1 > b->post_job_prio1 ) {
+		  return -1;
+	      }
+	 }
+	 
+	 if( a->post_job_prio2 > INT_MIN && b->post_job_prio2 > INT_MIN ) {
+	      if( a->post_job_prio2 < b->post_job_prio2 ) {
+		  return 1;
+	      }
+	      if( a->post_job_prio2 > b->post_job_prio2 ) {
+		  return -1;
+	      }
+	 }
+	      
 	 /* here,updown priority and job_priority are both equal */
 
 	 /* check for job submit times */
diff -rNup grid.orig/src/condor_utils/condor_attributes.cpp grid/src/condor_utils/condor_attributes.cpp
--- grid.orig/src/condor_utils/condor_attributes.cpp	2011-03-29 08:57:04.000000000 -0400
+++ grid/src/condor_utils/condor_attributes.cpp	2011-03-29 09:01:11.000000000 -0400
@@ -346,6 +346,10 @@ const char * const ATTR_JOB_OUTPUT				 =
 const char * const ATTR_JOB_OUTPUT_ORIG			 = "OutOrig";
 const char * const ATTR_JOB_OUTPUT_SIZE			 = "OutSize";
 const char * const ATTR_JOB_PID                  = "JobPid";
+const char * const ATTR_PRE_JOB_PRIO1            = "PreJobPrio1";
+const char * const ATTR_PRE_JOB_PRIO2            = "PreJobPrio2";
+const char * const ATTR_POST_JOB_PRIO1           = "PostJobPrio1";
+const char * const ATTR_POST_JOB_PRIO2           = "PostJobPrio2";
 const char * const ATTR_JOB_PRIO                 = "JobPrio";
 const char * const ATTR_JOB_COMMITTED_TIME		 = "CommittedTime";
 const char * const ATTR_JOB_LANGUAGE             = "JobLanguage";
