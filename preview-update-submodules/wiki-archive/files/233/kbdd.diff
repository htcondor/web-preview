diff --git a/src/condor_kbdd/kbdd.cpp b/src/condor_kbdd/kbdd.cpp
index 48f789b..843aa40 100644
--- a/src/condor_kbdd/kbdd.cpp
+++ b/src/condor_kbdd/kbdd.cpp
@@ -45,7 +45,9 @@ XInterface *xinter = NULL;
 #endif
 
 DECL_SUBSYSTEM( "KBDD", SUBSYSTEM_TYPE_DAEMON );
-
+#ifdef WIN32
+static void hack_kbdd_registry();
+#endif
 bool
 update_startd()
 {
@@ -243,11 +245,101 @@ int WINAPI WinMain( __in HINSTANCE hInstance, __in_opt HINSTANCE hPrevInstance,
 	LocalFree((HLOCAL)cmdLine);
 	LocalFree((HLOCAL)cmdArgs);
 
+	hack_kbdd_registry();
 	//nArgs includes the first argument, the program name, in the count.
 	dc_main(nArgs, parameters);
 
 	// dc_main should exit() so we probably never get here.
 	return 0;
 }
+
+static void hack_kbdd_registry()
+{
+	HKEY hStart;
+
+	BOOL isService = FALSE;
+	SID_IDENTIFIER_AUTHORITY ntAuthority = SECURITY_NT_AUTHORITY;
+	PSID ServiceGroup;
+	isService = AllocateAndInitializeSid(
+		&ntAuthority,
+		1,
+		SECURITY_LOCAL_SYSTEM_RID,
+		0,0,0,0,0,0,0,
+		&ServiceGroup);
+	if(isService)
+	{
+		if(!CheckTokenMembership(NULL, ServiceGroup, &isService))
+		{
+			dprintf(D_ALWAYS, "Failed to check token membership.\n");
+			isService = FALSE;
+		}
+
+		FreeSid(ServiceGroup);
+	}
+
+	if(isService)
+	{
+		LONG regResult = RegOpenKeyEx(
+			HKEY_LOCAL_MACHINE,
+			"Software\\Microsoft\\Windows\\CurrentVersion\\Run",
+			0,
+			KEY_READ,
+			&hStart);
+
+		if(regResult != ERROR_SUCCESS)
+		{
+			dprintf(D_ALWAYS, "ERROR: Failed to open registry for checking: %d\n", regResult);
+		}
+		else
+		{
+			regResult = RegQueryValueEx(
+				hStart,
+				"CONDOR_KBDD",
+				NULL,
+				NULL,
+				NULL,
+				NULL);
+
+			RegCloseKey(hStart);
+			if(regResult == ERROR_FILE_NOT_FOUND)
+			{
+				regResult = RegOpenKeyEx(
+					HKEY_LOCAL_MACHINE,
+					"Software\\Microsoft\\Windows\\CurrentVersion\\Run",
+					0,
+					KEY_SET_VALUE,
+					&hStart);
+
+				if(regResult != ERROR_SUCCESS)
+				{
+					dprintf(D_DAEMONCORE, "Error: Failed to open login startup registry key for writing: %d\n", regResult);
+					return;
+				}
+				else
+				{
+					char* kbddPath = (char*)malloc(sizeof(char)*(MAX_PATH+1));
+					if(!kbddPath)
+					{
+						dprintf(D_ALWAYS, "Error: Unable to find path to KBDD executable.\n");
+						return;
+					}
+					int pathSize = GetModuleFileName(NULL, kbddPath, MAX_PATH);
+					if(pathSize < MAX_PATH)
+					{
+						regResult = RegSetValueEx(hStart,
+							"CONDOR_KBDD",
+							0,
+							REG_SZ,
+							(byte*)kbddPath,
+							(pathSize + 1)*sizeof(char));
+					}
+					free(kbddPath);
+
+					RegCloseKey(hStart);
+				}
+			} //if(regResult == ERROR_FILE_NOT_FOUND)
+		} //if(regResult != ERROR_SUCCESS)
+	} //if(isService)
+}
 #endif
 
