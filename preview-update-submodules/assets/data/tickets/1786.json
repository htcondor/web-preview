{"id": 1786, "title": "Ticket #1786: review treatment of undefined policy settings in startd", "description": "<blockquote>\nMiron suggested that we review the treatment of undefined policy expressions, starting with the startd.  I have summarized below the current treatment as of 7.5.4.\n\n<p>Meaning of the columns in the following table:\n\n</p><p></p><ul>\n<li><strong>Unconfigured</strong> treatment when not specified in configuration\n</li><li><strong>Undefined</strong> treatment when expression evaluates to undefined\n</li><li><strong>Error</strong> treatment when expression evaluates to error\n</li></ul>\n\n<p>Meaning of the values in the following table:\n</p><ul>\n<li><em>(S)</em> silent treatment; no log message\n</li><li><em>Ignore</em> use more generic policy variable in place of this one\n</li><li><em>Error</em> shut down the startd and log the reason why\n</li></ul>\n\n<p><table border=\"1\" cellspacing=\"0\">\n<tbody><tr>\n<td>\n<strong>Variable</strong>   </td>\n<td>\n<strong>Unconfigured</strong></td>\n<td>\n <strong>Undefined</strong></td>\n<td>\n<strong>Error</strong></td>\n</tr>\n\n<tr>\n<td>\nSTART        </td>\n<td>\n Error        </td>\n<td>\n False (S)  </td>\n<td>\n False (S) </td>\n</tr>\n\n<tr>\n<td>\nPREEMPT      </td>\n<td>\n Error        </td>\n<td>\n Error      </td>\n<td>\n Error </td>\n</tr>\n\n<tr>\n<td>\nSUSPEND      </td>\n<td>\n Error        </td>\n<td>\n Error      </td>\n<td>\n Error </td>\n</tr>\n\n<tr>\n<td>\nCONTINUE     </td>\n<td>\n Error        </td>\n<td>\n Error      </td>\n<td>\n Error </td>\n</tr>\n\n<tr>\n<td>\nWANT_HOLD    </td>\n<td>\n False (S)    </td>\n<td>\n False      </td>\n<td>\n Error </td>\n</tr>\n\n<tr>\n<td>\nWANT_SUSPEND </td>\n<td>\n Error        </td>\n<td>\n False (S)  </td>\n<td>\n False (S) </td>\n</tr>\n\n<tr>\n<td>\nWANT_VACATE  </td>\n<td>\n Error        </td>\n<td>\n Error      </td>\n<td>\n Error </td>\n</tr>\n\n<tr>\n<td>\nKILL         </td>\n<td>\n Error        </td>\n<td>\n Error      </td>\n<td>\n Error </td>\n</tr>\n\n<tr>\n<td>\nPERIODIC_CHECKPOINT  </td>\n<td>\n False (S)  </td>\n<td>\n False (S)  </td>\n<td>\n False (S)  </td>\n</tr>\n\n<tr>\n<td>\nPREEMPT_VANILLA      </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n</tr>\n\n<tr>\n<td>\nSUSPEND_VANILLA      </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n</tr>\n\n<tr>\n<td>\nCONTINUE_VANILLA     </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n</tr>\n\n<tr>\n<td>\nWANT_SUSPEND_VANILLA </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n</tr>\n\n<tr>\n<td>\nWANT_VACATE_VANILLA  </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n</tr>\n\n<tr>\n<td>\nKILL_VANILLA         </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n<td>\n Ignore (S) </td>\n</tr>\n\n</tbody></table>\n</p><p>Prior to 7.4.2, if WANT_SUSPEND evaluated to undefined, this was treated as an error.  This was changed to be treated as false because numerous instances occurred in which admins were surprised to have their startd exit when a job showed up lacking some attribute the WANT_SUSPEND expression referenced.  In discussion, it was concluded that in every known case of this problem, the desired behavior was for WANT_SUSPEND to be treated as false, so a change was made to the code to implement this behavior (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=1001\" onclick=\"get_ticket_and_populate_wrapper('1001'); return false;\" title=\"Default WANT_SUSPEND policy goes UNDEFINED, startd EXCEPTs\">#1001</a></span>).\n\n</p><p><span class=\"section\"></span></p><h2>Proposal </h2>\n\n<p>Treat 'unconfigured' and 'undefined' and 'error' as semantically equivalent.  For all the cases mentioned in the table above where 'undefined' leads to an error, it should instead be equivalent to 'false'.  We should, however, provide useful diagnostics.  For example, it should not log that SUSPEND is false when it is actually 'undefined' or 'error'.</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Nov-30 23:41:49 by matt:</em> <br/>\n\nThe proposal sounds good, but what about making CONTINUE default to True? Also, please make a policy object to create a central place where code managing these parameters can be documented and handled consistently.\n\n<p></p><hr/>\n<em>2010-Dec-01 17:08:01 by danb:</em> <br/>\n\nI notice that the &lt;x&gt;_VANILLA knobs are barely documented.  I propose that we phase them out (warning in 7.5, remove in 7.7).  We can ask the users first to see if anybody cares.  I would be surprised if anybody does.  In my opinion, they just make things more complicated, and it's not clear why knobs exist for just the vanilla universe.  I see half-implemented support for similar VM universe knobs.\n<hr/>\n<em>2011-Jan-27 14:50:47 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 16:20:02 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2011-Feb-01 16:21", "status": "new", "created": "2010-Nov-29 18:20", "fixed_version": "2010-Nov-29 18:20", "broken_version": "v070504", "priority": "4", "subsystem": "Daemons", "assigned_to": "", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "other", "visibility": "public", "notify": "dan@hep.wisc.edu, miron@cs.wisc.edu, tannenba@cs.wisc.edu, matt@cs.wisc.edu", "due_date": ""}