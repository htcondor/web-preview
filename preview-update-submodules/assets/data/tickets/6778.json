{"id": 6778, "title": "Ticket #6778: RANK based preemption not working with ALLOW_PSLOT_PREEMPTION", "description": "<blockquote>\nI am trying to enable <code>RANK</code> preemption to allow jobs with a specific classad to take over the cluster more or less immediately and run forever. This tag is restricted using <code>JOB_TRANSFORM</code> and <code>PROTECTED_JOB_ATTRS</code> which are great and easy-to-use features.\n\n<p>On my central manager <code>condor_config_val NEGOTIATOR_CONSIDER_PREEMPTION</code> reports <code>true</code>. I explicitly set\n</p><div class=\"verbatim\">\n<pre>ALLOW_PSLOT_PREEMPTION = True\n</pre></div>\n\n\n<p>and run <code>condor_reconfig</code> (I've also restarted to be really sure during testing).\n\n</p><p>My standard execute node policy is:\n\n</p><p></p><div class=\"verbatim\">\n<pre>use POLICY:Always_Run_Jobs\nuse POLICY:Limit_Job_Runtimes($(DAY))\n\nMaxJobRetirementTime = ifThenElse(online_cbc_gstlal_inspiral =?= True, 100000000, $(MaxJobRetirementTime))\n</pre></div>\n\n\n<p>The idea is that most jobs get killed after a day and these special jobs (which stream data live from the LIGO instruments) are allowed to run \"forever.\" I want to extend this policy to also allow the jobs to take over the cluster rapidly, with the underlying reason being that we want to be able to failover from one analysis data center to another when, e.g., there's an earthquake in CA that takes Caltech (LIGO HQ) down but doesn't affect the instruments themselves in LA/WA. Because <code>ALLOW_PSLOT_PREEMPTION</code> does not respect <code>NEGOTIATOR_CONSIDER_EARLY_PREEMPTION</code>, I have to modify the policy above by hand:\n\n</p><p></p><div class=\"verbatim\">\n<pre>use POLICY:Always_Run_Jobs\n\nMaxJobRetirementTime = ifThenElse(online_cbc_gstlal_inspiral =?= True, 100000000, 0)\nPREEMPT = (JobState == \"Running\") &amp;&amp; ((time() - JobCurrentStartDate) &gt; $(DAY))\nRANK = (rank_foo =?= True) * 10\n</pre></div>\n\n\n<p>Basically, I want the behavior of \"kill jobs after a day unless online_cbc_gstlal_inspiral is set\" while enabling <code>RANK</code> preemption. <code>rank_foo</code> will eventually be replaced by <code>online_cbc_gstlal_inspiral</code> but my account can't set <code>online_cbc_gstlal_inspiral</code>.\n\n</p><p>Am I missing something? The manual and your presentations are all fairly clear that <code>RANK</code> preemption should work with partitionable slots.</p></blockquote>", "remarks": "<blockquote>\n<em>2018-Sep-21 13:21:27 by tpdownes:</em> <br/>\n\nSince it's likely to come up, here's my START expression:\n\n<p></p><div class=\"verbatim\">\n<pre>STARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) FACTER\nSTARTD_CRON_FACTER_EXECUTABLE = /usr/local/bin/facter_classad\nSTARTD_CRON_FACTER_PREFIX = facter_\nSTARTD_CRON_FACTER_PERIOD = 300\n\nSTARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) CPUINFO\nSTARTD_CRON_CPUINFO_EXECUTABLE = /usr/local/bin/cpuinfo_classad\nSTARTD_CRON_CPUINFO_PREFIX = cpuinfo_\nSTARTD_CRON_CPUINFO_PERIOD = 300\n\nSTARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) NUMAD\nSTARTD_CRON_NUMAD_EXECUTABLE = /usr/local/bin/service_check_classad\nSTARTD_CRON_NUMAD_ARGS = numad\nSTARTD_CRON_NUMAD_PREFIX = NUMAD_\nSTARTD_CRON_NUMAD_PERIOD = 300\n\nSTARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) ICC\nSTARTD_CRON_ICC_EXECUTABLE = /usr/lib/nagios/plugins/check_icc_version\nSTARTD_CRON_ICC_ARGS = --classad\nSTARTD_CRON_ICC_PERIOD = 300\n\nSTARTD_CRON_JOBLIST = $(STARTD_CRON_JOBLIST) DATA\nSTARTD_CRON_DATA_EXECUTABLE = /usr/lib/nagios/plugins/check_instrument_data\nSTARTD_CRON_DATA_ARGS = --classad\nSTARTD_CRON_DATA_MODE = WaitForExit\nSTARTD_CRON_DATA_PERIOD = 90\n\nCROND_REQUIREMENTS = ( \\\n  ifThenElse(isUndefined(INSTRUMENT_DATA_OK), False, INSTRUMENT_DATA_OK) &amp;&amp; \\\n  ifThenElse(isUndefined(ICC_OK), False, ICC_OK))\n\n# from https://htcondor-wiki.cs.wisc.edu/index.cgi/wiki?p=HowToMatchMulticoreAfterDrain\n\n# Set OnlyMulticoreInterval to the number of seconds the startd should\n# only allow multi-core jobs. Default to about 2 negotiation cycles.\nOnlyMulticoreInterval = 2*$(NEGOTIATOR_INTERVAL:300)\n\n# If slot has 2+ cores free, insist on jobs that request 2+ cores\nIsMulticore = RequestCpus &gt;= IfThenElse(Cpus &lt; 2, 1, 2)\n\n# We only want this policy to apply to partitionable slots (pslots)\nIsntUnmatchedPSlot = PartitionableSlot=!=true || State==\"Matched\"\n\nOnlyMulticoreJobsAfterDrain = $(IsntUnmatchedPSlot) || $(IsMulticore) || $(StateTimer) &gt; $(OnlyMulticoreInterval)\n\nSTART = $(START) &amp;&amp; ( $(OnlyMulticoreJobsAfterDrain) ) &amp;&amp; ( $(CROND_REQUIREMENTS) )\n</pre></div>\n\n\n<p></p><hr/>\n<em>2018-Sep-21 13:27:46 by tpdownes:</em> <br/>\n\nP.S. Someday I'd like to convert the <code>isUndefined</code> to use the default values notation which you introduced in one of the last few releases.  Also very cool!\n\n<p></p><hr/>\n<em>2019-Apr-10 15:57:53 by pfc:</em> <br/>\n\nIt would be nice to have RANK-based preeemption working, but for now Tom's Bologna Batch System-style kludge is sufficient: he has configured all of NEMO with a second slot that only accepts jobs with particular tags. Once that second slot is at all occupied, the first slot PREEMPTs.\n\n<p>As a result, I'm demoting this to priority 4 until/unless the workaround becomes insufficient.\n\n</p><p></p><hr/>\n<em>2019-Apr-24 14:11:11 by pfc:</em> <br/>\n\nAs today's Condor-LIGO call:\n1) Stuart asked for a more limited fix for dslots that just need more memory which is currently available in the pslot pool (or can return memory to the pool) due to a new job to do so -- without merging dslots.\n2) Greg asked for one more week to think about this before we defer the harder more general issue unless/until LIGO is ready to say it's a big enough deal wit justify the massive Condor devel effort.\n\n<p></p><hr/>\n<em>2019-Aug-14 13:20:33 by gthain:</em> <br/>\n\nLet's do <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=7040\" onclick=\"get_ticket_and_populate_wrapper('7040'); return false;\" title=\"Allow preemption of one dslot using additional resources from pslot\">#7040</a></span> instead.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "incident", "last_change": "2019-Aug-14 13:20", "status": "abandoned", "created": "2018-Sep-21 13:16", "fixed_version": "2018-Sep-21 13:16", "broken_version": "v080709", "priority": "4", "subsystem": "DaemonsCM", "assigned_to": "gthain", "derived_from": "", "creator": "tpdownes", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "gthain@cs.wisc.edu downes@uwm.edu willsk@bnl.gov tannenba@cs.wisc.edu,pcouvare@caltech.edu", "due_date": ""}