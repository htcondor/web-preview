{"id": 6506, "title": "Ticket #6506: NETWORK_INTERFACE=127.0.0.1 on Windows causes collector to crash ...?", "description": "<blockquote>\nToddT reports that setting <code>NETWORK_INTERFACE</code> to 127.0.0.1 on his personal condor on Windows is causing his collector to crash when it sends an update the world collector.  It blows an assert in <code>condor_sockaddr::from_ip_str()</code>, called from <code>ConvertDefaultIpToSocketIp()</code> (the address-rewriting code) with the return of <code>s.my_ip_str()</code>.  <code>s</code> is UDP, which is the default for updating the world collector, and <code>s._who</code> is the IPv4 address of the world collector.  However, <code>s.my_ip_str()</code> returns NULL and leaves a message in the log claiming that this is because it the address was unreachable (10051).\n\n<p>(1) ToddT will avoid the assert by checking to see if <code>s.my_ip_str()</code> returns NULL and bailing before calling <code>condor_sockaddr::from_ip_str()</code> if so.\n\n</p><p>(2) (design) We should reconsider the wisdom of the assertion in question: should we instead check if all callers check the return value, and if they do, return false if the parameter is  NULL instead of blowing an assert?\n\n</p><p>(3) (optimization) <code>ConvertDefaultIpToSocketIp()</code> only does anything aside from write log messages if the undocumented knob SHARED_PORT_ADDRESS_REWRITING is set.  We should find out if that can be removed (see tickets <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=4848\" onclick=\"get_ticket_and_populate_wrapper('4848'); return false;\" title=\"Address rewriting only considers first command socket\">#4848</a></span> and <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=4849\" onclick=\"get_ticket_and_populate_wrapper('4849'); return false;\" title=\"Rewrite all ads leaving collector on single-node pool\">#4849</a></span>).  Otherwise, we can certainly optimize the function by checking for it first, and for the various debug flags if we decide to keep caring about them.\n\n</p><p>(4) (bug) <code>ConvertDefaultIpToSocketIp()</code> <em>should</em> have been bailing out because <code>network_interface_to_ip()</code> should be setting <code>enable_convert_default_IP_to_socket_IP</code> to false if the <code>NETWORK_INTERFACE</code> only matches one interface, and no machine should have interfaces with the same address.\n\n</p><p>(5) (we were confused) Why does <code>connect()</code> think the address is unreachable?  We looked (briefly) and didn't find where we bound UDP (or TCP) sockets to the <code>NETWORK_INTERFACE</code> when binding w/o an address or on a connect.</p></blockquote>", "remarks": "<blockquote>\n<em>2017-Dec-12 18:29 by tlmiller:</em> <br/>\n\n(4)  Oh, hey, look at that.  If <code>condor_sockaddr::from_ip_string()</code> works on NETWORK_INTERFACE, we don't unset <code>enable_convert_default_IP_to_socket_IP</code>.  We should maybe fix that.\n\n<p></p><hr/>\n<em>2017-Dec-12 18:39:24 by tlmiller:</em> <br/>\n\n(5) In <code>Sock::bindWithin()</code>, if <code>bind_all</code> isn't set, then we call <code>get_local_ipaddr(proto)</code>, which will return the NETWORK_INTERFACE if it's of the right protocol, that is, 127.0.0.1; this is the address we later pass to <code>condor_bind()</code>.  Either <code>Sock::bindWithin()</code> is called from <code>Sock::bind()</code> or <code>Sock::bind()</code> calls if the port is dynamic, which it was in the debugger, and we're not binding to all interfaces, which we weren't.\n\n<p></p><hr/>\n<em>2017-Dec-13 12:49:31 by tlmiller:</em> <br/>\n\n(1) <span class=\"ticket\"><a class=\"abandoned\" href=\"/wiki-archive/tickets/?ticket=6507\" onclick=\"get_ticket_and_populate_wrapper('6507'); return false;\" title=\"Don't pass NULL to from_ip_string() in ConvertDefaultIpToSocketIP()...\">#6507</a></span>\n\n<p>(2) <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=6510\" onclick=\"get_ticket_and_populate_wrapper('6510'); return false;\" title=\"Should condor_sockaddr() assert if from_ip_string() is passed a NULL?\">#6510</a></span>\n\n</p><p>(3) <span class=\"ticket\"><a class=\"abandoned\" href=\"/wiki-archive/tickets/?ticket=6509\" onclick=\"get_ticket_and_populate_wrapper('6509'); return false;\" title=\"ConvertDefaultIpToSocketIp() is slower than it needs to be\">#6509</a></span>\n\n</p><p>(4) <span class=\"ticket\"><a class=\"abandoned\" href=\"/wiki-archive/tickets/?ticket=6508\" onclick=\"get_ticket_and_populate_wrapper('6508'); return false;\" title=\"from_ip_string() doesn't unset enable_convert_default_IP_to_socket_IP\">#6508</a></span>\n\n</p><p></p><hr/>\n<em>2017-Dec-13 12:50:49 by tlmiller:</em> <br/>\n\nResolving on the basis that all of the incident's components have their own tickets now, of which we only really care about one.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/wiki-archive/tickets/?ticket=6507\" onclick=\"get_ticket_and_populate_wrapper('6507'); return false;\" title=\"Don't pass NULL to from_ip_string() in ConvertDefaultIpToSocketIP()...\">#6507</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDon't pass NULL to from_ip_string() in ConvertDefaultIpToSocketIP()...</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/wiki-archive/tickets/?ticket=6508\" onclick=\"get_ticket_and_populate_wrapper('6508'); return false;\" title=\"from_ip_string() doesn't unset enable_convert_default_IP_to_socket_IP\">#6508</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nfrom_ip_string() doesn't unset enable_convert_default_IP_to_socket_IP</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "incident", "last_change": "2017-Dec-13 12:50", "status": "resolved", "created": "2017-Dec-12 18:28", "fixed_version": "2017-Dec-12 18:28", "broken_version": "", "priority": "4", "subsystem": "Libs", "assigned_to": "", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tannenaba@cs.wisc.edu, tlmiller@cs.wisc.edu", "due_date": ""}