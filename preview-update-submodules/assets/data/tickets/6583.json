{"id": 6583, "title": "Ticket #6583: VM Universe jobs and use policy : hold_if_memory_exceeded", "description": "<blockquote>\nCHTC had a problem with VM universe jobs immediately going on hold when they used the hold-if-memory-exceeded policy.  This was caused by <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6577\" onclick=\"get_ticket_and_populate_wrapper('6577'); return false;\" title=\"Incorrect VM Universe MemoryUsage\">#6577</a></span>, and that change solved the problem.\n\n<p>However, during the investigation, we noticed that the slot ad's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span> was way too small.  This is of potential concern as a reporting issue rather than a policy (because VM universe jobs <em>can't</em> go over JobVMMemory).\n\n</p><p>I eventually determined that the slot running a VM universe job reports the \"default\" <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span>, that is, the size of the starter and all of its children.  This, of course, includes the VM GAHP but not (at least for KVM) the hypervisor.\n\n</p><p>I discussed this with Moate.  We agreed that \"over memory\" is not meaningful for VM universe jobs, and the that hold-if-memory-exceeded policy should therefore ignore VM universe jobs.\n\n</p><p>We agreed that the memory usage reported to the user would ideally be the peak \"memory used\" reported by the hypervisor, in the hopes that some hypervisors in some configurations would actually be able to tell.\n\n</p><p>We agreed that the slot reporting the sum of the starter and VM GAHP sizes as the 'ImageSize' was at best rather deceptive, but that knowing that number would be useful for setting the <code>VM_MEMORY</code> config knob.  Our thought was to either document what the slot's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span> reports, or to change it so the VM universe slots report the same number but in an attribute called 'MemoryOverhead' or something similar.\n\n</p><p>We also agreed based on current sizes, that a good nonzero value for the <code>VM_MEMORY</code> config knob would be detected memory minus reserved memory minus 1 GB per four cores (assuming one-core VMs) or fraction thereof for the overhead.  This should also be documented somewhere.\n\n</p><p>Action items:\n\n</p><p></p><ol>\n<li>The hold-if-memory-exceeded policy should ignore VM universe jobs.\n</li><li>Document the meaning of a slot ad's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span> attribute in the VM universe, or rename it to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MemoryOverhead\" title=\"Memory Overhead\">MemoryOverhead</a></span> (or something similar).\n</li><li>Document our recommendation for the <code>VM_MEMORY</code> config knob (possibly as a metaknob).</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<em>2018-Feb-27 17:35:15 by tlmiller:</em> <br/>\n\nStandard universe jobs suffer from a similar problem.\n\n<p>A standard universe job's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MemoryUsage\" title=\"Memory Usage\">MemoryUsage</a></span> is set by the shadow, some long time after the job starts.  The startd evaluates policy expressions in the context of its (the original) copy of the job and the slot ad.  In the vanilla universe, the starter sends updates for the job ad to the startd, and the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span> attribute is updated.  In the standard universe, the starter does <em>not</em> send updates to the startd, only the shadow.  However, the startd (for all starters) update things like <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span> on its own.  (This is why the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span> for VM universe jobs is so wacky.)  Thus, evaluating '((TARGET.ImageSize + 1023)/1024) &gt; Memory' in the PREEMPT expression will get the correct memory usage (because the standard universe shadow unconditionally set <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MemoryUsage\" title=\"Memory Usage\">MemoryUsage</a></span> to ((<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span> + 1023)/1024).\n\n</p><p>Thus, MEMORY_EXCEEDED should have three clauses: one for VM universe (which means 'always ignore'), one for standard universe with the expression above, and one for everything else (the current value).\n\n</p><p>However, standard universe jobs can't (presently) be put on hold from the startd; they will be evicted instead.  This can be addressed in the START expression if necessary, or perhaps by adding another requirement by default (in condor_submit), that <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ImageSize\" title=\"Image Size\">ImageSize</a></span> &lt; Memory.  Additionally, each schedd can help by adding the equivalent clause to its system_periodic_hold.\n\n</p><p></p><hr/>\n<em>2018-Mar-01 11:56:18 by johnkn:</em> <br/>\n\n<strong>CODE_REVIEW</strong> change looks good.\n\n<p></p><hr/>\n<em>2018-Mar-09 11:18:17 by tim:</em> <br/>\n\n<strong>DOC REVIEW:</strong> Looks good.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-01 10:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a673d623f3f4af251832a22f39e1c8953606f884\">[54399]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6583\" onclick=\"get_ticket_and_populate_wrapper('6583'); return false;\" title=\"VM Universe jobs and use policy : hold_if_memory_exceeded\">#6583</a></span>) Fix typo in HOLD_IF_MEMORY_EXCEEDED policy.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Feb-28 15:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/1ee71755f9388661d999faeb99f50be0a12e72e6\">[54390]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6583\" onclick=\"get_ticket_and_populate_wrapper('6583'); return false;\" title=\"VM Universe jobs and use policy : hold_if_memory_exceeded\">#6583</a></span>) WANT_HOLD_IF() no longer evicts (instead of hold) standard universe jobs; it ignores them, instead. The *_MEMORY_EXCEEDED policy metaknobs now ignore VM universe, since those jobs /can't/ exceed their allocation.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "incident", "last_change": "2018-Mar-09 11:18", "status": "resolved", "created": "2018-Feb-27 12:48", "fixed_version": "2018-Feb-27 12:48", "broken_version": "", "priority": "3", "subsystem": "DaemonsExecNode", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, moate@cs.wisc.edu", "due_date": ""}