{"id": 3261, "title": "Ticket #3261: C++11 changes break UW-style builds with Clang on Mac", "description": "<blockquote>\nThe changes made in <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=3083\" onclick=\"get_ticket_and_populate_wrapper('3083'); return false;\" title=\"Condor compilation support for C++11\">#3083</a></span> to allow C++11 support on Mac OS X using Clang allow things to build in proper mode, but fail when building non-proper (i.e. with externals). The following error is printed when linking condor_schedd:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">Undefined symbols for architecture x86_64:\n  \"std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::widen(char) const\", referenced from:\n      _soap_stream_fault in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::istream::read(char*, long)\", referenced from:\n      _frecv in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::ostream::put(char)\", referenced from:\n      _soap_stream_fault in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::ostream::flush()\", referenced from:\n      _soap_stream_fault in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::ostream::write(char const*, long)\", referenced from:\n      _fsend in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::ostream::operator&lt;&lt;(int)\", referenced from:\n      _soap_stream_fault in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::ios_base::Init::Init()\", referenced from:\n      __GLOBAL__I_a in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::ios_base::Init::~Init()\", referenced from:\n      __GLOBAL__I_a in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear(std::_Ios_Iostate)\", referenced from:\n      _soap_stream_fault in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\n  \"std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*, long)\", referenced from:\n      _soap_stream_fault in libgsoapssl++.a(libgsoapssl___a-stdsoap2_ssl_cpp.o)\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</pre></div>\n\n\n<p>It appears the externals that use C++ code need to be built with some of the same flags introduced in <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=3083\" onclick=\"get_ticket_and_populate_wrapper('3083'); return false;\" title=\"Condor compilation support for C++11\">#3083</a></span>.</p></blockquote>", "remarks": "<blockquote>\n<em>2012-Oct-09 14:44:56 by bbockelm:</em> <br/>\n\nOne partial issue is:\n\n<p></p><div class=\"verbatim\">\n<pre>/usr/bin/clang    -stdlib=libc++ -lc++ -std=c++11  -DPREFER_CPP11   -o CMakeFiles/cmTryCompileExec.dir/src.cxx.o -c /Users/bbockelm/projects/condor-uw-build/CMakeFiles/CMakeTmp/src.cxx\nclang: warning: -lc++: 'linker' input unused when '-c' is present\nclang: error: invalid deployment target for -stdlib=libc++ (requires OS X 10.7 or later)\n</pre></div>\n\n\n<p>I think this was broken by <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=3243\" onclick=\"get_ticket_and_populate_wrapper('3243'); return false;\" title=\"Support running on older versions of Mac OS X\">#3243</a></span>.  It's possible the fix for that ticket (which causes clang to create code compatible with Mac OS X 10.6) is incompatible with building C++11 code..\n\n</p><p></p><hr/>\n<em>2012-Oct-10 08:33:22 by tstclair:</em> <br/>\n\nDoes it fail on other bits too what happens outside of gsoap?\n\n<p></p><hr/>\n<em>2012-Oct-10 08:38:03 by bbockelm:</em> <br/>\n\nIt also fails on boost.  I have a fix for gsoap, but not boost.  I think jefrey figured out the boost issue, but I haven't seen the patch.  I'm waiting for that.\n\n<p></p><hr/>\n<em>2012-Oct-10 15:18:41 by jfrey:</em> <br/>\n\nI was eventually able to build everything non-proper with Clang and C++11 targeting Mac OS X 10.6 compatibility.\n\n<p>I don't have a proper patch to allow boost to build properly; the changes I made are unconditional. But what do you is have this as part of your bjam command:\n</p><div class=\"code\">\n<pre class=\"code\">toolset=clang-darwin \"cxxflags=-std=c++11 -stdlib=libc++\" \"linkflags=-std=c++11 -stdlib=libc++\"\n</pre></div>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/643/gt3261.patch\">gt3261.patch</a>\n3566 bytes added by bbockelm on 2012-Oct-10 20:41:30 UTC.\n<br/>\nThe attached patch fixes gsoap and boost, but hacks in the Mac OS X build target.  Does anyone know how to turn that into a command-line variable?<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-10 17:07</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/88804d1981596fb8a0b9fa4535ae0c1905531c08\">[33649]</a></span>: Fix externals on Mac when using Clang's libc++. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=3261\" onclick=\"get_ticket_and_populate_wrapper('3261'); return false;\" title=\"C++11 changes break UW-style builds with Clang on Mac\">#3261</a></span> To enable the C++11 features in Clang on the Mac, we need to use Clang's libc++ instead of libstdc++. Externals that contain C++ code need to be linked differently in addition to Condor code.  (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2012-Oct-16 13:36", "status": "resolved", "created": "2012-Oct-09 13:56", "fixed_version": "2012-Oct-09 13:56", "broken_version": "v070902", "priority": "4", "subsystem": "Packaging", "assigned_to": "bbockelm", "derived_from": "#3083", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelm@cse.unl.edu, tstclair@redhat.com,jfrey@cs.wisc.edu", "due_date": ""}