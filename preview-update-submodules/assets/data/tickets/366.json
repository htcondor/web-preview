{"id": 366, "title": "Ticket #366: Allow our ckpt tests to run against DMTCP", "description": "<blockquote>\nI really, really, really want to see if DMTCP checkpointing can pass our ckpt tests in our test suite.  Ideally I'd like to know how well it does by/before 4/20/09.\n\n<p>The work on this ticket is being performed on the <strong>V7_5-dmtcp_tests-branch</strong>.\n\n</p><p><span class=\"section\"></span></p><h2>Milestones </h2>\n<ul>\n<li><strong>12/06/09</strong> - Checkin tarball of DMTCP and have test suite build it properly. <strong>[DONE]</strong>\n<ul>\n<li>Figure out how the stduniv tests are currently built. [DONE]\n</li><li>Make test suite build DMTCP tarball for the right machines with right flags. [DONE]\n</li><li>Write a small source to link in libdmtcpaware.a and a helper object file\nwhich implements our checkpoint API. [DONE]\n</li><li>Write new Imake.rules functions to build DMTCP-ified test programs. [DONE]\n</li><li>Write the new link rules for all of our test programs. [DONE]\n</li></ul>\n\n<p></p></li><li><strong>01/11/2010</strong> - Run DMTCP test programs outside of Condor.\n<ul>\n<li>Implement test harness in <strong>CondorDMTCP.pm</strong> to set up, run, and manage a DMTCP program. <strong>This is hard, and not yet done. Probably 2 weeks left or so.</strong>\n</li><li>Write an example .run file for <code>job_ckpt_combo-sanity_std</code>.\n</li><li><strong>Found problems with DMTCP, this ticket is on hold at this stage.</strong>\n</li></ul>\n\n<p></p></li><li><strong>Future</strong> - Write all .run files for DMTCP tests outside of Condor\n\n<p></p></li><li><strong>Future</strong> - Run DMTCP test programs inside of Condor.\n<ul>\n<li>Figure out how to utilize and check in my shim script and associated goo.\n</li><li>Write a single test and see if it works.\n</li><li>Write the rest of the tests.\n</li><li>...\n</li></ul>\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Plan </h2>\n\n<p><span class=\"subsection\"></span></p><h3>Building DMTCP into our test suite</h3>\n\n<p>For the initial plan, we have to determine exactly what DMTCP is in relation to\nthe test suite, is it an external? A Prereq? Or what?\n\n</p><p>Due to certain constraints:\n</p><ul>\n<li>DMTCP will have many bugs fixed or features added incrementally.\n</li><li>DMTCP exists in the layer between Condor and the User Job and so isn't really an external.\n</li><li>Turnaround time for NMI reinstalling a new prereq or reconfiguring the compilation flags of DMTCP is high.\n</li></ul>\n\n<p>I've decided that I'm going to check in a tarball of DMTCP into\ncondor_tests and have the test suite build it for me. This allows the\nfastest development scenario for me because it prevents be blocking on\nNMI to update a prereq. Since DMTCP isn't used by the Condor source code\nitself, making it an external seems wrong--in addition the sync time\nbetween the afs directory and the externals web server slowing me down.\n\n</p><p>After getting the test suite to build it, I will add in new Imake.rules functions similar to CLINK() which will link together the test executable with the dmtcp libraries and the condor-specific checkpointing API library. These rules should be called DBUILD(), DBUILD_DEP(), and DLINK() and be aware of if\nHAVE_DMTCP_ABILITY is defined along with IS_CLIPPED.\n\n</p><p><span class=\"subsection\"></span></p><h3>Running DMTCP tests in the test suite</h3>\n\n<p>For this aspect, I'm initially going to have a .run file which just runs and\ncheckpoints/restarts the DMTCP executable outside of Condor all together. This\nis easier for me to implement as a first pass, and checkpointing inside of\nCondor or outside of Condor are functionally identical from the point of view\nof DMTCP. Each .run file will start a unique coordinator for the purposes of the test under consideration. This models what would happen inside of Condor and I don't have to worry about checkpoint requests stomping on other simultaneously running DMTCP test jobs. (In the DMTCP world view, there is one coordinator for many processes, related or not. In Condor's world view, there is a unique DMTCP coordinator per slot alive only when the job is running).\n\n</p><p>Later, I'll check in the shim_script and have the checkpoints done inside of\nCondor itself. This will test the movement of the files and checkpoints back and\nfor from the spool. It seems to me that the .run logic for running DMTCP tests inside of Condor is sufficiently different that it warrants a different .run file from that of running the DMTCP test program outside of Condor. Having different ones for running inside of Condor is a feature since it allows us to alter how we integrate DMTCP with Condor without compromising the bare testing of DMTCP with our stduniv programs.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Dec-02 16:11:25 by psilord:</em> <br/>\n\nI'm working in it. Due to hilarity with <span class=\"ticket\"><a class=\"abandoned\" href=\"/wiki-archive/tickets/?ticket=974\" onclick=\"get_ticket_and_populate_wrapper('974'); return false;\" title=\"NMI Glue is a Pit of Despair\">#974</a></span>, it took a while to figure out just exactly how to get the nmi glue to build DMTCP properly without me having to change the glue. I figured it out and it is horrible, read the commit messages for this ticket.\n\n<p>I think though, that I've figured it out and written the Condor checkpointing API wrapper around the similar DMTCP API which does the same thing.\n\n</p><p></p><hr/>\n<em>2009-Dec-03 14:56:43 by psilord:</em> <br/>\n\nOk, found a DMTCP compilation issue on x86/x86_64 rhel 3. Sent them a message about it.\n\n<p>The error was:\n\n</p><p></p><div class=\"verbatim\">\n<pre>config.status: WARNING:  'Makefile.in' seems to ignore the --datarootdir setting\nIn file included from mtcp.c:68:\nmtcp_internal.h:48:27: linux/futex.h: No such file or directory\nmtcp.c: In function `threadisdead':\nmtcp.c:1028: `FUTEX_WAKE' undeclared (first use in this function)\nmtcp.c:1028: (Each undeclared identifier is reported only once\nmtcp.c:1028: for each function it appears in.)\nmtcp.c: In function `checkpointhread':\nmtcp.c:1285: `FUTEX_WAIT' undeclared (first use in this function)\nmtcp.c:1394: `FUTEX_WAKE' undeclared (first use in this function)\nmtcp.c: In function `stopthisthread':\nmtcp.c:2134: `FUTEX_WAKE' undeclared (first use in this function)\nmtcp.c:2140: `FUTEX_WAIT' undeclared (first use in this function)\nmtcp.c: In function `wait_for_all_restored':\nmtcp.c:2219: `FUTEX_WAKE' undeclared (first use in this function)\nmtcp.c:2233: `FUTEX_WAIT' undeclared (first use in this function)\nmtcp.c: In function `lock_threads':\nmtcp.c:2402: `FUTEX_WAIT' undeclared (first use in this function)\nmtcp.c: In function `unlk_threads':\nmtcp.c:2412: `FUTEX_WAKE' undeclared (first use in this function)\nmake[2]: *** [mtcp.o] Error 1\nmake[1]: *** [mtcp] Error 2\nmake: *** [dmtcp-all] Error 2\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Dec-03 16:16:10 by psilord:</em> <br/>\n\nI'm turning off building dmtcp on rhel3 until it compiles there.\n\n<p></p><hr/>\n<em>2009-Dec-04 13:29:17 by psilord:</em> <br/>\n\nI rewrote somewhat the Imake.rules logic for building the dmtcp linked stduniv test jobs. The new way is more amenable to having stduniv and not dmtcp available.\n\n<p></p><hr/>\n<em>2009-Dec-08 14:41:14 by psilord:</em> <br/>\n\nI poked the Imakefiles a bunch and now I believe I have a new test called <code>job_ckpt_combo-sanity_dmtcp</code> which will run the dmtcp test outside of Condor.\nAt this time, I'm writing the logic of the script.\n\n<p></p><hr/>\n<em>2009-Dec-11 11:32:09 by psilord:</em> <br/>\n\nHrm, I've run into some problems while implementing the script which uses dmtcp outside of Condor to run the test. First, dmtcp, or my bridge api, causes the test program to segfault, so I have to figure that out. Second, the mechanics of the test require a few asynchronous processes to talk to each other, which complicates the test script. I'm writing a .pm file for DMTCP which should make this easier to handle.\n\n<p></p><hr/>\n<em>2009-Dec-16 10:58:56 by psilord:</em> <br/>\n\nMeh, I'm having to write more and more of process management codes to handle the DMTCP testing cases. :( The problem is that there is a whole host of processes I need to worry about for the test, and then I have to properly clean everything up, and detect all kinds of corner cases, cause this is a test program. If it didn't detect the corner cases, the test would be unreliable.\n\n<p></p><hr/>\n<em>2009-Dec-16 12:06:09 by matt:</em> <br/>\n\nDoes running a Schedd and then tests as local universe jobs help?\n\n<p></p><hr/>\n<em>2009-Dec-17 10:18:32 by psilord:</em> <br/>\n\nmattf, I probably could represent what I want to do that way, but it adds a fairly major reliability dimension into what would otherwise be a standalone test.\n\n<p></p><hr/>\n<em>2009-Dec-17 10:26:00 by psilord:</em> <br/>\n\nSo, after several iterations of trying to write this dmtcp testing harness, I think I've figured out the architecture.\n\n<p>Much of my consternation was perl's illusion of ease in process management and IPC. It turns out I basically have to write in perl what I would have written in C to handle asynchronous communication between a parent and child process across some pipes. It took a while to discover this.\n\n</p><p>I may be able to use IO::Multiplex.pm for some of this work and it appears to\nhave a compatible license for inclusion into the Condor source. But, it has some annoying API foibles that might cause me to just write it by hand.\n\n</p><p></p><hr/>\n<em>2010-Jan-06 16:27:35 by psilord:</em> <br/>\n\nOver the break, I figured out that a message passing interface using the filesystem as a transfer point is a much faster thing to implement to do the ansynchronous requests to the third party checkpointer that I have to do. I'm in the middle of implementing it and finally making more progress on the stages of the harness.\n\n<p></p><hr/>\n<em>2010-Jan-06 16:30:08 by psilord:</em> <br/>\n\nI will say I tried around 6-7 iterations of asynchronous i/o methods, each harder than the next (I was trying the easiest solutions first, obviously) because I was being brick walled by perl's lack of core modules to facilitate what I needed. I ended up writing something extremely close to C and it wasn't a good thing.\n\n<p></p><hr/>\n<em>2010-Jan-11 10:33:38 by psilord:</em> <br/>\n\nI discovered that programs linked with the flag -rdynamic when linking against dmtcpaware.a suffer from an infinite recursion and stack consumption until segfault. I've mentioned this to the DMTCP folks and gotten rid of the use of that flag in the test suite on my branch.\n\n<p></p><hr/>\n<em>2010-Jan-11 16:20:33 by psilord:</em> <br/>\n\nOk, I fixed our test suite to not use -rdynamic. Also, I have just enough of my harness working that I can write .run files for the job_rsc_* stduniv programs we have. This doesn't test checkpointing, but it does test whether or not DMTCP messed with how system calls worked. Since it is doing library injection, this is a worthy and necessary test.\n\n<p>I'm currently in a discussion with the DMTCP folks about how to implement ckpt_and_exit() correctly. It is turning out to be subtle due to signal handling issues, but I think we've converged on a solution. I just have to test it.\n\n</p><p>I can't really implement the checkpoint/restart functions in my harness until the behavior of ckpt_and_exit() gets worked out. This is because right now, DMTCP doesn't allow one to tell the difference between a program that exited due to a ckpt_and_exit(), or due to legitimate application exit. The DMTCP folks and I are working out an API at the moment....\n\n</p><p></p><hr/>\n<em>2010-Jan-12 16:13:52 by psilord:</em> <br/>\n\nOk, after consultation with the DMTCP folks, I have a plan for a rewrite of ckpt_and_exit(), doing it now.\n\n<p></p><hr/>\n<em>2010-Jan-13 15:46:17 by psilord:</em> <br/>\n\nAfter hashing out a plan with the DMTCP folks about a new ckpt_and_exit() method, I've implemented it, but run into some odd problems. Namely, after I set the default signal handler for usr1 in the post checkpoint hook, the raising of the signal seems to not terminate the process as it should. It appears the signal\nis blocked when it shouldn't be. Looking into it....\n\n<p></p><hr/>\n<em>2010-Jan-19 10:24:03 by psilord:</em> <br/>\n\nOk, I implemented the new ckpt_and_exit() and it seems to work with the sole exception that it doesn't act like a barrier to the thread in which the call is invoked. Need to figure that one out one day.\n\n<p></p><hr/>\n<em>2010-Jan-19 10:25:42 by psilord:</em> <br/>\n\nI've hand run the test suite against DMTCP and it failed pretty badly for about 15 of our tests. See me for a tarball which holds the method of reproduction.\n\n<p></p><hr/>\n<em>2010-Jan-19 16:35:30 by psilord:</em> <br/>\n\nThe tarball of failed programs and how to reproduce them have been sent to Miron and Gene.\n\n<p>I have cleaned up and committed my branch to the central repository, but not merged it.\n\n</p><p>Until I get word from the DMTCP folks that the problems have been fixed, I'm blocked and moving to another task.\n\n</p><p></p><hr/>\n<em>2010-Feb-11 11:56:09 by psilord:</em> <br/>\n\nThe DMTCP folks have fixed several of the issues, but they had some questions on a few others. I answered the questions and am still waiting for them to complete the rest of the work.\n<hr/>\n<em>2010-Oct-20 15:59:08 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.\n<hr/>\n<em>2011-Jan-27 14:21:33 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Jan-28 08:18:15 by tstclair:</em> <br/>\n\nFrom last eval which was ~October Gene had fixed all known issues and the ckpt tests I had run had passed.  This should be re-evaluated for the next dev-series.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/133/README\">README</a>\n6631 bytes added by psilord on 2010-Jan-19 19:03:51 UTC.\n<br/>\nThis README shows the failure of DMTCP to correctly checkpoint 15 of our stduniv test programs. It is part of a tarball I sent to Miron and Gene Cooperman explaining the results. The tarball contains all information necessary to reproduce the failures including the specific version of DMTCP I used, our codes, and the environment under which our codes fail.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-19 16:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/43ddbf8241db00cb241ea1bec99b22fe571f5684\">[16919]</a></span>: Added the .run file test harness to be used for low level testing of DMTCP and any other checkpointing system. These tests run outside of Condor. The Condor.pm file cannot be used to implement these tests since by definition they are not stduniv so the user event log will hold very minimal information\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-19 13:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/63a6c354f2d3d4fcb6370da7e7af55511264f65e\">[16918]</a></span>: Added in a single dmtcp test, which for now is stubbed out to always pass. This is for <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-19 13:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3aaf8d3850e736e2bb4c050bdfec09db2f862f3d\">[16917]</a></span>: Updated revision of DMTCP. Redid how the make rules happened as to not rebuild DMTCP every single time something changes. <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-19 12:46</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/16bd39cc610c221f63f2bb815eb27d11dd4263d0\">[16916]</a></span>: We filter out -rdynamic when building the test suite since it causes DMTCP's libdmtcpaware.a to freak out. Since we don't release the executables for our test programs, this shouldn't be an issue. We also hardcode in the -g debugging flag since I can't ever see a reason why it shouldn't be present. <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-07 15:12</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/310c526caefd915f2d03f53ba8a44a7c72a16b61\">[16536]</a></span>: Upped revision of dmtcp 441 to 447. <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-07 11:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/0785ba9d3dbe50b8ede0cd4f65f737002571bb41\">[16535]</a></span>: Tweaked the preprocessor rules a little bit to actualy do what I wanted. This is meant to stub out DBUILD* rules when HAVE_DMTCP_ABILITY isn't defined or we are clipped. <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-04 11:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/d1e801d6071bf53e8444b628e9edbeb3e284181e\">[16491]</a></span>: Recast how the Imake rules for DMTCP worked. This makes it easier to have ports where DMTCP ability is/isn't present. Simplified the test specific building rules. <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-03 16:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/1fa8a7e8e517b0a85f31c37d5394558838c913dd\">[16482]</a></span>: Wrote imake rules to build/link DMTCP programs and applied to our stduniv test programs. Our stduniv programs now build with no modification, against Condor's stduniv library, and also against the DMTCP/Condor bridge API library. Turned off DMTCP ability detection on LINUX_RHEL3 due to non-compilation\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-02 16:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4db35dfaee1b291c59e6fb683306884b7bd3a3c4\">[16477]</a></span>: Improved the build rules slightly for DMTCP. Fixed our condor checkpointing API wrapper to be more complete for fortran and whatnot. This is for ticket <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-02 15:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/8829a76d27331bf3d111f821edc6a3e827bde8b9\">[16476]</a></span>: This checkin makes it so that making the individual stduniv test programs will produce symlinks to the condor_tests/dmtcp-local directory so the tests have available the binaries and libraries for DMTCP.\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-01 16:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6e2262ebd34b598cebe6eb1c14ee11bb621362e0\">[16473]</a></span>: Added a stub file which will implement Condor's ckpt() and ckpt_and_exit() interface and amended the dmtcp specific build rules to assemble a libcondordmtcp.a library which may be linked with a user job. This is for ticket <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-01 14:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4810c6c57d7a160fd6c8d483d7b89a5df747e2a2\">[16468]</a></span>: Detect the ability to compile DMTCP and make the test suite build it. Many tests in the test suite will use DMTCP and I just want one copy of it. DMTCP is checked in as a source tarball (see ticket <span class=\"ticket\"><a class=\"stalled\" href=\"/wiki-archive/tickets/?ticket=23\" onclick=\"get_ticket_and_populate_wrapper('23'); return false;\" title=\"Investigation of the DMTCP checkpointing package\">#23</a></span>) and allows easy changing as we find bugs in it or request features. This is for ticket <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>.  (By Peter Keller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2012-Oct-16 13:23", "status": "new", "created": "2009-Apr-08 11:37", "fixed_version": "2009-Apr-08 11:37", "broken_version": "", "priority": "3", "subsystem": "Std", "assigned_to": "PitS", "derived_from": "#1000", "creator": "tannenba", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tannenba@cs.wisc.edu tstclair@redhat.com psilord@cs.wisc.edu", "due_date": "20100119"}