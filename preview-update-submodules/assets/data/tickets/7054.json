{"id": 7054, "title": "Ticket #7054: LIGO gstlal DAG scaling problem", "description": "<blockquote>\nChad Hannah from the LIGO gstlal team has reported problems with DAG scaling for large workflows to the extent that condor file transfer has been disabled to reduce the size. Details are needed from the gstlal team.</blockquote>", "remarks": "<blockquote>\n<em>2019-May-30 22:07:34 by anderson:</em> <br/>\n\nChad Hannah is reporting sub-Hz job submission from large gstlal DAGs, which is a critical problem for LIGO.\n\n<p>Executive summary: The dag complexity for large workflows throttles condor submission in a way that makes it impossible to efficiently schedule large dags preventing full utilization of clusters.\n\n</p><p>Here is what I know:\n\n</p><p>Taking two of the same types of workflows with different template bank sizes (40,000 templates vs 1.7M templates), and different numbers of injections, etc, produces workflows that topologically look the same but clearly are a vastly different scale.\n\n</p><p>Here is a small dag (4853 nodes):\n\n</p><p><a class=\"external\" href=\"https://ldas-jobs.gwave.ics.psu.edu/~gstlalcbc/good.dag\">https://ldas-jobs.gwave.ics.psu.edu/~gstlalcbc/good.dag</a>\n\n</p><p>Here is a large dag (301610 nodes):\n\n</p><p><a class=\"external\" href=\"https://ldas-jobs.gwave.ics.psu.edu/~gstlalcbc/bad.dag\">https://ldas-jobs.gwave.ics.psu.edu/~gstlalcbc/bad.dag</a>\n\n</p><p>I will refer to these as good and bad from here on.\n\n</p><p>For the bad dag, here is a representative sample of the dagman.out which shows the typical time between job submission as ~ 2-3 seconds:\n\n</p><p></p><div class=\"verbatim\">\n<pre>05/30/19 16:49:20 Submitting HTCondor Node gstlal_inspiral_inj_4CBA job(s)...\n05/30/19 16:49:22 Submitting HTCondor Node gstlal_inspiral_inj_4DD8 job(s)...\n05/30/19 16:49:24 Submitting HTCondor Node gstlal_inspiral_inj_4E51 job(s)...\n05/30/19 16:49:26 Submitting HTCondor Node gstlal_inspiral_inj_4F6F job(s)...\n05/30/19 16:49:28 Submitting HTCondor Node gstlal_inspiral_inj_4FE8 job(s)...\n05/30/19 16:49:31 Submitting HTCondor Node gstlal_inspiral_inj_5106 job(s)...\n05/30/19 16:49:33 Submitting HTCondor Node gstlal_inspiral_inj_517F job(s)...\n05/30/19 16:50:36 Submitting HTCondor Node gstlal_inspiral_inj_529D job(s)...\n05/30/19 16:50:38 Submitting HTCondor Node gstlal_inspiral_inj_5316 job(s)...\n05/30/19 16:50:40 Submitting HTCondor Node gstlal_inspiral_inj_5434 job(s)...\n05/30/19 16:50:43 Submitting HTCondor Node gstlal_inspiral_inj_54AD job(s)...\n05/30/19 16:50:45 Submitting HTCondor Node gstlal_inspiral_inj_55CB job(s)...\n05/30/19 16:50:47 Submitting HTCondor Node gstlal_inspiral_inj_5644 job(s)...\n05/30/19 16:50:50 Submitting HTCondor Node gstlal_inspiral_inj_5762 job(s)...\n05/30/19 16:50:52 Submitting HTCondor Node gstlal_inspiral_inj_57DB job(s)...\n05/30/19 16:50:54 Submitting HTCondor Node gstlal_inspiral_inj_58F9 job(s)...\n05/30/19 16:50:57 Submitting HTCondor Node gstlal_inspiral_inj_5972 job(s)...\n05/30/19 16:50:59 Submitting HTCondor Node gstlal_inspiral_inj_5A90 job(s)...\n05/30/19 16:51:02 Submitting HTCondor Node gstlal_inspiral_inj_5B09 job(s)...\n05/30/19 16:51:04 Submitting HTCondor Node gstlal_inspiral_inj_5C27 job(s)...\n05/30/19 16:51:07 Submitting HTCondor Node gstlal_inspiral_inj_5CA0 job(s)...\n05/30/19 16:51:09 Submitting HTCondor Node gstlal_inspiral_inj_5DBE job(s)...\n05/30/19 16:51:12 Submitting HTCondor Node gstlal_inspiral_inj_5E37 job(s)...\n05/30/19 16:51:14 Submitting HTCondor Node gstlal_inspiral_inj_5F55 job(s)...\n05/30/19 16:51:17 Submitting HTCondor Node gstlal_inspiral_inj_5FCE job(s)...\n05/30/19 16:51:20 Submitting HTCondor Node gstlal_inspiral_inj_60EC job(s)...\n05/30/19 16:51:22 Submitting HTCondor Node gstlal_inspiral_inj_6165 job(s)...\n05/30/19 16:51:24 Submitting HTCondor Node gstlal_inspiral_inj_6283 job(s)...\n05/30/19 16:51:27 Submitting HTCondor Node gstlal_inspiral_inj_62FC job(s)...\n05/30/19 16:51:29 Submitting HTCondor Node gstlal_inspiral_inj_641A job(s)...\n05/30/19 16:51:32 Submitting HTCondor Node gstlal_inspiral_inj_6493 job(s)...\n05/30/19 16:51:34 Submitting HTCondor Node gstlal_inspiral_inj_65B1 job(s)...\n</pre></div>\n\n\n<p>To compare here is the good dag which shows the average time between submission as ~50ms - that is a factor of 50 times faster which is maybe roughly commensurate with submission time scaling linearly with the number of dag nodes (a more precise measurement could be done of course):\n\n</p><p></p><div class=\"verbatim\">\n<pre>05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0089 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_008A job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_008B job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_008C job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_008D job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_008E job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_008F job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0090 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_000F job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_with_zerolag_000F job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0071 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0072 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0073 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0074 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0075 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0076 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0077 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0078 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_0013 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_with_zerolag_0013 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0091 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0092 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0093 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0094 job(s)...\n05/30/19 16:15:08 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0095 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0096 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0097 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0098 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_000D job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_with_zerolag_000D job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0061 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0062 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0063 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0064 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0065 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0066 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0067 job(s)...\n05/30/19 16:15:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0068 job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_0014 job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_with_zerolag_0014 job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0099 job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_009A job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_009B job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_009C job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_009D job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_009E job(s)...\n05/30/19 16:16:09 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_009F job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_00A0 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_000C job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_with_zerolag_000C job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0059 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_005A job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_005B job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_005C job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_005D job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_005E job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_005F job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0060 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_0011 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_rank_pdfs_with_zerolag_0011 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0081 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0082 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0083 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0084 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0085 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0086 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0087 job(s)...\n05/30/19 16:16:10 Submitting HTCondor Node gstlal_inspiral_calc_likelihood_0088 job(s)...\n</pre></div>\n\n\n<p>The big problem with all of this is that currently the bad dag looks like this:\n\n</p><p></p><div class=\"verbatim\">\n<pre>05/30/19 16:57:43 Number of idle job procs: 8\n05/30/19 16:57:43 DAG status: 0 (DAG_STATUS_OK)\n05/30/19 16:57:43 Of 301610 nodes total:\n05/30/19 16:57:43  Done     Pre   Queued    Post   Ready   Un-Ready   Failed\n05/30/19 16:57:43   ===     ===      ===     ===     ===        ===      ===\n05/30/19 16:57:43  6064       0     1028       0   11123      283395        0\n</pre></div>\n\n\n<p>where only about 1000 jobs can be queued in the current workflow despite only 8 being idle, 11,000 ready and at least 6000 condor slots waiting to accept these jobs. So our throughput is roughly 15% of what it could be. That means O3 failure at this rate.\n\n</p><p></p><hr/>\n<em>2019-May-30 22:14:17 by bbockelm:</em> <br/>\n\nStuart, would it be possible for Chad to share the <code>*.sub</code> files as well?\n\n<p>Todd: I have access to the links posted above; let me know if you don't.\n\n</p><p></p><hr/>\n<em>2019-May-30 22:28:16 by anderson:</em> <br/>\n\nI have put a compressed and open acceess copy of the dag files at <a class=\"external\" href=\"https://ldas-jobs.ligo.caltech.edu/~anderson/condor/bad.dag.bz2\">https://ldas-jobs.ligo.caltech.edu/~anderson/condor/bad.dag.bz2</a> and <a class=\"external\" href=\"https://ldas-jobs.ligo.caltech.edu/~anderson/condor/good.dag.txt.bz2\">https://ldas-jobs.ligo.caltech.edu/~anderson/condor/good.dag.txt.bz2</a>\n\n<p></p><hr/>\n<em>2019-Jun-03 13:21:59 by coatsworth:</em> <br/>\n\nI wasn't aware this ticket existed so we made a separate ticket to keep track of our findings. I'm merging all this wisdom into here and marking the other ticket abandoned.\n\n<p>It turns out this DAG is extremely large:\n</p><ul>\n<li>~300,000 vertices\n</li><li>~660,000,000 edges\n</li><li>~350 MB .dag file\n</li><li>~90 GB in memory footprint\n</li></ul>\n\n<p>Greg has done some additional profiling which reveals that fork/exec-ing condor_submit at this size takes ~3 seconds.\n\n</p><p>We need to quickly figure out ways to reduce the in-memory footprint of this DAG while also speeding up the submission process.\n\n</p><p>To speed up the submission process, we're modifying DAGMan to use the submit_utils library instead of forking condor_submit. TJ is currently working on this in <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6974\" onclick=\"get_ticket_and_populate_wrapper('6974'); return false;\" title=\"condor_dagman should use submit_utils\">#6974</a></span>. We estimate this will reduce submit time from ~3 seconds per job to ~0.1 seconds.\n\n</p><p>As for reducing the in-memory footprint, one initial obvious approach is to reduce the number of edges by optimizing many-PARENT-many-CHILD relationships using intermediate nodes. This would reduce the number of edges in these cases from m*n to m+n. For LIGO's graph, this would reduce the ~660M edges to ~1.5M edges.\n\n</p><p>I'll continue updating this ticket with details about other metrics that DAGMan is producing.\n\n</p><p><em>2019-Jun-03 15:46:49 by tannenba:</em> <br/>\n\nProfile of running the small dag\n\n</p><p></p><div class=\"verbatim\">\n<pre>  33% of time in dprintf\n  ~50%/50% parsing\n\n</pre></div>\n\n\n<p>114MB for dagman, 99MB was for edges\n\n</p><p></p><hr/>\n<em>2019-Jun-03 16:00:30 by gthain:</em> <br/>\n\nNote that a handful of lines have a PARENT x z y CHILD a b c relationships that create 50,000,000 or more edges:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">/nobackup/gthain/ligo$ grep \"^PARENT \" bad.dag | awk '{for (i=0;i &lt; NF; i++) {if ($i == \"CHILD\") {print (i - 2) * (NF - i)}}}' |  sort -n | tail -8\n52094880\n52094880\n55550500\n55550500\n108219880\n108219880\n108219880\n108219880\n</pre></div>\n\n\n<p></p><hr/>\n<em>2019-Jun-03 20:24:43 by bbockelm:</em> <br/>\n\nRather than create an \"intermediate\" node when we have a X by Y PARENT / CHILD relationship, is it possible to do \"<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> compression\"?\n\n<p>That is, introduce a reference object that can be shared by multiple nodes.\n\n</p><p></p><hr/>\n<em>2019-Jun-04 11:07:44 by gthain:</em> <br/>\n\nMark wrote a script to insert switch nodes between densely connected nodes.  With this, the footprint of dagman dropped from 90 Gb to 1 Gb, and the parsing startup time dropped from one hour to 20 seconds.  The fork time dropped from 3 seconds to 0.05 seconds, and when submitting real jobs to the schedd, we can get about 20-30 jobs submitted to the schedd per 10 seconds cycle.\n\n<p></p><hr/>\n<em>2019-Jun-04 13:46:17 by coatsworth:</em> <br/>\n\nI did another test where I removed the nodes' references to their parent nodes. This further improved the performance of the large dag:\n\n<p></p><ul>\n<li>Memory footprint reduced by a further 150 MB, a 10% improvement.\n</li><li>Parsing now takes only 5 seconds, down from 6 seconds. (I'm getting different parse speeds than Greg, likely due to a different CPU)\n</li></ul>\n\n<p>However there are three places where we depend on these parent nodes:\n\n</p><p></p><ul>\n<li>Cycle detection\n</li><li>Splices\n</li><li>Putting a list of parent node names in the job ad, so that <code>condor_q -dag</code> works correctly.\n</li></ul>\n\n<p>We can fix cycle detection by changing the graph traversal algorithm, and splices only care about the number of parents, so we could store this in a member variable. However getting the list of parent node names is trickier.\n\n</p><p>I think this is good information to be aware of, but not worth moving forward on.\n\n</p><p></p><hr/>\n<em>2019-Sep-18 13:26:08 by pfc:</em> <br/>\n\nThis can be closed once <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=7170\" onclick=\"get_ticket_and_populate_wrapper('7170'); return false;\" title=\"Further reduce DAGMan memory footprint\">#7170</a></span> is done and in the hands of LIGO gstlal users.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/wiki-archive/tickets/?ticket=7088\" onclick=\"get_ticket_and_populate_wrapper('7088'); return false;\" title=\"DAGMan inefficiencies with very large graphs\">#7088</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDAGMan inefficiencies with very large graphs</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=7108\" onclick=\"get_ticket_and_populate_wrapper('7108'); return false;\" title=\"Allow DAGMan to untangle dense graphs with join nodes\">#7108</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAllow DAGMan to untangle dense graphs with join nodes</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=7121\" onclick=\"get_ticket_and_populate_wrapper('7121'); return false;\" title=\"Reduce DAGMan memory footprint by deduping strings in nodes\">#7121</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nReduce DAGMan memory footprint by deduping strings in nodes</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=7271\" onclick=\"get_ticket_and_populate_wrapper('7271'); return false;\" title=\"Turn on Automatic DAGMan Join Nodes in 8.9\">#7271</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nTurn on Automatic DAGMan Join Nodes in 8.9</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/1025/bad.tar.gz\">bad.tar.gz</a>\n4690 bytes added by anderson on 2019-May-31 15:49:43 UTC.\n<br/>\nsub files<br/>\n</li><li><a href=\"../files/1027/add-dagman-join-nodes.py\">add-dagman-join-nodes.py</a>\n1750 bytes added by coatsworth on 2019-Jun-05 20:30:59 UTC.\n<br/>\nThis is a script that replaces dense many-PARENT-many-CHILD connections in .dag files with a \"join node\". It takes two arguments: name of the input file and name of the output file. <br/>\n</li><li><a href=\"../files/1028/gprof.out\">gprof.out</a>\n131575 bytes added by gthain on 2019-Jun-06 00:45:14 UTC.\n<br/>\ngprof output of the big, original dag with NOOP nodes.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "", "type": "incident", "last_change": "2019-Oct-15 10:54", "status": "resolved", "created": "2019-May-15 13:12", "fixed_version": "2019-May-15 13:12", "broken_version": "v080802", "priority": "3", "subsystem": "Dag", "assigned_to": "tannenba", "derived_from": "", "creator": "anderson", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "peter.couvares@ligo.org, bbockelman@morgridge.org, anderson@ligo.caltech.edu, chad.hannah@ligo.org, peter.couvares@ligo.org, coatsworth@cs.wisc.edu, tannenba@cs.wisc.edu, gthain@cs.wisc.edu", "due_date": ""}