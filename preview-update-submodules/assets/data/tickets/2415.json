{"id": 2415, "title": "Ticket #2415: add automatic retries to glexec", "description": "<blockquote>\nIgor requests that when a glexec operation fails, Condor should automatically retry X times with time-delayed backoff.\n\n<p>This would help in situations where the new hold-on-failure behavior added in <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2324\" onclick=\"get_ticket_and_populate_wrapper('2324'); return false;\" title=\"improve handling of glexec failure\">#2324</a></span> would cause jobs to go on hold due to transient failures of glexec (e.g. due to overload of the mapping service).</p></blockquote>", "remarks": "<blockquote>\n<em>2013-Jan-04 15:45:40 by danb:</em> <br/>\n\nI have attached a patch that implements automatic retries in case of transient glexec failures.  Two new configuration knobs are added: GLEXEC_RETRIES (default 3) specifies the maximum number of times to retry a failed glexec call.  Random exponential backoff is used, with a minimum delay of GLEXEC_RETRY_DELAY and a maximum retry delay of 100*GLEXEC_RETRY_DELAY seconds.  The starter is blocked during the retry loop, so it will not send daemon heartbeats or respond to any communication during that time, so it would be best to keep the upper bound reasonable small (say 10 minutes).\n\n<p>I have tested this patch in 7.8.8.  It is a fairly large patch for a stable series, but it should only impact installations using glexec.  Igor has made a strong request for this feature in 7.8, because changes in 7.7 have caused useability problems in cases where glexec experiences transient failures.  Prior to the 7.7 changes, transient glexec errors caused shadow exceptions but were otherwise not visible to users.  After the 7.7 changes, transient glexec errors cause user jobs to go on hold.  With automatic retries, the glidein administrators will be able to tune the error threshold at which glexec errors cause jobs to go on hold.\n\n</p><p></p><hr/>\n<em>2013-Jan-07 12:33:29 by zmiller:</em> <br/>\n\nCODE REVIEW by zmiller\n\n<p>just gave it a first-pass review.  at a high level, i have one question:\n\n</p><p>why do the retry in shell code, where the code is duplicated several times\nbetween the scripts?  because it needs to be done in C for condor_glexec_run\nanyways, what about having GLExecPrivSepHelper::run_script() function do the\nretries, since it wraps all the calls to the glexec helper scripts?\n\n</p><p>perhaps then there could be one code path that does the retries via a function\ncalled by both GLExecPrivSepHelper::run_script() and\nGLExecPrivSepHelper::create_process().  i do recognize that condor_glexec_run\nis a bit different beast from the others.  however, i was curious if you had\nconsidered that approach.  it seems like it would eliminate a lot of changes to\nthe helper function signatures and script argument passing code, as well as the\nscripts themselves.\n\n</p><p></p><hr/>\n<em>2013-Jan-07 13:34:35 by danb:</em> <br/>\n\nI think it would be reasonable to do the retries in the C code rather than the helper scripts.  However, condor_glexec_kill is called by the procd, not the starter, so there are still several pretty different code paths where the retry loop needs to be implemented.  Also, I hate sticking sleep() calls in Condor proper!  But I'd be willing to submit an alternate patch if you like.\n\n<p></p><hr/>\n<em>2013-Jan-09 11:21:46 by zmiller:</em> <br/>\n\ngiven that, let's go with your first approach.  however, that is a very interesting point about the procd.  i am uncomfortable blocking for long periods of time in the procd vs in the starter.  isn't the procd also used by all other daemons on the system?  this could cause all of condor to become unresponsive.\n\n<p>in the procd, the glexec_kill() function already does fork/exec.  perhaps we could remove the waitpid() so it runs in the background.  the only action performed after waitpid() is to dprintf() in the case of failure.  and at the moment, neither of the two invocations of glexec_kill() check the return code anyways.  thoughts on this?\n\n</p><p></p><hr/>\n<em>2013-Jan-09 11:29:20 by danb:</em> <br/>\n\nI like the idea of doing a non-blocking fork of condor_glexec_kill.  For single-slot glideins, blocking in the procd is less worrisome than it would be in other situations, but we should be prepared for all cases.  I'd vote for making this change in the dev branch.\n\n<p></p><hr/>\n<em>2013-Jan-09 14:52:18 by zmiller:</em> <br/>\n\ndan and i discussed in person, and are going to roll in the non-blocking \"glexec_kill\" into the stable version.\n\n<p></p><hr/>\n<em>2013-Jan-10 12:41:59 by danb:</em> <br/>\n\nI have a patch that avoids blocking the procd for the glexec kill operation.  However, I am having second thoughts about it.  The client who is requesting the kill (i.e. the starter) is expecting the job to be dead when the call returns.  Is it acceptable to violate that assumption?\n\n<p></p><hr/>\n<em>2013-Jan-10 13:59:38 by danb:</em> <br/>\n\nHere is an example of what I think can happen when the job lingers after the starter calls Kill_Family(): Suppose there is a job that uses ON_EXIT_OR_EVICT file transfer.  When the job is evicted, condor \"chowns\" the output to condor by tarring it as the user and untarring it as condor (over a pipe).  If condor_glexec_kill loses the race, tar may start reading from files that are still being written to.  This could result in a corrupted snapshot of the sandbox.\n\n<p>We do wait for the top-level process in the job to exit, so the race is only between the killing of child processes and the return of Kill_Family().  As such, it is a fairly obscure corner case, but I still think it may be an important one to get right.  If Kill_Family() in the client kept polling the procd to see if the processes were all gone, that would be one way to avoid blocking in the procd.  However, that is a bit out of scope for the current ticket, I think.\n\n</p><p></p><hr/>\n<em>2013-Jan-10 15:00:40 by zmiller:</em> <br/>\n\ndan -- okay, i'm convinced.  let's waitpid() for glexec_kill to finish for this round of code changes.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/669/glexec_retry.patch\">glexec_retry.patch</a>\n22222 bytes added by danb on 2013-Jan-04 21:32:11 UTC.\n<br/>\nAdd automatic retries in case of transient glexec errors.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-26 09:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/77984367e53d7c425f14c606d8d3f9ed34fbccc3\">[35015]</a></span>: fix doc typos for GLEXEC_RETRIES and GLEXEC_RETRY_DELAY ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2415\" onclick=\"get_ticket_and_populate_wrapper('2415'); return false;\" title=\"add automatic retries to glexec\">#2415</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-11 09:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3d445453f2b9bfbfdf170557f89be23baace5eaf\">[34612]</a></span>: Fix another thing broken in merge (sprintf_cat --&gt; formatstr_cat). <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2415\" onclick=\"get_ticket_and_populate_wrapper('2415'); return false;\" title=\"add automatic retries to glexec\">#2415</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-10 16:46</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/07063ec2f5028fec9e6fe493560abdf214b6320e\">[34610]</a></span>: Fixed broken merge of <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2415\" onclick=\"get_ticket_and_populate_wrapper('2415'); return false;\" title=\"add automatic retries to glexec\">#2415</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-10 16:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/f9cb1884109b2151619e14a7574ba751edae1a73\">[34604]</a></span>: Added retries of transient glexec failures. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2415\" onclick=\"get_ticket_and_populate_wrapper('2415'); return false;\" title=\"add automatic retries to glexec\">#2415</a></span>  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2013-Jan-10 16:33", "status": "resolved", "created": "2011-Aug-24 11:42", "fixed_version": "2011-Aug-24 11:42", "broken_version": "v070000", "priority": "4", "subsystem": "", "assigned_to": "danb", "derived_from": "#2753", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "burt@fnal.gov,sfiligoi@fnal.gov,dan@hep.wisc.edu,zmiller@cs.wisc.edu", "due_date": ""}