{"id": 2146, "title": "Ticket #2146: Reduce 7.6 shadow memory usage.", "description": "<blockquote>\nThe following ticket is meant to track modifications made to reduce memory footprint of the condor shadow under the V7.6 stable series.\n\n<p></p><div class=\"code\">\n<pre class=\"code\">In investigating the memory profile, I've noticed that pmap -d can be quite\nmisleading when comparing memory usage across versioned executables.\n\nWhen decreasing heap usage on a modified 7.6 condor_shadow, pmap -d can yield\ndata which flies against /proc/&lt;pid&gt;/status + top , /proc/&lt;pid&gt;/smaps, and\nvalgrind.\n\nRef1: http://www-archive.mozilla.org/projects/footprint/footprint-guide.html\nRef2:\nhttp://xpt.sourceforge.net/techdocs/nix/general/gnl04-ProcessAndMemories/ar01s03.html\n\nBefore: /proc/&lt;pid&gt;/status\n-----------------------------------------------\nName: condor_shadow\nState: S (sleeping)\nSleepAVG: 98%\nTgid: 5719\nPid: 5719\nPPid: 4752\nTracerPid: 0\nUid: 0 14475 0 14475\nGid: 0 14475 64 14475\nFDSize: 64\nGroups: 1070 14475\n*VmPeak:    59540 kB\n*VmSize:    59536 kB\nVmLck:        0 kB\nVmHWM:     4480 kB\n*VmRSS:     4480 kB\n*VmData:      988 kB\nVmStk:       84 kB\nVmExe:     2124 kB\n*VmLib:     6864 kB\nVmPTE:      216 kB\nStaBrk: 00d7a000 kB\nBrk: 00e32000 kB\nStaStk: 7fff135f4590 kB\nThreads: 1\nSigQ: 1/397311\nSigPnd: 0000000000000000\nShdPnd: 0000000000000000\nSigBlk: 0000000000000000\nSigIgn: 0000000000001000\nSigCgt: 0000000180014eed\nCapInh: 0000000000000000\nCapPrm: 00000000fffffeff\nCapEff: 0000000000000000\nCpus_allowed:\n00000000,00000000,00000000,00000000,00000000,00000000,00000000,ffffffff\nMems_allowed: 00000000,00000003\n\nAfter:/proc/&lt;pid&gt;/status\n-----------------------------------------------\nName: condor_shadow\nState: S (sleeping)\nSleepAVG: 98%\nTgid: 10295\nPid: 10295\nPPid: 10281\nTracerPid: 0\nUid: 0 14475 0 14475\nGid: 0 14475 64 14475\nFDSize: 64\nGroups: 1070 14475\n*VmPeak:    59392 kB\n*VmSize:    59388 kB\nVmLck:        0 kB\nVmHWM:     4220 kB\n*VmRSS:     4220 kB\n*VmData:      840 kB\nVmStk:       84 kB\nVmExe:     2124 kB\n*VmLib:     6864 kB\nVmPTE:      212 kB\nStaBrk: 092d1000 kB\nBrk: 09364000 kB\nStaStk: 7fff81a5c590 kB\nThreads: 1\nSigQ: 1/397311\nSigPnd: 0000000000000000\nShdPnd: 0000000000000000\nSigBlk: 0000000000000000\nSigIgn: 0000000000001000\nSigCgt: 0000000180014eed\nCapInh: 0000000000000000\nCapPrm: 00000000fffffeff\nCapEff: 0000000000000000\nCpus_allowed:\n00000000,00000000,00000000,00000000,00000000,00000000,00000000,ffffffff\nMems_allowed: 00000000,00000003\n\n-----------------------------------------------\n\nYou can clearly see that the total memory usage has gone down, yet when running\npmap -d across this experiment private memory usage went from 1188 -&gt; 1228\nwhich runs contrary to the afore mentioned data.\n\nNOTE: This type of behavior has only been demonstrated on RHEL(5) machines\n\nFrom reading, pmap reports just virtual mem large parts of which are likely to\nbe paged to disk forever for shared libs. More accurate results can be obtained\nfrom /proc/&lt;pid&gt;/smaps.  The following script analyzes such\ndata:(http://www.pixelbeat.org/scripts/ps_mem.py)\n\nBefore:\n Private  +   Shared  =  RAM used Program\n 2.1 MiB  + 214.5 KiB =   2.3 MiB condor_shadow\n\nAfter:\n Private  +   Shared  =  RAM used Program\n 2.0 MiB  + 210.5 KiB =   2.2 MiB condor_shadow\n\n~ 5% reduction in size.\n\nIn summary: pmap -d alone can yield an inaccurate picture of the world. To get\na better picture /proc/&lt;pic&gt;/smaps should be used to determine the per-process\nimpact of the condor_shadow.\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2011-May-09 14:47:52 by tstclair:</em> <br/>\n\nSo with some simple mods we can get modest gains, more evasive mods may be needed to outright elim some silliness.  We may even want to think more aggressively for 7.7 series.\n\n<p></p><hr/>\n<em>2011-May-10 08:25:31 by tstclair:</em> <br/>\n\nAnother important note, is that the amount of private memory 1 job &gt;&gt; private memory of N jobs.  The memory manager performs page level optimization and the amount SHARED increases until it hits a limit. From my observations it usually approaches a value around ~ (some coefficient&lt;1)*VmData, but I have no definitive proof of this.\n\n<p></p><hr/>\n<em>2011-May-11 19:48:30 by danb:</em> <br/>\n\nThanks for the patch!\n\n<p>Code review for param.patch:\n\n</p><p>This patch ignores min/max ranges specified in the param table.  So now it is up to every call site to provide min/max values.  This seems like a regression in functionality, but I suppose it may not actually make a difference in any existing case.  Have you verified that?\n\n</p><p>Seems like we should discuss the implications of that in fw.\n\n</p><p>The param_info_t structs are still being allocated on the heap.  Is it tricky to just create them statically in the code generator?  (I myself did not take the time to do that when I got rid of the strdups in the original implementation, so I'm not throwing stones!)\n\n</p><p></p><hr/>\n<em>2011-May-12 08:23:33 by tstclair:</em> <br/>\n\nStatic allocation is still paged-in memory and can affect the private memory usage (verified).  Now it is so small it would make little difference.  Ideally I would have also elim'd the generated values which do not contain a default, and make the generated table just be a static block.\n\n<p>The max+min, from what I can tell, make little to no difference in all the cases I have seen.  It is possible now to get an out of bounds param from a users config file, but so few parameters actually set those values(12 params) I doubt it would make a difference.\n\n</p><p>We should discuss in FW.\n\n</p><p></p><hr/>\n<em>2011-May-19 10:34:36 by tstclair:</em> <br/>\n\nAfter FW, I think I will just go static struct and target for 7.7.\n\n<p></p><hr/>\n<em>2011-May-19 10:37:08 by danb:</em> <br/>\n\nTJ is working on a static struct.  Please coordinate with him.\n\n<p></p><hr/>\n<em>2011-May-19 11:53:56 by johnkn:</em> <br/>\n\nI have a patch that turns the entire param_info table into compile-time initialized static const data, so all of it will be shared between instances of a given daemon.\n\n<p></p><div class=\"code\">\n<pre class=\"code\">static const param_info_PARAM_TYPE_INT param_def_info_UPDATE_INTERVAL = {\n\t\"UPDATE_INTERVAL\", \"300\", \"0.0.0\",\n\t\"Update Interval\", \"\",\n\t\"http://cs.wisc.edu/condor/manual/v7.3/3_3Configuration.html#SECTION\", \"eventd,scheduled_event\",\n\tPARAM_TYPE_INT, STATE_DEFAULT, CUSTOMIZATION_SELDOM, 1, 0, 1, 0,\n\t300\n\t};\nstatic const param_info_PARAM_TYPE_INT param_def_info_MAX_JOBS_RUNNING = {\n\t\"MAX_JOBS_RUNNING\",\n#ifdef WIN32\n\t\"200\",\n#else\n\t\"ceiling(ifThenElse( $(DETECTED_MEMORY)*0.8*1024/800 &lt; 10000, $(DETECTED_MEMORY)*0.8*1024/800, 10000 ))\",\n#endif\n\t\"0.0.0\",\n\t\"Max Jobs Running\", \"\",\n\t\"http://cs.wisc.edu/condor/manual/v7.3/3_3Configuration.html#SECTION\", \"schedd,schedd\",\n\tPARAM_TYPE_INT, STATE_DEFAULT, CUSTOMIZATION_SELDOM, 1, 0,\n#ifdef WIN32\n\t1, 0,\n\t200\n#else\n\t0, 0,\n\t0,\n#endif\n\t};\n</pre></div>\n\n\n<p></p><hr/>\n<em>2011-May-19 14:04:40 by johnkn:</em> <br/>\n\nStatic_param_info.patch will conflict with param.patch, it superceedes it.\n\n<p></p><hr/>\n<em>2011-May-19 14:26:47 by psilord:</em> <br/>\n\nThe superceeding patch has a change in authentication.cpp which I don't think is valid for this work. Can I get a new patch which only contains the fixes necessary for this ticket?\n\n<p></p><hr/>\n<em>2011-May-19 14:42:35 by johnkn:</em> <br/>\n\nAs Pete noted, the the original static_param_info.patch incorrectly included changes to authentication.cpp.  I have removed that patch and replaced it with a correct one.\n\n<p></p><hr/>\n<em>2011-May-20 15:49:42 by psilord:</em> <br/>\n\nCode review looked ok. I pushed the patch into the master branch.\n\n<p></p><hr/>\n<em>2011-May-20 18:34:38 by psilord:</em> <br/>\n\nThree unit tests were broken by the param default table changes. The tests broke because they used the param_info_insert() interface. The tests are actually\ntesting the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=UserPolicy\" title=\"User Policy\">UserPolicy</a></span> object which internally needs to param() something\nfor its behavior.\n\n<p>These tests were ONLY commented out and not actually fixed. This was so we don't\nhave a whole weekend of broken builds for a trivial to work around code change.\n\n</p><p>These tests must be inspected in detail and fixed for real.\n\n</p><p></p><hr/>\n<em>2011-May-31 11:48:01 by tstclair:</em> <br/>\n\npost mod I'm seeing:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">VmData:\t     668 kB\n</pre></div>\n\n\n<p>which is a substantial drop.\n\n</p><p>Again, one should not that with a single process you may actually see worse performance then b4, but as you ramp up the amount shared increases until it approaches <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=VmData\" title=\"Vm Data\">VmData</a></span>.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/343/param.patch\">param.patch</a>\n166561 bytes added by tstclair on 2011-May-09 19:41:34 UTC.\n<br/>\nPatch to elim many allocs in the param table which had no default. <br/>\n</li><li><a href=\"../files/350/static_param_info.patch\">static_param_info.patch</a>\n27423 bytes added by johnkn on 2011-May-19 19:40:22 UTC.\n<br/>\nPatch superceeds param.patch (it will conflict).  converts from function calls in param_info_init.c to static const struct declarations.  fixed to remove incorrect changes to auth.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jun-09 10:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a5a7cefee9c3b3319352de1fc5d4a37a81840312\">[22140]</a></span>: ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2146\" onclick=\"get_ticket_and_populate_wrapper('2146'); return false;\" title=\"Reduce 7.6 shadow memory usage.\">#2146</a></span> enable tests that were temporarily commented out by psilord after default params were converted to static const, the reason for commenting them out has since been removed.  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jun-06 09:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/ee43f9b6d908a135c3cd0eb04b8255cd1d005c39\">[22104]</a></span>: Re-enable tests that insert params into the table at runtime. they were disabled when the defauilt pramams table was changed to static const <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2146\" onclick=\"get_ticket_and_populate_wrapper('2146'); return false;\" title=\"Reduce 7.6 shadow memory usage.\">#2146</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jun-01 16:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/d891b08caf7e159fd25e8d2d7d622ffba27c5cca\">[22072]</a></span>: remove code made obsolete by check-in 21947 ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2146\" onclick=\"get_ticket_and_populate_wrapper('2146'); return false;\" title=\"Reduce 7.6 shadow memory usage.\">#2146</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jun-01 16:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6d27322ab1fe300a80fe075ece858837d9712244\">[22070]</a></span>: remove code made obsolete by check-in 21947 ===GT===#2146  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-May-24 10:30</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/7bec787078ee6bcedf78570bf1a57b009b33fc67\">[21960]</a></span>: ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2146\" onclick=\"get_ticket_and_populate_wrapper('2146'); return false;\" title=\"Reduce 7.6 shadow memory usage.\">#2146</a></span> Commented out more unit tests that are failing which need to be fixed after TJ's checkin.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-May-20 18:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/88d9e2605e458799cd46b3ec024241a2f5551fdd\">[21949]</a></span>: ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2146\" onclick=\"get_ticket_and_populate_wrapper('2146'); return false;\" title=\"Reduce 7.6 shadow memory usage.\">#2146</a></span> It turns out three unit tests used param_info_insert() for testing the user policy expression mechanism. This checkin does NOT fix the tests, it just comments them out so the nightlies and hourlies can continue over the weekend to find other bugs. The unit tests commented out were: test_remove_macro_analyze_policy\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-May-20 15:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/c50644a4475091ba4cf140d2408f9282e66c6f1e\">[21947]</a></span>: ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2146\" onclick=\"get_ticket_and_populate_wrapper('2146'); return false;\" title=\"Reduce 7.6 shadow memory usage.\">#2146</a></span> This is the first patch which begins to address the problem of the default param table using too much memory. The perl param generator was slightly rewritten to emit a pile of static const structures, where each param is assigned to a single structure instance, of all of the information\u00a0[...]\n (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2012-May-03 10:15", "status": "resolved", "created": "2011-May-09 14:36", "fixed_version": "2011-May-09 14:36", "broken_version": "v070600", "priority": "2", "subsystem": "Daemons", "assigned_to": "johnkn", "derived_from": "", "creator": "tstclair", "rust": "", "customer_group": "users", "visibility": "public", "notify": "tstclair@redhat.com, matt@cs.wisc.edu, dan@hep.wisc.edu,johnkn@cs.wisc.edu, psilord@cs.wisc.edu", "due_date": ""}