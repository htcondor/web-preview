{"id": 946, "title": "Ticket #946: DaemonCore timers should return void, not int", "description": "<blockquote>\nDaemonCore's Timer code makes callbacks into function pointers or class+function pointers.  These functions return int.  However, the Timer code doesn't care and ignores the return value.  See <a class=\"file\" href=\"rlog?f=src/condor_daemon_core.V6/timer_manager.cpp\">/src/condor_daemon_core.V6/timer_manager.cpp</a> roughly line 362 in TimerManager::Timeout().  This is confusing, as a developer might think the return value has some significance.  Worse, some of the schedd and startd timers are given functions that do return void, a recipe for mysterious future failures.\n\n<p>Fix:\n</p><ul>\n<li>the function pointer typedefs Event and Eventcpp (condor_timer_manager.h) should return void, not int.\n</li><li>function pointers passed into DaemonCore::Register_Timer and TimerManager::NewTimer should return void, not int.\n</li><li>function pointers passed into DaemonCore::Register_Timer and TimerManager::NewTimer should not be cast; either they match and are correct, or don't match.\n</li></ul>\n\n<p>This change should not be user visible in any way, and thus does not need a version history entry.\n\n</p><p><strong>Result:</strong>\n</p><ul>\n<li>Event[cpp] abandoned, use TimerHandler[cpp]\n</li><li>Never cast to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TimerHandler\" title=\"Timer Handler\">TimerHandler</a></span>, a test might look for existence of (<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TimerHandler\" title=\"Timer Handler\">TimerHandler</a></span>) in code\n</li><li>Casting to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TimerHandlercpp\" title=\"Timer Handlercpp\">TimerHandlercpp</a></span> is necessary and works, but is fragile and needs a better solution\n</li><li>TimerHandler[cpp] how return void\n</li><li>Register_Timer(...TimerHandler...) no longer accepts Service*\n</li><li>Patch: 130 files changed, 505 insertions(+), 670 deletions(-)</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2009-Nov-14 01:53:33 by matt:</em> <br/>\n\nIt is very clear that no one quite knew what to do with the return value. Some code returned TRUE and FALSE, sometimes FALSE on successful completion. Some code returned true and false, sometimes true during a failure. Some code returned 0 (success), -1 (failure) and a positive number on success. Some code had timers that returned int just to \"keep DC happy\". Sometimes a single file would define two timers, one that returned int and the other that returned void. Some code cast to TimerHandler[cpp] other code to Event[cpp]. Some code returns QUILL_* codes. Some returned pids.\n\n<p>The casting is partially due to the fact that the Register_Timer interface is ambiguous. Register_Timer(unsigned, Event, const char*, Service* s=NULL) vs Register_Timer(unsigned, Eventcpp, const char*, Service*) in condor_daemon_core.h. The implementation allows for a Service* other than NULL when registering a non-cpp handler. That Service* is an argument to the handler. This is especially bad because many of the non-cpp handlers are void (\\*)(void), meaning they expect no arguments. Some of the non-cpp handlers take no arguments purely to avoid having a dependency on Service, i.e. including dc_service.\n\n</p><p>To resolve the ambiguity and continue to avoid the include dependencies, the non-cpp handler should take no arguments and passing a Service* on register should be removed. This is the removal of an unused feature - it is not possible to access a Service from the non-cpp handler.\n\n</p><p>The casting is also partially due to the fact that we are in murky territory in the compiler. A member function of a class derived from Service cannot be implicitly cast to a member function of Service, e.g.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">#include &lt;iostream&gt;\nusing namespace std;\nstruct A { };\nstruct B: public A { void func() { cout &lt;&lt; \"Murky cast...\" &lt;&lt; endl; } };\ntypedef void (A::* Func)(void);\nint main(int argc, char **argv) {\n   B b;\n   Func f = &amp;B::func;\n   (b.*f)();\n   return 0;\n}\n</pre></div>\n\n\n<p>This code will not compile without </p><div class=\"code\">\n<pre class=\"code\">Func f = (Func)&amp;B::func;</pre></div>\n and the fact that even works is somewhat lucky. It also explains why classes that inherit from Service and others must inherit from Service first if it is going to register member functions with <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span>, e.g. <div class=\"code\">\n<pre class=\"code\">class MyClass: public Service, public MyOtherClass</pre></div>\n vs <div class=\"code\">\n<pre class=\"code\">class MyClass: public MyOtherClass, public Service</pre></div>\n This is unfortunate because it means we will have code for examples that may hide the proper signature of a handler.\n\n<p>Casts should never be used for non-cpp handlers.\n\n</p><p>dc_service.cpp needs inspection - <strong>[IGNORED]</strong>\n\n</p><p>DC::Reset_Timer return value semantics are inconsistent, need inspection - <strong>[PUNT]</strong> see <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=948\" onclick=\"get_ticket_and_populate_wrapper('948'); return false;\" title=\"DaemonCore::Reset_Timer code needs inspection\">#948</a></span> - Jaime changed Reset_Timer so that handlers registered with timeslices cannot be reset, but returned 0 (success) in that condition - needs review\n\n</p><p>Event[cpp] and TimerHandler[cpp] are declared and #define'd in both timer_manager.h and dc_service.h, need inspection - <strong>[DONE]</strong> - typedefs from dc_service.h weren't used, removed them\n\n</p><p>baseStarter.cpp's use of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SpawnJob\" title=\"Spawn Job\">SpawnJob</a></span> in a timer needs inspection - <strong>[DONE]</strong> - in all cases except for the timer one, a failure of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SpawnJob\" title=\"Spawn Job\">SpawnJob</a></span> resulted in shutdown, now all cases result in shutdown. debatable if <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SpawnJob\" title=\"Spawn Job\">SpawnJob</a></span> should do the shutdown instead of each of the call sites. it already does shutdown for some failure cases, so all code that calls it already must handle initiating a shutdown.\n\n</p><p>TimerHandler[cpp], a #define to Event[cpp], should replace Event[cpp]. According the comment the #define was a shortcut to make the timer code fit in better with existing DC naming conventions. Right now the code is a mess, split between uses of Event[cpp] and TimerHandler[cpp]. <strong>[DONE]</strong>\n\n</p><p>grid_universe.cpp,h register static member functions, should not be allowed by compiler, needs inspection - <strong>[DONE]</strong> - it was registering member functions as non-cpp handlers, ok\n\n</p><p>daemon_core_sock_adapter.h is an abomination - <strong>[IGNORED]</strong>\n\n</p><p>gridtfpmanager.cpp,h register a static <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=UpdateLeases\" title=\"Update Leases\">UpdateLeases</a></span>, needs inspection - <strong>[DONE]</strong> - it was registering member functions as non-cpp handlers, ok\n\n</p><p>GahpClient::reset_user_timer should return void, needs inspection - <strong>[PUNT]</strong> see <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=948\" onclick=\"get_ticket_and_populate_wrapper('948'); return false;\" title=\"DaemonCore::Reset_Timer code needs inspection\">#948</a></span>\n\n</p><p>basejob.cpp,h register a number of static member functions, needs inspection - <strong>[DONE]</strong> - it was registering member functions as non-cpp handlers, ok\n\n</p><p>admin_event.cpp,h's do_checkpoint_shutdown returns int for no good reason, needs inspection - <strong>[IGNORED]</strong> - just delete eventd.V2\n\n</p><p>collector_engine.cpp duplicates code between housekeeper and invokeHousekeeper, needs inspection - <strong>[IGNORED]</strong>\n\n</p><p>cronjob.cpp's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StartJob\" title=\"Start Job\">StartJob</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RunJob\" title=\"Run Job\">RunJob</a></span> handlers have used return values, needs inspection - <strong>[PUNT]</strong> see <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=949\" onclick=\"get_ticket_and_populate_wrapper('949'); return false;\" title=\"CronJobBase::StartJob and RunJob return codes need review\">#949</a></span> - return values are always ignored\n\n</p><p>collector.cpp,h/view_server.cpp,h register static sendCollectorAd/WriteHistory, and don't need to cast, needs inspection -- most everything on CollectorDaemon/ViewServer is static, sendCollectorAd/WriteHistory are registered as a non-cpp handler -- needs inspection - <strong>[IGNORED]</strong>\n\n</p><p>condor_lock_implementation.cpp's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DoPoll\" title=\"Do Poll\">DoPoll</a></span> has unnecessary returns, needs inspection <strong>[DONE]</strong>\n\n</p><p>daemon_core_main.cpp registers main_shutdown_fast, needs inspection - main_shutdown_fast's return code is always ignored - <strong>[DONE]</strong> - introduced TimerHandler_main_shutdown_fast\n\n</p><p>daemon_core_main.cpp register handle_dc_sig* has Signals and Timers, insanity!, needs inspection - handle_dc_sig* return codes always ignored and always TRUE - <strong>[DONE]</strong> - only handle_dc_sigterm was registered, introduced TimerHandler_dc_sigterm to avoid cast\n\n</p><p>collector.h has ^Ms, needs inspection <strong>[DONE]</strong>\n\n</p><p></p><hr/>\n<em>2009-Nov-14 10:38:51 by matt:</em> <br/>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nThe casting is partially due to the fact that the Register_Timer interface is ambiguous. Register_Timer(unsigned, Event, const char*, Service* s=NULL) vs Register_Timer(unsigned, Eventcpp, const char*, Service*) in condor_daemon_core.h. The implementation allows for a Service* other than NULL when registering a non-cpp handler. That Service* is an argument to the handler. This is especially bad because many of the non-cpp handlers are void (\\*)(void), meaning they expect no arguments. Some of the non-cpp handlers take no arguments purely to avoid having a dependency on Service, i.e. including dc_service.\n</td></tr></tbody></table></div>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nTo resolve the ambiguity and continue to avoid the include dependencies, the non-cpp handler should take no arguments and passing a Service* on register should be removed. This is the removal of an unused feature - it is not possible to access a Service from the non-cpp handler.\n</td></tr></tbody></table></div>\n\n\n<p>This assertion is only half true. The interface isn't ambiguous, but the Service* along with non-cpp handler code is not used and many parts of the code that use non-cpp handlers avoid depending on Service*. I'm still going to pull the Service* from the non-cpp interface. It is of questionable utility. Any uses of it would involve casting by the handler. <strong>[DONE]</strong>\n\n</p><p></p><hr/>\n<em>2009-Nov-14 15:57:23 by matt:</em> <br/>\n\nThis same work should be done for SignalHandler[cpp]. A quick survey suggests the return code is always ignored and Service* is never used. - <strong>[PUNT]</strong> see <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=951\" onclick=\"get_ticket_and_populate_wrapper('951'); return false;\" title=\"DaemonCore signal handlers should return void not int\">#951</a></span></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=948\" onclick=\"get_ticket_and_populate_wrapper('948'); return false;\" title=\"DaemonCore::Reset_Timer code needs inspection\">#948</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDaemonCore::Reset_Timer code needs inspection</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=949\" onclick=\"get_ticket_and_populate_wrapper('949'); return false;\" title=\"CronJobBase::StartJob and RunJob return codes need review\">#949</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nCronJobBase::StartJob and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RunJob\" title=\"Run Job\">RunJob</a></span> return codes need review</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=951\" onclick=\"get_ticket_and_populate_wrapper('951'); return false;\" title=\"DaemonCore signal handlers should return void not int\">#951</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\n<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> signal handlers should return void not int</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/739a2783a4e01f64f39e934a32cdd779d89e46ba\">[16340]</a></span>: Missed gcb_recovery_failed_handler in Service*-&gt;void conversion  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/2754e8d22bd768560ccf703fad8e17a8312afbd4\">[16341]</a></span>: Missed gcb_broker_down_handler in Service*-&gt;void conversion  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/cd6340852ee8c69eb651727c4a17c8b7a2f02f58\">[16342]</a></span>: Missed dap_server.h:call_main in Service*-&gt;void conversion  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/2a498920d43c628749fce0f6a048052650746bb8\">[16334]</a></span>: Removed all ^Ms from collector.h, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/39aa5cd59d3f78bac35adfa64a1911170cde51a6\">[16335]</a></span>: Removed unnecessary return complexity in CondorLockImpl::DoPoll, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/ae5af7e231bbf39368eb3a2033ddf304397954ce\">[16336]</a></span>: Fixed signature of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SpawnPreScript\" title=\"Spawn Pre Script\">SpawnPreScript</a></span>, updated usage of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SpawnJob\" title=\"Spawn Job\">SpawnJob</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span> Notes: In all cases except for the timer case, a failure of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SpawnJob\" title=\"Spawn Job\">SpawnJob</a></span> resulted in shutdown, now all cases result in shutdown. It is debatable if <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SpawnJob\" title=\"Spawn Job\">SpawnJob</a></span> should do the shutdown instead of each of the call sites. <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SpawnJob\" title=\"Spawn Job\">SpawnJob</a></span> already does shutdown\u00a0[...]\n (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/24b106b329ba646e59c8ee72e610757cc74ddc18\">[16337]</a></span>: Removed duplication of TimerHandler[cpp] typedefs in dc_service.h, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/98d6448eab514b641034e582458500541cb9c83b\">[16338]</a></span>: Introduced TimerHandler_dc_sigterm to call handle_dc_sigterm from a timer, instead of casting function pointer and changing signature, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/03ed62cf436dd3be24fd2816fe8738e5018e4cf1\">[16339]</a></span>: Introduced TimerHandler_main_shutdown_fast to call main_shutdown_fast from a timer, instead of casting function pointer and changing signature, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/299021bc184caa794b00447ba717f3aff0056eda\">[16329]</a></span>: Removed Service* from the non-cpp Register_Timer interface, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span> The functionality was entirely unused, required a dependency on Service, and could not be usefully used without casting.  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a7ae3effc5d34a0c33a9a57b30360e7d9a570367\">[16330]</a></span>: Fixed up uses of DaemonCore::Register_Timer after removing Service* from the non-cpp versions of the call, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>\u00a0[...]\n (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/724cba6953fc36eb4ae02bb1f0ebc0e3046ec82d\">[16331]</a></span>: Removed all casts to TimerRelease/Release, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>, for good measure  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3df344ca52511672b72ee9d0ddcf7773947e04fb\">[16332]</a></span>: Removed Event[cpp] in favor of TimerHandler[cpp], <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span> TimerHandler[cpp] used to be a #define of Event[cpp], apparently a cosmetic workaround since the beginning of time. The code base is hopelessly confused about if it should use TimerHandler[cpp] or Event[cpp]  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/18c39364fb3acd42775afc2f3de862bdf371a644\">[16333]</a></span>: Fixed up code, changing all Event[cpp] to TimerHandler[cpp], <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/2d2ee344957dc4362b93ffd505820fe03cf7f355\">[16327]</a></span>: Made Event[cpp] and thus TimerHandler[cpp] return void, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-15 08:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a1193a08e5ecd821b0225cb61be43872731e3228\">[16328]</a></span>: Fixed up uses of DeamonCore::Register_Timer after changing TimerHandler[cpp] to return void instead of int, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=946\" onclick=\"get_ticket_and_populate_wrapper('946'); return false;\" title=\"DaemonCore timers should return void, not int\">#946</a></span>\u00a0[...]\n (By Matthew Farrellee )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2009-Dec-18 11:39", "status": "resolved", "created": "2009-Nov-13 14:02", "fixed_version": "2009-Nov-13 14:02", "broken_version": "", "priority": "4", "subsystem": "Daemons", "assigned_to": "matt", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu", "due_date": ""}