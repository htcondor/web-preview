{"id": 6628, "title": "Ticket #6628: Customize new START expression when draining starts", "description": "<blockquote>\nCurrently, when <code>condor_drain</code> or <code>condor_defrag</code> cause a startd to drain, that startd unconditionally but temporarily sets its <code>START</code> expression to the hard-coded constant <code>FALSE</code>.\n\n<p>It would be nice if, when the startd was told to drain, it could also be given a <code>START</code> expression to use while draining.  This expression would only apply to \"graceful\" draining (the default), where both <code>MaxJobRetirementTime</code> and <code>MachineMaxVacateTime</code> are honored; it doesn't seem to make sense for the other types of draining (\"quick\" and \"fast\"), where we don't expect there to be a useful amount of time to \"backfill\" into.\n\n</p><p>Obviously, <code>condor_defrag</code> will require a new knob, and <code>condor_drain</code> a new command-line option, to activate this new feature.\n\n</p><p>Once we allow new jobs to start while we're draining, we need to consider how to exit draining state, since the current implementation just sets <code>MaxJobRetirementTime</code> and vacates every slot.  The obvious extension would be to do the same thing for each new job we accept, adjusting <code>MaxJobRetirementTime</code> to hit the deadline (that is, drain start time + max job retirement time) as we go, but this has a serious drawback: new jobs would then exit, and draining therefore complete, at the original deadline, regardless of when the last original job exits.\n\n</p><p>You could try to mitigate this by only accepting short jobs, but that forces the admin to choose between \"backfill\" efficiency (potentially creating a lot of churn as jobs continually restart) and draining efficiency (the longer the \"backfill\" jobs can run, the longer you have to wait past the end of the last \"original\" job).\n\n</p><p>Instead, we will have the startd preempt every slot when the last of the \"original\" jobs exits.  (In addition to seeming 'natural', this solution has the advantage that it allows the regression test for this to avoid some race conditions.)  Naturally, we need to provide for a different <code>MaxJobRetirementTime</code> for this preemption, or else we've effectively doubled the max draining time.  For the initial release of this feature, we're hard-coding that time to 0 (but not changing <code>MaxJobVacateTime</code>, so self-checkpointing jobs will still work).  Likewise, once we enter this preempting phase, we need to unconditionally set the <code>START</code> expression to <code>FALSE</code>.  Finally, we also need to invalidate all claim IDs to avoid potential race conditions with the negotiator giving out claims based on an out-of-date ad (which could refragment the startd).  (Arguably, we should invalidate all claim IDs whenever the START expression changes, and that may be the easiest way to implement this.)\n\n</p><p>Hopefully, we won't have to change anything for the \"automatically resume normal operation after a drain\" code to work, although it would also need to reset <code>MaxJobVacateTime</code> to its normal value.\n\n</p><p>For the convenience of administrators, the startd will set a new attribute, <code>AcceptedWhileDraining</code>, appropriately for each slot.</p></blockquote>", "remarks": "<blockquote>\n<em>2018-Apr-03 16:02:53 by tlmiller:</em> <br/>\n\nPrevious remarks removed as they were incorporated into the description.  Current remarks:\n\n<p></p><ul>\n<li>We hope at some point want to change the default START expression during drain from <code>FALSE</code> to 'MaxJobRetirementTime == 0'.\n</li><li>The defragd may need a little help dealing with resources claimed by preemptible jobs when deciding how many machines to drain.  This may require advertising Drained{CPUs,Memory,Disk,&lt;custom machine resources&gt;} in the pslot ad, where a \"Drained\" resource is either unclaimed or claimed by a preemptible job.\n</li></ul>\n\n<p></p><hr/>\n<em>2018-Apr-10 16:32:39 by tlmiller:</em> <br/>\n\nRegression testing assigned to another ticket.\n\n<p></p><hr/>\n<em>2018-Apr-14 19:55:16 by tlmiller:</em> <br/>\n\nI found 41 stack dumps (containing the string <code>ZN6Reqexp7unavailEPN7classad8ExprTreeE</code>; there may have been others) in the logs of the tests in April (whichever ones hadn't been purged by the 14th).  These crashes started April 10, when this ticket, which changed Reqexp::unavail(), was merged in.\n\n<p>Distressingly, this also appears to be as far back as our test logs go.\n\n</p><p>Analysis indicates the problem is that <code>ResMgr::walk()</code> is calling <code>Resource::shutdownAllClaims()</code> on a Resource that has been delete()d.  The initial approach will be to alter <code>ResMgr::walk()</code> to avoid doing so; a patch to do so is under testing.\n\n</p><p>It is, however, presently unclear how this problem had been avoided -- or if it was -- in the past.  It is also unclear how calling <code>Resource::shutdownAllClaims()</code> results in other Resources being delete()d, and if that has always been the case (or should be).  Further investigation is required.\n\n</p><p></p><hr/>\n<em>2018-Apr-14 20:26:46 by tlmiller:</em> <br/>\n\nThe previous version of <strong>Resource::shutdownAllClaims()</strong> only called <strong>Reqexp::unavail()</strong> if the resource in question were <em>not</em> a dynamic slot -- given that <strong>Resource::update()</strong> was <em>also</em> not being called in that case... my new comment indicates that a dynamic Resource deletes itself ...\n\n<p>OK, after tracking that all the way through, <strong>ResState::eval()</strong> calls <strong>ResState::change( delete_state )</strong>, which calls <strong>ResState:enter_action()</strong>, which is really deceptively named, which, if the new <em>state</em> is <code>delete_state</code>, calls <strong>ResMgr::removeResource()</strong>, which delete()s the Resource.\n\n</p><p>... so the moral of the story is that the startd code is very fragile?\n\n</p><p></p><hr/>\n<em>2018-Apr-15 01:12:39 by tlmiller:</em> <br/>\n\nSo it <a class=\"external\" href=\"http://submit-3.batlab.org//nmi-runs/tlmiller/2018/04/tlmiller_submit-3.batlab.org_1523736876_650436/userdir/nmi:x86_64_Ubuntu16/job_concurrency_limitsP-1.out\">looks like</a> checking for an already-delete()d Resource didn't help, which would be consistent with the analysis above.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6644\" onclick=\"get_ticket_and_populate_wrapper('6644'); return false;\" title=\"Add regression tests of new START expression while draining.\">#6644</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAdd regression tests of new START expression while draining.</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6664\" onclick=\"get_ticket_and_populate_wrapper('6664'); return false;\" title=\"condor_drain -start ... broken?\">#6664</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ncondor_drain -start ... broken?</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-19 15:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4c633598f1ead0f96135b26245bc360e32d2db8f\">[54772]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Documentation.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-19 15:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/5dc2f4d12335437f86b2ed57c1d4b7a12004c4ae\">[54771]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Documentation.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-15 14:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/c7456baa9dc76e1c5b0a118924e64ca87e5cd94f\">[54725]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Avoid segfault while startd is shutting down. Committer: John (TJ) Knoeller  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-15 14:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/d3059fbdb68a1addbc1b0e8d121346e788a140f9\">[54722]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Avoid segfault while startd is shutting down.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-10 15:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/332194c8650f0b91194909ad2ec4dfcbca85c25e\">[54684]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Python binds fix. Also fixed bad documention.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-10 13:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/0f3f85a940ee5709856ce60701c6112e1aa7bf0f\">[54683]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Python bindings build fix.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-10 11:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4fb3e874a9b168e813afd515b465e41f3c353fb5\">[54682]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Set MAXJOBRETIREMENTTIME to 0 when the last 'original' job exits. Return it to its original value when we finish draining.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-06 15:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/647acfc165587c1d347c4ca4434bc2c68dcb2bb4\">[54679]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Avoid a race condition by changing all the claim IDs when we initiate final draining.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-06 13:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/434c18c164a00d1e2f5ab26169858ccd9b9e4cf0\">[54678]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) More bug fixes. Add hook to determine when last 'original' job exits and (start to) react appropriately.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-04 17:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/e30d5dc9a9152d2a33537aeb84f62f19f0475a8c\">[54668]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Fix previous commit. Advertise <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AcceptedWhileDraining\" title=\"Accepted While Draining\">AcceptedWhileDraining</a></span>. Fix a bunch of other problems.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-03 17:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/db7350262ad7383530ce869f8b4fb8d1346b707f\">[54667]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Add DEFRAG_DRAINING_START_EXPR knob to defrag daemon.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-02 15:17</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/13d8c31ebdd04bdca43db0cf84d56b88ecf269c2\">[54666]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Add condor_drain option and plumbing to change START expression during drain. Fix a bunch of bugs so that jobs will now actually start on a draining partitionable slot if the START expression allows it.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-31 13:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6f1cd4625fbb556d7d44cbedc8c47351eeeb0c6b\">[54644]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6628\" onclick=\"get_ticket_and_populate_wrapper('6628'); return false;\" title=\"Customize new START expression when draining starts\">#6628</a></span>) Implement startd-side plumbing for changing the START expression when draining.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2018-Jun-26 13:42", "status": "resolved", "created": "2018-Mar-28 15:38", "fixed_version": "2018-Mar-28 15:38", "broken_version": "", "priority": "2", "subsystem": "Libs", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, tannenba@cs.wisc.edu, johnkn@cs.wisc.edu", "due_date": ""}