{"id": 23, "title": "Ticket #23: Investigation of the DMTCP checkpointing package", "description": "<blockquote>\nInformation about this checkpointer is found here:\n<ul>\n<li><a class=\"external\" href=\"http://dmtcp.sourceforge.net/\">http://dmtcp.sourceforge.net/</a>\n</li><li><a class=\"external\" href=\"http://arxiv.org/abs/cs.DC/0701037\">http://arxiv.org/abs/cs.DC/0701037</a>\n</li></ul>\n\n<p>Latest source:\n</p><ul>\n<li>svn co <a class=\"external\" href=\"https://dmtcp.svn.sourceforge.net/svnroot/dmtcp\">https://dmtcp.svn.sourceforge.net/svnroot/dmtcp</a> dmtcp\n</li></ul>\n\n<p>You'll want tp cd into the <code>dmtcp/trunk</code> directory since we're working on the end of the development branch.\n\n</p><p>Compiling it with debugging is done like this:\n</p><ul>\n<li>./configure --enable-debug CXXFLAGS=\"-g -O0\" CFLAGS=\"-g -O0\"\n</li></ul>\n\n<p>Debugging a restart in GDB:<br/>\n\ngdb --args ./bin/dmtcp_restart ckpt_dmtcp1_416dbb83-20780-49265447.dmtcp<br/>\n\n&gt; run\n\n</p><p>Running the test suite:\n</p><ul>\n<li>./test/autotest.py\n</li></ul>\n\n<p>To run a particular test:\n</p><ul>\n<li>./test/autotest.py --stress dmtcp1\n</li></ul>\n\n<p>Contacts (with courtesy accounts on north!):\n</p><ul>\n<li>Gene Cooperman &lt;gene@ccs.neu.edu&gt;\n</li><li>Jason Ansel &lt;jansel@MIT.EDU&gt;\n</li><li>Artem Polyakov &lt;artpol84@gmail.com&gt;\n</li></ul>\n\n<p><strong>Milestones</strong>\n\n</p><p></p><ul>\n<li><strong>Integration of DMTCP into Condor</strong>\n<ul>\n<li>Produce a many job run through condor and give statistics of failure.\n</li><li>Integrate DMTCP with our test suite\n</li><li>Determine which DMTCP files to have prefix or be nameable.\n</li></ul>\n</li><li><strong>DMTCP development</strong>\n<ul>\n<li>Fix a bug relating to the turning off if randomize_va_space\n</li><li>Implement ckpt_and_exit() and ckpt() in dmtcpaware.a.\n</li><li>Don't leave copy of stack segment around.\n</li><li>Fix DMTCP to checkpoint bash.\n</li><li>Fix checkpoint failure with PAE kernels.</li></ul>\n</li></ul>\n</blockquote>", "remarks": "<blockquote>\nI'm deferring this ticket until I have more time.\n\n<p></p><hr/>\n<em>2009-Feb-13 18:22:23 by psilord:</em> <br/>\n\nThis ticket had a flurry of activity today in regards to a lot of email back and forth with Gene Cooperman. I also read, thought about, and commented on his accepted IPDPS paper on DMPTCP.\n\n<p></p><hr/>\n<em>2009-Feb-16 15:29:37 by psilord:</em> <br/>\n\nI got some helpful information from Gene I've extraced out of an email conversation the both of us had:\n\n<p></p><div class=\"verbatim\">\n<pre>Gene wrote:\na.  One can create a coordinator manually.  If a dmtcp_checkpoint or\n  dmtcp_restart command finds no coordinator, it will create one\n  automatically.  The default location of the coordinator\n  is:  localhost (actually: 127.0.0.1), port 7779)\nb.  One can issue commands to the coordinator by any of three methods:\n  i. Manually type input to the coordinator process.\n  ii.  Use the command-line utility:  dmtcp_command -c\n  iii.  Use the dmtcpaware program API.  (If you use this, tell us.\n        We have done rudimentary testing, but this API has not\n        been heavily used out in the real world.)\nc.  When the checkpoint command is issued by the coordinator, every\n    process registered with the coordinator will create a checkpoint\n    image:  ckpt_PROCESS_NAME_*_ORIGINAL_PID_*.dmtcp\n    The checkpoint image is created in the local directory (cwd) and local host\n    of that process.\nd.  There are two ways of doing restart:\n    i. dmtcp_restart ckpt_*.dmtcp  [ Make sure you deleted any old ckp_* files\n                                if you use this method.  It's also\n                possible to issue several dmtcp_restart commands, one\n                per checkpoint image, but see the caveat below. ]\n    ii. dmtcp_restart_script.sh  [ If you use the dmtcp_restart_script.sh,\n                you may want to modify it according to issues like\n                if you have dmtcp_restart in your path already.  Read the\n                script for details. ]\ne.  dmtcp_coordinator knows about sockets.  If one process has been restarted,\n        but it has a socket to another process that has not yet been\n        restarted, the coordinator will wait until a restart command\n        is given to start the other peer process.  Once all peers have\n        been registered, dmtcp_coordinator will resume the computation.\nf.  If two process share a memory segment, then it's important that\n        their checkpoint images appear on the same dmtcp_restart command line.\ng.  We will soon (this weekend) have pid virtualization working.  If\n        two processes share a controlling terminal, it will then be\n        necessary to start them with the same dmtcp_restart command line.\nh.  As we've discussed, DMTCP currently has some limited spam that cannot\n        be silenced except by redirecting stderr.  We can fix that if\n        it becomes a problem.\ni.  There are other details.  if anything looks strange, please write\n        to the full DMTCP list, and whichever of us sees the e-mail first\n        will answer your question.\n\n&gt; Some questions I have are: can a job run under the checkpointer/restarter\n&gt; process be told explicitly where the barrier daemon is? If I recall\n&gt; correctly, there can be one barrier daemon serving an entire cluster,\n&gt; right?\n\n I believe what you refer to as the barrier daemon is our dmtcp_coordinator.\nYou are correct on all details.  If you type:  ./dmtcp_coordinator -h\nyou'll see the options for specifying a different default ports,\ndefault directories, etc.  dmtcp_checkpoint --help  also exists, as does\ndmtcp_command -h .\n\n&gt; Also, is there an existence test for a barrier daemon and if I\n&gt; say had multiple ones running, I could choose to use an arbitrary one\n&gt; for the restart?\n\n The simplest existence test for a coordinator is:  pgrep dmtcp_coordinator\n To kill a coordinator (and its registered processes), do:\n        dmtcp_command -q\n If there are multiple coordinators, you must specify a specific\n    host and port to identify your desired coordinator.  Options\n    like --port, --dir, --host exist, as well as appropriate environment\n    variables.  Note the --join option of dmtcp_checkpoint\n    if you want to start up two related processes with one coordinator.\n    Note the --checkpoint-open-files  (which is useful if you have\n    a file that is not written to sequentially).  If for all of your\n    files, you just read or write sequentially, you don't need this.\n    Restart will truncate an existing file back to its original\n    size at the time of checkpoint.\n\n&gt; And is the barrier daemon's life mandatory when the\n&gt; checkpointable program is running--example, I have 400 checkpointable\n&gt; programs on seperate machines running with one barrier server, if the\n&gt; machine running the barrier server crashes, what will happen?\n\nIf the barrier server (dmtcp_coordinator) crashes, then processes\nregistered with that coordinator may eventually die, too.  (They each\nhave a permanent socket connected to the dmtcp_coordinator.)  The\nsimplest thing in this case is to run some script to guarantee that\nyou have killed all processes associated with that coordinator.\nThen use the last dmtcp_restart_script.sh produced by the coordinator\nto start a new coordinator, and to restart all processes from the\ntime of the previous checkpoint.  Note that the script calls\ndmtcp_restart, and dmtcp_restart will automatically start a new\ncoordinator if the default one cannot be found.  So, you don't\nneed to manually start a new coordinator.\n\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Mar-02 10:22:24 by psilord:</em> <br/>\n\nWorking on this from 03/02/2009 to 03/06/2009 since that is when the DMTCP team is on spring break and can answer questions for me and perform a lot of help.\n\n<p></p><hr/>\n<em>2009-Mar-02 11:24:29 by psilord:</em> <br/>\n\nI've begun the work of figuring out how to integrate DMTCP into Condor.\n\n<p></p><hr/>\n<em>2009-Mar-03 16:37:00 by psilord:</em> <br/>\n\nI had done some work, here is a write up which I sent to Gene and his team on monday:\n\n<p></p><div class=\"verbatim\">\n<pre>\nIntegration of DMTCP into Condor\n--------------------------------\n\nPHASE 1:\n\nI'm choosing for this phase for each job to use a communal coordinator\nprocess located on the execution machine simply due to it being easier\nto attempt the integration. This creates a single point of failure,\nbut for now this is ok.\n\nArchitecture of Condor on the execute side:\n\n                    condor_master                            dmtcp_coordinator\n                          |\n                    condor_startd\n                         /|\\\ncondor_starter       condor_starter       condor_starter\n      |                    |                    |\n dmtcp_checkpoint     dmtcp_checkpoint     dmptcp_checkpoint\n  exec(a.out0)         exec(a.out1)         exec(a.out0)\n\nEach a.outN process can fork an arbitrary number of other processes.\n\nWIth the job, I'm shipping the dmtcphijack.so and mtcp.so libraries,\nalong with dmtcp_checkpoint/dmtcp_restart, with the job. I'm setting\nLD_LIBRARY_PATH, DMTCP_HIJACK_LIB, and DMTCP_CHECKPOINT_DIR to appropriate\nvalues of the execution directory on the execute machine in which the\njob wakes up.\n\n-------------------------------------------------------------------------------\nProblem:\nCondor wants to send a signal to the user job to checkpoint it using\nthe kill_sig mechanism.\n\nPossible Solution:\nCheck out DMTCP_SIGCKPT, which defaults to 12.\n\nInconsistancy:\nI tried:\n\n./bin/dmtcp_coordinator\n./bin/dmtcp_checkpoint tcsh\n\ntcsh &gt; echo $$\nXXXX\n\nand then in another window, I did:\n\nkill -12 XXXX\n\nAnd the process did NOT checkpoint--this is definitely a problem. The\ndocumentation implies USR2 is the default checkpointing signal for the\ncheckpointable process.\n\nThere should not only be a signal to \"checkpoint and keep going\", but also\na signal for \"checkpoint and commit suicide when done\".\n\n-------------------------------------------------------------------------------\nProblem:\nA DMTCP specific message gets printed out (unknown to stderr or stdout) like\nthis every two minutes when nothing is going on in the checkpointing\napplication (in a select() loop):\n\n[13286] TRACE at jsocket.cpp:204 in readAll; REASON='still waiting for data'\n     _sockfd = 821\n     len = 220\n\nThis will mess up the output of processes which are fed into inputs of other\nprocesses.\n\nSolution:\nNone found. Unknown how to turn messages off.\n\n-------------------------------------------------------------------------------\nProblem:\nWhen running a dmtcp_checkpoint job in Condor, I get this from the\ndmtcp_coordinator:\n\n**** BEGIN ****\n[22818] TRACE at jsocket.cpp:565 in monitorSockets; REASON='accepting new connec\ntion'\n     i = 0\n     sk.sockfd() = 4\n     _listenSockets[i].sockfd() = 3\n     (*__errno_location ()) = 0\n[22818] TRACE at dmtcp_coordinator.cpp:380 in onConnect; REASON='resetting _rest\noreWaitingMessages'\n     _restoreWaitingMessages.size() = 0\n[22818] TRACE at dmtcp_coordinator.cpp:394 in onConnect; REASON='Reading from in\ncoming connection...'\n[22818] TRACE at dmtcp_coordinator.cpp:400 in onConnect; REASON='got user comman\nd from dmtcp_command'\n     hello_remote.params[0] = 115\n[22818] TRACE at jsocket.cpp:565 in monitorSockets; REASON='accepting new connec\ntion'\n     i = 0\n     sk.sockfd() = 4\n     _listenSockets[i].sockfd() = 3\n     (*__errno_location ()) = 0\n[22818] TRACE at dmtcp_coordinator.cpp:380 in onConnect; REASON='resetting _rest\noreWaitingMessages'\n     _restoreWaitingMessages.size() = 0\n[22818] TRACE at dmtcp_coordinator.cpp:394 in onConnect; REASON='Reading from in\ncoming connection...'\n[22818] NOTE at dmtcp_coordinator.cpp:411 in onConnect; REASON='worker connected\n'\n     hello_remote.from = 416dbb83-23995-49ac4785(-1)\n[22818] NOTE at dmtcp_coordinator.cpp:355 in onDisconnect; REASON='client discon\nnected'\n     client.identity() = 416dbb83-23995-49ac4785\n**** END ****\n\nAnd the stderr of the job has this:\n\n**** BEGIN ****\nDMTCP/MTCP  Copyright (C) 2006-2008  Jason Ansel, Michael Rieker,\n                                       Kapil Arya, and Gene Cooperman\nThis program comes with ABSOLUTELY NO WARRANTY.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; see COPYING file for details.\n(Use flag \"-q\" to hide this message.)\n\n**** END ****\n\nbut the job (a very simple shell script) doesn't produce any stdout at all.\n\nIt appears that dmtcp_checkpoint exited in a non-signal manner with a 1.\n\nMaybe it saw something it didn't like and exited in a non-common error\ncase?\n\nSolution:\nHrm, the program wasn't able to find mtcp.so (but I had supplied\ndmtcphijack.so), once I supplied it for file transfer, and set\nLD_LIBRARY_PATH to the working directory the job started up in that\ncontained those libraries, the codes got farther and part of the actual\njob ran.\n\nComments:\nHowever, only *part* of the code ran, it looks like it was killed in the\nmiddle of running. Unknown why.\n\n-------------------------------------------------------------------------------\nProblem:\nThe hijack library and whatnot can apparently exit(1) without any messages\ngetting written anywhere interesting. Making it it very hard to debug when\nDMTCP or MTCP gets into trouble and bails.\n\nSolution:\nEnsure debug messages can be emitted _somewhere_.\n\n-------------------------------------------------------------------------------\nProblem:\nWhat is meaning of this message and why would I ever see it?\n\n[26679] ERROR at execwrappers.cpp:255 in protectLD_PRELOAD; REASON='JASSERT(strc\nmp ( actual,expctd ) ==0) failed'\n     actual = /scratch/psilord/local/lib/dmtcp/dmtcphijack.so\n     expctd = ./dmtcphijack.so\nMessage: eeek! Someone stomped on LD_PRELOAD\nTerminating...\n\nIt seems to possibly be the cause of my issue since dmtcp_checkpoint exits\nwith 1 in this case.\n\nSolution:\n\nNone.\n\n\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Mar-11 11:41:44 by psilord:</em> <br/>\n\nOk, after a bit of work last week, I'm writing a bit of it into here.\n\n<p>So far, I have a vanilla universe shim script which starts a coordinator on an ephemeral port, the checkpointing job, and transforms a checkpoint signal (described by kill_sig in the submit file) into a dmtcp_command c and subsequent dmtcp_command k. The shim script handles restart by detection of a\nshell script emitted by the coordinator process and executes it, causing the restart of the job.\n\n</p><p>At this time the restart fails because it appears restarting the checkpoint in a different cwd has a bug. But once that is fixed, the restart should function and we can start to test dmtcp in condor in earnest.\n\n</p><p>The priorities as they are currently defined for our collaboration are:\n\n</p><p><strong>DMTCP Folks</strong>:\n\n</p><p></p><ol>\n<li>Fix the non-restart of ckpt with different cwd bug\n</li><li>Write a ckpt() and ckpt_and_exit() interface for dmtcpaware\n</li><li>Fix a dmtcp bug with checkpointing bash (to get matlab working)\n</li><li>Test parrot with dmtcp.\n</li></ol>\n\n<p><strong>Me</strong>:\n\n</p><p></p><ol>\n<li>Wait until Problem 1 is fixed.\n</li><li>Test restarting of codes with my shim layer and test codes.\n</li><li>Determine \"best practices\" to use dmtcp with queue 1000\n</li><li>Find a \"real\" job and submit it and see what happens.\n</li></ol>\n\n<p></p><hr/>\n<em>2009-Mar-16 16:45:52 by psilord:</em> <br/>\n\nok they fixed number 1.\n\n<p>I rewrote my shim script a little bit to handle stdin/stdout/stderr as being totally separate than the specification of them that Condor desires. This is because Condor truncates the stdout on each new invocation of the job, and it just wasn't working out. Now the shim script is explicitly told where those files are and a log file that holds the actions of the shim script. At this point, I see checkpoints and restarts.\n\n</p><p>However, some output is duplicated in a file the test program is reading, so I've sent that back to them.\n\n</p><p></p><hr/>\n<em>2009-Mar-17 10:45:04 by psilord:</em> <br/>\n\nOk, they fixed the bug (by recording the size of the file at checkpoint time and truncating to to that when the file was opened with \"a\") and I have now seen multiple checkpoint restart cycles function correctly with my test job.\n\n<p>I'm going to submit a few hundred into the pool and see what happens.\n\n</p><p></p><hr/>\n<em>2009-Mar-24 14:26:50 by psilord:</em> <br/>\n\nIt turns out that DMTCP breaks when a checkpoint/restart cycle happens between PAE (physical address extension) kernels and non-PAE kernels. So, in my tests I've limited that to not happen with my requirements expression. I also saw a bug where the dmtcp_coordinator simply didn't write dmtcp_restart_script.sh, but didn't appear to leave any evidence for why. I need to look a little deeper into that one to understand it.\n\n<p>However, even with a few restarts happening that should be resumptions, 100 jobs which write to their stdout and a file went through the system and came out ok after at least one vacation by me and general movement through the pool.\n\n</p><p>This is pretty nice.\n\n</p><p></p><hr/>\n<em>2009-Jun-04 14:20:20 by psilord:</em> <br/>\n\nAfter communication with Gene, updated the milestones.\n\n<p></p><hr/>\n<em>2009-Jun-22 11:09:42 by psilord:</em> <br/>\n\nI ran a thousand jobs through the condor pool, making sure they didn't cross between PAE and non-PAE kernels, and had 15 jobs which had trouble (but completed). The trouble was that the coordinator either appears to have been killed then restarted immediately (after writing some output), or it was asked to checkpoint and never wrote a dmtcp_restart_script.sh file.\n\n<p>I'm in the process of writing a small script to perform the analysis on the vast output of this test run I have to make it easy to figure out what happens.\n\n</p><p></p><hr/>\n<em>2009-Nov-04 15:56:19 by psilord:</em> <br/>\n\nCory mentioned he had a compilable matlab script suitable for testing DMTCP. As soon as I talk to him, we'll start on it.\n\n<p></p><hr/>\n<em>2009-Nov-16 13:10:58 by psilord:</em> <br/>\n\nThis is an interesting tidbit for the modeling of ckpt_and_ext().\n\n<p></p><div class=\"verbatim\">\n<pre>But at this moment I have some problems with ckpt_and_exit when DMTCP\nconfigured with --enable-debug option. It would be also interesting to test\nrelease/debug versions on your machines and OS.\n\nTo emulate ckpt_and_exit use:\nif (dmtcpCheckpoint () == DMTCP_AFTER_CHECKPOINT){\n    exit (0);\n}\n\nand compile with dmtcpaware library:\ngcc -o test test.c libdmtcpaware.a\n\nYou can find libdmtcpaware.a in [DMTCP root dir]/trunk/dmtcpaware.\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Nov-20 16:44:42 by psilord:</em> <br/>\n\nRan into a problem I wrote up to the DMTCP guys:\n\n<p></p><div class=\"verbatim\">\n<pre>I've run into an interesting problem while trying to dmtcp_checkpoint\ncompiled matlab jobs.\n\nI get this error with dmtcp revision 421 when trying to run my matlab job:\n\nMy Own Exception: Fatal error loading library\n/afs/cs.wisc.edu/p/condor/workspaces/matlab/linux32/v710/bin/glnx86/libmx.so\nError: /usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.9' not found (required by\n/afs/cs.wisc.edu/p/condor/workspaces/matlab/linux32/v710/bin/glnx86/libmx.so)\n\nI've analyzed to some degree why I get it...\n\nWhen stracing the compiled matlab job without dmtcp_checkpoint, I get something\nlike this:\n\n[pid 32165] execve(\"./helloworld\", [\"helloworld\"], [/* 49 vars */]) = 0\n[pid 32165]\nopen(\"/afs/cs.wisc.edu/p/condor/workspaces/matlab/linux32/v710/runtime/glnx86/li\nbmwmclmcrrt.so\", O_RDONLY) = 3\n[pid 32165] open(\"/etc/ld.so.cache\", O_RDONLY) = 3\n[pid 32165] open(\"/lib/libm.so.6\", O_RDONLY) = 3\n[pid 32165] open(\"/lib/libpthread.so.0\", O_RDONLY) = 3\n[pid 32165] open(\"/lib/libc.so.6\", O_RDONLY) = 3\n[pid 32165] open(\"/lib/libdl.so.2\", O_RDONLY) = 3\n[pid 32165]\nopen(\"/afs/cs.wisc.edu/p/condor/workspaces/matlab/linux32/v710/runtime/glnx86/..\n/../sys/os/glnx86/libstdc++.so.6\", O_RDONLY) = 3\n[snip]\n\nThe last libstdc++.so.6 is the one supplied with the runtime of the compiled\nmatlab process. It is needed by\n/afs/cs.wisc.edu/p/condor/workspaces/matlab/linux32/v710/bin/glnx86/libmx.so.\nThe specific symbol in question is an 'A' type\nsymbol in the libstc++.so.6 library supplied in the runtime. It appears\nthis libstdc++.so from the runtime is the only libstdc++ library loaded when\nexecing ./helloworld.\n\nHere is the same thing, but with dmtcp_checkpoint infront of it:\n\n[pid 31925] execve(\"./helloworld\", [\"helloworld\"], [/* 57 vars */]PANIC:\nattached pid 31926 exited with 0\n[pid 31925]\nopen(\"/afs/cs.wisc.edu/p/condor/workspaces/cory/DMTCP_Setup/dmtcp/trunk/dmtcp/sr\nc/dmtcphijack.so\", O_RDONLY) = 3\n[pid 31925]\nopen(\"/afs/cs.wisc.edu/p/condor/workspaces/matlab/linux32/v710/runtime/glnx86/li\nbmwmclmcrrt.so\", O_RDONLY) = 3\n[pid 31925] open(\"/etc/ld.so.cache\", O_RDONLY) = 3\n[pid 31925] open(\"/lib/libm.so.6\", O_RDONLY) = 3\n[pid 31925] open(\"/lib/libpthread.so.0\", O_RDONLY) = 3\n[pid 31925] open(\"/lib/libc.so.6\", O_RDONLY) = 3\n[pid 31925] open(\"/lib/libdl.so.2\", O_RDONLY) = 3\n[pid 31925] open(\"/usr/lib/libstdc++.so.6\", O_RDONLY) = 3\n[snip]\n\nIf you notice, the system libstdc++ gets loaded on the second run\n(and there is the PANIC: notice which I haven't figure out yet) and\nthe matlab runtime libstdc++ is never loaded. This causes the runtime\ndynamic link failure.\n\nIs there any way I can avoid this problem? We have a large user (millions of\njobs) who would like to use DMTCP with matlab in this fashion and I'm testing\nit out for them.\n\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Nov-30 10:12:04 by psilord:</em> <br/>\n\nThe manner of avoidance for the above problem is that I can use matlab's runtime for <strong>both</strong> dmtcp and matlab.\n\n<p></p><hr/>\n<em>2009-Dec-26 21:18:14 by matt:</em> <br/>\n\nDo you need kill_sig etc to be honored in the Vanilla Universe for this to work?\n\n<p></p><hr/>\n<em>2010-Jan-20 16:06:39 by psilord:</em> <br/>\n\nThis work is stalled due to DMTCP failing 15 of our stduniv test programs. Once those get fixed, I can resume this work.\n\n<p></p><hr/>\n<em>2010-Mar-05 13:16:02 by psilord:</em> <br/>\n\nI have been in contact with the DMTCP folks helping them with subtleties in what our programs test and explaining use cases. They've fixed the majority of the bugs and only have a few left.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-01 14:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4810c6c57d7a160fd6c8d483d7b89a5df747e2a2\">[16468]</a></span>: Detect the ability to compile DMTCP and make the test suite build it. Many tests in the test suite will use DMTCP and I just want one copy of it. DMTCP is checked in as a source tarball (see ticket <span class=\"ticket\"><a class=\"stalled\" href=\"/wiki-archive/tickets/?ticket=23\" onclick=\"get_ticket_and_populate_wrapper('23'); return false;\" title=\"Investigation of the DMTCP checkpointing package\">#23</a></span>) and allows easy changing as we find bugs in it or request features. This is for ticket <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=366\" onclick=\"get_ticket_and_populate_wrapper('366'); return false;\" title=\"Allow our ckpt tests to run against DMTCP\">#366</a></span>.  (By Peter Keller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Nov-19 10:56", "status": "stalled", "created": "2009-Jan-15 14:21", "fixed_version": "2009-Jan-15 14:21", "broken_version": "", "priority": "3", "subsystem": "Std", "assigned_to": "psilord", "derived_from": "#1000", "creator": "psilord", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu, tstclair@redhat.com", "due_date": ""}