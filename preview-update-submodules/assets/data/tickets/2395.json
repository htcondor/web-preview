{"id": 2395, "title": "Ticket #2395: New ClassAd functions: versioncmp, versionokay", "description": "<blockquote>\nAs people increasingly advertise version numbers for libraries, kernels, and the like, they'll want to do range comparisons.\n\n<p>A current implementation might look something like:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\"># Machine:\nLIBC_VERSION_MAJOR = 4\nLIBC_VERSION_MINOR = 12\nLIBC_VERSION_REVISION = 42\n\n# Job\nMIN_LIBC_VERSION_MAJOR = 4\nMIN_LIBC_VERSION_MINOR = 12\nMIN_LIBC_VERSION_REVISION = 36\nREQUIREMENTS = \\\n   (MIN_LIBC_VERSION_MAJOR &gt; LIBC_VERSION_MAJOR) || \\\n   (MIN_LIBC_VERSION_MAJOR == LIBC_VERSION_MAJOR &amp;&amp; \\\n       MIN_LIBC_VERSION_MINOR &gt; LIB_VERSION_MINOR) || \\\n   (MIN_LIBC_VERSION_MAJOR == LIBC_VERSION_MAJOR &amp;&amp; \\\n       MIN_LIBC_VERSION_MINOR == LIB_VERSION_MINOR &amp;&amp; \\\n       MIN_LIBC_VERSION_REVISION &gt;= LIBC_VERSION_REVISION)\n</pre></div>\n\n\n<p>This is a mess to write and to read.  It's easy to make a mistake.  It gets even longer if you want to test for a maximum version.  It grows especially confusion if you want to work with strings in the form \"4.13.36\" and end up playing with the string manipulation functions.\n\n</p><p>Proposed: new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> functions for comparing version numbers.\n\n</p><p>(The proposal for comparing versions numbers below is based on a system I wrote for comparing version numbers of RPMs based strictly on the file name. While you can create pathological cases, I believe it will work for the overwhelming number of version number strings.)\n\n</p><p><span class=\"section\"></span></p><h2>Proposed interface</h2>\n\n<p><strong>Integer versionCmp(String a, String b)</strong>\n\n</p><p>Compare two version numbers in strings a and b. If version a is earlier than b, a negative number is returned.  If b is earlier than a, a positive number is returned. If the versions are the same, 0 is returned.\n\n</p><p>For comparisons, versions numbers are broken into chunks.  Punctuation is removed and delimits chunks.  Letters and digits are broken into discrete chunks.  So 4.12.42a-ac would break into the chunks 4, 12, 42, a, and ac.\n\n</p><p>To compare two versions (which is to say, series of chunks), go chunk by chunk.  If the chunk consists of digits, it is converted to an integer and the two compared, returning -1 if a&lt;b and 1 if a&gt;b.  If letters, the two are compared with strcmp, returning on a positive or negative number, continuing on a 0.  If the two chunks are identical, move to the next chunk.  If all chunks are identical, return 0. If one series of chunks runs out of chunks to compare but the other doesn't, the shorter series is \"earlier\" (so versionCmp(\"2\",\"2.3\") is -1).  If a chunk consists of \"<span class=\"quote\">*</span>\" (which is not considered punctuation), comparison immediately stops and 0 is returned (effectively making \"<span class=\"quote\">*</span>\" a wildcard valid only once at the end of a version number)\n\n</p><p><strong>Boolean versionOkay(String test, String min, String max)</strong>\n\n</p><p>Is the version test between min and max, inclusive? min or max can be UNDEFINED to indicate no-minimum or no-maximum.  max can be omitted and will default to UNDEFINED.  Functionally identical to:\n</p><div class=\"code\">\n<pre class=\"code\">((min =?= UNDEFINED) || (versionCmp(test,min)&gt;=0)) &amp;&amp; ((max =?= UNDEFINED) || (versionCmp(test,max)&lt;=0))\n</pre></div>\n\n\n<p><span class=\"section\"></span></p><h2>Open questions</h2>\n\n<p><strong>Different data types:</strong> How do you compare \"2.3-a\" and \"2.3.4\"?  Or , for Linux kernel's \"2.4.21-32.EL\" and \"2.6.9-89.33.1.EL.cernsmp\".\n</p><ul>\n<li>If either side is alphabetic, strcmp. This is likely \"wrong,\" but any answer is likely to be nonsensical.  How often will we get to this point where earlier chunks won't resolve the problem?\n</li><li>Declare digits to sort earlier than letters. (This is identical to using strcmp, but removes the ASCII assumption to ordering.)\n</li></ul>\n\n<p><strong>Different version lengths:</strong> For Red Hat versions, compare \"5\" to \"5.1\".\n</p><ul>\n<li>Padding with zeros (so treat \"5\" as \"5.0\") sounds promising, but may the wrong answer for max in versionOkay.  For example, how do you say, \"anything 5.x\"? versionOkay(ver, \"5.0\", \"5.99999999\") would work, but is ugly and may fail if 5.A follows 5.9.\n</li><li>Stop comparison at shorter version: functionality equivalent to a wildcard.  So versionOkay(ver, \"5\", \"5\") would successfully match anything that began with \"5.x\" (and a few other variations).  This is problematic if your version really is 5 and is followed by 5.1 and you want exactly 5; workaround is to advertise \"5\" as \"5.0\".  It also screws you if you want a very specific version number and you can't predict sub versions.  So I want exactly \"2.3.4\" and \"2.3.4a\" comes out; I'll end up matching it.\n</li><li>Specify length to compare in chunks, defaulting to 0 meaning \"all\". Puts additional burden of understanding on the user.  Complicates interface to both versionCmp and versionOkay.\n</li><li>Explicitly understand \"<code>*</code>\" as \"wildcard.\"  It can only be at the end (putting it in the middle is nonsensical).  When comparing chunks, if we hit \"<code>*</code>\" on either side, we stop and return 0.  So \"2.3.4\" will not match \"2.3.4a\", but \"2.3.4.*\" or \"2.3.4*\" will.   This solution is currently documented in the proposed interface above.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2020-Aug-21 14:10:43 by tlmiller:</em> <br/>\n\nAbandoned in favor/duplicate of <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=7504\" onclick=\"get_ticket_and_populate_wrapper('7504'); return false;\" title=\"Expose version comparison in ClassAds\">#7504</a></span>.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2020-Aug-21 14:10", "status": "abandoned", "created": "2011-Aug-16 14:22", "fixed_version": "2011-Aug-16 14:22", "broken_version": "v000000", "priority": "5", "subsystem": "Libs", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}