{"id": 2885, "title": "Ticket #2885: fermi can't replicate old behavior of accounting groups", "description": "<blockquote>\n<div class=\"verbatim\">\n<pre>\nI am trying to test the group quotas in condor 7.6.6\nSetup was working OK before I enabled quotas.  I re-enabled quotas\nand restarted condor and  this is what I see in the NegotiatorLog.\n\nThis is an unexpected surprise.  I did not expect the\nstatic quotas to be dynamically rescaled based on the\nsize of the cluster.  In our 7.4 setup we are typically oversubscribing\nthe quotas by a factor of 2.5 to 3.  Is there a way in which\nI can get the old behavior back?  (the numbers are even more drastic\nright now because I pulled my quota file from a 4800-slot pool\nand put it on a test 30-slot pool.)\n\nAlso--most of the discussion about this bug </pre></div>\n\n\n<p>(wiki tickets <span class=\"ticket\"><a class=\"pending\" href=\"/wiki-archive/tickets/?ticket=2678\" onclick=\"get_ticket_and_populate_wrapper('2678'); return false;\" title=\"RFE: expose accounting group negotiation-ordering to configuration\">#2678</a></span> and <span class=\"ticket\"><a class=\"pending\" href=\"/wiki-archive/tickets/?ticket=2679\" onclick=\"get_ticket_and_populate_wrapper('2679'); return false;\" title=\"RFE: Alter semantic of GROUP_AUTOREGROUP to replicate legacy behavior\">#2679</a></span>)\n\n</p><p></p><div class=\"verbatim\">\n<pre>focused on the behavior of GROUP_AUTOREGROUP, which is false for me.\nWhat other settings do I need to recover the 7.4.4 behavior?\n\n-------------------------------------------------\n\nPerhaps I wasn't paying attention to this thread properly up until\nnow.  I've filed a condor-admin ticket with the first surprise I found,\nnamely that I get dynamically-apportioned group quotas unconditionally\nand no way to get them back.\n\nAs I've been reading the wiki entries it seems that you guys were focusing\non the CDF case where GROUP_AUTOREGROUP is enabled.  In the FermiGrid\ncase GROUP_AUTOREGROUP is not enabled and it never has been.\n\nState of condor 7.4.3 setup:\n\nI have two condor_schedd's which append an AccountingGroup to\neverything they submit.  all these groups have quotas\n\nGROUP_QUOTA_group_a = 300\nGROUP_QUOTA_group_b = 600\nand so forth.\nThe sum of the various group quota is much greater than the\nactual number of slots in the pool.  If the pool is full then\nit should be soved by fair-share.\n\nI have one condor_schedd which does not append an AccountingGroup to\nanything.  These users are penalized by a priority factor of 1000000\nand they can also be pre-empted at any point.\n\n[root@fnpc6x1 grid-security]# condor_config_val PREEMPTION_REQUIREMENTS\n( JobUniverse==5 &amp;&amp; MY.AccountingGroup =?= UNDEFINED &amp;&amp;\nTARGET.AccountingGroup =!= UNDEFINED )\n\nUnder 7.6.6\nI have GROUP_ACCEPT_SURPLUS = FALSE\nand GROUP_AUTOREGROUP = FALSE\n\nStatus:\n1) Pre-emption does work like it did before.  Stuff with no\nAccountingGroup does get pre-empted by stuff that does have an\nAccountingGroup.\n\n2) The quotas do not work like they did before.  Dynamic quotas are\nhappening automatically and I don't see why, or how to beat it.  that\nis the main thing I need to figure out.-\n\n3) I am not sure what happens between various ungrouped users\nin terms of negotiation, still checking that.\n\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2012-Mar-15 09:30:54 by eje:</em> <br/>\n\nRegarding the rfe for disabling normalization of over-subscribed static quotas, I'm concerned about how that impacts the ability to sanely support the mixed-static/dynamic quota configuration scenario, which we claim to support.\n\n<p>We'd also have to either disable proportional surplus redistribution (\"accept-surplus\") or document that oversubscribed static quotas will result in possibly weird behavior.\n\n</p><p>Re-reading Steve Timm's emails, it still seems to me that fermi's use case is most directly served by providing information about whether a job matched under \"none\" (and/or, under autoregroup) or some other group.  Or just providing the matched-under group name, which encompasses that information\n\n</p><p></p><hr/>\n<em>2012-Mar-22 17:48:08 by eje:</em> <br/>\n\nFirst test for proposed patch: using <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteAutoregroup\" title=\"Remote Autoregroup\">RemoteAutoregroup</a></span>\n\n<p>In the following, I use 'svhist' which can be found here:\n<a class=\"external\" href=\"https://github.com/erikerlandson/bash_condor_tools\">https://github.com/erikerlandson/bash_condor_tools</a>\n\n</p><p>Begin with the following configuration, which sets a preemption policy (PREEMPTION_REQUIREMENTS = <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteAutoregroup\" title=\"Remote Autoregroup\">RemoteAutoregroup</a></span>), in other words \"jobs negotiating under the autoregroup phase are considered for preemption\":\n</p><div class=\"code\">\n<pre class=\"code\">NEGOTIATOR_DEBUG = D_FULLDEBUG | D_MACHINE\nNEGOTIATOR_USE_SLOT_WEIGHTS = FALSE\nNEGOTIATOR_INTERVAL = 30\nSCHEDD_INTERVAL\t= 15\n\n# turn off round robin and multiple allocation rounds\nHGQ_ROUND_ROBIN_RATE = 100000000\nHGQ_MAX_ALLOCATION_ROUNDS = 1\n\n# make sure preemption can occur without friction\nMAXJOBRETIREMENTTIME = 0\nCLAIM_WORKLIFE = 0\nPREEMPT = False\nRANK = 0\nNEGOTIATOR_CONSIDER_PREEMPTION = TRUE\n\n# set a preemption requirements expression to test new attributes:\nPREEMPTION_REQUIREMENTS = RemoteAutoregroup\n\nNUM_CPUS = 20\nGROUP_NAMES = a, b\n\nGROUP_QUOTA_a = 5\nGROUP_QUOTA_b = 5\n\nGROUP_AUTOREGROUP = TRUE\nGROUP_ACCEPT_SURPLUS = FALSE\n\nGROUP_SORT_EXPR = GroupResourcesInUse / (1.0 + GroupQuota)\n</pre></div>\n\n\n<p>Set the prio factor for \"a.user\" and \"b.user\" to 10, setting them up for preemption:\n</p><div class=\"code\">\n<pre class=\"code\">$ condor_userprio -setfactor a.user@localdomain 10\nThe priority factor of a.user@localdomain was set to 10.000000\n$ condor_userprio -setfactor b.user@localdomain 10\nThe priority factor of b.user@localdomain was set to 10.000000\n</pre></div>\n\n\n<p>Submit the following jobs to groups \"a\" and \"b\":\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\ncmd = /bin/sleep\nargs = 600\nshould_transfer_files = if_needed\nwhen_to_transfer_output = on_exit\n+AccountingGroup=\"a.user\"\nqueue 10\n+AccountingGroup=\"b.user\"\nqueue 10\n</pre></div>\n\n\n<p>Let those jobs begin running.  Check the behavior of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteAutoregroup\" title=\"Remote Autoregroup\">RemoteAutoregroup</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteNegotiatingGroup\" title=\"Remote Negotiating Group\">RemoteNegotiatingGroup</a></span>:\n</p><div class=\"code\">\n<pre class=\"code\">$ svhist RemoteAutoregroup RemoteNegotiatingGroup AccountingGroup\n      5 false | a | a.user@localdomain\n      5 false | b | b.user@localdomain\n      5 true | &lt;none&gt; | a.user@localdomain\n      5 true | &lt;none&gt; | b.user@localdomain\n     20 total\n</pre></div>\n\n\n<p>from the above we see that autoregroup allowed \"a.user\" and \"b.user\" to run their remaining jobs above quota.  For those jobs, <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteAutoregroup\" title=\"Remote Autoregroup\">RemoteAutoregroup</a></span> is true, and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteNegotiatingGroup\" title=\"Remote Negotiating Group\">RemoteNegotiatingGroup</a></span> is \"&lt;none&gt;\", which is the correct behavior.\n\n</p><p>Now submit the following jobs.  These will negotiate under group \"&lt;none&gt;\":\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\ncmd = /bin/sleep\nargs = 600\nshould_transfer_files = if_needed\nwhen_to_transfer_output = on_exit\n+AccountingGroup=\"none.user\"\nqueue 10\n</pre></div>\n\n\n<p>Wait for the negotiator to cycle, then check that these new jobs are able to preempt \"a\" and \"b\" jobs that negotiated under \"&lt;none&gt;\" previously (but not the jobs that negotiated under their respective groups):\n</p><div class=\"code\">\n<pre class=\"code\">$ svhist RemoteAutoregroup RemoteNegotiatingGroup AccountingGroup\n      5 false | a | a.user@localdomain\n      5 false | b | b.user@localdomain\n     10 true | &lt;none&gt; | none.user@localdomain\n     20 total\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Mar-22 18:58:31 by eje:</em> <br/>\n\nTest 2: demonstrating <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteNegotiatingGroup\" title=\"Remote Negotiating Group\">RemoteNegotiatingGroup</a></span> (and also <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteGroup\" title=\"Remote Group\">RemoteGroup</a></span>):\n\n<p>Using the same configuration as with the first test, above, except for a different preemption policy:\n</p><div class=\"code\">\n<pre class=\"code\"># jobs negotiating in their group can preempt jobs that negotiated outside their group\nPREEMPTION_REQUIREMENTS = (SubmitterNegotiatingGroup == SubmitterGroup) &amp;&amp; (RemoteNegotiatingGroup != RemoteGroup)\n</pre></div>\n\n\n<p>This time, alter the prio factors for \"b.user\" and \"none.user\":\n</p><div class=\"code\">\n<pre class=\"code\">$ condor_userprio -setfactor b.user@localdomain 10\nThe priority factor of b.user@localdomain was set to 10.000000\n$ condor_userprio -setfactor none.user@localdomain 10\nThe priority factor of none.user@localdomain was set to 10.000000\n</pre></div>\n\n\n<p>Next, submit the following jobs, where both \"b.user\" and \"none.user\" will acquire some slots by negotiating under \"&lt;none&gt;\":\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\ncmd = /bin/sleep\nargs = 600\nshould_transfer_files = if_needed\nwhen_to_transfer_output = on_exit\n+AccountingGroup=\"none.user\"\nqueue 10\n+AccountingGroup=\"b.user\"\nqueue 10\n</pre></div>\n\n\n<p>Verify that b.user got 5 of its slots from \"b\" via quota, and another 5 via autoregroup.  Observe that <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteGroup\" title=\"Remote Group\">RemoteGroup</a></span> shows that group \"none\" maps to \"&lt;none&gt;\".\n</p><div class=\"code\">\n<pre class=\"code\">$ svhist RemoteAutoregroup RemoteNegotiatingGroup AccountingGroup RemoteGroup\n      5 false | b | b.user@localdomain | b\n      5 true | &lt;none&gt; | b.user@localdomain | b\n     10 true | &lt;none&gt; | none.user@localdomain | &lt;none&gt;\n     20 total\n</pre></div>\n\n\n<p>Now submit some jobs for \"a.user\" - these will have to preempt to run:\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\ncmd = /bin/sleep\nargs = 600\nshould_transfer_files = if_needed\nwhen_to_transfer_output = on_exit\n+AccountingGroup=\"a.user\"\nqueue 10\n</pre></div>\n\n\n<p>Let these new jobs have a chance to negotiate.  Now we verify that \"a.user\" was able to preempt \"b.user\" jobs negotiated in autoregroup (\"&lt;none&gt;\") since it's group name is not its negotiating-group name.  Jobs negotiated under \"b\" are not preempted.  Jobs from \"none.user\" are also not preempted because they negotiated under their group \"&lt;none&gt;\":\n</p><div class=\"code\">\n<pre class=\"code\">$ svhist RemoteAutoregroup RemoteNegotiatingGroup AccountingGroup RemoteGroup\n      5 false | a | a.user@localdomain | a\n      5 false | b | b.user@localdomain | b\n     10 true | &lt;none&gt; | none.user@localdomain | &lt;none&gt;\n     20 total\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Mar-28 10:03:20 by timm:</em> <br/>\n\nI think it is a very good feature to add the fields that are being proposed here and there are any number of ways they could be used.\nMy question is--could this feature be used to implement a\nfixed-number quota in the negotiator.\n\n<p>i.e. if I define in the 20-slot pool\n\n</p><p>GROUP_QUOTA_group_a = 15\nGROUP_QUOTA_group_b = 15\n\n</p><p>Is there any way to use the original un-normalized quota in\nthe Negotiatior expression to make sure that the sum of\n\n</p><p>a.user (autoregroup-false) and a.user (autoregroup-true) is 15 (not 10)\nand above that, a.user(autoregroup-true) jobs or none.user jobs\ncould get pre-empted?\n\n</p><p>As far as it appears to me, these are good information fields to have available\nand they might work but it would be better to also allow a\nnon-normalized (oversubscribed) quota in which fair-share is applied\nto the groups if it is not possible to give all of them their quota at once.  In six years of running in oversubscribed mode with oversubscription factors of pi or greater this use case has rarely if ever happened.\n\n</p><p>Our use cases involve a number of different applications which make stateful entries to a database during the course of the job and if they are pre-empted mid run it takes manual intervention from the operators to sort them out and resubmit the things that failed.  therefore we want to supply two clear\nsubmit paths for our users--\nOne that allows them a quota of N non-preemptable slots,\nand a different one that allows them to submit pre-emptable jobs to fill up the\navailable slots.\n\n</p><p>Finally--at the sublevels of the group hierarchies it would be\nhelpful to have oversubscription available at once.\nFor instance group_beamline allocated 500 slots with any\none of group_beamline.a, group_beamline.b, group_beamline.c allowed to take\nup to 400 slots but the sum of the three never to exceed 500 and settled by\nfair-share if it doesn.t\nOtherwise hierarchical quotas give you nothing that couldn't be accomplished by making individually-named groups.\n\n</p><p>Steve Timm\n\n</p><p></p><hr/>\n<em>2012-Mar-28 11:41:44 by eje:</em> <br/>\n\nwith respect to:\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \na.user (autoregroup-false) and a.user (autoregroup-true) is 15 (not 10) and above that, a.user(autoregroup-true) jobs or none.user jobs could get pre-empted?\n</td></tr></tbody></table></div>\n\nDoes that refer only to group \"a\"? In other words, is it the intent to provide a symmetric guarantee to group \"b\", or not?\n\n<p>If you wanted \"a\" to be guaranteed 15 slots that are \"nonpreemptable\", you could set \"a\"'s quota to 15, and set \"b\"'s quota to 5 but allow \"b\" to access autoregroup if slots are available.  And set a preemption policy that makes any job negotiated under group \"a\", autoregroup false, not preemptable using the proposed patch.\n\n</p><p>Clearly, it is numerically impossible to simultaneously guarantee both \"a\" and \"b\" 15 nonpreemptable slots when you really have 20 total slots.\n\n</p><p>regarding:\n</p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nFinally--at the sublevels of the group hierarchies it would be helpful to have oversubscription available at once. For instance group_beamline allocated 500 slots with any one of group_beamline.a, group_beamline.b, group_beamline.c allowed to take up to 400 slots but the sum of the three never to exceed 500 and settled by fair-share if it doesn.t\n</td></tr></tbody></table></div>\n\nThat behavior is accomplished with a configuration using GROUP_ACCEPT_SURPLUS and/or GROUP_ACCEPT_SURPLUS_&lt;grpname&gt;.  However, it is currently forbidden to use accept-surplus and autoregroup simultaneously.  That decision could be changed, just by removing the check that forbids it.\n\n<p></p><hr/>\n<em>2012-Mar-28 11:57:42 by eje:</em> <br/>\n\nIt may be worth highlighting that quotas are about guaranteed minimums, but there's the related idea of enforcing maximums, which is currently the purview of concurrency limits.\n\n<p>So, a group \"a\" could be allowed to access autoregroup, over and above its quota, but if you also wanted to enforce the idea that \"a\" submitters also get a <strong>maximum</strong> of 15 nonpreemptable jobs, that might be accomplished by employing a concurrency limit \"a_preemptable_LIMIT = 15\"\n\n</p><p>MAXJOBRETIREMENTTIME seems possibly applicable to your need to make sure that jobs complete when they are accessing the database, although it's not scoped in any way.\n\n</p><p></p><hr/>\n<em>2012-Mar-28 13:00:58 by zmiller:</em> <br/>\n\ni think the distinction between minimum and maximum is the important one, and where the confusion in this matter is coming from, and where the major departure from 7.4 behavior occurred.\n\n<p>here are example allocations from steve:\n\n</p><p></p><div class=\"verbatim\">\n<pre>&gt;SETUP:\n&gt;there are 500 slots.  there are three groups, A, B, and C.\n&gt;\n&gt;A has a quota of 300 slots.\n&gt;B has a quota of 300 slots.\n&gt;C has no quota, but 1000000 priority penalization, and can be preempted.\n\n&gt;EXAMPLE 1:\n&gt;A has 500 jobs.\n&gt;B has 0 jobs.\n&gt;C has 0 jobs.\nallocation A=300 ,B=0 ,C=0\n\n&gt;EXAMPLE 2:\n&gt;A has 0 jobs.\n&gt;B has 0 jobs.\n&gt;C has 500 jobs.\nallocation A=0 ,B=0 ,C=500\n\n&gt;EXAMPLE 3:\n&gt;A has 500 jobs.\n&gt;B has 200 jobs.\n&gt;C has 0 jobs.\nallocation A=300 ,B=200 ,C=0\n\n&gt;EXAMPLE 4:\n&gt;A has 500 jobs.\n&gt;B has 0 jobs.\n&gt;C has 200 jobs.\nallocation A=300 ,B=0 ,C=200\n\n&gt;EXAMPLE 5:\n&gt;A has 200 jobs.\n&gt;B has 200 jobs.\n&gt;C has 200 jobs.\nallocation A=200 ,B=200 ,C=100\nIf C got started first with 200 they would get pre-empted to get A and B\nthere.\n\n&gt;EXAMPLE 6:\n&gt;A has 300 jobs.\n&gt;B has 600 jobs.\n&gt;C has 0 jobs.\nallocation A=~250 ,B=~250 ,C=0\n(based on fair-share between the group baset on recend usage priorities)\n\n&gt;EXAMPLE 7:\n&gt;A has 500 jobs.\n&gt;B has 500 jobs.\n&gt;C has 500 jobs.\nallocation A=~250 ,B=~250 ,C=0\n(based on fair-share).\nIf pool started full of C they would all get pre-empted.\n\n</pre></div>\n\n\n<p>what policy could he write that would give him that behavior?\n\n</p><p></p><hr/>\n<em>2012-Mar-28 15:22:28 by eje:</em> <br/>\n\nConsidering Zach's examples above, I noticed that they embody a policy based purely on maximums.  \"A\" jobs get a max of 300, \"B\" jobs get a max of 300, and \"C\" jobs will use anything A or B aren't.\n\n<p>Taking that at face value, the interesting thing is that those examples could all be achieved using cc-limits and no accounting groups:\n\n</p><p></p><ul>\n<li>define concurrency limits for \"A\" and \"B\" at 300\n</li><li>to submit an \"A\" job, use \"concurrency_limits = a\" (instead of +AccountingGroup = \"a.user\")\n</li><li>to submit a \"B\" job, use \"concurrency_limits = b\"\n</li></ul>\n\n<p></p><div class=\"code\">\n<pre class=\"code\">PREEMPTION_REQUIREMENTS = !(ConcurrencyLimits =?= \"a\" || ConcurrencyLimits =?= \"b\")</pre></div>\n  (it might be THIS.ConcurrencyLimits, or TARGET.ConcurrencyLimits, I can't remember)\n\n<p>So, any job running against one of the cc-limits is not preempted.  A job such as a \"C\" job would be submitted against no limit, and so would be preemptable.\n\n</p><p>An alternative preemption requirements: </p><div class=\"code\">\n<pre class=\"code\">PREEMPTION_REQUIREMENTS = !(submitter.ConcurrencyLimits =?= undefined &amp;&amp; remote.ConcurrencyLimits =!= undefined)</pre></div>\n (\"jobs with no concurrency limits cannot preempt jobs with concurrency lims.  jobs with cc-limits can preempt each other if priorities permit, etc\")\n\n<p>(note, submitter.&lt;attr&gt; or remote.&lt;attr&gt; are actually THIS and TARGET, or the other way around)\n\n</p><p>If minimums were also being configured (using group quotas) then more complex preemption requirements could also be generated that allow an \"a\" job to preempt a \"b\" job if the \"b\" jobs currently exceed the quota for B, etc.  I think you could do this without naming specific groups, using the proposed patch.\n\n</p><p></p><hr/>\n<em>2012-Mar-28 16:00:43 by tstclair:</em> <br/>\n\nAgreed.  The above examples aren't using groups as one would intend (static over-subsription), it appears they are setting a upper bound restriction which is exactly what CC-LIMITS is for.  While group-quota is meant to set a minimum threshold \"by definition\".\n\n<p>On the other hand, if one wants to guarantee a minimum threshold, with the potential of overflow ++ the ability to scale back.  Then I would suggest using dynamic quotas w/autoregroup and preemption.\n\n</p><p>I'm guessing what you really want is an amalgamation of both.\n\n</p><p></p><hr/>\n<em>2012-Apr-03 19:06:41 by zmiller:</em> <br/>\n\ni haven't heard confirmation from FERMI, but i applied gt2885-allow-quota-oversub.patch to V7_7-branch anyways.  if it works, great, we are code complete.  if it doesn't, we have work to do anyways.\n\n<p></p><hr/>\n<em>2012-Apr-05 11:00:11 by timm:</em> <br/>\n\nI am not sure from following the ticket if <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteAutoregroup\" title=\"Remote Autoregroup\">RemoteAutoregroup</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteNegotiatingGroup\" title=\"Remote Negotiating Group\">RemoteNegotiatingGroup</a></span> are in the patch-level version I have.  If so, do\nI have to make them STARTD_ATTRS to show up in the job and machine classads?\nright now they don't.\n\n<p>I have the patched negotiator as built by Zach running right now.\nI wiped AccountantNew.log and made a group_params.config file with\nonly three groups.  There are 30 slots in the pool and as you see\nI have allocated 60 slots from quotas.\n\n</p><p>[root@fgitbcm2 condor]# cat /etc/condor/group_params.config\n</p><div class=\"code\">\n<pre class=\"code\">## Note, group names are in number order of the /etc/group file\nGROUP_NAMES = group_e740, group_fnalgrid, group_p929\n#Only duplicated for sake of OSG generic information provider which\n#presumes, if there are groups, they are the same name as the\n#e740 = dzero\nGROUP_QUOTA_group_e740 = 20\nGROUP_PRIO_FACTOR_group_e740 = 1\n#fnalgrid = fermilab VO\nGROUP_QUOTA_group_fnalgrid = 20\nGROUP_PRIO_FACTOR_group_fnalgrid = 1\nGROUP_QUOTA_group_p929 = 20\nGROUP_PRIO_FACTOR_group_p929 = 1\n</pre></div>\n\n\n<p>Then started condor.\nfirst dumped in 1000 jobs from group \"none\"\nThen 100 jobs from group \"fnalgrid\"\nThe first 30 jobs from group_fnalgrid matched immediately\nand pre-empted the 30 running group none jobs.\nI am not sure why things still went over the quota of 20.\nBut, on the plus side, it didn't scale the quotas down.\n\n</p><p>I am running negotiator in D_FULLDEBUG mode.\nAt the moment group_fnalgrid is occupying all 30 slots due to\na CLAIM_WORKLIFE=3600 setting.  once that expires there are jobs from 2 other groups in the queue and we will see how it fair-shares.  but the\ngoing over the quota is unexpected for me.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">04/05/12 10:57:06 group quotas: assigning 4 submitters to accounting groups\n04/05/12 10:57:06 group quotas: assigning group quotas from 30 available weighted slots\n04/05/12 10:57:06 group quotas: subtree &lt;none&gt; receiving quota= 30\n04/05/12 10:57:06 group quotas: group &lt;none&gt;, allocated 60 for static children, 0 for dynamic children\n04/05/12 10:57:06 group quotas: subtree group_e740 receiving quota= 20\n04/05/12 10:57:06 group quotas: group group_e740, allocated 0 for static children, 20 for dynamic children\n04/05/12 10:57:06 group quotas: group group_e740 assigned quota= 20\n04/05/12 10:57:06 group quotas: subtree group_fnalgrid receiving quota= 20\n04/05/12 10:57:06 group quotas: group group_fnalgrid, allocated 0 for static children, 20 for dynamic children\n04/05/12 10:57:06 group quotas: group group_fnalgrid assigned quota= 20\n04/05/12 10:57:06 group quotas: subtree group_p929 receiving quota= 20\n04/05/12 10:57:06 group quotas: group group_p929, allocated 0 for static children, 20 for dynamic children\n04/05/12 10:57:06 group quotas: group group_p929 assigned quota= 20\n04/05/12 10:57:06 group quotas: group &lt;none&gt; assigned quota= 30\n04/05/12 10:57:06 group quotas: group= &lt;none&gt;  cquota= 0  static= 0  accept= 1  quota= 30  req= 940  usage= 0\n04/05/12 10:57:06 group quotas: group= group_e740  cquota= 20  static= 1  accept= 0  quota= 20  req= 200  usage= 0\n04/05/12 10:57:06 group quotas: group= group_fnalgrid  cquota= 20  static= 1  accept= 0  quota= 20  req= 170  usage= 30\n04/05/12 10:57:06 group quotas: group= group_p929  cquota= 20  static= 1  accept= 0  quota= 20  req= 192  usage= 0\n04/05/12 10:57:06 group quotas: allocation round 1\n04/05/12 10:57:06 group quotas: fairshare (1): group= &lt;none&gt;  quota= 30  requested= 940\n04/05/12 10:57:06 group quotas: fairshare (2): group= &lt;none&gt;  quota= 30  allocated= 30  requested= 910\n04/05/12 10:57:06 group quotas: fairshare (1): group= group_e740  quota= 20  requested= 200\n04/05/12 10:57:06 group quotas: fairshare (2): group= group_e740  quota= 20  allocated= 20  requested= 180\n04/05/12 10:57:06 group quotas: fairshare (1): group= group_fnalgrid  quota= 20  requested= 170\n04/05/12 10:57:06 group quotas: fairshare (2): group= group_fnalgrid  quota= 20  allocated= 20  requested= 150\n04/05/12 10:57:06 group quotas: fairshare (1): group= group_p929  quota= 20  requested= 192\n04/05/12 10:57:06 group quotas: fairshare (2): group= group_p929  quota= 20  allocated= 20  requested= 172\n04/05/12 10:57:06 group quotas: allocate-surplus (1): group= &lt;none&gt;  surplus= 0  subtree-requested= 910\n04/05/12 10:57:06 group quotas: fairshare (3): group= &lt;none&gt;  surplus= 0  subtree_requested= 910\n04/05/12 10:57:06 group quotas: group= &lt;none&gt;  quota= 30  requested= 940  allocated= 30  unallocated= 910\n04/05/12 10:57:06 group quotas: group= group_e740  quota= 20  requested= 200  allocated= 20  unallocated= 180\n04/05/12 10:57:06 group quotas: group= group_fnalgrid  quota= 20  requested= 170  allocated= 20  unallocated= 150\n04/05/12 10:57:06 group quotas: group= group_p929  quota= 20  requested= 192  allocated= 20  unallocated= 172\n04/05/12 10:57:06 group quotas: groups= 4  requesting= 4  served= 4  unserved= 0  slots= 30  requested= 1502  allocated= 90  surplus= 0\n04/05/12 10:57:06 group quotas: entering RR iteration n= 30\n04/05/12 10:57:06 group quotas: Group &lt;none&gt;  allocated= 30  usage= 0\n04/05/12 10:57:06 group quotas: Group &lt;none&gt; - resetting requested to 0\n04/05/12 10:57:06 group quotas: Group group_e740  allocated= 20  usage= 0\n04/05/12 10:57:06 group quotas: Group group_e740 - resetting requested to 0\n04/05/12 10:57:06 group quotas: Group group_fnalgrid  allocated= 20  usage= 30\n04/05/12 10:57:06 group quotas: Group group_p929  allocated= 20  usage= 0\n04/05/12 10:57:06 group quotas: Group group_p929 - resetting requested to 0\n04/05/12 10:57:06 group quotas: allocation round 2\n04/05/12 10:57:06 group quotas: fairshare (1): group= &lt;none&gt;  quota= 30  requested= 0\n04/05/12 10:57:06 group quotas: fairshare (2): group= &lt;none&gt;  quota= 30  allocated= 0  requested= 0\n04/05/12 10:57:06 group quotas: fairshare (1): group= group_e740  quota= 20  requested= 0\n04/05/12 10:57:06 group quotas: fairshare (2): group= group_e740  quota= 20  allocated= 0  requested= 0\n04/05/12 10:57:06 group quotas: fairshare (1): group= group_fnalgrid  quota= 20  requested= 170\n04/05/12 10:57:06 group quotas: fairshare (2): group= group_fnalgrid  quota= 20  allocated= 20  requested= 150\n04/05/12 10:57:06 group quotas: fairshare (1): group= group_p929  quota= 20  requested= 0\n04/05/12 10:57:06 group quotas: fairshare (2): group= group_p929  quota= 20  allocated= 0  requested= 0\n04/05/12 10:57:06 group quotas: allocate-surplus (1): group= &lt;none&gt;  surplus= 70  subtree-requested= 0\n04/05/12 10:57:06 group quotas: fairshare (3): group= &lt;none&gt;  surplus= 70  subtree_requested= 0\n04/05/12 10:57:06 group quotas: group= &lt;none&gt;  quota= 30  requested= 0  allocated= 0  unallocated= 0\n04/05/12 10:57:06 group quotas: group= group_e740  quota= 20  requested= 0  allocated= 0  unallocated= 0\n04/05/12 10:57:06 group quotas: group= group_fnalgrid  quota= 20  requested= 170  allocated= 20  unallocated= 150\n04/05/12 10:57:06 group quotas: group= group_p929  quota= 20  requested= 0  allocated= 0  unallocated= 0\n04/05/12 10:57:06 group quotas: groups= 4  requesting= 1  served= 1  unserved= 0  slots= 30  requested= 170  allocated= 20  surplus= 70\n04/05/12 10:57:06 group quotas: entering RR iteration n= 0\n04/05/12 10:57:06 group quotas: Group &lt;none&gt;  allocated= 0  usage= 0\n04/05/12 10:57:06 group quotas: Group group_e740  allocated= 0  usage= 0\n04/05/12 10:57:06 group quotas: Group group_fnalgrid  allocated= 20  usage= 30\n04/05/12 10:57:06 group quotas: Group group_p929  allocated= 0  usage= 0\n04/05/12 10:57:26 group quotas: assigning 4 submitters to accounting groups\n04/05/12 10:57:26 group quotas: assigning group quotas from 30 available weighted slots\n04/05/12 10:57:26 group quotas: subtree &lt;none&gt; receiving quota= 30\n04/05/12 10:57:26 group quotas: group &lt;none&gt;, allocated 60 for static children, 0 for dynamic children\n04/05/12 10:57:26 group quotas: subtree group_e740 receiving quota= 20\n04/05/12 10:57:26 group quotas: group group_e740, allocated 0 for static children, 20 for dynamic children\n04/05/12 10:57:26 group quotas: group group_e740 assigned quota= 20\n04/05/12 10:57:26 group quotas: subtree group_fnalgrid receiving quota= 20\n04/05/12 10:57:26 group quotas: group group_fnalgrid, allocated 0 for static children, 20 for dynamic children\n04/05/12 10:57:26 group quotas: group group_fnalgrid assigned quota= 20\n04/05/12 10:57:26 group quotas: subtree group_p929 receiving quota= 20\n04/05/12 10:57:26 group quotas: group group_p929, allocated 0 for static children, 20 for dynamic children\n04/05/12 10:57:26 group quotas: group group_p929 assigned quota= 20\n04/05/12 10:57:26 group quotas: group &lt;none&gt; assigned quota= 30\n04/05/12 10:57:26 group quotas: group= &lt;none&gt;  cquota= 0  static= 0  accept= 1  quota= 30  req= 940  usage= 0\n04/05/12 10:57:26 group quotas: group= group_e740  cquota= 20  static= 1  accept= 0  quota= 20  req= 200  usage= 0\n04/05/12 10:57:26 group quotas: group= group_fnalgrid  cquota= 20  static= 1  accept= 0  quota= 20  req= 170  usage= 30\n04/05/12 10:57:26 group quotas: group= group_p929  cquota= 20  static= 1  accept= 0  quota= 20  req= 200  usage= 0\n04/05/12 10:57:26 group quotas: allocation round 1\n04/05/12 10:57:26 group quotas: fairshare (1): group= &lt;none&gt;  quota= 30  requested= 940\n04/05/12 10:57:26 group quotas: fairshare (2): group= &lt;none&gt;  quota= 30  allocated= 30  requested= 910\n04/05/12 10:57:26 group quotas: fairshare (1): group= group_e740  quota= 20  requested= 200\n04/05/12 10:57:26 group quotas: fairshare (2): group= group_e740  quota= 20  allocated= 20  requested= 180\n04/05/12 10:57:26 group quotas: fairshare (1): group= group_fnalgrid  quota= 20  requested= 170\n04/05/12 10:57:26 group quotas: fairshare (2): group= group_fnalgrid  quota= 20  allocated= 20  requested= 150\n04/05/12 10:57:26 group quotas: fairshare (1): group= group_p929  quota= 20  requested= 200\n04/05/12 10:57:26 group quotas: fairshare (2): group= group_p929  quota= 20  allocated= 20  requested= 180\n04/05/12 10:57:26 group quotas: allocate-surplus (1): group= &lt;none&gt;  surplus= 0  subtree-requested= 910\n04/05/12 10:57:26 group quotas: fairshare (3): group= &lt;none&gt;  surplus= 0  subtree_requested= 910\n04/05/12 10:57:26 group quotas: group= &lt;none&gt;  quota= 30  requested= 940  allocated= 30  unallocated= 910\n04/05/12 10:57:26 group quotas: group= group_e740  quota= 20  requested= 200  allocated= 20  unallocated= 180\n04/05/12 10:57:26 group quotas: group= group_fnalgrid  quota= 20  requested= 170  allocated= 20  unallocated= 150\n04/05/12 10:57:26 group quotas: group= group_p929  quota= 20  requested= 200  allocated= 20  unallocated= 180\n04/05/12 10:57:26 group quotas: groups= 4  requesting= 4  served= 4  unserved= 0  slots= 30  requested= 1510  allocated= 90  surplus= 0\n04/05/12 10:57:26 group quotas: entering RR iteration n= 30\n04/05/12 10:57:26 group quotas: Group &lt;none&gt;  allocated= 30  usage= 0\n04/05/12 10:57:26 group quotas: Group &lt;none&gt; - resetting requested to 0\n04/05/12 10:57:26 group quotas: Group group_e740  allocated= 20  usage= 0\n04/05/12 10:57:26 group quotas: Group group_e740 - resetting requested to 0\n04/05/12 10:57:26 group quotas: Group group_fnalgrid  allocated= 20  usage= 30\n04/05/12 10:57:26 group quotas: Group group_p929  allocated= 20  usage= 0\n04/05/12 10:57:26 group quotas: Group group_p929 - resetting requested to 0\n04/05/12 10:57:26 group quotas: allocation round 2\n04/05/12 10:57:26 group quotas: fairshare (1): group= &lt;none&gt;  quota= 30  requested= 0\n04/05/12 10:57:26 group quotas: fairshare (2): group= &lt;none&gt;  quota= 30  allocated= 0  requested= 0\n04/05/12 10:57:26 group quotas: fairshare (1): group= group_e740  quota= 20  requested= 0\n04/05/12 10:57:26 group quotas: fairshare (2): group= group_e740  quota= 20  allocated= 0  requested= 0\n04/05/12 10:57:26 group quotas: fairshare (1): group= group_fnalgrid  quota= 20  requested= 170\n04/05/12 10:57:26 group quotas: fairshare (2): group= group_fnalgrid  quota= 20  allocated= 20  requested= 150\n04/05/12 10:57:26 group quotas: fairshare (1): group= group_p929  quota= 20  requested= 0\n04/05/12 10:57:26 group quotas: fairshare (2): group= group_p929  quota= 20  allocated= 0  requested= 0\n04/05/12 10:57:26 group quotas: allocate-surplus (1): group= &lt;none&gt;  surplus= 70  subtree-requested= 0\n04/05/12 10:57:26 group quotas: fairshare (3): group= &lt;none&gt;  surplus= 70  subtree_requested= 0\n04/05/12 10:57:26 group quotas: group= &lt;none&gt;  quota= 30  requested= 0  allocated= 0  unallocated= 0\n04/05/12 10:57:26 group quotas: group= group_e740  quota= 20  requested= 0  allocated= 0  unallocated= 0\n04/05/12 10:57:26 group quotas: group= group_fnalgrid  quota= 20  requested= 170  allocated= 20  unallocated= 150\n04/05/12 10:57:26 group quotas: group= group_p929  quota= 20  requested= 0  allocated= 0  unallocated= 0\n04/05/12 10:57:26 group quotas: groups= 4  requesting= 1  served= 1  unserved= 0  slots= 30  requested= 170  allocated= 20  surplus= 70\n04/05/12 10:57:26 group quotas: entering RR iteration n= 0\n04/05/12 10:57:26 group quotas: Group &lt;none&gt;  allocated= 0  usage= 0\n04/05/12 10:57:26 group quotas: Group group_e740  allocated= 0  usage= 0\n04/05/12 10:57:26 group quotas: Group group_fnalgrid  allocated= 20  usage= 30\n04/05/12 10:57:26 group quotas: Group group_p929  allocated= 0  usage= 0\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Apr-05 11:18:47 by zmiller:</em> <br/>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nI am not sure from following the ticket if RemoteAutoregroup and RemoteNegotiatingGroup are in the patch-level version I have. If so, do I have to make them STARTD_ATTRS to show up in the job and machine classads? right now they don't.\n</td></tr></tbody></table></div>\n\nNo, they are not.  I applied only the one patch to not normalize.  Sorry for the confusion.  I am building another version with all three patches applied and will have it ready for you shortly.\n\n<p></p><hr/>\n<em>2012-Apr-05 11:33:40 by tstclair:</em> <br/>\n\nI'm guessing the original jobs were preempted out and the extra 10 are given out before the other group of jobs were in the queue, but I would kind of expect the other 10 to be in group &lt;none&gt; so when the new jobs come it they too would be preempted.\n\n<p></p><hr/>\n<em>2012-Apr-19 17:28:01 by zmiller:</em> <br/>\n\ni can reproduce what seems to be incorrect behavior, unless i'm missing something obvious.\n\n<p>create a personal condor.  add the following to the condor_config:\n</p><div class=\"code\">\n<pre class=\"code\">## plenty of slots\nNUM_CPUS = 30\n\n## Note, group names are in number order of the /etc/group file\nGROUP_NAMES = group_e740, group_fnalgrid, group_p929\nGROUP_QUOTA_group_e740 = 20\nGROUP_PRIO_FACTOR_group_e740 = 1\nGROUP_QUOTA_group_fnalgrid = 20\nGROUP_PRIO_FACTOR_group_fnalgrid = 1\nGROUP_QUOTA_group_p929 = 20\nGROUP_PRIO_FACTOR_group_p929 = 1\nNEGOTIATOR_ALLOW_QUOTA_OVERSUBSCRIPTION = TRUE\n\nPREEMPTION_REQUIREMENTS = ( JobUniverse==5 &amp;&amp; MY.AccountingGroup =?= UNDEFINED &amp;&amp; TARGET.AccountingGroup =!= UNDEFINED )\n\nGROUP_SORT_EXPR = ifThenElse(AccountingGroup=?=\"&lt;none&gt;\", 3.4e+38, \\\n  ifThenElse(GroupQuota&gt;0,GroupResourcesInUse/GroupQuota,3.3e+38))\n</pre></div>\n\n\n<p>then submit jobs:\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\nshould_transfer_files = ALWAYS\nwhen_to_transfer_output = ON_EXIT_OR_EVICT\nexecutable = /bin/sleep\nnotification = never\n\narguments = 5\nqueue 1000\n\narguments = 5\n+AccountingGroup = \"group_e740\"\nqueue 1000\n\narguments = 5\n+AccountingGroup = \"group_fnalgrid\"\nqueue 1000\n\narguments = 5\n+AccountingGroup = \"group_p929\"\nqueue 1000\n</pre></div>\n\n\n<p>and it goes to a steady state of running 8/8/8/6 from each group:\n</p><div class=\"code\">\n<pre class=\"code\">condor_q -const 'JobStatus==2' -format \"%s\\n\" 'ifThenElse(AccountingGroup =!= UNDEFINED, AccountingGroup, \"none\")' | sort | uniq -c\n      8 group_e740\n      8 group_fnalgrid\n      8 group_p929\n      6 none\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Apr-20 15:29:45 by zmiller:</em> <br/>\n\n\n<p>i have been running more tests and deleting the accountantlog and restarting the negotiator for each test, so there's no residual state.  every time i submit, it goes to the same steady state:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">      8 group_e740\n      8 group_fnalgrid\n      7 group_p929\n      7 none\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Apr-23 11:34:07 by matt:</em> <br/>\n\nWhat's the expected output?\n\n<p>I think the issue is +AccountingGroup requires a \".user\" part...\n\n</p><p></p><div class=\"verbatim\">\n<pre>$ condor_status -run -format \"%s\\n\" AccountingGroup | sort | uniq -c | sort -n\n     10 group_fnalgrid.zkm@eeyore.local\n     20 group_e740.zkm@eeyore.local\n$ condor_q -const 'JobStatus==2' -format \"%s\\n\" 'ifThenElse(AccountingGroup =!= UNDEFINED, AccountingGroup, \"none\")' | sort | uniq -c\n     20 group_e740.zkm\n     10 group_fnalgrid.zkm\n</pre></div>\n\n\n<p>vs\n\n</p><p></p><div class=\"verbatim\">\n<pre>$ condor_status -run -format \"%s\\n\" AccountingGroup | sort | uniq -c | sort -n\n      7 group_fnalgrid@eeyore.local\n      8 group_e740@eeyore.local\n      8 group_p929@eeyore.local\n$ condor_q -const 'JobStatus==2' -format \"%s\\n\" 'ifThenElse(AccountingGroup =!= UNDEFINED, AccountingGroup, \"none\")' | sort | uniq -c\n      8 group_e740\n      7 group_fnalgrid\n      8 group_p929\n      7 none\n</pre></div>\n</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=3040\" onclick=\"get_ticket_and_populate_wrapper('3040'); return false;\" title=\"change the defaults for HGQ sort order and oversubscription\">#3040</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nchange the defaults for HGQ sort order and oversubscription</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/542/gt2885-advertise-negotiated-group.patch\">gt2885-advertise-negotiated-group.patch</a>\n11243 bytes added by eje on 2012-Mar-22 19:32:47 UTC.\n<br/>\npatch against 7.7 that advertises <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteNegotiatingGroup\" title=\"Remote Negotiating Group\">RemoteNegotiatingGroup</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteAutoregroup\" title=\"Remote Autoregroup\">RemoteAutoregroup</a></span> (and Submitter versions) to support preemption policies<br/>\n</li><li><a href=\"../files/546/gt2885-advertise-negotiated-group.patch2\">gt2885-advertise-negotiated-group.patch2</a>\n11981 bytes added by eje on 2012-Mar-22 23:48:28 UTC.\n<br/>\nEnhancement to previous patch that also advertises <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteGroup\" title=\"Remote Group\">RemoteGroup</a></span> on the slot ads, which I've wanted for a while since it specifically shows <strong>which</strong> group name the accountant actually considers the \"fully qualified\" <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AccountingGroup\" title=\"Accounting Group\">AccountingGroup</a></span> to belong to.  For example can highlight a submitter submitting against a group that isn't defined, since in that case <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteGroup\" title=\"Remote Group\">RemoteGroup</a></span> will differ from the group in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AccountingGroup\" title=\"Accounting Group\">AccountingGroup</a></span><br/>\n</li><li><a href=\"../files/548/gt2885-allow-quota-oversub.patch\">gt2885-allow-quota-oversub.patch</a>\n3145 bytes added by eje on 2012-Mar-29 21:34:49 UTC.\n<br/>\nPatch against 7.6 to allow oversubscription of static quotas.  I would expect this patch to merge forward cleanly.  Exposes new boolean config param NEGOTIATOR_ALLOW_QUOTA_OVERSUBSCRIPTION, which defaults to FALSE.\n<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jun-13 12:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/5c78c24df3409fc54457c248555abf172cfe42b3\">[32303]</a></span>: Partial and incomplete documentation for GROUP_SORT_EXPR and NEGOTIATOR_ALLOW_QUOTA_OVERSUBSCRIPTION ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=3040\" onclick=\"get_ticket_and_populate_wrapper('3040'); return false;\" title=\"change the defaults for HGQ sort order and oversubscription\">#3040</a></span> ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2885\" onclick=\"get_ticket_and_populate_wrapper('2885'); return false;\" title=\"fermi can't replicate old behavior of accounting groups\">#2885</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Apr-10 11:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/b99a9aeae7ba6f7336fab83550d7aa3b794b0089\">[31591]</a></span>: correct defns of new attributes, write defns of other new attributes, and rewrite version history item, placing it in the correct part of the version history. ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2885\" onclick=\"get_ticket_and_populate_wrapper('2885'); return false;\" title=\"fermi can't replicate old behavior of accounting groups\">#2885</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Apr-03 19:03</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/ef94cf49a901ca05f87dee8254276af293941817\">[31096]</a></span>: allow oversubscription of static quotas by setting NEGOTIATOR_ALLOW_QUOTA_OVERSUBSCRIPTION (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2885\" onclick=\"get_ticket_and_populate_wrapper('2885'); return false;\" title=\"fermi can't replicate old behavior of accounting groups\">#2885</a></span>)  (By Zach Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Mar-30 12:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/597d77778cd8453397fedb42314bf057366009bf\">[31046]</a></span>: ===VersionHistory:Complete=== ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2885\" onclick=\"get_ticket_and_populate_wrapper('2885'); return false;\" title=\"fermi can't replicate old behavior of accounting groups\">#2885</a></span>  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Mar-30 12:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/93a65c10e4fe26fe9a7fe52463c950ffe41d635a\">[31045]</a></span>: Documentation for new Remote and Submitter negotiation and group attributes ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2885\" onclick=\"get_ticket_and_populate_wrapper('2885'); return false;\" title=\"fermi can't replicate old behavior of accounting groups\">#2885</a></span>  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Mar-30 12:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3fb0417f4f7c09f3c1ae97ab19b0f81c54fc7151\">[31044]</a></span>: Advertise <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteNegotiatingGroup\" title=\"Remote Negotiating Group\">RemoteNegotiatingGroup</a></span>, <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RemoteAutoregroup\" title=\"Remote Autoregroup\">RemoteAutoregroup</a></span> and Submitter versions, for preemption policies and informational purposes ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=2885\" onclick=\"get_ticket_and_populate_wrapper('2885'); return false;\" title=\"fermi can't replicate old behavior of accounting groups\">#2885</a></span>  (By Erik Erlandson )</td></tr>\n</tbody></table>", "type": "incident", "last_change": "2012-Dec-17 12:55", "status": "resolved", "created": "2012-Mar-12 15:31", "fixed_version": "2012-Mar-12 15:31", "broken_version": "v070705", "priority": "2", "subsystem": "Daemons", "assigned_to": "zmiller", "derived_from": "", "creator": "zmiller", "rust": "a23247", "customer_group": "fermi", "visibility": "public", "notify": "eje@cs.wisc.edu,  tstclair@redhat.com, tannenba@cs.wisc.edu, timm@cs.wisc.edu", "due_date": ""}