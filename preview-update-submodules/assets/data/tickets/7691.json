{"id": 7691, "title": "Ticket #7691: Python bindings memory management", "description": "<blockquote>\nIn <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6721\" onclick=\"get_ticket_and_populate_wrapper('6721'); return false;\" title=\"Segfault by the ClassAd python-wrapper\">#6721</a></span>, we addressed the original problem with items. However, commit <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/311a4058b63ca6a913a7f9b1a9f7dc95a5c893d2\">[57667]</a></span> was intended to specify classad_expr_return_policy when returning an <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span>. Unfortunately, this resulted in a few unit test failures:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">======================================================================\nERROR: test_get (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 259, in test_get\n    self.assertEqual(ad.get(\"foo\"), None)\nArgumentError: Python argument types in\n    ClassAd.get(ClassAd, str)\ndid not match C++ signature:\n    get(ClassAdWrapper {lvalue}, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, boost::python::api::object)\n\n======================================================================\nERROR: test_setdefault (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 268, in test_setdefault\n    self.assertEqual(ad.get(\"foo\"), \"bar\")\nArgumentError: Python argument types in\n    ClassAd.get(ClassAd, str)\ndid not match C++ signature:\n    get(ClassAdWrapper {lvalue}, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, boost::python::api::object)\n\n----------------------------------------------------------------------\n</pre></div>\n\n\n<p>Let's get this fixed up for the stable release.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Dec-27 08:26:08 by bbockelm:</em> <br/>\n\nAh, I see the problem - the call policy is not interacting correctly with the get_overloads.  The other cases are correct, I think.\n\n<p>@Carl - can you take a whack at this again?</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "defect", "last_change": "2020-Oct-12 10:07", "status": "new", "created": "2020-Jun-17 08:28", "fixed_version": "2020-Jun-17 08:28", "broken_version": "v080709", "priority": "2", "subsystem": "PythonBinding", "assigned_to": "edquist", "derived_from": "#6721", "creator": "tim", "rust": "", "customer_group": "users", "visibility": "public", "notify": "edquist@cs.wisc.edu,jpatton@cs.wisc.edu,tannenba@cs.wisc.edu,johnkn@cs.wisc.edu,karpel@wisc.edu,BBockelman@morgridge.org,blin@cs.wisc.edu", "due_date": ""}