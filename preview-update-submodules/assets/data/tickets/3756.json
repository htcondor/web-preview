{"id": 3756, "title": "Ticket #3756: provide command to peacefully pause a DAG", "description": "<blockquote>\nUpon invocation of this command, DAGMan should:\n\n<p></p><ul>\n<li>stop submitting new jobs\n</li><li>stop running any new PRE/POST scripts\n</li><li>checkpoint any running standard universe (or otherwise checkpointable, e.g., DMTCP) jobs\n</li><li>allow any other running jobs to complete on their own\n</li><li>allow any running PRE/POST scripts to complete on their own\n</li><li>generate a rescue file (or equivalent recovery state)\n</li></ul>\n\n<p>The DAG should be restartable with one command.\n\n</p><p>Maybe call it dagman_hold -peaceful, and dagman_resume?\n\n</p><p>(Note: as a separate ticket, the peaceful hold should be \"escalatable\" to a graceful one if the user gets impatient.)\n\n</p><p>Design doc at: <a class=\"external\" href=\"https://docs.google.com/a/wisc.edu/document/d/1XzT5uAY0A_AD1ub4J-y29Ner0DkZqlaWiA1M20J5rTw\">https://docs.google.com/a/wisc.edu/document/d/1XzT5uAY0A_AD1ub4J-y29Ner0DkZqlaWiA1M20J5rTw</a></p></blockquote>", "remarks": "<blockquote>\n<em>2013-Jul-23 14:47:09 by wenger:</em> <br/>\n\nAs per today's LIGO phone call, this command should just be something like:\n\n<p></p><pre>  condor_pause_dag &lt;dagman id&gt;\n</pre>\n\n<p>That means that the script needs to figure out from DAGMan's classad what the name of the halt file is, and so on.  I think we can do that now, by parsing the arguments in the classad, but I'm thinking that maybe DAGMan should stick the name of the primary DAG file into the classad explicitly -- that would make the pause command's job a lot easier.\n\n</p><p>On the other hand, changing DAGMan itself might push this more towards 8.1 rather than 8.0.  It's a new feature, but it's mostly (or all) entirely new code, rather than changes to existing code, so the chance of it breaking something existing is pretty darn small.  We'll have to think about this, I guess...\n\n</p><p></p><hr/>\n<em>2013-Aug-07 16:03:01 by wenger:</em> <br/>\n\nOkay, here's my initial proposal:\n\n<p></p><pre>  condor_halt_dag [-graceful|-really-graceful|-peaceful] &lt;cluster.process...&gt;|&lt;user&gt;\n</pre>\n\n<p>Four options:\n\n</p><p></p><ul>\n<li>(default):  creates halt file, kills all child jobs (pretty\nmuch like condor_rm of DAG job, but safer because DAGMan won't exit\nuntil child jobs have all exited).\n\n<p></p></li><li>-graceful:  creates halt file, checkpoints and holds all\ncheckpointable jobs, removes non-checkpointable jobs, does\ncondor_hold on DAGMan (see explanation below).\n\n<p></p></li><li>-really-graceful:  creates halt file, checkpoints and holds all\ncheckpointable jobs, does condor_hold on DAGMan (see explanation\nbelow).  Non-checkpointable jobs are allowed to finish.\n\n<p></p></li><li>-peaceful:  just creates halt file (allows jobs\nalready in the queue to finish).\n</li></ul>\n\n<p>I'm not sure whether the \"most severe\" option should be the\ndefault, or maybe whether the \"peaceful\" option should be\nthe default and the others should require flags like -fast.\nAt any rate, though, these are the variations of \"severity\"\nthat I can see.\n\n</p><p>Peter -- I'm not sure if you need all of these options, but it sounds\nto me like the -graceful or -really-graceful options are the most\nuseful to LIGO.  Unfortunately, they're also the most complicated\nto implement...  (Default and -peaceful should be pretty easy, I\nthink.)\n\n</p><p>Note:  In the case that standard universe jobs are checkpointed\nand remain in the queue, DAGMan has to be held.  If it's just\nhalted with a halt file, it won't ever exit because it will be\nwaiting for the standard universe jobs to finish.  And, if it\ndid exit, a rescue DAG can't represent the state of a checkpointed\nstandard universe job that could be continued.\n\n</p><p></p><pre>  condor_resume_dag &lt;cluster.process...&gt;|&lt;user&gt;\n</pre>\n\n<p>Removes halt file, re-submits DAG if DAGMan exited and generated\na rescue DAG, does condor_release on DAGMan if it was held,\ndoes condor_release on held node jobs.\n\n</p><p>Other notes:\n\n</p><p></p><ul>\n<li>Both commands will do nothing but print an error message if\nthe specified Condor ID is not a condor_dagman.\n\n<p></p></li><li>BTW, I'm wondering whether DAGMan itself should remove the halt\nfile if it exits because all jobs have drained from the queue.\n</li></ul>\n\n<p></p><hr/>\n<em>2013-Aug-19 17:22:28 by wenger:</em> <br/>\n\nOh, yeah -- something I just thought of:  in the case of nested DAGs, this command should do the creation of the halt file, etc., for the sub-DAGs, rather than just treating them as any other child process (down to however many levels of sub-DAGs exist).\n\n<p></p><hr/>\n<em>2013-Aug-20 14:32:56 by pfc:</em> <br/>\n\nStuart says we need --really-graceful above.\n\n<p></p><hr/>\n<em>2013-Oct-17 16:19:26 by wenger:</em> <br/>\n\nGregT says that a heuristic for deciding that non-standard universe jobs are checkpointable is that when_to_transfer_output is set to \"on_exit_or_evict\".\n\n<p></p><hr/>\n<em>2013-Oct-17 17:33:31 by pfc:</em> <br/>\n\nI don't think that heuristic is reliable/safe.  Why not use an explicit indicator (e.g., can_checkpoint = true)?  If it's not present, assume no checkpointing.\n\n<p></p><hr/>\n<em>2013-Oct-18 09:35:23 by wenger:</em> <br/>\n\nThe above is just kind of a note -- I don't plan to rely on that, but I wanted to record it somewhere.  But, yeah, we probably need some kind of explicit \"can checkpoint\" attribute for stuff like DMTCP and other jobs than can self-checkpoint.  (I'm not sure what happens right now to a job than can self-checkpoint.)\n\n<p></p><hr/>\n<em>2013-Oct-18 12:13:25 by wenger:</em> <br/>\n\nToddT and I had a discussion about this today, and we're looking for a little more clarification from the LIGO end.  I guess the basic question is why you need to do the peaceful or graceful shutdown on a per-workflow basis rather than a per-machine basis.  In other words, why doesn't a condor_off -graceful or -peaceful do what you need?\n\n<p></p><hr/>\n<em>2013-Oct-21 11:43:49 by wenger:</em> <br/>\n\nThis is from Stuart via email:\n\n<p>The main motivation for pausing an entire workflow is to stop a set\nof resource abusing jobs from causing problems while leaving other well\nbehaved jobs running in the pool.\n\n</p><p></p><hr/>\n<em>2013-Dec-10 14:26:02 by wenger:</em> <br/>\n\nComments from Stuart Anderson via email:\n\n<p>You design document looks good to me. However, I would add under the\n&amp;#8220;My proposal:&amp;#8221; section that condor_halt_dag -peaceful should checkpoint and\nstop non-sub-DAG jobs when possible (and the equivalent statements about\npicking up from checkpoint images if/when restarting).\n\n</p><p>I am less sanguine on commenting on the architectural choices, however, I am\nagreeable to not allowing de-escalation, but I would like to see\ncheckpointing of non-sub-DAG jobs there as well.\n\n</p><p></p><hr/>\n<em>2015-Sep-22 11:01:50 by tpdownes:</em> <br/>\n\nAfter discussion w/Kent, chose to lower priority of this ticket. Most features available with dag.halt file. TPD also questions utility of including \"checkpoint stduniv\" jobs in this command rather than \"condor_rm_dag -graceful\".</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2015-Sep-22 11:01", "status": "defer", "created": "2013-Jul-09 16:17", "fixed_version": "2013-Jul-09 16:17", "broken_version": "v080000", "priority": "5", "subsystem": "Dag", "assigned_to": "tannenba", "derived_from": "", "creator": "pfc", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "pfcouvar@syr.edu, anderson@ligo.caltech.edu, wenger@cs.wisc.edu, vahi@isi.edu, tannenba@cs.wisc.edu,pcouvare@caltech.edu", "due_date": ""}