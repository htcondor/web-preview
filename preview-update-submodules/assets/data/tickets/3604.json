{"id": 3604, "title": "Ticket #3604: DMTCP integration shim broken: hard coded paths; missing libraries", "description": "<blockquote>\nOur DMTCP integration package doesn't work.  There are at least two open problems:\n\n<p>Problem 1: Newer DMTCP releases include new/differently named libraries.  0.5 of the DMTCP integration package fixes the Makefile, but fails to update the submit files to include the new libraries.  Should be an easy fix.  Workaround: ensure the DMTCP libraries are in transfer_input_files.\n\n</p><p>Problem 2: The checkpoint restart script DMTCP has has hard-coded paths.  This breaks restart when the path may change.  I don't know if this is new behavior or not.  If it's old behavior, it doesn't seem like restarts should have ever worked. Also worth checking: do the binary checkpoint blobs potentially include hard-coded paths? That could doom us just as hard.\n\n</p><p>Be sure to notify a25442 when fixed.\n\n</p><p>Be sure to notify LIGO folks when fixed.</p></blockquote>", "remarks": "<blockquote>\n<em>2013-May-09 19:44:36 by adesmet:</em> <br/>\n\nThe hard coded paths to checkpoint files don't appear to be a problem.  DMTCP is prepared to cope with them moving via --restartdir, -d or the environment variable DMTCP_RESTART_DIR.  On testing, they appear to work as advertised.  I successfully made a checkpoint, moved things to a new location, and restarted it.\n\n<p>This doesn't mean that open files necessarily work.  That needs to be checked.\n\n</p><p>Periodic checkpoints don't actually appear to work; needs to be investigated.\n\n</p><p>Random observation: if we end up using filesystem namespaces, it may be possible to give jobs the illusion that their working directory doesn't actually change, potentially coping with some fragile programs.\n\n</p><p></p><hr/>\n<em>2013-May-09 19:44:58 by adesmet:</em> <br/>\n\nAlso, check into the admin ticket and double check what the reported problem is.\n\n<p></p><hr/>\n<em>2013-May-20 16:31:17 by adesmet:</em> <br/>\n\nThe absolute paths in the restart script are fine; the script is doing the right thing and rewriting them when we restart.  The restart problems I was seeing while trying to reproduce were a red herring.\n\n<p>The real problem is restarting on a slightly different CPU.  To take an example I ran into, a simple program started up on a computer with SSE 4 support.  glibc wisely took advantage of the SSE 4 support to optimize some string routines, caching the result.  I checkpointed.  The job restarted on a computer without SSE 4 support.  glibc used the cached knowledge and tried to use the optimized version: SIGILL, dead.\n\n</p><p>This bit standard universe recently; the solution was to add several CPU feature flags known to be problematic to the checkpoint string.  This provides some increased safety but increases pool fragmentation.  (It's also not as safe as possible, as it is ignorant of future features and omits some flags that exist today.)\n\n</p><p>The answer for DMTCP support is probably the same.  Doing this entirely in the script is tricky, so we probably won't have anything until there are changes to the vanilla universe in suppport.\n\n</p><p>Current workarounds:\n\n</p><p></p><ul>\n<li>Use a homogenous pool.\n</li><li>Self limit jobs to a homogenous pools.\n</li><li>Ensure initial run and checkpoint are on CPU with minimal capabilities,  limit jobs to machines with those or greater capabilities.</li></ul>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "defect", "last_change": "2014-Aug-05 07:19", "status": "new", "created": "2013-May-01 10:18", "fixed_version": "2013-May-01 10:18", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "adesmet", "derived_from": "", "creator": "adesmet", "rust": "a25442", "customer_group": "other", "visibility": "public", "notify": "rynge@isi.edu,adesmet@cs.wisc.edu", "due_date": ""}