{"id": 5831, "title": "Ticket #5831: Easy way to check if classad value is undefined when using py-bindings", "description": "<blockquote>\n classad.Value.Undefined gets cast to int and is unusable in a logical expression on a classad attribute. There should be an easy to access call to that can reliably be used to find\n\n<p>1. If a classad attribute is undefined\n\n</p><p>2. If eval() on a classad attribute returns undefined</p></blockquote>", "remarks": "<blockquote>\n<em>2016-Aug-08 09:02:13 by bbockelm:</em> <br/>\n\nA fairly quick fix would be to add to the expression and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> API convenience methods of <code>isUndefined</code> and <code>isError</code>.  These would return a boolean after evaluating the relevant expression.  Additionally, in the case of a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span>, <code>isUndefined</code> would return <code>True</code> if the attribute is not in the ad.\n\n<p>That said, I <em>really really</em> hate how the boost python <code>enum</code> of <code>UNDEFINED</code> and <code>ERROR</code> will silently cast to an <code>int</code>  in python.  I think the only reasonable long-term fix is to implement a custom object for those two values in the language.  I doubt any serious user of the library depends on the silent casts to <code>int</code>.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "todo", "last_change": "2016-Aug-08 09:02", "status": "new", "created": "2016-Aug-05 15:56", "fixed_version": "2016-Aug-05 15:56", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "bbockelm", "derived_from": "", "creator": "parag", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}