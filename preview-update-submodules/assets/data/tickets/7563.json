{"id": 7563, "title": "Ticket #7563: Add missing mapping methods to Python bindings classad objects", "description": "<blockquote>\nOur Python bindings <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> object implements most of the Python dictionary interface, but is missing\n\n<p></p><ul>\n<li><code>pop</code>\n</li><li><code>popitem</code> (if possible with the same LIFO guarantee, but an arbitrary order is fine if not)\n</li><li><code>copy</code>\n</li><li><code>clear</code>\n</li><li><code>fromkeys</code>\n</li></ul>\n\n<p>We should add these methods to the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> object.\n\n</p><p>See <a class=\"external\" href=\"https://docs.python.org/3/library/stdtypes.html?highlight=pop#dict\">https://docs.python.org/3/library/stdtypes.html?highlight=pop#dict</a> for the behavior of these methods.\n\n</p><p>For all but <code>clear()</code> it may be more useful to add a method to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> that creates a dict from the classad using evaluated values.\n\n</p><p><span class=\"comment\">[[anonymous: I don't think it is possible to implement these (reasons in bold)]]</span>\n</p><div class=\"code\">\n<pre class=\"code\">classmethod fromkeys(iterable[, value])</pre></div>\n\n<ul>\nCreate a new dictionary with keys from iterable and values set to value.\nfromkeys() is a class method that returns a new dictionary.\n\n<p>value defaults to None. <strong>All of the values refer to just a single instance</strong>, so it generally doesn\u2019t make sense for value to be a mutable object such as an empty list. To get distinct values, use a dict comprehension instead.\n</p></ul>\n\n<p></p><div class=\"code\">\n<pre class=\"code\">copy()</pre></div>\n\n<ul>\nReturn a <strong>shallow</strong> copy of the dictionary.\n</ul>\n\n<p></p><div class=\"code\">\n<pre class=\"code\">pop(key[, default])</pre></div>\n\n<ul>\nIf key is in the dictionary, remove it and return its value, else return default. If default is not given and key is not in the dictionary, a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=KeyError\" title=\"Key Error\">KeyError</a></span> is raised. <span class=\"comment\">[[anonymous: this will always be a copy of the value. if value is an ExprTree it may not be possible to evaluate it anymore]]</span>\n</ul>\n\n<p></p><div class=\"code\">\n<pre class=\"code\">popitem()</pre></div>\n\n<ul>\nRemove and return a (key, value) pair from the dictionary. Pairs are returned in LIFO order.\n\n<p>Changed in version 3.7: <strong>LIFO order is now guaranteed</strong>. In prior versions, popitem() would return an arbitrary key/value pair.</p></ul>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2020-Nov-09 12:22", "status": "new", "created": "2020-Mar-16 15:37", "fixed_version": "2020-Mar-16 15:37", "broken_version": "", "priority": "4", "subsystem": "PythonBinding", "assigned_to": "johnkn", "derived_from": "", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu, jpatton@cs.wisc.edu", "due_date": ""}