{"id": 6394, "title": "Ticket #6394: Build python bindings with limited api for ABI compatibility", "description": "<blockquote>\nThe official Python development cycle does not describe the stability of the application binary interface (ABI) between releases. For releases before Python 3.2, there is no guarantee for ABI compatibility. For 3.2 and beyond, PEP 384 defines the stable ABI where a subset of the Python/C API is guaranteed to maintain ABI compatibility.\n\n<p>To help ensure the HTCondor Python bindings continue to operate across minor releases of Python (and perhaps also across different Python implementations aka Anaconda vs Intel vs ...), we should build both the Boost.Python external and HTCondor with <code>Py_LIMITED_API</code> defined.\n\n</p><p>See wisdom at URLs <a class=\"external\" href=\"https://docs.python.org/3/c-api/stable.html\">https://docs.python.org/3/c-api/stable.html</a>\nand <a class=\"external\" href=\"https://stackoverflow.com/questions/28830653/build-boost-with-multiple-python-versions\">https://stackoverflow.com/questions/28830653/build-boost-with-multiple-python-versions</a></p></blockquote>", "remarks": "<blockquote>\n<em>2017-Sep-06 12:15:50 by edquist:</em> <br/>\n\nJust a note here:\n\n<p>I was able to do a UW-build of condor against python3 with\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">CPPFLAGS=-DPy_LIMITED_API=0x03020000 make\n</pre></div>\n\n\n<p>This made its way into the actual gcc/g++ command lines for most of the externals, but notably not boost (which uses a different build system than the standard autotools?), and also this did not make its way into the actual condor command lines.\n\n</p><p></p><hr/>\n<em>2017-Oct-09 12:19:21 by jpatton:</em> <br/>\n\nFollowing the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StackOverflow\" title=\"Stack Overflow\">StackOverflow</a></span> answer, Boost.Python probably needs to be built with something like...\n\n<p><code>./b2 --with-python cflags=\"-DPy_LIMITED_API\"</code>\n\n</p><p>...which seems to break the Boost.Python build in my testing. Not yet convinced the breakage is from inclusion of the flag, though Boost compiles fine when it is omitted.\n\n</p><p></p><hr/>\n<em>2017-Oct-09 13:20:40 by jpatton:</em> <br/>\n\nBetter b2 command line would be:\n\n<p><code>./b2 --with-python define=Py_LIMITED_API</code>\n\n</p><p>but still doesn't work and does seem to be related to Boost not being compatible with the Py_LIMITED_API. Some example build errors:\n\n</p><p></p><div class=\"verbatim\">\n<pre>gcc.compile.c++ bin.v2/libs/python/build/gcc-4.8.5/release/threading-multi/list.o\nIn file included from ./boost/python/object/make_ptr_instance.hpp:8:0,\n                 from ./boost/python/to_python_indirect.hpp:11,\n                 from ./boost/python/converter/arg_to_python.hpp:10,\n                 from ./boost/python/call.hpp:15,\n                 from ./boost/python/object_core.hpp:14,\n                 from ./boost/python/object.hpp:9,\n                 from ./boost/python/list.hpp:10,\n                 from libs/python/src/list.cpp:5:\n./boost/python/object/make_instance.hpp: In static member function 'static PyObject* boo\nst::python::objects::make_instance_impl&lt;T, Holder, Derived&gt;::execute(Arg&amp;)':\n./boost/python/object/make_instance.hpp:35:36: error: invalid use of incomplete type 'Py\nTypeObject {aka struct _typeobject}'\n         PyObject* raw_result = type-&gt;tp_alloc(\n                                    ^\nIn file included from /opt/python/3.6.3/include/python3.6/Python.h:68:0,\n                 from ./boost/python/detail/wrap_python.hpp:151,\n                 from ./boost/python/detail/prefix.hpp:13,\n                 from ./boost/python/list.hpp:8,\n                 from libs/python/src/list.cpp:5:\n/opt/python/3.6.3/include/python3.6/object.h:109:12: error: forward declaration of 'PyTy\npeObject {aka struct _typeobject}'\n     struct _typeobject *ob_type;\n            ^\nIn file included from ./boost/python/cast.hpp:12:0,\n                 from ./boost/python/refcount.hpp:9,\n                 from ./boost/python/to_python_indirect.hpp:19,\n                 from ./boost/python/converter/arg_to_python.hpp:10,\n                 from ./boost/python/call.hpp:15,\n                 from ./boost/python/object_core.hpp:14,\n                 from ./boost/python/object.hpp:9,\n                 from ./boost/python/list.hpp:10,\n                 from libs/python/src/list.cpp:5:\n./boost/python/base_type_traits.hpp: At global scope:\n./boost/python/base_type_traits.hpp:36:25: error: 'PyMethodObject' was not declared in t\nhis scope\n struct base_type_traits&lt;PyMethodObject&gt;\n                         ^\n./boost/python/base_type_traits.hpp:36:39: error: template argument 1 is invalid\n struct base_type_traits&lt;PyMethodObject&gt;\n</pre></div>\n\n\n<p>I see some of the objects mentioned in the long list of errors listed as being incomplete in the limited API: <a class=\"external\" href=\"https://www.python.org/dev/peps/pep-0384/#structures\">https://www.python.org/dev/peps/pep-0384/#structures</a>\n\n</p><p></p><hr/>\n<em>2017-Oct-25 16:15:23 by tim:</em> <br/>\n\nBoost does not currently does not support building with the limited api. (They will accept patches.) We don't have available effort to contribute such patches.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2017-Oct-25 16:15", "status": "defer", "created": "2017-Sep-05 11:17", "fixed_version": "2017-Sep-05 11:17", "broken_version": "v080703", "priority": "5", "subsystem": "PythonBinding", "assigned_to": "jpatton", "derived_from": "#4146", "creator": "tannenba", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "bbockelm@cse.unl.edu tannenba@cs.wisc.edu tim@cs.wisc.edu,pcouvare@caltech.edu", "due_date": ""}