diff --git a/src/condor_dagman/condor_submit_dag.cpp b/src/condor_dagman/condor_submit_dag.cpp
index 3f37131..235c6c9 100644
--- a/src/condor_dagman/condor_submit_dag.cpp
+++ b/src/condor_dagman/condor_submit_dag.cpp
@@ -208,7 +208,8 @@ doRecursionNew( SubmitDagDeepOptions &deepOpts,
 
 						// Now run condor_submit_dag on the DAG file.
 					if ( runSubmitDag( deepOpts, submitFile.Value(),
-								directory, false ) != 0 ) {
+								directory, shallowOpts.priority,
+								false ) != 0 ) {
 						result = 1;
 					}
 				}
@@ -233,7 +234,7 @@ doRecursionNew( SubmitDagDeepOptions &deepOpts,
 
 					// Now run condor_submit_dag on the DAG file.
 				if ( runSubmitDag( deepOpts, nestedDagFile, directory,
-							false ) != 0 ) {
+							shallowOpts.priority, false ) != 0 ) {
 					result = 1;
 				}
 			}
@@ -862,9 +863,9 @@ void writeSubmitFile( /* const */ SubmitDagDeepOptions &deepOpts,
 		args.AppendArg("-Import_env");
 	}
 
-	if( deepOpts.priority != 0 ) {
+	if( shallowOpts.priority != 0 ) {
 		args.AppendArg("-Priority");
-		args.AppendArg(deepOpts.priority);
+		args.AppendArg(shallowOpts.priority);
 	}
 
 	MyString arg_str,args_error;
@@ -1212,7 +1213,7 @@ parseCommandLine(SubmitDagDeepOptions &deepOpts,
 					fprintf(stderr, "-priority argument needs a value\n");
 					printUsage();
 				}
-				deepOpts.priority = atoi(argv[++iArg]);
+				shallowOpts.priority = atoi(argv[++iArg]);
 			}
 			else if ( (strArg.find("-dorecov") != -1) )
 			{
diff --git a/src/condor_dagman/dag.cpp b/src/condor_dagman/dag.cpp
index aa3d8a2..c6becad 100644
--- a/src/condor_dagman/dag.cpp
+++ b/src/condor_dagman/dag.cpp
@@ -131,9 +131,9 @@ Dag::Dag( /* const */ StringList &dagFiles,
 	_spliceScope		  (spliceScope),
 	_recoveryMaxfakeID	  (0),
 	_maxJobHolds		  (0),
-	_reject			  (false),
+	_reject				  (false),
 	_alwaysRunPost		  (true),
-	_defaultPriority	  (0),
+	_dagPriority		  (0),
 	_metrics			  (NULL)
 {
 
@@ -1391,21 +1391,15 @@ Dag::StartNode( Job *node, bool isRetry )
 		_preScriptQ->Run( node->_scriptPre );
 		return true;
     }
+
 	// no PRE script exists or is done, so add job to the queue of ready jobs
-	node->FixPriority(*this);
 	if ( isRetry && m_retryNodeFirst ) {
-		_readyQ->Prepend( node, -node->_nodePriority );
+		_readyQ->Prepend( node, -node->_effectivePriority );
 	} else {
-		if(node->_hasNodePriority){
-			Job::NodeVar *var = new Job::NodeVar();
-			var->_name = "priority";
-			var->_value = node->_nodePriority;
-			node->varsFromDag->Append( var );
-		}
 		if ( _submitDepthFirst ) {
-			_readyQ->Prepend( node, -node->_nodePriority );
+			_readyQ->Prepend( node, -node->_effectivePriority );
 		} else {
-			_readyQ->Append( node, -node->_nodePriority );
+			_readyQ->Append( node, -node->_effectivePriority );
 		}
 	}
 	return TRUE;
@@ -1546,7 +1540,7 @@ Dag::SubmitReadyJobs(const Dagman &dm)
 						"Node %s deferred by category throttle (%s, %d)\n",
 						job->GetJobName(), catThrottle->_category->Value(),
 						catThrottle->_maxJobs );
-			deferredJobs.Prepend( job, -job->_nodePriority );
+			deferredJobs.Prepend( job, -job->_effectivePriority );
 			_catThrottleDeferredCount++;
 		} else {
 
@@ -1577,7 +1571,7 @@ Dag::SubmitReadyJobs(const Dagman &dm)
 		debug_printf( DEBUG_DEBUG_1,
 					"Returning deferred node %s to the ready queue\n",
 					job->GetJobName() );
-		_readyQ->Prepend( job, -job->_nodePriority );
+		_readyQ->Prepend( job, -job->_effectivePriority );
 	}
 
 	return numSubmitsThisCycle;
@@ -1692,9 +1686,9 @@ Dag::PreScriptReaper( Job *job, int status )
 		job->retval = 0; // for safety on retries
 		job->SetStatus( Job::STATUS_READY );
 		if ( _submitDepthFirst ) {
-			_readyQ->Prepend( job, -job->_nodePriority );
+			_readyQ->Prepend( job, -job->_effectivePriority );
 		} else {
-			_readyQ->Append( job, -job->_nodePriority );
+			_readyQ->Append( job, -job->_effectivePriority );
 		}
 	}
 
@@ -2252,9 +2246,9 @@ Dag::WriteNodeToRescue( FILE *fp, Job *node, bool reset_retries_upon_rescue,
 			// Note: when gittrac #2167 gets merged, we need to think
 			// about how this code will interact with that code.
 			// wenger/nwp 2011-08-24
-		if ( node->_hasNodePriority ) {
+		if ( node->_explicitPriority != 0 ) {
 			fprintf( fp, "PRIORITY %s %d\n", node->GetJobName(),
-						node->_nodePriority );
+						node->_explicitPriority );
 		}
 
 			// Print the CATEGORY line, if any.
@@ -3884,35 +3878,6 @@ Dag::GetEventIDHash(bool isNoop) const
 // the higher level calling them to get right...
 //---------------------------------------------------------------------------
 
-// A RAII class to swap out the priorities below, then restore them
-// when we are done.
-class priority_swapper {
-public:
-	priority_swapper(bool nodepriority, int newprio, int& oldprio);
-	~priority_swapper();
-private:
-	priority_swapper(); // Not implemented
-	bool swapped;
-	int& oldp;
-	int oldp_value;
-};
-
-priority_swapper::priority_swapper(bool nodepriority, int newprio, int& oldprio) :
-	swapped(false), oldp(oldprio), oldp_value(oldprio)
-{
-	if( nodepriority && newprio > oldprio ) {
-		swapped = true;
-		oldp = newprio;
-	}
-}
-
-priority_swapper::~priority_swapper()
-{
-	if( swapped ) {
-		oldp = oldp_value;
-	}
-}
-
 Dag::submit_result_t
 Dag::SubmitNodeJob( const Dagman &dm, Job *node, CondorID &condorID )
 {
@@ -3942,9 +3907,9 @@ Dag::SubmitNodeJob( const Dagman &dm, Job *node, CondorID &condorID )
    	if ( !node->GetNoop() &&
 				node->GetDagFile() != NULL && _generateSubdagSubmits ) {
 		bool isRetry = node->GetRetries() > 0;
-		priority_swapper ps( node->_hasNodePriority, node->_nodePriority, _submitDagDeepOpts->priority);
 		if ( runSubmitDag( *_submitDagDeepOpts, node->GetDagFile(),
-					node->GetDirectory(), isRetry ) != 0 ) {
+					node->GetDirectory(), node->_effectivePriority,
+					isRetry ) != 0 ) {
 			++node->_submitTries;
 			debug_printf( DEBUG_QUIET,
 						"ERROR: condor_submit_dag -no_submit failed "
@@ -3984,7 +3949,8 @@ Dag::SubmitNodeJob( const Dagman &dm, Job *node, CondorID &condorID )
 
    		submit_success = condor_submit( dm, node->GetCmdFile(), condorID,
 					node->GetJobName(), parents,
-					node->varsFromDag, node->GetRetries(),
+					node->varsFromDag, node->_effectivePriority,
+					node->GetRetries(),
 					node->GetDirectory(), _defaultNodeLog,
 					node->NumChildren() > 0 && dm._claim_hold_time > 0,
 					batchName );
@@ -4094,9 +4060,9 @@ Dag::ProcessFailedSubmit( Job *node, int max_submit_attempts )
 				thisSubmitDelay == 1 ? "" : "s" );
 
 		if ( m_retrySubmitFirst ) {
-			_readyQ->Prepend(node, -node->_nodePriority);
+			_readyQ->Prepend(node, -node->_effectivePriority);
 		} else {
-			_readyQ->Append(node, -node->_nodePriority);
+			_readyQ->Append(node, -node->_effectivePriority);
 		}
 	}
 }
@@ -4466,21 +4432,14 @@ Dag::ResolveVarsInterpolations(void)
 }
 
 //---------------------------------------------------------------------------
-// Iterate over the jobs and set the default priority
-void Dag::SetDefaultPriorities()
+// Iterate over the jobs and set the effective priorities for the nodes.
+void Dag::SetNodePriorities()
 {
-	if(GetDefaultPriority() != 0) {
+	if ( GetDagPriority() != 0 ) {
 		Job* job;
 		_jobs.Rewind();
 		while( (job = _jobs.Next()) != NULL ) {
-			// If the DAG file has already assigned a priority
-			// Leave this job alone for now
-			if( !job->_hasNodePriority ) {
-				job->_hasNodePriority = true;
-				job->_nodePriority = GetDefaultPriority();
-			} else if( GetDefaultPriority() > job->_nodePriority ) {
-				job->_nodePriority = GetDefaultPriority();
-			}
+			job->_effectivePriority += GetDagPriority();
 		}
 	}
 }
diff --git a/src/condor_dagman/dag.h b/src/condor_dagman/dag.h
index edae678..d738bb7 100644
--- a/src/condor_dagman/dag.h
+++ b/src/condor_dagman/dag.h
@@ -717,9 +717,16 @@ class Dag {
 	JobstateLog &GetJobstateLog() { return _jobstateLog; }
 	bool GetPostRun() const { return _alwaysRunPost; }
 	void SetPostRun(bool postRun) { _alwaysRunPost = postRun; }	
-	void SetDefaultPriorities();
-	void SetDefaultPriority(const int prio) { _defaultPriority = prio; }
-	int GetDefaultPriority() const { return _defaultPriority; }
+
+		// Set the overall priority for this DAG (set on command
+		// line (could be from higher-level DAG) or via config).
+	void SetDagPriority(const int prio) { _dagPriority = prio; }
+
+		// Get this DAG's overall priority.
+	int GetDagPriority() const { return _dagPriority; }
+		
+		// Set priorities for the individual nodes within this DAG.
+	void SetNodePriorities();
 
 	/** Determine whether the DAG is currently halted (waiting for
 		existing jobs to finish but not submitting any new ones).
@@ -1190,8 +1197,8 @@ private:
 	// Defaults to true
 	bool _alwaysRunPost;
 
-		// The default priority for nodes in this DAG. (defaults to 0)
-	int _defaultPriority;
+		// The priority for this DAG. (defaults to 0)
+	int _dagPriority;
 
 		// Whether the DAG is currently halted.
 	bool _dagIsHalted;
diff --git a/src/condor_dagman/dagman_main.cpp b/src/condor_dagman/dagman_main.cpp
index 8f22208..ea68b97 100644
--- a/src/condor_dagman/dagman_main.cpp
+++ b/src/condor_dagman/dagman_main.cpp
@@ -139,7 +139,7 @@ Dagman::Dagman() :
 	_generateSubdagSubmits(true),
 	_maxJobHolds(100),
 	_runPost(false),
-	_defaultPriority(0),
+	_priority(0), // from config or command line
 	_claim_hold_time(20),
 	_doRecovery(false),
 	_suppressJobLogs(false),
@@ -238,10 +238,10 @@ Dagman::Config()
 	debug_printf( DEBUG_NORMAL, "DAGMAN_USER_LOG_SCAN_INTERVAL setting: %d\n",
 				m_user_log_scan_interval );
 
-	_defaultPriority = param_integer( "DAGMAN_DEFAULT_PRIORITY",
-				_defaultPriority, INT_MIN, INT_MAX, false );
+	_priority = param_integer( "DAGMAN_DEFAULT_PRIORITY",
+				_priority, INT_MIN, INT_MAX, false );
 	debug_printf( DEBUG_NORMAL, "DAGMAN_DEFAULT_PRIORITY setting: %d\n",
-				_defaultPriority );
+				_priority );
 
 	if ( !param_boolean( "DAGMAN_ALWAYS_USE_NODE_LOG", true ) ) {
        	debug_printf( DEBUG_QUIET,
@@ -843,7 +843,7 @@ void main_init (int argc, char ** const argv) {
 				debug_printf( DEBUG_NORMAL, "No priority value specified\n");
 				Usage();
 			}
-			dagman._submitDagDeepOpts.priority = atoi(argv[i]);
+			dagman._priority = atoi(argv[i]);
 
 		} else if( !strcasecmp( "-dont_use_default_node_log", argv[i] ) ) {
        		debug_printf( DEBUG_QUIET,
@@ -1130,11 +1130,8 @@ void main_init (int argc, char ** const argv) {
 	dagman.dag->SetConfigFile( dagman._dagmanConfigFile );
 	dagman.dag->SetMaxJobHolds( dagman._maxJobHolds );
 	dagman.dag->SetPostRun(dagman._runPost);
-	if( dagman._submitDagDeepOpts.priority != 0 ) { // From command line
-		dagman.dag->SetDefaultPriority(dagman._submitDagDeepOpts.priority);
-	} else if( dagman._defaultPriority != 0 ) { // From config file
-		dagman.dag->SetDefaultPriority(dagman._defaultPriority);
-		dagman._submitDagDeepOpts.priority = dagman._defaultPriority;
+	if( dagman._priority != 0 ) {
+		dagman.dag->SetDagPriority(dagman._priority);
 	}
 
     //
@@ -1181,8 +1178,8 @@ void main_init (int argc, char ** const argv) {
 					 	dagFile );
     	}
 	}
-	if( dagman.dag->GetDefaultPriority() != 0 ) {
-		dagman.dag->SetDefaultPriorities(); // Applies to the nodes of the dag
+	if( dagman.dag->GetDagPriority() != 0 ) {
+		dagman.dag->SetNodePriorities(); // Applies to the nodes of the dag
 	}
 	dagman.dag->GetJobstateLog().WriteDagmanStarted( dagman.DAGManJobId );
 	if ( rescueDagNum > 0 ) {
diff --git a/src/condor_dagman/dagman_main.h b/src/condor_dagman/dagman_main.h
index f6c7a06..816323b 100644
--- a/src/condor_dagman/dagman_main.h
+++ b/src/condor_dagman/dagman_main.h
@@ -214,8 +214,8 @@ class Dagman {
 		// script for the node fails.
 	bool _runPost;
 
-		// Default priority that DAGman uses for nodes.
-	int _defaultPriority;
+		// Priority for this DAG.
+	int _priority;
 
 	int _claim_hold_time;
 
diff --git a/src/condor_dagman/dagman_recursive_submit.cpp b/src/condor_dagman/dagman_recursive_submit.cpp
index a3f210a..16d0585 100644
--- a/src/condor_dagman/dagman_recursive_submit.cpp
+++ b/src/condor_dagman/dagman_recursive_submit.cpp
@@ -25,17 +25,10 @@
 #include "my_popen.h"
 
 //---------------------------------------------------------------------------
-/** Run condor_submit_dag on the given DAG file.
-	@param opts: the condor_submit_dag options
-	@param dagFile: the DAG file to process
-	@param directory: the directory from which the DAG file should
-		be processed (ignored if NULL)
-	@param isRetry: whether this is a retry of a sub-DAG node
-	@return 0 if successful, 1 if failed
-*/
 int
 runSubmitDag( const SubmitDagDeepOptions &deepOpts,
-			const char *dagFile, const char *directory, bool isRetry )
+			const char *dagFile, const char *directory, int priority,
+			bool isRetry )
 {
 	int result = 0;
 
@@ -122,9 +115,9 @@ runSubmitDag( const SubmitDagDeepOptions &deepOpts,
 		args.AppendArg( "-update_submit" );
 	}
 
-	if( deepOpts.priority != 0) {
+	if( priority != 0) {
 		args.AppendArg( "-Priority" );
-		args.AppendArg( deepOpts.priority );
+		args.AppendArg( priority );
 	}
 
 	if( deepOpts.suppress_notification ) {
diff --git a/src/condor_dagman/dagman_recursive_submit.h b/src/condor_dagman/dagman_recursive_submit.h
index 065b7b9..95508da 100644
--- a/src/condor_dagman/dagman_recursive_submit.h
+++ b/src/condor_dagman/dagman_recursive_submit.h
@@ -55,6 +55,7 @@ struct SubmitDagShallowOptions
 	bool doRecovery;
 	bool bPostRun;
 	bool bPostRunSet; // whether this was actually set on the command line
+	int priority;
 
 	// non-command line options
 	MyString strLibOut;
@@ -88,6 +89,7 @@ struct SubmitDagShallowOptions
 		doRecovery = false;
 		copyToSpool = param_boolean( "DAGMAN_COPY_TO_SPOOL", false );
 		iDebugLevel = DEBUG_UNSET;
+		priority = 0;
 	}
 };
 
@@ -113,7 +115,6 @@ struct SubmitDagDeepOptions
 	bool recurse; // whether to recursively run condor_submit_dag on nested DAGs
 	bool updateSubmit; // allow updating submit file w/o -force
 	bool importEnv; // explicitly import environment into .condor.sub file
-	int priority; // Priority of parent of DAG node
 
 	bool suppress_notification;
 	MyString acctGroup;
@@ -132,7 +133,6 @@ struct SubmitDagDeepOptions
 		recurse = false;
 		updateSubmit = false;
 		importEnv = false;
-		priority = 0;
 		suppress_notification = true;
 		acctGroup = "";
 		acctGroupUser = "";
@@ -145,10 +145,13 @@ extern "C" {
 	@param dagFile: the DAG file to process
 	@param directory: the directory from which the DAG file should
 		be processed (ignored if NULL)
+	@param priority: the priority of this DAG
+	@param isRetry: whether this is a retry
 	@return 0 if successful, 1 if failed
 */
 int runSubmitDag( const SubmitDagDeepOptions &deepOpts,
-			const char *dagFile, const char *directory, bool isRetry );
+			const char *dagFile, const char *directory, int priority,
+			bool isRetry );
 }
 
 #endif	// ifndef DAGMAN_RECURSIVE_SUBMIT_H
diff --git a/src/condor_dagman/dagman_submit.cpp b/src/condor_dagman/dagman_submit.cpp
index 462d7ca..ea3cda6 100644
--- a/src/condor_dagman/dagman_submit.cpp
+++ b/src/condor_dagman/dagman_submit.cpp
@@ -204,7 +204,7 @@ do_submit( ArgList &args, CondorID &condorID, bool prohibitMultiJobs )
 bool
 condor_submit( const Dagman &dm, const char* cmdFile, CondorID& condorID,
 			   const char* DAGNodeName, MyString &DAGParentNodeNames,
-			   List<Job::NodeVar> *vars, int retry,
+			   List<Job::NodeVar> *vars, int priority, int retry,
 			   const char* directory, const char *workflowLogFile,
 			   bool hold_claim, const MyString &batchName )
 {
@@ -286,6 +286,15 @@ condor_submit( const Dagman &dm, const char* cmdFile, CondorID& condorID,
 	dmask += "\"";
 	args.AppendArg( dmask.c_str() );
 
+		// Append the priority, if we have one.
+	if ( priority != 0 ) {
+		args.AppendArg( "-a" );
+		MyString prioStr = "priority=";
+		prioStr += priority;
+		args.AppendArg( prioStr.Value() );
+	}
+
+
 		// Suppress the job's log file if that option is enabled.
 	if ( dm._suppressJobLogs ) {
 		debug_printf( DEBUG_VERBOSE, "Suppressing node job log file\n" );
diff --git a/src/condor_dagman/job.cpp b/src/condor_dagman/job.cpp
index a9588a4..afdba58 100644
--- a/src/condor_dagman/job.cpp
+++ b/src/condor_dagman/job.cpp
@@ -124,8 +124,8 @@ Job::Job( const char* jobName,
 
 	_queuedNodeJobProcs = 0;
 
-	_hasNodePriority = false;
-	_nodePriority = 0;
+	_explicitPriority = 0;
+	_effectivePriority = _explicitPriority;
 
 	_noop = false;
 
@@ -816,35 +816,6 @@ Job::GetPreSkip() const
 }
 
 //---------------------------------------------------------------------------
-// If there is a cycle, could this enter an infinite loop?
-// No: If there is a cycle, there will be equality, and recursion will stop
-// It makes no sense to insert job priorities on linear DAGs;
-
-// The scheme here is to copy the priority from parent nodes, if a parent node
-// has priority higher than the job priority currently assigned to the node, or
-// use the default priority of the DAG; otherwise, we use the priority from the
-// DAG file. Priorities calculated by DAGman will ignore and override job
-// priorities set in the submit file.
-
-// DAGman fixes the default priorities in Dag::SetDefaultPriorities
-
-void
-Job::FixPriority(Dag& dag)
-{
-	std::set<JobID_t> parents = GetQueueRef(Q_PARENTS);
-	for(std::set<JobID_t>::iterator p = parents.begin(); p != parents.end(); ++p){
-		Job* parent = dag.FindNodeByNodeID(*p);
-		if( parent->_hasNodePriority ) {
-			// Nothing to do if parent priority is small
-			if( parent->_nodePriority > _nodePriority ) {
-				_nodePriority = parent->_nodePriority;
-				_hasNodePriority = true;
-			}
-		}
-	}
-}
-
-//---------------------------------------------------------------------------
 bool
 Job::SetCondorID(const CondorID& cid)
 {
diff --git a/src/condor_dagman/job.h b/src/condor_dagman/job.h
index 0ed5b61..d5282fc 100644
--- a/src/condor_dagman/job.h
+++ b/src/condor_dagman/job.h
@@ -390,7 +390,6 @@ class Job {
 		@return the last event time.
 	*/
 	time_t GetLastEventTime() { return _lastEventTime; }
-	void FixPriority(Dag& dag);
 
 	bool HasPreSkip() const { return _preskip != PRE_SKIP_INVALID; }
 	int GetPreSkip() const;
@@ -474,11 +473,14 @@ public:
 		// queue for this node.
 	int _queuedNodeJobProcs;
 
-		// Whether the _nodePriority value is meaningful.
-	bool _hasNodePriority;
-
 		// Node priority.  Higher number is better priority (submit first).
-	int _nodePriority;
+		// Explicit priority is the priority actually set in the DAG
+		// file (0 if not set).
+	int _explicitPriority;
+		// Effective priority is the priority at which we're going to
+		// actually submit the job (explicit priority adjusted
+		// according to the DAG priority algorithm).
+	int _effectivePriority;
 
 		// The number of times this job has been held.  (Note: the current
 		// implementation counts holds for all procs in a multi-proc cluster
diff --git a/src/condor_dagman/parse.cpp b/src/condor_dagman/parse.cpp
index 7535c36..77c7173 100644
--- a/src/condor_dagman/parse.cpp
+++ b/src/condor_dagman/parse.cpp
@@ -1604,14 +1604,16 @@ parse_priority(
 		return false;
 	}
 
-	if ( job->_hasNodePriority && job->_nodePriority != priorityVal ) {
+	if ( ( job->_explicitPriority != 0 )
+				&& ( job->_explicitPriority != priorityVal ) ) {
 		debug_printf( DEBUG_NORMAL, "Warning: new priority %d for node %s "
 					"overrides old value %d\n", priorityVal,
-					job->GetJobName(), job->_nodePriority );
+					job->GetJobName(), job->_explicitPriority );
 		check_warning_strictness( DAG_STRICT_2 );
 	}
-	job->_hasNodePriority = true;
-	job->_nodePriority = priorityVal;
+
+	job->_explicitPriority = priorityVal;
+	job->_effectivePriority = priorityVal;
 
 	return true;
 }
diff --git a/src/condor_dagman/submit.h b/src/condor_dagman/submit.h
index dd09c29..4b93520 100644
--- a/src/condor_dagman/submit.h
+++ b/src/condor_dagman/submit.h
@@ -40,6 +40,7 @@
 	@param DAGNodeName the name of the job's DAG node
 	@param DAGParentNodeNames a delimited string listing the node's parents
 	@param vars list of any variables for this node
+	@param priority the priority of this node
 	@param retry the retry number (0 the first time the job is run)
 	@param directory the directory in which to run this job
 	@param default log file name
@@ -52,7 +53,7 @@
 
 bool condor_submit( const Dagman &dm, const char* cmdFile, CondorID& condorID,
 					const char* DAGNodeName, MyString &DAGParentNodeNames,
-					List<Job::NodeVar> *vars, int retry,
+					List<Job::NodeVar> *vars, int priority, int retry,
 					const char* directory, const char *worflowLogFile,
 					bool hold_claim, const MyString &batchName );
 
diff --git a/src/condor_tests/job_dagman_propogate_priorities-A.cmd b/src/condor_tests/job_dagman_propogate_priorities-A.cmd
deleted file mode 100644
index 1d9f9fd..0000000
--- a/src/condor_tests/job_dagman_propogate_priorities-A.cmd
+++ /dev/null
@@ -1,6 +0,0 @@
-executable = /bin/echo
-arguments = DAG node $$([dagnodename]) has priority $$([jobprio])
-error = $(jobname).err
-output = $(jobname).out
-log = job_dagman_propogate_priorities.log
-queue
diff --git a/src/condor_tests/job_dagman_propogate_priorities-B.cmd b/src/condor_tests/job_dagman_propogate_priorities-B.cmd
deleted file mode 100644
index 1d9f9fd..0000000
--- a/src/condor_tests/job_dagman_propogate_priorities-B.cmd
+++ /dev/null
@@ -1,6 +0,0 @@
-executable = /bin/echo
-arguments = DAG node $$([dagnodename]) has priority $$([jobprio])
-error = $(jobname).err
-output = $(jobname).out
-log = job_dagman_propogate_priorities.log
-queue
diff --git a/src/condor_tests/job_dagman_propogate_priorities-C.cmd b/src/condor_tests/job_dagman_propogate_priorities-C.cmd
deleted file mode 100644
index 1d9f9fd..0000000
--- a/src/condor_tests/job_dagman_propogate_priorities-C.cmd
+++ /dev/null
@@ -1,6 +0,0 @@
-executable = /bin/echo
-arguments = DAG node $$([dagnodename]) has priority $$([jobprio])
-error = $(jobname).err
-output = $(jobname).out
-log = job_dagman_propogate_priorities.log
-queue
diff --git a/src/condor_tests/job_dagman_propogate_priorities-D.cmd b/src/condor_tests/job_dagman_propogate_priorities-D.cmd
deleted file mode 100644
index ad2d05b..0000000
--- a/src/condor_tests/job_dagman_propogate_priorities-D.cmd
+++ /dev/null
@@ -1,6 +0,0 @@
-executable = /bin/echo
-arguments = DAG node $$([dagnodename]) has priority $$([jobprio])
-error = $(jobname).err
-output = $(jobname).out
-log = job_dagman_propogate_priorities-D.log
-queue
diff --git a/src/condor_tests/job_dagman_propogate_priorities-lower1.dag b/src/condor_tests/job_dagman_propogate_priorities-lower1.dag
new file mode 100644
index 0000000..6926a5a
--- /dev/null
+++ b/src/condor_tests/job_dagman_propogate_priorities-lower1.dag
@@ -0,0 +1,10 @@
+# Priority from parent DAG (via condor_submit_dag command line)
+# should override this.
+CONFIG job_dagman_propogate_priorities.config
+
+JOB nodeD job_dagman_propogate_priorities-node.cmd
+VARS nodeD jobname="job_dagman_propogate_priorities-D"
+PRIORITY nodeD 10
+
+JOB nodeE job_dagman_propogate_priorities-node.cmd
+VARS nodeE jobname="job_dagman_propogate_priorities-E"
diff --git a/src/condor_tests/job_dagman_propogate_priorities-lower2.dag b/src/condor_tests/job_dagman_propogate_priorities-lower2.dag
new file mode 100644
index 0000000..a00fad2
--- /dev/null
+++ b/src/condor_tests/job_dagman_propogate_priorities-lower2.dag
@@ -0,0 +1,3 @@
+JOB nodeF job_dagman_propogate_priorities-node.cmd
+VARS nodeF jobname="job_dagman_propogate_priorities-F"
+PRIORITY nodeF 30
diff --git a/src/condor_tests/job_dagman_propogate_priorities-node.cmd b/src/condor_tests/job_dagman_propogate_priorities-node.cmd
new file mode 100644
index 0000000..f22b61c
--- /dev/null
+++ b/src/condor_tests/job_dagman_propogate_priorities-node.cmd
@@ -0,0 +1,5 @@
+executable = /bin/echo
+arguments = DAG node $$([dagnodename]) has priority $$([jobprio])
+error = $(jobname).err
+output = $(jobname).out
+queue
diff --git a/src/condor_tests/job_dagman_propogate_priorities.config b/src/condor_tests/job_dagman_propogate_priorities.config
new file mode 100644
index 0000000..baaf450
--- /dev/null
+++ b/src/condor_tests/job_dagman_propogate_priorities.config
@@ -0,0 +1 @@
+DAGMAN_DEFAULT_PRIORITY = 7
diff --git a/src/condor_tests/job_dagman_propogate_priorities.dag b/src/condor_tests/job_dagman_propogate_priorities.dag
index 0cfc555..a3474f0 100644
--- a/src/condor_tests/job_dagman_propogate_priorities.dag
+++ b/src/condor_tests/job_dagman_propogate_priorities.dag
@@ -1,13 +1,23 @@
-JOB nodeA job_dagman_propogate_priorities-A.cmd
+CONFIG job_dagman_propogate_priorities.config
+
+JOB nodeA job_dagman_propogate_priorities-node.cmd
 VARS nodeA jobname="job_dagman_propogate_priorities-A"
-JOB nodeB job_dagman_propogate_priorities-B.cmd
+
+JOB nodeB job_dagman_propogate_priorities-node.cmd
 VARS nodeB jobname="job_dagman_propogate_priorities-B"
-JOB nodeC job_dagman_propogate_priorities-C.cmd
+
+JOB nodeC job_dagman_propogate_priorities-node.cmd
 VARS nodeC jobname="job_dagman_propogate_priorities-C"
-SUBDAG EXTERNAL subdagD job_dagman_propogate_priorities.subdag
+
+SUBDAG EXTERNAL subdagD job_dagman_propogate_priorities-lower1.dag
+
+SUBDAG EXTERNAL subdagE job_dagman_propogate_priorities-lower2.dag
+
 PARENT nodeA CHILD nodeB
-PARENT nodeC CHILD subdagD
+PARENT nodeC CHILD subdagD subdagE
+
 PRIORITY nodeA 60
-PRIORITY nodeB 0
+# PRIORITY nodeB 0
 PRIORITY nodeC 5
 PRIORITY subdagD 100
+PRIORITY subdagE -20
diff --git a/src/condor_tests/job_dagman_propogate_priorities.run b/src/condor_tests/job_dagman_propogate_priorities.run
index 1e249cc..0314968 100755
--- a/src/condor_tests/job_dagman_propogate_priorities.run
+++ b/src/condor_tests/job_dagman_propogate_priorities.run
@@ -37,7 +37,9 @@ $logfile = "job_dagman_propogate_priorities.dag.dagman.out";
 	'job_dagman_propogate_priorities-A.out',
 	'job_dagman_propogate_priorities-B.out',
 	'job_dagman_propogate_priorities-C.out',
-	'job_dagman_propogate_priorities-D.out');
+	'job_dagman_propogate_priorities-D.out',
+	'job_dagman_propogate_priorities-E.out',
+	'job_dagman_propogate_priorities-F.out');
 
 # truly const variables in perl
 sub IDLE{1};
@@ -101,28 +103,36 @@ $success = sub {
 	}
 
 	# Check node priorities...
-	foreach ('nodeA','nodeB','nodeC','nodeD') {
+	foreach ('nodeA','nodeB','nodeC','nodeD','nodeE','nodeF') {
 		if(! defined $priority{$_}){
 			CondorTest::debug("Did not see priority for $_\n");
 			$diditpass = 0;
 			die;
 		}
 	}
-	if ($priority{'nodeA'} != 60) {
+	if ($priority{'nodeA'} != 67) {
 		$diditpass = 0;
-		CondorTest::debug("nodeA priority was $priority{'nodeA'}; should be 60\n");
+		CondorTest::debug("nodeA priority was $priority{'nodeA'}; should be 67\n");
 	}
-	if ($priority{'nodeB'} != 60) {
+	if ($priority{'nodeB'} != 7) {
 		$diditpass = 0;
-		CondorTest::debug("nodeB priority was $priority{'nodeB'}; should be 60\n");
+		CondorTest::debug("nodeB priority was $priority{'nodeB'}; should be 7\n");
 	}
-	if ($priority{'nodeC'} != 5) {
+	if ($priority{'nodeC'} != 12) {
 		$diditpass = 0;
-		CondorTest::debug("nodeC priority was $priority{'nodeC'}; should be 5\n");
+		CondorTest::debug("nodeC priority was $priority{'nodeC'}; should be 12\n");
 	}
-	if ($priority{'nodeD'} != 100) {
+	if ($priority{'nodeD'} != 117) {
 		$diditpass = 0;
-		CondorTest::debug("nodeD priority was $priority{'nodeD'}; should be 100\n");
+		CondorTest::debug("nodeD priority was $priority{'nodeD'}; should be 117\n");
+	}
+	if ($priority{'nodeE'} != 107) {
+		$diditpass = 0;
+		CondorTest::debug("nodeE priority was $priority{'nodeE'}; should be 107\n");
+	}
+	if ($priority{'nodeF'} != 17) {
+		$diditpass = 0;
+		CondorTest::debug("nodeF priority was $priority{'nodeF'}; should be 17\n");
 	}
 
 	if($diditpass == 0) {
diff --git a/src/condor_tests/job_dagman_propogate_priorities.subdag b/src/condor_tests/job_dagman_propogate_priorities.subdag
deleted file mode 100644
index fe333c4..0000000
--- a/src/condor_tests/job_dagman_propogate_priorities.subdag
+++ /dev/null
@@ -1,3 +0,0 @@
-JOB nodeD job_dagman_propogate_priorities-D.cmd
-VARS nodeD jobname="job_dagman_propogate_priorities-D"
-PRIORITY nodeD 10
