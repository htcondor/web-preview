diff --git a/src/condor_master.V6/master.cpp b/src/condor_master.V6/master.cpp
index e44e18d..e4847c5 100644
--- a/src/condor_master.V6/master.cpp
+++ b/src/condor_master.V6/master.cpp
@@ -72,7 +72,8 @@ extern "C"
 
 // local function prototypes
 void	init_params();
-int		init_daemon_list();
+void	init_daemon_list();
+int	init_daemons();
 void	init_classad();
 void	init_firewall_exceptions();
 void	check_uid_for_privsep();
@@ -80,15 +81,15 @@ void	lock_or_except(const char * );
 time_t 	GetTimeStamp(char* file);
 int 	NewExecutable(char* file, time_t* tsp);
 void	RestartMaster();
-int		run_preen(Service*);
+int	run_preen(Service*);
 void	usage(const char* );
-int		main_shutdown_graceful();
-int		main_shutdown_fast();
-int		main_config( bool is_full );
-int		agent_starter(ReliSock *);
-int		handle_agent_fetch_log(ReliSock *);
-int		admin_command_handler(Service *, int, Stream *);
-int		handle_subsys_command(int, Stream *);
+int	main_shutdown_graceful();
+int	main_shutdown_fast();
+int	main_config( bool is_full );
+int	agent_starter(ReliSock *);
+int	handle_agent_fetch_log(ReliSock *);
+int	admin_command_handler(Service *, int, Stream *);
+int	handle_subsys_command(int, Stream *);
 int     handle_shutdown_program( int cmd, Stream* stream );
 void	time_skip_handler(void * /*data*/, int delta);
 void	restart_everyone();
@@ -122,6 +123,7 @@ int		AllowAdminCommands = FALSE;
 int		StartDaemons = TRUE;
 int		GotDaemonsOff = FALSE;
 int		MasterShuttingDown = FALSE;
+StringList daemon_names, dc_daemon_names, ha_names;
 
 char	*default_daemon_list[] = {
 	"MASTER",
@@ -277,8 +279,9 @@ main_init( int argc, char* argv[] )
 		// Grab all parameters needed by the master.
 	init_params();
 		// param() for DAEMON_LIST and initialize our daemons object.
-	if ( init_daemon_list() < 0 ) {
-		EXCEPT( "Daemon list initialization failed" );
+	init_daemon_list();
+	if ( init_daemons() < 0 ) {
+		EXCEPT( "Daemon initialization failed" );
 	}
 		// Lookup the paths to all the daemons we now care about.
 	daemons.InitParams();
@@ -741,15 +744,12 @@ init_params()
 }
 
 
-int
+void
 init_daemon_list()
 {
-	char	*daemon_name;
-	class daemon	*new_daemon;
-	StringList daemon_names, dc_daemon_names;
-
 	char* dc_daemon_list = param("DC_DAEMON_LIST");
 
+	dc_daemon_names.clearAll();
 	if( !dc_daemon_list ) {
 		dc_daemon_names.initializeFromString(default_dc_daemon_list);
 	}
@@ -796,29 +796,20 @@ init_daemon_list()
 	dc_daemon_names.remove( "" );
 
 	char* ha_list = param("MASTER_HA_LIST");
+	ha_names.clearAll();
 	if( ha_list ) {
 			// Make MASTER_HA_LIST case insensitive by always converting
 			// what we get to uppercase.
-		StringList	ha_names;
 		ha_list = strupr( ha_list );
 		ha_names.initializeFromString(ha_list);
 		free( ha_list );
 			// Tolerate a trailing comma in the list
 		ha_names.remove( "" );
-
-		ha_names.rewind();
-		while( (daemon_name = ha_names.next()) ) {
-			if(daemons.GetIndex(daemon_name) < 0) {
-				if( dc_daemon_names.contains(daemon_name) ) {
-					new_daemon = new class daemon(daemon_name, true, true );
-				} else {
-					new_daemon = new class daemon(daemon_name, false, true );
-				}
-			}
-		}
 	}
 
 	char* daemon_list = param("DAEMON_LIST");
+dprintf(D_ALWAYS, "DAEMON_LIST = %s\n", daemon_list);
+	daemon_names.clearAll();
 	if( daemon_list ) {
 			// Make DAEMON_LIST case insensitive by always converting
 			// what we get to uppercase.
@@ -849,10 +840,33 @@ init_daemon_list()
 			daemon_names.next();
 			daemon_names.insert( "COLLECTOR" );
 		}
+	}
+}
+
+
+int
+init_daemons()
+{
+	class daemon	*new_daemon;
+	char	*daemon_name;
+
+	if( false == ha_names.isEmpty( ) ) {
+		ha_names.rewind();
+		while( (daemon_name = ha_names.next()) ) {
+			if(daemons.FindDaemon(daemon_name) == NULL) {
+				if( dc_daemon_names.contains(daemon_name) ) {
+					new_daemon = new class daemon(daemon_name, true, true );
+				} else {
+					new_daemon = new class daemon(daemon_name, false, true );
+				}
+			}
+		}
+	}
 
+	if( false == daemon_names.isEmpty( ) ) {
 		daemon_names.rewind();
 		while( (daemon_name = daemon_names.next()) ) {
-			if(daemons.GetIndex(daemon_name) < 0) {
+			if(daemons.FindDaemon(daemon_name) == NULL) {
 				if( dc_daemon_names.contains(daemon_name) ) {
 					new_daemon = new class daemon(daemon_name);
 				} else {
@@ -875,7 +889,6 @@ check_daemon_list()
 {
 	char	*daemon_name;
 	class daemon	*new_daemon;
-	StringList daemon_names;
 	char* daemon_list = param("DAEMON_LIST");
 	if( !daemon_list ) {
 			// Without a daemon list, there's no way it could be
@@ -894,7 +907,7 @@ check_daemon_list()
 
 	daemon_names.rewind();
 	while( (daemon_name = daemon_names.next()) ) {
-		if(daemons.GetIndex(daemon_name) < 0) {
+		if(daemons.FindDaemon(daemon_name) == NULL) {
 			new_daemon = new class daemon(daemon_name);
 		}
 	}
@@ -966,25 +979,74 @@ lock_or_except( const char* file_name )
 int
 main_config( bool /* is_full */ )
 {
+	StringList old_daemon_list;
+	char *list = daemon_names.print_to_string();
+	char *daemon_name;
+	class daemon	*new_daemon;
+	int new_daemons = 0;
+
+	if( list ) {
+		old_daemon_list.initializeFromString(list);
+		free(list);
+	}
+
 		// Re-read the config files and create a new classad
 	init_classad(); 
 
 		// Reset our config values
 	init_params();
 
+		// Reset the daemon list
+	init_daemon_list();
+
 		// Re-read the paths to our executables.  If any paths
 		// changed, the daemons will be marked as having a new
 		// executable.
 	daemons.InitParams();
 
 	if( StartDaemons ) {
-			// Restart any daemons who's executables are new or ones 
+			// Remove daemons that should no longer be running
+		old_daemon_list.rewind();
+		while( (daemon_name = old_daemon_list.next()) ) {
+			if( !daemon_names.contains(daemon_name) ) {
+				if( NULL != daemons.FindDaemon(daemon_name) ) {
+					daemons.StopDaemon(daemon_name);
+				}
+			}
+		}
+	
+			// Restart any daemons who's executables are new or ones
 			// that the path to the executable has changed.  
 		daemons.immediate_restart = TRUE;
 		daemons.CheckForNewExecutable();
 		daemons.immediate_restart = FALSE;
 			// Tell all the daemons that are running to reconfig.
 		daemons.ReconfigAllDaemons();
+
+			// Start daemons that are new to the configuration
+		daemon_names.rewind();
+		while( ( daemon_name = daemon_names.next() ) ) {
+			if( !old_daemon_list.contains(daemon_name) ) {
+				if( dc_daemon_names.contains(daemon_name) ) {
+					new_daemon = new class daemon(daemon_name);
+				} else {
+					new_daemon = new class daemon(daemon_name, false);
+				}
+				if ( new_daemon->SetupController() < 0 ) {
+					dprintf( D_ALWAYS,
+							"Setup for daemon %s failed\n",
+							new_daemon->daemon_name );
+				}
+				else {
+					new_daemon->InitParams();
+					++new_daemons;
+				}
+			}
+		}
+		if( new_daemons > 0 ) {
+			daemons.StartAllDaemons();
+		}
+	
 	} else {
 		daemons.DaemonsOff();
 	}
@@ -1361,14 +1423,14 @@ void init_firewall_exceptions() {
 	}
 
 	// Insert daemons needed on a central manager
-	if ( (! (daemons.GetIndex("NEGOTIATOR") < 0) ) && negotiator_image_path ) {
+	if ( (daemons.FindDaemon("NEGOTIATOR") != NULL) && negotiator_image_path ) {
 		if ( !wfh.addTrusted(negotiator_image_path) ) {
 			dprintf(D_FULLDEBUG, "WinFirewall: unable to add %s to the "
 				"windows firewall exception list.\n",
 				negotiator_image_path);
 		}
 	}
-	if ( (! (daemons.GetIndex("COLLECTOR") < 0) ) && collector_image_path ) {
+	if ( (daemons.FindDaemon("COLLECTOR") != NULL) && collector_image_path ) {
 		if ( !wfh.addTrusted(collector_image_path) ) {
 			dprintf(D_FULLDEBUG, "WinFirewall: unable to add %s to the "
 				"windows firewall exception list.\n",
@@ -1377,7 +1439,7 @@ void init_firewall_exceptions() {
 	}
 
 	// Insert daemons needed on a submit node
-	if ( (! (daemons.GetIndex("SCHEDD") < 0) ) && schedd_image_path ) {
+	if ( (daemons.FindDaemon("SCHEDD") != NULL) && schedd_image_path ) {
 		// put in schedd
 		if ( !wfh.addTrusted(schedd_image_path) ) {
 			dprintf(D_FULLDEBUG, "WinFirewall: unable to add %s to the "
@@ -1414,7 +1476,7 @@ void init_firewall_exceptions() {
 	// Note we include the starter and friends seperately, since the
 	// starter could run on either execute or submit nodes (think 
 	// local universe jobs).
-	if ( (! (daemons.GetIndex("STARTD") < 0) ) && startd_image_path ) {
+	if ( (daemons.FindDaemon("STARTD") != NULL) && startd_image_path ) {
 		if ( !wfh.addTrusted(startd_image_path) ) {
 			dprintf(D_FULLDEBUG, "WinFirewall: unable to add %s to the "
 				"windows firewall exception list.\n",
@@ -1427,7 +1489,7 @@ void init_firewall_exceptions() {
 		}
 	}
 
-	if ( (! (daemons.GetIndex("QUILL") < 0) ) && quill_image_path ) {
+	if ( (daemons.FindDaemon("QUILL") != NULL) && quill_image_path ) {
 		if ( !wfh.addTrusted(quill_image_path) ) {
 			dprintf(D_FULLDEBUG, "WinFirewall: unable to add %s to the "
 				"windows firewall exception list.\n",
@@ -1435,7 +1497,7 @@ void init_firewall_exceptions() {
 		}
 	}
 
-	if ( (! (daemons.GetIndex("DBMSD") < 0) ) && dbmsd_image_path ) {
+	if ( (daemons.FindDaemon("DBMSD") != NULL) && dbmsd_image_path ) {
 		if ( !wfh.addTrusted(dbmsd_image_path) ) {
 			dprintf(D_FULLDEBUG, "WinFirewall: unable to add %s to the "
 				"windows firewall exception list.\n",
@@ -1451,7 +1513,7 @@ void init_firewall_exceptions() {
 		}
 	}
 
-	if ( (! (daemons.GetIndex("CREDD") < 0) ) && credd_image_path ) {
+	if ( (daemons.FindDaemon("CREDD") != NULL) && credd_image_path ) {
 		if ( !wfh.addTrusted(credd_image_path) ) {
 			dprintf(D_FULLDEBUG, "WinFirewall: unable to add %s to the "
 				"windows firewall exception list.\n",
diff --git a/src/condor_master.V6/master.h b/src/condor_master.V6/master.h
index feb27c7..d3ee17a 100644
--- a/src/condor_master.V6/master.h
+++ b/src/condor_master.V6/master.h
@@ -78,6 +78,7 @@ public:
 	void	Kill( int );
 	void	KillFamily( void );
 	void	Reconfig();
+	void	InitParams();
 
 	int		SetupController( void );
 	int		RegisterControllee( class daemon * );
@@ -140,7 +141,6 @@ public:
 	Daemons();
 	void	RegisterDaemon(class daemon *);
 	void 	InitParams();
-	int		GetIndex(const char* process_name);
 
 	void	CheckForNewExecutable();
 	void	DaemonsOn();
@@ -149,6 +149,7 @@ public:
 	void 	StartAllDaemons();
 	void	StopAllDaemons();
 	void	StopFastAllDaemons();
+	void	StopDaemon( char* name );
 	void	HardKillAllDaemons();
 	void	StopPeacefulAllDaemons();
 	void	ReconfigAllDaemons();
@@ -192,13 +193,12 @@ public:
 	class daemon*	FindDaemon( const char * );
 
 private:
-	class daemon **daemon_ptr;
-	int	no_daemons;
-	int daemon_list_size;
+	std::map<std::string, class daemon*> daemon_ptr;
+	std::map<int, class daemon*> exit_allowed;
 	int check_new_exec_tid;
 	int update_tid;
 	int preen_tid;
-	int master;  		// index of the master in our daemon table
+	class daemon* master;  	// the master in our daemon table
 	AllGoneT all_daemons_gone_action;
 	ReaperT reaper;
 	int prevLHF;
diff --git a/src/condor_master.V6/masterDaemon.cpp b/src/condor_master.V6/masterDaemon.cpp
index ca629ca..cf729ee 100644
--- a/src/condor_master.V6/masterDaemon.cpp
+++ b/src/condor_master.V6/masterDaemon.cpp
@@ -1226,6 +1226,71 @@ daemon::Reconfig()
 	Kill( SIGHUP );
 }
 
+
+void
+daemon::InitParams()
+{
+	char* buf;
+	char* tmp = NULL;
+
+	if( process_name ) {
+		tmp = process_name;
+	}
+	process_name = param(name_in_config_file);
+	if( !process_name ) {
+		dprintf( D_ALWAYS, 
+				"%s from your DAEMON_LIST is not defined the config files!\n", 
+				name_in_config_file ); 
+		EXCEPT( "Must have the path to %s defined.", name_in_config_file ); 
+	}
+	if( tmp && strcmp(process_name, tmp) ) {
+			// The path to this daemon has changed in the config
+			// file, we will need to start the new version.
+		newExec = TRUE;
+	}
+	if (tmp) {
+		free( tmp );
+		tmp = NULL;
+	}
+	if( watch_name ) {
+		tmp = watch_name;
+	}
+			
+	int length = strlen(name_in_config_file) + 32;
+	buf = (char *)malloc(length);
+	snprintf( buf, length, "%s_WATCH_FILE", name_in_config_file );
+	watch_name = param( buf );
+	free(buf);
+	if( !watch_name) {
+		watch_name = strdup(process_name);
+	} 
+
+	if( tmp && strcmp(watch_name, tmp) ) {
+		// tmp is what the old watch_name was 
+		// The path to what we're watching has changed in the 
+		// config file, we will need to start the new version.
+		timeStamp = 0;
+	}
+
+	if (tmp) {
+		free( tmp );
+		tmp = NULL;
+	}
+
+		// check that log file is necessary
+	if ( log_filename_in_config_file != NULL) {
+		if( log_name ) {
+			free( log_name );
+		}
+		log_name = param(log_filename_in_config_file);
+		if ( log_name == NULL && runs_here ) {
+			dprintf(D_ALWAYS, "Log file not found in config file: %s\n", 
+					log_filename_in_config_file);
+		}
+	}
+}
+
+
 int
 daemon::SetupHighAvailability( void )
 {
@@ -1403,9 +1468,6 @@ daemon::RegisterControllee( class daemon *controllee )
 
 Daemons::Daemons()
 {
-	daemon_ptr = NULL;
-	no_daemons  =  0;
-	daemon_list_size = 0;
 	check_new_exec_tid = -1;
 	update_tid = -1;
 	preen_tid = -1;
@@ -1420,38 +1482,25 @@ Daemons::Daemons()
 void
 Daemons::RegisterDaemon(class daemon *d)
 {
-	int i;
-	if( !daemon_ptr ) {
-		daemon_list_size = 10;
-		daemon_ptr = (class daemon **) malloc(daemon_list_size * sizeof(class daemon *));
-		for( i=0; i<daemon_list_size; i++ ) {
-			daemon_ptr[i] = NULL;
-		}
-	}
-
-	if (no_daemons >= daemon_list_size) {
-		i = daemon_list_size;
-		daemon_list_size *= 2;
-		daemon_ptr = (class daemon **) realloc(daemon_ptr, 
-										daemon_list_size * sizeof(class daemon *));
-		for( ; i<daemon_list_size; i++ ) {
-			daemon_ptr[i] = NULL;
-		}
+	std::pair<std::map<std::string,class daemon*>::iterator,bool> ret;
 
+	ret = daemon_ptr.insert( std::pair<char*, class daemon*>(d->name_in_config_file, d) );
+	if( ret.second == false ) {
+		EXCEPT( "Registering daemon %s failed", d->name_in_config_file );
 	}
-	daemon_ptr[no_daemons] = d;
-	no_daemons++;
 }
 
 int
 Daemons::SetupControllers( void )
 {
 	// Find controlling daemons
-	for( int i=0; i < no_daemons; i++ ) {
-		if ( daemon_ptr[i]->SetupController( ) < 0 ) {
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if ( iter->second->SetupController( ) < 0 ) {
 			dprintf( D_ALWAYS,
 					 "SetupControllers: Setup for daemon %s failed\n",
-					 daemon_ptr[i]->daemon_name );
+					 iter->first.c_str() );
 			return -1;
 		}
 	}
@@ -1461,89 +1510,25 @@ Daemons::SetupControllers( void )
 void
 Daemons::InitParams()
 {
-	char* buf;
-	char* tmp = NULL;
-	for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->process_name ) {
-			tmp = daemon_ptr[i]->process_name;
-		}
-		daemon_ptr[i]->process_name = param(daemon_ptr[i]->name_in_config_file);
-		if( !daemon_ptr[i]->process_name ) {
-			dprintf( D_ALWAYS, 
-					 "%s from your DAEMON_LIST is not defined the config files!\n", 
-					 daemon_ptr[i]->name_in_config_file ); 
-			EXCEPT( "Must have the path to %s defined.", 
-					daemon_ptr[i]->name_in_config_file ); 
-		}
-		if( tmp && strcmp(daemon_ptr[i]->process_name, tmp) ) {
-				// The path to this daemon has changed in the config
-				// file, we will need to start the new version.
-			daemon_ptr[i]->newExec = TRUE;
-		}
-		if (tmp) {
-			free( tmp );
-			tmp = NULL;
-		}
-		if( daemon_ptr[i]->watch_name ) {
-			tmp = daemon_ptr[i]->watch_name;
-		}
-			
-		int length = strlen(daemon_ptr[i]->name_in_config_file) + 32;
-		buf = (char *)malloc(length);
-		snprintf( buf, length, "%s_WATCH_FILE", 
-				daemon_ptr[i]->name_in_config_file );
-		daemon_ptr[i]->watch_name = param( buf );
-		free(buf);
-		if( !daemon_ptr[i]->watch_name)	{
-			daemon_ptr[i]->watch_name = strdup(daemon_ptr[i]->process_name);
-		} 
+	std::map<std::string, class daemon*>::iterator iter;
 
-		if( tmp && strcmp(daemon_ptr[i]->watch_name, tmp) ) {
-			// tmp is what the old watch_name was 
-			// The path to what we're watching has changed in the 
-			// config file, we will need to start the new version.
-			daemon_ptr[i]->timeStamp = 0;
-		}
-
-		if (tmp) {
-			free( tmp );
-			tmp = NULL;
-		}
-
-			// check that log file is necessary
-		if ( daemon_ptr[i]->log_filename_in_config_file != NULL) {
-			if( daemon_ptr[i]->log_name ) {
-				free( daemon_ptr[i]->log_name );
-			}
-			daemon_ptr[i]->log_name = 
-					param(daemon_ptr[i]->log_filename_in_config_file);
-			if ( daemon_ptr[i]->log_name == NULL && daemon_ptr[i]->runs_here ) {
-				dprintf(D_ALWAYS, "Log file not found in config file: %s\n", 
-						daemon_ptr[i]->log_filename_in_config_file);
-			}
-		}
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		iter->second->InitParams();
 	}
 }
 
 
-int
-Daemons::GetIndex(const char* name)
-{
-	for ( int i=0; i < no_daemons; i++)
-		if ( strcmp(daemon_ptr[i]->name_in_config_file,name) == 0 )
-			return i;	
-	return -1;
-}
-
-
 class daemon *
 Daemons::FindDaemon( const char *name )
 {
-	int		index = GetIndex( name );
-	if ( index < 0 ) {
+	std::map<std::string, class daemon*>::iterator iter;
+
+	iter = daemon_ptr.find(name);
+	if( iter != daemon_ptr.end() ) {
+		return iter->second;
+	}
+	else {
 		return NULL;
-	} else {
-		return daemon_ptr[index];
 	}
 }
 
@@ -1552,34 +1537,34 @@ void
 Daemons::CheckForNewExecutable()
 {
 	int found_new = FALSE;
+	std::map<std::string, class daemon*>::iterator iter;
 
 	dprintf(D_FULLDEBUG, "enter Daemons::CheckForNewExecutable\n");
 
-	if( daemon_ptr[master]->newExec ) {
+	if( master->newExec ) {
 			// We already noticed the master has a new binary, so we
 			// already started to restart it.  There's nothing else to
 			// do here.
 		return;
 	}
-    if( NewExecutable( daemon_ptr[master]->watch_name,
-					   &daemon_ptr[master]->timeStamp ) ) {
+	if( NewExecutable( master->watch_name, &master->timeStamp ) ) {
 		dprintf( D_ALWAYS,"%s was modified, restarting %s.\n", 
-				 daemon_ptr[master]->watch_name, 
-				 daemon_ptr[master]->process_name );
-		daemon_ptr[master]->newExec = TRUE;
+				 master->watch_name, 
+				 master->process_name );
+		master->newExec = TRUE;
 			// Begin the master restart procedure.
 		
-        RestartMaster();
+		RestartMaster();
 		return;
-    }
+	}
 
-    for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->runs_here && !daemon_ptr[i]->newExec 
-			&& ! daemon_ptr[i]->OnHold() ) {
-			if( NewExecutable( daemon_ptr[i]->watch_name,
-							   &daemon_ptr[i]->timeStamp ) ) {
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->runs_here && !iter->second->newExec 
+			&& ! iter->second->OnHold() ) {
+			if( NewExecutable( iter->second->watch_name,
+						&iter->second->timeStamp ) ) {
 				found_new = TRUE;
-				daemon_ptr[i]->newExec = TRUE;				
+				iter->second->newExec = TRUE;
 				if( immediate_restart ) {
 						// If we want to avoid the new_binary_delay,
 						// we can just set the newExec flag to false,
@@ -1587,22 +1572,22 @@ Daemons::CheckForNewExecutable()
 						// When it gets restarted, the new binary will
 						// be used, but we won't think it's a new
 						// binary, so we won't use the new_bin_delay.
-					daemon_ptr[i]->newExec = FALSE;
-					daemon_ptr[i]->restarts = 0;
+					iter->second->newExec = FALSE;
+					iter->second->restarts = 0;
 				}
-				if( daemon_ptr[i]->pid ) {
+				if( iter->second->pid ) {
 					dprintf( D_ALWAYS,"%s was modified, killing %s.\n", 
-							 daemon_ptr[i]->watch_name,
-							 daemon_ptr[i]->process_name );
-					daemon_ptr[i]->Stop();
+							 iter->second->watch_name,
+							 iter->second->process_name );
+					iter->second->Stop();
 				} else {
 					if( immediate_restart ) {
 							// This daemon isn't running now, but
 							// there's a new binary.  Cancel the
 							// current start timer and restart it
 							// now. 
-						daemon_ptr[i]->CancelAllTimers();
-						daemon_ptr[i]->Restart();
+						iter->second->CancelAllTimers();
+						iter->second->Restart();
 					}
 				}
 			}
@@ -1656,14 +1641,16 @@ Daemons::DaemonsOffPeaceful( )
 void
 Daemons::StartAllDaemons()
 {
-	for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->pid > 0 ) {
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->pid > 0 ) {
 				// the daemon is already started
 			continue;
 		} 
-		if( ! daemon_ptr[i]->runs_here ) continue;
-		daemon_ptr[i]->Hold( FALSE );
-		daemon_ptr[i]->Start();
+		if( ! iter->second->runs_here ) continue;
+		iter->second->Hold( FALSE );
+		iter->second->Start();
 	}
 }
 
@@ -1673,9 +1660,11 @@ Daemons::StopAllDaemons()
 {
 	daemons.SetAllReaper();
 	int running = 0;
-	for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->pid && daemon_ptr[i]->runs_here ) {
-			daemon_ptr[i]->Stop();
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->pid && iter->second->runs_here ) {
+			iter->second->Stop();
 			running++;
 		}
 	}
@@ -1686,13 +1675,29 @@ Daemons::StopAllDaemons()
 
 
 void
+Daemons::StopDaemon( char* name )
+{
+	std::map<std::string, class daemon*>::iterator iter;
+
+	iter = daemon_ptr.find( name );
+	if( iter != daemon_ptr.end() ) {
+		exit_allowed.insert( std::pair<int, class daemon*>(iter->second->pid, iter->second) );
+		daemon_ptr.erase( iter );
+		iter->second->Stop();
+	}
+}
+
+
+void
 Daemons::StopFastAllDaemons()
 {
 	daemons.SetAllReaper();
 	int running = 0;
-	for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->pid && daemon_ptr[i]->runs_here ) {
-			daemon_ptr[i]->StopFast();
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->pid && iter->second->runs_here ) {
+			iter->second->StopFast();
 			running++;
 		}
 	}
@@ -1706,9 +1711,11 @@ Daemons::StopPeacefulAllDaemons()
 {
 	daemons.SetAllReaper();
 	int running = 0;
-	for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->pid && daemon_ptr[i]->runs_here ) {
-			daemon_ptr[i]->StopPeaceful();
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->pid && iter->second->runs_here ) {
+			iter->second->StopPeaceful();
 			running++;
 		}
 	}
@@ -1723,9 +1730,11 @@ Daemons::HardKillAllDaemons()
 {
 	daemons.SetAllReaper();
 	int running = 0;
-	for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->pid && daemon_ptr[i]->runs_here ) {
-			daemon_ptr[i]->HardKill();
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->pid && iter->second->runs_here ) {
+			iter->second->HardKill();
 			running++;
 		}
 	}
@@ -1737,10 +1746,12 @@ Daemons::HardKillAllDaemons()
 void
 Daemons::ReconfigAllDaemons()
 {
+	std::map<std::string, class daemon*>::iterator iter;
 	dprintf( D_ALWAYS, "Reconfiguring all running daemons.\n" );
-	for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->pid && daemon_ptr[i]->runs_here ) {
-			daemon_ptr[i]->Reconfig();
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->pid && iter->second->runs_here ) {
+			iter->second->Reconfig();
 		}
 	}
 }
@@ -1750,14 +1761,13 @@ void
 Daemons::InitMaster()
 {
 		// initialize master data structure
-	master = GetIndex("MASTER");
-	if ( master == -1 ) {
+	master = FindDaemon("MASTER");
+	if ( master == NULL ) {
 		EXCEPT("InitMaster: MASTER not Specified");
 	}
-	daemon_ptr[master]->timeStamp = 
-		GetTimeStamp(daemon_ptr[master]->watch_name);
-	daemon_ptr[master]->startTime = time(0);
-	daemon_ptr[master]->pid = daemonCore->getpid();
+	master->timeStamp = GetTimeStamp(master->watch_name);
+	master->startTime = time(0);
+	master->pid = daemonCore->getpid();
 }
 
 
@@ -1823,7 +1833,7 @@ Daemons::CleanupBeforeRestart()
 		// Release file lock on the log file.
 	if ( MasterLock->release() == FALSE ) {
 		dprintf( D_ALWAYS,
-				 "Can't remove lock on \"%s\"\n",daemon_ptr[master]->log_name);
+				 "Can't remove lock on \"%s\"\n",master->log_name);
 		EXCEPT( "file_lock(%d)", MasterLockFD );
 	}
 	(void)close( MasterLockFD );
@@ -1894,7 +1904,7 @@ Daemons::ExecMaster()
 	}
 	argv[i++] = NULL;
 
-	(void)execv(daemon_ptr[master]->process_name, argv);
+	(void)execv(master->process_name, argv);
 
 	free(argv);
 }
@@ -1937,7 +1947,7 @@ Daemons::FinalRestartMaster()
 #endif
 		} else {
 			dprintf( D_ALWAYS, "Doing exec( \"%s\" )\n", 
-				 daemon_ptr[master]->process_name);
+				 master->process_name);
 
 				// It is important to switch to ROOT_PRIV, in case we are
 				// executing a master wrapper script that expects to be
@@ -1948,12 +1958,12 @@ Daemons::FinalRestartMaster()
 
 			set_priv(saved_priv);
 		}
-		daemon_ptr[master]->restarts++;
-		if ( NT_ServiceFlag == TRUE && daemon_ptr[master]->restarts > 7 ) {
+		master->restarts++;
+		if ( NT_ServiceFlag == TRUE && master->restarts > 7 ) {
 			dprintf(D_ALWAYS,"Unable to restart Condor service, aborting.\n");
 			master_exit(1);
 		}
-		i = daemon_ptr[master]->NextStart();
+		i = master->NextStart();
 		dprintf( D_ALWAYS, 
 				 "Cannot execute condor_master (errno=%d), will try again in %d seconds\n", 
 				 errno, i );
@@ -1964,12 +1974,14 @@ Daemons::FinalRestartMaster()
 
 char* Daemons::DaemonLog( int pid )
 {
+	std::map<std::string, class daemon*>::iterator iter;
+
 	// be careful : a pointer to data in this class is returned
 	// posibility of getting tampered
-
-	for ( int i=0; i < no_daemons; i++)
-		if ( daemon_ptr[i]->pid == pid )
-			return (daemon_ptr[i]->log_name);
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if ( iter->second->pid == pid )
+			return (iter->second->log_name);
+	}
 	return "Unknown Program!!!";
 }
 
@@ -1994,8 +2006,10 @@ Daemons::SignalAll( int signal )
 int Daemons::NumberOfChildren()
 {
 	int result = 0;
-	for( int i=0; i < no_daemons; i++) {
-		if( daemon_ptr[i]->runs_here && daemon_ptr[i]->pid ) {
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->runs_here && iter->second->pid ) {
 			result++;
 		}
 	}
@@ -2007,16 +2021,30 @@ int Daemons::NumberOfChildren()
 int
 Daemons::AllReaper(int pid, int status)
 {
+	std::map<std::string, class daemon*>::iterator iter;
+	std::map<int, class daemon*>::iterator valid_iter;
+
 		// find out which daemon died
-	for( int i=0; i < no_daemons; i++) {
-		if( pid == daemon_ptr[i]->pid ) {
-			daemon_ptr[i]->Exited( status );
+	valid_iter = exit_allowed.find(pid);
+	if( valid_iter != exit_allowed.end() ) {
+		valid_iter->second->Exited( status );
+		exit_allowed.erase( valid_iter );
+		if( NumberOfChildren() == 0 ) {
+			AllDaemonsGone();
+		}
+		return TRUE;
+	}
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( pid == iter->second->pid ) {
+			iter->second->Exited( status );
 			if( NumberOfChildren() == 0 ) {
 				AllDaemonsGone();
 			}
 			return TRUE;
 		}
 	}
+
 	return TRUE;
 }
 
@@ -2024,13 +2052,23 @@ Daemons::AllReaper(int pid, int status)
 int
 Daemons::DefaultReaper(int pid, int status)
 {
-	for( int i=0; i < no_daemons; i++) {
-		if( pid == daemon_ptr[i]->pid ) {
-			daemon_ptr[i]->Exited( status );
+	std::map<std::string, class daemon*>::iterator iter;
+	std::map<int, class daemon*>::iterator valid_iter;
+
+	valid_iter = exit_allowed.find(pid);
+	if( valid_iter != exit_allowed.end() ) {
+		valid_iter->second->Exited( status );
+		exit_allowed.erase(valid_iter);
+		return TRUE;
+	}
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( pid == iter->second->pid ) {
+			iter->second->Exited( status );
 			if( PublishObituaries ) {
-				daemon_ptr[i]->Obituary( status );
+				iter->second->Obituary( status );
 			}
-			daemon_ptr[i]->Restart();
+			iter->second->Restart();
 			return TRUE;
 		}
 	}
@@ -2187,21 +2225,23 @@ void
 Daemons::Update( ClassAd* ca ) 
 {
 	char buf[128];
-	for( int i=0; i < no_daemons; i++) {
-		if( daemon_ptr[i]->runs_here || i == master ) {
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->runs_here || iter->second == master ) {
 			sprintf( buf, "%s_Timestamp = %ld", 
-					 daemon_ptr[i]->name_in_config_file, 	
-					 (long)daemon_ptr[i]->timeStamp );
+					 iter->second->name_in_config_file, 	
+					 (long)iter->second->timeStamp );
 			ca->Insert( buf );
-			if( daemon_ptr[i]->pid ) {
+			if( iter->second->pid ) {
 				sprintf( buf, "%s_StartTime = %ld", 
-						 daemon_ptr[i]->name_in_config_file, 	
-						 (long)daemon_ptr[i]->startTime );
+						 iter->second->name_in_config_file, 	
+						 (long)iter->second->startTime );
 				ca->Insert( buf );
 			} else {
 					// No pid, but daemon's supposed to be running.
 				sprintf( buf, "%s_StartTime = 0", 
-						 daemon_ptr[i]->name_in_config_file );
+						 iter->second->name_in_config_file );
 				ca->Insert( buf );
 			}
 		}
@@ -2236,9 +2276,11 @@ Daemons::UpdateCollector()
 class daemon*
 Daemons::FindDaemon( daemon_t dt )
 {
-	for( int i=0; i < no_daemons; i++ ) {
-		if( daemon_ptr[i]->type == dt ) {
-			return daemon_ptr[i];
+	std::map<std::string, class daemon*>::iterator iter;
+
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		if( iter->second->type == dt ) {
+			return iter->second;
 		}
 	}
 	return NULL;
@@ -2248,6 +2290,8 @@ Daemons::FindDaemon( daemon_t dt )
 void
 Daemons::CancelRestartTimers( void )
 {
+	std::map<std::string, class daemon*>::iterator iter;
+
 		// We don't need to be checking for new executables anymore. 
 	if( check_new_exec_tid != -1 ) {
 		daemonCore->Cancel_Timer( check_new_exec_tid );
@@ -2259,7 +2303,7 @@ Daemons::CancelRestartTimers( void )
 	}
 
 		// Finally, cancel the start/restart timers for each daemon.  
-	for( int i=0; i < no_daemons; i++ ) {
-		daemon_ptr[i]->CancelRestartTimers();
+	for( iter = daemon_ptr.begin(); iter != daemon_ptr.end(); iter++ ) {
+		iter->second->CancelRestartTimers();
 	}
 }
