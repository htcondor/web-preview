{"id": 6596, "title": "Ticket #6596: Share port daemon hanging on Debian 8", "description": "<blockquote>\nIn the past week, the shared port daemon on the Debian 8 machine (exec-112.batlab.org) in the batlab has been hanging at least once a day. The master has to kill it to restore normal communication. In most cases, there's nothing interesting the shared port daemon's log. In one case, the daemon couldn't bind a socket to send its child alive to the master because there were no available ports in the configured port range of 9600-9700.\n\n<p>When the shared port daemon enters this state, clients can connect and send an initial volley of data, but the connection isn't forwarded to the intended daemon and no data is sent back to the clients. This contributes to another bug (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6597\" onclick=\"get_ticket_and_populate_wrapper('6597'); return false;\" title=\"Slots can become stuck in Claimed/Busy forever after a job completes\">#6597</a></span>), where a slot can become stuck in Claimed/Busy forever after a job completes.\n\n</p><p>This problem started happening when Condor was upgraded from 8.4.4 to 8.6.6 on exec-112.batlab.org. The problem persisted when Condor was upgraded to 8.6.9. Other machines in the batlab that are running 8.6.9 don't show this behavior.</p></blockquote>", "remarks": "<blockquote>\n<em>2018-Mar-08 09:45:16 by jfrey:</em> <br/>\n\nWe got a stack trace from the shared port daemon at the time the master killed it. A message that shared port was writing every 5 minutes stopped appearing 46 minutes before the master killed it. Here is the stack trace:\n\n<p></p><div class=\"verbatim\">\n<pre>Caught signal 6: si_code=0, si_pid=878, si_uid=0, si_addr=0x36E\nStack dump for process 1587311 at timestamp 1520466982 (21 frames)\n/usr/lib/condor/libcondor_utils_8_6_9.so(dprintf_dump_stack+0x24)[0x7fd5c483c344]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_Z17unix_sig_coredumpiP9siginfo_tPv+0x6a)[0x7fd5c496695a]\n/lib/x86_64-linux-gnu/libpthread.so.0(+0xf890)[0x7fd5c2f1a890]\n/lib/x86_64-linux-gnu/libpthread.so.0(accept+0x10)[0x7fd5c2f19c70]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_Z13condor_acceptiR15condor_sockaddr+0x39)[0x7fd5c4859ff9]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN8ReliSock6acceptERS_+0xcf)[0x7fd5c48fc5bf]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN8ReliSock23connect_socketpair_implERS_15condor_protocolb+0x13b)[0x7fd5c48fe80b]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN8ReliSock18connect_socketpairERS_PKc+0x67)[0x7fd5c48fe907]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN8ReliSock28do_shared_port_local_connectEPKcbS1_+0x79)[0x7fd5c4912fc9]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN4Sock15special_connectEPKcib+0x242)[0x7fd5c4912a42]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN4Sock10do_connectEPKcib+0x65)[0x7fd5c48faef5]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN6Daemon11connectSockEP4SockiP11CondorErrorbb+0x4c)[0x7fd5c49310cc]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN6Daemon8reliSockEilP11CondorErrorbb+0x64)[0x7fd5c4931ab4]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN11DCMessenger12startCommandE18classy_counted_ptrI5DCMsgE+0x2b1)[0x7fd5c491a841]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN6Daemon7sendMsgE18classy_counted_ptrI5DCMsgE+0x6d)[0x7fd5c493065d]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN10DaemonCore17SendAliveToParentEv+0x2de)[0x7fd5c495171e]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN12TimerManager7TimeoutEPiPd+0x16b)[0x7fd5c496e2fb]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_ZN10DaemonCore6DriverEv+0x854)[0x7fd5c4949854]\n/usr/lib/condor/libcondor_utils_8_6_9.so(_Z7dc_mainiPPc+0x11e0)[0x7fd5c496a040]\n/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5)[0x7fd5c2b81b45]\ncondor_shared_port[0x400df9]\n</pre></div>\n\n\n<p>The shared port daemon is attempting to create a connected pair of TCP sockets so that it can handle one end to the master and then act as a client sending a child alive command.\n\n</p><p>This is the apparent sequence of events:\n</p><ul>\n<li>bind sockA\n</li><li>bind sockB\n</li><li>listen sockA\n</li><li>connect sockB to sockA\n</li><li>select on sockA (ensure it's ready for read)\n</li><li>accept sockA (blocks forever)\n</li></ul>\n\n<p></p><hr/>\n<em>2018-Mar-09 14:07:56 by tlmiller:</em> <br/>\n\nWe caught the startd falling over in much the same way, but this time managed to get its core file.  Stack trace:\n\n<p></p><div class=\"verbatim\">\n<pre>#0  0x00007f95af2f475b in raise (sig=6)\n    at ../nptl/sysdeps/unix/sysv/linux/pt-raise.c:37\n#1  0x00007f95b0d40a0a in unix_sig_coredump (signum=6, s_info=&lt;optimized out&gt;)\n    at /slots/01/dir_789252/sources/src/condor_daemon_core.V6/daemon_core_main.cpp:772\n#2  &lt;signal handler called&gt;\n#3  0x00007f95af2f3c70 in __accept_nocancel ()\n    at ../sysdeps/unix/syscall-template.S:81\n#4  0x00007f95b0c33ff9 in condor_accept (sockfd=&lt;optimized out&gt;, addr=...)\n    at /slots/01/dir_789252/sources/src/condor_utils/condor_sockfunc.cpp:28\n#5  0x00007f95b0cd65bf in ReliSock::accept (this=this@entry=0x7fffc06b7000, c=...)\n    at /slots/01/dir_789252/sources/src/condor_io/reli_sock.cpp:198\n#6  0x00007f95b0cd880b in ReliSock::connect_socketpair_impl (\n    this=this@entry=0xabca30, sock=..., proto=&lt;optimized out&gt;,\n    isLoopback=isLoopback@entry=false)\n    at /slots/01/dir_789252/sources/src/condor_io/reli_sock.cpp:1275\n#7  0x00007f95b0cd8907 in ReliSock::connect_socketpair (\n    this=this@entry=0xabca30, sock=...,\n    asIfConnectingTo=asIfConnectingTo@entry=0xabb498 \"128.104.103.112\")\n    at /slots/01/dir_789252/sources/src/condor_io/reli_sock.cpp:1291\n#8  0x00007f95b0cecfc9 in ReliSock::do_shared_port_local_connect (\n    this=0xabca30, shared_port_id=0xab6e18 \"878_d03e\",\n    nonblocking=&lt;optimized out&gt;, sharedPortIP=0xabb498 \"128.104.103.112\")\n    at /slots/01/dir_789252/sources/src/condor_io/cedar_no_ckpt.cpp:1033\n#9  0x00007f95b0ceca42 in Sock::special_connect (this=this@entry=0xabca30,\n    host=host@entry=0xa26ee0 \"&lt;128.104.103.112:0?sock=878_d03e&gt;\",\n    nonblocking=nonblocking@entry=true)\n    at /slots/01/dir_789252/sources/src/condor_io/cedar_no_ckpt.cpp:954\n#10 0x00007f95b0cd4ef5 in Sock::do_connect (this=0xabca30,\n    host=0xa26ee0 \"&lt;128.104.103.112:0?sock=878_d03e&gt;\", port=0,\n    non_blocking_flag=&lt;optimized out&gt;)\n    at /slots/01/dir_789252/sources/src/condor_io/sock.cpp:1334\n#11 0x00007f95b0d0b0cc in Daemon::connectSock (this=this@entry=0xabb4e0,\n    sock=sock@entry=0xabca30, sec=sec@entry=398,\n    errstack=errstack@entry=0xa8e520, non_blocking=non_blocking@entry=true,\n    ignore_timeout_multiplier=ignore_timeout_multiplier@entry=false)\n    at /slots/01/dir_789252/sources/src/condor_daemon_client/daemon.cpp:523\n#12 0x00007f95b0d0bab4 in Daemon::reliSock (this=0xabb4e0, timeout=398,\n    deadline=1520554737, errstack=0xa8e520, non_blocking=&lt;optimized out&gt;,\n    ignore_timeout_multiplier=ignore_timeout_multiplier@entry=false)\n    at /slots/01/dir_789252/sources/src/condor_daemon_client/daemon.cpp:480\n#13 0x00007f95b0d0bb13 in Daemon::makeConnectedSocket (this=&lt;optimized out&gt;,\n    st=st@entry=Stream::reli_sock, timeout=&lt;optimized out&gt;,\n    deadline=&lt;optimized out&gt;, errstack=&lt;optimized out&gt;,\n    non_blocking=non_blocking@entry=true)\n    at /slots/01/dir_789252/sources/src/condor_daemon_client/daemon.cpp:578\n#14 0x00007f95b0cf4841 in DCMessenger::startCommand (this=this@entry=0xa2e520,\n    msg=...)\n    at /slots/01/dir_789252/sources/src/condor_daemon_client/dc_message.cpp:344\n#15 0x00007f95b0d0a65d in Daemon::sendMsg (this=this@entry=0xabb4e0, msg=...)\n    at /slots/01/dir_789252/sources/src/condor_daemon_client/daemon.cpp:2405\n#16 0x00007f95b0d2b71e in DaemonCore::SendAliveToParent (this=0xa05d60)\n    at /slots/01/dir_789252/sources/src/condor_daemon_core.V6/daemon_core.cpp:10079\n#17 0x00007f95b0d482fb in TimerManager::Timeout (this=0xa05a70,\n    pNumFired=pNumFired@entry=0x7fffc06b7cec,\n    pruntime=pruntime@entry=0x7fffc06b7d08)\n    at /slots/01/dir_789252/sources/src/condor_daemon_core.V6/timer_manager.cpp:449\n#18 0x00007f95b0d23854 in DaemonCore::Driver (this=0xa05d60)\n    at /slots/01/dir_789252/sources/src/condor_daemon_core.V6/daemon_core.cpp:3466\n#19 0x00007f95b0d44040 in dc_main (argc=1, argv=&lt;optimized out&gt;)\n    at /slots/01/dir_789252/sources/src/condor_daemon_core.V6/daemon_core_main.cpp:2755\n#20 0x00007f95aef5bb45 in __libc_start_main (\n    main=0x4234f0 &lt;main(int, char**)&gt;, argc=2, argv=0x7fffc06b85c8,\n    init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;,\n    stack_end=0x7fffc06b85b8) at libc-start.c:287\n#21 0x0000000000423793 in _start ()\n</pre></div>\n\n\n<p>Further investigation reveals that the reason the startd is calling <code>connect_socketpair()</code> is that it \"inherits\" the Sinful string of its parent from the environment, and that (an entry in the pidTable) is never updated.  We suspect this can happen (since the master normally starts the shared port daemon and waits for it before starting other daemons) if the master has to restart the shared port daemon after start up -- it probably doesn't wait for the shared port daemon to come up and its Sinful to be update before restarting other daemons.\n\n</p><p></p><ul>\n<li>Verify the failure mode.  Correcting it is probably another ticket.\n</li><li>Continue investigation of accept() hanging.\n</li></ul>\n\n<p></p><hr/>\n<em>2018-Mar-09 14:26:25 by tlmiller:</em> <br/>\n\nFurther investigation reveals that <code>connect_socketpair()</code> calls <code>accept()</code> with a timeout of 0, so we've solved the mystery-of-hanging: the code we were counting on to prevent that isn't executed if the timeout is 0.\n\n<p></p><ul>\n<li>Implement work-around: <code>connect_socketpair()</code> calls <code>accept()</code> with a timeout of 1.\n</li><li>Try to figure out what could be causing a(n apparently) successful call to <code>connect()</code> to result in a blocking <code>accept()</code>.\n</li></ul>\n\n<p></p><hr/>\n<em>2018-Mar-12 15:59:44 by tlmiller:</em> <br/>\n\nThe failure mode looks plausible (the master doesn't wait for any daemon to startup after restarting it), but Jaime and I agree it will be hard to fix and liable to cause problems, so we'll skip that for now.\n\n<p>Notes:\n\n</p><p></p><ul>\n<li>m_after_startup_wait_for_file\n</li><li><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=WaitBeforeStartingOtherDaemons\" title=\"Wait Before Starting Other Daemons\">WaitBeforeStartingOtherDaemons</a></span>\n</li><li>we don't check/honor WaitBeforeStartingOtherDaemons() except in StartAllDaemons().  So we need to do that, and make sure that whenever we restart a daemon, we make sure we don't do so before the spd has restarted (if it's on the list).\n</li><li>masterDaemon.cpp:2983 -- iter-&gt;second-&gt;Restart() -- needs the new logic above regarding spd, maybe in daemon::DoStart()\n</li></ul>\n\n<p></p><hr/>\n<em>2018-Mar-12 16:43:54 by tlmiller:</em> <br/>\n\nFurther investigation reveals that the shared port daemon hung <code>accept()</code> ing a connection from one port to the same port.  We're not quite sure how that happened -- speculating that <code>bind(x); bind(y)</code> succeeds because the first socket hasn't actually been used for anything yet -- but that this happened because of the (literally) thousands of TIME_WAIT connections to the C0 starter.  These connections are into a port outside of the restricted range, so we're assuming they're chirp (from the Metronome code); perhaps the chirp client is crashing before <code>close()</code> ing its connection?\n\n<p>Jaime confirmed that <code>connect_socketpair()</code> with a port range of 12345-12345 hangs in <code>accept()</code> on Debian 8 and on RHEL 7.\n\n</p><p>We have not determined but will investigate why chirp is leaving an order of magnitude more connections in TIME_WAIT on the Debian 8 box over the other linux boxes.\n\n</p><p></p><hr/>\n<em>2018-Mar-13 10:56:02 by tlmiller:</em> <br/>\n\n<ul>\n<li>Reorder bind() bind() listen() as bind() listen() bind()?  [vs. expliclitly check for same-port?]\n</li></ul>\n\n<p></p><hr/>\n<em>2018-Mar-13 13:58:22 by tlmiller:</em> <br/>\n\nJaime and I discussed this briefly.  It's still unclear why the Debian 8 machine is particularly afflicted, but we think the way forward for now is to implement both work-arounds (the 1-second timeout and swapping the second bind() with the listen()) and run that pre-release for a while to confirm that the problem goes away.\n\n<p></p><hr/>\n<em>2018-Mar-14 10:02:27 by tlmiller:</em> <br/>\n\nFix pushed as discussed.  Please also review <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a23ca350e9bdbc790205962aa4a7695f0187ee64\">[54500]</a></span>, which I needed to build on the machine I used while developing this patch but is otherwise unrelated to this ticket.  Thanks.\n\n<p></p><hr/>\n<em>2018-Mar-29 14:36:30 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p></p><ul>\n<li>I don't know why you had to comment out the reference to &amp;#8203;QUILL_AD_TYPE in the collector. But since quill and gsoap are going away in 8.7, it doesn't matter.\n\n<p></p></li><li>Version history.\n\n<p></p></li><li>-5 style points for a vague commit message.</li></ul>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Apr-19 12:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/7795ef5696dfb70f3f3f58bf5c978ee5a203e57c\">[54758]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6596\" onclick=\"get_ticket_and_populate_wrapper('6596'); return false;\" title=\"Share port daemon hanging on Debian 8\">#6596</a></span>) Release note.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-13 14:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4c462a87e288df9bad70d8465be0cd33f5a374f7\">[54502]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6596\" onclick=\"get_ticket_and_populate_wrapper('6596'); return false;\" title=\"Share port daemon hanging on Debian 8\">#6596</a></span>) Implement the two work-arounds.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "incident", "last_change": "2018-Apr-19 12:58", "status": "resolved", "created": "2018-Mar-07 11:12", "fixed_version": "2018-Mar-07 11:12", "broken_version": "v080609", "priority": "3", "subsystem": "DaemonSharedP", "assigned_to": "tlmiller", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "batlab", "visibility": "public", "notify": "", "due_date": ""}