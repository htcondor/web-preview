From 6c365b284f9771482c0b7dda06bbc58e428e646f Mon Sep 17 00:00:00 2001
From: Ian Main <imain@redhat.com>
Date: Tue, 15 Mar 2011 12:10:34 -0700
Subject: [PATCH] Add support for hardware profile overrides

This patch adds support for hardware profile overrides including memory,
cpu count, and storage.  This is for providers who offer a range and
allow you to specify the exact amount.

Ian Main <imain@redhat.com>
---
 src/condor_gridmanager/dcloudjob.cpp        |   16 ++++++++++++++++
 src/condor_gridmanager/dcloudjob.h          |    3 +++
 src/condor_gridmanager/gahp-client.cpp      |   19 ++++++++++++++++---
 src/condor_gridmanager/gahp-client.h        |    3 +++
 src/condor_includes/condor_attributes.h     |    3 +++
 src/condor_submit.V6/submit.cpp             |   21 +++++++++++++++++++++
 src/condor_utils/condor_attributes.cpp      |    3 +++
 src/deltacloud_gahp/dcloudgahp_commands.cpp |   25 +++++++++++++++++--------
 8 files changed, 82 insertions(+), 11 deletions(-)

diff --git a/src/condor_gridmanager/dcloudjob.cpp b/src/condor_gridmanager/dcloudjob.cpp
index f0a6ee2..9876501 100644
--- a/src/condor_gridmanager/dcloudjob.cpp
+++ b/src/condor_gridmanager/dcloudjob.cpp
@@ -152,6 +152,9 @@ DCloudJob::DCloudJob( ClassAd *classad )
 	m_imageId = NULL;
 	m_realmId = NULL;
 	m_hwpId = NULL;
+	m_hwpMemory = NULL;
+	m_hwpCpu = NULL;
+	m_hwpStorage = NULL;
 	m_username = NULL;
 	m_password = NULL;
 	m_keyname = NULL;
@@ -234,8 +237,15 @@ DCloudJob::DCloudJob( ClassAd *classad )
 
 	jobAd->LookupString( ATTR_DELTACLOUD_REALM_ID, &m_realmId );
 	jobAd->LookupString( ATTR_DELTACLOUD_HARDWARE_PROFILE, &m_hwpId );
+	jobAd->LookupString( ATTR_DELTACLOUD_HARDWARE_PROFILE_CPU, &m_hwpCpu );
+	jobAd->LookupString( ATTR_DELTACLOUD_HARDWARE_PROFILE_MEMORY, &m_hwpMemory );
+	jobAd->LookupString( ATTR_DELTACLOUD_HARDWARE_PROFILE_STORAGE, &m_hwpStorage );
 	jobAd->LookupString( ATTR_DELTACLOUD_KEYNAME, &m_keyname );
 	jobAd->LookupString( ATTR_DELTACLOUD_USER_DATA, &m_userdata );
+        dprintf(D_ALWAYS, "(%d.%d) deltacloud job: hwp_id %s, hwp_cpu %s, hwp_mem %s, hwp_storage %s\n",
+                procID.cluster,procID.proc, m_hwpId, m_hwpCpu, m_hwpMemory, m_hwpStorage);
+
+        sleep(10);
 
 	buff[0] = '\0';
 	jobAd->LookupString( ATTR_GRID_JOB_ID, buff );
@@ -300,6 +310,9 @@ DCloudJob::~DCloudJob()
 	free( m_imageId );
 	free( m_realmId );
 	free( m_hwpId );
+	free( m_hwpCpu );
+	free( m_hwpMemory );
+	free( m_hwpStorage );
 	free( m_username );
 	free( m_password );
 	free( m_keyname );
@@ -487,6 +500,9 @@ void DCloudJob::doEvaluateState()
 											  m_instanceName,
 											  m_realmId,
 											  m_hwpId,
+											  m_hwpMemory,
+											  m_hwpCpu,
+											  m_hwpStorage,
 											  m_keyname,
 											  m_userdata,
 											  instance_attrs );
diff --git a/src/condor_gridmanager/dcloudjob.h b/src/condor_gridmanager/dcloudjob.h
index 588e26d..7c6493f 100644
--- a/src/condor_gridmanager/dcloudjob.h
+++ b/src/condor_gridmanager/dcloudjob.h
@@ -91,6 +91,9 @@ private:
 	char *m_imageId;
 	char *m_realmId;
 	char *m_hwpId;
+	char *m_hwpCpu;
+	char *m_hwpMemory;
+	char *m_hwpStorage;
 	char *m_username;
 	char *m_password;
 	char *m_keyname;
diff --git a/src/condor_gridmanager/gahp-client.cpp b/src/condor_gridmanager/gahp-client.cpp
index afaf18d..202865d 100644
--- a/src/condor_gridmanager/gahp-client.cpp
+++ b/src/condor_gridmanager/gahp-client.cpp
@@ -8904,6 +8904,9 @@ int GahpClient::dcloud_submit( const char *service_url,
 							   const char *instance_name,
 							   const char *realm_id,
 							   const char *hwp_id,
+							   const char *hwp_memory,
+							   const char *hwp_cpu,
+							   const char *hwp_storage,
 							   const char *keyname,
 							   const char *userdata,
 							   StringList &attrs )
@@ -8925,6 +8928,9 @@ int GahpClient::dcloud_submit( const char *service_url,
 	if ( !instance_name ) instance_name = NULLSTRING;
 	if ( !realm_id ) realm_id = NULLSTRING;
 	if ( !hwp_id ) hwp_id = NULLSTRING;
+	if ( !hwp_memory ) hwp_memory = NULLSTRING;
+	if ( !hwp_cpu ) hwp_cpu = NULLSTRING;
+	if ( !hwp_storage ) hwp_storage = NULLSTRING;
 	if ( !keyname ) keyname = NULLSTRING;
 	if ( !userdata ) userdata = NULLSTRING;
 
@@ -8937,10 +8943,14 @@ int GahpClient::dcloud_submit( const char *service_url,
 	char* esc5 = strdup( escapeGahpString(instance_name) );
 	char* esc6 = strdup( escapeGahpString(realm_id) );
 	char* esc7 = strdup( escapeGahpString(hwp_id) );
-	char* esc8 = strdup( escapeGahpString(keyname) );
-	char* esc9 = strdup( escapeGahpString(userdata) );
+	char* esc8 = strdup( escapeGahpString(hwp_memory) );
+	char* esc9 = strdup( escapeGahpString(hwp_cpu) );
+	char* esc10 = strdup( escapeGahpString(hwp_storage) );
+	char* esc11 = strdup( escapeGahpString(keyname) );
+	char* esc12 = strdup( escapeGahpString(userdata) );
 
-	bool x = reqline.sprintf("%s %s %s %s %s %s %s %s %s", esc1, esc2, esc3, esc4, esc5, esc6, esc7, esc8, esc9);
+	bool x = reqline.sprintf("%s %s %s %s %s %s %s %s %s %s %s %s", esc1, esc2, esc3,
+                                 esc4, esc5, esc6, esc7, esc8, esc9, esc10, esc11, esc12);
 
 	free( esc1 );
 	free( esc2 );
@@ -8951,6 +8961,9 @@ int GahpClient::dcloud_submit( const char *service_url,
 	free( esc7 );
 	free( esc8 );
 	free( esc9 );
+	free( esc10 );
+	free( esc11 );
+	free( esc12 );
 	ASSERT( x == true );
 
 	const char *buf = reqline.Value();
diff --git a/src/condor_gridmanager/gahp-client.h b/src/condor_gridmanager/gahp-client.h
index dc17711..1d363b9 100644
--- a/src/condor_gridmanager/gahp-client.h
+++ b/src/condor_gridmanager/gahp-client.h
@@ -1053,6 +1053,9 @@ class GahpClient : public Service {
 					   const char *instance_name,
 					   const char *realm_id,
 					   const char *hwp_id,
+					   const char *hwp_memory,
+					   const char *hwp_cpu,
+					   const char *hwp_storage,
 					   const char *keyname,
 					   const char *userdata,
 					   StringList &attrs );
diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index d2c4f8d..ef494ad 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -124,6 +124,9 @@ extern const char * const  ATTR_DELTACLOUD_PASSWORD;
 extern const char * const  ATTR_DELTACLOUD_IMAGE_ID;
 extern const char * const  ATTR_DELTACLOUD_REALM_ID;
 extern const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE;
+extern const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_CPU;
+extern const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_MEMORY;
+extern const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_STORAGE;
 extern const char * const  ATTR_DELTACLOUD_KEYNAME;
 extern const char * const  ATTR_DELTACLOUD_USER_DATA;
 extern const char * const  ATTR_DESTINATION;
diff --git a/src/condor_submit.V6/submit.cpp b/src/condor_submit.V6/submit.cpp
index 8baf266..72b2361 100644
--- a/src/condor_submit.V6/submit.cpp
+++ b/src/condor_submit.V6/submit.cpp
@@ -384,6 +384,9 @@ const char* DeltacloudPassword = "deltacloud_password";
 const char* DeltacloudImageId = "deltacloud_image_id";
 const char* DeltacloudRealmId = "deltacloud_realm_id";
 const char* DeltacloudHardwareProfile = "deltacloud_hardware_profile";
+const char* DeltacloudHardwareProfileMemory = "deltacloud_hardware_profile_memory";
+const char* DeltacloudHardwareProfileCpu = "deltacloud_hardware_profile_cpu";
+const char* DeltacloudHardwareProfileStorage = "deltacloud_hardware_profile_storage";
 const char* DeltacloudKeyname = "deltacloud_keyname";
 const char* DeltacloudUserData = "deltacloud_user_data";
 
@@ -5107,6 +5110,24 @@ SetGridParams()
 		InsertJobExpr( buffer.Value() );
 	}
 
+	if( (tmp = condor_param( DeltacloudHardwareProfileMemory, ATTR_DELTACLOUD_HARDWARE_PROFILE_MEMORY )) ) {
+		buffer.sprintf( "%s = \"%s\"", ATTR_DELTACLOUD_HARDWARE_PROFILE_MEMORY, tmp );
+		free( tmp );
+		InsertJobExpr( buffer.Value() );
+	}
+
+	if( (tmp = condor_param( DeltacloudHardwareProfileCpu, ATTR_DELTACLOUD_HARDWARE_PROFILE_CPU )) ) {
+		buffer.sprintf( "%s = \"%s\"", ATTR_DELTACLOUD_HARDWARE_PROFILE_CPU, tmp );
+		free( tmp );
+		InsertJobExpr( buffer.Value() );
+	}
+
+	if( (tmp = condor_param( DeltacloudHardwareProfileStorage, ATTR_DELTACLOUD_HARDWARE_PROFILE_STORAGE )) ) {
+		buffer.sprintf( "%s = \"%s\"", ATTR_DELTACLOUD_HARDWARE_PROFILE_STORAGE, tmp );
+		free( tmp );
+		InsertJobExpr( buffer.Value() );
+	}
+
 	if( (tmp = condor_param( DeltacloudKeyname, ATTR_DELTACLOUD_KEYNAME )) ) {
 		buffer.sprintf( "%s = \"%s\"", ATTR_DELTACLOUD_KEYNAME, tmp );
 		free( tmp );
diff --git a/src/condor_utils/condor_attributes.cpp b/src/condor_utils/condor_attributes.cpp
index f4e0db2..0221cea 100644
--- a/src/condor_utils/condor_attributes.cpp
+++ b/src/condor_utils/condor_attributes.cpp
@@ -184,6 +184,9 @@ const char * const  ATTR_DELTACLOUD_PASSWORD	 = "DeltacloudPassword";
 const char * const  ATTR_DELTACLOUD_IMAGE_ID	 = "DeltacloudImageId";
 const char * const  ATTR_DELTACLOUD_REALM_ID	 = "DeltacloudRealmId";
 const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE = "DeltacloudHardwareProfile";
+const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_CPU = "DeltacloudHardwareProfileCPU";
+const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_MEMORY = "DeltacloudHardwareProfileMemory";
+const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_STORAGE = "DeltacloudHardwareProfileStorage";
 const char * const  ATTR_DELTACLOUD_KEYNAME		 = "DeltacloudKeyname";
 const char * const  ATTR_DELTACLOUD_USER_DATA	 = "DeltacloudUserData";
 const char * const ATTR_DESTINATION				 = "Destination";
diff --git a/src/deltacloud_gahp/dcloudgahp_commands.cpp b/src/deltacloud_gahp/dcloudgahp_commands.cpp
index 599023b..953ab2d 100644
--- a/src/deltacloud_gahp/dcloudgahp_commands.cpp
+++ b/src/deltacloud_gahp/dcloudgahp_commands.cpp
@@ -112,7 +112,7 @@ static std::string create_instance_output(char * reqid,
 }
 
 /*
- * DELTACLOUD_VM_SUBMIT <reqid> <url> <user> <password> <image_id> <name> <realm_id> <hwp_id> <keyname> <userdata>
+ * DELTACLOUD_VM_SUBMIT <reqid> <url> <user> <password> <image_id> <name> <realm_id> <hwp_id> <hwp_memory> <hwp_cpu> <hwp_storage> <keyname> <userdata>
  *  where all arguments are required.  <reqid>, <url>, <user>, <password>, and
  *  <image_id> all have to be non-NULL; <name>, <realm_id>, <hwp_id>,
  *  <keyname>, and <userdata> should either be the string "NULL" to let
@@ -121,13 +121,13 @@ static std::string create_instance_output(char * reqid,
  */
 bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
 {
-    char *url, *user, *password, *image_id, *name, *realm_id, *hwp_id, *reqid;
+    char *url, *user, *password, *image_id, *name, *realm_id, *hwp_id, *hwp_memory, *hwp_cpu, *hwp_storage, *reqid;
     char *keyname, *userdata;
     struct deltacloud_api api;
     struct deltacloud_instance inst;
     bool ret = FALSE;
 
-    if (!verify_number_args(11, argc)) {
+    if (!verify_number_args(14, argc)) {
         output_string = create_failure("0", "Wrong_Argument_Number");
         return FALSE;
     }
@@ -140,10 +140,13 @@ bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
     name = argv[6];
     realm_id = argv[7];
     hwp_id = argv[8];
-    keyname = argv[9];
-    userdata = argv[10];
+    hwp_memory = argv[9];
+    hwp_cpu = argv[10];
+    hwp_storage = argv[11];
+    keyname = argv[12];
+    userdata = argv[13];
 
-    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, image_id %s, name %s, realm_id %s, hwp_id %s, keyname %s\n", reqid, url, user, password, image_id, name, realm_id, hwp_id, keyname);
+    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, image_id %s, name %s, realm_id %s, hwp_id %s, hwp_memory %s, hwp_cpu %s, hwp_storage %s, keyname %s\n", reqid, url, user, password, image_id, name, realm_id, hwp_id, hwp_memory, hwp_cpu, hwp_storage, keyname);
 
     if (STRCASEEQ(url, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_URL");
@@ -168,6 +171,12 @@ bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
         realm_id = NULL;
     if (STRCASEEQ(hwp_id, NULLSTRING))
         hwp_id = NULL;
+    if (STRCASEEQ(hwp_memory, NULLSTRING))
+        hwp_memory = NULL;
+    if (STRCASEEQ(hwp_cpu, NULLSTRING))
+        hwp_cpu = NULL;
+    if (STRCASEEQ(hwp_storage, NULLSTRING))
+        hwp_storage = NULL;
     if (STRCASEEQ(keyname, NULLSTRING))
         keyname = NULL;
     if (STRCASEEQ(userdata, NULLSTRING))
@@ -179,8 +188,8 @@ bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
         return FALSE;
     }
 
-    if (deltacloud_create_instance(&api, image_id, name, realm_id, hwp_id,
-                                   keyname, userdata, &inst) < 0) {
+    if (deltacloud_create_instance(&api, image_id, name, realm_id, hwp_id, hwp_memory,
+                                   hwp_cpu, hwp_storage, keyname, userdata, &inst) < 0) {
         output_string = create_failure(reqid, "Create_Instance_Failure: %s",
                                        deltacloud_get_last_error_string());
         goto cleanup_library;
-- 
1.7.4

