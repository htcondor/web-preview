{"id": 692, "title": "Ticket #692: local universe job with unwritable job log leaks spool directory", "description": "<blockquote>\nIf a local universe job is submitted, but cannot write to its job log, when it tries and fails to run it will leak a subdirectory at $SPOOL/local_univ_execute/dir_$PID .  Worse, the schedd complains:\n\n<p></p><pre>  Local starter pid 30992 for job 3.0 exited with status 1\n  ERROR: Local Starter exited with unknown value 1!\n</pre>\n\n<p><em>and immediately re-runs the job</em>.   The problem loops, eventually consuming all 32000ish possible subdirectories.  No further local universe jobs can run; all will fail trying to create the subdirectory.  Condor will never clean up these directories.\n\n</p><p>This process also leaks disposable run accounts created on Windows.  If the computer also run the startd, the next time the startd starts up, the run accounts will be deleted (<em>possibly while still in use by the local universe!</em>).  Otherwise the run accounts are never deleted.\n\n</p><p>Problem 1: In this case the job should be put on hold, not left in idle.\n</p><ul>\n<li>Cause: The schedd.cpp Scheduler::jobExitCode isn't prepared to handle \"1\" as a failure from the starter, and just tosses the job back into idle.\n</li><li>Fix: In schedd.cpp Scheduler::jobExitCode's default case,  if(exit_code==1 &amp;&amp; IsLocalUniverse(srec)), then put the job on hold.\n<ul>\n<li>Problems: The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=HoldReason\" title=\"Hold Reason\">HoldReason</a></span> is non-specific and less helpful.  Jobs may be put on hold not because the job has a problem, but because the condor_starter has an unrelated problem .\n</li></ul>\n</li><li>Better Fix: Have the starter send a message with the problem to the schedd so that the job can be put on hold with a useful reason.  I haven't yet dug into what would be involved.\n</li></ul>\n\n<p>Problem 1a: The fix for problem 1 leaves the job with an unhelpful hold reason.\n</p><ul>\n<li>Fix: TODO  Look to how jobs get put on hold when the starter explodes for the same reason on a vanilla job.\n</li></ul>\n\n<p>Problem 2: Leaked directory.  (This user <em>also</em> had a pretty aggressive <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=PeriodicRelease\" title=\"Periodic Release\">PeriodicRelease</a></span>, so fixing problem 1 isn't enough.)\n</p><ul>\n<li>Cause: starter normally cleans up after itself, but terminated abnormally.  When running under a startd, the startd has a copy of the cleanup code and will manage it.\n</li><li>Fix: Move CStarter::removeTempExecuteDir's implementation into a shared location, probably condor_c++_util for lack of a better location.  Call it from the schedd in TODO???\n</li></ul>\n\n<p>Problem 3: The directory (and Windows disposable user) cleanup code is duplicated between the startds cleanup_execute_dir() and the starters CStarter::removeTempExecuteDir. As duplicates, they may drift apart.\n</p><ul>\n<li>Fix: Having moved CStarter::removeTempExecuteDir's implementation into a shared location, have cleanup_execute_dir call it instead of reimplementing it.\n</li></ul>\n\n<p>Problem 4: The schedd doesn't clean up leaked local universe execute directories on startup.  The startd does.\n</p><ul>\n<li>Fix: Move cleanup_execute_dirs out of the startd and into a shared location (probably condor_c++_util again).  Call cleanup_execute_dirs in schedd.cpp:7568 Scheduler::initLocalStarterDir.\n</li></ul>\n\n<p>Current plan plan:\n</p><ul>\n<li>Investigate and propose fix plan only.\n<ul>\n<li>Identify other possible problems, leaks, etc stemming from same core problem (starter self manages, but may EXCEPT or otherwise exit uncleanly)\n</li><li>As part of plan: schedd should probably clean up on unexpected starter exit, schedd should probably clean up rogue (all?) on startup.\n</li><li>Email fix plan to Miron, Todd, Alain.\n</li></ul>\n</li></ul>\n\n<p><span class=\"subsection\"></span></p><h3>Alternate Fix</h3>\n\n<p>As an alternate solution, we could run/contact a startd and run the starters under the startd.  This may necessitate running shadows as well.\n\n</p><p>The pieces may already be in place.  A schedd can contact and use a local startd without needing a negotiation cycle.  A startd can dynamically repartition itself into \"more\" slots.\n\n</p><p>Advantages:\n</p><ul>\n<li>Existing, known good, startd cleanup code works.\n</li><li>Some existing redunant policy evaluation duplicated between the schedd (for local universe) and the startd can potentially be eliminated, simplifying code.\n</li><li>More work will be moved out of the schedd into the startd/shadows, increasing parallelism and reducing load on the typically loaded schedd.\n</li></ul>\n\n<p>Disadvantages:\n</p><ul>\n<li>More processes with attendant FD, memory, and processor consumption.\n</li><li>Increased configuration complexity.  If we reuse the existing startd, do we need to craft a policy to handle a mix of vanilla and local jobs?  Do we run two, in which case we need multiple sets of configuration?\n</li><li>This may create the public impression that Condor is always heavyweight, and not appropriate for the sorts of jobs that the local universe exists for.\n</li></ul>\n\n<p><span class=\"subsection\"></span></p><h3>Test case </h3>\n\n<p>Submit file:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">OnExitRemove = false\nExecutable = /bin/date\nLog = eraseme.log\nUniverse = local\nNotification = never\nDeferralTime = (CurrentTime + 30)\nDeferralWindow = 99999999\nDeferralPrepTime = 1\nqueue\n</pre></div>\n\n\n<p>Immediately after submitting it, \"chmod u-w eraseme.log\".  When the job starts 30 or so second later, the loop of leaking death begins.\n\n</p><p><span class=\"section\"></span></p><h2>Research Notes</h2>\n\n<p>Failure path:\n(Note that <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=UserLog\" title=\"User Log\">UserLog</a></span> is just a typedef for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=WriteUserLog\" title=\"Write User Log\">WriteUserLog</a></span>)\n</p><ul>\n<li>safe_open_wrapper\n</li><li>write_user_log.cpp:429 WriteUserLog::openFile\n<ul>\n<li>431: WriteUserLog::initialize: safe_open_wrapper(\"/scratch/adesmet/rust/19642/submit-killer/eraseme.log\") failed - errno 13 (Permission denied)\n</li></ul>\n</li><li>write_user_log.cpp:154 WriteUserLog::initialize(file, c, p, s, gjid)\n<ul>\n<li>155: WriteUserLog::initialize: failed to open file\n</li></ul>\n</li><li>local_user_log.cpp:55 LocalUserLog::init -\n<ul>\n<li>57: \"Failed to initialize Starter's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=UserLog\" title=\"User Log\">UserLog</a></span>, aborting\"\n</li></ul>\n</li><li>local_user_log.cpp:112 LocalUserLog::initFromJobAd\n</li><li>jic_local_schedd.cpp:495 JICLocalSchedd::initLocalUserLog\n</li><li>jic_local.cpp:100 JICLocal::init\n</li><li>JICLocalSchedd::init (Check)\n</li><li>baseStarter.cpp:201 CStarter::Init\n<ul>\n<li>\"Failed to initialize <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobInfoCommunicator\" title=\"Job Info Communicator\">JobInfoCommunicator</a></span>, aborting\"\n</li></ul>\n</li><li>starter_v61_main.cpp:275 main_init - DC_Exit(1)\n<ul>\n<li>\"Unable to start job\"\n</li></ul>\n</li></ul>\n\n<p>Processing failure in schedd:\n</p><ul>\n<li>schedd.cpp Scheduler::jobExitCode : \"default\" switch case, and if(reportException...) below\n</li></ul>\n\n<p>Directory management:\n</p><ul>\n<li>schedd.cpp:7535 Scheduler::initLocalStarterDir schedd identifies the local_univ_execute directory.  Stores in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LocalUnivExecuteDir\" title=\"Local Univ Execute Dir\">LocalUnivExecuteDir</a></span>.\n</li><li>schedd.cpp:7510 Scheduler::spawnLocalStarter passes <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LocalUnivExecuteDir\" title=\"Local Univ Execute Dir\">LocalUnivExecuteDir</a></span> into starter as _???_EXECUTE environment variable (probably _condor_EXECUTE).\n</li><li>TODOCHECK baseStarter.cpp:237 Execute assigned to environment variable (via param() which uses environment to override condor_config file)\n</li><li>baseStarter.cpp:128 CStarter::Init <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=WorkingDir\" title=\"Working Dir\">WorkingDir</a></span> is assigned working directory name based on Execute\n</li><li>baseStarter.cpp:651 CStarter::createTempExecuteDir creates working directory, possibly using <span class=\"wiki\"><a href=\"wiki?p=PrivSep\" title=\"Priv Sep\">PrivSep</a></span> or directly\n</li><li>baseStarter.cpp:2665 CStarter::removeTempExecuteDir deletes the working directory\n<ul>\n<li>Called by baseStarter.cpp:237 CStarter::StarterExit\n<ul>\n<li>Called by baseStarter.cpp:2293 CStarter::Reaper\n<ul>\n<li>Set up in baseStarter.cpp:169 CStarter::Init\n</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n\n<p>For \"normal\" jobs running under a startd, cleanup is handled by util.cpp:218 cleanup_execute_dir() called from Starter.cpp:614 Starter::exited().  We probably want to hijack the exact code, sharing it between the startd and schedd, since it is non-trivial and may drift.\n\n</p><p>cleanup_execute_dir is copy and pasted as baseStarter::2665 CStarter::removeTempExecuteDir.  Risk of drift seems high!</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Sep-30 09:07:05 by tannenba:</em> <br/>\n\nFor v7.5.x, we want to fix this issue via one of the methods outlined above.\n\n<p>However, for v7.4.0, we at least want to prevent the file/directory leak from happening based upon bad user input.  To do this, I propose make the following change:  if the starter is running in local mode, then register an EXCEPT handler in the starter that would:\n\n</p><p></p><ol>\n<li>call the file/directory clean-up functions that would normally get invoked upon normal starter termination, and\n</li><li>put the job on hold\n</li></ol>\n\n<p>This would cover the most egregious problems with (hopefully) minimal code change.  Of course, it would not cover several other situations outlined above (i.e. subdirectories would still be leaked when the machine crashes), but fixing everything as outlined above it too much code churn for a 7.4.0 bug fix.\n\n</p><p></p><hr/>\n<em>2009-Sep-30 17:16:08 by adesmet:</em> <br/>\n\nCleaning up the directory wasn't too hard (although hooking into _EXCEPT_Cleanup isn't good enough; the code path in question uses DC_exit).\n\n<p>Having yet figured out how to put the job on hold.\n\n</p><p></p><hr/>\n<em>2009-Oct-02 18:17:51 by adesmet:</em> <br/>\n\nSimple solution proposed by Todd above implemented.\n\n<p></p><hr/>\n<em>2009-Oct-13 16:41:33 by adesmet:</em> <br/>\n\nFixed with <span class=\"chng\"><a href=\"chngview?cn=15896\">[15896]</a></span>.  Remaining work to unify and make more robust are in <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=848\" onclick=\"get_ticket_and_populate_wrapper('848'); return false;\" title=\"Merge execute directory cleanup code\">#848</a></span></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=848\" onclick=\"get_ticket_and_populate_wrapper('848'); return false;\" title=\"Merge execute directory cleanup code\">#848</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nMerge execute directory cleanup code</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Oct-29 15:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25082\">[25082]</a></span>: document <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=692\" onclick=\"get_ticket_and_populate_wrapper('692'); return false;\" title=\"local universe job with unwritable job log leaks spool directory\">#692</a></span> - leaking working directories and jobs running in a loop  (By Alan De Smet )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Oct-02 18:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15896\">[15896]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=692\" onclick=\"get_ticket_and_populate_wrapper('692'); return false;\" title=\"local universe job with unwritable job log leaks spool directory\">#692</a></span> - When the starter excepts, clean up any working directories. Old behavior: directories might be leaked, especially in the local universe.\u00a0[...]\n (By Alan De Smet )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2009-Dec-17 17:35", "status": "resolved", "created": "2009-Aug-25 11:52", "fixed_version": "2009-Aug-25 11:52", "broken_version": "v070200", "priority": "2", "subsystem": "Daemons", "assigned_to": "adesmet", "derived_from": "", "creator": "adesmet", "rust": "a19642", "customer_group": "osg", "visibility": "public", "notify": "", "due_date": ""}