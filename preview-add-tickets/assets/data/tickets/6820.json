{"id": 6820, "title": "Ticket #6820: Improve Python bindings' JobEvent interface", "description": "<blockquote>\nAfter more consultation, we've determined that the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> API would be better (and more Pythonic) if the event-specific data were not represented as <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> object attributes, but by making <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> objects more dict()-like.\n\n<p>Specifically:\n\n</p><p></p><ul>\n<li>Add the <code>__getitem__</code> function, remove the <code>__getattr_</code> function, and implement <code>cluster</code>, <code>proc</code>, and <code>timestamp</code>.\n</li><li>Add <code>__contains__()</code>, <code>keys()</code>, <code>values()</code>, <code>items()</code>, and <code>get()</code>.\n</li><li>Add <code>__iter__()</code>, <code>iterkeys()</code>, <code>itervalues()</code>, and <code>iteritems()</code>.\n</li><li>Add <code>__len__()</code> and <code>has_key()</code>.\n</li><li>Since <code>JobEvent=s are immutable, do NOT implement =clear()</code>, <code>setdefault()</code>, <code>update()</code>, <code>pop()</code>, <code>popitem()</code>, <code>__missing__()</code>, <code>__setitem()__</code>, or <code>__delitem__()</code>.\n</li><li>Don't bother implementing <code>__reverse__()</code>, either.\n</li><li>Don't bother implementing <code>copy()</code>, either; it's a pain due to C++ pointer management in the underlying object, and seems like there's no reason to want an immutable object anyway.\n</li><li>Leave Python 3 issues for another ticket.  (It may not be so bad; since a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> is immutable, we don't need to worry about the 'live update' aspect of things, but can get away with just changing the mapping of <code>keys()</code>, <code>values()</code>, and <code>items()</code> to <code>Py_{IterKeys,IterItems,IterValues}()</code></li></ul>\n</blockquote>", "remarks": "<blockquote>\n[original description]\n\n<p><em>2018-Nov-11 20:43:00 by tlmiller:</em> <br/>\n\n\n</p><p>After more consultation, we've determined that the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> API would be better (and more Pythonic) if the event-specific data were not represented as <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> object attributes, but by making <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> objects more dict()-like.  To avoid having to support the attribute API for 8.8, let's try to get rid of it before the 8.8.0 code-freeze.\n\n</p><p>To avoid losing access to event-specific data, add the <code>__getitem__</code> function.  To avoid losing access to non-event-specific data, make type, cluster, proc, and timestamp normal attributes.  We would like to implement the rest of the dictionary interface as time permits, but a <code>keys()</code> method would address a specific probem; see <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6814\" onclick=\"get_ticket_and_populate_wrapper('6814'); return false;\" title=\"Improve JobEventLog (python) API\">#6814</a></span>.\n\n</p><p>It seems like <code>__contains__</code> would also be high on the list.\n\n</p><p><em>2018-Nov-11 21:06:57 by tlmiller:</em> <br/>\n\nWhen doing the documentation, be sure to mention which functions can throw what.\n\n</p><p></p><hr/>\n<em>2018-Nov-13 12:38:00 by tlmiller:</em> <br/>\n\nRemaining from the 2.7 list:\n\n<p></p><ul>\n<li><code>has_key()</code> is for backwards-compatibility only and thus seems kind of silly in a world with Python 3.7\n</li><li>The trio of <code>iterkeys()</code>, <code>itervalues()</code>, and <code>iteritems()</code> are only hard because it's unclear how to construct a Python iterator from C++ (I assume it's OK that we're returning Python lists of copies from <code>keys()</code>, <code>values()</code>, and <code>items()</code>; presumably there's a one-liner to convert such a thing to an iterator thereof.)\n</li><li><code>copy()</code> and <code>__len__()</code> should be easy.\n</li><li><code>__iter__()</code> just return <code>__iterkeys__()</code>.\n</li></ul>\n\n<p>Since <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvents\" title=\"Job Events\">JobEvents</a></span> are immutable, we are specifically not implementing <code>clear()</code>, <code>setdefault()</code>, <code>update()</code>, <code>pop()</code>, <code>popitem()</code>, <code>__missing__()</code>, <code>__setitem()__</code>, or <code>__delitem__()</code>.\n\n</p><p>We're also not implementing <code>__reverse__()</code>.\n\n</p><p></p><hr/>\n<em>2018-Nov-13 12:42:46 by tlmiller:</em> <br/>\n\nPython 3.7 drops the <code>iter*()</code> methods, but changes <code>keys()</code>, <code>values()</code>, and <code>items()</code> to return 'view objects'.  Not sure what the idiomatic solution here is, will worry about it later.\n\n<p></p><hr/>\n<em>2018-Nov-13 14:54:34 by tlmiller:</em> <br/>\n\nThere is a one-line to convert from lists to list iterators, although Boost didn't support it natively for some reason.  Also, because the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> is immutable, it's OK to return iterators over copies of the attributes/values/pairs, because they won't ever change.  (This may only technically be a concern for Python 3, which we don't handle yet.)\n\n<p></p><hr/>\n<em>2018-Nov-13 15:20:51 by tlmiller:</em> <br/>\n\nActually, <code>copy()</code> is a bit of pain, because <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> can otherwise assume that it owns its pointers.  We could make a deep copy or return the self object, but neither of those seem like a good idea, and it's not clear what use a copy of an immutable object would be anyway, so for now, let's skip it.\n\n<p></p><hr/>\n<em>2018-Nov-14 10:58:36 by tlmiller:</em> <br/>\n\nNeeds testing and docs.\n\n<p></p><hr/>\n<em>2018-Nov-14 10:58:48 by tlmiller:</em> <br/>\n\nRewriting history...\n\n<p></p><hr/>\n<em>2018-Nov-16 11:32:35 by tlmiller:</em> <br/>\n\nWill add tests later.\n\n<p></p><hr/>\n<em>2018-Nov-19 15:05:21 by johnkn:</em> <br/>\n\n<strong>CODE_REVIEW</strong> : changes look good.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6829\" onclick=\"get_ticket_and_populate_wrapper('6829'); return false;\" title=\"Test (Python) JobEvent class\">#6829</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nTest (Python) <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> class</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-16 11:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55763\">[55763]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) Forgot the release notes. Also, 8.8 is a stable-series release.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-16 11:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55749\">[55749]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) Badly document the new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEvent\" title=\"Job Event\">JobEvent</a></span> API. Better documention shall be written when we fix up the rest of the Python bindings documentation.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-14 00:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55732\">[55732]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) Convert only use of attribute API to dictionary API.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-13 18:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55731\">[55731]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) [JobEvent] Don't return the cluster instead of the proc ID.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-13 15:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55724\">[55724]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) [JobEvent] Add __len__ and has_key().  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-13 14:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55722\">[55722]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) [JobEvent] Add iter{keys,values,items}() and __iter__().  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-13 12:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55717\">[55717]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) [JobEvent] Add get().  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-12 16:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55709\">[55709]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) [JobEvent] Add values() and items().  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-11 21:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55706\">[55706]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) [JobEvent] Add keys().  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-11 20:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55705\">[55705]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) [JobEvent] Add __contains__().  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Nov-11 20:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55702\">[55702]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6820\" onclick=\"get_ticket_and_populate_wrapper('6820'); return false;\" title=\"Improve Python bindings' JobEvent interface\">#6820</a></span>) [JobEvent] Remove __getattr__(). Implement cluster(), proc(), and timestamp(). Add __getitem__().  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2018-Nov-19 15:21", "status": "resolved", "created": "2018-Nov-11 20:43", "fixed_version": "2018-Nov-11 20:43", "broken_version": "v080800", "priority": "1", "subsystem": "PythonBinding", "assigned_to": "tlmiller", "derived_from": "#6814", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}