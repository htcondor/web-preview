{"id": 1707, "title": "Ticket #1707: improve scalability of shadow logging", "description": "<blockquote>\nIn large-scale tests of glideinWMS, we have had the submit node become unresponsive to the point where it needed to be rebooted after being in this state for hours.  System load reported by uptime was over 8000.  There were 32k jobs running around the time the problem happened.\n\n<p>Some evidence suggests that a large part of the problem is caused by locking of the shadow log.  During the time when the system was unresponsive, large time skew between different shadows was observed:\n\n</p><p></p><div class=\"verbatim\">\n<pre>10/08/10 09:37:33 (59903.0) (17861): ...\n10/08/10 13:00:30 (64161.0) (47394): ...\n10/08/10 13:00:30 (59858.0) (4887): ...\n10/08/10 09:37:33 (70813.0) (73967): ...\n</pre></div>\n\n\n<p>We believe that time skew was caused by some shadows getting starved (for hours!) trying to get a lock to the log file.\n\n</p><p>In a standalone test, I've reproduced high system load with 10k processes doing nothing but vying for a lock to the same file, using the same method the condor shadow does.  Every time the lock is released, there are O(35k) context switches, and the system becomes very unresponsive.\n\n</p><p>The processes are just making a blocking syscall to the kernel, so all the activity is happening down in the kernel itself, not in user-space.\n\n</p><p>In my particular test, the 15min load average reported by uptime is ~600.  The process that gets the lock sleeps for 10 seconds and then releases it.  If I change the sleep from 10s to 1s, the 15min load average approaches ~1000.  This is in Scientific Linux 5.3.\n\n</p><p>I think it is likely that contention for the lock to the shadow log is responsible for the system melt-down that we experienced.  There may be other problems as well, but we must solve this one either way.\n\n</p><p><span class=\"section\"></span></p><h2>Proposed Solution</h2>\n\n<p>Miron wants improved management of the lock.  At the very least, Condor should try to detect this type of problem and report it.\n\n</p><p>In addition, we all agreed that the semantics of O_APPEND are acceptable in environments that support it (i.e. POSIX file systems, not NFS).  So we can avoid locking when appending to the file in these cases.\n\n</p><p><span class=\"section\"></span></p><h2>Step One</h2>\n\n<p></p><ul>\n<li>[DONE] Condor processes should keep track of locking delays.  They can report this to their parent process in their heartbeat message and the parent can report a summary of problems when it sees them.\n\n<p></p></li><li>[DONE] Each message to the log file must be written with a single call to write() rather than multiple calls to fprintf() as are currently being done.\n\n<p></p></li><li>[DONE] A new boolean configuration variable should be added called LOCK_DEBUG_LOG_TO_APPEND.  When true and a lock file is configured, locking will happen on every write, as it does now.  When false, locking will only happen during rotation.  In Windows, it is ignored, because we always need to lock when writing.\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Step Two</h2>\n\n<p></p><ul>\n<li>After gaining experience with the above, we may decide that even having the shadows lock to rotate the shadow log is unacceptable.  If it is unacceptable, then we could have some other process handle the rotation.  It should rotate at a smaller size than the shadows do.  We will need to decide if the shadows should still rotate when they hit the upper bound or whether they should just wait for the log to be rotated.  It is not acceptable to just continue appending to the log.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2010-Oct-12 19:42:49 by matt:</em> <br/>\n\nTwo things we do to scale here -\n\n<p></p><ol>\n<li>Stop locking the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLog\" title=\"Shadow Log\">ShadowLog</a></span> altogether\n</li><li>Place <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLog\" title=\"Shadow Log\">ShadowLog</a></span> in /dev/shm\n</li></ol>\n\n<p>Generally the write semantics for the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLog\" title=\"Shadow Log\">ShadowLog</a></span> means its structure is sufficiently maintained without a lock.\n\n</p><p>Also, the information present in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLog\" title=\"Shadow Log\">ShadowLog</a></span> is not especially useful for debugging. Typically the significant issues are propagated to the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SchedLog\" title=\"Sched Log\">SchedLog</a></span>. If there is critical information in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLog\" title=\"Shadow Log\">ShadowLog</a></span> it should be considered for inclusion in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SchedLog\" title=\"Sched Log\">SchedLog</a></span>.\n\n</p><p>Additionally, a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLog\" title=\"Shadow Log\">ShadowLog</a></span> without D_PID is useless.\n\n</p><p>If the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLogs\" title=\"Shadow Logs\">ShadowLogs</a></span> are of importance, it has been suggested that they should be available via multiple streams, such as per pid, e.g. ShadowLog.pid.\n\n</p><p></p><hr/>\n<em>2010-Oct-13 08:01:51 by danb:</em> <br/>\n\nErik Paulson sent me a link to an interesting blog post related to this issue: <a class=\"external\" href=\"http://bryanpendleton.blogspot.com/2010/07/unix-file-locking-does-not-implement.html\">http://bryanpendleton.blogspot.com/2010/07/unix-file-locking-does-not-implement.html</a>\n\n<p></p><hr/>\n<em>2010-Oct-18 11:53:31 by danb:</em> <br/>\n\nI have tested writing with O_APPEND under a variety of circumstances.  I tested with 1k-10k writers alternately sleeping for a second and then writing.  I have tested with write sizes from 0.5k-10k.  I have tried a few different filesystems: ext3, tmpfs, jfs, AFS, NFS.  I have run tests in a few different OSes: SL4, SL5, OS X 10.5.  I also tested in SL5 running under VMware Fusion.\n\n<p>In no case did I observe messages getting garbled when using O_APPEND.  When I tested without the O_APPEND flag, I observed garbled messages only under AFS and NFS.  It is well known that NFS does not fully comply with POSIX O_APPEND behavior (says so right in the man page for open()).  However, from my tests it seems that if the writers are all on the same machine, O_APPEND works quite well in practice for both NFS and AFS.  I did not test with writers to the same file from different machines, because we don't care about that case for Condor logging.  I suspect that writers from different machines will produce garbled messages.\n\n</p><p>Based on all that, I think it is reasonable to make the default behavior in Condor under unix to be LOCK_DEBUG_LOG_TO_APPEND=false.\n\n</p><p></p><hr/>\n<em>2010-Oct-18 18:01:52 by matt:</em> <br/>\n\nWill you preserve the existing DC_CHILDALIVE command, i.e. no change in arguments, and instead introduce a DC_CHILDALIVE_WITH_AD for an extensible way to carry data such as lock delays.\n\n<p></p><hr/>\n<em>2010-Nov-19 16:18:48 by matt:</em> <br/>\n\nDC_CHILDALIVE_WITH_AD is a nice thought, but may not be worthwhile. Instead, a DC_CHILDALIVE that is tolerant of a 2 argument call instead of 3 (3rd is the dprintf_lock_delay) may be more realistic.\n\n<p></p><hr/>\n<em>2010-Dec-02 10:55:26 by danb:</em> <br/>\n\nOk, the extra floating point dprintf_lock_delay part of the DC_CHILDALIVE message is now optional.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-02 14:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19532\">[19532]</a></span>: Add fake StdUnivSock::peek_end_of_message(). <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span> This new method in the Stream class family is only called in daemon-core, so the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StdUnivSock\" title=\"Std Univ Sock\">StdUnivSock</a></span> version can just EXCEPT().  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-02 10:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19514\">[19514]</a></span>: Made dprintf_lock_delay optional in DC_CHILDALIVE. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span> This makes it convenient to send alive messages from non-condor programs using squawk or something similarly simple. It also preserves compatibility between new parents and old (pre 7.5.5) children, for what that's worth.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Nov-02 17:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19317\">[19317]</a></span>: Fixed a bug in my recent dprintf changes that made infinite recursion possible. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span> This bug is internal to 7.5.5.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-20 11:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19189\">[19189]</a></span>: Added LOCK_DEBUG_LOG_TO_APPEND to the config table. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-20 11:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25739\">[25739]</a></span>: Documented LOCK_DEBUG_LOG_TO_APPEND. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-18 17:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19186\">[19186]</a></span>: Added protection against a potential email bomb in my previous commit. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-18 17:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19185\">[19185]</a></span>: Added some monitoring for extreme debug locking delays. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-18 10:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19182\">[19182]</a></span>: Added LOCK_DEBUG_LOG_TO_APPEND. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span> It defaults to false, which means we only lock the debug lock (if there is one) while rotating the file. This setting is ignored under Windows and is effectively forced to be true.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-18 10:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19181\">[19181]</a></span>: Make dprintf() use a single call to write() so we can depend on O_APPEND. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1707\" title=\"improve scalability of shadow logging\">#1707</a></span> We compose the message to be written into a single buffer and then write it out with a single call to write(). Previously, there were multiple calls to fprintf(), which likely happened to translate into a single write() for\u00a0[...]\n (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Dec-02 10:55", "status": "resolved", "created": "2010-Oct-12 18:12", "fixed_version": "2010-Oct-12 18:12", "broken_version": "v070000", "priority": "4", "subsystem": "", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "dan@hep.wisc.edu, sfiligoi@fnal.gov, matt@cs.wisc.edu", "due_date": ""}