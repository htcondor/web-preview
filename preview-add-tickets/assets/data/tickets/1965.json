{"id": 1965, "title": "Ticket #1965: condor_master should be able to have its own PID namespace", "description": "<blockquote>\nWhen available, the master should spawn its own PID namepsace.  This will help the performance of the procd (far less entries in /proc) and protect Condor from accidentally sending signals to non-Condor processes (a nice layer of security).</blockquote>", "remarks": "<blockquote>\n<em>2011-Mar-18 17:59:56 by bbockelm:</em> <br/>\n\nAh - there's an oversight here:\n\n<p></p><div class=\"verbatim\">\n<pre>[root@brian-test ~]# cat /var/run/condor/condor_master.pid\n1\n</pre></div>\n\n\n<p>If the condor_master writes its own PID file, it writes it as \"1\"; the RHEL daemon scripts sure don't like this.</p></blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/289/condor_pid_namespaces_master_v1.patch\">condor_pid_namespaces_master_v1.patch</a>\n7701 bytes added by bbockelm on 2011-Mar-12 02:29:14 UTC.\n<br/>\nAttached patch implements a PID namespace for condor_master if the \"-n\" flag is given.  Notes:\n<ul>\n<li>I had to duplicate some code - would be nice if someone could see a way around this.\n</li><li>Should this be the default?  One thing I noticed was that the PIDs written to the log are not what the admin might expect...\n</li><li>Previously, Condor refuses to send signals to a PID less than 3; this has been removed.\n</li></ul>\n<br/>\n</li><li><a href=\"attach_get/293/condor_pid_namespaces_master_v2.patch\">condor_pid_namespaces_master_v2.patch</a>\n10379 bytes added by bbockelm on 2011-Mar-19 16:26:49 UTC.\n<br/>\nSecond version of the patch.  Notes:\n<ul>\n<li>This remains off by default.  I'm still worried about a sysadmin getting \"surprised\" and not realizing the PIDs in the logfiles don't match the \"global\" PID.\n</li><li>I noticed that using the \"-n\" flag conflicts with \"-n &lt;instance&gt;\" command to the condor_master.  Rather than change it and run afoul of another daemon's flags, I'd like a guru to suggest something.\n</li><li>On my test box, I found the combination of CLONE_VFORK, CLONE_NEWPID, and using PTRACE on the process caused CLONE_VFORK to not function.  To safeguard against this, I use the same pipe/FD_CLOEXEC as in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1959\" onclick=\"get_ticket_and_populate_wrapper('1959'); return false;\" title=\"Implement per-job PID namespaces.\">#1959</a></span>;  the two are complementary.\n</li><li>Dropping the pidfile is handled by daemon-core pre-fork instead of post-fork.  Post-fork, the daemon thinks it is PID 1, making the pidfile less-than-useful.  <strong>Note</strong>: because of this, the new daemon doesn't know to delete the file post-exec and leaves a turd.  Suggestions?</li></ul>\n<br/>\n</li></ul>\n</blockquote>", "check_ins": "", "type": "enhance", "last_change": "2011-Mar-28 12:22", "status": "active", "created": "2011-Mar-11 20:23", "fixed_version": "2011-Mar-11 20:23", "broken_version": "", "priority": "4", "subsystem": "Daemons", "assigned_to": "bbockelm", "derived_from": "#1959", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tstclair@redhat.com matt@cs.wisc.edu tannenba@cs.wisc.edu", "due_date": ""}