{"id": 125, "title": "Ticket #125: Create a daemonCore skeleton for Java services", "description": "<blockquote>\nWe currently have a source code \"skeleton\" for folks who want to create a daemon core service in C++; it is sitting in <a class=\"file\" href=\"rlog?f=src/condor_dcskel\">/src/condor_dcskel</a> .  We also have some <span class=\"wiki\"><a href=\"wiki?p=CreatingNewDaemons\" title=\"Creating New Daemons\">pithy documentation</a></span>.\n\n<p>Now we want to do the same thing, but for services that will be implemented in Java.  What inspired this?  Well, we did or are doing a bunch of work to incorporate a Java service (see tickets <span class=\"ticket\"><a class=\"active\" href=\"tktview?tn=7\" title=\"Run HDFS services as Condor daemons\">#7</a></span>, <span class=\"ticket\"><a class=\"new\" href=\"tktview?tn=209\" title=\"Create a service to publish Condor events via JMS\">#209</a></span>) as a Condor daemon including:\n</p><ul>\n<li>run under the master w/ keep alives\n</li><li>respond to condor_on, condor_off, condor_reconfig, etc.\n</li><li>read config params out of the Condor config file and rewrite them as appropriate for the service in question.\n</li><li>etc, etc.\n</li></ul>\n\n<p>Since we did this, and we have been asked before by collaborators about incorporating Java-implemented services into Condor, we are trying out creating a Java-based daemon core skeleton.\n\n</p><p>This ticket will hold thoughts/design/code on this effort.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Jan-29 21:16:30 by faisal:</em> <br/>\n\nA java based daemon inside Condor can be a java process created using Create_Process call. In order to make launching of a desired java service slightly convenient, in terms of constructing command line arguments, we can require it to be packaged as a <a class=\"external\" href=\"http://www-128.ibm.com/developerworks/library/j-onejar/index.html?ca=drs-j4904\">single jar file</a>. This jar file should then contain all necessary components (java classes, third-party libraries and even some static resources e.g files etc).\n\n<p>On interesting issue here is concerning the fact that main logic of our daemon is now running as a separate process. We might like to open a communication channel between java process and any other daemon and/or client. I think there is a way to open a command channel to a process created by Create_Process?\n\n</p><p></p><hr/>\n<em>2009-Feb-24 12:00:02 by faisal:</em> <br/>\n\nI created two version of skeletons:\n\n<p>(a) One is based on creating a Java process (java -jar &lt;jar-containing-main-class.jar&gt;) that can run under the control of our Master daemon. Its life cycle (create, restart/re-config, destroy) is managed by Master. All the necessary parameters to start a jvm e.g classpath can be controlled using Condor's configuration file. Under this configuration only possible way for java/c++ communication, at this point, is to use sockets.\n\n</p><p>(b) A JNI based skeleton that uses JNI to create jvm inside our C++ code and compiles with the Condor. I am writing an example JAVA program along with a README file for its usage. As it uses JNI, we can easily call methods inside jvm with some overheads.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2010-Jan-31 13:20", "status": "new", "created": "2009-Jan-26 14:09", "fixed_version": "2009-Jan-26 14:09", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "faisal", "derived_from": "", "creator": "tannenba", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}