{"id": 4692, "title": "Ticket #4692: URL transfer plugin and should_transfer_files broken if input URL only", "description": "<blockquote>\nIf should_transfer_files is not set in the submit file, and transfer_input_files contains URLs, they are not transferred, which is highly unintuitive.\n\n<p>Also, when should_transfer_files = if_needed, URLs again need special treatment since they have nothing to do with whether or not the file system domain matches between submit and execute.\n\n</p><p>Full report from Brian Candler on condor-users:\n\n</p><p>(1) Running a personal condor (8.0.7), given the following submit file\n(foo.sub) with the input from a URL:\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\nexecutable = /bin/sh\narguments = \"'-c' 'cat condor_submit.html'\"\ntransfer_executable = no\ntransfer_input_files =\nhttp://research.cs.wisc.edu/htcondor/manual/current/condor_submit.html\noutput = foo.out\nerror = foo.err\nqueue\n</pre></div>\n\n\n<p>I find that the file is not transferred at all. foo.err says:\n\n</p><p></p><pre>    cat: condor_submit.html: No such file or directory\n</pre>\n\n<p>The documentation says:\n\n</p><p>\"For vanilla and vm universe jobs only, a file may be specified by\ngiving a URL, instead of a file name. The implementation for URL\ntransfers requires both configuration and available plug-in.\"\n\n</p><p>but these are indeed present (/etc/condor/condor_config has\nFILETRANSFER_PLUGINS which includes /usr/lib/condor/libexec/curl_plugin)\n\n</p><p>WORKAROUND: I was able to make it work by setting \"should_transfer_files\n= yes\".\n\n</p><p>However, is this right? Surely a URL should always be fetched,\nregardless of whether or not you are in the same filesystem domain,\nsince URLs don't appear in the filesystem anyway?\n\n</p><p>(2) Given a unimplemented URL scheme (like \"https\"), I found a\ndifference between my test personal condor node and my production condor\nnode. The former would leave the job idle because of a classAd matching\ncondition which was never true:\n\n</p><p></p><pre>    1   ( TARGET.HasFileTransfer &amp;&amp;\nstringListMember(\"https\",HasFileTransferPluginMethods) )\n</pre>\n\n<p>but the latter puts the job into a \"held\" (H) state, saying\n\n</p><p>Hold reason: Error from slot1@dar2.example.net: STARTER at 192.168.6.42\nfailed to receive file /var/lib/condor/execute/dir_24716/xxxx.xxxx:\nFILETRANSFER:1:FILETRANSFER: plugin for type https not found!\n\n</p><p>(Aside: if a plugin for https is not present, wouldn't it be better to\nabort the job rather than put it into a 'held' state indefinitely, as\nthis isn't a condition which is likely to fix itself?)\n\n</p><p>Anyway, I managed to drill down to find the difference, and it turns out\nto be different behaviour depending on whether you set\n\n</p><p></p><pre>    should_transfer_files = if_needed\n</pre>\n\n<p>or\n\n</p><p></p><pre>    should_transfer_files = yes\n</pre>\n\n<p>I cannot find this behaviour documented anywhere. Looking at\n\n</p><p><a class=\"external\" href=\"http://research.cs.wisc.edu/htcondor/manual/current/2_5Submitting_Job.html#SECTION00354000000000000000\">http://research.cs.wisc.edu/htcondor/manual/current/2_5Submitting_Job.html#SECTION00354000000000000000</a>\n\n</p><p>it says the default value is \"should_transfer_files = if_needed\" and\nthis will enable the file transfer mechanism if the machines are in\ndifferent filesystem domains. This implies to me that if the machines\nare in different filesystem domains this should behave the same as\n\"should_transfer_files = yes\", but actually the generated requirements\nexpressions are different in these two cases.\n\n</p><p>You can reproduce it with the following test case:\n\n</p><p><code>---- bar.sub ----</code>\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\nexecutable = /bin/sh\narguments = \"-c true\"\ntransfer_executable = no\ntransfer_input_files = https://example.net/\nshould_transfer_files = if_needed\n#should_transfer_files = yes\nerror = bar.err\nrequirements = ( TARGET.Machine == \"nonexistent\" )\nqueue\n</pre></div>\n\n\n<p>Submit with \"condor_submit bar.sub\" then use \"condor_q -analyze &lt;pid&gt;\"\n\n</p><p>[Results with should_transfer_files = if_needed]\n\n</p><p>The Requirements expression for your job is:\n\n</p><p></p><pre>    ( ( TARGET.Machine == \"nonexistent\" ) ) &amp;&amp; ( TARGET.Arch == \"X86_64\" ) &amp;&amp;\n    ( TARGET.OpSys == \"LINUX\" ) &amp;&amp; ( TARGET.Disk &gt;= RequestDisk ) &amp;&amp;\n    ( TARGET.Memory &gt;= RequestMemory ) &amp;&amp; ( ( TARGET.HasFileTransfer ) ||\n      ( TARGET.FileSystemDomain == MY.FileSystemDomain ) )\n</pre>\n\n<p>[Results with should_transfer_files = yes]\n\n</p><p>The Requirements expression for your job is:\n\n</p><p></p><pre>    ( ( TARGET.Machine == \"nonexistent\" ) ) &amp;&amp; ( TARGET.Arch == \"X86_64\" ) &amp;&amp;\n    ( TARGET.OpSys == \"LINUX\" ) &amp;&amp; ( TARGET.Disk &gt;= RequestDisk ) &amp;&amp;\n    ( TARGET.Memory &gt;= RequestMemory ) &amp;&amp; ( TARGET.HasFileTransfer &amp;&amp;\n      stringListMember(\"https\",HasFileTransferPluginMethods) )\n</pre>\n\n<p>This to me also seems like a bug, as I was expecting\nshould_transfer_files = (yes|if_needed) to behave the same when the\nnodes are in different filesystem domains. But if it's not, I think it\nshould be documented accordingly.\n\n</p><p>To me the correct behaviour would be something like this:\n\n</p><p></p><ul>\n<li>if any input or output file is a URL, then add\n<code>stringListMember(\"&lt;scheme&gt;\",HasFileTransferPluginMethods)</code> to the\nrequirements\n\n<p></p></li><li>if should_transfer_files = yes, then add <code>( TARGET.HasFileTransfer )</code>\n\n<p></p></li><li>if should_transfer_files = if_needed, then add\n<code>( ( TARGET.HasFileTransfer ) ||\n      ( TARGET.FileSystemDomain</code> == <code>MY.FileSystemDomain ) )</code></li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2017-Aug-01 11:20:21 by tlmiller:</em> <br/>\n\nThis just recently affected on of our CHTC users, as well.\n\n<p></p><hr/>\n<em>2018-Apr-13 16:53:32 by coatsworth:</em> <br/>\n\n<strong>CODE REVIEW</strong>\n\n<p>Everything looks good. Semantics are all fine. Code logic looks fine, it's possible to trick it by declaring a TARGET.HasFileTransfer requirement and then not provide an accurate list of plugin methods. However this is by design, since if users want to declare this requirement then we trust them to provide a good list. Docs are in. Marking as resolved.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-20 09:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54535\">[54535]</a></span>: fix for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4692\" onclick=\"get_ticket_and_populate_wrapper('4692'); return false;\" title=\"URL transfer plugin and should_transfer_files broken if input URL only\">#4692</a></span>, condor_submit (and submit utils) did not add file transfer plugins to the Requirements expression when should_tranfer_files was set to IF_NEEDED (which is the default)  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2018-Apr-23 14:41", "status": "resolved", "created": "2014-Nov-03 09:42", "fixed_version": "2014-Nov-03 09:42", "broken_version": "v080200", "priority": "2", "subsystem": "FileTransfer", "assigned_to": "johnkn", "derived_from": "", "creator": "zmiller", "rust": "", "customer_group": "users", "visibility": "public", "notify": "", "due_date": ""}