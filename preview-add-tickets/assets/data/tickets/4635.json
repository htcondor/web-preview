{"id": 4635, "title": "Ticket #4635: The CMS IPv6 Requirements and Problems", "description": "<blockquote>\nTodd Miller and Alan De Smet discussed CERN's coming IPv4 purge.\n\n<p><span class=\"section\"></span></p><h2>CMS/CERN limitations</h2>\n\n<p>CMS will run a single glide-in pool including external worker nodes and CMS's own internal worker nodes.  All execute nodes will be glided-in; no nodes will report directly.  CMS will run two collector machines at CERN in a HAD configuration. Each collector machine hosts a collector tree for scaling reasons.  The collector machines will have globally routable IPv4 and IPv6 addresses.  CERN's firewall will allow both inbound and outbound connections to port 9618 for the collector machines.  These nodes will use shared_port.\n\n</p><p>CMS's schedds at CERN will have globally routable IPv4 and IPv6 addresses.  CERN's firewall will allow both inbound and outbound connections to port 9618 for the collector machines.  These nodes will use shared_port.\n\n</p><p>CERN's internal worker nodes will have a CERN-routable IPv4 address with no external connectivity, and a public, globally-routable IPv6 address.  The firewall will allow outbound connections for the startds.  Inbound connections will be blocked; CCB can be used to traverse this firewall.\n\n</p><p>There may be schedd nodes external to CERN. They <em>must</em> be dual-protocol with globally routable IPv4 and IPv6 addresses.  A single protocol schedd is not welcome.\n\n</p><p>There may be glided-in startds external to CERN. They may have an IPv4 address, an IPv6 address, or both.\n\n</p><p>GlideinWMS does <strong>not</strong> have the ability to detect IP (v4 or v6) addresses and change the configuration file accordingly.  Hence, we need the same config to work for the whole site - worker nodes may have:\n</p><ul>\n<li>Local IPv6, global IPv4\n</li><li>Global IPv6, local IPv4\n</li><li>No IPv6, global IPv4\nWe believe that, in all cases, the worker nodes will have an IPv4 address.  It just might not be globally routable.\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Goals </h2>\n\n<p>All schedds (CERN internal and external) should be able to run jobs on all startds (CERN internal and external).  We're relying on schedds all being dual-protocol, and thus able to connect to a single-protocol startd.\n\n</p><p><strong>CERN internal schedd to CERN internal startd:</strong> Should Just Work, using globally routeable IPv6 addresses at all steps.\n\n</p><p><strong>CERN internal schedd to external startd:</strong> Should Just Work, using globally routeable IPv4 or IPv6 addresses at all steps, whichever protocol the startd supports.\n\n</p><p><strong>CERN external schedd to internal startd:</strong> Works with CCB, using globally routeable IPv6 addresses at all steps.  CCB will allow the schedd to make connections to the firewalled startd.\n\n</p><p><strong>CERN external schedd to external startd:</strong> Should Just Work, using globally routeable IPv4 or IPv6 addresses at all steps, whichever protocol the startd supports.\n\n</p><p><span class=\"section\"></span></p><h2>Potential problems / Work to be done</h2>\n\n<p>An external submit node with a globally-routable IPv6 address would run jobs on a CERN worker node in the following manner.  This is the most complicated connection, as it requires CCB.\nSub-bullets indicate potential problems.\n\n</p><p></p><ol>\n<li>The worker node registers at its CCB using IPv6.  We propose that the worker node chooses to use IPv6 because it knows that its only globally-routable address is IPv6.  (More generally, the worker node sorts its addresses and uses the protocol of the one we rank most highly.)\n<ul>\n<li>How to identify the most highly ranked address? We already try to figure out a best option that we store in local_ipaddr in ipv6_hostname.cpp; that may work. Currently no function directly exposes it.  On the down side, the ultimate goal is to eliminate it.\n</li><li>Does CCB do IPv6 at all?\n</li><li>If the CCB is specified as a hostname, we need to deal with wacky DNS issues. Current code may not be able to code with multiple addresses being returned, may not be able to ever return an IPv6 address, and certainly won't be able to cope with only getting IPv4 addresses when an IPv6 address was desired.\n</li></ul>\n</li><li>The broker (CCB) returns its existing IPv6 port and address.  The worker node includes that in its own Sinful string that is advertised.  (Proposal: the broker (CCB) returns the socket with same protocol as the request.)\n<ul>\n<li>No, really, the broker... quit laughing!\n</li></ul>\n</li><li>The submit node contacts the broker on IPv6.  We don't need to worry about DNS resolution or choosing a protocol, because we only have the one.\n<ul>\n<li>If the schedd is forwarding its own address, make sure it either chooses a protocol-appropriate one or that its choice is rewritten by the existing ConvertDefaultIPToSocketIP function.\n</li></ul>\n</li><li>The broker directs the worker node over their existing IPv6 connection to make an outbound IPv6 connection to the external submit node.\n<ul>\n<li>This really should already work.\n</li></ul>\n</li><li>The submit node sends the worker node three(?) address/port pairs: one for file transfer, one for chirp, and one for the shadow?  All need to be IPv6.  Proposal: more address rewriting.  The existing connection is going to be IPv6.  This should already work once we've gotten mixed-mode flocking working.\n</li></ol>\n\n<p>The collector contains a mixture of IPv4 and IPv6 ads. Because all schedds are dual-protocol, it's okay. No intelligent matchmaking based on protocol is necessary.\n\n</p><p></p><ul>\n<li><span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4494\" onclick=\"get_ticket_and_populate_wrapper('4494'); return false;\" title=\"IPv6: mixed-mode submit node (schedd/shadow)\">#4494</a></span>: IPv6: mixed-mode submit node (schedd/shadow)\n</li><li><span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4715\" onclick=\"get_ticket_and_populate_wrapper('4715'); return false;\" title=\"Security and DNS in mixed-mode IPv4/IPv6\">#4715</a></span> Security\n</li><li><span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4714\" onclick=\"get_ticket_and_populate_wrapper('4714'); return false;\" title=\"Does CCB work in mixed-mode IPv4/IPv6?\">#4714</a></span> CCB\n</li><li><span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4712\" onclick=\"get_ticket_and_populate_wrapper('4712'); return false;\" title=\"Fix shared_port with mixed-mode IPv4/IPv6\">#4712</a></span> Shared port</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2014-Oct-03 08:24:07 by bbockelm:</em> <br/>\n\nMade a few edits to reflect the fact that the main impact is on the CERN worker nodes participating in the CMS global glidein pool..\n\n<p></p><hr/>\n<em>2015-May-28 13:04:32 by tlmiller:</em> <br/>\n\nWe claimed, IIRC, that we'd met CERN's needs in v8.3.2.  Should we resolve this ticket?</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "todo", "last_change": "2015-May-28 16:00", "status": "resolved", "created": "2014-Oct-02 16:39", "fixed_version": "2014-Oct-02 16:39", "broken_version": "", "priority": "4", "subsystem": "Unknown", "assigned_to": "", "derived_from": "#4492", "creator": "tlmiller", "rust": "", "customer_group": "cern", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, adesmet@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}