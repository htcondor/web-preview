{"id": 2294, "title": "Ticket #2294: Schedd crash while asynchronously negotiating or claiming", "description": "<blockquote>\nThese days the schedd does a host of activities related to a job in the queue asynchronously, such as claiming of startds and negotiating with the central manager. So during the process of claiming or negotiating, the schedd will return to daemon core - what happens if the job being processed is removed while these asynch activities are still in progress?  To deal with this possibility, the schedd will typically make a copy of the job classad.  <em>Unfortunately, the classad copy constructor and assignment operator does not do a deep copy of chained classads</em>.  As a result, if the job is removed from the job queue, any copies of the job ad laying about in various objects dealing w/ asynchronous operations now have an invalid pointer to the deleted cluster ad.\n\n<p><span class=\"subsection\"></span></p><h3>Proposed fixes</h3>\n\n<p></p><ol>\n<li>In the v7.6 stable series, invoke <code>ClassAd::ChainCollapse</code> on the copied job ads we stick into these asynch opereation objects. This method copies all the attributes from the chained ad into the ad itself. <strong>DONE</strong>\n</li><li>In the v7.7 developer series, <em>always</em> collapse chained ads into a copy of a job ad (aka in the copy ctor and assignment operator). In other words, make a deep copy of a classad instead of doing a deep copy of most things and a shallow copy of the chained ad. Hopefully this will prevent bugs like the below from being introduced in the future. <strong>SEE DERIVED TICKET(S) BELOW</strong>\n</li><li>Down the road, consider if we ever want to make a copy of job classads in the schedd, or if all of these objects should only have a handle (aka the job id) to the ad. Another idea is take advantage of counted_ptr at either the classad or the qmgmt layers.\n</li></ol>\n\n<p><span class=\"subsection\"></span></p><h3>Reliably reproducing the crashes</h3>\nI was able to reproduce the following core dumps (which we have seen sporadically in the field) at will by patching the negotiator as below to slow down negotiation, setting <code>NEG_SLEEP</code> to 5, submitting some parallel universe jobs, and then removing said jobs while the schedd was negotiating for matches:\n<div class=\"code\">\n<pre class=\"code\">diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp\nindex 5c21a7a..f8fc7d8 100644\n--- a/src/condor_negotiator.V6/matchmaker.cpp\n+++ b/src/condor_negotiator.V6/matchmaker.cpp\n@@ -2940,6 +2940,10 @@ negotiate( char const *scheddName, const ClassAd *scheddAd, double priority, dou\n\n\n                // 2a.  ask for job information\n+               int sleepy = param_integer(\"NEG_SLEEP\", 0);\n+               if ( sleepy ) {\n+               sleep(sleepy); // TODD DEBUG - allow schedd to do other things\n+               }\n                dprintf (D_FULLDEBUG, \"    Sending SEND_JOB_INFO/eom\\n\");\n                sock-&gt;encode();\n                if (!sock-&gt;put(SEND_JOB_INFO) || !sock-&gt;end_of_message())\n</pre></div>\n\n\n<p><span class=\"subsubsection\"></span></p><h4>Crash backtrace during asynch negotiation</h4>\n\n<p>This is one LIGO was seeing multiple times a day, hopefully fixed for v7.6.2 by <span class=\"chng\"><a href=\"chngview?cn=22404\">[22404]</a></span>.\n\n</p><p></p><div class=\"verbatim\">\n<pre>condor_schedd(_Z14_putOldClassAdP6StreamRN7classad7ClassAdEbbP10StringList+0x5bd)[0x697fdd]\ncondor_schedd(_Z13putOldClassAdP6StreamRN7classad7ClassAdEbP10StringList+0x14)[0x6983b4]\ncondor_schedd(_ZN14compat_classad7ClassAd3putER6Stream+0x1b)[0x65a96b]\ncondor_schedd(_ZN15ScheddNegotiate11sendJobInfoEP4Sock+0x93)[0x547d03]\ncondor_schedd(_ZN15ScheddNegotiate15messageReceivedEP11DCMessengerP4Sock+0x1c8)[0x548528]\ncondor_schedd(_ZN5DCMsg19callMessageReceivedEP11DCMessengerP4Sock+0x36)[0x5b82d6]\ncondor_schedd(_ZN11DCMessenger7readMsgE18classy_counted_ptrI5DCMsgEP4Sock+0xe2)[0x5b8482]\ncondor_schedd(_ZN11DCMessenger18receiveMsgCallbackEP6Stream+0xef)[0x5bb7ff]\ncondor_schedd(_ZN10DaemonCore24CallSocketHandler_workerEibP6Stream+0x498)[0x596f58]\ncondor_schedd(_ZN10DaemonCore35CallSocketHandler_worker_demarshallEPv+0x1a)[0x5973fa]\ncondor_schedd(_ZN13CondorThreads8pool_addEPFvPvES0_PiPKc+0x38)[0x657da8]\ncondor_schedd(_ZN10DaemonCore17CallSocketHandlerERib+0x149)[0x58f9b9]\ncondor_schedd(_ZN10DaemonCore6DriverEv+0x1bb5)[0x591c25]\ncondor_schedd(main+0xe57)[0x585527]\n\n\n#0  0x0000003480e7c100 in strcasecmp () from /lib64/libc.so.6\n#1  0x000000000066e914 in _putOldClassAd (sock=0xba1af0, ad=..., excludeTypes=false, exclude_private=false,\n    attr_whitelist=0x0) at /scratch/tannenba/CONDOR_SRC/src/condor_utils/classad_oldnew.cpp:264\n#2  0x000000000066f378 in putOldClassAd (sock=0xba1af0, ad=..., exclude_private=false, attr_whitelist=0x0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_utils/classad_oldnew.cpp:191\n#3  0x000000000064d464 in compat_classad::ClassAd::put (this=0xbbefd0, s=...)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_utils/compat_classad.cpp:1374\n#4  0x000000000051b605 in ScheddNegotiate::sendJobInfo (this=0xbbeeb0, sock=0xba1af0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_schedd.V6/schedd_negotiate.cpp:245\n#5  0x000000000051b7b6 in ScheddNegotiate::messageReceived (this=0xbbeeb0, messenger=0xbc25d0, sock=0xba1af0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_schedd.V6/schedd_negotiate.cpp:282\n#6  0x000000000058a5f6 in DCMsg::callMessageReceived (this=0xbbeeb0, messenger=0xbc25d0, sock=0xba1af0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_client/dc_message.cpp:166\n#7  0x000000000058bbcd in DCMessenger::readMsg (this=0xbc25d0, msg=..., sock=0xba1af0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_client/dc_message.cpp:541\n#8  0x000000000058bd2e in DCMessenger::receiveMsgCallback (this=0xbc25d0, sock=0xba1af0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_client/dc_message.cpp:505\n#9  0x00000000005779b1 in DaemonCore::CallSocketHandler_worker (this=0xb2bc20, i=4,\n    default_to_HandleCommand=true, asock=0x0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core.cpp:3697\n#10 0x0000000000577bf9 in DaemonCore::CallSocketHandler_worker_demarshall (arg=0xbb7660)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core.cpp:3659\n#11 0x00000000006b3ba1 in CondorThreads::pool_add (\n    routine=0x577bc0 &lt;DaemonCore::CallSocketHandler_worker_demarshall(void*)&gt;, arg=0xbb7660, tid=0xb4f0ec,\n    descrip=0xbec3c0 \"\u00d0\u00fe\u00ba\") at /scratch/tannenba/CONDOR_SRC/src/condor_utils/condor_threads.cpp:1109\n#12 0x0000000000568f33 in DaemonCore::CallSocketHandler (this=0xb2bc20, i=@0x7fffffffdd08,\n    default_to_HandleCommand=true)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core.cpp:3647\n#13 0x000000000056a88a in DaemonCore::Driver (this=0xb2bc20)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core.cpp:3531\n#14 0x000000000055f65d in main (argc=1, argv=0x7fffffffe4a8)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core_main.cpp:2377\n</pre></div>\n\n\n<p><span class=\"subsubsection\"></span></p><h4>Crash backtrace during asynch claiming of startds</h4>\n\n<p>This crash (hopefully fixed for v7.6.2 via <span class=\"chng\"><a href=\"chngview?cn=22405\">[22405]</a></span>) will only happen with parallel universe jobs because the dedicated scheduler makes a copy of the classad w/o collapsing in the chained classad, while the regular schedd <em>does</em> collapse the chained ad as part of expanding the <code>$$()</code> macros in the job ad.  Shouldn't the dedicated scheduled be expanding <code>$$()</code> macros as well before claiming?\n\n</p><p></p><div class=\"verbatim\">\n<pre>#0  0x0000003480e7c100 in strcasecmp () from /lib64/libc.so.6\n#1  0x000000000066e2f4 in _putOldClassAd (sock=0xba7b80, ad=...,\nexcludeTypes=false, exclude_private=false, attr_whitelist=0x0) at\n/scratch/tannenba/CONDOR_SRC/src/condor_utils/classad_oldnew.cpp:264\n#2  0x000000000066ed58 in putOldClassAd (sock=0xba7b80, ad=..., exclude_private=false, attr_whitelist=0x0) at\n/scratch/tannenba/CONDOR_SRC/src/condor_utils/classad_oldnew.cpp:191\n#3  0x000000000064ce44 in compat_classad::ClassAd::put (this=0xb793e0,\ns=...)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_utils/compat_classad.cpp:1374\n#4  0x000000000059e4ba in ClaimStartdMsg::writeMsg (this=0xb792f0,\nsock=0xba7b80)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_client/dc_startd.cpp:102\n#5  0x000000000058bb09 in DCMessenger::writeMsg (this=0xb7c840, msg=...,\nsock=0xba7b80)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_client/dc_message.cpp:433\n#6  0x000000000058c015 in DCMessenger::connectCallback (success=true, sock=0xba7b80, misc_data=0xb7c840)\n  at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_client/dc_message.cpp:409\n#7  0x00000000005aaa79 in SecManStartCommand::doCallback(._150)\n(this=0xbcc3d0, result=StartCommandSucceeded)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_io/condor_secman.cpp:1114\n#8  0x00000000005aec86 in SecManStartCommand::SocketCallback (this=0xbcc3d0,\nstream=0xba7b80)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_io/condor_secman.cpp:2330\n#9  0x0000000000577391 in DaemonCore::CallSocketHandler_worker\n(this=0xb26c20, i=4,\n    default_to_HandleCommand=true, asock=0x0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V /daemon_core.cpp:3697\n#10 0x00000000005775d9 in DaemonCore::CallSocketHandler_worker_demarshall\n(arg=0xbb0cf0)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core.cpp:3659\n#11 0x00000000006b3541 in CondorThreads::pool_add (\n    routine=0x5775a0 &lt;DaemonCore::CallSocketHandler_worker_demarshall(void*)&gt;, arg=0xbb0cf0,tid=0xb4a0ec,    descrip=0xba7e50 \"\\023\") at\n/scratch/tannenba/CONDOR_SRC/src/condor_utils/condor_threads.cpp:1109\n#12 0x0000000000568913 in DaemonCore::CallSocketHandler (this=0xb26c20,i=@0x7fffffffdd08,\n    default_to_HandleCommand=true)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core.cpp:3647\n#13 0x000000000056a26a in DaemonCore::Driver (this=0xb26c20)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core.cpp:3531\n#14 0x000000000055f03d in main (argc=1, argv=0x7fffffffe4a8)\n    at /scratch/tannenba/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core_main.cpp: 2377\n\n(gdb) frame 1\n#1  0x000000000066e2f4 in _putOldClassAd (sock=0xba7b80, ad=...,\nexcludeTypes=false, exclude_private=false,\n    attr_whitelist=0x0) at /scratch/tannenba/CONDOR_SRC/src/condor_utils/classad_oldnew.cpp:264\n264                             if ( strcasecmp( ATTR_CURRENT_TIME,\n\nattr.c_str() ) == 0 ) {\n(gdb) frame 1\n#1  0x000000000066e2f4 in _putOldClassAd (sock=0xba7b80, ad=...,\n\nexcludeTypes=false, exclude_private=false,\n    attr_whitelist=0x0) at\n\n/scratch/tannenba/CONDOR_SRC/src/condor_utils/classad_oldnew.cpp:264\n264                             if ( strcasecmp( ATTR_CURRENT_TIME,\n\nattr.c_str() ) == 0 ) {\n(gdb) p pass\n$3 = 0\n(gdb) p haveChainedAd\n$4 = true\n(gdb)\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2011-Jul-11 15:01:55 by tannenba:</em> <br/>\n\nReader of this ticket may find <span class=\"ticket\"><a class=\"defer\" href=\"tktview?tn=2253\" title=\"Schedd crash if parallel job disappears during negotiation\">#2253</a></span> of interest as well, which fixes another parallel universe race condition that can crash the schedd.\n\n<p></p><hr/>\n<em>2011-Jul-12 15:34:32 by jfrey:</em> <br/>\n\nCheckins <span class=\"chng\"><a href=\"chngview?cn=22404\">[22404]</a></span> and <span class=\"chng\"><a href=\"chngview?cn=22405\">[22405]</a></span> look good to me. They should address the problem.\n\n<p></p><hr/>\n<em>2011-Jul-25 12:12:42 by tstclair:</em> <br/>\n\nAny thought to carrying the test code in mainline to potentially debug potential race conditions with async negotiations?\n\n<p></p><hr/>\n<em>2011-Jul-25 12:49:37 by matt:</em> <br/>\n\n+1 to including test only params to enhance reproducibility of this bug</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"tktview?tn=2341\" title=\"Copying a classad in schedd should collapse chained ads\">#2341</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nCopying a classad in schedd should collapse chained ads</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jul-27 10:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=22597\">[22597]</a></span>: Ticket <span class=\"ticket\"><a class=\"defer\" href=\"tktview?tn=2294\" title=\"Schedd crash while asynchronously negotiating or claiming\">#2294</a></span> Add testing code to mainline to allow for independent verification of async negotiation issues. OK'd by jfrey.  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jul-11 19:24</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=22405\">[22405]</a></span>: Fix schedd crash that can happen when a parallel universe job leaves the queue while the schedd is busy claiming startds on behalf of that job. <span class=\"ticket\"><a class=\"defer\" href=\"tktview?tn=2294\" title=\"Schedd crash while asynchronously negotiating or claiming\">#2294</a></span> Note the version history gloss in <span class=\"chng\"><a href=\"chngview?cn=22224\">[22224]</a></span> works for this commit as well.  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jul-11 19:12</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=22404\">[22404]</a></span>: Prevent schedd from coredumping if a job is removed while it is being negotiated. ===GT:Fixed=== <span class=\"ticket\"><a class=\"defer\" href=\"tktview?tn=2294\" title=\"Schedd crash while asynchronously negotiating or claiming\">#2294</a></span> ===VersionHistory=== Fixed schedd from crashing if a job is removed precisely when the schedd is attempting to negotiate with the central manager for resources for that job. This crash is likely a very\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2011-Aug-01 14:42", "status": "defer", "created": "2011-Jul-11 15:01", "fixed_version": "2011-Jul-11 15:01", "broken_version": "v070600", "priority": "5", "subsystem": "Daemons", "assigned_to": "tannenba", "derived_from": "", "creator": "tannenba", "rust": "a22276", "customer_group": "ligo", "visibility": "public", "notify": "tstclair@redhat.com, matt@cs.wisc.edu, eje@cs.wisc.edu, jfrey@cs.wisc.edu, tannenba@cs.wisc.edu,pcouvare@caltech.edu", "due_date": ""}