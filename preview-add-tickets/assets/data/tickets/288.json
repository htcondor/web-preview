{"id": 288, "title": "Ticket #288: Port collision not noticed by condor daemons in windows", "description": "<blockquote>\nUnder windows, two collectors are able to bind to 9618 at the same time (no errors reported), but only one of them receives anything on that port.  Ben is able to reproduce this in a simple standalone test program.  If he turns on SO_REUSEADDR, two programs can bind to the same port (in windows).  Without SO_REUSEADDR, they cannot bind.</blockquote>", "remarks": "<blockquote>\n<em>2009-Feb-28 15:57:56 by burnett:</em> <br/>\n\nIt seems that this may be a DNS problem (or how we seem to break whilst using it):\n\n<p></p><pre>  02/27 23:14:02 Looking for matching Collector on 'nmi-0226.batlab.cs.wisc.edu'...\n  02/27 23:14:02 Found 'nmi-0226.cs.wisc.edu:0'\n</pre>\n\n<p>Somehow, in this instance, on Windows, the master decides it is called nmi-0226.batlab.cs.wisc.edu but when it goes looking for a collector by the same name, the only one it finds is nmi-0226.cs.wisc.edu.  You'll of course note the missing batman reference in the second host name.\n\n</p><p></p><hr/>\n<em>2009-Feb-28 16:06:34 by burnett:</em> <br/>\n\nThis, of course, does not excuse the horribly broken Windows implementation of the SO_REUSEADDR socket option. Contrary to popular belief, it does not mean it is ok to re-bind to the socket if a connection is broken, instead of waiting for a time-out; it means bind as times as you like to this socket so long as you set the SO_REUSEADDR options.\n\n<p></p><hr/>\n<em>2009-Mar-03 12:00:49 by burnett:</em> <br/>\n\nThe behavior exhibited on *nix machines cannot be duplicated on Windows.  We expect to be able to re-bind to an address, if for some reason we crash.  Windows provides another option SO_EXCLUSIVEADDRUSE, but it stops any re-binding until the original socket has been closed.  And even then, the address is not guaranteed to be accessible.\n\n<p>From MSDN:\n\n</p><p>\"In the case where the first bind sets no options or SO_REUSEADDR, and the second bind performs a SO_REUSEADDR, the second socket has overtaken the port and behavior regarding which socket will receive packets is undetermined. SO_EXCLUSIVEADDRUSE was introduced to address this situation.\"\n\n</p><p>...\n\n</p><p>\"A socket with SO_EXCLUSIVEADDRUSE set cannot always be reused immediately after socket closure. For example, if a listening socket with the exclusive flag set accepts a connection after which the listening socket is closed, another socket cannot bind to the same port as the first listening socket with the exclusive flag until the accepted connection is no longer active.\n\n</p><p>This situation can be quite complicated; even though the socket has been closed, the underlying transport may not terminate its connection. Even after the socket is closed, the system must send all of the buffered data, transmit a graceful disconnect to the peer, and wait for a graceful disconnect from the peer. It is therefore possible that the underlying transport may never release the connection, such as when the peer advertises a zero-size window, or other such attacks. In the previous example, the listening socket was closed after a client connection was accepted. Now even if the client connection is closed, the port still may not be reused if the client connection remains in an active state because of unacknowledged data, and so forth.\"\n\n</p><p></p><hr/>\n<em>2009-Mar-03 12:29:13 by danb:</em> <br/>\n\nIf I understand correctly, it sounds to me like SO_EXCLUSIVEADDRUSE has the semantics that we want.  We only need to be able to rebind to the socket after stopping and restarting the collector (or other daemon), so the socket should have always been closed by the time we want to rebind.\n\n<p>So the behavior we want is:\n\n</p><p>1. restart of the condor daemon can reuse the same port number immediately without any timeout between last use and next use\n\n</p><p>2. while we are bound to the port, nobody else should be able to bind to it\n\n</p><p>--Dan\n\n</p><p></p><hr/>\n<em>2009-Mar-03 13:10:07 by burnett:</em> <br/>\n\nI think the problem is that since we won't actually be closing the port explicitly, we may not be able to bind to it again.  We may need to wait until some time-out period has passed.\n\n<p></p><hr/>\n<em>2009-Mar-05 11:30:48 by burnett:</em> <br/>\n\nLooks as if, in practice, the Collector will come back up immediately after a crash, despite the warnings put forth by the MSDN documetation.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=289\" onclick=\"get_ticket_and_populate_wrapper('289'); return false;\" title=\"my_full_hostname() and Daemon::fullHostname() disagree on hostnames.\">#289</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nmy_full_hostname() and Daemon::fullHostname() disagree on hostnames.</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Mar-05 11:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14134\">[14134]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=288\" onclick=\"get_ticket_and_populate_wrapper('288'); return false;\" title=\"Port collision not noticed by condor daemons in windows\">#288</a></span>. On Windows, the SO_REUSEADDR socket option was replaced with SO_EXCLUSIVEADDRUSE so that Windows more closly mimics the behaviour of SO_REUSEADDR on *inx sockets. Please refer to the ticket for further details.  (By Ben Burnett )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Jan-31 08:39", "status": "resolved", "created": "2009-Feb-27 16:14", "fixed_version": "2009-Feb-27 16:14", "broken_version": "v070200", "priority": "4", "subsystem": "Win32", "assigned_to": "burnett", "derived_from": "", "creator": "burnett", "rust": "", "customer_group": "other", "visibility": "public", "notify": "dan@hep.wisc.edu,matt@cs.wisc.edu", "due_date": ""}