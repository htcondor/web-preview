{"id": 7724, "title": "Ticket #7724: condor_config_val should be able to validate the configuration", "description": "<blockquote>\n<strong>condor_config_val</strong> and <strong>condor_reconfig</strong> should be enhanced so that they can validate all of the configuration variables as well as verifying that the config files will all load and parse.\n\n<p><span class=\"subsection\"></span></p><h3>Motivation </h3>\nWhen an admin changes the config files, and then runs <strong>condor_reconfig</strong>, there is a possibility that the daemon being reconfiged will abort because the new\nconfiguration is invalid.\n\n<p>If the config files themselves do not parse, then <strong>condor_reconfig</strong> will detect this and it report the error with filename and line number, and the\nreconfig command will never be sent.  But then the problem is the contents of configuration variable, condor_config_val will not see the error.\n\n</p><p>The most common reason for this is that some configuration variables can be classad expressions, and if the expression does not parse, this is\nonly detected at the time the daemon tries to fetch the configuration variable.  In some cases, the daemon will then abort.\n\n</p><p>It would be useful if there was a way to validate that all of the keys in the configuration files that have classad expressions have valid classad expressions.\n\n</p><p>In order to do this, it must be known which of the keys are expected to parse as classad expressions.  Since nearly all keys are listed in the param table\nand the param table has information about what type of data the key should hold, we can use this information to figure out which keys to check for validity.\n\n</p><p>Since we have never tried to use the param table in this way before, it is likely that some of the information there is incomplete or inaccurate, so it\nwill have to be verified and brought up to date.  It may also be necessary to enhance the type information there.\n\n</p><p>Configuration keys that are based on a pattern rather than having a fixed name do not currently live in the param table, so we will have to come up with a scheme\nfor adding these key patterns.  (This would be useful for other reasons)\n\n</p><p>Once the param table has the necessary information.  It would be a simple matter to have condor_config_val and condor_reconfig check the validity of all keys in\nthe config.\n\n</p><p><span class=\"subsection\"></span></p><h3>Tasks </h3>\n<ol>\n<li>Write code to walk the configuration and parse as classad expression all keys that are known to be expressions.\n</li><li>Hook that code up to <strong>condor_config_val -validate</strong>, and <strong>condor_reconfig</strong>\n</li><li>Enhance the param table to indicate which keys are or may be expressions\n</li><li>Enhance the param table so that we can express key patterns for keys that do not have fixed names such as <code>SUBMIT_REQUIREMENT_&lt;TAG&gt;</code></li></ol>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2020-Jul-02 11:22", "status": "new", "created": "2020-Jul-02 10:42", "fixed_version": "2020-Jul-02 10:42", "broken_version": "", "priority": "2", "subsystem": "Tools", "assigned_to": "johnkn", "derived_from": "", "creator": "johnkn", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}