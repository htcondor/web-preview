{"id": 3248, "title": "Ticket #3248: Expose 64-bit integers and doubles in ClassAd compatibility layer", "description": "<blockquote>\n<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> support 64-bit integers and doubles. The compatibility layer (which mimics the old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> API) mostly exposes 32-bit values only. We should expand the compatibility API to expose the 64-bit values.</blockquote>", "remarks": "<blockquote>\n<em>2012-Oct-09 09:44:34 by johnkn:</em> <br/>\n\nThese changes look good.  We still need to verify that longlong's and doubles are passed on the wire without truncation and without breaking backward compatability.\n\n<p></p><hr/>\n<em>2012-Nov-12 17:41:39 by jfrey:</em> <br/>\n\n64-bit integers are now printed in full whenever an ad is unparsed. This includes when sent over the wire and when printed by condor_q -long or condor_status -long. When parsed by an older version of Condor, values too large for 32 bits are capped at INT_MAX and INT_MIN.\n\n<p>Reals are unparsed as before, with printf format %f. Native new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> format unparses reals using printf format %1.15E. Changing this should wait for a future release. It requires some testing, and changing the output of the -long options should be thought about some more.\n\n</p><p></p><hr/>\n<em>2012-Dec-06 09:46:32 by jfrey:</em> <br/>\n\nPreserving 64-bit values on the wire will have to wait for another version.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3363\" title=\"Preserve 64-bit ClassAd values between processes\">#3363</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nPreserve 64-bit <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> values between processes</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-05 11:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=33596\">[33596]</a></span>: Expose 64-bit data types in compat <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> layer. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3248\" title=\"Expose 64-bit integers and doubles in ClassAd compatibility layer\">#3248</a></span> The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> library supports 64-bit integers and doubles. Now, we want to make those full values available through the compatibility layer. We're adding new methods to compat_classad::ClassAd for inserting and looking up 64-bit values. Callers\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-05 11:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=33597\">[33597]</a></span>: Fix arg handling in EvalInteger() and EvalFloat() in compat <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3248\" title=\"Expose 64-bit integers and doubles in ClassAd compatibility layer\">#3248</a></span> Some callers to EvalInteger() and EvalFloat() assume the value argument will be untouched if the method returns failure. Ensure that's true and add it to the function descriptions.  (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2012-Dec-06 09:52", "status": "resolved", "created": "2012-Oct-02 17:32", "fixed_version": "2012-Oct-02 17:32", "broken_version": "v070900", "priority": "4", "subsystem": "Libs", "assigned_to": "jfrey", "derived_from": "#2472", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "eje@cs.wisc.edu tstclair@redhat.com", "due_date": ""}