{"id": 837, "title": "Ticket #837: condor_startd is sleep()y", "description": "<blockquote>\nResMgr.cpp:\n<div class=\"verbatim\">\n<pre>      // Set the hibernation state, shutdown the machine's slot\n       // and hibernate the machine. We turn off the local slots\n       // so the StartD will remove any jobs that are currently\n       // running as well as stop accepting new ones, since--on\n       // Windows anyway--there is the possibility that a job\n       // may be matched to this machine between the time it\n       // is told hibernate and the time it actually does.\n      //\n       // Setting the state here also ensures the Green Computing\n       // plug-in will know the this ad belongs to it when the\n       // Collector invalidates it.\n       //\n      if ( disableResources( target ) ) {\n         m_hibernation_manager-&gt;switchToTargetState( );\n      }\n#     if !defined( WIN32 )\n      sleep(10);\n        m_hibernation_manager-&gt;setTargetState ( HibernatorBase::NONE );\n        for ( int i = 0; i &lt; nresources; ++i ) {\n            resources[i]-&gt;enable();\n            resources[i]-&gt;update();\n         m_hibernating = false;\n       }\n\n#     endif\n</pre></div>\n\n\n<p>Starter.cpp:\n</p><div class=\"verbatim\">\n<pre>#if defined(OSF1) || defined(Darwin) || defined(CONDOR_FREEBSD)\n            // dux 4.0 doesn't have ENOLINK for stat().  It does\n            // have ESTALE, which means our binaries live on a\n            // stale NFS mount.  So, we can at least EXCEPT with a\n            // more specific error message.\n      case ESTALE:\n         EXCEPT( \"Condor binaries are on a stale NFS mount.  Aborting.\" );\n         break;\n#else\n      case ENOLINK:\n         dprintf( D_ALWAYS,\n                \"Can't stat binary (%s), file server probably down.\\n\",\n                s_path );\n         if( first_time ) {\n            dprintf( D_ALWAYS,\n                   \"Will retry every 15 seconds until server is back up.\\n\" );\n            first_time = FALSE;\n         }\n         sleep(15);\n         break;\n#endif\n</pre></div>\n\n\n<p>How do we justify the sleeping?</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "todo", "last_change": "2009-Dec-26 10:11", "status": "new", "created": "2009-Oct-12 13:50", "fixed_version": "2009-Oct-12 13:50", "broken_version": "", "priority": "3", "subsystem": "Daemons", "assigned_to": "matt", "derived_from": "", "creator": "matt", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu", "due_date": ""}