{"id": 6663, "title": "Ticket #6663: condor_vacate_job -fast leaves starters stuck in Preempting/Vacating", "description": "<blockquote>\n<strong>condor_vacate_job -fast</strong> leaves the corresponding starters stuck in 'Preempting/Vacating'.\n\n<p></p><ol>\n<li><strong>condor_vacate_job</strong> issues an ACT_ON_JOBS command to the schedd.\n</li><li>The schedd (correctly) sends a SIGQUIT to the shadow.\n</li><li>Daemon core catches the signal and calls <code>main_shutdown_fast()</code>,\n</li><li>which calls <code>Shadow-&gt;shutDown( JOB_NOT_CKPTED )</code>,\n</li><li>which calls <code>evictJob( JOB_NOT_CKPTED )</code>,\n</li><li>which calls <code>cleanUp( jobWantsGracefulRemoval() )</code> and then <code>DC_Exit()</code> without re-entering the event loop.\n</li><li>The starter tries to tell the shadow that it, as instructed by <code>cleanUp()</code>, evicted the job.  It can't (the shadow has already exited), causing it ignore the startd's subsequent SIGTERM, as it's waiting for its job lease to expire.\n</li></ol>\n\n<p><code>jobWantsGracefulRemoval()</code> returns true by default (and unless it's otherwise configured or the job specifically says not to).\n\n</p><p>So one problem is that the shadow doesn't hang around for the starter.  It seems like the shadow should either always wait for the starter to call it back or that the starter to stop calling it; the former is much easier.  (When the schedd really is trying to shut down quickly, e.g. for an upgrade, and it wants to preserve jobs, it just SIGKILLs the starters.)\n\n</p><p>The other problem is that the shadow asks the starter to shut down gracefully when it itself is shutting down quickly.  I was worried that correcting this would be a semantic change, but the <strong>condor_vacate_job</strong> man page says that <strong>-fast</strong> means a hard kill: \"If  the  -fast  option  is used, the job(s) will be immediately killed, meaning that standard universe jobs will not be allowed to checkpoint, and  the  job  will have to revert to the last checkpoint or start over from the beginning.\"\n\n</p><p>So the fix ought to be to (a) wait for the starter to finish shutting down and (b) tell it to shut down the correct way (fast), which has the nice effect of making the wait for (a) shorter.</p></blockquote>", "remarks": "<blockquote>\n<em>2018-May-01 14:01:03 by tlmiller:</em> <br/>\n\nIn baseshadow.cpp, in BaseShadow::terminateJob(), around line 618, is a call to cleanUp().  This looks like the three other functions I modified in this patch (BaseShadow::HoldJobAndExit(), BaseShadow::removeJobPre(), and BaseShadow::evictJob()) to wait for the starter to exit, but it's presently unclear to me if this make sense given the possibility of recycling the shadow instead of exiting.  It may suffice to set a timer which knows about recycling vs. calling DC_Exit(); it may be that terminateJob(), despite calling cleanUp(), will never actually ask the startd/starter to do anything because it should only be called when the starter has already sent us the job_exit RPC (and exited), and we also therefore have nothing to wait for.\n\n<p></p><hr/>\n<em>2018-May-02 10:59:44 by tlmiller:</em> <br/>\n\nSo <strong>holdJobAndExit()</strong> actually really does need to exit immediately to function properly.  The tests pass after reverting that change, but now I'm worried about all of the calls to <strong>exitAfterEvictingJob()</strong> other than the one in <strong>evictJob()</strong>....\n\n<p>[Regarding the test results for workspace builds 439657 and 439702.]\n\n</p><p></p><hr/>\n<em>2018-May-02 11:14:22 by tlmiller:</em> <br/>\n\nAssigned to Jaime for code review because I'm worried about the semantic implications of the changes.  I'm sure that the <strong>evictJob()</strong> changes are OK, since that what I was working on, but I'm not sure what to to in <strong>terminateJob()</strong> and despite <strong>holdJobAndExit()</strong> looking a lot like <strong>evictJob()</strong>, duplicating the change there proved to be a mistake.\n\n<p>Do we think this would need a release note?\n\n</p><p></p><hr/>\n<em>2018-May-10 11:59:58 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p></p><ul>\n<li>If the starter sends a job_exit rpc after a delayed exit, the exit reason from the starter is used instead of the one from the delayed exit.\n\n<p></p></li><li>If the starter closes the connection without sending a job_exit rpc after a delayed exit, the shadow waits around for 20 seconds. I saw this happen when a periodic hold triggered during input file transfer.\n\n<p></p></li><li>If the starter sends a job_exit rpc after a delayed exit, the full cleanup code in evictJob() is run, even though cleanup code was run before. I saw a case where two evict events were logged.\n</li></ul>\n\n<p>I will commit code to fix these issues.\n\n</p><p></p><hr/>\n<em>2018-May-10 13:23:40 by tlmiller:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>Changes look good and are simple, but raise the issue of if we should just use <strong>remRes-&gt;setExitReason()</strong> instead of introducing delayedExitReason.  I'll think about this some more after HTCondor Week.\n\n</p><p></p><hr/>\n<em>2018-May-18 13:27:16 by tlmiller:</em> <br/>\n\nSee also <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6664\" onclick=\"get_ticket_and_populate_wrapper('6664'); return false;\" title=\"condor_drain -start ... broken?\">#6664</a></span>.\n\n<p></p><hr/>\n<em>2018-Jun-03 16:29:05 by tlmiller:</em> <br/>\n\nFurther thoughts:\n\n<p></p><ul>\n<li>It seems proper for the shadow to have its own idea of the exit reason, independent of the remote resource.  In the previous code, this was embedded in the code path and not explicitly part of the state.\n</li><li>On the other hand, it appears that <strong>remRes</strong> has lifetime identical to that of the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=UniShadow\" title=\"Uni Shadow\">UniShadow</a></span> object (and that the checks for it being NULL are only defensive programming), so it should at least be safe to store the reason there.\n</li><li>remRes-&gt;setExitReason()* has side effects we may not want.  This could be coded around, but that seems sketchy.\n</li></ul>\n\n<p>Over-all, I'm not convinced a change is warranted.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jun-03 16:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55004\">[55004]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6663\" onclick=\"get_ticket_and_populate_wrapper('6663'); return false;\" title=\"condor_vacate_job -fast leaves starters stuck in Preempting/Vacating\">#6663</a></span>) Release note.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-May-10 12:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54905\">[54905]</a></span>: Fix some issues with shadow's delayed exit on eviction. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6663\" onclick=\"get_ticket_and_populate_wrapper('6663'); return false;\" title=\"condor_vacate_job -fast leaves starters stuck in Preempting/Vacating\">#6663</a></span> Don't run eviction cleanup code after a delayed exit. Don't delay exit if there's no connection to the starter. After a delayed exit, ignore the starter's exit reason.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-May-02 11:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54819\">[54819]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6663\" onclick=\"get_ticket_and_populate_wrapper('6663'); return false;\" title=\"condor_vacate_job -fast leaves starters stuck in Preempting/Vacating\">#6663</a></span>) The shadow doesn't exit correctly if it reenters the event loop after calling holdJobAndExit(), so don't.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-May-01 14:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54818\">[54818]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6663\" onclick=\"get_ticket_and_populate_wrapper('6663'); return false;\" title=\"condor_vacate_job -fast leaves starters stuck in Preempting/Vacating\">#6663</a></span>) When we would otherwise exit after calling cleanUp(), if the starter hasn't sent us the job_exit syscall, wait no more than twenty seconds for it to do so. Don't do this for terminateJob() (yet?), because that recycles the shadow and makes the protocol change not obviously correct.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-May-01 11:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54816\">[54816]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6663\" onclick=\"get_ticket_and_populate_wrapper('6663'); return false;\" title=\"condor_vacate_job -fast leaves starters stuck in Preempting/Vacating\">#6663</a></span>) If the shadow is shutting down fast, so should the starter.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2018-Jun-03 16:52", "status": "resolved", "created": "2018-Apr-26 16:47", "fixed_version": "2018-Apr-26 16:47", "broken_version": "", "priority": "2", "subsystem": "DaemonsSubmitNode", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, johnkn@cs.wisc.edu, jfrey@cs.wisc.edu", "due_date": ""}