{"id": 1106, "title": "Ticket #1106: 7.4.1 startd segfaults on Suse 10.0", "description": "<blockquote>\nThe condor_startd is segfaulting on nmi-0062, platform x86_suse_10.0.  It ran fine since the Nov 11 upgrade to 7.4.1, then did not start after the Jan 9-10 downtime.  Hawkeye is not to blame as in the ia64_sles_8 startd issue. There is a core file on nmi-0062, /home/condor/log/core.no-hawkeye.  The last lines of the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StartLog\" title=\"Start Log\">StartLog</a></span> are:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">01/12 16:44:28 VM-gahp server reported an internal error\n01/12 16:44:28 VM universe will be tested to check if it is available\nStack dump for process 19390 at timestamp 1263336268 (19 frames)\ncondor_startd(dprintf_dump_stack+0xd0)[0x814dea4]\ncondor_startd(_Z18linux_sig_coredumpi+0x28)[0x813f48c]\n[0xffffe420]\n/lib/tls/libc.so.6(abort+0xeb)[0x401bddbb]\n/lib/tls/libc.so.6[0x401f28b5]\n/lib/tls/libc.so.6[0x401f8842]\n/lib/tls/libc.so.6(__libc_free+0x84)[0x401f91f4]\n/usr/lib/libstdc++.so.6(_ZdlPv+0x21)[0x40135c61]\ncondor_startd(_ZN4ListIcE10RemoveItemEP4ItemIcE+0x6a)[0x815d60e]\ncondor_startd(_ZN4ListIcE13DeleteCurrentEv+0x52)[0x815d674]\ncondor_startd(_ZN10StringList13deleteCurrentEv+0x4e)[0x815ce22]\ncondor_startd(_ZN10StringList8clearAllEv+0x25)[0x815cf0d]\ncondor_startd(_ZN10StringListD0Ev+0x1b)[0x815d1c9]\ncondor_startd(sysapi_reconfig+0x37)[0x81d0063]\ncondor_startd(_Z11init_paramsi+0x11b)[0x8104abd]\ncondor_startd(_Z9main_initiPPc+0x26c)[0x81058b2]\ncondor_startd(main+0x1795)[0x81424c1]\n/lib/tls/libc.so.6(__libc_start_main+0xd0)[0x401a9ea0]\ncondor_startd(__gxx_personality_v0+0x169)[0x80e0151]\n</pre></div>\n\n\n<p>This bug showed up in a different form today:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">02/19 11:41:35 VM-gahp server reported an internal error\n02/19 11:41:35 VM universe will be tested to check if it is available\nStack dump for process 5047 at timestamp 1266601295 (13 frames)\ncondor_startd(dprintf_dump_stack+0xd0)[0x814dea4]\ncondor_startd(_Z18linux_sig_coredumpi+0x28)[0x813f48c]\n[0xffffe420]\n/lib/tls/libc.so.6(abort+0xeb)[0x401bddbb]\n/lib/tls/libc.so.6[0x401f28b5]\n/lib/tls/libc.so.6[0x401f8842]\n/lib/tls/libc.so.6(__libc_free+0x84)[0x401f91f4]\ncondor_startd(sysapi_reconfig+0x2f4)[0x81d0320]\ncondor_startd(_Z11init_paramsi+0x11b)[0x8104abd]\ncondor_startd(_Z9main_initiPPc+0x26c)[0x81058b2]\ncondor_startd(main+0x1795)[0x81424c1]\n/lib/tls/libc.so.6(__libc_start_main+0xd0)[0x401a9ea0]\ncondor_startd(__gxx_personality_v0+0x169)[0x80e0151]\n</pre></div>\n\n\n<p><span class=\"section\"></span></p><h2>Milestones </h2>\n<ul>\n<li>Find bug, fix it, test it. - <strong>03/05/2010</strong> <strong>[DONE]</strong></li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2010-Feb-17 14:18:43 by psilord:</em> <br/>\n\nSo far, I've found this SHA1 which is a problem on the V7_4_1-branch.\n\n<p>76691576580c4f0ea0663d70d9e00d7214c1a887 which is change <span class=\"chng\"><a href=\"chngview?cn=15224\">[15224]</a></span>\n\n</p><p>It is from ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=551\" title=\"RFE: for re-check for VM Universe capability after it is disabled\">#551</a></span>.\n\n</p><p>It would appear that the new function Jamie calls uses the param() system before\ninit_params(1) is called a little later. This apparently causes some nasty\nproblems in sysapi_reconfig() later, mostly because sysapi_reconfig() expected\nthe param system to be fully set up.\n\n</p><p>The log snippet above states that the VM had an internal error and that would cause control to flow into the function Jamie used, which would cause param() to be called outside of its valid initialization state.\n\n</p><p></p><hr/>\n<em>2010-Feb-17 14:41:23 by psilord:</em> <br/>\n\nHrm, after a talk with Jamie, the first hypothesis might be a red herring. Moving on to more in-depth debugging.\n\n<p></p><hr/>\n<em>2010-Feb-17 16:00:43 by psilord:</em> <br/>\n\nAfter some valgrind work, I found this new lead:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">==29753== Invalid write of size 1\n==29753==    at 0x401DED1: strcat (mc_replace_strmem.c:174)\n==29753==    by 0x81C7F43: UnixNetworkAdapter::setHwAddr(ifreq const&amp;) (in /prer\neq/condor-7.4.1/sbin/condor_startd)\n==29753==    by 0x81B6DD8: LinuxNetworkAdapter::getAdapterInfo() (in /prereq/con\ndor-7.4.1/sbin/condor_startd)\n==29753==    by 0x81C79DE: UnixNetworkAdapter::initialize() (in /prereq/condor-7\n.4.1/sbin/condor_startd)\n==29753==    by 0x81B62C1: NetworkAdapterBase::doInitialize() (in /prereq/condor\n-7.4.1/sbin/condor_startd)\n==29753==    by 0x81B63C3: NetworkAdapterBase::createNetworkAdapter(char const*,\n bool) (in /prereq/condor-7.4.1/sbin/condor_startd)\n==29753==    by 0x80EE661: ResMgr::ResMgr() (in /prereq/condor-7.4.1/sbin/condor\n_startd)\n==29753==    by 0x81057AE: main_init(int, char**) (in /prereq/condor-7.4.1/sbin/\ncondor_startd)\n==29753==    by 0x81424C0: main (in /prereq/condor-7.4.1/sbin/condor_startd)\n==29753==  Address 0x43b6600 is 3 bytes after a block of size 21 free'd\n==29753==    at 0x401C61C: free (vg_replace_malloc.c:325)\n==29753==    by 0x814F990: is_valid_sinful (in /prereq/condor-7.4.1/sbin/condor_\nstartd)\n==29753==    by 0x814FB30: string_to_ipstr (in /prereq/condor-7.4.1/sbin/condor_\nstartd)\n==29753==    by 0x81B635A: NetworkAdapterBase::createNetworkAdapter(char const*,\n bool) (in /prereq/condor-7.4.1/sbin/condor_startd)\n==29753==    by 0x80EE661: ResMgr::ResMgr() (in /prereq/condor-7.4.1/sbin/condor\n_startd)\n==29753==    by 0x81057AE: main_init(int, char**) (in /prereq/condor-7.4.1/sbin/\ncondor_startd)\n==29753==    by 0x81424C0: main (in /prereq/condor-7.4.1/sbin/condor_startd)\n</pre></div>\n\n\n<p>That happens almost right before we call sysapi_reconfig(). It might overwrite the string list memory which was most likely allocated right after this call the first time.\n\n</p><p></p><hr/>\n<em>2010-Feb-17 16:04:48 by psilord:</em> <br/>\n\nTragically, the startd doesn't reproducably segfault with the initial claim of this ticket. I believe I can see how it can do this given the invalid write error, but I don't know if I can pin it down to be exact.\n\n<p></p><hr/>\n<em>2010-Feb-25 11:50:34 by psilord:</em> <br/>\n\nThis bug is proving elusive since it is a heisenbug. In my debugging, I'm seeing things which can cause it and tracking them down.\n\n<p></p><hr/>\n<em>2010-Feb-25 14:35:39 by psilord:</em> <br/>\n\nThe bug is looking like a double free, but valgrind somehow isn't helping me find it.\n\n<p></p><hr/>\n<em>2010-Feb-25 15:20:25 by psilord:</em> <br/>\n\nThe debugging command which reproduces the invalid reads/writes in the netowrk adapter code is:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">valgrind --tool=memcheck --free-fill=FF /usr/local/condor/sbin/condor_startd -f -t | &amp; tee valgrind.log\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-Feb-25 16:32:32 by psilord:</em> <br/>\n\nOk, I (with dab's help) figured out the bug. Or more like, the lack thereof.\n\n<p>This bug existed on Nov 10, 2009, the date of the binaries I am debugging, but was fixed on Nov 30, 2009 for ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1011\" title='Condor 7.4.0 on Debian stable - startd dies with \"segmentation fault\"'>#1011</a></span> in the 7.4 stable series. It took a while for me to realize this since I was looking at the head of the V7_4_1-branch as a reference (which didn't contain the implied bug) since I didn't have the snapshot of the source on Nov 10, 2009.\n\n</p><p>The answer is to produce a new build for this machine using the head of the 7.4.1 branch. This should fix the issue.\n\n</p><p></p><hr/>\n<em>2010-Feb-26 10:50:10 by psilord:</em> <br/>\n\nNew build of 7.4.1 is in:\n\n<p><code>nmi-0062:/home/psilord/git/CONDOR_SRC/public/v7.4/</code>\n\n</p><p>That should hopefully solve this problem.\n\n</p><p></p><hr/>\n<em>2010-Mar-05 13:38:45 by psilord:</em> <br/>\n\nPoked Nick, hopefully this should be installed soon.\n\n<p></p><hr/>\n<em>2010-Mar-05 16:36:29 by psilord:</em> <br/>\n\nThe new binaries woke up and are playing nicely with others. This ticket is resolved.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "defect", "last_change": "2010-Mar-05 16:37", "status": "resolved", "created": "2010-Jan-13 12:32", "fixed_version": "2010-Jan-13 12:32", "broken_version": "v070401", "priority": "4", "subsystem": "Daemons", "assigned_to": "psilord", "derived_from": "", "creator": "bgietzel", "rust": "", "customer_group": "batlab", "visibility": "public", "notify": "psilord@cs.wisc.edu", "due_date": "20100305"}