{"id": 4014, "title": "Ticket #4014: Starter selection for work fetch is error prone", "description": "<blockquote>\nWhen the startd wants to start a job, it calls <code>StarterMgr::findStarter()</code> to find the appropriate starter to use. If the job comes from a shadow, the startd already knows which starter it wants to use (indicated by the <code>starter_num</code> argument). In that case, <code>findStarter()</code> ignores the other starter types. For work fetch, startd passes -1 for <code>starter_num</code>, indicating it doesn't know which type of starter should be used. In this case, <code>findStarter()</code> will try all starters and use the first one for which the job's requirements are met. If the job's requirements don't mention any starter ability attributes, then it will match the first starter in the list. Fortunately, the daemon-core starter is first, which is what we want for anything other than standard universe. But if the order changes or someone wants to run a standard universe work fetch job (is the latter possible without a shadow?), then we'll get unexpected results.\n\n<p>Whatever the startd does to determine which starter it wants before calling <code>StarterMgr::findStarter()</code>, that should be done for work fetch jobs.</p></blockquote>", "remarks": "<blockquote>\n<em>2013-Oct-28 14:50:34 by jfrey:</em> <br/>\n\nWhen a job comes from a shadow, the shadow says which type of starter should be used. Maybe the best we can do for work fetch is to ensure that the new starter is always first in the list.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "defect", "last_change": "2013-Oct-28 14:50", "status": "new", "created": "2013-Oct-28 14:05", "fixed_version": "2013-Oct-28 14:05", "broken_version": "v080000", "priority": "4", "subsystem": "DaemonsExecNode", "assigned_to": "", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}