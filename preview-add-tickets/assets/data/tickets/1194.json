{"id": 1194, "title": "Ticket #1194: Build new ClassAds only as an external", "description": "<blockquote>\nCurrently, we build two versions of new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> when building Condor.\nOne is an external and is used to build the Blahp and Cream externals.\nThe other is in src/classad and is used to build the Condor daemons and\ntools. There should be one version of new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, built as an\nexternal, used to build Condor.\n\n<p><span class=\"section\"></span></p><h2>Issues </h2>\n\n<p><span class=\"subsection\"></span></p><h3>libcondorapi </h3>\nThe main complicating factor in building <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> just as an external is\nlibcondorapi, the library we provide to users to read and write user\nlogs. Currently, it directly includes the new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> object files and\nhas no dependencies other than system libraries.\n\n<p>With new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> built only as an external, we'll need to provide\nlibclassad in the release as an additional library for users to link\nagainst. New <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> themselves depend on PCRE, though libcondorapi's\nusage of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> should never result in PCRE being called. Currently,\nlibcondorapi includes stubs for the PCRE functions which call abort().\nWith an external-only <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, we'll need to provide libpcre in the\nrelease or figure out how to make stubs work.\n\n</p><p>We provide both static and dynamic versions of libcondorapi. For the\ndynamic version, we may have to set up relative rpaths for libcondorapi\nand libclassad in order for them to find libclassad and libpcre,\nrespectively. Also, creating a shared version of libclassad currently\nfails on Solaris.\n\n</p><p><span class=\"subsection\"></span></p><h3>Windows </h3>\nWe would also need to change the Windows build to build <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> as an\nexternal.</blockquote>", "remarks": "<blockquote>\n<em>2010-May-21 09:08:57 by tstclair:</em> <br/>\n\nThis is very easy to do with the cmake build and requires little effort.\n\n<p></p><hr/>\n<em>2010-Aug-03 15:34:25 by tstclair:</em> <br/>\n\ndone in V7_5-cmake-stage-branch\n<hr/>\n<em>2010-Oct-20 16:03:30 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2010-Nov-19 16:22", "status": "resolved", "created": "2010-Feb-09 12:12", "fixed_version": "2010-Feb-09 12:12", "broken_version": "v070400", "priority": "4", "subsystem": "Libs", "assigned_to": "tstclair", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tstclair@redhat.com", "due_date": ""}