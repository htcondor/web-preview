{"id": 2794, "title": "Ticket #2794: Schedd becomes unresponsive when running short lived jobs", "description": "<blockquote>\nRunning the followig:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">#!/bin/bash\nfor i in `seq 100`; do\n        /bin/sh -c \"condor_submit ./generic_submit\"\n        /bin/sh -c \"condor_q\"\n        sleep 5\ndone\n\nwhere generic_submit ==\n\nexecutable=/bin/sleep\narguments=1\nlog=$(cluster).$(process)_generic_submit.log\noutput=$(cluster).$(process)_generic_submit.out\nerror=$(cluster).$(process)_generic_submit.err\nqueue 32\n\n</pre></div>\n\n\n<p>Can consistently get the schedd to become unresponsive. It appears that it's in some kind of deadlock condition B/C all my slots are claimed/idle, and the machine is not CPU bound.\n\n</p><p>It occurs ~ 3rd or 4th claim reuse on a 8-core machine.  The script only succeeds again once the queue is empty.\n\n</p><p><strong>NOTE:</strong> I do not see the above behavior in 7.6 series.</p></blockquote>", "remarks": "<blockquote>\n<em>2012-Jan-31 15:04:39 by nwp:</em> <br/>\n\nI ran exactly the test specified; I am not able to reproduce on my machine (llunet.cs.wisc.edu).  Schedd responsiveness is normal, and slots stay claimed/busy.\n\n<p></p><hr/>\n<em>2012-Feb-01 14:34:09 by tstclair:</em> <br/>\n\nI will run a profile tomorrow and try to determine where it is spending it's time.\n\n<p></p><hr/>\n<em>2012-Feb-03 16:10:18 by tstclair:</em> <br/>\n\nAll of the time appears to be blocked in fsync calls.\n\n<p>Of note, this may be stressed my local machine b/c I'm running btrfs.\n\n</p><p>Again, it doesn't appear to behave this way on 7.6.\n\n</p><p></p><hr/>\n<em>2012-Feb-06 15:06:46 by tstclair:</em> <br/>\n\nstrace -c\n\n<p></p><hr/>\n<em>2012-Feb-06 18:27:51 by nwp:</em> <br/>\n\nAgain, I cannot reproduce.  If anything, the current master (c0c5d40) is <em>snappier</em> and <em>much</em> <strong>more</strong> <em>responsive</em> than 7.6.  Comparison of fsync calls: For the same job run, I had the same number, 330, in both cases.\n\n<p></p><hr/>\n<em>2012-Feb-06 18:32:55 by nwp:</em> <br/>\n\nFor 7.6 (4d943fb):\n<div class=\"code\">\n<pre class=\"code\">nwp:~/2794$ strace -c -e fsync -p 22995\nProcess 22995 attached - interrupt to quit\nProcess 22995 detached\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.098992         300       330           fsync\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.098992                   330           total\n</pre></div>\n\n\n<p>For current master (c0c5d40):\n</p><div class=\"code\">\n<pre class=\"code\">nwp:~/2794$ strace -c -e fsync -p 5517\nProcess 5517 attached - interrupt to quit\nProcess 5517 detached\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.082986         251       330           fsync\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.082986                   330           total\n</pre></div>\n\n\n<p>Looks to me like master is 16.2 per cent faster than 7.6, as\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">(0.098992-0.082986)/0.098992 = .16168983352190075965\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Feb-06 21:41:41 by tstclair:</em> <br/>\n\nHow many jobs did you measure?  Were you running the script above?  For how long.. etc. etc.  I'll post my results in the am.\n\n<p></p><hr/>\n<em>2012-Feb-07 00:36:58 by nwp:</em> <br/>\n\nFor the results above, I ran with `seq 5` instead of `seq 100`.  When I ran with `seq 100`, the results are basically the same: scale up by 20, so you get 6603 fsync calls instead of 330.\n\n<p></p><hr/>\n<em>2012-Feb-07 09:34:03 by tstclair:</em> <br/>\n\nI've attached the results of the run and despite my initial strace theory it appears to be incorrect, however my initial assertion appears correct.  When you look at the submission time..\n\n<p>1-9 for 7.6.7 ~ 2:24\n\n</p><p>1-9 for 7.7.6 ~ 5:23\n\n</p><p></p><hr/>\n<em>2012-Feb-07 10:04:47 by nwp:</em> <br/>\n\nI get opposite results: 0:55 for 7.7.6 and 2:20 for 7.6.7\n\n<p></p><hr/>\n<em>2012-Feb-08 11:09:40 by tstclair:</em> <br/>\n\nGoing to bump *this to see if other folks see it, b/c nathan can not repro.  I can consistently repro, see attached bitz, plus check my public loc for full logs.\n\n<p>In looking through the logs nothing stands out, so I will bump and wait for repro.\n\n</p><p></p><hr/>\n<em>2012-Feb-08 13:45:18 by tannenba:</em> <br/>\n\nThis ticket was initially created as a child of <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2790\" onclick=\"get_ticket_and_populate_wrapper('2790'); return false;\" title=\"allow schedd to claim multiple dynamic slots w/o negotiation cycle\">#2790</a></span>, but upon further investigation it does not seem at all related, so I am removing this parent/child relationship.</blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/528/7.7.6-10reps-sleep1x16.txt\">7.7.6-10reps-sleep1x16.txt</a>\n38272 bytes added by tstclair on 2012-Feb-07 15:30:52 UTC.\n<br/>\n7.7.6 results <br/>\n</li><li><a href=\"attach_get/529/7.6.7-10reps-sleep1x16.txt\">7.6.7-10reps-sleep1x16.txt</a>\n65492 bytes added by tstclair on 2012-Feb-07 15:31:24 UTC.\n<br/>\n7.6.7 results.<br/>\n</li></ul>\n</blockquote>", "check_ins": "", "type": "defect", "last_change": "2012-Feb-08 13:45", "status": "stalled", "created": "2012-Jan-30 12:21", "fixed_version": "2012-Jan-30 12:21", "broken_version": "v070705", "priority": "1", "subsystem": "Daemons", "assigned_to": "", "derived_from": "", "creator": "tstclair", "rust": "", "customer_group": "users", "visibility": "public", "notify": "tstclair@redhat.com, gthain@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}