{"id": 1184, "title": "Ticket #1184: fstat() fails in procapi for large inodes in /proc", "description": "<blockquote>\nWe noticed 32-bit condor on 64-bit systems sometimes producing errors messages such as the following:\n\n<p></p><div class=\"verbatim\">\n<pre>ProcAPI: fstat failed in /proc! (errno=75)\n</pre></div>\n\n\n<p>I tracked this down to entries in /proc with inode values too big to represent in the 32-bit stat structure.  Example:\n\n</p><p></p><div class=\"verbatim\">\n<pre>$ stat /proc/249577/stat\n  File: `/proc/249577/stat'\n  Size: 0         \tBlocks: 0          IO Block: 4096   regular empty file\nDevice: 3h/3d\tInode: 18446744072885960717  Links: 1\nAccess: (0444/-r--r--r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2010-02-04 12:22:36.023594484 -0600\nModify: 2010-02-04 12:22:36.023594484 -0600\nChange: 2010-02-04 12:22:36.023594484 -0600\n</pre></div>\n\n\n<p>The solution is to use the LFS call fstat64() when available.\n\n</p><p>The consequence of this problem would be a wrong uid associated with a tracked process (it assumes the process belongs to root).  This could lead to leaked processes when using a dedicated execution account to do process tracking.</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Feb-04 16:52:08 by matt:</em> <br/>\n\nIt almost seems like Condor should require fstat64's presence. Otherwise someone could compile, only get fstat and run into this bewildering problem, which would appear to be fixed.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-06 20:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17117\">[17117]</a></span>: Fixed fstat64() compilation problem on hpux. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1184\" onclick=\"get_ticket_and_populate_wrapper('1184'); return false;\" title=\"fstat() fails in procapi for large inodes in /proc\">#1184</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-04 17:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25251\">[25251]</a></span>: Documented fix for fstat() failure in procapi. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1184\" onclick=\"get_ticket_and_populate_wrapper('1184'); return false;\" title=\"fstat() fails in procapi for large inodes in /proc\">#1184</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-04 16:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17100\">[17100]</a></span>: Fixed fstat() failures in procapi when the inode is too big for 32-bit. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1184\" onclick=\"get_ticket_and_populate_wrapper('1184'); return false;\" title=\"fstat() fails in procapi for large inodes in /proc\">#1184</a></span>  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Feb-04 17:23", "status": "resolved", "created": "2010-Feb-04 16:36", "fixed_version": "2010-Feb-04 16:36", "broken_version": "v070401", "priority": "4", "subsystem": "Daemons", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "", "due_date": ""}