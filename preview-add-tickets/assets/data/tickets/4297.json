{"id": 4297, "title": "Ticket #4297: Prototype vanilla universe self-checkpointing support.", "description": "<blockquote>\n(Also see <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4968\" onclick=\"get_ticket_and_populate_wrapper('4968'); return false;\" title=\"Periodic Application-Level Checkpoints in the Vanilla Universe\">#4968</a></span>, this ticket's new parent.)\n\n<p>I have code that will eat your babies.  It will also periodically send a vanilla-universe job its \"soft kill\" signal (defaults to <code>SIGTERM</code>, can be adjusted via the submit-file attribute <code>kill_sig</code>), at intervals defined by the <code>PERIODIC_CHECKPOINT</code> (as respected by the standard and VM universes).  It does so if and only if the job ad has <code>WantCheckpoint</code> and <code>UserLevelCheckpoint</code> set.  Immediately after sending the signal, it performs intermediate file transfer.\n\n</p><p>Under the above two conditions, this will result in periodic application-level checkpointing, with the caveat that the checkpoint stored by the shadow will always be one checkpoint interval old.\n\n</p><p>If you would like this code to eat your babies, let me know for which platform and I'll send you the binaries.  I would like to see if this approach can be made to work for people in practice before trying to clean it up.\n\n</p><p>Obvious extensions include: some way of telling when the application is done checkpointing (watch a signal file?), which could be tricky, but would weaken condition (b), above; adding another job attribute to specify the checkpoint signal distinct from the kill signal, which should be simple but may be useless; and making the intermediate files go some place more useful than the shadow, which will probably be a pain.\n\n</p><p>This is <em>not</em> any other ticket.  (;)) In particular, it does not address the general use of third-party checkpointing.  It does not address the use of standard universe binaries in stand-alone mode.  It does not do fast evict/restarts.  It is my understanding that this specific and narrowly-defined use case meets an existing user need, and if that is so, we'll get it for basically free in the process of doing vm-assisted checkpointing.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-May-15 16:38:41 by tlmiller:</em> <br/>\n\nUse V8_1-gittrac_4297-branch for follow-ups until V8_1-vc-branch is close to production.\n\n<p></p><hr/>\n<em>2014-May-19 16:51:28 by tlmiller:</em> <br/>\n\nTannenbaum points out that requirement (b) is tough if the application stores state on-disk during normal operation, because the on-disk state will diverge from the stored state of the checkpoint.  The application must either recover from this problem on resume, or ensure that the on-disk state visible to HTCondor only changes atomically.\n\n<p>(For instance, if you specify the checkpoint file as 'checkpoint.tar.gz', a wrapper script could catch the signal and direct the application to take a checkpoint and pause (or exit).  It could then tar up the whole of the required disk-state in a temporary file, (atomically) rename it to 'checkpoint.tar.gz, and then continue (or restart) the application.)\n\n</p><p>This punts a lot of complexity to the user, which is not The HTCondor Way.\n\n</p><p>However, if this will work for LIGO, it may be worth offering at least temporarily.\n\n</p><p>A number of more-general solutions are outlined in <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=3138\" onclick=\"get_ticket_and_populate_wrapper('3138'); return false;\" title=\"Periodic evicts/fast restart in vanilla universe (checkpoints)\">#3138</a></span>; the \"intelligent starter\" sounds like the least intrusive.\n\n</p><p>Other tickets of interest may include:\n\n</p><p></p><ul>\n<li><span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=1000\" onclick=\"get_ticket_and_populate_wrapper('1000'); return false;\" title=\"Provide alternative to Standard Universe\">#1000</a></span>, which could replaced by providing a wrapper script for stand-alone checkpointing (probably -- see <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2007\" onclick=\"get_ticket_and_populate_wrapper('2007'); return false;\" title=\"Can stduniv run as a vanilla job with standalone checkpointing?\">#2007</a></span>)\n</li><li><span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=317\" onclick=\"get_ticket_and_populate_wrapper('317'); return false;\" title=\"Make CCB work with standard universe\">#317</a></span>, made obsolete by the above if nobody wants remote I/O (confirmed by HTCondor Week 2014 attendees)\n</li><li><span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=1956\" onclick=\"get_ticket_and_populate_wrapper('1956'); return false;\" title=\"Move stduniv to new starter/shadow\">#1956</a></span>, also made obsolete by the above\n</li><li><span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=1323\" onclick=\"get_ticket_and_populate_wrapper('1323'); return false;\" title=\"Need a way of indicating a vanilla job self checkpoints\">#1323</a></span>, assumed in this ticket\n</li><li><span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2007\" onclick=\"get_ticket_and_populate_wrapper('2007'); return false;\" title=\"Can stduniv run as a vanilla job with standalone checkpointing?\">#2007</a></span>, which may be overkill for self-checkpointing\n</li><li><span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=3771\" onclick=\"get_ticket_and_populate_wrapper('3771'); return false;\" title=\"Investigate unexpected checkpointing/file transfer behavior\">#3771</a></span>, which may have relevant bugs\n</li></ul>\n\n<p></p><hr/>\n<em>2014-May-19 17:30:27 by tlmiller:</em> <br/>\n\nThoughts on the \"intelligent starter\" design:\n\n<p></p><ol>\n<li>In VanillaProc::Ckpt(), send soft_kill_sig and set the isCheckpointing flag.  Because we don't want to transfer files right away, return false.\n</li><li>In the reaper, check isCheckpointing.  If we are, and the process exited normally (with return code 0), do intermediate file transfer and then restart the job.  Unset isCheckpointing.  Do <em>not</em> send the \"final job update\".  If we are but the process did not exit normally, assume it was our fault and exit appropriately.\n\n<p></p></li></ol>\n<ul>\n<li>If told to vacate while checkpointing, set the vacate timer.  (Verify that we don't (normally) do file transfer when hard-killing.)  When the vacate timer fires, unset isCheckpointing and proceed as normal.\n</li></ul>\n\n<p></p><hr/>\n<em>2014-May-19 17:39:55 by tlmiller:</em> <br/>\n\nThoughts on <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2007\" onclick=\"get_ticket_and_populate_wrapper('2007'); return false;\" title=\"Can stduniv run as a vanilla job with standalone checkpointing?\">#2007</a></span>:\n\n<p></p><ul>\n<li>If we're assuming user-level self-checkpointing (even if that's standard universe stand-alone checkpointing), we can ignore the requirements for identifying the required checkpointing infrastructure.\n\n<p></p></li><li>We could use chirp in the wrapper script to edit the Requirements expression to require the checkpoint platform, if it were available to the user.  This may require some hacking (since condor_ckpt_probe doesn't report the whole checkpoint platform string).  This would avoid privileging any given checkpointer in the vanilla universe without having to define the whole infrastructure in <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2007\" onclick=\"get_ticket_and_populate_wrapper('2007'); return false;\" title=\"Can stduniv run as a vanilla job with standalone checkpointing?\">#2007</a></span>.\n\n<p></p></li><li>By adopting the convention that a cleanly exited return-code 0 job means a successful checkpoint, we can avoid both the problem of determining when the checkpoint is done and the need to specify the checkpoint assets.  (Ignoring superfluous files is an orthogonal issue about dealing with intermediate files.)\n</li></ul>\n\n<p></p><hr/>\n<em>2014-Sep-17 16:30:07 by tlmiller:</em> <br/>\n\nWe discussed this proposal with Peter Couvares on 2014-09-17, and he pointed that the exit code from a successful checkpoint must be a user-specified \"special\" one, to avoid a race condition where the job finishes between when HTCondor sends the periodic checkpoint signal and when the job finishing triggers the job reaper.\n\n<p></p><hr/>\n<em>2014-Nov-05 12:45:18 by tlmiller:</em> <br/>\n\nTom Downes did some testing of the proof-of-concept.  He noticed two issues.\n\n<p>First, the standard out (and presumably, error) files we return to the user only include output (or error) since the most recent checkpoint (restart).  This is at best disconcerting, and certainly counter to expectations; and it should be a relatively simple fix.\n\n</p><p>Second, after a condor_vacate_job, we report an explicitly application-level checkpointing job as \"not checkpointed\", regardless of the actually success or failure of the checkpoint.  This was at least in part to avoid accidentally triggering any standard universe -specific code, but it's deceptive and should be fixed (at a lower priority than the first, because it could get complicated).\n\n</p><p></p><hr/>\n<em>2015-Mar-11 17:47:30 by tlmiller:</em> <br/>\n\nConsider, even if this feature goes in as experimental, modifying condor_submit to know about <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=WantCheckpointSignal\" title=\"Want Checkpoint Signal\">WantCheckpointSignal</a></span>.\n\n<p></p><hr/>\n<em>2015-Mar-13 10:09:36 by tlmiller:</em> <br/>\n\nMarked as experimental until we're sure we want people to be trying to use it without support for any kind of checkpoint server at all.\n\n<p></p><hr/>\n<em>2015-Mar-13 10:14:21 by tlmiller:</em> <br/>\n\nAdded concatenation of output and error streams across runs.  Doesn't work with streaming I/O yet.\n\n<p></p><hr/>\n<em>2015-Mar-16 10:51:43 by tlmiller:</em> <br/>\n\n... and now it does.\n\n<p></p><hr/>\n<em>2015-Mar-18 14:05:13 by tlmiller:</em> <br/>\n\nRetro design doc:\n<a class=\"external\" href=\"https://docs.google.com/a/wisc.edu/document/d/1leCtRalvU8YOEiNfwBD0j46pQv3yH4f3YrKgXDT_e4I/\">https://docs.google.com/a/wisc.edu/document/d/1leCtRalvU8YOEiNfwBD0j46pQv3yH4f3YrKgXDT_e4I/</a>\n\n<p></p><hr/>\n<em>2015-May-20 16:24:57 by tlmiller:</em> <br/>\n\nExample submit file...\n\n<p></p><div class=\"verbatim\">\n<pre>universe                = vanilla\nexecutable              = self-checkpointing\ntransfer_executable     = true\nshould_transfer_files   = true\nwhen_to_transfer_output = ON_EXIT_OR_EVICT\n+WantCheckpointSignal   = true\n+CheckpointSig          = \"SIGUSR1\"\nstream_output           = true\nstream_error            = true\n</pre></div>\n\n\n<p>Note that the periodicity of the signal is defined by the startd, not the job; see the standard universe documentation for details.\n\n</p><p></p><hr/>\n<em>2019-Sep-18 14:35:58 by tlmiller:</em> <br/>\n\nI don't know why this was marked defer, but after four years, I'm certain it's no longer relevant.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-14 16:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43589\">[43589]</a></span>: (<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4297\" onclick=\"get_ticket_and_populate_wrapper('4297'); return false;\" title=\"Prototype vanilla universe self-checkpointing support.\">#4297</a></span>) Add support for concatenated streaming to vanilla-universe checkpointing. Fix a crashing bug preventing streaming i/o from working across a reconnect.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-13 10:07</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43574\">[43574]</a></span>: (<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4297\" onclick=\"get_ticket_and_populate_wrapper('4297'); return false;\" title=\"Prototype vanilla universe self-checkpointing support.\">#4297</a></span>) Implement experimental feature for periodic (self-)checkpoints in vanilla universe. Squashed commit of the following:\u00a0[...]\n (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-11 17:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43567\">[43567]</a></span>: (<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4297\" onclick=\"get_ticket_and_populate_wrapper('4297'); return false;\" title=\"Prototype vanilla universe self-checkpointing support.\">#4297</a></span>) Convert 'WantCheckpoint' and 'UserLevelCheckpointing' to 'WantCheckpointSignal' and #define it.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-11 14:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43566\">[43566]</a></span>: (<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4297\" onclick=\"get_ticket_and_populate_wrapper('4297'); return false;\" title=\"Prototype vanilla universe self-checkpointing support.\">#4297</a></span>) If the job requested checkpointing, the starter will no longer truncate its output and error logs.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-May-19 16:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=40181\">[40181]</a></span>: (<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4297\" onclick=\"get_ticket_and_populate_wrapper('4297'); return false;\" title=\"Prototype vanilla universe self-checkpointing support.\">#4297</a></span>) Add the ability to specify the periodic checkpoint signal.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-03 11:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39879\">[39879]</a></span>: (<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4297\" onclick=\"get_ticket_and_populate_wrapper('4297'); return false;\" title=\"Prototype vanilla universe self-checkpointing support.\">#4297</a></span>) Periodic application-level checkpoints in the vanilla universe?  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "experimental", "last_change": "2019-Sep-18 14:37", "status": "abandoned", "created": "2014-Apr-03 11:31", "fixed_version": "2014-Apr-03 11:31", "broken_version": "", "priority": "5", "subsystem": "DaemonsExecNode", "assigned_to": "tlmiller", "derived_from": "#4968", "creator": "tlmiller", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, downes@uwm.edu,pcouvare@caltech.edu", "due_date": ""}