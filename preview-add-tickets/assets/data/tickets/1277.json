{"id": 1277, "title": "Ticket #1277: Use SIG_TERM on windows instead of WM_CLOSE", "description": "<blockquote>\nCondor uses WM_CLOSE on windows to signal processes to shut down, but this causes complexity in daemoncore and non-daemoncore daemons developed by 3rd parties that want to be used in a cross platform context.  Windows does support a few signals, one of which is a SIG_TERM, and using a SIG_TERM instead of WM_CLOSE eases the cross-platform support burden.  In addition, master reports that it is attempting to send a signal 15 (SIG_TERM) to the process even though it is actually sending a WM_CLOSE on windows.</blockquote>", "remarks": "<blockquote>\n<em>2010-Mar-16 23:24:34 by tannenba:</em> <br/>\n\nCondor sends a WM_CLOSE message to an app to tell it to gracefully go away, analogous to sending a SIGTERM on Unix. A WM_CLOSE message was selected as the mechanism to tell a job to nicely go away since that is what Windows does when you close a window by pressing the \"x\" in the upper right corner (thus a well-understood and common execution path for practically every program ever written for Windows), it can be easily caught by either a windows console app or a windows gui (message-pump) app, the default action if not explicitly caught by the app is to terminate, and it isn't particular to any language-specific runtime support library.\n\n<p>What do you mean windows supports \"SIG_KILL\" ?  Specifically, what Win32 system call are you talking about?\n\n</p><p>Or did you mean that daemonCore on Windows support SIGKILL?  If that is what you mean, note a daemonCore sigkill on windows just sends a WM_CLOSE message, waits a small amount of time, then follows up with a hard-kill.\n\n</p><p></p><hr/>\n<em>2010-Mar-18 12:59:38 by pmackinn:</em> <br/>\n\nI think Rob would like to set an asynch signal handler in his Python daemon that would be portable between POSIX and Win32 platforms. However, there really is no kill(pid,signum) for Windows CRT thus making signal-based IPC on Windows impossible. Happy to be corrected on this. You can raise(signum) a signal but that is internal to that process. Ctrl-C is mapped by the Windows CRT to SIGINT and thus can be captured, but that is still a console event that has to be generated.\n\n<p></p><hr/>\n<em>2010-Mar-18 14:37:25 by tannenba:</em> <br/>\n\nAgree w/ ^^^... Using WM_CLOSE on Win32 for all the reasons mentioned in the remarks above was the best we could come up with.\n\n<p>Lord knows I share frustrations w/ Rob, but not certain what, if anything, we could do to improve upon the situation...  Should this ticket be marked as abandoned?\n\n</p><p></p><hr/>\n<em>2010-Mar-18 14:43:25 by rrati:</em> <br/>\n\nWindows supports about 5 signals, one of which is SIGTERM.  I discovered that SIGTERM wasn't being sent because of a python program I wrote and wanted managed by master, but that isn't the only place this could come up.  What I'm suggesting is use SIGTERM instead of WM_CLOSE for daemoncore and non-daemoncore processes.  From my understanding, WM_CLOSE is equivalent to SIGTERM, and since windows supports SIGTERM why add the additional complexity of deciding which platform condor is one to send a SIGTERM vs. WM_CLOSE.  I'm suggesting send SIGTERM on all platforms that support it (which should be just about all of them).  Is there something a WM_CLOSE can achieve on windows that a SIGTERM can not?\n\n<p></p><hr/>\n<em>2010-Mar-18 15:21:14 by tstclair:</em> <br/>\n\nMy bad, my previous example will just kill the process.. from some other win-goop I believe you will need to attach both processes to a console in order to send the signals, then you can write to the console (CTRL+C, CTRL+BREAK), and that write will be interpreted by the \"signal handler\" on the other side..\n\n<p></p><hr/>\n<em>2010-Mar-18 15:50:07 by tstclair:</em> <br/>\n\n<a class=\"external\" href=\"http://msdn.microsoft.com/en-us/library/ms682541(VS.85).aspx\">http://msdn.microsoft.com/en-us/library/ms682541(VS.85).aspx</a>\n&amp;&amp;\n<a class=\"external\" href=\"http://msdn.microsoft.com/en-us/library/ms683155(VS.85).aspx\">http://msdn.microsoft.com/en-us/library/ms683155(VS.85).aspx</a>\n\n<p></p><hr/>\n<em>2010-Mar-18 19:44:06 by tannenba:</em> <br/>\n\n@ Rob, you say \"Windows supports SIGTERM\".  Please be specific... what Win32 system call you are talking about?  Some method that only exists in the C runtime support library is not acceptable (e.g. <em>signal()</em>) as millions of programs on Windows are not linked w/ the C runtime support libs (think anything written in Visual Basic, or even apps written using a C compiler other than Microsofts). Likewise, some mechanism that relies on the existence of a console window is not acceptable (e.g. <em>GenerateConsoleCtrlEvent()</em>) as attaching both processes to a console is not feasible unless we want to say Condor can only run console applications.\n\n<p>@ Tim, what previous example?\n\n</p><p>@ everyone - I sympathize with Rob, but unfortunately asynch signals do not exist on Win32 like they do on Unix.  Repeating the requirements that are met by the current way of doing things from my first remark on this ticket:\n</p><ol>\n<li>a well-understood and commonly tested execution path for practically every program ever written for Windows\n</li><li>it can be easily caught by either a windows console app <em>or a windows gui (message-pump) app</em>\n</li><li>the default action if not explicitly caught by the app is to terminate\n</li><li>it isn't particular to any language-specific runtime support library\n</li></ol>\n\n<p>Any replacement mechanism would need to meet the above requirements.  I'd be happily surprised if such a mechanisms exists.  But I doubt it does.  :(.  Thus I again move to abandon this ticket...\n\n</p><p></p><hr/>\n<em>2010-Mar-18 19:49:32 by matt:</em> <br/>\n\nPossibly moot, but we could distinguish between signals the master will send to a daemon it is managing and the signal condor will send to an executable run under the starter.\n\n<p></p><hr/>\n<em>2010-Mar-18 20:28:17 by tannenba:</em> <br/>\n\nNot sure how distinguishing between apps under the master -vs- apps under the starter would help in this particular instance ... but thinking along the same lines, maybe distinguish between console and gui apps for how Condor asks apps to go away ? Not certain that making this distinction is worth it, however... catching a WM_CLOSE in a console apps seems about the same level of difficulty as catching any other console event like ctrl-c or ctrl-break.\n\n<p>Rob, I am not a python guy, but doesn't calling win32api.setConsoleCtrlHandler() to catch a CTRL_CLOSE_EVENT work for you?\n\n</p><p></p><hr/>\n<em>2010-Mar-19 09:15:36 by tstclair:</em> <br/>\n\nSay for the sake of argument, I wanted to hook up a perl or god forbid a prolog daemon, that means I would have to bind in Win32 deps to intercept the WM_CLOSE to clean up nicely?\n\n<p>I find that to be a little onerous... Daemon core directly binds these deps, maybe an alternative compromise would be a C-Style binding DLL/.so which would allow you to jig in a condor-esk-DAEMON without eating 3rd-party (or plat) deps for whatever lang you are working on.\n\n</p><p>This would give any would-be daemons a contract so everyone can play nicely.\n\n</p><p>This would not be a near term solution but it would solve a annoying dependency issue if one wants to make a platX daemon which is not in C/C++...\n\n</p><p></p><hr/>\n<em>2010-Mar-19 09:24:40 by rrati:</em> <br/>\n\nAgain, this ticket was sparked by a python issue but the problem is far from python specific.  The master daemon can control any program written in any language, which means the daemons could be written in languages common on multiple platform, be it compiled or interpreted.  My intention with this ticket was to find a better means to be kind to non-daemoncore cross-platform programs, and hopefully that solution would simplify daemoncore processes as well.\n\n<p>It sounds like signals on windows are a joke, which is hardly surprising.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2010-Jun-17 11:47", "status": "abandoned", "created": "2010-Mar-15 13:38", "fixed_version": "2010-Mar-15 13:38", "broken_version": "v070400", "priority": "4", "subsystem": "Win32", "assigned_to": "", "derived_from": "", "creator": "rrati", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tannenba@cs.wisc.edu,matt@cs.wisc.edu, rrati@redhat.com, pmackinn@redhat.com", "due_date": ""}