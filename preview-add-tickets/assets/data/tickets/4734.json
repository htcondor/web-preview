{"id": 4734, "title": "Ticket #4734: Improve debugging tools for JobRouter", "description": "<blockquote>\nNote: a (very) preliminary version of the condor_job_router_info tool was secretly added to 8.2.4. as ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4569\" title=\"Debugging tools for JobRouter.\">#4569</a></span>.  This ticket is for the devel series where we address the limitations and non-maintainable code issues of the preliminary version.\n\n<p>We've received strong feedback from OSG site admins that the job router is quite difficult to debug. We'd like to see some client tools to help analyze setups.\nSuggestions we've received:\n</p><ol>\n<li>Have a tool which can print all the routes (with or without defaults) and warn about any syntax errors (people often forget line continuations).\n</li><li>Have a tool which can print all jobs matching the umbrella requirements and, for each job, print the route names which match.\n</li><li>Given a single job and a route name, determine whether the job passes the umbrella requirements, passes the route requirements, and print the changes the router would make.\n</li></ol>\n\n<p>To help motivate why we ask for these tools, See Bob Ball's notes from deploying the HTCondor-CE:\n&amp;#65533;https://www.aglt2.org/wiki/bin/view/AGLT2/CondorCE\nNot all bullet-points result in bugs or work item - it should give an flavor of what a knowledgable sysadmin finds confusing.\n\n</p><p><span class=\"subsection\"></span></p><h3>issues brought up on review of #4569 by Alan De Smet</h3>\nThings to change:\n<ul>\n<li>Implementation of the class Scheduler is duplicated in job_router_tool.cpp and schedd_main.cpp, and they are slightly different. This will likely surprise anyone updating the code in the future. There is non-obvious behavior hiding in there. The code should be unified.  Perhaps an additional  constructor argument triggering different behavior (if a <code>ClassAdCollection</code> * is passed in, don't new up a m_consumer and m_mirror, instead store the pointer and return it from <code>GetClassAds</code>.)\n</li><li>The tool version of <code>Scheduler::GetClassAds</code> only returning something for m_id==0 is magical.  Perhaps instead call some sort of <code>Scheduler::SetClassAds</code> to set the pointer on the first instance instead of relying on the m_id being 0.\n</li><li>It looks like <code>JobRouter::set_schedds</code> leaks whatever Schedulers were present before. I think the old ones should be stop()ed and deleted.  It also seems like a landmine for an external party to hand in newly allocated memory for <code>JobRouter</code> to manage.  Perhaps just pass in the two param names and let <code>JobRouter</code> handle instantiation. Or maybe have a second <code>JobRouter::JobRouter</code> that takes the param names to use.\n</li><li>Scheduler::id() is unused; strike.\n</li><li>In job_router_tool's main, if read_classad_file fails, should probably exit after the message. By continuing it seems likely that the message will be overlooked and the user will get unexpected behavior.\n</li><li>job_router_tool's main, checking !job_files.isEmpty() before iterating over it seems unnecessary. Shouldn't it merrily iterate 0 times?\n</li><li>class <code>CondorQClassAdFileParseHelper</code> is duplicated 3 times with minor variations: src/condor_q.V6/queue.cpp,src/condor_utils/compat_classad.cpp, src/condor_job_router/job_router_tool.cpp.  (It's called <code>CondorClassAdFileParseHelper</code> in compat_classad.cpp) They should be unified as much as possible. (Perhaps adding sub-classes to handle any necessary differences?) The same goes for the function read_classad_file() duplicated in src/condor_q.V6/queue.cpp and src/condor_job_router/job_router_tool.cpp.\n</li><li>class <code>JobLogMirror</code> in job_router_tool.cpp appears to be unused. Strike.\n</li></ul>\n\n<p>Other things to consider:\n</p><ul>\n<li>JobRouter::dump_routes: Consider using the iterator interface (m_routes-&gt;begin()/end()) as more robust, just in case someone later adds an inner loop over the routes.\n</li><li>JobRouter::dump_routes: Consider looking up Universe string when writing <code>TargetUniverse</code>.\n</li><li>JobRouter::dump_routes: Why is <code>CurrentRoutedJobs</code> not reported?\n</li><li>JobRouter::~JobRouter: Do we want to stop() the scheduler objects if m_operate_as_tool? What does Scheduler::stop do?\n</li><li>job_router_tool.cpp my_exit: Seems unnecessary to flush stdout/err. Do we have systems where stdout/err don't get auto-flushed on exit?\n</li><li>job_router_tool.cpp usage: Seems silly to rely on tabstops; why not space indent?\n</li><li>job_router_tool.cpp: Why replace the default dprintf behavior? Why discard early dprintf messages (dprintf_set_output_intercept)?\n</li></ul>\n\n<p>Future work:\n</p><ul>\n<li>Expunge the disabled part of #if 1 in Scheduler.h\n</li><li>Should Scheduler::~Scheduler call m_mirror-&gt;stop() and eliminate Scheduler::stop to reduce possibilities of mis-use.\n</li><li>submit_job.cpp and job_router_tool.cpp duplicate a bunch of functions: claim_job, yield_job, submit_job, push_dirty_attributes, push_classad_diff, finalize_job, remove_job, Write*EventToUserLog, Initialize*Event, and <code>EmailTerminate</code> Event. The job_route_tool.cpp are simple stubs. Perhaps this would be more cleanly expressed by moving the functions into a pure virtual class, then letting the two files implement overrides.  It would be more verbose, but would make the intent more obvious and provide more specific error messages if a function was added to one but not the other.\n</li><li>JobRouterHookMgr's implementation is duplicated between <code>JobRouterHookMgr</code> and job_router_tool.cpp.  job_router_tool.cpp's version is basically all stubs. Perhaps move the interface and any shared functionality into a parent class, give each case it's own child class, then either pass in the specific child class into JobRouter::init, or have an option to JobRouter::init that selects which one to new into existance.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2014-Nov-24 16:44", "status": "new", "created": "2014-Nov-19 17:23", "fixed_version": "2014-Nov-19 17:23", "broken_version": "", "priority": "4", "subsystem": "Tools", "assigned_to": "johnkn", "derived_from": "#4555", "creator": "johnkn", "rust": "", "customer_group": "osg", "visibility": "public", "notify": "johnkn@cs.wisc.edu, blin@cs.wisc.edu, marian.zvada@cern.ch", "due_date": ""}