{"id": 131, "title": "Ticket #131: Decide between old and new Class Ad Libraries", "description": "<blockquote>\nThe burden and confusion of having two similar yet different classad libraries really needs to end.  For example, the Job Router is very difficult to configure since some expressions need to be written in new classad syntax and other with old.  At this point I literally don't care which one we use in the Condor system moving forward, just so we get out of having our feet simultaneously in two different ponds.\n\n<p><strong>Some pro/con considerations:</strong>\n\n</p><p></p><ul>\n<li>Old classads have withstood the test of time; going with new classads will likely have a \"tail\" of bug fixing and performance tweaking for quite some time after any switchover is completed.\n\n<p></p></li><li>The main features users wanted from new classads were functions, lists, and conditionals.  These all exist nowadays in old classads. Another feature of new classads, nested classads, would not be very difficult to back-port into old classads.\n\n<p></p></li><li>The scoping and \"ports\" strategy of new classads would enable a clear path towards gang-matching, and it is not clear this scoping strategy would be easy to back-port to old classads.\n\n<p></p></li><li>New classads have a 'cleaner' language specification, an implementation in Java as well as C++, and can neatly stand on their own as a separate library.\n\n<p></p></li><li>The only tools we ship in Condor that use new classads are better-analyze, job router, and stork.  The first two are straightforward to switch to old classads.  Stork would be much much more difficult because it relies on new classad collection.  But it is looking like LSU will be taking over stork development into the future, so stork may no longer be our direct concern.\n\n<p></p></li><li>We have already invested a lot of project $$$ on new Classads.\n</li></ul>\n\n<p><strong>Todo list if we stick with old classads</strong>\n\n</p><p></p><ol>\n<li>Convert the job router to old classads (3 days)\n\n<p></p></li><li>Convert condor_q -better-analyze to old classads (4 days)\n</li></ol>\n\n<p><strong>Todo list if we stick with new classads</strong>\n\n</p><p>Note, only the first two items below are required.\n\n</p><p></p><ol>\n<li>Understand what calls Condor actually makes into old classads.  The thinking here is we do not need to translate every public interface in old classads - we just need to translate the ones Condor uses. (2 days)\n\n<p></p></li><li>Write a shim library (and/or resurrect Nick's work here) to translate the old classad API into the new classad API.  <em>Note: in phase one, we will not leverage new classad collections</em>.  At this point Condor is running with new classads. (3 or 4 weeks)\n\n<p></p></li><li>As time permits, convert one daemon at a time from the old api to the new api; when/if all daemons are converted, the shim library can be removed.\n\n<p></p></li><li>As time permits, experiment with moving the schedd from old classad collections to new classad collections.</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<em>2009-Jan-28 08:46:50 by miron:</em> <br/>\n\nDo I understanding it correctly that switching to new classads will require changes in policy expressions throughout Condor?\n\n<p></p><hr/>\n<em>2009-Jan-28 08:47:46 by tannenba:</em> <br/>\n\nI think we can mostly deal with this either in the translation layer (e.g. replacing \"TARGET.xxx\" with \"other.xxxx\"), and/or by adding functions that currently only exist in old classads into new classads (danb has already spent some time doing this to deal w/ job router confusion....).\n\n<p>When I added functions to old classads, i tried to keep the api the same as new classads specifically to address this concern.\n\n</p><p>The messy part will come when people use functionality unique to new classads (such as nested ads) in pool with older versions of Condor.  I was thinking in phase 1, we would avoid the problem all together by having an option to new classads that would disable non-compatible constructs.\n\n</p><p></p><hr/>\n<em>2009-Jan-28 10:38:57 by adesmet:</em> <br/>\n\nNew <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> offers us functionality that we either don't have (nested <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, 3+way matching) or that we use crude workarounds for (lists).  We haven't been clamoring for that functionality because we haven't had it.  Old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> seems good enough, but that may entirely be an artifact of our having lowered our exceptions, of having gotten comfortable with the limitations.  It's hard to project how much benefit we would get because we've stopped looking for it.\n\n<p><em>Two examples merged to list below</em>\n\n</p><p>The exact benefits are hard to predict.  Perhaps the uncertainty makes it an unwise investment.  But there are benefits that we sadly stopped considering.\n\n</p><p></p><hr/>\n<em>2009-Jan-28 11:01:53 by adesmet:</em> <br/>\n\nMore things new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> could give us:\n\n<p><em>Three examples merged to list below</em>\n</p><hr/>\n<em>2009-Jan-28 11:54:17 by epaulson:</em> <br/>\n\nAre you sure about -better-analyze only taking 4 days to port? ncoleman spent a long time building that suggestion feature in new classads.\n\n<p>The nice thing about it is it's not user-visible, unlike stork or the job router. -better-analyze could stay new classads, be ported to old classads, or plugged into Mechanical Turk and answered by hand and no one would ever know. Given that new classads will continue to exist even if Condor never uses them (do our European friends still use them?) there's not a pressing need to through new classads out of -better-analyze\n\n</p><p></p><hr/>\n<em>2009-Jan-28 14:17:40 by adesmet:</em> <br/>\n\n<em>One examples merged to list below</em>\n\n<p></p><hr/>\n<em>2009-Jan-28 14:36:21 by adesmet:</em> <br/>\n\nCon to new Class-Ads:\n<ul>\n<li>Condor internals benefits to new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> will likely be at least a year in the future, maybe more.  After the initial conversion, we would still be using the old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> subset.  The  limitation is backward compatibility.  Say we switch to new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> in 7.3.  If we want 7.4 and 7.2 to play nice together, 7.4 will need to stick with old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> by default.  Obviously a user could turn it on if they knew they had a homogenous 7.4+ cluster, but Condor out of the box couldn't.  So not until 7.5 (if we're willing to break compatibility between 7.2 and 7.6) could we use it by default.  So for probably a major revision, users won't get automatic benefits from new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.\n</li></ul>\n\n<p></p><hr/>\n<em>2009-Feb-03 16:05:27 by adesmet:</em> <br/>\n\nThis list merges items from previous posts (I'll delete them later).  Feel free to edit this comment to add additional items.\n\n<p><strong class=\"two\">Possible uses for New ClassAds</strong>\n\n</p><p></p><ul>\n<li><strong>More robust string lists:</strong> stringlist* functions are a serviceable replacement for real lists. But they're not a general solution; you have to pick a delimiter that you cannot use in items in your list. This is workable for lists of IP addresses, or sinful strings. But what if I want a list of the last ten <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=HoldReasons\" title=\"Hold Reasons\">HoldReasons</a></span> where just about any character might be appear in the item?\n</li><li><strong>Cleaner job arguments:</strong> The way the \"new\" arguments system for submit files stores stores the arguments internally is a deeply non-obvious hack. It's probably the best we can do with what we have, but it's a recipe for confusion. We need to maintain code just for the case of encoding and decoding this system. With new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, we could store it as a list and just grab the list and drop it into the call without any further decoding necessary.\n</li><li><strong>Simpler Condor-C job ads:</strong> Instead of the REMOTE_ hack for Condor-C jobs to set attributes on the remote machine, we could use nice clean nested <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.\n</li><li><strong>Storing information on multi-hop jobs:</strong> If we want to pull back multiple levels of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> from remote machines, again, nested <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> are an elegant solution. This would make it easy to answer questions like \"My job didn't run as expected on the remote machine; what did it's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> over there look like?\"\n</li><li><strong><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> of running job in MachineAd:</strong> Machine ads could suck in the entire job ad and add it as a nested <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span>, providing even more information for analysis, debugging, and policy writing.\n</li><li><strong>Simpler cross-slot policies:</strong> Currently we used STARTD_SLOT_ATTRS to allow policy decisions that span multiple slots on the same machine. This is a crude workaround. It requires planning ahead (which attributes will I care about?). It pollutes the \"main\" classad with lots of other details. It's just messy. With nested <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> we could do several clever things: 1. Each slot <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> contains entire copies of the other slots as sub-ads. (More complex, but easy to plug into the existing system) 2. Instead of an ad per slot, you have an ad per startd that contains one sub-ad per slot. (More general, but requires the negotiator and other layers to learn a new format.)\n</li><li><strong>Hierarchical matching:</strong> When advertising a cluster of multiple slots, you could include the full details on each slot.  <a class=\"external\" href=\"http://www.cs.wisc.edu/condor/CondorWeek2008/condor_presentations/rynge_osg_matchmaking.pdf\">OSG is already doing this</a>, and ended up having to flatten the ads, exploding a relatively small number of big ads into 15,000 ads.  They then had to write new layers of software to prune the 15,000 ads down to more manageable numbers.\n</li><li><strong>SchemaVerification:</strong> Suppose a Condor administrator wants all jobs submitted into their system to be checked to make sure they have certain attributes whose values are legal in order to be able to be submitted. An example of such an attribute could be a human readable description field for what the job is supposed to be doing added via the +. One could have the <code>Start</code> expression perform this verification, but in the case of flocked jobs the onus is on administratively different entites to all do the same schema check since the default behavior is permissive. Using New <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, a schema check Ad could be made to which the job ad must initially match in order to be let into the Condor system and put into the queue. Different <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SchemCheckAds\" title=\"Schem Check Ads\">SchemCheckAds</a></span> could be grouped under one <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MasterSchemaCheck\" title=\"Master Schema Check\">MasterSchemaCheck</a></span> Ad with a master requirements expression to see if a job should be schema checked at all.\n</li><li><strong>Machine-wide attributes:</strong> Some Machine ad attributes (<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TotalCpus\" title=\"Total Cpus\">TotalCpus</a></span>, memory, disk) are machine-wide, while others are per-slot.  The Machine-wide ones could be unified into a single sub-ad.\n</li></ul>\n\n<p></p><hr/>\n<em>2009-Feb-05 12:17:06 by tannenba:</em> <br/>\n\nOk, first step here is to understand how old ads are being used in Condor, and how that relates to new ads.  Sub ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=187\" onclick=\"get_ticket_and_populate_wrapper('187'); return false;\" title=\"Analyze use of old classads in Condor\">#187</a></span> created.\n\n<p></p><hr/>\n<em>2010-Jan-12 14:56:34 by tannenba:</em> <br/>\n\nOk, it is decided.  New <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> library will go into v7.5.x.  Whoot!\n\n<p>So resolving this \"lets decide\" ticket, as sub-tickets hold the actual work items.</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=187\" onclick=\"get_ticket_and_populate_wrapper('187'); return false;\" title=\"Analyze use of old classads in Condor\">#187</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAnalyze use of old classads in Condor</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nBenchmark new classads vs. old</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1109\" onclick=\"get_ticket_and_populate_wrapper('1109'); return false;\" title=\"Remove old ClassAds library\">#1109</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRemove old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> library</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=1164\" onclick=\"get_ticket_and_populate_wrapper('1164'); return false;\" title=\"Switch from old ClassAd to new ClassAd API\">#1164</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nSwitch from old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> to new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> API</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "", "type": "todo", "last_change": "2010-Jan-12 14:57", "status": "resolved", "created": "2009-Jan-27 13:50", "fixed_version": "2009-Jan-27 13:50", "broken_version": "", "priority": "3", "subsystem": "Libs", "assigned_to": "tannenba", "derived_from": "", "creator": "tannenba", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu", "due_date": ""}