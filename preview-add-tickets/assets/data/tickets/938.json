{"id": 938, "title": "Ticket #938: Cream Gahp should batch requests", "description": "<blockquote>\nThe cream api allows the client to provide a list of jobs upon which an action should be performed (submit, start, status, suspend, resume, cancel, purge). Condor currently invokes these commands repeatedly, once per job, which is inefficient.\n\n<p>Condor should batch these requests when possible. Execution of a request could be delayed a couple of seconds to wait for additional requests that could be batched with it.\n\n</p><p>This batching could be done in either the gridmanager or the cream_gahp.\n\n</p><p>Note that the specific case of batching status is <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=939\" onclick=\"get_ticket_and_populate_wrapper('939'); return false;\" title=\"Issue single status command for all cream jobs\">#939</a></span>.  That said, individual job statuses are still issued when a job is initially submitted, so there is still benefit to batching those.\n\n</p><p></p><hr/>\n<span class=\"section\"><h2>Plan as executed </h2></span>\n\n<p>Batching commands on the gridmanager side provide too complex.  The design was complex to start, and ignored that internally the gridmanager's queue is a list of strings.  Collecting up relevant commands would haven necessitated rearchitecting the entire queue system to make commands some more complex object, and fixing every section of code that touched the queue.  This turned into a rathole and was abandoned.\n\n</p><p>Instead we're doing the batching in the cream_gahp, which has proven to the simplier.\n\n</p><p>No waiting was implemented, but significant benefits are already being seen.  The exact benefit will depend on the load; do the workers clear out the queue faster than batchable requests are added?\n\n</p><p><span class=\"subsection\"></span></p><h3>Command status</h3>\n\n<p>These are the commands that are run once (or more) per job:\n</p><ul>\n<li>CREAM_JOB_CANCEL - DONE. condor_rming a 500 job run generated 500 calls batched into 142. Note: may never be called in the normal stream of events.\n</li><li>CREAM_JOB_PURGE - DONE. Cut 500 job run from 500 calls to 78.\n</li><li>CREAM_JOB_REGISTER\n</li><li>CREAM_JOB_START - DONE. Cut 1000 job run from 1000 calls to 150ish, or 500 calls to 81\n</li><li>CREAM_SET_LEASE\n</li><li>CREAM_JOB_STATUS - Called once per job after CREAM_JOB_REGISTER\n</li></ul>\n\n<p></p><hr/>\n<span class=\"section\"><h2>Abandoned Plan</h2></span>\n\n<p>Both the condor_gridmanager and the cream_gahp are doing queuing of GAHP commands.  The gridmanager does it for historic reasons.  The gridmanager does so for historic reasons; the GT2 GAHP immediately turns commands into outbound requests.\n\n</p><p>The gridmanager implements the queuing in GahpClient::now_pending (<a class=\"file\" href=\"rlog?f=src/condor_gridmanager/gahp-client.cpp\">/src/condor_gridmanager/gahp-client.cpp</a> 2128) and GahpServer::poll (<a class=\"file\" href=\"rlog?f=src/condor_gridmanager/gahp-client.cpp\">/src/condor_gridmanager/gahp-client.cpp</a> 2344).  The cream_gahp implements queuing in enqueue_request (<a class=\"file\" href=\"rlog?f=src/cream_gahp/cream_gahp_server.cpp\">/src/cream_gahp/cream_gahp_server.cpp</a> 291) and worker_main (<a class=\"file\" href=\"rlog?f=src/cream_gahp/cream_gahp_server.cpp\">/src/cream_gahp/cream_gahp_server.cpp</a> 1891)\n\n</p><p>The gridmanager has an timeouts on requests handed off to the GAHP. (TODO: Find it)  This is again historic, as the GT GAHP wasn't trusted to not occasionally drop outstanding commands on the ground.  This may cause problems if we batch commands in the gridmanager, and responses may take longer as we collect up commands, wait for the remote side to do more work, or simply waiting for longer output to be collected.\n\n</p><p></p><hr/>\n<span class=\"section\"><h2>Rationale </h2></span>\n\n<p><span class=\"subsection\"></span></p><h3>Why the gridmanager instead of the GAHP?</h3>\n\n<p>Since both the gridmanager and the gahp implement queues of commands, this could have been implemented in the GAHP.  So why not?  The pros and cons of each are:\n\n</p><p><strong>GAHP</strong>\n</p><ul>\n<li>+ Relatively isolated\n</li><li>+ All commands already go through the queue\n</li><li>- Will need to explode single response into multiple responses for the multiple input commands; we'll need to carry around mapping information to associate them.\n</li><li>- Complicates the relatively simple GAHP.  GAHPs should be thin wrappers over grid specific APIs, smarts should be in the gridmanager.\n</li></ul>\n\n<p><strong>Gridmanager</strong>\n</p><ul>\n<li>+ Core logic could potentially be reused for other grid types, providing future benefits.\n</li><li>+ No need to disable the gridmanager's command timeout\n</li><li>- Commands don't necessarily end up in the queue at all; only if too many commands are outstanding.\n</li></ul>\n\n<p>Ultimately they are very simple.  I was ultimately swayed by a desire to keeps GAHPs as simple as possible, and a hope that this logic might be reused directly for other grid types in the future.\n\n</p><p></p><hr/>\n<span class=\"section\"><h2>Plan </h2></span>\n\n<p>Changes will all occur in the gridmanager, nothing will change in the GAHP.  (This assumes that the necessary batch commands exist in the GAHP.)\n\n</p><p></p><ol>\n<li>Change the gridmanager to <em>always</em> queue commands.  This shouldn't necessarily increase latency, will simplify the code (reducing two paths (immediate and queued) into one), and will make the following more effective.\n<ul>\n<li>Break GahpClient::now_pending into two commands: GahpClient::now_pending (always queues command) and GahpClient::run_pending (always sends the command)\n</li></ul>\n\n<p></p></li><li>Pick a command to start with.  start or purge seem like good candidates.  Whichever we pick is hereby the batchable command.\n\n<p></p></li><li>When we grab the front of the queue of outstanding commands, we'll check if it's a batchable command.  If it is, we'll spin the queue looking for other commands of the same type, extract them, and merge the lot into a single command.  At this point we start seeing benefits, but only if the gridmanager is so busy that commands are arriving in the queue faster than they're being dispatched.\n\n<p></p></li><li>To items in the job queue, add an \"arrived in queue\" time.\n\n<p></p></li><li>When pulling items out of the queue, check the arrival time.  If the job is batchable, and (arrive_time + 5 seconds) &lt; now_time, ignore it and move down to the next item in the queue.  If you hit the end of the queue without finding a command, but there is at least one job in the queue, reset the GahpServer::poll_timer to the time of the next job.  (The \"5 seconds\" is probably a user configurable knob, but should probably be small and aggressive, otherwise the system feels unresponsive.)  At this point we should see the meat of our optimization benefit.\n\n<p></p></li><li>work through the remaining command that we want to batch.</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<em>2009-Dec-21 15:02:30 by adesmet:</em> <br/>\n\nReverted 12bee0d86c0f7c9a5a6744a1eab19a521c6500ef as it was accidentally pushed into V7_5_0-branch and is buggy (it slows requests by a minute).\n\n<p>Todo: Pull 12bee0d86c0f7c9a5a6744a1eab19a521c6500ef (or possibly the inverse of b908699700598db660706ce1d289b6b21a2c3df1).  Use as a patch (just just a revert of b90) to investigate claim of slowness and fix.  Either force to fire more promptly after an addition, or move to own timer.\n\n</p><p>But first, fix some earlier commits breaking Windows.\n\n</p><p></p><hr/>\n<em>2010-Jan-14 13:44:51 by adesmet:</em> <br/>\n\nApproximate frequency of commands, based on whatever happened to be in my logs at the moment.  This gives an idea of where the best payoff is.\n<div class=\"code\">\n<pre class=\"code\">      2 CREAM_PROXY_RENEW\n     10 CREAM_DELEGATE\n     12 CREAM_PING\n     13 ASYNC_MODE_ON\n     13 COMMANDS\n     13 RESPONSE_PREFIX\n     24 CACHE_PROXY_FROM_FILE\n     43 USE_CACHED_PROXY\n   1012 INITIALIZE_FROM_FILE\n   2001 CREAM_JOB_CANCEL\n   3214 CREAM_JOB_STATUS\n   3917 CREAM_JOB_PURGE\n   4005 CREAM_JOB_START\n   4121 CREAM_JOB_REGISTER\n   5106 CREAM_SET_LEASE\n  18308 RESULTS\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-Jan-14 13:52:47 by adesmet:</em> <br/>\n\nA single 1000 job run.\n<div class=\"code\">\n<pre class=\"code\">      1 'ASYNC_MODE_ON'\n      1 'COMMANDS'\n      1 'CREAM_DELEGATE\n      1 'CREAM_PING\n      1 'INITIALIZE_FROM_FILE\n      1 'RESPONSE_PREFIX\n      2 'CACHE_PROXY_FROM_FILE\n      4 'USE_CACHED_PROXY\n   1000 'CREAM_JOB_PURGE\n   1000 'CREAM_JOB_REGISTER\n   1000 'CREAM_JOB_START\n   1000 'CREAM_SET_LEASE\n   1006 'CREAM_JOB_STATUS\n   3288 'RESULTS'\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-Jan-15 14:15:02 by adesmet:</em> <br/>\n\nI dub thee done: the two most important commands (START and PURGE) are implemented, as well as a bonus command (CANCEL) because it was annoying me and was easy.  Future work might include:\n\n<p></p><ul>\n<li>Delay briefly before grabbing a batchable job, skipping ahead to the next job.  This will increase the likelyhood of getting a bigger batch with bigger payoff, and reduce the number of times a worker wakes to process a single job.  Possiblities include the following.  Note that all will involve adding some sort of \"added to queue\" time to the Request struct, will slightly increase latency (probably not noticable; CREAM has a lot of latency in polling), and increase general complexity. In particular, the current worker system has no concept of \"There are jobs waiting, but sleep for a bit.\"\n<ul>\n<li>Don't touch any job until 5 seconds have passed.  Most straightforward.\n</li><li>Don't touch any batchable job until 5 seconds have passed. Slightly more complex.  Requires pulling jobs from the middle of the queue.\n</li><li>If there is only one job of a given batchable type, and it's been less than 5 seconds in the queue, skip it. A bit more complex.  Requires deeper inspection.\n</li></ul>\n</li><li>Batch other commands.  The remaining commands are significantly more complex; some may not support batching.</li></ul>\n</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1931\" onclick=\"get_ticket_and_populate_wrapper('1931'); return false;\" title=\"Improve cream_gahp command batching\">#1931</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nImprove cream_gahp command batching</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-20 16:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25205\">[25205]</a></span>: - Document work on Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=938\" onclick=\"get_ticket_and_populate_wrapper('938'); return false;\" title=\"Cream Gahp should batch requests\">#938</a></span>: Cream Gahp should batch requests - Fix typoes in a few comments.  (By Alan De Smet )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-15 14:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16904\">[16904]</a></span>: Handle CREAM_JOB_CANCEL commands in batches. Speeds up big condor_rms. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=938\" onclick=\"get_ticket_and_populate_wrapper('938'); return false;\" title=\"Cream Gahp should batch requests\">#938</a></span>  (By Alan De Smet )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-14 16:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16897\">[16897]</a></span>: Handle CREAM_JOB_PURGE commands in batches. In the process refactored some of the CREAM_JOB_START batching code to share code. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=938\" onclick=\"get_ticket_and_populate_wrapper('938'); return false;\" title=\"Cream Gahp should batch requests\">#938</a></span>  (By Alan De Smet )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-14 15:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16895\">[16895]</a></span>: Handle CREAM_JOB_START commands in batches. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=938\" onclick=\"get_ticket_and_populate_wrapper('938'); return false;\" title=\"Cream Gahp should batch requests\">#938</a></span>  (By Alan De Smet )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-21 14:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16749\">[16749]</a></span>: Temporary revert of work for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=938\" onclick=\"get_ticket_and_populate_wrapper('938'); return false;\" title=\"Cream Gahp should batch requests\">#938</a></span>: code wasn't ready for inclusion into V7_5_0-branch, but was merged there. Reverting, merging to upstream branches, then will reapply on V7_5-cream_hardening-branch\u00a0[...]\n (By Alan De Smet )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-16 16:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16693\">[16693]</a></span>: Always route gahp commands via the queue. This is preliminary work on <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=938\" onclick=\"get_ticket_and_populate_wrapper('938'); return false;\" title=\"Cream Gahp should batch requests\">#938</a></span>  (By Alan De Smet )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Jan-15 14:15", "status": "resolved", "created": "2009-Nov-12 15:23", "fixed_version": "2009-Nov-12 15:23", "broken_version": "v070500", "priority": "4", "subsystem": "Grid", "assigned_to": "adesmet", "derived_from": "#897", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": "20100114"}