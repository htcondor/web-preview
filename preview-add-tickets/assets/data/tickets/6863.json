{"id": 6863, "title": "Ticket #6863: scitokens: can't do secure file read/write with non-root WSGI apps", "description": "<blockquote>\nThe OAuth credmon webserver reads information from \"keyfiles\" that the condor_credd writes out at submit time if a user requests OAuth tokens that don't exist. Currently, the credd writes these files as (owned by) root using <code>write_secure_file()</code> with <code>as_root = true</code> . See line 343 in <a class=\"file\" href=\"rlog?f=src/condor_credd/credd.cpp\">/src/condor_credd/credd.cpp</a> . This is a problem if the webserver is running as non-root, which is likely if the admin is running the webserver as a WSGI app. For now, we should assume that it's running as the same effective user as condor.\n\n<p>More thinking/code may be needed later for the case where an admin is running condor as root, but the webserver is running as a less privileged user.\n\n</p><p>This ticket has expanded beyond reading/writing to the keyfile to the more general case of any time condor read/writes to files that are going to be read/written by a non-root process (e.g. the OAuth Credmon web application running as a WSGI app).</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Jan-18 13:56:46 by jpatton:</em> <br/>\n\nThis needs some further discussion. <code>as_root = true</code> should not be a problem if the condor daemons are truly running under a different actual uid, but is a problem if the daemons are actually running as root but effectively as a different user (e.g. the same user as the WSGI application that reads the keyfile and writes tokens).\n\n<p>Using <code>as_root = true</code> is also causing problems where <code>read_secure_file()</code> is being used in the credd and shadow.\n\n</p><p>WSGI apps should not be started as root (though they can be given sudo privs). We should think about this carefully.\n\n</p><p></p><hr/>\n<em>2019-Jan-18 16:06:15 by jpatton:</em> <br/>\n\nAfter today's discussion, let's set some short-term and long-term fixes:\n\n<p><strong>Short term</strong>: Add a config option (<code>CREDD_TRUST_FILES</code> or something of TJ's liking) that would allow the credd and shadow (and starter?) to trust files in <code>SEC_CREDENTIAL_DIRECTORY</code> regardless of which uid owns the files or what the permissions of the files are set to. This will allow testers like Duncan to turn on this knob and allow the credmon and its related WSGI app to work without running as root.\n\n</p><p>On the admin side, admins will need to set the GID sticky bit on the directory for <code>SEC_CREDENTIAL_DIRECTORY</code> and set group ownership to a group that includes both condor and apache (or whatever user the WSGI app is running as). Files should be written with at least <code>u+r</code> and <code>g+r</code> permissions.\n\n</p><p><strong>Long term</strong>: We need some way to give the credd and shadow confidence that token and key files are only readable and writable by root and a trusted user (the one running the WSGI application). We could check permissions to make sure they are not group or world readable, or we could be even more strict and check that the owner matches a uid given by the admin in the condor_config. This requires some more thinking, so we should create a new ticket to track progress for the longer term fix.\n\n</p><p></p><hr/>\n<em>2019-Feb-06 13:54:11 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p></p><ul>\n<li>Ideally, read_secure_file() would have an option to verify file permissions that allows the group read permission that write_secure_file() can set. But that's not needed for this ticket.</li></ul>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jan-24 13:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56072\">[56072]</a></span>: fix for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6863\" title=\"scitokens: can't do secure file read/write with non-root WSGI apps\">#6863</a></span> and <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6865\" title=\"scitokens: Improve CREDD TOKENS mode and name\">#6865</a></span>, change TOKENS param knob to CREDD_OAUTH_MODE, and add TRUST_CREDENTIAL_DIRECTORY knob The OAUTH command that condor_submit uses now writes key files owned by condor and with 0640 permissions so that they can be read by a webserver  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2019-Feb-11 13:14", "status": "resolved", "created": "2019-Jan-16 11:42", "fixed_version": "2019-Jan-16 11:42", "broken_version": "v080800", "priority": "2", "subsystem": "DaemonsSubmitNode", "assigned_to": "johnkn", "derived_from": "#6513", "creator": "jpatton", "rust": "", "customer_group": "scitokens", "visibility": "public", "notify": "jpatton@cs.wisc.edu,tannenba@cs.wisc.edu", "due_date": ""}