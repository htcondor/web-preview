{"id": 642, "title": "Ticket #642: Reconsider MAX_JOBS_RUNNING", "description": "<blockquote>\nPoor <code>MAX_JOBS_RUNNING</code> has problems.\n\n<p></p><ol>\n<li>An admin can't do something clever where he might want up to 200 vanilla jobs, 50 standard jobs, and 200 scheduler jobs allowed simultaneously.\n\n<p></p></li><li><code>START_SCHEDULER_UNIVERSE</code> overlaps =MAX_JOBS_RUNNING='s functionality.\n\n<p></p></li><li>Grid jobs entirely ignore the setting.  While the nature of their design means they tend to use less resources, an admin may yet want to limit them.  <code>GRIDMANAGER_MAX_SUBMITTED_JOBS_PER_RESOURCE</code> provides similar, but not identical functionality.\n\n<p></p></li><li>The schedd will refuse to start higher user priority jobs if <code>MAX_JOBS_RUNNING</code> is hit, as opposed to potentially stopping those jobs. (Previously reported as <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=415\" onclick=\"get_ticket_and_populate_wrapper('415'); return false;\" title=\"Schedd won't start higher user priority jobs if MAX_JOBS_RUNNING hit\">#415</a></span>)\n</li></ol>\n\n<p>So, how to move forward?\n\n</p><p></p><ol>\n<li>We could give each universe its own option <code>MAX_SCHEDULER_JOBS_RUNNING</code>, <code>MAX_VANILLA_JOBS_RUNNING</code>, and so on.\n\n<p></p></li><li>We could overhaul the system with one or more boolean tests.\n</li></ol>\n\n<p>Assuming the last option, here is a straw man proposal:\n\n</p><p>There is a single setting: <code>MAY_START_JOB</code>.  It is boolean, and defaults to:\n</p><div class=\"code\">\n<pre class=\"code\">MAY_START_JOB = (NumTotalJobsRunning - NumGridJobsRunning) &lt; MAX_JOBS_RUNNING\n</pre></div>\n\nThis is obviously a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> expression.  When a new job is being considered to run, it is evaluated.  If true, the job may run, if false, it may not (the equivalent of hitting <code>MAX_JOBS_RUNNING</code>.  (Because of the nature of grid jobs, the schedd gets no say in when they start, so the expression is not considered. more on this in a moment.)  It can assume the presence of the following values:\n<ul>\n<li><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=NumTotalJobsRunning\" title=\"Num Total Jobs Running\">NumTotalJobsRunning</a></span> - The total number of jobs in the \"running\" state.\n</li><li>NumXXXJobsRunning - Where \"XXX\" is a universe (Grid, Vanilla, etc). The total number of jobs for this universe in the \"running\" state.\n</li><li><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=NumGridJobsSubmitted\" title=\"Num Grid Jobs Submitted\">NumGridJobsSubmitted</a></span> - The number of grid jobs that have been submitted to the remote site, without regard to the their running status\n</li><li>Universe - The universe number for the job that will run if this expression returns true.\nWe could also include useful things like the machine's load or space in the <code>SPOOL</code>.\n</li></ul>\n\n<p>Given this a user might decide to allow 200 jobs, but count standard jobs as two vanilla jobs:\n</p><div class=\"code\">\n<pre class=\"code\">STANDARD_UNIVERSE=1\nMAY_START_JOB = (NumTotalJobsRunning - NumGridJobsRunning + \\\n  NumStandardJobsRunning + 1 + (Universe==$(STANDARD_UNIVERSE)) ) \\\n  &lt;= MAX_JOBS_RUNNING\n</pre></div>\n\n\n<p>Or perhaps exempt local and scheduler jobs from the limits:\n</p><div class=\"code\">\n<pre class=\"code\">SCHEDULER_UNIVERSE=7\nLOCAL_UNIVERSE=12\nMAY_START_JOB = (NumTotalJobsRunning - NumGridJobsRunning - \\\n  NumSchedulerJobsRunning - NumLocalJobsRunning + \\\n  (Universe!=$(SCHEDULER_UNIVERSE) &amp;&amp; Universe!=$(LOCAL_UNIVERSE)) ) \\\n  &lt;= MAX_JOBS_RUNNING\n</pre></div>\n\n\n<p>None of this addresses the issue where the schedd won't stop a low priority job to run a high priority job (for any meaning of priority).  This can potentially be solved by giving <code>MAY_START_JOB</code> enough information to chose to temporarily break the limits to run the high priority job, then a matching <code>STOP_RUNNING_JOB</code> which has the same information and is evaluated regularly for running jobs.  If true, the job is stopped and returned to idle.  There are a lot of non-obvious details.\n\n</p><p>As noted above, this isn't very helpful for grid universe jobs, since the job will start or not based on the whims of the remote site.  What really matters is the decision to submit to the remote site.  A <code>MAY_SUBMIT_JOB</code> may be relevant, but will be more complex if the goal would be to absorb the existing <code>GRIDMANAGER_MAX_SUBMITTED_JOBS_PER_RESOURCE</code> setting, which makes decisions on a per-user per-remote-site basis.  This is possible, but will require a much more complex <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> context for the evaluation.  And of course none of this addresses wanting to set a global limit across all users and resources.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Jul-28 13:42:55 by adesmet:</em> <br/>\n\nAny consideration of this should probably be at least passingly familiar with\n<ul>\n<li><span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=334\" onclick=\"get_ticket_and_populate_wrapper('334'); return false;\" title=\"Meaning of MAX_JOBS_RUNNING inconsistent\">#334</a></span>: Meaning of MAX_JOBS_RUNNING inconsistent\n</li><li><span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=556\" onclick=\"get_ticket_and_populate_wrapper('556'); return false;\" title=\"MAX_JOBS_RUNNING inconsistent with queue after condor_rm -force\">#556</a></span>: MAX_JOBS_RUNNING inconsistent with queue after condor_rm -force\n</li></ul>\n\n<p></p><hr/>\n<em>2009-Jul-28 13:48:09 by gthain:</em> <br/>\n\nA while back, in a flightworthy meeting, we discussed a common problem with users benchmarking Condor with the \"out of the box\" settings.  Frequently, they'd hit things like MAX_JOBS_RUNNING, and without further investigation, think that (say) SGE was more scalable than Condor.  So, we agreed that our out of the box settings would be unlimited, and that folks could scale them back as needed.\n\n<p></p><hr/>\n<em>2009-Jul-28 13:56:27 by gthain:</em> <br/>\n\nI like MAY_START_JOB (perhaps not the name, maybe SCHEDULER_REQUIREMENTS).  We could also roll up the functionality of JOB_START_DELAY into MAY_START_JOB, and get rid of the JOB_START_DELAY and related knobs.\n\n<p>What ads is MAY_START_JOB evaluated in the context of? -- certainly the schedd, but also each job?  This means that it is evaluated at a different time than MAX_JOBS_RUNNING.\n\n</p><p></p><hr/>\n<em>2009-Jul-30 11:22:24 by matt:</em> <br/>\n\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=602\" onclick=\"get_ticket_and_populate_wrapper('602'); return false;\" title=\"scheduler universe jobs don't count as running jobs\">#602</a></span> is also related to this.\n\n<p>The proposed options could be implementation steps. We have a bug that needs to be resolved, and then some new functionality to help clean up the interface.\n\n</p><p></p><hr/>\n<em>2010-Feb-15 14:14:35 by danb:</em> <br/>\n\nThere is an additional concern with MAX_JOBS_RUNNING.  Currently, MAX_JOBS_RUNNING is enforced in two ways by the schedd:\n\n<p></p><ol>\n<li>do not get more resources during negotiation if MAX_JOBS_RUNNING is exceeded\n\n<p></p></li><li>kill some running jobs if MAX_JOBS_RUNNING is exceeded\n</li></ol>\n\n<p>People sometimes want the first behavior without the second behavior.  The proposed MAY_START_JOB expression would effectively do this.  The question is whether anybody would miss the second behavior.  Since manual adjustments to the number of running jobs can be made by the admin via condor_vacate_job, I think there is not a burning need for a policy knob that provides this functionality.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2010-Feb-15 14:16", "status": "new", "created": "2009-Jul-28 13:39", "fixed_version": "2009-Jul-28 13:39", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu,dan@hep.wisc.edu", "due_date": ""}