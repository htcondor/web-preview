{"id": 3530, "title": "Ticket #3530: Allow groups of jobs to dynamically blacklist bad hosts or sites", "description": "<blockquote>\nGoal: make it easy for a set of similar jobs to blacklist a host or site that has proven to be problematic.\n\n<p>Use case: I'm submitting a bunch of very similar jobs to the grid, perhaps OSG.  As is the nature of the grid, I'm dealing with a very mixed environment.  While I'm using my Requirements to filter machines I can't use as best I can, in practice I'm likely to run into machines or entire sites that seem like they'll work, but in practice cause my job to fail.  So I want to avoid these machines and sites.  Ideally I'd like this to be automatic, as the grid is constantly in flux and I have better things to do than checking my logs to identify bad machines and adjust things to avoid them.  I am not the pool or grid administrator, so solutions that involve changing the configuration of Condor are not an option.\n\n</p><p>Today's solution: Assuming I know my job usually works, and that restarting it on a different machine will usually fix the problem, I can:\n</p><ol>\n<li>Set leave_in_queue to leave the job in the queue if it doesn't return a satisfactory exit code.\n</li><li>Set match_list_length=5\n</li><li>Set requirements to reject any matches that appear in the list.\n</li></ol>\n\n<p>Today's problems:\n</p><ul>\n<li>This causes autocluster fragmentation as various jobs match lists change.\n</li><li>There is no global understanding; if I have a black hole machine that causes jobs to reliably fail, potentially every single job will have to land there once before moving to a machine they can succeed on.\n</li></ul>\n\n<p>What is desired:  A user accessible way to say:\n</p><ol>\n<li>These jobs are 'similar'\n</li><li>If one of these similar jobs runs on a machine and is unhappy, add the machine to a blacklist.  The blacklist might be maintained by the schedd, the negotiator, or someone else. (for varying definitions of unhappy, but based on something in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> is the obvious choice, especially the exit code)\n</li><li>All of the similar jobs consult the blacklist and refuse those machines, perhaps via the requirements expression, but there are other possible solutions.\n</li><li>Expire entries from the blacklist after X seconds.\n</li></ol>\n\n<p>Short term solution: Create a new tool that monitors job logs to identify problematic sites.  The tool maintains its own blacklist.  When a new machine (or potentially site!) is identified as being problematic, add it to the blacklist, then condor_qedit the similar jobs to set Blacklist=foo.example.com,bar,example.com, etc.  Then ensure that the jobs all have requirements=!stringListMember(Name,Blacklist)\n\n</p><p>Questions:\n</p><ul>\n<li>When do you expire entries from the blacklist?\n</li><li>Can you send a solitary \"probe\" job to a new machine (or an old machine we're considering removing from the blacklist) before machine is deemed acceptable?\n</li><li>What if to detect that a job failed, I need to check the output?</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2013-Mar-06 14:53:53 by bbockelm:</em> <br/>\n\nHi Alan,\n\n<p>Can't the tool be the job_router?  Dan and I recently have put in the ability for it to edit jobs that match a certain set of requirements.  Combined with an arbitrary script callout, it seems we are fairly close.\n\n</p><p>A few other thoughts:\n\n</p><p></p><ol>\n<li>Keep the blacklist in the submitter ad, and have the negotiator automatically insert this list during the matchmaking cycle.\n</li><li>Allow the schedd and job to provide a \"minimum job time\" and enforce this on the schedd side.\n</li></ol>\n\n<p>Brian</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2013-Mar-06 14:53", "status": "new", "created": "2013-Mar-06 14:44", "fixed_version": "2013-Mar-06 14:44", "broken_version": "", "priority": "5", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}