{"id": 823, "title": "Ticket #823: Log rotation problem at 2GB boundary", "description": "<blockquote>\nSetting max log size such as MAX_SCHEDD_LOG = 2147483648 to reduce rotation causes problems. I believe it may be due to int in condor_util_lib/dprintf.c\n\n<p>int MaxLog[D_NUMLEVELS+1] = { 0 };</p></blockquote>", "remarks": "<blockquote>\nupdated to us condor_sys_types.h uint64_t\n\n<p></p><hr/>\n<em>2010-Jan-29 10:48:32 by psilord:</em> <br/>\n\nThis change only affects Condor's ability to rotate a log file if its size is 2GB or greater. Due to the param() parsing code's inability at this time to read an integer larger than INT_MAX (it passes the textual integer string from the config file to atoi()!), Condor can't actually be made to produce a log file larger than 2GB either on 32 or 64 bit machines. This hopefully will be fixed in the future.\n\n<p></p><hr/>\n<em>2010-Jan-29 10:58:53 by psilord:</em> <br/>\n\nSpeaking of, if param() does use atoi(), which it does, cause I just looked, then using that value for the max schedd log will result in a hilarious value. as this code demonstrates:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    char *intmax = \"2147483647\";\n    char *intmaxp1 = \"2147483648\";\n\n    printf(\"int max = %d\\n\", atoi(intmax));\n    printf(\"int max + 1 = %d\\n\", atoi(intmaxp1));\n\n    return 0;\n}\n</pre></div>\n\n\n<p>When you run it, you get this:\n</p><div class=\"verbatim\">\n<pre>Linux nmi-s006 &gt; ./a.out\nint max = 2147483647\nint max + 1 = -2147483648\nLinux nmi-s006 &gt;\n</pre></div>\n\n\n<p>That looks very wrong. Here's why:\n\n</p><p></p><div class=\"verbatim\">\n<pre>/usr/include/limits.h:#  define INT_MIN (-INT_MAX - 1)\n/usr/include/limits.h:#  define INT_MAX 2147483647\n</pre></div>\n\n\n<p>Hence, I don't think the original implementor fully understood the problem or the fix.\n\n</p><p></p><hr/>\n<em>2010-Jan-29 11:09:48 by psilord:</em> <br/>\n\nNow, suppose we do this:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;inttypes.h&gt;\n\nint main(void)\n{\n    char *intmax = \"2147483647\";\n    char *intmaxp1 = \"2147483648\";\n    char *intmaxp2 = \"2147483649\";\n    uint64_t val;\n\n    printf(\"int max = %d\\n\", atoi(intmax));\n    printf(\"int max + 1 = %d\\n\", atoi(intmaxp1));\n\n    val = atoi(intmaxp1);\n    printf(\"uint64_t max + 1 = %lu\\n\", atoi(intmaxp1));\n\n    val = atoi(intmaxp2);\n    printf(\"uint64_t max + 2 = %lu\\n\", atoi(intmaxp2));\n\n    return 0;\n}\n</pre></div>\n\n\n<p>Then you get an answer like this:\n</p><div class=\"verbatim\">\n<pre>Linux nmi-s006 &gt; ./a.out\nint max = 2147483647\nint max + 1 = -2147483648\nuint64_t max + 1 = 2147483648\nuint64_t max + 2 = 2147483649\n</pre></div>\n\n\n<p>Which while it appears to give the right answer, it does for completely non-intuitive reasons due to two's complement behavior of negative numbers when assigned to unsigned quantities.\n\n</p><p></p><hr/>\n<em>2010-Jan-29 11:17:06 by psilord:</em> <br/>\n\nIt looks like the main deal with this issue is that we're trying to squeeze an unsigned int 32-bit quantity out of atoi() via tricks with assignment to a larger unsigned type. At best, if this trick were propagated to everywhere which uses said value, the log files could reach a 4GB range, but forever more be modulo 4GB since at that point in time we've counted every value atoi() could give us. So, uint64_t is actually a lie, since we can't ever see anything larger than 4GB from atoi() using any trick.\n\n<p>The real fix would be to stop using atoi() to get back our values from param() and upconvert the general integral type param() returns to int64_t.\n\n</p><p></p><hr/>\n<em>2010-Mar-01 11:35:36 by jrt:</em> <br/>\n\nI think this will fix the remaining issues.\n\n<p></p><div class=\"verbatim\">\n<pre>diff -ruHp condor-7.4.0.orig/src/condor_util_lib/dprintf.c condor-7.4.0/src/condor_util_lib/dprintf.c\n--- condor-7.4.0.orig/src/condor_util_lib/dprintf.c\t2010-02-10 13:04:30.000000000 -0500\n+++ condor-7.4.0/src/condor_util_lib/dprintf.c\t2010-03-01 11:09:16.000000000 -0500\n@@ -560,8 +560,8 @@ debug_lock(int debug_level)\n \t\t\t\t// Probably format should be %ld, and we should cast to\n \t\t\t\t// long int, but I'm afraid of changing the output format.\n \t\t\t\t// wenger 2009-02-24.\n-\t\t\tfprintf( DebugFP, \"MaxLog = %d, length = %d\\n\",\n-\t\t\t\t\t MaxLog[debug_level], (int)length );\n+\t\t\tfprintf( DebugFP, \"MaxLog = %u, length = %u\\n\",\n+\t\t\t\t\t MaxLog[debug_level], length );\n \t\t\tpreserve_log_file(debug_level);\n \t\t}\n \t}\ndiff -ruHp condor-7.4.0.orig/src/condor_util_lib/dprintf_config.c condor-7.4.0/src/condor_util_lib/dprintf_config.c\n--- condor-7.4.0.orig/src/condor_util_lib/dprintf_config.c\t2010-02-10 13:04:30.000000000 -0500\n+++ condor-7.4.0/src/condor_util_lib/dprintf_config.c\t2010-03-01 11:09:49.000000000 -0500\n@@ -37,7 +37,7 @@ int\t\tTermlog = 0;\n\n extern int\t\tDebugFlags;\n extern FILE\t\t*DebugFP;\n-extern int\t\tMaxLog[D_NUMLEVELS+1];\n+extern uint64_t\tMaxLog[D_NUMLEVELS+1];\n extern char\t\t*DebugFile[D_NUMLEVELS+1];\n extern char\t\t*DebugLock;\n extern char\t\t*_condor_DebugFlagNames[];\n@@ -204,7 +204,7 @@ dprintf_config( const char *subsys )\n \t\t\t\t}\n \t\t\t\tpval = param(pname);\n \t\t\t\tif( pval != NULL ) {\n-\t\t\t\t\tMaxLog[debug_level] = atoi( pval );\n+\t\t\t\t\tMaxLog[debug_level] = atol( pval );\n \t\t\t\t\tfree(pval);\n \t\t\t\t} else {\n \t\t\t\t\tMaxLog[debug_level] = 1024*1024;\n\n </pre></div>\n\n\n<p></p><hr/>\n<em>2010-Mar-04 19:45:55 by matt:</em> <br/>\n\nPete, new comments ^^\n\n<p></p><hr/>\n<em>2010-Mar-04 19:51:56 by psilord:</em> <br/>\n\nIsn't that patch supposed to use atoll()? atol() only produces a long, which\nis 32-bits on a 32bit machine. And, does windows like this? Speaking of, how portable is atoll() in general? It looks glibc only...\n\n<p></p><hr/>\n<em>2010-Mar-05 09:26:46 by jrt:</em> <br/>\n\nWell, we can use strtoull, but strtoul would probably be fine in terms of size.</blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/107/logsize.patch\">logsize.patch</a>\n565 bytes added by jrt on 2009-Oct-07 21:05:14 UTC.\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Apr-21 17:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17890\">[17890]</a></span>: Commit for fixing the non-rotating NEGOTIATOR_MATCH_LOG issue (or really: any separate debug level log file) in ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1352\" title=\"MAX_NEGOTIATOR_MATCH_LOG ignored\">#1352</a></span>, introduced with commit 8aa348 when working on ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=823\" title=\"Log rotation problem at 2GB boundary\">#823</a></span> . Mentioned commit changed the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MaxLog\" title=\"Max Log\">MaxLog</a></span> array's data type to 64 bit in dprintf but not in dprintf_config.  (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Oct-07 16:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15940\">[15940]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=823\" title=\"Log rotation problem at 2GB boundary\">#823</a></span> update the max log size  (By Timothy St. Clair )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Mar-05 09:26", "status": "resolved", "created": "2009-Oct-07 13:37", "fixed_version": "2009-Oct-07 13:37", "broken_version": "v070301", "priority": "2", "subsystem": "Daemons", "assigned_to": "jrt", "derived_from": "", "creator": "jrt", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu tstclair@redhat.com psilord@cs.wisc.edu", "due_date": ""}