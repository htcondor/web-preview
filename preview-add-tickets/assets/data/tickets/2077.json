{"id": 2077, "title": "Ticket #2077: Remove circular dependencies from condor_utils", "description": "<blockquote>\nThere are a few circular dependencies between condor_utils/qmgmt and condor_utils/stdu starter.  There is also a global symbol, <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SigNames\" title=\"Sig Names\">SigNames</a></span>, which is defined twice in condor_utils.\n\n<p>Both issues are currently handled because we statically link condor_utils, and the static linker is able to ignore missing symbols.\n\n</p><p>This is a bit of a ticking-time-bomb: if Condor ever decides to provide a shared lib, then there might be a huge mess of circular deps to untangle.  Better start now rather than later.\n\n</p><p>To see the exact symbols that need to be untangled, set BUILD_SHARED_LIBS true in the cmake macros and remove \"STATIC\" from add_library in the definition for condor_static_library</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Apr-21 08:33:33 by tstclair:</em> <br/>\n\nI treaded down this road during the cmake transformation.  The idea to turning the the lib+header dependencies into a DAG, but it was quite the nightmare when teasing out the header inclusion issues.  I agree it should be done, but IMHO this is quite a thorny, and folks should plan on this being a non-trivial amount of work.\n\n<p>Also I would revise this to saying: \"remove circular dependencies...\" because there are many not just in condor_utils.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "todo", "last_change": "2011-Apr-21 08:33", "status": "new", "created": "2011-Apr-20 18:11", "fixed_version": "2011-Apr-20 18:11", "broken_version": "", "priority": "3", "subsystem": "Libs", "assigned_to": "", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tstclair@redhat.com", "due_date": ""}