{"id": 3082, "title": "Ticket #3082: memory leak in classad functions returing lists", "description": "<blockquote>\nBrian observed that his custom classad function that evaluates to a newly allocated <code>ExprList</code> leaks memory, because the caller does not free the list.\n\n<p>We believe this problem affects the existing classad functions <code>splitUserName</code> and <code>splitSlotName</code>.</p></blockquote>", "remarks": "<blockquote>\n<em>2012-Jun-22 15:17:07 by danb:</em> <br/>\n\nI confirmed that <code>splitSlotName</code> leaks memory.  Example:\n\n<p></p><pre>    valgrind --leak-check=full condor_status -f \"%d\\n\" 'isList(splitSlotName(Name))'\n</pre>\n\n<p></p><div class=\"verbatim\">\n<pre>==9519== 192 (48 direct, 144 indirect) bytes in 1 blocks are definitely lost in loss record 1,109 of 1,209\n==9519==    at 0x10003C679: malloc (vg_replace_malloc.c:266)\n==9519==    by 0x1012C0F04: operator new(unsigned long) (in /usr/lib/libstdc++.6.0.9.dylib)\n==9519==    by 0x1000B4859: compat_classad::splitAt_func(char const*, std::vector&lt;classad::ExprTree*, std::allocator&lt;classad::ExprTree*&gt; &gt; const&amp;, classad::EvalState&amp;, classad::Value&amp;) (in /Users/danb/condor/CONDOR_SRC/release_dir/lib/libcondor_utils_7_9_0.dylib)\n==9519==    by 0x10077426D: classad::FunctionCall::_Evaluate(classad::EvalState&amp;, classad::Value&amp;) const (in /Users/danb/condor/CONDOR_SRC/release_dir/lib/libclassad.7.9.0.dylib)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Jun-29 16:11:33 by danb:</em> <br/>\n\nI believe the way the classad library was intended to work is that functions generating new lists would insert them into the <code>EvalState</code> object's list of things to delete.\n\n<p>In <code>Value::_Clear()</code> I see this comment:\n\n</p><p></p><pre>        case LIST_VALUE:\n            // list values live in the evaluation environment, so they must\n            // never be explicitly destroyed\n</pre>\n\n<p>However, the <code>EvalState</code> class has a comment-out member variable cache_to_delete, so apparently this is not completely implemented.\n\n</p><p>It is also wouldn't work in the general case without changing the classad <code>Evaluate()</code> interface.  Currently, the <code>EvalState</code> object is created in the local scope within <code>Evaluate()</code>.  Having it clean up before returning to the caller would be appropriate for deleting temporary lists, but it would not be appropriate if the list itself is being returned to the caller.  In other words, it would be fine for matchmaking (where only boolean values are returned to the caller), but not for the general case.\n\n</p><p>Everything that we have discovered about lists is also probably true for classad values.  A new classad generated by a classad function would be leaked.\n\n</p><p></p><hr/>\n<em>2012-Jul-12 13:58:01 by danb:</em> <br/>\n\nI decided to fix this problem by using a <code>shared_ptr&lt;ExprList&gt;</code> in the classad <code>Value</code> object so that the Value object can share ownership of a list.  There were two options in how to do this.  I chose the second one:\n\n<p></p><ol>\n<li>All lists in Value objects are set via a shared_ptr.\n\n<p></p></li><li>Lists may be set via a raw pointer or a shared_ptr.  In case of a raw pointer, the old semantics are retained: the <code>Value</code> object does not own the list.\n</li></ol>\n\n<p>The problem with the first option is that it escalates into requiring all <code>ExprTree</code> objects within classad data structures to be owned via shared_ptr.  This also impacts the public interface of the classad library.  It could impact memory usage and performance as well.  I did not want to make such a big change without more careful examination and a better motivation.  Such a sweeping change is certainly not warranted just to fix this obscure memory leak.\n\n</p><p>A similar patch could be made to handle dynamic <code>ClassAd</code> values in <code>Value</code> objects.  I did not do this, because there is currently no need for it.  If the need arises, it should be obvious what to do.\n\n</p><p></p><hr/>\n<em>2012-Jul-13 15:17:52 by danb:</em> <br/>\n\nI removed two methods from the public classad interface: <code>EvaluateAttrList()</code> and <code>EvaluateAttrClassAd()</code>.  These both return a raw pointer to the caller but do not pass ownership to the caller.  This is problematic for values that are dynamically allocated during the expression evaluation.  When the <code>Value</code> that has a shared_ptr to the object goes out of scope, the dynamically allocated object gets deleted, and a pointer to deleted memory is returned to the caller.\n\n<p>One reasonable solution would be to return a shared_ptr as obtained, for example, by <code>Value::IsSListValue()</code>.  In the current implementation of classads, if the value contains a raw pointer to a list, this causes a copy of the list to be made, so that ownership can be given to the shared_ptr.  In the future, it may be that all values contain shared_ptrs, so no copying would be required.\n\n</p><p>Since the interface is not used in Condor (not sure about outside Condor), I chose to comment it out rather than upgrade it to a shared_ptr.  <code>EvaluateAttr()</code> can be used instead.  This avoids the need for copying the underlying object in order to fit it into a shared_ptr, because the <code>Value</code> lives in the caller's scope.</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=5219\" title=\"Memory leak in ClassAd function split()\">#5219</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nMemory leak in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> function split()</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Aug-14 13:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=33045\">[33045]</a></span>: minor 7.9.1 version history item edit ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3082\" title=\"memory leak in classad functions returing lists\">#3082</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-13 13:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32771\">[32771]</a></span>: Classad::EvaluteAttrList was deprecated, remove from tests <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3082\" title=\"memory leak in classad functions returing lists\">#3082</a></span>  (By Greg Thain )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-13 11:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32770\">[32770]</a></span>: Remove <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> functions from <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> interface: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EvaluateAttrList\" title=\"Evaluate Attr List\">EvaluateAttrList</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EvaluateAttrClassAd\" title=\"Evaluate Attr Class Ad\">EvaluateAttrClassAd</a></span>. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3082\" title=\"memory leak in classad functions returing lists\">#3082</a></span> These functions are not compatible with dynamically allocated values, because the evaluated Value goes out of scope. A shared_ptr could be used instead, but this has performance implications that depend on\u00a0[...]\n (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-12 14:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32756\">[32756]</a></span>: Documented fix for memory leak in splitUserName and splitSlotName. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3082\" title=\"memory leak in classad functions returing lists\">#3082</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-12 13:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32755\">[32755]</a></span>: Fixed memory leak in splitUserName() and splitSlotName() <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> functions. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3082\" title=\"memory leak in classad functions returing lists\">#3082</a></span> <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> functions returning dynamically allocated list values should use the new shared_ptr&lt;ExprList&gt; interface in the classad Value class.  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2012-Jul-13 15:17", "status": "resolved", "created": "2012-Jun-22 11:25", "fixed_version": "2012-Jun-22 11:25", "broken_version": "v070600", "priority": "2", "subsystem": "", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "bbockelm@cse.unl.edu,dan@hep.wisc.edu,jfrey@cs.wisc.edu,tstclair@redhat.com", "due_date": ""}