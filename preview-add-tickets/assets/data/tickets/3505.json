{"id": 3505, "title": "Ticket #3505: Leaking mount points, on filesystems originally mounted w/shared prop.", "description": "<blockquote>\nIn an effort to explore how we handle cleaning up mount points, I've stumbled upon an issue that exists as a result of mounting the root filesystem with shared propagation which is now done by default in F18 &amp;&gt; (yay systemd).\n\n<p>Thus, when using knobs such as MOUNT_UNDER_SCRATCH, condor will leak mount points to the system namespace to the point there it can no longer mount, or run jobs.\n\n</p><p>In reading through the docs <a class=\"external\" href=\"http://lwn.net/Articles/159077/\">LWN Article 1</a> and <a class=\"external\" href=\"http://lwn.net/Articles/159092/\">LWN Article 2</a>\n\n</p><p>It appears what we are looking for is:\n</p><div class=\"code\">\n<pre class=\"code\">Under \"Use cases\" 4.B)\n\n     B) A process wants its mounts invisible to any other process, but\n\tstill be able to see the other system mounts.\n\n\t   Solution:\n\n\t\tTo begin with, the administrator can mark the entire mount tree\n\t\tas shareable.\n\n                ## TSTCLAIR: Already done now in F18 &amp;&amp; &gt;\n\t\tmount --make-rshared /\n\n\t\tA new process can clone off a new namespace. And mark some part\n\t\tof its namespace as slave\n\n\t\tmount --make-rslave /myprivatetree\n\n\t\tHence forth any mounts within the /myprivatetree done by the\n\t\tprocess will not show up in any other namespace. However mounts\n\t\tdone in the parent namespace under /myprivatetree still shows\n\t\tup in the process's namespace.\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2013-Feb-21 13:19:25 by tannenba:</em> <br/>\n\nCould you please explain the issue more thoroughly in the ticket description?  How/why do you conclude the code is 'leaking' mount points if originally mounted... is this a hunch or can it be demonstrated (in other words, do you know for certain the kernel does not clean up when the container is destroyed, etc)? How does the code prevent mount space leaking even on filesystems w/o shared prop, e.g. what if anything prevents leaks if the starter terminates abnormally with an exception or failed assertion? Can you show how to repro or demonstrate? Do you have any suggestions/thoughts for a fix?  Thanks.\n\n<p></p><hr/>\n<em>2013-Feb-21 16:14:29 by tstclair:</em> <br/>\n\nok I think I have some simple proof of concept code that works here:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">https://github.com/timothysc/tests\n\nsee also http://timothysc.github.com/\n</pre></div>\n\n\n<p>We will need to gut filesystem_remap.cpp b/c it doesn't do what you would think.\n\n</p><p>Re: TT's comment, the problem description outlines howto repro, you will probably want to read it again.\n\n</p><p></p><hr/>\n<em>2013-Feb-25 10:40:16 by tstclair:</em> <br/>\n\nTracking in: master-gt3505 branch\n\n<p>There are still open questions around some of the code in the remapping class and whether they are required.\n\n</p><p>Sadly testing this will require condor integration due to how the code is segmented..\n\n</p><p>1/2 of the logic is in daemon-core the other half is in remapper.\n\n</p><p></p><hr/>\n<em>2013-Feb-25 10:46:22 by tstclair:</em> <br/>\n\ntracking NMI build in: <a class=\"external\" href=\"http://submit-2.batlab.org/results/run-details.php?runid=103857\">http://submit-2.batlab.org/results/run-details.php?runid=103857</a>\n\n<p></p><hr/>\n<em>2013-Feb-25 10:47:13 by tstclair:</em> <br/>\n\nrecommend cherry-picking to stable series.\n\n<p></p><hr/>\n<em>2013-Feb-25 10:50:06 by tstclair:</em> <br/>\n\nSimple test:\n\n<p></p><ul>\n<li>set MOUNT_UNDER_SCRATCH=/tmp on a root mounted filesystem w/shared propagation\n</li><li>Run jobs, and verify leaked mount points to root namespace\n</li><li>Build to branch run jobs and verify no leak (mount)\n</li><li>ps -aux | grep condor -&gt; check pid of condor_exec  cat /proc/PID/mountinfo and you should see the mount there and only there.\n</li></ul>\n\n<p></p><hr/>\n<em>2013-Feb-25 11:26:34 by bbockelm:</em> <br/>\n\nHi Tim,\n\n<p>Can you test this with autofs also?  We should make sure we don't regress on that.\n\n</p><p>Basically, autofs mounts <strong>must</strong> be marked as shared with the parent because the automount daemon is not namespace aware.  If it's not marked as shared, you'll see the mount being made in the system namespace but inaccessible to the job.\n\n</p><p>Potentially, you may need to revive the code that detects the \"closest mount\" and remount that as private instead of the whole FS tree.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2013-Feb-28 08:02:47 by tstclair:</em> <br/>\n\nI've conditionalized the old mechanism based on mount semantics. It appears to behave correctly across el and Fedora. See <span class=\"ticket\"><a class=\"review\" href=\"tktview?tn=3601\" title=\"autofs doesn't work with 7.9\">#3601</a></span> and <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2959\" title=\"Autofs and MOUNT_UNDER_SCRATCH do not mix\">#2959</a></span></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Mar-15 12:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35175\">[35175]</a></span>: 7.9.5 version history item ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3505\" title=\"Leaking mount points, on filesystems originally mounted w/shared prop.\">#3505</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Mar-15 12:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35174\">[35174]</a></span>: Revert \"Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3505\" title=\"Leaking mount points, on filesystems originally mounted w/shared prop.\">#3505</a></span> Version history\" This reversion is of a version history entry that is incomplete, contains spelling errors, breaks the manual, and is committed to the wrong branch. This reverts commit 317b40b09b2b0cecc403fd6935b9c7b0e765fd1c.  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Mar-14 11:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35156\">[35156]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3505\" title=\"Leaking mount points, on filesystems originally mounted w/shared prop.\">#3505</a></span> Version history  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-28 07:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35027\">[35027]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3505\" title=\"Leaking mount points, on filesystems originally mounted w/shared prop.\">#3505</a></span> clean Werrors  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-27 15:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35026\">[35026]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3505\" title=\"Leaking mount points, on filesystems originally mounted w/shared prop.\">#3505</a></span> Added checks for MS_SLAVE and MS_REC  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-25 11:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35003\">[35003]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3505\" title=\"Leaking mount points, on filesystems originally mounted w/shared prop.\">#3505</a></span> warning and build cleanup for ubuntu  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-25 10:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35001\">[35001]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3505\" title=\"Leaking mount points, on filesystems originally mounted w/shared prop.\">#3505</a></span> Cleanup per process namespaces, namely around mount point cleaning.  (By Timothy St. Clair )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2013-Jul-11 12:23", "status": "resolved", "created": "2013-Feb-21 09:35", "fixed_version": "2013-Feb-21 09:35", "broken_version": "v070900", "priority": "2", "subsystem": "Daemons", "assigned_to": "tstclair", "derived_from": "", "creator": "tstclair", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelm@cse.unl.edu, tstclair@redhat.com, gthain@cs.wisc.edu, matt@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}