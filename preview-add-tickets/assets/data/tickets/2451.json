{"id": 2451, "title": "Ticket #2451: printf() in standard universe changes errno in violation of POSIX", "description": "<blockquote>\nWhen condor_compile is used it seems the value of errno is changed to 0 in the printf() call, which is not in keeping with standard C.  While library functions are allowed to change the value of errno, even if there is no error, they must not change it to the value 0.\n\n<p></p><div class=\"code\">\n<pre class=\"code\">$ uname -a\nLinux marlin.phys.uwm.edu 2.6.18-238.9.1.el5 #1 SMP Tue Apr 12 18:10:13 EDT 2011 x86_64 x86_64 x86_64 GNU/Linux\n$ condor_version\n$CondorVersion: 7.4.2 Mar 29 2010 BuildID: 227044 $\n$CondorPlatform: X86_64-LINUX_RHEL5 $\n$ cat hello.c\n#include &lt;errno.h&gt;\n#include &lt;stdio.h&gt;\nint main(void)\n{\n       errno = 1;\n       printf(\"hello, world\\n\");\n       printf(\"errno = %d\\n\", errno);\n       return errno;\n}\n$ gcc -o hello hello.c\n$ ./hello\nhello, world\nerrno = 1\n$ echo $?\n1\n$ condor_compile gcc -o hello hello.c\n[... various condor_compile warnings suppressed ...]\n$ ./hello\nCondor: Notice: Will checkpoint to ./hello.ckpt\nCondor: Notice: Remote system calls disabled.\nhello, world\nerrno = 0\n$ echo $?\n0\n</pre></div>\n\n\n<p>Specifically: in Section 7.5 of ISO/IEC 9899:1999\n\n</p><p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \n3\tThe value of errno is zero at program startup, but is never set to zero by any library function.172)\tThe value of errno may be set to nonzero by a library function call whether or not there is an error, provided the use of errno is not documented in the description of the function in this International Standard.\n</td></tr></tbody></table></div>\n\n\n<p>BTW, footnote 172 reads:\n\n</p><p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \n172) Thus, a program that uses errno for error checking should set it to zero before a library function call, then inspect it before a subsequent library function call. Of course, a library function can save the value of errno on entry and then set it to zero, as long as the original value is restored if errno\u2019s value is still zero just before the return.\n</td></tr></tbody></table></div>\n\n\n<p>POSIX is in alignment with the C standard on this point:\n\n</p><p><a class=\"external\" href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_03.html\">http://pubs.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_03.html</a> contains (note the second sentence):\n\n</p><p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nThe value of errno should only be examined when it is indicated to be valid by a function's return value. No function in this volume of IEEE Std 1003.1-2001 shall set errno to zero. For each thread of a process, the value of errno shall not be affected by function calls or assignments to errno by other threads.\n</td></tr></tbody></table></div>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "defect", "last_change": "2012-Feb-09 22:57", "status": "defer", "created": "2011-Sep-12 09:41", "fixed_version": "2011-Sep-12 09:41", "broken_version": "v070402", "priority": "5", "subsystem": "Std", "assigned_to": "tlmiller", "derived_from": "", "creator": "pfc", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "pfcouvar@syr.edu,pcouvare@caltech.edu", "due_date": ""}