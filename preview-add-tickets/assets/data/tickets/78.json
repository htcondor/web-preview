{"id": 78, "title": "Ticket #78: Splice tests often timeout, but complete successfully later.", "description": "<blockquote>\nRandomly, the larger splicing tests timeout, but afterwards still produce the\ncorrect output, indicating they ran correctly. An example is buildid 127306\nand specifically this output file for the failed test:\n<a class=\"external\" href=\"http://nmi-s006.cs.wisc.edu//nmi/run/cndrauto/2009/01/cndrauto_nmi-s006.batlab.cs.wisc.edu_1232588421_9295/userdir/nmi:x86_64_rhas_4/job_dagman_splice-M-1.out\">output_file</a>.\n\n<p>Dagman has an internal timer of 5 seconds before it checks to see if another job needs to be submitted so a linear chain of 100 jobs would take 500 seconds to execute if everything else worked instantaneously.\n\n</p><p>However, there is anecdotal statments from collaborators that say scheduler universe jobs aren't run until a successful reschedule_negotiator() call happens and that is capped at 30 second intervals.\n\n</p><p>I need to check if the combination of these two timers cause long delays if they get too far out of synch.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Jan-23 13:40:00 by psilord:</em> <br/>\n\n\n<p>This test submits a dag containing splices which ultimately forms a path\n14 nodes long. The \"street wisdom\" of dagman is that every 5 seconds it checks\nto see if any jobs have completed and if so, submits the ready jobs (up to a\nlimit, which is greater then the parallelness of this dag).\n\n</p><p>Here are the raw times for the nodes in that runid:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">In order times of execution of nodes.\nSubmit   Execute  ID    Node       Terminate Sub-&gt;ExTime Ex-&gt;TerTime NSubTime\n------------------------------------------------------------------------------\n10:08:53 10:09:23 365.0 M_A        10:09:25  30          2           10\n10:09:35 10:10:03 366.0 M_SD1_S1+A 10:10:03  28          0           9\n10:10:11 10:10:12 367.0 M_SD1_S1+B 10:10:12  1           0           {parallel}\n10:10:12 10:10:17 368.0 M_SD1_S1+C 10:10:18  5           1           11\n10:10:29 10:10:29 369.0 M_SD1_S1+D 10:10:29  0           0           14\n10:10:43 10:11:04 370.0 M_SD1_S2+A 10:11:50  21          46          14\n10:12:19 10:15:48 372.0 M_SD1_S2+C 10:15:55  209         7           29\n10:12:16 10:15:51 371.0 M_SD1_S2+B 10:15:58  215         7           {parallel}\n10:16:14 10:18:25 373.0 M_SD1_S2+D 10:18:28  131         3           16\n10:18:39 10:19:21 374.0 M_SD2_S1+A 10:19:28  42          7           11\n10:19:43 10:21:09 376.0 M_SD2_S1+C 10:21:21  26          12          15\n10:19:38 10:21:18 375.0 M_SD2_S1+B 10:21:24  100         6           {parallel}\n10:21:45 10:25:13 377.0 M_SD2_S1+D 10:25:15  208         2           21\n10:25:26 10:25:47 378.0 M_SD2_S2+A 10:25:50  21          3           11\n10:26:01 10:26:26 379.0 M_SD2_S2+B 10:26:41  25          15          25\n10:26:15 10:26:36 380.0 M_SD2_S2+C 10:26:52  21          16          {parallel}\n10:27:01 10:31:21 381.0 M_SD2_S2+D 10:31:23  260         2           9\n10:31:32 10:31:54 383.0 M_B        10:31:55  22          2           9\n</pre></div>\n\n\n<p>Total time for execution of the dag is 23 minutes and 2 seconds.\n\n</p><p>Total time spent in execution is 131 seconds (2.18 minutes). This is the time\nto run \"echo OK\", which is the executable and argument for these jobs.\nSome of this time is overlapping with itself because sometimes 2 jobs were\nrunning aqt the same time due to the structure of the dag.\n\n</p><p>Total time spent waiting for a job to execute is 1565 seconds, or 22 minutes.\n\n</p><p>This test has a 20 minute timeout, and due to this plus the execution time,\nblew it.\n\n</p><p>NSubTime represents the time between the terminate event is written into the\nlog and dagman submits the next ready job. It was taken to be the worst\ncase scenario each time.\n\n</p><p>So, the question is, why does dagman sometimes spend a long time before\nrealizing it needs to submit the next wave of jobs, and why does the schedd\ntake so long between the job submission and execution for the scheduler\nuniverse jobs?\n\n</p><p></p><hr/>\n<em>2009-Jan-23 14:42:07 by psilord:</em> <br/>\n\nI extracted the portion of the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SchedLog\" title=\"Sched Log\">SchedLog</a></span> bounded by the above time, and using this command:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">egrep -e '(Skipping RESCHEDULE|Calling Timer handler 8|Found idle scheduler|Called reschedule_negotiator|Calling HandleReq &lt;reschedule_negotiator&gt;)' SchedLog.copy | less\n</pre></div>\n\n\n<p>Found the times the schedd wanted to run scheduler universe jobs:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">01/22 10:08:39 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:08:39 Found idle scheduler universe job 364.0\n01/22 10:08:41 Called reschedule_negotiator()\n01/22 10:08:53 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:08:53 Called reschedule_negotiator()\n01/22 10:08:53 Skipping RESCHEDULE as optimization: sent one 12 seconds ago and\nstill haven't heard from negotiatator.  Will not reschedule more frequently than\n every 30 seconds\n01/22 10:09:23 Calling Timer handler 8 (timeout)\n01/22 10:09:23 Found idle scheduler universe job 365.0\n01/22 10:09:35 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:09:35 Called reschedule_negotiator()\n01/22 10:10:03 Calling Timer handler 8 (timeout)\n01/22 10:10:03 Found idle scheduler universe job 366.0\n01/22 10:10:11 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:10:11 Called reschedule_negotiator()\n01/22 10:10:12 Calling Timer handler 8 (timeout)\n01/22 10:10:12 Found idle scheduler universe job 367.0\n01/22 10:10:12 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:10:12 Called reschedule_negotiator()\n01/22 10:10:12 Skipping RESCHEDULE as optimization: sent one 1 seconds ago and s\ntill haven't heard from negotiatator.  Will not reschedule more frequently than\nevery 30 seconds\n01/22 10:10:17 Calling Timer handler 8 (timeout)\n01/22 10:10:17 Found idle scheduler universe job 368.0\n01/22 10:10:29 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:10:29 Found idle scheduler universe job 369.0\n01/22 10:10:29 Called reschedule_negotiator()\n01/22 10:10:29 Skipping RESCHEDULE as optimization: sent one 18 seconds ago and\nstill haven't heard from negotiatator.  Will not reschedule more frequently than\n every 30 seconds\n01/22 10:10:45 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:10:45 Found idle scheduler universe job 370.0\n01/22 10:11:25 Called reschedule_negotiator()\n01/22 10:12:17 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:12:17 Called reschedule_negotiator()\n01/22 10:12:20 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:12:20 Called reschedule_negotiator()\n01/22 10:12:20 Skipping RESCHEDULE as optimization: sent one 3 seconds ago and s\ntill haven't heard from negotiatator.  Will not reschedule more frequently than\nevery 30 seconds\n01/22 10:15:45 Calling Timer handler 8 (timeout)\n01/22 10:15:46 Found idle scheduler universe job 372.0\n01/22 10:15:50 Found idle scheduler universe job 371.0\n01/22 10:16:14 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:16:14 Called reschedule_negotiator()\n01/22 10:18:23 Calling Timer handler 8 (timeout)\n01/22 10:18:23 Found idle scheduler universe job 373.0\n01/22 10:18:40 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:18:40 Called reschedule_negotiator()\n01/22 10:19:20 Calling Timer handler 8 (timeout)\n01/22 10:19:20 Found idle scheduler universe job 374.0\n01/22 10:19:38 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:19:38 Called reschedule_negotiator()\n01/22 10:19:44 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:19:44 Called reschedule_negotiator()\n01/22 10:19:44 Skipping RESCHEDULE as optimization: sent one 6 seconds ago and s\ntill haven't heard from negotiatator.  Will not reschedule more frequently than\nevery 30 seconds\n01/22 10:21:08 Calling Timer handler 8 (timeout)\n01/22 10:21:08 Found idle scheduler universe job 376.0\n01/22 10:21:14 Found idle scheduler universe job 375.0\n01/22 10:21:46 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:21:46 Called reschedule_negotiator()\n01/22 10:25:12 Calling Timer handler 8 (timeout)\n01/22 10:25:12 Found idle scheduler universe job 377.0\n01/22 10:25:27 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:25:27 Called reschedule_negotiator()\n01/22 10:25:46 Calling Timer handler 8 (timeout)\n01/22 10:25:46 Found idle scheduler universe job 378.0\n01/22 10:26:03 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:26:03 Called reschedule_negotiator()\n01/22 10:26:16 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:26:16 Called reschedule_negotiator()\n01/22 10:26:16 Skipping RESCHEDULE as optimization: sent one 12 seconds ago and\nstill haven't heard from negotiatator.  Will not reschedule more frequently than\n every 30 seconds\n01/22 10:26:21 Calling Timer handler 8 (timeout)\n01/22 10:26:21 Found idle scheduler universe job 379.0\n01/22 10:26:34 Found idle scheduler universe job 380.0\n01/22 10:27:01 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:27:01 Called reschedule_negotiator()\n01/22 10:29:58 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:29:58 Called reschedule_negotiator()\n01/22 10:31:21 Calling Timer handler 8 (timeout)\n01/22 10:31:21 Found idle scheduler universe job 381.0\n01/22 10:31:22 Found idle scheduler universe job 382.0\n01/22 10:31:32 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:31:32 Called reschedule_negotiator()\n01/22 10:31:42 Calling HandleReq &lt;reschedule_negotiator&gt; (0)\n01/22 10:31:42 Called reschedule_negotiator()\n01/22 10:31:42 Skipping RESCHEDULE as optimization: sent one 10 seconds ago and\nstill haven't heard from negotiatator.  Will not reschedule more frequently than\n every 30 seconds\n01/22 10:31:54 Calling Timer handler 8 (timeout)\n01/22 10:31:54 Found idle scheduler universe job 384.0\n01/22 10:31:54 Found idle scheduler universe job 383.0\n</pre></div>\n\n\n<p>Notice the pretty large gaps of time between starts of some scheduler universe jobs. It seems starting of scheduler universe is not very regular.\n\n</p><p></p><hr/>\n<em>2009-Jan-26 17:17:22 by psilord:</em> <br/>\n\nWhen the schedd is under load, You get messages like this:\n\n<p></p><div class=\"verbatim\">\n<pre>01/26 16:09:49 Setting delay until next queue scan to 187 seconds\n</pre></div>\n\n\n<p>Which push off the running of <strong>any</strong> jobs for the next N seconds.\n\n</p><p>This happens because the timeslice code saw a spike in the length of time it took that handler to run and penalized it to not run for a while. Unfortunately, it does this even if it was a transient spike in load on the machine. So, if you have a deep chain of dag nodes on a machine with somewhat wild load on it, it is possible to delay far beyond the timeout alloted to the job.\n\n</p><p>Dan and I spoke about this timeslice and under what conditions it would arise, not having claims you can reuse is one of them, which may happen easily the first time a delay happens and you have fast running jobs.\n\n</p><p>I need to test my setup this under SCHEDD_INTERVAL_TIMESLICE = .99 and see what happens.\n\n</p><p></p><hr/>\n<em>2009-Feb-03 15:36:58 by psilord:</em> <br/>\n\nI'm having bt wrap the splice tests with personal Condors and have them use <code>SCHEDD_INTERVAL_TIMESLICE</code> = .99 and see if the problem goes away.\n\n<p></p><hr/>\n<em>2009-Feb-18 10:51:55 by psilord:</em> <br/>\n\nStalled due to debian port\n\n<p></p><hr/>\n<em>2009-Nov-23 15:26:50 by psilord:</em> <br/>\n\nThe problems seems to have gotten much better, so I'm deferring this ticket for a while to see if it arises again.\n\n<p></p><hr/>\n<em>2010-Jan-08 16:16:32 by psilord:</em> <br/>\n\nIt hasn't been a problem for a long time, so I'm resolving this.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=85\" title=\"Timeslice::updateNextStartTime() does integer truncation\">#85</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nTimeslice::updateNextStartTime() does integer truncation</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jan-30 11:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=13662\">[13662]</a></span>: This checking removes the debugging code for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=78\" title=\"Splice tests often timeout, but complete successfully later.\">#78</a></span> / <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=85\" title=\"Timeslice::updateNextStartTime() does integer truncation\">#85</a></span>. Those tickets aren't resovled yet, but it is more udnerstood and I don't need this anymore.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jan-23 17:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=13562\">[13562]</a></span>: Checking in some debugging to debug tickets <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=78\" title=\"Splice tests often timeout, but complete successfully later.\">#78</a></span> and <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=85\" title=\"Timeslice::updateNextStartTime() does integer truncation\">#85</a></span> when we decide to defer the call to timeout().  (By Peter Keller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Jan-08 16:16", "status": "resolved", "created": "2009-Jan-22 15:00", "fixed_version": "2009-Jan-22 15:00", "broken_version": "", "priority": "3", "subsystem": "Tests", "assigned_to": "psilord", "derived_from": "", "creator": "psilord", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}