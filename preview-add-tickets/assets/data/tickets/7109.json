{"id": 7109, "title": "Ticket #7109: Provide reasonable overloads for Undefined / Error in python", "description": "<blockquote>\nOne constant irritation in the python bindings is that the <code>Value.Undefined</code> evaluates to true.  This is because boost python, when creating the <code>Value</code> class, utilizes the default integer overloads.  Since, in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, <code>Undefined</code> is represented by the integer <code>1</code>, <code>Undefined</code> becomes coerced to <code>1</code> which becomes coerced to <code>True</code>.  Thus, both <code>Undefined</code> and <code>Error</code> are <code>true</code>!\n\n<p>Thus, because <code>a + 1</code> evaluates to <code>undefined</code>, the following two statements have different behaviors:\n</p><div class=\"code\">\n<pre class=\"code\">if classad.ExprTree(\"a + 1\"):\n   print \"ta-da!\"\nif classad.ExprTree(\"a + 1\").eval():\n   print \"ta-da!\"\n</pre></div>\n\n\n<p>The second will print <code>ta-da</code> while the first does not.  Surprise!\n\n</p><p>When discussing other surprising behaviors in <span class=\"ticket\"><a class=\"new\" href=\"tktview?tn=7107\" title=\"Wrong semantics for Python bindings ExprTree equality\">#7107</a></span>, I realized that we can, of course, overload the boost-provided operators for the <code>classad.Value</code> class.  It's a bit awkward and not a first-class operation -- but not crazy either.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Aug-02 10:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57560\">[57560]</a></span>: Fixup version history formatting. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7109\" title=\"Provide reasonable overloads for Undefined / Error in python\">#7109</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Aug-02 09:47</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57557\">[57557]</a></span>: Add release notes for Undefined/Error changes. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7109\" title=\"Provide reasonable overloads for Undefined / Error in python\">#7109</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jun-13 15:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57293\">[57293]</a></span>: Add special cases to restore backward compat. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7109\" title=\"Provide reasonable overloads for Undefined / Error in python\">#7109</a></span> With this, once again `Undefined == Undefined` evaluates to True. From a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> perspective, this is the incorrect thing to do -- it should become False since Undefined is coerced to False.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jun-13 15:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57292\">[57292]</a></span>: Overload the rest of the operators for Value object. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7109\" title=\"Provide reasonable overloads for Undefined / Error in python\">#7109</a></span> For most operators, convert the value back to an <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> and apply the underlying operator for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span>.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jun-13 08:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57291\">[57291]</a></span>: Override boolean coercion of `Value` to do something reasonable. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7109\" title=\"Provide reasonable overloads for Undefined / Error in python\">#7109</a></span> The boolean coercion of `Value`, as it is a boost enum, defaulted to integer coercion. Thus, `bool(classad.Value.Undefined)` returns `True` - a horribly surprising result.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2019-Aug-02 09:48", "status": "resolved", "created": "2019-Jun-13 08:52", "fixed_version": "2019-Jun-13 08:52", "broken_version": "", "priority": "4", "subsystem": "PythonBinding", "assigned_to": "bbockelm", "derived_from": "#7107", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelman@morgridge.org", "due_date": ""}