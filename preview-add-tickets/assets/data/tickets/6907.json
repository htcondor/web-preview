{"id": 6907, "title": "Ticket #6907: python bindings should be packaged following proper guidelines", "description": "<blockquote>\nFrom a clean install of CentOS 7, run <code>yum install -y python-urllib3</code>. Does this drop a <code>urllib3.py</code> file in your python packages directory? <em>No!</em> Instead, YUM has installed the following:\n\n<p></p><div class=\"verbatim\">\n<pre>[root@c1731a95162a ~]# ls -d1 /usr/lib/python2.7/site-packages/urllib3*\n/usr/lib/python2.7/site-packages/urllib3\n/usr/lib/python2.7/site-packages/urllib3-1.10.2-py2.7.egg-info\n\n[root@c1731a95162a ~]# tree /usr/lib/python2.7/site-packages/urllib3 -P *.py\n/usr/lib/python2.7/site-packages/urllib3\n|-- __init__.py\n|-- _collections.py\n|-- connection.py\n|-- connectionpool.py\n|-- contrib\n|   |-- __init__.py\n|   |-- ntlmpool.py\n|   `-- pyopenssl.py\n|-- exceptions.py\n|-- fields.py\n|-- filepost.py\n|-- packages\n|   |-- __init__.py\n|   `-- ordered_dict.py\n|-- poolmanager.py\n|-- request.py\n|-- response.py\n`-- util\n    |-- __init__.py\n    |-- connection.py\n    |-- request.py\n    |-- response.py\n    |-- retry.py\n    |-- ssl_.py\n    |-- timeout.py\n    `-- url.py\n\n[root@c1731a95162a ~]# tree /usr/lib/python2.7/site-packages/urllib3-1.10.2-py2.7.egg-info/\n/usr/lib/python2.7/site-packages/urllib3-1.10.2-py2.7.egg-info/\n|-- PKG-INFO\n|-- SOURCES.txt\n|-- dependency_links.txt\n`-- top_level.txt\n</pre></div>\n\n\n<p>Currently, after we compile and package the python bindings, <code>yum install python2-condor</code> drops <code>htcondor.so</code> and <code>classad.so</code> directly in <code>/usr/lib/python2.7/site-packages</code>. This is atypical and creates other problems, mainly that we cannot extend the htcondor or classad python libraries with native python code -- <em>everything</em> must be packaged in the shared object files.\n\n</p><p>I'm proposing that we start packaging the python bindings following <a class=\"external\" href=\"https://docs.fedoraproject.org/en-US/packaging-guidelines/Python/\">the same guidelines as other RPM-distributed python packages</a>. (Hopefully TimT can also apply this experience to DEB packages as well.)\n\n</p><p>The first step is to generate the correct package scaffolding and then use the <code>setuptools</code> library in python to build an RPM. Then we can compare the python-built RPM to the current <code>python2-condor</code> RPM that was built using the OS's native tools.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Feb-07 12:23:12 by bbockelm:</em> <br/>\n\nActually, that's not really all that atypical for pure C-based python extensions (on a dev host, I count 30 such examples installed).  In terms of the \"proper guidelines\", after a quick scan, I don't see anything in the guidelines you listed that we are doing incorrectly.\n\n<p>However, what you're proposing is to change the python bindings to become a mixture of C++ and Python code.\n\n</p><p>This should be a conscious decision (the stated decision when we started Python bindings is \"no Python code in HTCondor\") and not done as a side-effect of the packaging.\n\n</p><p>[FWIW - I fully support the idea of having a mixture of Python code and C++ and doing the necessary changes to the packaging in order to do so.  We just should have the ordering of the logic correct.]\n\n</p><p></p><hr/>\n<em>2019-Feb-07 13:16:33 by jpatton:</em> <br/>\n\nI suppose that we aren't actually breaking any must-do guidelines, but since we now also distribute the bindings via wheels, we <em>should</em> provide egg info in the RPM so that <code>pip</code> recognizes that it is installed. <code>pip</code> completely ignores that htcondor.so and classad.so exist, so if you <code>pip install htcondor</code>, you get a second copy of the bindings in site-packages. (The version installed via <code>pip</code> takes precedence FWIW.) So when people install packages that list htcondor as a requirement (e.g. HTMap), <code>pip</code> is happy to install htcondor again even though the requirement may already be met via <code>python2-condor</code>. Thankfully, we have good backwards compatibility, so this mostly just wastes disk space :)\n\n<p>On the philosophical side, I don't know enough of the deep condor history, but any python code that is shipped with the bindings this way would be an extension of condor, mainly wrappings around the C++ bindings, not actually part of the daemons or utils. Shipping these extensions in the same package as the bindings does make the distinction just a little bit fuzzy, certainly more fuzzy than shipping them in their own separate package(s) or under examples or libexec, as we've done in the past with wrappers around the command line tools. But (as I'm sure you agree) packaging these extensions with the core bindings should be convenient for developers and both convenient and intuitive for users.\n\n</p><p></p><hr/>\n<em>2019-Feb-07 13:22:49 by jpatton:</em> <br/>\n\nOh, I misinterpreted the potential objection with mixing C++ and Python code. I suppose it's more that we'd be dealing with <code>setup.py</code> and <code>__init__.py</code> files alongside the bindings code itself? My counter would be that any Python code that we include with the package will never be executed by or inside a condor process, only by a user's Python interpreter.\n\n<p></p><hr/>\n<em>2019-Feb-07 13:53:47 by bbockelm:</em> <br/>\n\nNah - I don't have a particular objection about having the python bindings being written partially in python (or doing these changes so we could in the future).  I don't think of setup.py / __init__.py as writing things in Python, but once we do this we could really implement some higher level functionality in pure python calling the more basic C++ bindings.\n\n<p>I just want to have us agree this is OK explicitly.\n\n</p><p>So, if ToddT gives the +1 to make changes that would enable us to have the Python bindings be partially written in Python, I say we should dive in and make changes analogous to what's done for the wheels.\n\n</p><p></p><hr/>\n<em>2019-Feb-07 14:01:23 by tannenba:</em> <br/>\n\nI have no problem with HTCondor's Python API being partially written in pure Python...  in fact I think it would be very helpful.\n\n<p>(This is much different than writing pieces of core HTCondor in Python...)\n\n</p><p></p><hr/>\n<em>2019-Feb-26 16:50:41 by jpatton:</em> <br/>\n\nI'm hung up on figuring out what to do with <code>libpyclassad</code>. Right now it's part of the current <code>python2-condor</code> package and installed in <code>/usr/lib64</code>. Similarly, <code>libclassad_python_user</code> is in this package and installed in <code>/usr/libexec/condor</code>.\n\n<p>It may be helpful to see the spec file for how <code>python2-condor</code> is actually packaged since I'm not sure how to include system-level libraries using setuptools (i.e. <code>python setup.py bdist_rpm</code>). Appending to %files does not seem to be one of the command-line/setup.cfg options.\n\n</p><p>It seems like the important parts are placing the .so files under their respective directories under site-packages and adding the htcondor.egg_info directory (and files), which setuptools nicely generates for us <strong>except</strong> it's not tracking system-level libraries, which seems like it could cause headaches if users/admins are mixing and matching <code>pip</code> and <code>yum</code> installs. However, because the wheels install and use packaged, portable external libraries, I'm not too worried about users/admins pip-installing over top and going \"out of sync\" with the version of system condor libraries (e.g. libcondor_utils, libclassad, and libpyclassad) that are installed. Whatever is done last, <code>pip install</code> or <code>yum install</code>, will have its version prevail and its libraries linked correctly.\n\n</p><p></p><hr/>\n<em>2019-Feb-27 10:42:36 by bbockelm:</em> <br/>\n\n<ul>\n<li><em>libpyclassad</em>: consider this an external shared library that the modules link against.\n</li><li>_ libclassad_python_user_: This is a shared module, loadable by HTCondor daemons, that exports a new function to the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> environment.  Don't consider this a part of the python bindings, but a separate entity that depends on the python bindings.\n</li></ul>\n\n<p></p><hr/>\n<em>2019-Oct-01 16:23:25 by jpatton:</em> <br/>\n\nPending latest test builds on Batlab, this is in now. There's some fragility in the RPM and DEB spec files that should be addressed before release and/or 8.9.5:\n\n<p></p><ol>\n<li>In the RPM spec, the Python 3.6 site-packages directory is hardcoded as I struggled to find an appropriate provider for an RPM macro. <code>%{python3_other_sitearch}</code> worked in my CentOS 7 docker container, but failed due to some reference to <code>python3.4</code> in the Batlab.\n</li><li>In the DEB spec (specifically, the <code>htcondor.install</code> file), the Python 2.7 and Python 3 bindings are being pulled out of different tmpdir locations, I suspect because we use Python 2.7 debhelper but not the Python 3 debhelper during the install step.\n</li></ol>\n\n<p>I have tested the MacOS tarball with good results. I don't have a good way to test the Windows build, and I suspect we may need some updates to how the installer handles the Python bindings.</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"tktview?tn=6923\" title=\"Python Bindings: streamlined submit semantics\">#6923</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nPython Bindings: streamlined submit semantics</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"tktview?tn=6924\" title=\"Python Bindings: cluster handle objects\">#6924</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nPython Bindings: cluster handle objects</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"tktview?tn=6926\" title=\"Python Bindings: Easy Submit and Cluster Handle\">#6926</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nPython Bindings: Easy Submit and Cluster Handle</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Nov-08 09:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58411\">[58411]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>) Add python3-setuptools to build requirements for RPM/deb  (By Tim Theisen )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-30 17:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58299\">[58299]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>) ensure _Param is imported in the htcondor Python package  (By <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JoshKarpel\" title=\"Josh Karpel\">JoshKarpel</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-28 13:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58280\">[58280]</a></span>: Version history for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-25 15:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58273\">[58273]</a></span>: Check for python install errors <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-03 13:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58023\">[58023]</a></span>: Fixup new Python bindings install cmake to handle missing Python libs <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-01 21:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58003\">[58003]</a></span>: Final change to fragile DEB Py3 packaging <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-01 16:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57995\">[57995]</a></span>: Hardcode Py3 location in RPM for now, fix DEB weirdness <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-01 14:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57992\">[57992]</a></span>: RPM builds w/ py3 need rpm macros, fix DEB again <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-01 10:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57987\">[57987]</a></span>: More fiddling with DEB and RPM <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-01 05:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57986\">[57986]</a></span>: Debian build doesn't seem to need help finding bindings <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Oct-01 04:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57985\">[57985]</a></span>: Better packaging of Python bindings <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span> 1. Non-C++ code moved or added to <a class=\"file\" href=\"rlog?f=bindings/python\">/bindings/python</a>, and this directory can contain native Python code to extend the bindings.\u00a0[...]\n (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Sep-25 13:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57920\">[57920]</a></span>: More improvements to setuptools install of python bindings <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span> We no longer output python bindings so-files to a different directory, as setuptools can build and install the python libraries' scaffolding to the correct locations without the so-files existing in the source tree. Note that the install\u00a0[...]\n (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Sep-18 09:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57852\">[57852]</a></span>: Change python bindings install to use setuptools <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span> Instead of having cmake install classad.so and htcondor.so to a specific directory, now we use setuptools (\"python setup.py build\" and \"python setup.py install\") to build a proper package, including &lt;module&gt;/__init__.py files and an egg_info directory,\u00a0[...]\n (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Feb-28 15:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56262\">[56262]</a></span>: Cleaning up setup.py and other setuptools-related files (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>) When building wheels, the version string can be appended to by issuing \"egg_info -b &lt;string&gt;\" before \"bdist_wheel\" when running python setup.py.\u00a0[...]\n (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Feb-28 14:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56261\">[56261]</a></span>: Adding Python-specific .gitignore to Python extensions directory tree (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>)  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Feb-15 22:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56203\">[56203]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6907\" title=\"python bindings should be packaged following proper guidelines\">#6907</a></span>) move python bindings scaffolding to new home Committer: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JoshKarpel\" title=\"Josh Karpel\">JoshKarpel</a></span>  (By Josh Karpel )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2019-Oct-28 13:26", "status": "resolved", "created": "2019-Feb-07 12:13", "fixed_version": "2019-Feb-07 12:13", "broken_version": "", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "jpatton", "derived_from": "", "creator": "jpatton", "rust": "", "customer_group": "other", "visibility": "public", "notify": "jpatton@cs.wisc.edu,tannenba@cs.wisc.edu,bbockelman@morgridge.org,karpel@wisc.edu,tim@cs.wisc.edu", "due_date": ""}