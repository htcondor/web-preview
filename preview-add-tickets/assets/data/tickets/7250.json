{"id": 7250, "title": "Ticket #7250: enable a gwdata:// URL type for GW input files", "description": "<blockquote>\nFrom the LIGO sister issue here: <a class=\"external\" href=\"https://github.com/lscsoft/osg-lvc/issues/66\">https://github.com/lscsoft/osg-lvc/issues/66</a>\n\n<p>LIGO would like to allow users to specify input files in terms of gwdata:[frame type, channel, segment, filename] instead of file://blah, and use a Condor file xfer plugin scheme so that Condor will stage that data into that filename in the job sandbox on the execute machine.\n\n</p><p>Greg says he <strong>thinks</strong> HTCondor can do this today by defining a custom file transfer plugin that looks for the data locally, and if not found, explicitly uses chirp to pull the data from the submit side.\n\n</p><p>We should converge on a design and identify missing Condor features to enable it, if any.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Sep-11 15:12:42 by gthain:</em> <br/>\n\nCan I get an example of using gwfind today?  In particular, I assume that we always want to copy the file (files?) into the scratch directory.  Who controls the name of the input file, or do we care?\n\n<p></p><hr/>\n<em>2019-Sep-16 13:00:01 by bbockelm:</em> <br/>\n\nI think we need to split up this ticket.\n\n<p></p><ol>\n<li>Have a <code>gwdata://</code> file transfer plugin.\n</li><li>Have a new command in the file transfer object that allows a \"fallback\" to execution on the schedd side.\n</li></ol>\n\n<p>I would suggest avoiding the chirp route as it has security implications (if you enable it - it's turned off by default - it allows a remote job to download arbitrary files from the schedd).\n\n</p><p></p><hr/>\n<em>2019-Nov-11 14:05:13 by coatsworth:</em> <br/>\n\nHi all, Brian makes a good point about this being two separate pieces of work. Creating a <code>gwdata://</code> plugin is fairly straightforward. My understanding is we want this plugin to look for input files locally on the worker nodes? Where exactly are we looking for these files? (I'm assuming not in the spool/execute folders because these get removed after job completion). If somebody on the LIGO side can explain the logic for this that would be very helpful.\n\n<p>As for a fallback when the file doesn't exist locally: this is much trickier. Falling back to our regular file transfer is horribly complicated and not realistic. Greg suggested using <code>condor_chirp</code>; this is a possibility but very fickle and difficult to configure correctly. Is there another way we can grab the full files in a fallback scenario? Are they available on a shared file system? Available by HTTP or some other protocol? Depending on our options here, I may break this functionality off into a separate ticket.\n\n</p><p></p><hr/>\n<em>2019-Dec-03 10:06:20 by anderson:</em> <br/>\n\nWorking design doc from LIGO at <a class=\"external\" href=\"https://docs.google.com/document/d/1_nXWH64XN4igjYBg_5-6b0Gl7BLB23ml-X9SfQOYlSI/edit\">https://docs.google.com/document/d/1_nXWH64XN4igjYBg_5-6b0Gl7BLB23ml-X9SfQOYlSI/edit</a>\n\n<p></p><hr/>\n<em>2019-Dec-03 10:07:55 by anderson:</em> <br/>\n\nFeedback from Mark Coatsworth on design doc,\n\n<p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nHi Stuart, thanks for the design doc! This helps explain a lot.\n\nOne important detail: the document doesn't describe how files actually get transferred from whatever the GW data source (datafind server?) GW is using. Brian mentioned there's a utility script you use to retrieve data, and the document does mention \"gwpy\" at one point. Is this relevant? If not, can you describe how GW data actually gets retrieved?\n</td></tr></tbody></table></div>\n\n\n<p></p><hr/>\n<em>2020-Mar-03 10:29:05 by pfc:</em> <br/>\n\nThe ball is in Mark's court to provide a plugin API and user-centric example / use-case for LIGO to approve.\n\n<p></p><hr/>\n<em>2020-Mar-10 10:08:13 by pfc:</em> <br/>\n\ngwdatafind source is here: <a class=\"external\" href=\"https://git.ligo.org/gwdatafind/gwdatafind\">https://git.ligo.org/gwdatafind/gwdatafind</a>\n\n<p></p><hr/>\n<em>2020-Mar-23 20:56:37 by coatsworth:</em> <br/>\n\nI'm just tidying up the first version of this plugin. For now, it's a python script (<code>gwdata_plugin.py</code>) that you put in your submit directory and send along with the job. A submit file looks like:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">executable = gwdata-test.sh\noutput = gwdata-test.out\ntransfer_plugins = gwdata=gwdata_plugin.py\ntransfer_input_files = gwdata://datafind.gw-openscience.org?observatory=H&amp;type=H1_GWOSC_O2_16KHZ_R1&amp;s=1166311424&amp;e=$((1166479360+4096))\nshould_transfer_files = YES\n\nqueue\n</pre></div>\n\n\n<p>The plugin contacts the gwdatafind server for a list of files, then it downloads them.\n\n</p><p>Things it does not do:\n\n</p><p></p><ul>\n<li>Stages files on the submit machine (I'm still not sure why we need this?)\n</li><li>Caches files on the execute machine (this is easy to do, but caching policy is hard)\n</li></ul>\n\n<p></p><hr/>\n<em>2020-Mar-26 14:54:07 by coatsworth:</em> <br/>\n\nHi all, I just shipped V1 of our gwdata_plugin as described in the comment above. Until we find a permanent home for it, I've put it in my personal github (let me know if this should be made private):\n\n<p><a class=\"external\" href=\"http://github.com/markcoatsworth/gwdata_plugin\">http://github.com/markcoatsworth/gwdata_plugin</a>\n\n</p><p>Everything you need to know about using it should be in the README. I've emailed James Clark so he can look into trying this with some real workloads. Stay tuned!\n\n</p><p></p><hr/>\n<em>2020-May-26 10:10:37 by pfc:</em> <br/>\n\nJames thinks this is in Mark's court to think about the \"fallback\" mechanism when one file xfer technique is unavailable or fails.\n\n<p></p><hr/>\n<em>2020-Jun-02 18:23:25 by coatsworth:</em> <br/>\n\nJames is correct, the ball is in my court for the fallback / multiple data source mechanism. This is a completely separate piece of work from the <code>gwdata_plugin</code>, so I've created a separate ticket (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7671\" onclick=\"get_ticket_and_populate_wrapper('7671'); return false;\" title=\"File Transfer mechanism for URL transfers from multiple data sources\">#7671</a></span>) which I've sent to some people for review, and hoping to start implementing shortly.\n\n<p></p><hr/>\n<em>2020-Jul-27 15:39:39 by coatsworth:</em> <br/>\n\nThis file transfer plugin is complete and available in the condor git repository at <code>/src/condor_scripts/gwdata_plugin.py</code> and also in my personal github at <a class=\"external\" href=\"http://github.com/markcoatsworth/gwdata_plugin\">http://github.com/markcoatsworth/gwdata_plugin</a>.\n\n<p>At this point, I'm going to going consider the plugin complete and move this ticket towards resolution. We'll deal with the separate file transfer multiple-data-source problem in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7671\" onclick=\"get_ticket_and_populate_wrapper('7671'); return false;\" title=\"File Transfer mechanism for URL transfers from multiple data sources\">#7671</a></span>.\n\n</p><p></p><hr/>\n<em>2020-Sep-01 14:21:36 by coatsworth:</em> <br/>\n\nAt this point we have a functional <code>gwdata_plugin</code> file transfer plugin, so I'm going to mark this ticket as resolved.\n\n<p>There is some ongoing work that will be completed in separate tickets, including x509 authentication support in <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=7833\" onclick=\"get_ticket_and_populate_wrapper('7833'); return false;\" title=\"gwdatafind plugin should support x509 authentication for cvmfs data\">#7833</a></span>, as well as a multiple data source mechanism currently being discussed in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7671\" onclick=\"get_ticket_and_populate_wrapper('7671'); return false;\" title=\"File Transfer mechanism for URL transfers from multiple data sources\">#7671</a></span>.\n\n</p><p>We are also still looking for a permanent home for this file transfer plugin and its documentation. Currently it lives in my personal github, which is linked above. The long term plan is for this to go in LIGO's gwdatafind repository; I'll update this ticket with the coordinates once this is done.</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7671\" onclick=\"get_ticket_and_populate_wrapper('7671'); return false;\" title=\"File Transfer mechanism for URL transfers from multiple data sources\">#7671</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nFile Transfer mechanism for URL transfers from multiple data sources</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=7833\" onclick=\"get_ticket_and_populate_wrapper('7833'); return false;\" title=\"gwdatafind plugin should support x509 authentication for cvmfs data\">#7833</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ngwdatafind plugin should support x509 authentication for cvmfs data</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Jul-27 15:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=60242\">[60242]</a></span>: Minor cleanup to gwdata_plugin.py (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7250\" onclick=\"get_ticket_and_populate_wrapper('7250'); return false;\" title=\"enable a gwdata:// URL type for GW input files\">#7250</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Jul-23 18:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=60206\">[60206]</a></span>: Added LIGO gwdatafind file transfer plugin (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7250\" onclick=\"get_ticket_and_populate_wrapper('7250'); return false;\" title=\"enable a gwdata:// URL type for GW input files\">#7250</a></span>)  (By Mark Coatsworth )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-Sep-01 14:22", "status": "resolved", "created": "2019-Sep-11 11:24", "fixed_version": "2019-Sep-11 11:24", "broken_version": "", "priority": "2", "subsystem": "FileTransfer", "assigned_to": "coatsworth", "derived_from": "", "creator": "pfc", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "pcouvare@caltech.edu, coatsworth@cs.wisc.edu, gthain@cs.wisc.edu", "due_date": ""}