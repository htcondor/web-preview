{"id": 6584, "title": "Ticket #6584: Glide-ins misreport GPU device names", "description": "<blockquote>\nCUDA devices have indexes, not names.  If CUDA_VISIBLE_DEVICES is set in the startd's environment, condor_gpu_discovery will (not wrongly) report that it found devices named with the first <em>k</em> indices, rather than with the indices given in CUDA_VISIBLE_DEVICES.\n\n<p>We worked around this problem in <code>condor_gpu_discovery</code> by unsetting CUDA_VISIBLE_DEVICES (and GPU_DEVICE_ORDINAL) before calling doing GPU detection.  This gives us the correct device indices.  We then filter out all the devices not listed in the original CUDA_VISIBLE_DEVICES (or GPU_DEVICE_ORDINAL).\n\n</p><p>In <code>condor_gpu_utilization</code>, we just unset CUDA_VISIBLE_DEVICES, and report using the correct indices; the startd already matches devices to slots, so nothing else is necessary.</p></blockquote>", "remarks": "<blockquote>\n<em>original description:</em> <br/>\n\nCUDA devices have indexes, not names.  If CUDA_VISIBLE_DEVICES is set in the startd's environment, condor_gpu_discovery will (not wrongly) report that it found devices named with the first <em>k</em> indices, rather than with the indices given in CUDA_VISIBLE_DEVICES.\n\n<p>This causes grief for glide-in pools, because (for example) every GPU on a machine providing one-GPU slots will be reported as using the \"CUDA0\" device.\n\n</p><p>David Schultz has provided a \"proof a concept\" patch to condor_gpu_discovery so that it will report that it found the CUDA_VISIBLE_DEVICES.\n\n</p><p>Investigation will be required to extend this patch to OpenCL (does OpenCL have the concept of visible devices?), as well as to condor_gpu_utilization.\n\n</p><p>This patch is a quick work-around; it's not clear what will happen in the upcoming CUDA versions that support multiple processes for each GPU.\n\n</p><p>We also think that filtering/aliasing should be an explicit option, in both configuration and on the tools' command lines; this should be easy to arrange with <code>if $(ENV(..))</code> in the metaknob.  It will additionally probably work better for future CUDA versions and/or for OpenCL if the detection code unsets the appropriate environment variables, gets all the data, and then only outputs what's listed in the explicit filter request.\n\n</p><p>A longer-term option would be a startd config knob to skip custom machine resource detection entirely and instead report everything based on polling the parent HTCondor's <code>.update.ad</code>.\n\n</p><p><em>2018-Mar-22 15:41:56 by tlmiller:</em> <br/>\n\nFound a decided infelicity in the config system that I've discussed with TJ.  I validated (using a hack-around) the approach on a multi-GPU system for detection purposes, but since I'll need to test the non-hack-around code (and as a metaknob) with 8.7 anyway, I haven't tested our approach to the utilization code yet.  (Also still need to verify that the doc update builds!)\n\n</p><p></p><hr/>\n<em>2018-Mar-22 16:10:45 by tlmiller:</em> <br/>\n\nActually, we could proceed by adding another metaknob, <code>use policy : preserve_cude_device_names</code>, which would append '-filter -device-list $ENV(CUDA_VISIBLE_DEVICES)' to <code>GPU_DISCOVERY_EXTRA</code> and '-filter' to the new <code>GPU_MONITOR_EXTRA</code> variable (which <code>use feature : GPUsMonitor</code> would updated to include).\n\n<p>Actually, we might be better off appending '-filter -device-list $(CUDA_VISIBLE_DEVICES)' and requiring the glidein to pull CUDA_VISIBLE_DEVICES from the environment if they so desire, rather than risk the weirdness that comes with the config potentially being different depending on who's asking.\n\n</p><p></p><hr/>\n<em>2018-Mar-26 11:44:15 by tlmiller:</em> <br/>\n\nSo ToddT reminded me that we have to make sure that CUDA_VISIBLE_DEVICES is set properly for (each of) the slots, so there's no reason we'd ever want to have the detection or utilization binaries report the nonglobal device indices.  Following that, the detection code should record CUDA_VISIBLE_DEVICES and then unset it, do its normal detection work, and then filter out everything not in CUDA_VISIBLE_DEVICES (including for the total device count).  The utilization code needs only unset CUDA_VISIBLE_DEVICES because of the slot-matching code in the startd.\n\n<p>All of the above also applies to GPU_DEVICE_ORDINAL, as well.\n\n</p><p></p><hr/>\n<em>2018-Mar-28 14:44:58 by tlmiller:</em> <br/>\n\n... and that should take care of it.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-29 13:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54604\">[54604]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6584\" title=\"Glide-ins misreport GPU device names\">#6584</a></span>) Fix Windows build failure.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-28 13:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54594\">[54594]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6584\" title=\"Glide-ins misreport GPU device names\">#6584</a></span>) Rewrite to match new implementation plan.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-22 15:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54563\">[54563]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6584\" title=\"Glide-ins misreport GPU device names\">#6584</a></span>) Add -filter option to condor_gpu_utilization, which is all should be necessary. (Needs testing.)  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-21 15:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54562\">[54562]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6584\" title=\"Glide-ins misreport GPU device names\">#6584</a></span>) Add support for multiple -device options, as well as for -device-list and -filter to condor_gpu_discovery.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Mar-21 15:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54561\">[54561]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6584\" title=\"Glide-ins misreport GPU device names\">#6584</a></span>) Documentation.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "incident", "last_change": "2020-Feb-14 13:32", "status": "resolved", "created": "2018-Feb-27 13:30", "fixed_version": "2018-Feb-27 13:30", "broken_version": "", "priority": "1", "subsystem": "DaemonsExecNode", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, johnkn@cs.wisc.edu, david.schultz@icecube.wisc.edu", "due_date": ""}