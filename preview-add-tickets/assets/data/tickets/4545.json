{"id": 4545, "title": "Ticket #4545: condor_submit permits syntatically invalid Requirements", "description": "<blockquote>\nIt appears that condor_submit doesn't check the validity of the Requirements expression until __after__ it modifies it.  Thus, the following submit-file line\n\n<p></p><div class=\"verbatim\">\n<pre>requirements = True ) &amp;&amp; Machine == \"e432.chtc.wisc.edu\" || ( False\n</pre></div>\n\n\n<p>is accepted and has the effect of disabling all of the automatically-added requirements.  (The modified requirement is:\n\n</p><p></p><div class=\"verbatim\">\n<pre>( True ) &amp;&amp; Machine == \"e432.chtc.wisc.edu\" || ( False ) &amp;&amp; (auto-generated) &amp;&amp; (auto-generated)\n</pre></div>\n\n\n<p>which is syntactically valid but mostly ignored because &amp;&amp; binds tighter than ||.)\n\n</p><p>While this is useful for system administrators debugging machines, it would be at best confusing for users who happen to make a similar typo and shouldn't be allowed.  So when adding the check before the modifications, also add a new command or flag (<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DoNotModifyRequirements\" title=\"Do Not Modify Requirements\">DoNotModifyRequirements</a></span> for either?).  (Or, if +Requirements doesn't bypass the requirements modifications, should it?)</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2014-Aug-20 14:05", "status": "new", "created": "2014-Aug-20 14:05", "fixed_version": "2014-Aug-20 14:05", "broken_version": "", "priority": "4", "subsystem": "Tools", "assigned_to": "johnkn", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}