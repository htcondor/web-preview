{"id": 1092, "title": "Ticket #1092: Git update hook to disallow development code in stable branches", "description": "<blockquote>\nOn two recent occasions (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1089\" title=\"Revert bad merges into V7_4-branch\">#1089</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1091\" title=\"undo bad rebase of V7_4-branch\">#1091</a></span>), a significant amount of development code on the master branch was merged into <code>V7_4-branch</code>. This is bad for several reasons. To help prevent this from happening in the future, we should add an <code>update</code> hook in our main git repository that rejects pushes that introduce commits from the <code>master</code> branch into any stable branch. Cherry-picking of individual commits should still be allowed.\n\n<p>The <code>update</code> hook can work as follows. If a branch head is being moved (not created or deleted) and the branch name indicates it's a stable branch (i.e. '=Vx_y...=' where <code>x</code> and <code>y</code> are numbers and <code>y</code> is even), then perform the following check: Produce a list of SHA1s that are on <code>master</code> but not on the stable branch, and a list of SHA1s that the push is adding to the stable branch. If these two lists contain any common elements, reject the push.\n\n</p><p>Cherry-picking commits from <code>master</code> to a stable branch would be allowed, since the new commits have new SHA1s. Branch creation is always allowed, so creating a new stable series branch off of <code>master</code> would work fine.</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Jan-07 10:30:25 by jfrey:</em> <br/>\n\nI've attached the proposed update hook script. I will replace most of the echos with comments before putting it in place.\n\n<p></p><hr/>\n<em>2010-Jan-07 12:43:25 by danb:</em> <br/>\n\nI don't spot any problems, but you could consider replacing this:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">        git rev-list $oldrev..refs/heads/master &gt;$tmpfile\n        git rev-list $oldrev..$newrev &gt;&gt;$tmpfile\n        if sort $tmpfile | uniq -c | grep -q -v '^ *1 ' ; then\n            badness=1\n        fi\n        rm -rf $tmpfile\n</pre></div>\n\n\n<p>with the following:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">        git rev-list $oldrev..refs/heads/master &gt; $tmpfile.master\n        git rev-list $oldrev..$newrev &gt; $tmpfile.stable\n        if grep -q -F -f $tmpfile.master $tmpfile.stable ; then\n            badness=1\n        fi\n        rm -rf $tmpfile.master $tmpfile.stable\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-Jan-07 16:18:49 by jfrey:</em> <br/>\n\nI learned new a grep option today. Neat. I'll use your suggested replacement.\n\n<p></p><hr/>\n<em>2010-Jan-07 16:19:19 by jfrey:</em> <br/>\n\nThe <code>update</code> hook is now live in the central git repository.</blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/132/update.sh\">update.sh</a>\n1242 bytes added by jfrey on 2010-Jan-07 16:29:35 UTC.\n<br/>\nProposed update hook.<br/>\n</li></ul>\n</blockquote>", "check_ins": "", "type": "todo", "last_change": "2011-Jan-05 16:44", "status": "resolved", "created": "2010-Jan-07 10:25", "fixed_version": "2010-Jan-07 10:25", "broken_version": "", "priority": "1", "subsystem": "Unknown", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "dan@hep.wisc.edu", "due_date": "20090107"}