{"id": 7866, "title": "Ticket #7866: Shared port socket-passing oddities on Mac OS X", "description": "<blockquote>\nThe combination of <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7502\" title=\"Avoid blocking i/o in shared port daemon\">#7502</a></span> and <span class=\"chng\"><a href=\"chngview?cn=60471\">[60471]</a></span> causes us grief.  To quote from a remark on <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7799\" title=\"Remove intentional delays in daemon startup\">#7799</a></span>:\n\n<p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nWhen the shared port daemon sends its first child-alive message to the master, the master sees no data on the passed socket. When the shared port daemon forwards a connection for the collector's child-alive, the master reads the data from the passed socket just fine. The failure to read data for the shared port's child-alive appears to be tied to the master sleeping and not immediately responding to the connection from the shared port daemon. Reverting the master's behavior on macOS mostly fixes the problem, but the underlying cause should still be investigated.\n</td></tr></tbody></table></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2020-Sep-28 13:39:11 by tlmiller:</em> <br/>\n\nIs this related to the Mac OS X -specific blocking?\n\n<p>Is the data getting lost because the shared port daemon is closing the childalive socket before the sent data is read by the master?  That's not totally consistent with the collector not having any problems, but maybe there's something subtle about the special handling of connections from the shared port daemon itself?\n\n</p><p></p><hr/>\n<em>2020-Oct-07 16:09:18 by tlmiller:</em> <br/>\n\nTurning the MacOS X -specific blocking hand-off protocol does seem to fix the problem, but I don't understand why.  (It could just be an expensive way of avoiding a race condition.)  The original comment indicated that the hand-off protocol without the acknowledgement resulted in handed-off sockets being closed; this problem is that they're open, but never receive any data.  This may just be a result of a subtle kernel change, but doesn't answer the question as to why only the shared port daemon itself seems to have this problem.\n\n<p>An oddity I noticed during my testing: after rebuilding, the initial test run succeeds but takes noticeably longer to do so than subsequent runs.  This may just be a caching issue, moving the the code out of its current race condition.\n\n</p><p>Attempts to duplicate the issue without the shared port daemon failed, which means this likely has to do with the special-case socket-handoff code (using connect_socketpair()).\n\n</p><p></p><hr/>\n<em>2020-Oct-07 16:26:14 by tlmiller:</em> <br/>\n\nSwitching do_shared_port_local_connect() to pass the nonblocking flag to PassSocket() caused a segfault (?!).  Working around that didn't change the master's behavior any.\n\n<p></p><hr/>\n<em>2020-Oct-07 17:04:20 by tlmiller:</em> <br/>\n\nI weep: dup()ing the socket passed to the master (and throwing away the result) seems to make everything work.\n\n<p></p><hr/>\n<em>2020-Oct-08 09:59:43 by tlmiller:</em> <br/>\n\nTo clarify: dup()ing the socket and deliberately leaking it seems to help.\n\n<p>Moving the dup() from connect_socketpair_impl() to do_shared_port_local_connect() also seems to work.\n\n</p><p>Forcing all daemons to always bypass the shared port daemon results in the collector -- and only the collector -- failing in the same way as the shared port daemon.  This is probably a reflection of a race condition, potentially related to the fact that the master waits for the shared port daemon and the collector to each start up before starting the next daemon(s) on its list.\n\n</p><p></p><hr/>\n<em>2020-Oct-08 10:08:15 by tlmiller:</em> <br/>\n\nAdding a Sleep(1000); to the master just after StartDaemonHere() caused all the daemons to fail when forced to bypass the shared port daemon.\n\n<p></p><hr/>\n<em>2020-Oct-08 14:52:10 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>I do not like this ugly hack. I would not put it in a sack.\n\n</p><p>But I cannot think of anything better.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Oct-16 10:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=61505\">[61505]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7866\" title=\"Shared port socket-passing oddities on Mac OS X\">#7866</a></span>) Release note.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Oct-08 10:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=61450\">[61450]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7866\" title=\"Shared port socket-passing oddities on Mac OS X\">#7866</a></span>) Fix typo in conditional.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Oct-08 10:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=61449\">[61449]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7866\" title=\"Shared port socket-passing oddities on Mac OS X\">#7866</a></span>) Implement hack to avoid MacOS X -specific fast daemon startup problem  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2020-Oct-16 10:08", "status": "resolved", "created": "2020-Sep-28 13:36", "fixed_version": "2020-Sep-28 13:36", "broken_version": "", "priority": "2", "subsystem": "DaemonSharedP", "assigned_to": "tlmiller", "derived_from": "#7799", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, jfrey@cs.wisc.edu", "due_date": ""}