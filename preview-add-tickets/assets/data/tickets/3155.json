{"id": 3155, "title": "Ticket #3155: Integration test suite overhaul/redux", "description": "<blockquote>\nThe following is meant to capture modifications that will be made to the Integration test suite.\n\n<p><span class=\"subsection\"></span></p><h3>Requirements </h3>\n<ul>\n<li>Clearly defined interface with some wiki/spec\n</li><li>Test suite shall not require a priori, knowledge of the condor source tree, and should be considered an independent sub-package.\n</li><li>Test suite shall be able to be run on any condor installation\n</li><li>Easily extensible, if folks want to create their own tests they can with little effort.\n</li><li>Support for root level tests\n</li><li>Ability to easily organize into sub-suites\n</li><li>Easily be able to select a subsection/suite of tests to run.  No custom jigging to run a subset or suite.\n</li><li>The tests shall able to be run in parallel.\n</li><li>A timeout for the runtime of a test should be able to be specified/enforced, such that hung/run-away tests get cleaned up and marked as failed.\n</li><li>support for re-usable fixtures - especially, but not necessarily limited to, condor configurations as fixtures.  Taking boost::test as a model, the ability to apply fixtures at the suite level and the individual test level would be useful (and efficient).\n</li><li>should provide a set of API routines that allow a given test to wait for various pool states before proceeding, for example wait_for_slots(n), wait_for_daemons(daemon-name-list), wait_for_job_{submitted,running,completed}(job-spec(s)), wait_for_next_negotiation_cycle(), etc\n</li><li>should control condor daemons as an external user would do; for example, no direct startup of daemons, but invocation of appropriate system script (service condor start; net start condor, etc); or control of the queue using condor_q/condor_history; no \"insider\" tricks.\n</li><li>easy access/analysis of logs: this could be done also indirectly, cleaning up/standardizing the format of the logs (rfc5424?)\n</li><li>should support long-term load/stress testing (for instance by repeating individual [unit-]tests).\n</li><li>should support both stop-on-error and finish-and-report testing approaches (also related to long-term testing).\n</li><li><strong>Append your laundry list items here</strong>\n</li></ul>\n\n<p><span class=\"subsection\"></span></p><h3>Milestones </h3>\n\n<p>TBD, still capturing requirements.</p></blockquote>", "remarks": "<blockquote>\n<em>2012-Sep-20 13:27:15 by tstclair:</em> <br/>\n\nI'm ready to start working on *this, and was hoping for upstream collaboration on it.  Maybe we could pick a part in next FW.\n<hr/>\n<em>2012-Dec-11 16:38:39 by johnkn:</em> <br/>\n\nBulk change of target version from v070902 to v070903 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2013-Jan-18 09:18:18 by tstclair:</em> <br/>\n\nScott was going to be my partner on this, without an upstream co-hort I marked as stalled.\n<hr/>\n<em>2013-Mar-05 10:58:27 by johnkn:</em> <br/>\n\nBulk change of target version from v070904 to v070905 using ./ticket-target-mover.\n<hr/>\n<em>2013-Apr-22 11:10:10 by johnkn:</em> <br/>\n\nBulk change of target version from v070905 to v070906 using ./ticket-target-mover.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2013-Apr-22 11:10", "status": "stalled", "created": "2012-Jul-23 13:07", "fixed_version": "2012-Jul-23 13:07", "broken_version": "v070900", "priority": "3", "subsystem": "Tests", "assigned_to": "tstclair", "derived_from": "#3154", "creator": "tstclair", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tstclair@redhat.com matt@cs.wisc.edu eje@cs.wisc.edu tannenba@cs.wisc.edu ltoscano@redhat.com", "due_date": ""}