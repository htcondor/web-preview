{"id": 2589, "title": "Ticket #2589: Optionally allowed failed chmod in ReliSock::get_file_with_permissions", "description": "<blockquote>\nWhen pulling output back from an execute name, failing to chmod the file to the correct permissions is a fatal error.  The code in question is in ReliSock::get_file_with_permissions <a class=\"file\" href=\"rlog?f=src/condor_io/cedar_no_ckpt.cpp\">/src/condor_io/cedar_no_ckpt.cpp</a> around line 491.  While this usually makes sense, it fails if the output directory is on a filesystem that refuses all chmod attempts, notably a Samba mount on Linux.  This has bit a real user.  (<span class=\"ticket\"><a class=\"new\" href=\"tktview?tn=2588\" title=\"User log gives unhelpful exception reason for permissions problems\">#2588</a></span> is related and discusses our poor error handling of this case.)\n\n<p>For this sort of special case, Condor should allow the chmod to fail if the administrator allows it.  Possibilities:\n\n</p><p></p><ul>\n<li>ALLOW_CHMOD_TO_FAIL=TRUE - Global settings, chmod failures in ReliSock::get_file_with_permissions always ignored\n</li><li>CHMOD_UNSAFE_PATHS=/mnt/Windows1,/mnt/Windows2 - Any path with this as a prefix will ignore chmod failures in ReliSock::get_file_with_permissions.\n</li></ul>\n\n<p>The behavior can probably be limited to the shadow</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2011-Oct-26 11:38", "status": "new", "created": "2011-Oct-26 11:38", "fixed_version": "2011-Oct-26 11:38", "broken_version": "v070700", "priority": "4", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}