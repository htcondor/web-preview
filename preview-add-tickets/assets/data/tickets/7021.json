{"id": 7021, "title": "Ticket #7021: Declare build products from external projects", "description": "<blockquote>\nSuppose we have this setup:\n\n<p></p><ol>\n<li>We have an external project, <code>foo</code>, in the Condor build,\n</li><li>The <code>foo</code> target produces as part of the build a library <code>libfoo.so</code>, and\n</li><li>There is a condor executable <code>condor_foo</code> that links against <code>libfoo.so</code>.\n</li></ol>\n\n<p>In this case, some build generators (particularly, <code>ninja</code>) fail.  This is because <code>ninja</code> will analyze the entire build dependency graph prior to starting the build and bail out if there are unmet dependencies.\n\n</p><p><code>make</code>, on the other hand, is lazy.  It does not compute dependencies until it tries to build a given target.  So if there's an undeclared side-product (as is the situation above), <code>make</code> won't notice unless the external project build is not complete by time it tries to build <code>condor_foo</code>.\n\n</p><p>This is why <code>make</code> is \"normally happy\" but, on large machines with lots of parallelism, we have to do <code>make externals</code> followed by <code>make</code>: we have missing dependencies and the build system doesn't get the ordering correct.  We are simply lucky that, for example, all the CREAM dependencies are normally done by time the <code>cream_gahp</code> is linked.\n\n</p><p>CMake 3.x fixes this by adding a <code>BUILD_BYPRODUCTS</code> attribute - you can declare what files the external project will generate and CMake can generate the dependencies accordingly.\n\n</p><p>We can't assume CMake 3.x however; we are stuck on 2.x.  I propose adding a custom target in <code>condor_post_external</code> that has the same side-effect as what CMake 3.x does internally.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-May-07 04:39:06 by bbockelm:</em> <br/>\n\nCode merged, NMI builds looking good.\n\n<p>This is build-system related (and mostly related to the <code>ninja</code> generator, not used by NMI) and likely does not merit a mention in the release notes.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-May-07 02:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56763\">[56763]</a></span>: Fixup all the remaining condor_post_external macro usage. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7021\" title=\"Declare build products from external projects\">#7021</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-May-07 02:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56762\">[56762]</a></span>: Declare explicit deps when an external header is used. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7021\" title=\"Declare build products from external projects\">#7021</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-May-07 02:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56761\">[56761]</a></span>: Explicitly declare what files are produced by project. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7021\" title=\"Declare build products from external projects\">#7021</a></span> Extend the `condor_post_external` macro to explicitly declare the files and libraries that are produced by each CMake <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExternalProject\" title=\"External Project\">ExternalProject</a></span>.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-May-01 13:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56721\">[56721]</a></span>: Declare explicit deps when an external header is used. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7021\" title=\"Declare build products from external projects\">#7021</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-May-01 11:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56719\">[56719]</a></span>: Explicitly declare what files are produced by project. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7021\" title=\"Declare build products from external projects\">#7021</a></span> Extend the `condor_post_external` macro to explicitly declare the files and libraries that are produced by each CMake <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExternalProject\" title=\"External Project\">ExternalProject</a></span>.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2019-May-27 13:30", "status": "resolved", "created": "2019-May-01 11:25", "fixed_version": "2019-May-01 11:25", "broken_version": "", "priority": "2", "subsystem": "", "assigned_to": "bbockelm", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}