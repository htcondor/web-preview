{"id": 1091, "title": "Ticket #1091: undo bad rebase of V7_4-branch", "description": "<blockquote>\nThe changes documented below involve versions of Condor that were never released.  Customers do not need to worry about them.\n\n<p>An incorrect rebase of V7_4-branch caused it to be updated to the head of the master.  The following command was likely responsible:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\"># bad command\ngit rebase origin V7_4-branch\n# what was intended\ngit rebase origin/V7_4-branch\n</pre></div>\n\n\n<p>The sha1 of V7_4-branch before the bad rebase was c49eb913f7c8aee2b9fb97bd63655806ae759c80.  The sha1 of V7_4-branch after the bad rebase was 80fc0a87a790657756aed97dd3d4bdc852e50081, which was incorrectly believed to be a bad merge into V7_4-branch.  In <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1084\" title=\"Undo merge of V7_5-cream_hardening-branch into V7_4-branch\">#1084</a></span>, 80fc0a back to but not including 584e2bb18f4e038066e44b53cddd9945e0b9dbbb was surgically removed, but this still left a bunch of undesired things from the master branch in V7_4-branch.\n\n</p><p>The bad rebase has been undone, but it has ramifications for anyone working with our git repository.\n\n</p><p>All developers will need to check to make sure they don't have the bad rebase lurking in their repositories. If you haven't done a \"git pull\" or fetch since December 20th, you're probably okay, but check anyway.\n\n</p><p>To check, on any local branch you have that is based on V7_4-branch, do the following, repleacing V7_4-branch with your local branch name.\n\n</p><p></p><ol>\n<li>Check if you have the bad rebase on the branch:\n<div class=\"code\">\n<pre class=\"code\">git rev-list V7_4-branch | grep c36ba64711f227570c5d5d06924a558bed85e2af\n</pre></div>\n\n</li><li>Check the output and return code (\"echo $?\") of the previous command:\n<ul>\n<li>If there is <strong>no output</strong> and a <strong>non-zero return code</strong>, all is well.  This branch is safe.  Go back to the start and repeat for other branches based on V7_4-branch.  If you're out of branches, you're done!\n</li><li>If the <strong>return code is 0</strong> and the <strong>output is \"c36ba64711f227570c5d5d06924a558bed85e2af\"</strong>, then you have the bad rebase.  If this is the case, you <strong>must</strong> destroy and recreate the branch, otherwise you could reinfect the central repository.  Continue:\n</li></ul>\n</li><li>You'll need to delete your infected V7_4-branch and recreate it.  Do you have committed changes to V7_4-branch that you haven't pushed?\n<ul>\n<li><strong>No un-pushed changes:</strong> Just run the following to delete and recreate the local branch:\n<div class=\"code\">\n<pre class=\"code\">git checkout master\ngit branch -D V7_4-branch\ngit branch V7_4-branch origin/V7_4-branch\n</pre></div>\n\n</li><li><strong>Un-pushed changes:</strong> You will want to store your good changes away and reapply them. Be careful to not accidentally drag in the bad merge!  You can <em>not</em> use git stash for this, as git stash will just stash away the bad merge.  You can do this by hand, or you can use \"git format-patch\" and \"git am\" to store them away and re-apply them.   Use \"gitk\" or similar to find the ranges of SHAs that contain your changes.  Be sure to <em>not</em> include c36ba64711f227570c5d5d06924a558bed85e2af in the range!  If you have multiple ranges, simply call \"git format-patch\" repeatedly, appending to the same file.  Once you have your ranges, use the following, or something similar:\n<div class=\"code\">\n<pre class=\"code\">git format-patch --stdout EARLIEST_GOOD_SHA1..CURRENT_GOOD_SHA1 &gt; v7.4-rescue\ngit checkout master\ngit branch -D V7_4-branch\ngit branch V7_4-branch origin/V7_4-branch\ngit checkout V7_4-branch\ngit am v7.4-rescue\n</pre></div>\n\n</li></ul>\n</li></ol>\n\n<p><span class=\"section\"></span></p><h2>How it was fixed</h2>\n\n<p></p><div class=\"code\">\n<pre class=\"code\"># Save good work on V7_4-branch.\ngit format-patch --stdout 584e2bb18f4e038066e44b53cddd9945e0b9dbbb..V7_4-branch &gt; ~/v7.4-rescue\n\n# Back V7_4-branch to the commit immediately before the bad rebase happened.\ngit reset --hard c49eb913f7c8aee2b9fb97bd63655806ae759c80\n\n# Reapply the good work\ngit am v7.4-rescue\n\n# Patches 1, 6, and 7 did not apply cleanly so I had to edit the files\n# manually, add them to the index, and run git am --resolved\n\n# Delete upstream version\ngit push origin :V7_4-branch\n# Push corrected version\ngit push origin +V7_4-branch\n\n# Merge to the master\n# Since all of the V7_4 work was already merged to the master\n# and since there were some conflicts in how the patches were\n# reapplied to V7_4, I used the 'ours' merge strategy\n# so the master is untouched by the merge\ngit checkout master\ngit merge -s ours V7_4-branch\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "todo", "last_change": "2010-Jan-06 13:56", "status": "resolved", "created": "2010-Jan-06 12:15", "fixed_version": "2010-Jan-06 12:15", "broken_version": "v070402", "priority": "1", "subsystem": "Unknown", "assigned_to": "danb", "derived_from": "#1084", "creator": "danb", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}