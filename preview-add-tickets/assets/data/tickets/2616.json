{"id": 2616, "title": "Ticket #2616: Create a command-line tool to communicate with DAGMan", "description": "<blockquote>\nRight now the user can basically communicate with a running DAGMan only via the condor_rm and condor_hold commands, and we (Pete and I) think that this is too coarse-grained.  (A couple of examples -- on condor_rm, should a final node be run or not, and should a rescue DAG be created, or should things just be killed off as quickly as possible; and, on a condor_hold, should the DAGMan job actually be killed, or should it be told to just stop submitting node jobs.)\n\n<p>There are plenty of other possibilities, too, such as querying the state of the DAG.\n\n</p><p>We're thinking that this should be a new command-line tool, like condor_dag_tool or something.  Since DAGMan is daemoncore, it has a command socket; it could put the address for that into its classad, and then the DAG tool could get the address from the schedd, and talk to DAGMan directly after that.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Nov-07 16:45:23 by wenger:</em> <br/>\n\nThis tool should also be able to change configuration settings for DAGMan (e.g., maxjobs).  It might also eventually become a way of dynamically changing the actual DAG, although we also had other proposals for how to deal with that.\n\n<p></p><hr/>\n<em>2011-Nov-07 19:37:39 by nwp:</em> <br/>\n\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2438\" onclick=\"get_ticket_and_populate_wrapper('2438'); return false;\" title=\"Modifying DAGman parameters at runtime\">#2438</a></span> is duplicate of this ticket.  I will delete that and point to this.\n\n<p></p><hr/>\n<em>2012-Apr-06 10:52:46 by pfc:</em> <br/>\n\nJust to import another use-case from <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=2663\" onclick=\"get_ticket_and_populate_wrapper('2663'); return false;\" title=\"Create better interface to control a running DAG\">#2663</a></span>, which was closed as a dup with this ticket, this tool should replace/support controlling the &lt;dagname&gt;.halt files to gracefully halt a running DAG.\n\n<p></p><hr/>\n<em>2012-May-02 15:01:14 by nwp:</em> <br/>\n\nThis is something I would like to do for 7.9.  Instead of deriving from <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=2213\" onclick=\"get_ticket_and_populate_wrapper('2213'); return false;\" title=\"Condor_hold + condor_rm of DAG doesn't create rescue DAG\">#2213</a></span>, I will repoint to <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2810\" onclick=\"get_ticket_and_populate_wrapper('2810'); return false;\" title=\"DAGman enhancement plans for Condor version 7.9\">#2810</a></span>\n\n<p></p><hr/>\n<em>2014-Aug-11 13:23:59 by wenger:</em> <br/>\n\nWhat are some things such a tool should be able to do?:\n<ul>\n<li>Halt/un-halt DAG.\n</li><li>Add nodes.\n</li><li>\"Manually\" re-try specified nodes.\n</li><li>Possibly various flavors of removing the DAG (such as having DAGMan stay in the queue until all child jobs have exited the queue).\n</li><li>Maybe change node priorities on the fly.\n</li><li>Peacefully pause the DAG (see <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=3756\" onclick=\"get_ticket_and_populate_wrapper('3756'); return false;\" title=\"provide command to peacefully pause a DAG\">#3756</a></span>).\n</li><li>Dump a rescue DAG but continue to run.\n</li><li>Get and report stats on the state of the DAG.\n</li><li>Probably a bunch of other things...\n</li></ul>\n\n<p>(I wonder if this would be something that it would make sense for Zach to work on, because he knows daemoncore better than I do.)\n\n</p><p></p><hr/>\n<em>2014-Aug-11 13:25:05 by wenger:</em> <br/>\n\nWhat should such a tool be named?  condor_dag_cmd?\n\n<p></p><hr/>\n<em>2014-Aug-11 15:10:35 by wenger:</em> <br/>\n\nMore stuff for this tool to do:\n<ul>\n<li>Change DAGMan settings, such as maxjobs, maxidle, DAGMAN_USER_LOG_SCAN_INTERVAL, DAGMAN_MAX_SUBMITS_PER_INTERVAL, etc.\n</li></ul>\n\n<p></p><hr/>\n<em>2014-Aug-11 15:14:26 by wenger:</em> <br/>\n\nThe command-line format maybe could be something like this:\n\n<p></p><pre>  condor_dag_cmd [-name scheddname] &lt;cluster id&gt; &lt;command&gt; &lt;command&gt; ...\n</pre>\n\n<p>Maybe have the option to specify\n\n</p><p></p><pre>  -addr &lt;a.b.c.d:port&gt;\n</pre>\n\n<p>instead of \"[-name scheddname] &lt;cluster id&gt;\" to be able to bypass the schedd.\n\n</p><p></p><hr/>\n<em>2014-Aug-12 09:27:01 by wenger:</em> <br/>\n\nThere are a number of tickets that could benefit from this functionality:\n<ul>\n<li><span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=2831\" onclick=\"get_ticket_and_populate_wrapper('2831'); return false;\" title='Be able to \"manually\" retry nodes during a DAG run'>#2831</a></span>: Be able to \"manually\" retry nodes during a DAG run\n</li><li><span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=3756\" onclick=\"get_ticket_and_populate_wrapper('3756'); return false;\" title=\"provide command to peacefully pause a DAG\">#3756</a></span>: provide command to peacefully pause a DAG\n</li><li><span class=\"ticket\"><a class=\"stalled\" href=\"/tickets?ticket=1756\" onclick=\"get_ticket_and_populate_wrapper('1756'); return false;\" title=\"Be able to dynamically add nodes to a running DAG\">#1756</a></span>: Be able to dynamically add nodes to a running DAG\n</li><li><span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=1311\" onclick=\"get_ticket_and_populate_wrapper('1311'); return false;\" title=\"Be able to configure DAGMan's actions when condor_rm'ed\">#1311</a></span>: Be able to configure DAGMan's actions when condor_rm'ed\n</li><li><span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4356\" onclick=\"get_ticket_and_populate_wrapper('4356'); return false;\" title=\"Have some way to do a reconfig on a running DAGMan\">#4356</a></span>: Have some way to do a reconfig on a running DAGMan\n</li></ul>\n\n<p></p><hr/>\n<em>2015-Jun-04 12:47:45 by wenger:</em> <br/>\n\nHmm -- I just thought of a simpler way to do this that would be easier and quicker to implement:  each time through the submission loop, DAGMan looks for a specific file (foo.dag.cmd or something), and, if the file exists, DAGMan executes whatever commands are in the file, and then removes the file.\n\n<p>One other thing I was thinking about is this:  if we allow commands (whether via the file or other means) that do things like adding nodes, we need to have some way of recording them for rescue and recovery modes -- otherwise, the new nodes won't get created in those modes.\n\n</p><p>One possibility I thought of is this:  we create a rescue DAG file when DAGMan first starts up, and we record the \"dynamic\" commands in that file as we go.  Then, if we finish successfully, we remove the rescue DAG file.  I think that might work for both rescue and recovery modes, although I need to do a little more thinking to make sure that it would work for recovery mode.  Also note that we might not need to record all commands -- for example, if a command is to do a reconfig, any changes to the config file(s) would take effect automatically in recovery or rescue mode anyhow.\n\n</p><p></p><hr/>\n<em>2016-Oct-30 18:25:07 by wenger:</em> <br/>\n\nOkay, probably the most obvious use for this would be changing parameters like maxjobs on the fly...</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=2831\" onclick=\"get_ticket_and_populate_wrapper('2831'); return false;\" title='Be able to \"manually\" retry nodes during a DAG run'>#2831</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nBe able to \"manually\" retry nodes during a DAG run</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2016-Oct-30 18:25", "status": "defer", "created": "2011-Nov-04 12:39", "fixed_version": "2011-Nov-04 12:39", "broken_version": "v070702", "priority": "5", "subsystem": "Dag", "assigned_to": "", "derived_from": "#2810", "creator": "wenger", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "wenger@cs.wisc.edu,bbockelm@cse.unl.edu, anderson@ligo.caltech.edu,pcouvare@caltech.edu", "due_date": ""}