{"id": 3792, "title": "Ticket #3792: Claim handling for consumption policies causes crash in startd", "description": "<blockquote>\nConsumption policies (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span>) introduced a memory problem relating to claim data structures maintenance.\n\n<p></p><div class=\"verbatim\">\n<pre>The crash appears to be caused by late references to deleted Claim objects via the r_claims member. this is a typical stack trace for the crash, it doesn't always crash here however.\n\n/usr/lib64/condor/libcondor_utils_8_1_0.so(dprintf_dump_stack+0x12d)[0x7f71b93a401d]\n/usr/lib64/condor/libcondor_utils_8_1_0.so(+0x130992)[0x7f71b93b0992]\n/lib64/libpthread.so.0[0x31d440f500]\n/lib64/libc.so.6[0x31d413259f]\ncondor_startd(Resource::publish_private(compat_classad::ClassAd*)+0xdb)[0x4480fb]\ncondor_startd(Resource::publish_for_update(compat_classad::ClassAd*, compat_classad::ClassAd*)+0x44)[0x44b744]\ncondor_startd(Resource::do_update()+0x3f)[0x44ba9f]\n/usr/lib64/condor/libcondor_utils_8_1_0.so(TimerManager::Timeout(int*, double*)+0x1a1)[0x7f71b94c2071]\n/usr/lib64/condor/libcondor_utils_8_1_0.so(DaemonCore::Driver()+0x751)[0x7f71b94d7e41]\n/usr/lib64/condor/libcondor_utils_8_1_0.so(dc_main(int, char**)+0x1234)[0x7f71b94c5ed4]\n/lib64/libc.so.6(__libc_start_main+0xfd)[0x31d401ecdd]\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2013-Jul-18 19:36:39 by eje:</em> <br/>\n\nI ran a startd with a \"legacy\" p-slot (one with no consumption policy configured) for about a half hour, under various patterns of job submission, and could not get the startd to crash.\n\n<p>I also ran a few jobs through while running under valgrind, and no memory errors were reported.\n\n</p><p>I may need a more detailed repro configuration.  Logs from the crashing startds might also be useful.\n\n</p><p></p><hr/>\n<em>2013-Jul-19 09:26:27 by gthain:</em> <br/>\n\nTry running the startd out of resources, so that it gets into the \"owner\" state.\n\n<p></p><hr/>\n<em>2013-Jul-19 14:47:06 by eje:</em> <br/>\n\nI've definitely run many cycles of depleting all cpus on the startd.\n\n<p>After consulting with Greg, I've also tested:\n</p><ul>\n<li>configuring 8 cpus\n</li><li>running long jobs (1 hr)\n</li><li>reconfiguring the startd while its cpus were depleted\n</li></ul>\n\n<p>So far, I've failed to repro a startd crash or obtain any memory errors reported from valgrind.\n\n</p><p>Since upstream currently has experienced the only known repro, I'm requesting that you attempt a repro, and send condor log files, core dumps, and valgrind report.  (maybe also complete config file set, just for good measure)\n\n</p><p>I've been running the startd under valgrind this way:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">VGSTARTD = /usr/bin/valgrind\nVGSTARTD_ARGS = --log-file=/tmp/vglog_startd_%p -v --track-origins=yes $(SBIN)/condor_startd -f\nDAEMON_LIST = MASTER, COLLECTOR, NEGOTIATOR, SCHEDD, VGSTARTD\n</pre></div>\n\n\n<p></p><hr/>\n<em>2013-Jul-26 20:07:07 by eje:</em> <br/>\n\nREPRO/TEST\n\n<p>To reproduce, you need to send a partitionable slot into Owner mode.   Either a p-slot with or without a consumption policy will show the behavior.  The following config will induce an Owner state when the p-slot runs out of cpus.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">NUM_CPUS = 2\n\n# define a partitionable slot\nSLOT_TYPE_1 = 100%\nSLOT_TYPE_1_PARTITIONABLE = True\nNUM_SLOTS_TYPE_1 = 1\n\n# Crash occurs when slot goes into Owner state.\n# Induce p-slot to go into Owner state when it runs out of Cpus.\nSTART = Cpus &gt; 0\n\n# the startd should crash (or not, after fix) regardless of whether\n# a consumption policy is enabled:\n\n#CONSUMPTION_POLICY = True\n#CONSUMPTION_CPUS = 1\n#CONSUMPTION_MEMORY = 10\n#CONSUMPTION_DISK = 10\n#SLOT_WEIGHT = Cpus\n#NEGOTIATOR_USE_SLOT_WEIGHTS = True\n\n# verbose logging\nALL_DEBUG = D_FULLDEBUG\n</pre></div>\n\n\n<p>To reproduce, submit a block of jobs (&gt;= number of cpus, in this case, 2).  Before fix, it will enter Owner state, and shortly afterward the startd will crash by attempting to access a deallocated claim.  After the fix, the crash will not occur.\n\n</p><p></p><hr/>\n<em>2013-Jul-27 17:06:51 by eje:</em> <br/>\n\nnew topic branch including fix for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3792\" title=\"Claim handling for consumption policies causes crash in startd\">#3792</a></span> is:\nV8_1-gt3792-startd-crashes-fix\n\n<p>Also includes a tweak to accountant logic that enables consumption policies to work smoothly with both accounting groups and concurrency limits, and a new regression test for concurrency limits and accounting groups functionality with consumption policies.\n\n</p><p></p><hr/>\n<em>2013-Jul-29 18:22:08 by eje:</em> <br/>\n\nNotes on valgrind testing.\n\n<p>I used the following config to invoke the startd under valgrind memory testing:\n</p><div class=\"code\">\n<pre class=\"code\">VGSTARTD = /usr/bin/valgrind\nVGSTARTD_ARGS = --log-file=/tmp/vglog_startd_%p -v --track-origins=yes $(SBIN)/condor_startd -f\nDAEMON_LIST = MASTER, COLLECTOR, NEGOTIATOR, SCHEDD, VGSTARTD\n</pre></div>\n\n\n<p>I submitted jobs to run a p-slot out of resources and put it into the Owner state.  I let the p-slot cycle in and out of Owner state repeatedly for about 30 minutes, while watching <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StartLog\" title=\"Start Log\">StartLog</a></span> output.\n\n</p><p>The valgrind output should show zero errors (with the original bug it reported several hundred memory access errors prior to crashing):\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">==12585== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)\n--12585--\n--12585-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a\n</pre></div>\n\n\n<p>The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StartLog\" title=\"Start Log\">StartLog</a></span> output should also show continuous operation with no crash/restart sequences.\n\n</p><p></p><hr/>\n<em>2013-Aug-09 12:37:40 by johnkn:</em> <br/>\n\nREVIEW:\nUse after free is avoided in this patch by having r_cur be a Claim object and not a pointer into the r_claims list, (which now isn't used at all unless consumption policy is enabled).  Other than the gratuitious changes to slot_builder.cpp, the new code in the startd is (almost) entirely disabled when consumption policy is not configured.\n\n<p>There is some new code for param'ing SLOT_WEIGHTS which will abort the STARTD if the slot weight expression does not parse. It's not clear to me whether this code is a useful but unrelated change, if it's purely for consumption policy use then it should be disabled unless consumption policy is enabled.\n\n</p><p></p><hr/>\n<em>2013-Oct-11 17:06:34 by tannenba:</em> <br/>\n\nNOTE : this bug was never actually released, so no need for a version history entry.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-10 17:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37815\">[37815]</a></span>: Add support for Consumption Policies, aka negotiator slot splits. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span> Squashed commit of the following:\u00a0[...]\n (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-27 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37026\">[37026]</a></span>: Support consumption policies and multiple matches against partitionable slots ===GT:Fixed=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3792\" title=\"Claim handling for consumption policies causes crash in startd\">#3792</a></span>  (By Erik Erlandson )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2013-Oct-11 17:06", "status": "resolved", "created": "2013-Jul-18 16:15", "fixed_version": "2013-Jul-18 16:15", "broken_version": "", "priority": "2", "subsystem": "DaemonsExecNode", "assigned_to": "tannenba", "derived_from": "#3435", "creator": "eje", "rust": "", "customer_group": "other", "visibility": "public", "notify": "eje@cs.wisc.edu, matt@cs.wisc.edu, tstclair@redhat.com, gthain@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}