{"id": 185, "title": "Ticket #185: Schedd bloat", "description": "<blockquote>\nA support rust request came in to look at why their schedd was allocating memory until it could no longer do so.  They are using the SOAP interface, so I patched a version of 7.0.5 and sent them that for testing.  This change did not solve the problem.\n\n<p>I thought about having them use 7.2.1, but it seem the problem still persists there too. It turns out that this problem is not limited to jobs submitted via the SOAP interface, a large number of jobs submitted via condor_submit will result in the same behavior.  This has only been tested and confirmed on Windows, but may not be platform specific.\n\n</p><p>The problem can be reproduced by submitting &gt;1000 or so jobs back to back.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Feb-04 18:21:30 by burnett:</em> <br/>\n\nI've attached the scripts and submit file that can be used to reproduce the problem.  The batch file condor_bloat.bat takes two parameters, first the submit file to use and second, the number of times it should be submitted.\n\n<p></p><hr/>\n<em>2009-Feb-04 22:43:17 by matt:</em> <br/>\n\nIs this only on Windows? I've submitted &gt;&gt;1000 clusters before to linux systems and not had excessive memory use.\n\n<p></p><hr/>\n<em>2009-Feb-05 15:52:27 by tannenba:</em> <br/>\n\nAt this point, it looks like it may be specific to Windows.\n\n<p>To clarify, what Ben told me was the schedd's memory working set size, as reported by the task manager, gets very large as the jobs run (to be expected), but then after the jobs are all done and the queue is empty, the working set size is still huge!!  Strange.  I would expect the image size to grow and not shrink after the jobs are done, but one would expect the working set size to shrink back to normal...\n\n</p><p></p><hr/>\n<em>2009-Feb-06 01:25:24 by burnett:</em> <br/>\n\nThe leak has been fixed.  The original fix for the SOAP memory leak was erroneous.\nThis patch I submitted remedies the flaw.\n\n<p>The original soap_copy()+free() pairing was correct; however,\nfurther housekeeping was necessary before a the soap structure\ncould be free()&amp;#8217;d.  The reason for this is that the soap structure\nitself, internal malloc()'d data only it knew about, necessitating\na call to soad_done()--which freed up several internal structures--before freeing the soap structure itself.\n\n</p><p></p><hr/>\n<em>2009-Feb-06 08:02:53 by matt:</em> <br/>\n\nHow does your new commit fix any memory leaks?\n\n<p>Your commit should be reverted...\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">commit 181359198572dc949ee228bbb20a8f7f27d2b9e5\nAuthor: Ben Burnett &lt;burnett@cs.wisc.edu&gt;\nDate:   Fri Feb 6 00:53:27 2009 -0600\n\n    The original fix for the SOAP memory leak was erroneous.\n    This patch remedies the flaw.\n\n    The original soap_copy()+free() pairing was correct; however,\n    further housekeeping was necessary before a the soap structure\n    could be free()&lt;92&gt;d.  The reason for this is that the soap structure\n    itself, was full of memory only it knew about, necessitating\n    a call to soad_done()--which freed up several internal structures--\n    before freeing the soap structure itself.\n\ndiff --git a/src/condor_daemon_core.V6/daemon_core.cpp b/src/condor_daemon_core.\nV6/daemon_core.cpp\nindex fbca911..63aa4b2 100644\n--- a/src/condor_daemon_core.V6/daemon_core.cpp\n+++ b/src/condor_daemon_core.V6/daemon_core.cpp\n@@ -3617,7 +3617,8 @@ int DaemonCore::HandleReq(Stream *insock)\n      soap_serve(cursoap);\n      soap_destroy(cursoap); // clean up class instances\n      soap_end(cursoap); // clean up everything and close socket\n-     soap_free(cursoap);\n+     soap_done(cursoap); // close master socket and detach environment\n+     free(cursoap); // free up\n      dprintf(D_ALWAYS, \"Completed servicing HTTP request\\n\");\n\n         // gsoap already closed the socket.  so set the socket in\n</pre></div>\n\n\n<p>Because soap_free from 2.7.10-p2 is...\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">SOAP_FMAC1\nvoid\nSOAP_FMAC2\nsoap_free(struct soap *soap)\n{ soap_done(soap);\n  free(soap);\n}\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Feb-08 11:15:55 by tannenba:</em> <br/>\n\nThe commit associated with this ticket that Ben made <span class=\"chng\"><a href=\"chngview?cn=13773\">[13773]</a></span> should be reverted, and the Win32 build simply updated to use the same gSOAP external as used on Unix (2.7.10.something).</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=198\" onclick=\"get_ticket_and_populate_wrapper('198'); return false;\" title=\"Update the versions of the externals that the Windows build uses.\">#198</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nUpdate the versions of the externals that the Windows build uses.</td></tr>\n</tbody></table>", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/20/condor_bloat.bat\">condor_bloat.bat</a>\n55 bytes added by burnett on 2009-Feb-05 00:19:13 UTC.\n</li><li><a href=\"attach_get/21/sleep.bat\">sleep.bat</a>\n186 bytes added by burnett on 2009-Feb-05 00:19:31 UTC.\n</li><li><a href=\"attach_get/22/sleep.sub\">sleep.sub</a>\n89 bytes added by burnett on 2009-Feb-05 00:19:46 UTC.\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Feb-06 00:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=13773\">[13773]</a></span>: The original fix for the SOAP memory leak was erroneous. This patch remedies the flaw. The original soap_copy()+free() pairing was correct; however, further housekeeping was necessary before a the soap structure could be free()\u2019d. The reason for this is that the soap structure itself, was full of memory\u00a0[...]\n (By Ben Burnett )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2009-Dec-26 20:23", "status": "resolved", "created": "2009-Feb-04 18:18", "fixed_version": "2009-Feb-04 18:18", "broken_version": "v070005", "priority": "1", "subsystem": "Win32", "assigned_to": "burnett", "derived_from": "", "creator": "burnett", "rust": "s7781", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu", "due_date": ""}