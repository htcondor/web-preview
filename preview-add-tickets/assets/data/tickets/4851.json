{"id": 4851, "title": "Ticket #4851: Docker detection hangs if wrong \"docker\" installed.", "description": "<blockquote>\nUbuntu (among others) has a package called \"docker\" with a binary at /usr/bin/docker, but this package is not the Docker from docker.io, and running 'docker info' result in no output ever being produced and the process never terminating.  This causes our detection code some grief.</blockquote>", "remarks": "<blockquote>\n<em>2015-Jan-27 11:45:20 by tlmiller:</em> <br/>\n\n<div class=\"code\">\n<pre class=\"code\">diff --git a/src/condor_starter.V6.1/docker-api.cpp b/src/condor_starter.V6.1/docker-api.cpp\nindex b191a7f..61f7d17 100644\n--- a/src/condor_starter.V6.1/docker-api.cpp\n+++ b/src/condor_starter.V6.1/docker-api.cpp\n@@ -140,7 +140,14 @@ int DockerAPI::rm( const std::string &amp; containerID, CondorError &amp; /* err */ ) {\n        return 0;\n }\n\n-int DockerAPI::detect( CondorError &amp; /* err */ ) {\n+int DockerAPI::detect( CondorError &amp; err ) {\n+       // FIXME: Remove ::version() as a public API and return it from here,\n+       // because there's no point in doing this twice.\n+       std::string version;\n+       if( DockerAPI::version( version, err ) != 0 ) {\n+               dprintf( D_ALWAYS | D_FAILURE, \"DockerAPI::detect() failed to detect the Docker version; assuming absent.\\n\" );\n+               return -4;\n+       }\n+       }\n\n        ArgList infoArgs;\n        if ( ! add_docker_arg(infoArgs))\n@@ -210,6 +217,16 @@ int DockerAPI::version( std::string &amp; version, CondorError &amp; /* err */ ) {\n                return -3;\n        }\n\n+       if( NULL != fgets( buffer, 1024, dockerResults ) ) {\n+               if( strstr( buffer, \"Jansens\" ) != NULL ) {\n+                       dprintf( D_ALWAYS | D_FAILURE, \"The DOCKER configuration setting appears to point to OpenBox's docker.  If you want to use Docker.IO, please set DOCKER appropriately in your configuration.\\n\" );\n+               } else {\n+                       dprintf( D_ALWAYS | D_FAILURE, \"Read more than one line (or a very long line) from '%s', which we think means it's not Docker.  The (first line of the) trailing text was '%s'.\\n\", displayString.c_str(), buffer );\n+               }\n+               my_pclose( dockerResults );\n+               return -5;\n+       }\n+\n        int exitCode = my_pclose( dockerResults );\n        if( exitCode != 0 ) {\n                dprintf( D_ALWAYS, \"'%s' did not exit successfully (code %d); the first line of output was '%s'.\\n\", displayString.c_str(), exitCode, buffer );\n</pre></div>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Jan-27 11:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=42431\">[42431]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4851\" onclick=\"get_ticket_and_populate_wrapper('4851'); return false;\" title='Docker detection hangs if wrong \"docker\" installed.'>#4851</a></span>) Check 'docker -v' before running 'docker info' to see which program we're calling.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2015-Jan-28 11:50", "status": "resolved", "created": "2015-Jan-27 11:42", "fixed_version": "2015-Jan-27 11:42", "broken_version": "v080303", "priority": "1", "subsystem": "DaemonsExecNode", "assigned_to": "johnkn", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}