{"id": 3175, "title": "Ticket #3175: ClassAd caching leaks memory in Condor", "description": "<blockquote>\nBoth CHTC and University of Nebraska have noticed massive memory leaks in Condor 7.9.0 daemons. After three weeks, the schedd on submit-1.chtc.wisc.edu was using 40GB of memory. In a personal Condor, the schedd leaks 1.2MB of memory after running 300 jobs. Disabling <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> caching via ENABLE_CLASSAD_CACHING causes the leaks to vanish.\n\n<p>Valgrind shows that all of the leaked memory is allocated inside classad::CachedExprEnvelope. In most cases, the stack straces passes through MergeClassAds() and compat_classad::ClassAd::ChainCollapse(). I'll attach a full valgrind report.</p></blockquote>", "remarks": "<blockquote>\n<em>2012-Aug-06 13:36:49 by tstclair:</em> <br/>\n\nSo they stem from the code path where they -&gt;Copy() prior to insert, but don't call the skip cache path because it's ref count is already updated.\n\n<p>Also when looking up the references it seems like the interface is pretty leaky b/c imho we are doing far too much manipulation of the innerds of classads external to the actual interface.  The most common examples that I see are searching through the adds looking for specific attribute names then copying then to some target ad.  It makes far more sense to hide that under the interface.\n\n</p><p></p><hr/>\n<em>2012-Aug-07 15:24:09 by jfrey:</em> <br/>\n\nIsn't the problem in CachedExprEnvelope::cache(), in the EXPR_ENVELOPE case of the switch statement? That should be a direct assignment of pTree to pRet, rather than invoking Copy(). When ClassAd::Insert() is called, the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> assumes responsibility for deleting the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> pointer passed in. The caller shouldn't have to disable caching for the call.\n\n<p></p><hr/>\n<em>2012-Aug-07 15:53:50 by jfrey:</em> <br/>\n\nI just did a check with valgrind. Changing the <code>pTree-&gt;Copy()</code> to just <code>pTree</code> in CachedExprEnvelope::cache() fixes the memory leaks. That's without the changes you recently pushed.\n\n<p></p><hr/>\n<em>2012-Aug-07 16:13:50 by tstclair:</em> <br/>\n\niirc that was in place to prevent a different issue which was arising.\n\n<p></p><hr/>\n<em>2012-Aug-07 16:15:19 by tstclair:</em> <br/>\n\nit's entirely possible that the issue is non-existent now.  That mod would need to run through NMI, and I would need to revert the others.</blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/615/condor_schedd-vg.3515\">condor_schedd-vg.3515</a>\n33984 bytes added by jfrey on 2012-Aug-02 19:25:11 UTC.\n<br/>\nValgrind report of condor_schedd with <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> enabled after running 300 jobs. Code built from end of V7_9_0-branch (7c9633eb). I had to remove many reports of small leaks to make the attachment small enough to upload.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Aug-07 16:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32995\">[32995]</a></span>: Fix memory leak in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> caching code. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3175\" onclick=\"get_ticket_and_populate_wrapper('3175'); return false;\" title=\"ClassAd caching leaks memory in Condor\">#3175</a></span> When an <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CachedExprEnvelope\" title=\"Cached Expr Envelope\">CachedExprEnvelope</a></span> is passed to ClassAd::Insert(), don't copy it. It becomes part of the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span>, and the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> assumes responsibility for deleting it.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Aug-07 11:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32975\">[32975]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3175\" onclick=\"get_ticket_and_populate_wrapper('3175'); return false;\" title=\"ClassAd caching leaks memory in Condor\">#3175</a></span> cleanup memory leak around <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTrees\" title=\"Expr Trees\">ExprTrees</a></span> which are already copied outside the interface. When analyzing the code, I firmly believe that we are doing far to much classad manipulation and duplcation of functionality external to the interface and much of what is being done should be pushed into\u00a0[...]\n (By Timothy St. Clair )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2013-Jan-14 14:09", "status": "resolved", "created": "2012-Aug-02 14:18", "fixed_version": "2012-Aug-02 14:18", "broken_version": "v070900", "priority": "1", "subsystem": "Libs", "assigned_to": "jfrey", "derived_from": "#2541", "creator": "jfrey", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "tstclair@redhat.com, jfrey@cs.wisc.edu", "due_date": ""}