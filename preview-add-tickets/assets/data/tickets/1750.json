{"id": 1750, "title": "Ticket #1750: disconnect during file transfer causes starter to abort", "description": "<blockquote>\nThe changes in commit b3ef6289 <span class=\"chng\"><a href=\"chngview?cn=18897\">[18897]</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1587\" title=\"Problems with semantics of failed file transfer\">#1587</a></span> to improve handling of file transfer failures have somewhat broken disconnected shadow/starter handling.\n\n<p>The changes were intended to improve handling of the case where file transfer fails and wants to put the job on hold. However, there are other types of failures (such as network disconnect) where file transfer can fail without trying to put the job on hold. These cases used to be handled by the shadow/starter disconnect behavior. Now, the starter just blows up in an assert:\n\n</p><p></p><div class=\"verbatim\">\n<pre>11/01 14:58:57 Sandbox transfer failed.\n11/01 14:58:57 ERROR \"Assertion ERROR on (m_ft_info.hold_code != 0)\" at line 435 in file jic_shadow.cpp\n</pre></div>\n\n\n<p>I see the following responsible code:\n\n</p><p></p><div class=\"verbatim\">\n<pre>if(!m_ft_info.success) {\n   ASSERT(m_ft_info.hold_code != 0);\n}\n</pre></div>\n\n\n<p>One way to test this code path is to SIGSTOP the shadow while the job is running. Then when the job finishes and the starter is blocked waiting for a response to its file transfer request, do condor_off -schedd. The desired behavior is that the starter sees the connection to the shadow go bad and enters disconnected mode. Turning the schedd back on should cause a new shadow to connect to the starter and successfully finish the file transfer. I have verified that this worked in 7.4.2.</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Nov-02 11:34:45 by psilord:</em> <br/>\n\nI reviewed it. I think some changes could happen to the return value of transferOutput() to make things a bit more precise with what kind of failures could have happened, but the change as it stands is good enough and passes review.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Nov-02 10:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25770\">[25770]</a></span>: Documented fix for disconnect during file transfer. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1750\" title=\"disconnect during file transfer causes starter to abort\">#1750</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Nov-01 17:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19289\">[19289]</a></span>: Restored handling of disconnect during file transfer. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1750\" title=\"disconnect during file transfer causes starter to abort\">#1750</a></span> The problem introduced in b3ef6289 (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1587\" title=\"Problems with semantics of failed file transfer\">#1587</a></span>) is that the starter would abort if the file transfer failed with a transient failure, such as a disconnect.  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Nov-02 11:35", "status": "resolved", "created": "2010-Nov-01 17:49", "fixed_version": "2010-Nov-01 17:49", "broken_version": "v070404", "priority": "4", "subsystem": "", "assigned_to": "danb", "derived_from": "#1587", "creator": "danb", "rust": "", "customer_group": "other", "visibility": "public", "notify": "psilord@cs.wisc.edu", "due_date": ""}