{"id": 916, "title": "Ticket #916: Elimination of Symbol poisoning in favor of static analysis", "description": "<blockquote>\nThe elimination of symbol poisoning in the code in favour of static analysis will allow for the following:\n\n<p></p><ul>\n<li>Elimination of header include order issues\n</li><li>Allow for direct inclusion of standard libs (this is important as we open the code base)\n</li><li>Eliminates patches on external libraries who include standard libs\n</li><li>General ease of use concerns, and code maintenance</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2009-Nov-06 13:39:00 by psilord:</em> <br/>\n\nCould I get a list of exemptions where it is ok to call open/open64 in a .o file?\n\n<p></p><hr/>\n<em>2009-Nov-06 14:03:56 by matt:</em> <br/>\n\nInvestigating...\n\n<p></p><div class=\"verbatim\">\n<pre>$ git grep _CONDOR | grep ALLOW | grep OPEN | sed 's/\\([^:]*\\).*/\\1/' | sort -u                                       classad_analysis/result.cpp\ncondor_c++_util/classad_oldnew.cpp\ncondor_c++_util/condor_open.cpp\ncondor_c++_util/memory_file.cpp\ncondor_c++_util/newclassad_stream.cpp\ncondor_c++_util/write_user_log.cpp\ncondor_daemon_client/dc_lease_manager.cpp\ncondor_daemon_client/dc_lease_manager_lease.cpp\ncondor_includes/condor_fix_fstream.h\ncondor_includes/condor_fix_iomanip.h\ncondor_includes/condor_fix_iostream.h\ncondor_includes/condor_macros.h\ncondor_lease_manager/lease_manager.cpp\ncondor_lease_manager/lease_manager_main.cpp\ncondor_lease_manager/lease_manager_resources.cpp\ncondor_lease_manager/lease_manager_test2.cpp\ncondor_lease_manager/lease_manager_tester.cpp\ncondor_schedd.V6/ickpt_share.cpp\ncondor_startd.V6/glexec_wrapper.cpp\ncondor_syscall_lib/receivers.prologue\ncondor_tests/job_ckpt_io-async_std.c\ncondor_tests/job_rsc_hello_std.c\ncondor_tests/job_rsc_stat_std.c\ncondor_tests/job_rsc_true-false_std.c\ncondor_util_lib/stub_gen_yacc.y\nstork/dap_daemon.cpp\nstork/dap_server.cpp\nstork/stork-lm.cpp\nstork/stork-lm-test2.cpp\nstork/stork-lm-test.cpp\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Nov-06 14:26:25 by matt:</em> <br/>\n\nThese files just wrap standard includes so their symbols aren't poisoned. They could be removed entirely.\n\n<p></p><div class=\"verbatim\">\n<pre>condor_includes/condor_fix_fstream.h\ncondor_includes/condor_fix_iomanip.h\ncondor_includes/condor_fix_iostream.h\n</pre></div>\n\n\n<p>This file does the actual symbol poisoning. It special case avoids poisoning IN_CKPT_LIB and REMOTE_SYSCALLS. Anything compiled with IN_CKPT_LIB and REMOTE_SYSCALLS I guess are exempt.\n\n</p><p></p><div class=\"verbatim\">\n<pre>condor_includes/condor_macros.h\n</pre></div>\n\n\n<p>It isn't immediately clear why these files are skipped. Likely a deep include issue that still, or once, existed. Possibly because they include new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, which historically had an issue. They shouldn't be excluded.\n\n</p><p></p><div class=\"verbatim\">\n<pre>stork/dap_daemon.cpp\nstork/dap_server.cpp\nstork/stork-lm.cpp\nstork/stork-lm-test2.cpp\nstork/stork-lm-test.cpp\ncondor_daemon_client/dc_lease_manager.cpp\ncondor_daemon_client/dc_lease_manager_lease.cpp\ncondor_lease_manager/lease_manager.cpp\ncondor_lease_manager/lease_manager_main.cpp\ncondor_lease_manager/lease_manager_resources.cpp\ncondor_lease_manager/lease_manager_test2.cpp\ncondor_daemon_client/dc_lease_manager.cpp\ncondor_daemon_client/dc_lease_manager_lease.cpp\n</pre></div>\n\n\n<p>This file allows OPEN and goes ahead and uses fopen. I'm guessing it doesn't get compiled.\n\n</p><p></p><div class=\"verbatim\">\n<pre>condor_lease_manager/lease_manager_tester.cpp\n</pre></div>\n\n\n<p>This file uses standard headers, should not be exempt.\n\n</p><p></p><div class=\"verbatim\">\n<pre>classad_analysis/result.cpp\n</pre></div>\n\n\n<p>This file include stream, should not be exempt.\n\n</p><p></p><div class=\"verbatim\">\n<pre>condor_c++_util/classad_oldnew.cpp\n</pre></div>\n\n\n<p>This file is the source of safe_f/open_wrapper, exempt!\n\n</p><p></p><div class=\"verbatim\">\n<pre>condor_c++_util/condor_open.cpp\n{verbatim}\n\nThis file is supposedly exempt because of its use in the test suite. It used open.\n\n{verbatim}\ncondor_c++_util/memory_file.cpp\n{verbatim}\n\nNew ClassAd use, not exempt.\n\n{verbatim}\ncondor_c++_util/newclassad_stream.cpp\n{verbatim}\n\nThis file should be reviewed for exemption status. It mixes open and the safe wrappers.\n\n{verbatim}\ncondor_c++_util/write_user_log.cpp\n</pre></div>\n\n\n<p>Include sstream, not exempt.\n\n</p><p></p><div class=\"verbatim\">\n<pre>condor_schedd.V6/ickpt_share.cpp\n</pre></div>\n\n\n<p>Needs exemption and review.\n\n</p><p></p><div class=\"verbatim\">\n<pre>condor_startd.V6/glexec_wrapper.cpp\n</pre></div>\n\n\n<p>Use open, needs exception.\n\n</p><p></p><div class=\"verbatim\">\n<pre>condor_tests/job_ckpt_io-async_std.c\ncondor_tests/job_rsc_hello_std.c\ncondor_tests/job_rsc_stat_std.c\ncondor_tests/job_rsc_true-false_std.c\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Nov-06 16:29:52 by psilord:</em> <br/>\n\nOk, I'm interested enough to create the link hook, which I've done, and add in\nthe exemptions, which I'm about to do. I don't know if I'm interested enough in removing the preprocessor crap.\n\n<p>This work will go into the V7_4-branch.\n\n</p><p></p><hr/>\n<em>2009-Nov-06 18:40:59 by psilord:</em> <br/>\n\nI'm not sure what to do with this one:\n\n<p></p><div class=\"verbatim\">\n<pre>[ERROR] Found poisoned symbol 'open64' in gt2_gahp/my_ez.o reference at /scratch/psilord/git-build/V7_4-branch/src/gt2_gahp/my_ez.c:589!\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Nov-06 18:59:23 by psilord:</em> <br/>\n\nAlso, whoever implemented condor_includes/condor_fix_fstream.h and friends has a serious misunderstanding of \"saving\" preprocessor symbols. That is a myth that you can do that. Simply gcc -E this piece of code and see for yourself:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">#define open orig_value\n#define XXX open\n#undef open\nopen\n#define open XXX\nopen\n</pre></div>\n\n\n<p>You will not get what you expect.\n\n</p><p></p><hr/>\n<em>2009-Nov-09 16:35:14 by psilord:</em> <br/>\n\nI've finished the implementation, and it currently only checks the poison policy on linux builds of Condor. The exempt directory checking could be a little better done.... but it is good enough for now.\n\n<p>The main change is in Imake.rules, in the suffix rules for object file creation, I added a perl script which gets passed a lot of arguments. These arguments are useful for various kinds of code policy checks. Currently, it nm's the object file and checks the unreferenced symbols against a table of poisoned symbols, if any are found, the build stops with an error. Certain files, or entire directories can be made exempt from the policy.\n\n</p><p>I also added a .c.o suffux rule, since inexplicably we were missing one and relying on default behavior. Now we follow the road like the other suffixes and the link hook is easy to apply to it.\n\n</p><p></p><hr/>\n<em>2009-Nov-09 16:43:08 by psilord:</em> <br/>\n\nWhen this passes the nightlies and stuff I'll resolve the ticket.\n\n<p></p><hr/>\n<em>2009-Nov-11 10:19:40 by psilord:</em> <br/>\n\nAfter a couple of issues, it is in the nightlies and working.\n\n<p>The main issue was that because we used a suffix rule, we compile source files in all kinds of directories. Couple this with only being able to specify relative paths to the scripts directories and one ends up with a mess. So, for now, if the script isn't findable according to its relative path in the cwd where the suffix rule is executed, we ignore running the script and emit a warning to the output. This needs some revisiting later, for sure.\n\n</p><p>In general, on the machines where nm isn't found or specified, we permissively accept everything, on machines where nm is found or specified, we enforce the policy.\n\n</p><p></p><hr/>\n<em>2009-Nov-11 10:20:39 by psilord:</em> <br/>\n\nAt this point, a new ticket should be made which states we should rip out the current include magic and place the exemptions necessary into <code>post_compile_hook.pl</code>.\n\n<p>I'm resolving this ticket.</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=998\" title=\"Removal of *_fix_*.h's and subsequent deps.\">#998</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRemoval of *_fix_*.h's and subsequent deps.</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-16 11:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16347\">[16347]</a></span>: Added the ability to understand whitespace in the source file path. Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=916\" title=\"Elimination of Symbol poisoning in favor of static analysis\">#916</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-10 01:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16278\">[16278]</a></span>: Fixed some nightlies build breakage because I forgot to test the 'make testbin' target.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-09 21:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16276\">[16276]</a></span>: Fixed <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LinkHook\" title=\"Link Hook\">LinkHook</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=916\" title=\"Elimination of Symbol poisoning in favor of static analysis\">#916</a></span>: $(TOP) not reliable without new_workspace, which isn't used by automated builds.  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Nov-09 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16273\">[16273]</a></span>: After every single link to produce an object file, we now call a script hook. This allows us to implement and enforce coding policies like symbol poisoning. For example, the policy \"no code should call open(), open64(), or fopen(), unless the code resides in these directories are are these X specific\u00a0[...]\n (By Peter Keller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Jan-04 09:19", "status": "resolved", "created": "2009-Nov-06 08:42", "fixed_version": "2009-Nov-06 08:42", "broken_version": "v070400", "priority": "3", "subsystem": "Libs", "assigned_to": "psilord", "derived_from": "", "creator": "tstclair", "rust": "", "customer_group": "users", "visibility": "public", "notify": "matt@cs.wisc.edu, willb@redhat.com, tannenba@cs.wisc.edu, psilord@cs.wisc.edu, tstclair@redhat.com", "due_date": ""}