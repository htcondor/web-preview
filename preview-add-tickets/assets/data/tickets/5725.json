{"id": 5725, "title": "Ticket #5725: Think about DAGMan \"authorization\" nodes", "description": "<blockquote>\n(As per discussion in CHTC team meeting today.)\n\n<p>The assumption is that the \"regular\" node jobs (or at least some of them) in a DAG require a certificate that needs human intervention to be renewed (so the DAG would <strong>not</strong> try to renew the cert automatically).  It sounds like there was some earlier discussion of this (which I don't remember being involved in).\n\n</p><p>Anyhow, I guess this is kind of a special case of the \"provisioning node\" idea.  One question is, if the cert expires when jobs are in the queue, what should happen?  This would really depend on the characteristics of the jobs -- e.g., if you can't get your output back once your cert expires, we might as well just remove all of the jobs at that point.  Maybe one way this could be addressed is by allowing ABORT_DAG_ON for the authorization nodes -- if you specified ABORT_DAG_ON, the authorization node failing would abort the DAG; otherwise, I guess it would just mean that no new node jobs would be submitted.\n\n</p><p>(Also see <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=5622\" title='Allow \"provisioning\" nodes in a DAG?'>#5622</a></span>: Allow \"provisioning\" nodes in a DAG?)</p></blockquote>", "remarks": "<blockquote>\n<em>2016-Jun-14 15:45:26 by wenger:</em> <br/>\n\nTalked with Miron about this today.  There are really two parts:\n<ol>\n<li>The provisioning node stuff.\n</li><li>Having the authorization node write to its log file, and have DAGMan react to those events.\n</li></ol>\n\n<p>The idea for phase 1 is that we'll just have one authorization file for the whole DAG.  Before any of the other DAG nodes are submitted, the authorization node has to start, and has to write some kind of \"GO\" event to its log (probably with chirp).\n\n</p><p>Things to think about:\n</p><ol>\n<li>Making sure rescue DAGs work right.\n</li><li>Making sure recovery mode works right (if the schedd restarts, for example, pre-restart GO events don't \"count\")\n</li></ol>\n\n<p>For later phases, we may have other events that the authorization node can write, such as \"ABORT\" and \"HOLD\".\n\n</p><p></p><hr/>\n<em>2016-Jul-01 12:35:47 by wenger:</em> <br/>\n\nWorking on design document here: <a class=\"external\" href=\"https://docs.google.com/document/d/1ZdDbsBZVL6Bbb9ks4y9ZEMFLfKA6qe5ItFT6djY_eoo/edit#heading=h.mx9oufbyi9xl\">https://docs.google.com/document/d/1ZdDbsBZVL6Bbb9ks4y9ZEMFLfKA6qe5ItFT6djY_eoo/edit#heading=h.mx9oufbyi9xl</a>\n\n<p></p><hr/>\n<em>2016-Jul-08 13:53:56 by wenger:</em> <br/>\n\nOkay, design doc is ready for review, so I'm going to assign this to Miron.\n\n<p></p><hr/>\n<em>2016-Dec-15 13:37:58 by wenger:</em> <br/>\n\nCreated V8_5-gittrac_5725-branch for this...\n\n<p></p><hr/>\n<em>2016-Dec-15 15:50:43 by wenger:</em> <br/>\n\nA few tricky things:\n<ul>\n<li>Need to make sure provisioning and authorization nodes interact correctly with halt files.\n</li><li>Need to make sure PRE scripts (and POST scripts?) work correctly on provisioning and authorization nodes.\n</li><li>Need to make sure provisioning and authorization nodes work correctly with final nodes.\n</li><li>What if a provisioning/authorization node exits with status 0 before other nodes are all submitted?  It probably should be retried.\n</li><li>Should we automatically have retries on provisioning/authorization nodes?\n</li></ul>\n\n<p>(I think once I get the basic provisioning functionality implemented, I should probably temporarily add provisioning nodes to a bunch of the existing tests and make sure they still run correctly...)</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Dec-16 13:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=49828\">[49828]</a></span>: Gittrac <span class=\"ticket\"><a class=\"active\" href=\"tktview?tn=5725\" title='Think about DAGMan \"authorization\" nodes'>#5725</a></span>: Implemented \"releasing\" of \"regular\" nodes once provisioning node is submitted, also \"holding\" of \"regular\" nodes if provisioning node exits, is held, etc.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Dec-15 17:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=49826\">[49826]</a></span>: Gittrac <span class=\"ticket\"><a class=\"active\" href=\"tktview?tn=5725\" title='Think about DAGMan \"authorization\" nodes'>#5725</a></span>: Implemented initial change of \"regular\" nodes from the ready to not-ready state if we have a provisioning node.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Dec-15 16:11</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=49824\">[49824]</a></span>: Gittrac <span class=\"ticket\"><a class=\"active\" href=\"tktview?tn=5725\" title='Think about DAGMan \"authorization\" nodes'>#5725</a></span>: Implemented parsing of provisioning nodes.  (By Kent Wenger )</td></tr>\n</tbody></table>", "type": "todo", "last_change": "2016-Dec-15 15:50", "status": "active", "created": "2016-Jun-10 17:04", "fixed_version": "2016-Jun-10 17:04", "broken_version": "", "priority": "1", "subsystem": "Dag", "assigned_to": "miron", "derived_from": "", "creator": "wenger", "rust": "", "customer_group": "other", "visibility": "public", "notify": "wenger@cs.wisc.edu, tannenba@cs.wisc.edu, miron@cs.wisc.edu, tlmiller@cs.wisc.edu", "due_date": ""}