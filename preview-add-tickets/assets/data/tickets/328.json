{"id": 328, "title": "Ticket #328: DAGMan lazily evaluates and opens node job log files", "description": "<blockquote>\nThis is already in progress, but I figured I should make a ticket for it.</blockquote>", "remarks": "<blockquote>\nBasically, the idea is that we would deal with the log files as lazily\nas possible (at node submit time, rather than at DAGMan startup time).\n\n<p>The big change is that the multi-log-file code would have to be able\nto have a dynamic, rather than static, list of log files to monitor.\n\n</p><p>* Basic changes:\n\n</p><p>- Current log-file-related code to parse a DAG goes away (which means\n  that condor_submit_dag will not check for log file specifications; that\n  will only happen in DAGMan itself).\n\n</p><p>- We only monitor log files associated with active jobs in the DAG,\n  rather than monitoring <strong>all</strong> relevant log files.\n\n</p><p>- Have a command-line flag for whether to check for valid log file\n  specifications when parsing the DAG (defaults to yes).\n\n</p><p>* More details:\n\n</p><p>Have an object for each log file; all <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LogFile\" title=\"Log File\">LogFile</a></span> objects go into a hash\ntable indexed by canonicaled file name; there is a side list with pointers\nonly to the active file objects (for better performance).\n\n</p><p>struct <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LogFile\" title=\"Log File\">LogFile</a></span> {\n    int refCount;\n    int fd;\n    long lastOffset;\n    // maybe last timestamp of file\n    // maybe other stuff\n}\n\n</p><p>* Interface to multi-log-file code:\n\n</p><p>MonitorLogFile(const char *logfile, bool recovery);\n- Make pathname canonical\n- Look for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LogFile\" title=\"Log File\">LogFile</a></span> object in \"main\" list\n- If not found, create new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LogFile\" title=\"Log File\">LogFile</a></span> object (includes file truncation if not\n  in recovery mode)\n- If reference count is 0:\n    - Open file\n    - If file was previously used, seek to the proper location\n    - Add to active list\n- Increment reference count\n\n</p><p>UnmonitorLogFile(const char *logfile, bool recovery);\n- Make pathname canonical\n- Find <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LogFile\" title=\"Log File\">LogFile</a></span> object in \"main\" list\n- Decrement reference count\n- If reference count is now 0:\n    - Get and save current location in file\n    - Close file\n    - Remove from active list\n\n</p><p>ULogEventOutcome readEvent(ULogEvent * &amp; event);\n- Go through all of the active log file objects and find the next unread\n  event.\n\n</p><p>DAGMan calls MonitorLogFile() just before submitting a job; calls\nUnmonitorLogFile() just after dealing with the TERMINATED event for a\njob.  At submit time, DAGMan will also save the log file name in the\nJob object, in case the submit file gets modified during the job's\nlifetime.  When we're finished with the job, we can free the log\nfile name string to save memory.\n\n</p><p>We need to save the list of inactive files in case one job uses a log\nfile, then the log file becomes inactive, and later on another job\nuses it and it becomes active again -- we have to know to seek past\nthe events we already saw when we re-open the file.\n\n</p><p>* Recovery mode:\n\n</p><p>In recovery mode, we'd have to register the log file for a job when it\ngets put into the ready queue.  Hmm -- maybe we should just do it that\nway all the time to avoid having different cases in the code for \"normal\"\nmode and recovery mode.  It would be less efficient, but simpler.\nSomething to think about, anyhow.\n\n</p><p>* Rescue DAGs:\n\n</p><p>I don't think we'd have to do anything special when executing a\nrescue DAG.\n\n</p><p>* Advantages:\n\n</p><p>- Allows the possibility of lazy splice evaluation.\n\n</p><p>- Reduces the number of file descriptors used by DAGMan.\n\n</p><p>- Eliminates current duplicate DAG parsing code in the log file\n  implementation.\n\n</p><p>- Allows more flexible \"on-the-fly\" generation of submit files; but\n  overwriting a submit file that was used earlier in the DAG can cause\n  problems and shouldn't be done (this is also true with the current\n  log file setup).\n\n</p><p>* Possible future developments:\n\n</p><p>Phase 2: limit fd use by not keeping open fds to all active log files\n(fds would be opened and closed each time we get an event).\n\n</p><p>Phase 3: allow macros in log file names (but not $(JOB))\n\n</p><p>Phase 4: make node IDs unique across all DAGMan instances, so we\ndon't need to truncate log files.\n\n</p><p>* Suggestions from Miron, 2008-10-28:\n\n</p><p>If a node job submit file doesn't specify a log file, DAGMan should\nspecify a standard log file on the condor_submit command line.  DAGMan\ncould also delete that file at the end of the run (if successful),\nsince the user presumably doesn't care about it.  (Kent -- maybe there\nshould be a config macro to turn off deleting the log file.)\n\n</p><p>Do something like \"SUBDAG INLINE\" instead of \"SPLICE\".\n\n</p><p>* Notes during implementation:\n\n</p><p>The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReadMultipleUserLogs\" title=\"Read Multiple User Logs\">ReadMultipleUserLogs</a></span> destructor should print a warning if there are\nany \"active\" log files.\n\n</p><p>Hmm -- should the log code touch a non-existant log file when it's\nregistered, so that we can open the file right away?\n\n</p><p>2009-06-25: plans from today's code review:\n* Make changes as per code review.\n* Push out with lazy log file code still disabled.\n* Make sure nightly tests still work.\n* Pete reads code in detail.\n* Turn on lazy log file code.\n* Make sure nightly tests still work.\n* Completely remove the old code.\n* Implement the \"no log file required\" feature.\n\n</p><p>2009-07-08: changes to plan for expediency:\n* Put it in with the existing Condor Hashtable code; switch to STL and keying on both st_dev and st_ino later.\n\n</p><p>2009-07-16: once final version is coded, test with symlink to log file across file system.\n\n</p><p>2009-07-24: this has been enabled on the trunk, and all tests were green last night.  Still needs changes to use STL map instead of Condor <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=HashTable\" title=\"Hash Table\">HashTable</a></span>, and also to index on devise as well as inode.\n\n</p><p></p><hr/>\n<em>2009-Nov-17 11:51:35 by wenger:</em> <br/>\n\nI've created two new tickets (<span class=\"ticket\"><a class=\"new\" href=\"tktview?tn=966\" title=\"Use STL map in DAGMan lazy log file code\">#966</a></span>: use STL map; <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=967\" title=\"DAGMan lazy log file code should also index on device\">#967</a></span>: index on device) to capture the unfinished aspects of this ticket, so I'm resolving this ticket.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=639\" title=\"Automatically generate default log file if node job lacks one\">#639</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAutomatically generate default log file if node job lacks one</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"tktview?tn=966\" title=\"Use STL map in DAGMan lazy log file code\">#966</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nUse STL map in DAGMan lazy log file code</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=967\" title=\"DAGMan lazy log file code should also index on device\">#967</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDAGMan lazy log file code should also index on device</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2010-Jan-31 13:40", "status": "defer", "created": "2009-Mar-17 12:14", "fixed_version": "2009-Mar-17 12:14", "broken_version": "v070300", "priority": "5", "subsystem": "Dag", "assigned_to": "wenger", "derived_from": "", "creator": "wenger", "rust": "a18919", "customer_group": "ligo", "visibility": "public", "notify": "matt@cs.wisc.edu, pmackinn@redhat.com,pcouvare@caltech.edu", "due_date": ""}