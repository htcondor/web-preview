{"id": 3669, "title": "Ticket #3669: HOOK_JOB_EXIT always killed immediately by condor_starter", "description": "<blockquote>\nThere's a bug in condor_starter which affects the execution of a HOOK_JOB_EXIT. The bug causes the starter to terminate the hook immediately. If a job terminates the starter calls the function <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShutdownGraceful\" title=\"Shutdown Graceful\">ShutdownGraceful</a></span> in condor_starter.V6.1/baseStarter.cpp:\n\n<p>The code piece\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">if (!jobRunning) {\ndprintf(D_FULLDEBUG,\"Got ShutdownGraceful when no jobs running.\\n\");\nthis-&gt;allJobsDone();\nreturn 1;\n}\n</pre></div>\n\n\n<p>is erroneous as it reports that both job AND all hooks terminated when it returns 1. Returning 1 leads to immediate termination of the condor_starter and kills all running hooks. The correct version reads:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">if (!jobRunning) {\ndprintf(D_FULLDEBUG,\"Got ShutdownGraceful when no jobs running.\\n\");\nreturn (this-&gt;allJobsDone());\n}\n</pre></div>\n\n\n<p>allJobsDone will return 0 if some hooks or other tasks are still running causing condor_starter to wait until they finished their work.\n\n</p><p>I applied the fix to my version of condor and can confirm that it works.\n\n</p><p>Here's the patch:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">--- src/condor_starter.V6.1/baseStarter.cpp\n+++ src/condor_starter.V6.1/baseStarter.cpp\n@@ -365,12 +365,11 @@\n        }\n        ShuttingDown = TRUE;\n        if (!jobRunning) {\n                dprintf(D_FULLDEBUG,\n                                \"Got ShutdownGraceful when no jobs running.\\n\");\n-               this-&gt;allJobsDone();\n-               return 1;\n+               return (this-&gt;allJobsDone());\n        }\n        return 0;\n }\n</pre></div>\n\n\n<p>Update Dec. 2013: Turns out that my patch fixes the case of normal termination (i.e. the job ends on its own) but not the case wher a user aborts the job. In this case again the hook gets right after it has been started. This other bug is in jic_shadow.cpp as it seems. Here's a patch solving this problem as well:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">--- src/condor_starter.V6.1/jic_shadow.cpp\t2013-12-02 21:38:52.000000000 +0100\n+++ src/condor_starter.V6.1/jic_shadow.cpp\t2013-12-02 21:34:48.000000000 +0100\n@@ -382,7 +382,7 @@\n \t\tr2 = updateShadow( &amp;update_ad, true );\n \t}\n\n-\treturn r1 || r2;\n+\treturn (r1 &amp;&amp; r2);\n }\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2014-Jan-17 12:28:14 by tannenba:</em> <br/>\n\n<strong>CODE REVIEW</strong>\n\n<p>Thanks for the patch.  Looks good, except in JICShadow::allJobsDone, I think we only want to consider r1(the result from parent class allJobsDone()) in our return code.  I don't think a failure to update the shadow here should result in stopping the starter from exiting, because there will not be another external event.  I think it should just return the status of r1, like it used to be before commit  <span class=\"chng\"><a href=\"chngview?cn=28760\">[28760]</a></span> - specifically, I think <a class=\"external\" href=\"https://htcondor-wiki.cs.wisc.edu/index.cgi/filediff?f=src/condor_starter.V6.1/jic_shadow.cpp&amp;v1=4f16bf0875bec159e4576401e4d56a25f9afe47e&amp;v2=dea9d105296d5fd134c3d42ba1a06fd955006351\">this change</a> introduced this bug in the first place.\n\n</p><p></p><hr/>\n<em>2014-Jan-17 13:33:09 by gthain:</em> <br/>\n\n<strong>CODE REVIEW</strong>  Looks good.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Jan-21 09:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39199\">[39199]</a></span>: edit of 8.0.6 version history item <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3669\" title=\"HOOK_JOB_EXIT always killed immediately by condor_starter\">#3669</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Jan-17 13:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39192\">[39192]</a></span>: Fix bug where starter prematurely kills HOOK_JOB_EXIT hook. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3669\" title=\"HOOK_JOB_EXIT always killed immediately by condor_starter\">#3669</a></span>  (By Todd Tannenbaum )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2014-Jan-17 15:30", "status": "resolved", "created": "2013-Jun-01 13:54", "fixed_version": "2013-Jun-01 13:54", "broken_version": "v070807", "priority": "1", "subsystem": "DaemonsExecNode", "assigned_to": "tannenba", "derived_from": "", "creator": "f.wolfheimer", "rust": "", "customer_group": "users", "visibility": "public", "notify": "f.wolfheimer@googlemail.com gthain@cs.wisc.edu", "due_date": ""}