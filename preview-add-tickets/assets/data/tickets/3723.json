{"id": 3723, "title": "Ticket #3723: Frequent shadow crashes on CMS machine at CERN", "description": "<blockquote>\nIgor Sfiligoi reports that he's seeing frequent shadow crashes (about 12 a day) on machine vocms83.cern.ch. Examination of the logs and core files indicates the crashes are due to the passwd_cache class being called recursively inside of _set_priv() due to a getpwnam() call failing. passwd_cache isn't designed to be called this way, and is probably corrupting memory as a result.\n\n<p>The getpwnam() failures claim that the user doesn't exist, though we know the user existed when the job was submitted and when the shadow was born. Almost all of the failures occur at 17:44 local time each day. This suggests that there is a regular, short-lived outage of the ldap service each day.\n\n</p><p>Here is the sequence of events shown by the stack trace quoted below:\n</p><ul>\n<li>Shadow wants to write a job usage update log event\n</li><li>Log event code calls _set_priv() to switch effective uid/gid to the\n   job user\n</li><li>_set_priv() calls into passwd_cache to lookup and set supplemental\n   groups for the user\n</li><li>passwd_cache decides cached information about the user and their\n   groups is stale, starts updating cache entry with new information\n</li><li>passwd_cache calls getpwnam(), which returns failure\n</li><li>passwd_cache calls dprintf() to log failure\n</li><li>dprintf() calls _set_priv() to switch effective uid/gid to condor\n</li><li>dprintf() writes failure to log\n</li><li>dprintf() calls _set_priv() to restore previous effecive uid/gid,\n   which is the user\n</li><li>_set_priv() calls into passwd_cache to lookup and set supplemental\n   groups for the user\n</li><li>passwd_cache starts to update cache with new information about user\n   and supplemental groups\n</li><li>BOOM!\n</li></ul>\n\n<p>_set_priv() takes an argument indicating when it shouldn't call dprintf(), used when dprintf() calls _set_priv(). This avoids a crash-inducing recursion. The passwd_cache object doesn't have a similar flag, so when _set_priv() calls into passwd_cache, it has no way to tell passwd_cache not to call dprintf(). There's a similar problem when _set_priv() is called during process creation on unix, between the fork()/clone() and exec() in the child process. _set_priv() has to be careful about any modifications to memory. passwd_cache won't respect that restriction.\n\n</p><p>Condor version:\n</p><div class=\"code\">\n<pre class=\"code\">$CondorVersion: 7.8.8 Mar 20 2013 BuildID: 110288 $\n$CondorPlatform: x86_rhap_5.8 $\n</pre></div>\n\n\n<p>Sample core dump stack trace:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">#0  0xffffe410 in __kernel_vsyscall ()\n#1  0xf7855fb1 in raise () from /lib/libpthread.so.0\n#2  0xf7dbb723 in linux_sig_coredump (signum=11)\n    at /slots/04/dir_19341/userdir/src/condor_daemon_core.V6/daemon_core_main.cpp:713\n#3  &lt;signal handler called&gt;\n#4  0xf7c9bdfa in passwd_cache::get_groups (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\", groupsize=1, gid_list=0x9f384e8)\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:420\n#5  0xf7c9bf96 in passwd_cache::init_groups (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\", additional_gid=0)\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:532\n#6  0xf7c37b80 in set_user_egid (s=PRIV_USER,\n    file=0xf7ddd374 \"/slots/04/dir_19341/userdir/src/condor_utils/dprintf.cpp\", line=558, dologging=0)\n    at /slots/04/dir_19341/userdir/src/condor_utils/uids.cpp:1560\n#7  _set_priv(._125, const char *, int, int) (s=PRIV_USER,\n    file=0xf7ddd374 \"/slots/04/dir_19341/userdir/src/condor_utils/dprintf.cpp\", line=558, dologging=0)\n    at /slots/04/dir_19341/userdir/src/condor_utils/uids.cpp:1331\n#8  0xf7c13d53 in _condor_dprintf_va (flags=1,\n    fmt=0xf7df50cc \"passwd_cache::cache_uid(): getpwnam(\\\"%s\\\") failed: %s\\n\",\n    args=0xffdfe4f8 \"P\\216\\361\\t\\022S\\337\\367&lt;\\345\\337\\377&lt;\\345\\337\\377\\030\\345\\\n337\\377\\274\\v\\351\\367\\001\")\n    at /slots/04/dir_19341/userdir/src/condor_utils/dprintf.cpp:558\n#9  0xf7c55c7e in dprintf (flags=1,\n    fmt=0xf7df50cc \"passwd_cache::cache_uid(): getpwnam(\\\"%s\\\") failed: %s\\n\")\n    at /slots/04/dir_19341/userdir/src/condor_utils/dprintf_common.cpp:76\n#10 0xf7c9b73f in passwd_cache::cache_uid (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\")\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:323\n#11 0xf7c9b7f5 in passwd_cache::lookup_uid (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\", uce=@0xffdfe5c0)\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:576\n#12 0xf7c9b8d3 in passwd_cache::lookup_uid_entry (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\", uce=@0xffdfe5c0)\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:466\n#13 0xf7c9b9bb in passwd_cache::get_user_gid (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\", gid=@0xffdfe624)\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:442\n#14 0xf7c9ba77 in passwd_cache::cache_groups (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\")\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:230\n#15 0xf7c9bcf5 in passwd_cache::lookup_group (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\", gce=@0xffdfe6c8)\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:597\n#16 0xf7c9bdd3 in passwd_cache::get_groups (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\", groupsize=14132, gid_list=0x9f47270)\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:397\n#17 0xf7c9bf96 in passwd_cache::init_groups (this=0x9ef8490,\n    user=0x9f18e50 \"cms747\", additional_gid=0)\n    at /slots/04/dir_19341/userdir/src/condor_utils/passwd_cache.unix.cpp:532\n#18 0xf7c37b80 in set_user_egid (s=PRIV_USER,\n    file=0xf7de2d24 \"/slots/04/dir_19341/userdir/src/condor_utils/write_user_log.cpp\", line=1153, dologging=1)\n    at /slots/04/dir_19341/userdir/src/condor_utils/uids.cpp:1560\n#19 _set_priv(._125, const char *, int, int) (s=PRIV_USER,\n    file=0xf7de2d24 \"/slots/04/dir_19341/userdir/src/condor_utils/write_user_log.cpp\", line=1153, dologging=1)\n    at /slots/04/dir_19341/userdir/src/condor_utils/uids.cpp:1331\n#20 0xf7c45d71 in WriteUserLog::doWriteEvent (this=0x808adc0, event=\n    0xffdfe83c, is_global_event=true, is_header_event=false)\n    at /slots/04/dir_19341/userdir/src/condor_utils/write_user_log.cpp:1153\n#21 0xf7c46766 in WriteUserLog::writeEvent (this=0x808adc0, event=0xffdfe83c,\n    param_jobad=0x9f12290, written=0x0)\n    at /slots/04/dir_19341/userdir/src/condor_utils/write_user_log.cpp:1254\n#22 0xf7c469aa in WriteUserLog::writeEventNoFsync (this=0x808adc0,\n    event=0xffdfe83c, jobad=0x9f12290, written=0x0)\n    at /slots/04/dir_19341/userdir/src/condor_utils/write_user_log.cpp:1361\n#23 0x080633b3 in UniShadow::updateFromStarterClassAd (this=0x9f16e80,\n    update_ad=0xffdfe930)\n    at /slots/04/dir_19341/userdir/src/condor_shadow.V6.1/shadow.cpp:94\n#24 0x080603aa in pseudo_register_job_info (ad=0xffdfe930)\n    at /slots/04/dir_19341/userdir/src/condor_shadow.V6.1/pseudo_ops.cpp:81\n#25 0x0805a195 in do_REMOTE_syscall ()\n    at /slots/04/dir_19341/userdir/src/condor_shadow.V6.1/NTreceivers.cpp:263\n#26 0x0806cee0 in RemoteResource::handleSysCalls (this=0x9f18668)\n    at /slots/04/dir_19341/userdir/src/condor_shadow.V6.1/remoteresource.cpp:405\n#27 0xf7da6790 in DaemonCore::CallSocketHandler_worker (this=0x9ef7270,\n    i=&lt;value optimized out&gt;, default_to_HandleCommand=true, asock=0x0)\n    at /slots/04/dir_19341/userdir/src/condor_daemon_core.V6/daemon_core.cpp:3816\n#28 0xf7da6bef in DaemonCore::CallSocketHandler_worker_demarshall (\n    arg=0x9f1a4e8)\n    at /slots/04/dir_19341/userdir/src/condor_daemon_core.V6/daemon_core.cpp:3778\n#29 0xf7c7c494 in CondorThreads::pool_add (routine=\n    0xf7da6bb0 &lt;DaemonCore::CallSocketHandler_worker_demarshall(void*)&gt;,\n    arg=0x9f1a4e8, tid=0x9f02328, descrip=0x9f13388 \"HandleSyscalls\")\n    at /slots/04/dir_19341/userdir/src/condor_utils/condor_threads.cpp:1109\n#30 0xf7da1c22 in DaemonCore::CallSocketHandler (this=0x9ef7270,\n    i=@0xffdff4fc, default_to_HandleCommand=true)\n    at /slots/04/dir_19341/userdir/src/condor_daemon_core.V6/daemon_core.cpp:3766\n#31 0xf7da437f in DaemonCore::Driver (this=0x9ef7270)\n    at /slots/04/dir_19341/userdir/src/condor_daemon_core.V6/daemon_core.cpp:3639\n#32 0xf7dbed07 in dc_main (argc=6, argv=0xffdffb64)\n    at /slots/04/dir_19341/userdir/src/condor_daemon_core.V6/daemon_core_main.cpp:2410\n#33 0x0805f51b in main (argc=7, argv=0xffdffb64)\n    at /slots/04/dir_19341/userdir/src/condor_shadow.V6.1/shadow_v61_main.cpp:470\n</pre></div>\n\n\n<p>An additional annoyance was noticed while examining the shadow logs. In this Condor installation, the Condor user is \"_condor\", rather than the usual \"condor\". There is no \"condor\" user on the system. The CONDOR_IDS variable is set to indicate the \"_condor\" user. But every time a shadow starts up, it makes two calls to getpwnam() for the user \"condor\", which fail. Given the presence of the CONDOR_IDS variable, why is the shadow looking for the \"condor\" user? This puts more load on the ldap server and clutters the logs for no purpose.\n\n</p><p>The default expiration time for entries in passwd_cache is 5 minutes. This seems overly short. Changes to existing user accounts should be an infrequent event. Lengthening the default cache expiration to several hours should cut down on calls to the ldap server without much trouble due to stale information.\n\n</p><p>Also, when a cache entry becomes stale, if new calls to getpwnam() and friends fail, we should keep and use the old cache entry for a short period longer. This would allow Condor to better handle short-lived ldap outages.\n\n</p><p>Proposed remedies:\n</p><ul>\n<li>_set_priv() should never call into the passwd_cache object.\nWhen init_user_ids() or set_file_owner_ids() is called, supplemental group information should be copied for _set_priv()'s private use. <strong>[DONE]</strong>\n</li><li>_set_priv() and its help functions should be audited to ensure they don't call dprintf() or modify memory when the dologging parameter says they shouldn't. <strong>[DONE]</strong>\n</li><li>In passwd_cache, when a cache entry is stale, if getpwnam() or friends fail, keep and use the old cache entry for a limited period of time.\n</li><li>When CONDOR_IDS is set, don't try to lookup the \"condor\" user in passwd_cache at daemon startup. <strong>[DONE]</strong>\n</li><li>Lengthen the default passwd_cache entry lifetime from 5 minutes to 20 hours. This is config param PASSWD_CACHE_REFRESH. <strong>[DONE]</strong></li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2013-Jul-01 16:21:21 by jfrey:</em> <br/>\n\nI've implemented most of the fixes outlined in this ticket. The changes are significant for the stable series. Someone else should review them. If they are too risky for the stably series, I can make a much simpler fix that will address just the crashing case Igor reported. That will leave other crash possibilities in place, though.\n\n<p></p><hr/>\n<em>2013-Jul-10 10:16:41 by zmiller:</em> <br/>\n\n<strong>CODE REVIEW</strong> by zmiller:  detected one potential memory leaked, discussed with Jaime, will review again when complete.\n\n<p></p><hr/>\n<em>2013-Jul-12 16:56:28 by zmiller:</em> <br/>\n\n<strong>CODE REVIEW</strong> by zmiller: Now it looks good!</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=3823\" onclick=\"get_ticket_and_populate_wrapper('3823'); return false;\" title=\"Use stale info in passwd_cache for a short period\">#3823</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nUse stale info in passwd_cache for a short period</td></tr>\n</tbody></table>", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/773/gt3723-setpriv-fixes.patch\">gt3723-setpriv-fixes.patch</a>\n12391 bytes added by jfrey on 2013-Jul-01 21:17:36 UTC.\n<br/>\nPatch file for most fixes outlined in this ticket. Does not include code to use stale cache entries when recomputing data fails.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-24 10:31</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=36981\">[36981]</a></span>: minor version history item edit ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3723\" onclick=\"get_ticket_and_populate_wrapper('3723'); return false;\" title=\"Frequent shadow crashes on CMS machine at CERN\">#3723</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-10 13:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=36854\">[36854]</a></span>: Fix memory leak introduced by _set_priv() crash fix. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3723\" onclick=\"get_ticket_and_populate_wrapper('3723'); return false;\" title=\"Frequent shadow crashes on CMS machine at CERN\">#3723</a></span> Always free the copied user and file-owner gid lists before copying a new list from passwd_cache.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-09 09:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=36802\">[36802]</a></span>: Don't call into the passwd_cache from _set_priv() and children. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3723\" onclick=\"get_ticket_and_populate_wrapper('3723'); return false;\" title=\"Frequent shadow crashes on CMS machine at CERN\">#3723</a></span> In certain situations, _set_priv() can't call dprintf() or has to be careful about modifying memory. passwd_cache doesn't obey these precautions, particularly when it decides cache entries are stale. Therefore, we copy the supplemental\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-09 09:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=36803\">[36803]</a></span>: Docs for set_priv() crash fixes. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3723\" onclick=\"get_ticket_and_populate_wrapper('3723'); return false;\" title=\"Frequent shadow crashes on CMS machine at CERN\">#3723</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-09 09:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=36799\">[36799]</a></span>: Change default value for PASSWD_CACHE_REFRESH to 72000. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3723\" onclick=\"get_ticket_and_populate_wrapper('3723'); return false;\" title=\"Frequent shadow crashes on CMS machine at CERN\">#3723</a></span> Data for existing accounts should rarely change. The longer cache lifetime will reduce load on NIS services.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-09 09:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=36800\">[36800]</a></span>: Don't lookup 'condor' account if CONDOR_IDS is set. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3723\" onclick=\"get_ticket_and_populate_wrapper('3723'); return false;\" title=\"Frequent shadow crashes on CMS machine at CERN\">#3723</a></span> If CONDOR_IDS is set correctly, then that account is the real Condor account. There's no need to lookup the account named 'condor'. This results in extra load on NIS services and extra noise in the daemon logs if there is no 'condor' account.\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-09 09:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=36801\">[36801]</a></span>: Avoid recursive calls into dprintf() from _set_priv(). <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3723\" onclick=\"get_ticket_and_populate_wrapper('3723'); return false;\" title=\"Frequent shadow crashes on CMS machine at CERN\">#3723</a></span> If _set_priv() argument dologging says we're inside a dprintf() call, we don't want to call dprintf() on errors. This includes some of _set_priv()'s helper functions.  (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2014-Aug-04 11:55", "status": "resolved", "created": "2013-Jun-26 16:17", "fixed_version": "2013-Jun-26 16:17", "broken_version": "v070808", "priority": "3", "subsystem": "DaemonsSubmitNode", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "sfiligoi@fnal.gov,jfrey@cs.wisc.edu", "due_date": ""}