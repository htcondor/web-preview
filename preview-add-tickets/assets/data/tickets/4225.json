{"id": 4225, "title": "Ticket #4225: Python bindings should support transaction API", "description": "<blockquote>\nThe schedd API calls exposed by the python bindings that alter jobs all perform their own transaction.\n\n<p>For example, if one wants to submit multiple clusters or edit multiple attributes atomically (or a combination of the two), this is not possible.  Currently, multiple API calls are made; an unlucky reader can could query the schedd halfway into the changes.\n\n</p><p>I propose exposing transactions as a context manager.  That is, something along these lines:\n\n</p><p></p><div class=\"verbatim\">\n<pre>with schedd.transaction() as txn:\n  schedd.submit(...)\n  schedd.edit(...)\n</pre></div>\n\n\n<p>The variable txn will be destroyed at the end of the block.  If an exception is thrown, the transaction is aborted; otherwise, it will be committed upon destruction.  See <a class=\"external\" href=\"http://legacy.python.org/dev/peps/pep-0343/\">http://legacy.python.org/dev/peps/pep-0343/</a> for a discussion of context managers in python.\n\n</p><p>A few implementation details which may not be obvious:\n</p><ul>\n<li>If __exit__ has an exception passed, abort the transaction.  False will be returned by the method but an exception raised if aborting the transaction fails.\n</li><li>If __enter__ is called twice, a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RuntimeError\" title=\"Runtime Error\">RuntimeError</a></span> is raised.\n</li><li>The schedd object is not thread-safe.  We do not allow multiple concurrent transaction; if a second transaction is started, we throw a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RuntimeError\" title=\"Runtime Error\">RuntimeError</a></span>.  Because of python's GIL, we do not need to worry about concurrency; no mutexes will be used in the implementation.\n</li><li>The transaction() method should take two argument, flags and continue.\n<ul>\n<li>Flag can be any flag in the enum SetAttributeFlags_t; only NONDURABLE will be supported.\n</li><li>If continue is set to true (default is false) and a transaction is ongoing, the current transaction object will be extend the ongoing transaction.  No error will be thrown and any actions within the context will be appended to the current transaction.  If an exception is thrown and the ongoing transaction was extended, then the ongoing transaction will be aborted.  While this is a bit too \"magic\" for my taste, it seems to be the most straightforward way to nest transactions in the case of nested function calls.  This will allow us to avoid having to add another method along the lines of \"begin_or_update_transaction()\".\n</li></ul>\n</li><li>I'm wavering on whether an \"in_transaction\" method is needed.  This is usually only implemented to implement race conditions (\"if not schedd.in_transaction(): ...\") and I think the continue flag mentioned above is sufficient.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-15 14:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39951\">[39951]</a></span>: minimal documentation for new transaction() python binding. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4225\" title=\"Python bindings should support transaction API\">#4225</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-07 19:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39556\">[39556]</a></span>: Implement transaction API for python. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4225\" title=\"Python bindings should support transaction API\">#4225</a></span>.  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-07 19:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39555\">[39555]</a></span>: Rework unit tests so we only need python2.4 support. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4225\" title=\"Python bindings should support transaction API\">#4225</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-01 13:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39514\">[39514]</a></span>: Fix test case due to event log ambiguity. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4225\" title=\"Python bindings should support transaction API\">#4225</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Feb-24 15:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39455\">[39455]</a></span>: Add forgotten test file. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4225\" title=\"Python bindings should support transaction API\">#4225</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Feb-24 14:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39452\">[39452]</a></span>: Implement transaction API for python. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4225\" title=\"Python bindings should support transaction API\">#4225</a></span>.  (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2014-Apr-16 10:36", "status": "resolved", "created": "2014-Feb-23 13:33", "fixed_version": "2014-Feb-23 13:33", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "bbockelm", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}