{"id": 2503, "title": "Ticket #2503: Myriad of usability issues for glexec", "description": "<blockquote>\nI tried switching glexec on for my dev box today, and found a few issues:\n<ul>\n<li>glexec doesn't work if Condor is started as root.\n</li><li>If globus couldn't determine the expiration time of the proxy, the globus error gets swallowed.\n</li><li>my_popen differs from the POSIX popen in that exec failures get swallowed.  In fact, all exec failures are recorded as a successful fork/exec where the resulting job's exit status was 2048 == WEXITSTATUS(8).\n</li></ul>\n\n<p>Patch incoming.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Sep-27 10:43:30 by danb:</em> <br/>\n\nCode review:\n\n<p>Thanks for the patch, Brian!\n\n</p><p>In the my_popen code, you ifdef LINUX some but not all things relating to pipe_d2.  It looks to me like it will break the non-linux case.  I don't see anything linux-specific in this code to justify the ifdefs.\n\n</p><p>In the glexec privsep helper code, I think it would help to have a comment in each function that calls set_user_priv() reminding that this is a no-op in the normal case where condor is running as non-root.  Otherwise, one might get quite confused about what is going on here.\n\n</p><p>I'm confused about this:\n\n</p><p></p><div class=\"verbatim\">\n<pre> int\n GLExecPrivSepHelper::proxy_valid_right_now()\n {\n+\t\t/* If the sandbox is owned by glexec target user already, PRIV_USER likely can't read it*/\n+\tif (m_sandbox_owned_by_user) {\n+\t\treturn TRUE;\n+\t}\n</pre></div>\n\n\n<p>proxy_valid_right_now() is called in run_script().  So it is called in chown_sandbox_to_condor() and update_proxy(), both of which are called when the sandbox is owned by the user.  This makes me suspicious.  How did this ever work without your change above?!\n\n</p><p>I see how the actual chown_sandbox_to_condor and update_proxy() helper scripts work, once they are called.  They read the proxy from the copy in &lt;sandbox&gt;.condor rather than in &lt;sandbox&gt;.  It seems like proxy_valid_right_now() should verify the copy of the proxy that the helper script will use.  In most cases, that is the copy in &lt;sandbox&gt;.condor.  In the case of chown_sandbox_to_user(), that doesn't exist yet.  My reading of the code says that proxy_valid_right_now() always checks the copy in &lt;sandbox&gt;, but, if that is the case, I don't see how it ever worked.  I must be missing something.\n\n</p><p>--Dan\n\n</p><p></p><hr/>\n<em>2011-Sep-27 18:41:50 by bbockelm:</em> <br/>\n\nHi Dan,\n\n<p>#ifdefs: I was worried about the availability of a working FD_CLOEXEC on non-Linux Unix platforms.  I could only find a reference to it in the 2008 POSIX spec.  However, I found reference to it in the 2004 spec... so we can probably drop those.\n\n</p><p>comments about set_priv: will do\n\n</p><p>proxy_valid_right_now: This of course works before chown_sandbox_to_user as it reads m_proxy, which is a relative file path (i.e., x509_u1221, not /var/lib/condor/.../x509_u1221).  I wonder if the cwd changes at some point from &lt;sandbox&gt; to &lt;sandbox&gt;.condor?  One possible explanation of the behavior I saw is that I had made the file path absolute to test a dead end; if cwd changes, the absolute file path I was testing was wrong.  I'll undo this and see if the issue I was chasing goes away.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2011-Sep-28 10:00:19 by danb:</em> <br/>\n\nCode review of 2nd patch:\n\n<p>Thanks again, Brian!\n\n</p><p>Do you really want to be closing pipe_d2[1] in the child branch of the fork?\n\n</p><p></p><div class=\"verbatim\">\n<pre> \tif( pid == 0 ) {\n+\t\tclose(pipe_d2[0]);\n+\t\tclose(pipe_d2[1]);\n</pre></div>\n\n\n<p>Calling fclose(fh) closes pipe_d2[0]:\n\n</p><p></p><div class=\"verbatim\">\n<pre>+\t\tfclose(fh);\n+\t\tclose(pipe_d2[0]);\n</pre></div>\n\n\n<p>Also in that code, fh is not closed if the exec succeeded.\n\n</p><p>To avoid an extra copy of the proxy, you are doing this:\n\n</p><p></p><pre>   glexec_env.SetEnv(\"GLEXEC_TARGET_PROXY\", user_proxy);\n</pre>\n\n<p>A comment explaining why this is being done would be helpful to future explorers.\n\n</p><p>That code is in glexec create_process().  That path is only followed when launching the job, not when launching other helper scripts that are run via glexec.  So if I understand things correctly, we need to do the same thing in run_script().  Do you agree?\n\n</p><p>Are there any potentially undesired side-effects of setting GLEXEC_TARGET_PROXY as above?  This will cause the original user proxy to be overwritten by glexec, right?  Does glexec mess with it at all?  i.e. does glexec delegate or does it copy the proxy?\n\n</p><p></p><hr/>\n<em>2011-Sep-30 14:21:13 by danb:</em> <br/>\n\nBrian,\n\n<p>I committed your patch!\n\n</p><p>Do you agree that in order to complete resolve <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2501\" title=\"clean up glexec job proxy\">#2501</a></span>, we just need to set GLEXEC_TARGET_PROXY in run_script(), like you are doing in create_process()?\n\n</p><p></p><hr/>\n<em>2011-Sep-30 14:23:09 by bbockelm:</em> <br/>\n\nHi Dan,\n\n<p>I admit - I get confused which is used for what.  However, GLEXEC_TARGET_PROXY should be set anytime glexec is invoked.  So, if glexec is done for create_process, it should be set.\n\n</p><p>Brian</p></blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/468/condor_glexec_as_root.patch\">condor_glexec_as_root.patch</a>\n5988 bytes added by bbockelm on 2011-Sep-27 00:50:33 UTC.\n</li><li><a href=\"attach_get/469/condor_glexec_as_root_v2.patch\">condor_glexec_as_root_v2.patch</a>\n6926 bytes added by bbockelm on 2011-Sep-28 00:34:30 UTC.\n<br/>\nUpdates based on Dan's review.  I think this fixes <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2501\" title=\"clean up glexec job proxy\">#2501</a></span> also.<br/>\n</li><li><a href=\"attach_get/471/condor_glexec_as_root_v3.patch\">condor_glexec_as_root_v3.patch</a>\n7360 bytes added by bbockelm on 2011-Sep-30 00:03:04 UTC.\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Sep-30 14:17</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=27554\">[27554]</a></span>: Make glexec work when condor is running as root. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2503\" title=\"Myriad of usability issues for glexec\">#2503</a></span> Also improve error reporting when failing to access the proxy or when failing to exec glexec helper scripts. Committer: Dan Bradley  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Sep-30 14:17</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=27555\">[27555]</a></span>: Documented the fix for glexec when condor is running as root. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2503\" title=\"Myriad of usability issues for glexec\">#2503</a></span>  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Nov-22 10:55", "status": "resolved", "created": "2011-Sep-26 19:49", "fixed_version": "2011-Sep-26 19:49", "broken_version": "v070700", "priority": "4", "subsystem": "Libs", "assigned_to": "danb", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelm@cse.unl.edu", "due_date": ""}