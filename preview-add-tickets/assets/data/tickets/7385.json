{"id": 7385, "title": "Ticket #7385: Wrong CUDA runtime library name on Linux", "description": "<blockquote>\nIn <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6883\" title=\"condor_gpu_discovery doesn't work with CUDA 10\">#6883</a></span>, we switched from getting version information from the runtime library to getting this from the driver itself.\n\n<p>That works fine and well for driver information we gather - but the runtime information from the <code>cudaGetRuntimeVersion</code> symbol is not in the driver.  Hence, the code falls back to querying a runtime library named <code>libnvcuda.so</code>.\n\n</p><p>To the best of my digging via Google, that library name has never existed on Linux (there is an equivalent <code>nvcuda.dll</code> on Linux?) and the name of the runtime library should be <code>libcudart.so</code>.  Prior to the patch in <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6883\" title=\"condor_gpu_discovery doesn't work with CUDA 10\">#6883</a></span>, we pulled the symbol from that library (although fell back to <code>libnvcuda.so</code>); you can see this on the <code>V8_6-branch</code> for reference.\n\n</p><p>If I manually copy <code>libcudart.so</code> and rename it <code>libnvcuda.so</code>, then <code>condor_gpu_discovery</code> properly sets <code>CUDARuntimeVersion</code>.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Nov-18 11:58:29 by bbockelm:</em> <br/>\n\nEdit: Had the prior ticket reference incorrect in the original description of the ticket.  It is now the correct <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6883\" title=\"condor_gpu_discovery doesn't work with CUDA 10\">#6883</a></span> and not <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4339\" title=\"condor_gpu_discovery crashes on Windows inside OpenCL detection\">#4339</a></span>.\n\n<p></p><hr/>\n<em>2019-Nov-18 12:00:14 by johnkn:</em> <br/>\n\nlibcudart.co is also the wrong name, although it was right for cuda 8.0 (or maybe 7.0? i'm not sure when it stopped being a thing)\n\n<p>The fallback codepath using libnvcuda.so was always wrong on Linux, but it used to be unreachable because we used to use libcudart.so for all detection.\n\n</p><p>In current versions of CUDA however (9 and 10?), there is no name we can use for the runtime library.  <strong>you have to know the runtime version to find the library</strong>.  So we switched to using the driver library for detection.\n\n</p><p>The problem here is that Nvidia gave up on backward compatibility at the runtime layer.  They have backward compatibility only at the driver layer - thus there is no libcudart.so for cuda9 or cuda10.\n\n</p><p>The driver does tell us the highest supported runtime version, although it calls this the <strong>DriverVersion</strong>, and we report it by that name.  (the actual driver version cannot be queried as far as I can tell)\n\n</p><p></p><hr/>\n<em>2019-Nov-18 12:21:08 by bbockelm:</em> <br/>\n\n&gt; libcudart.co is also the wrong name, although it was right for cuda 8.0 (or maybe 7.0? i'm not sure when it stopped being a thing)\n\n<p>I'm not sure I'm following this.\n\n</p><p>On Linux, if you install CUDA-10.1, then <code>libcudart.so</code> is installed as well and is available to the linker in a default environment (that is, no <code>LD_LIBRARY_PATH</code> set -- thanks to <code>ld.so.cache</code>).  Further, it identifies itself correctly as 10.10.\n\n</p><p>Now, that said, this is only a minimally useful attribute as it simply tells you <em>one</em> CUDA runtime version that is installed on the host.  Arguably, one would want to know <em>all</em> CUDA versions if you want to use this in matchmaking!\n\n</p><p></p><hr/>\n<em>2019-Nov-18 15:59:43 by johnkn:</em> <br/>\n\nFor reference in this discussion:\n\n<p>condor_gpu_discovery currently uses <strong>libcuda.so</strong>, which is the CUDA driver API by default.  Only if that does not load, or if the -rl command line option is used  does it try to load <strong>libcudart.so</strong>.\n\n</p><p>When <strong>libcuda.so</strong> does load successfully, there is currently a bug where we never load the runtime library to get its version number on non-Windows platforms, even if that library does exist (which it probably will not)\n\n</p><p>When gpu discovery loads the driver library, it uses <code>cuDriverGetVersion</code> to get the the attribute it publishes as <code>CUDADriverVersion</code>.  In older versions of the API docs this was described as the \"driver version\", but in fact it is not that and never has been.  Newer versions of the docs indicate (correctly) that it is the highest supported runtime version for that driver API.\n\n</p><p></p><hr/>\n<em>2019-Nov-18 16:02:48 by johnkn:</em> <br/>\n\n&gt; On Linux, if you install CUDA-10.1, then libcudart.so is installed as well and is available to the linker in a default environment (that is, no LD_LIBRARY_PATH set -- thanks to ld.so.cache). Further, it identifies itself correctly as 10.10.\n\n<p>If that were true, then we have not received bug reports about GPU detection failing and switched to using the driver API instead.  I'm not sure what the condition is, but it is not guaranteed that you get a libcudart.so when you install the CUDA runtime.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "todo", "last_change": "2019-Nov-18 16:02", "status": "new", "created": "2019-Nov-18 11:30", "fixed_version": "2019-Nov-18 11:30", "broken_version": "v080801", "priority": "4", "subsystem": "DaemonsExecNode", "assigned_to": "johnkn", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "bbockelman@morgridge.org", "due_date": ""}