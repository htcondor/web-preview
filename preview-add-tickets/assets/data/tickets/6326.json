{"id": 6326, "title": "Ticket #6326: Python bindings core dump when used with Python 3", "description": "<blockquote>\nIn ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4146\" title=\"Python 3 support\">#4146</a></span> a first pass at compiling the Python bindings against python3 was done.  However, there are reports of the resulting library failing to work (core dump), and perhaps not even passing our Python regression tests.\n\n<p>Current guess is there is a problem where our bindings call out directly to the Python interpreter (i.e. something changed semantically in the python developer api, or perhaps our binding code is not as strictly typed as it should be and we are running into trouble passing void pointers). One sensible future-proofing approach to fix this issue would of going through Boost.Python for everything and thereby hopefully avoid calling the python api directly at all.\n\n</p><p>First step is to reproduce the failing behavior (hopefully via the regression tests) with python3 by building on a recent version of Fedora (at least until <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6327\" title=\"Build system should create bindings for both Python2 and Python3\">#6327</a></span> is resolved), then create patches (hopefully by converting fully to Boost.Python) to fix the problems revealed.\n\n</p><p>---\n\n</p><p>Current test status:\n\n</p><p>tests/classad_tests.py: 40 tests, all pass<br/>\n\ntests/htcondor_version_tests.py: 5 tests, all pass<br/>\n\ntests/htcondor_tests.py: 23 tests, failures=1, errors=1\n\n</p><p>The couple remaining errors are not python3-specific.</p></blockquote>", "remarks": "<blockquote>\n<em>2017-Jun-29 16:55:31 by edquist:</em> <br/>\n\nAt first i was having trouble getting the condor build to use python3, even when it was installed.  (I used the python34(-devel) packages from epel.)\n\n<p>Apparently one way to get the condor build to use a particular version is:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">diff --git a/build/cmake/CondorConfigure.cmake b/build/cmake/CondorConfigure.cmake\nindex d379dee..ec860f8 100644\n--- a/build/cmake/CondorConfigure.cmake\n+++ b/build/cmake/CondorConfigure.cmake\n@@ -82,7 +82,9 @@ message(STATUS \"********* BEGINNING CONFIGURATION *********\")\n\n # To find python in Windows we will use alternate technique\n if(NOT WINDOWS AND NOT CONDOR_PLATFORM MATCHES \"Fedora19\")\n+\tset(Python_ADDITIONAL_VERSIONS 3.4)\n \tinclude (FindPythonLibs)\n+\tmessage(STATUS \"CCE: Got PYTHONLIBS_VERSION_STRING = ${PYTHONLIBS_VERSION_STRING}\")\n \t# As of cmake 2.8.8, the variable below is defined by FindPythonLibs.\n \t# This helps ensure we get the same version of the libraries and python\n \t# on systems with both python2 and python3.\n@@ -90,6 +92,7 @@ if(NOT WINDOWS AND NOT CONDOR_PLATFORM MATCHES \"Fedora19\")\n \t\tset(PythonInterp_FIND_VERSION \"${PYTHONLIBS_VERSION_STRING}\")\n \tendif()\n \tinclude (FindPythonInterp)\n+\tmessage(STATUS \"CCE: Got PYTHON_VERSION_STRING = ${PYTHON_VERSION_STRING}\")\n else()\n \tif(WINDOWS)\n \t\t#only for Visual Studio 2012\n</pre></div>\n\n\n<p>(Thanks Jamie for helping me figure this out.)  So for now we can still use EL based systems for this.\n\n</p><p>At the moment i'm still having build issues with boost_python3 missing, but we're on our way.\n\n</p><p></p><hr/>\n<em>2017-Jul-05 11:46:06 by edquist:</em> <br/>\n\nThe problem with the <code>boost_python3</code> requirement on EL systems was there is no separate boost-python3 package, and the boost-python package is built against python2.  So that seemed to mean it wouldn't work to use the native packages (ie, PROPER build) for boost-python and python3.\n\n<p>As an alternative, I tried doing a UW_BUILD, which builds boost as an external, but there were a <strong>ton</strong> of errors compiling boost python for the boost external; maybe it's just the version used (<code>boost_1_49_0</code>) ?\n\n</p><p>Anyway I switched to fedora-26, which is python3-only, and which has the separate boost-python3 package.  There were a couple of compile errors related to <code>char</code> vs <code>wchar_t</code> strings, which might make sense because of the way python3 makes everything unicode.  After fixing those, the build now succeeds.\n\n</p><p>I have my changes here for the moment, but I can push this to a branch on the condor afs repo too.<br/>\n\n<a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/master...p3\">https://github.com/edquist/htcondor/compare/master...p3</a>\n\n</p><p>Todd T, do we have a recipe for reproducing the core dumps with python3?\n\n</p><p>Brian B had suggested working though any errors in the python-bindings tests, eg:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">cd ./src/python-bindings\n./test_driver tests/classad_tests.py\n./test_driver tests/htcondor_version_tests.py\n./test_driver tests/htcondor_tests.py\n</pre></div>\n\n\n<p>Currently there are a bunch of errors, but it might just be that the python test scripts are making python2 assumptions (as opposed to things being broken in the C++ python bindings code).\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">======================================================================\nERROR: test_dict_conversion (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 191, in test_dict_conversion\n    ad = classad.ClassAd({'a': [1,2, {}]})\nRuntimeError: Unable to convert mapping to keys\n\n======================================================================\nERROR: test_list_conversion (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 184, in test_list_conversion\n    self.assertTrue(isinstance(ad[\"a\"], types.ListType))\nAttributeError: module 'types' has no attribute 'ListType'\n\n======================================================================\nERROR: test_old_classad_v2 (__main__.TestClassad)\n----------------------------------------------------------------------\nStopIteration: All input ads processed\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 157, in test_old_classad_v2\n    ad = classad.parseNext(open(\"tests/test.old.ad\"))\nSystemError: &lt;Boost.Python.function object at 0x7f4249faef20&gt; returned a result with an error set\n\n======================================================================\nERROR: test_parse_iter (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 66, in test_parse_iter\n    tf.write(\"[foo = 1] [bar = 2]\")\nTypeError: a bytes-like object is required, not 'str'\n\n======================================================================\nERROR: test_parse_next (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 86, in test_parse_next\n    tf.write(\"[foo = 1] [bar = 2]\")\nTypeError: a bytes-like object is required, not 'str'\n\n======================================================================\nERROR: test_parse_one (__main__.TestClassad)\n----------------------------------------------------------------------\nStopIteration: All input ads processed\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 51, in test_parse_one\n    ad = classad.parseOne(\"foo = 1\\nbar = 2\")\nSystemError: &lt;Boost.Python.function object at 0x7f4249faef20&gt; returned a result with an error set\n\n======================================================================\nERROR: test_register (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 390, in test_register\n    self.assertEquals(3, classad.ExprTree('myAdd(1, 2)').eval())\nAttributeError: module 'builtins' has no attribute 'apply'\n\n======================================================================\nERROR: test_state (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 404, in test_state\n    self.assertEquals(0, classad.ExprTree('myFunc(false)').eval())\nAttributeError: module 'builtins' has no attribute 'apply'\n\n======================================================================\nERROR: test_subscript (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 341, in test_subscript\n    ad = classad.ClassAd({'foo': [0,1,2,3]})\nRuntimeError: Unable to convert mapping to keys\n\n======================================================================\nFAIL: test_bool (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 372, in test_bool\n    self.assertFalse(bool( classad.ExprTree('true &amp;&amp; false') ))\nAssertionError: True is not false\n\n======================================================================\nFAIL: test_operator (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 338, in test_operator\n    self.assertRaises(RuntimeError, bool, expr)\nAssertionError: RuntimeError not raised by bool\n\n----------------------------------------------------------------------\nRan 40 tests in 0.046s\n\nFAILED (failures=2, errors=9)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Jul-06 10:57:30 by edquist:</em> <br/>\n\nSo far for the fedora-26 python3-only situation, there were some errors that were clearly just python2 vs 3 -isms in the tests (eg names of returned types), but some functionality appears to be pretty broken too.\n\n<p>Just the following:\n</p><div class=\"code\">\n<pre class=\"code\">classad.ClassAd({'a': [1,2, {}]})</pre></div>\n\nfails with:\n<div class=\"code\">\n<pre class=\"code\">RuntimeError: Unable to convert mapping to keys</pre></div>\n\n\n<p>which happens here:<br/>\n\n<a class=\"external\" href=\"https://github.com/htcondor/htcondor/blob/V8_7_2/src/python-bindings/classad.cpp#L899\">https://github.com/htcondor/htcondor/blob/V8_7_2/src/python-bindings/classad.cpp#L899</a>\n\n</p><p></p><hr/>\n<em>2017-Jul-06 11:30:02 by bbockelm:</em> <br/>\n\nI suspect I know what is going on here.\n\n<p>In Python 2, a C object could implement the mapping protocol by having the appropriate function names (keys(), items(), values()).  In Python 3, the mapping protocol is implemented by filling in the correct <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=PyMappingMethods\" title=\"Py Mapping Methods\">PyMappingMethods</a></span> in the C type object.\n\n</p><p></p><hr/>\n<em>2017-Jul-06 12:15:47 by bbockelm:</em> <br/>\n\nOk, here's a somewhat close example: <a class=\"external\" href=\"https://github.com/CymricNPG/cpython/blob/enum/src/module.cpp#L39\">https://github.com/CymricNPG/cpython/blob/enum/src/module.cpp#L39</a>\n\n<p>Basically, after class creation, extract the raw <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=PyTypeObject\" title=\"Py Type Object\">PyTypeObject</a></span>, make a copy of it, and set the tp_as_mapping to a new mapping object.\n\n</p><p>Now, that code demonstrates doing this for a class instance.  To do it for a class type, I think you can use something like this:\n\n</p><p></p><div class=\"verbatim\">\n<pre>        boost::python::type_info info = boost::python::type_id&lt;ExprTreeHolder&gt;();\n        const boost::python::converter::registration* reg = boost::python::converter::registry::query(info);\n\n        PyTypeObject* type_obj = reg-&gt;get_class_object();\n</pre></div>\n\n\n<p>Probably need to set <code>reg-&gt;m_class_object</code> member variable directly.\n\n</p><p></p><hr/>\n<em>2017-Jul-06 12:44:12 by bbockelm:</em> <br/>\n\nHm - actually, I take that back.  Looking at the cpython source code, we actually should still be calling keys() here.\n\n<p>It might be helpful to narrow down precisely which object it is complaining about.\n\n</p><p></p><hr/>\n<em>2017-Jul-06 21:38:06 by bbockelm:</em> <br/>\n\nOh - I just saw the update about not being able to reproduce the crashes.\n\n<p>I thought the crashes mostly occur in the tests for the htcondor module (while the classad issues were unit test failures...).\n\n</p><p></p><hr/>\n<em>2017-Jul-07 14:05:49 by edquist:</em> <br/>\n\nWe've been making progress fixing the failures from <code>classad_tests.py</code> ...\n\n<p><a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/master...p3\">https://github.com/edquist/htcondor/compare/master...p3</a>\n\n</p><p>The next failures are with <code>test_parse_iter</code>, which I am guessing has something to do with the underlying <code>FILE</code> pointers in the python file objects.  In particular, <code>classad.parseAds(fh).next()</code> sets the file position for fh to the end of the file, where in python2 it stopped after the first ad.\n\n</p><p>If anyone thinks time would be better spent on getting <code>htcondor_tests.py</code> working first, feel free to let me know.  That one actually failed out for me with some permissions issues before getting to any actual crashes.\n\n</p><p></p><hr/>\n<em>2017-Jul-07 14:07:49 by bbockelm:</em> <br/>\n\nI think it's pretty easy to argue that the classad unit tests should be \"easier\" to fix (while providing experience in working with boost python).  htcondor unit tests failures will be ... difficult.\n\n<p>So, let's keep on with the same strategy!  I would suggest that we try to review / merge the code for classad before moving on to htcondor.  Breaking up the review will make it more manageable.\n\n</p><p></p><hr/>\n<em>2017-Jul-11 15:55:53 by edquist:</em> <br/>\n\nI've been trying to track down a failure for this test:\n<div class=\"code\">\n<pre class=\"code\">classad.parseOne(\"foo = 1\\nbar = 2\")\n</pre></div>\n\n\n<p>There appear to be some issues related to iterator logic, which tests for the presence of a <code>next</code> attribute -- which iterators have in python2, but in python3 the method is called <code>__next__</code>.\n\n</p><p>For example, here:\n<a class=\"external\" href=\"https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_parsers.cpp#L203\">https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_parsers.cpp#L203</a>\n\n</p><p>The <code>m_source_has_next</code> variable is based on the presence of the <code>next</code> method of a python list, but that method is called <code>__next__</code> in python3.\n\n</p><p>Brian B, I tried to just correct this everywhere by making a macro for \"next\" / \"__next__\" based on the python version, but this doesn't quite seem to fix the issue... Can you take a peek and see if I'm doing something obviously wrong here?\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/commit/08fbdb5bce47b2e9a0d3ab13b401d4b9225309e4\">https://github.com/edquist/htcondor/commit/08fbdb5bce47b2e9a0d3ab13b401d4b9225309e4</a>\n\n</p><p></p><hr/>\n<em>2017-Jul-12 18:59:19 by edquist:</em> <br/>\n\nThe code\n<div class=\"code\">\n<pre class=\"code\">classad.parseOne(\"foo = 1\\nbar = 2\")</pre></div>\n\n\n<p>which dies with\n</p><div class=\"code\">\n<pre class=\"code\">SystemError: &lt;Boost.Python.function object at 0x7fcaca5bec90&gt; returned a result with an error set</pre></div>\n\nfrom a <code>StopIteration</code>\n\n<p>Is happening here:\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_parsers.cpp#L156\">https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_parsers.cpp#L156</a>\n\n</p><p>and makes its way here:\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_parsers.cpp#L174\">https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_parsers.cpp#L174</a>\n\n</p><p>Which means this tests for <code>PyErr_ExceptionMatches(PyExc_StopIteration)</code> is failing, even though it is (apparently) for a <code>StopIteration</code> exception.\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_parsers.cpp#L169\">https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_parsers.cpp#L169</a>\n\n</p><p></p><hr/>\n<em>2017-Jul-13 12:47:12 by bbockelm:</em> <br/>\n\nAre you sure it's in that <code>catch</code> block?  Did you catch it with GDB or something?\n\n<p>Typically, the error message indicates that the Python C API was used and triggered a Python exception.  Then, the function subsequently returned a python object <em>without</em> clearing the python exception first.  If you are really at line 174, then it seems the code block is left with either the python error cleared - or a C++ exception is thrown.  (Hence, it seems unlikely the issue goes through there.)\n\n</p><p>When the boost-python / C++ bindings are used, they tend to convert Python exceptions into C++ exceptions.\n\n</p><p></p><hr/>\n<em>2017-Jul-18 16:07:02 by edquist:</em> <br/>\n\nHey Brian,\n\n<p>I was not using GDB, but i had added the following debugging lines from the linked commit, indicating the <code>catch</code> for <code>boost::python::error_already_set</code>, and <code>PyErr_ExceptionMatches(PyExc_StopIteration)</code> evaluating to false:\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/commit/aba9b99f7afb1e1ab007a71e6952a861434966fd#diff-7baf982730e6d91f959cbdc077085022R203\">https://github.com/edquist/htcondor/commit/aba9b99f7afb1e1ab007a71e6952a861434966fd#diff-7baf982730e6d91f959cbdc077085022R203</a>\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">&gt;&gt;&gt; import classad\n&gt;&gt;&gt; classad.parseOne(\"foo = 1\\nbar = 2\")\ninput_extract.check() OK\ninput_extract() == [foo = 1\nbar = 2]\n[CLASSAD_OLD]\nHERE (parseOldAds_impl : 1)\nHERE (parseOldAds_impl) test1 = 0\nHERE (parseOldAds_impl) test2 = 1\nHERE (parseOldAds_impl) test = 1\nHERE (parseOldAds_impl : 2)\nHERE (OldClassAdIterator::OldClassAdIterator) (1)\nm_source_has_next = 1\nHERE (parseOne) (0)\n&lt;classad.OldClassAdIterator object at 0x7fe19004d9f0&gt;\nHERE (parseOne) (1)\ninput_has_next = 1\nHERE (parseOne) (2)\nHERE (parseOne) (6)\nPyErr_Occurred = 0x7fe18ff385a0\nHERE (parseOne) (8)\nStopIteration\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nSystemError: &lt;Boost.Python.function object at 0x7fe19155f0e0&gt; returned a result with an error set\n&gt;&gt;&gt;\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Jul-18 18:48:27 by edquist:</em> <br/>\n\nI added more debugging to my <code>p3.debug</code> branch <a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/p3...p3.debug\">https://github.com/edquist/htcondor/compare/p3...p3.debug</a>\n\n<p>It looks like <code>OldClassAdIterator::next()</code> is returning here, right after the <code>(27)</code> is printed ...\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R343\">https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R343</a>\n\n</p><p>This is a little confusing since the exception caught, it seems, happens here, between <code>(2)</code> and <code>(3)</code> in <code>parseOne</code>:\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R176\">https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R176</a>\n\n</p><p>... that is, it's as if the C++ exception is coming from <code>OldClassAdIterator::next()</code>, although that function apparently returns normally.  Is there some wrapper function in-between that is throwing a C++ exception if a python exception is set?\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">&gt;&gt;&gt; import classad\n&gt;&gt;&gt; classad.parseOne(\"foo = 1\\nbar = 2\")\ninput_extract.check() OK\ninput_extract() == [foo = 1\nbar = 2]\n[CLASSAD_OLD]\nHERE (parseOldAds_impl : 1)\nHERE (parseOldAds_impl) test1 = 0\nHERE (parseOldAds_impl) test2 = 1\nHERE (parseOldAds_impl) test = 1\nHERE (parseOldAds_impl : 2)\nHERE (OldClassAdIterator::OldClassAdIterator) (1)\nm_source_has_next = 1\nHERE (parseOne) (0)\n&lt;classad.OldClassAdIterator object at 0x7f58727469f0&gt;\nHERE (parseOne) (1)\ninput_has_next = 1\nHERE (parseOne) (2)\nHERE (OldClassAdIterator::next()) (0)\nHERE (OldClassAdIterator::next()) (3)\nHERE (OldClassAdIterator::next()) (8)\nHERE (OldClassAdIterator::next()) (9)\nHERE (OldClassAdIterator::next()) (10)\nHERE (OldClassAdIterator::next()) (11)\nHERE (OldClassAdIterator::next()) (31)\nHERE (OldClassAdIterator::next()) (33)\nHERE (OldClassAdIterator::next()) (39)\nHERE (OldClassAdIterator::next()) (40)\nHERE (OldClassAdIterator::next()) (43)\nHERE (OldClassAdIterator::next()) (44)\nHERE (OldClassAdIterator::next()) (8)\nHERE (OldClassAdIterator::next()) (9)\nHERE (OldClassAdIterator::next()) (10)\nHERE (OldClassAdIterator::next()) (11)\nHERE (OldClassAdIterator::next()) (31)\nHERE (OldClassAdIterator::next()) (33)\nHERE (OldClassAdIterator::next()) (39)\nHERE (OldClassAdIterator::next()) (40)\nHERE (OldClassAdIterator::next()) (43)\nHERE (OldClassAdIterator::next()) (44)\nHERE (OldClassAdIterator::next()) (8)\nHERE (OldClassAdIterator::next()) (9)\nHERE (OldClassAdIterator::next()) (10)\nHERE (OldClassAdIterator::next()) (19)\nHERE (OldClassAdIterator::next()) (20)\nHERE (OldClassAdIterator::next()) (22)\nHERE (OldClassAdIterator::next()) (27)\nHERE (parseOne) (6)\nPyErr_Occurred = 0x7f58726305a0\nHERE (parseOne) (8)\nStopIteration\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nSystemError: &lt;Boost.Python.function object at 0x7f5874249260&gt; returned a result with an error set\n&gt;&gt;&gt;\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Jul-18 19:19:15 by edquist:</em> <br/>\n\nBrian, do we need to add a call to <code>PyErr_Clear()</code> inside the <code>PyErr_ExceptionMatches(PyExc_StopIteration)</code> block here for the success case too?\n\n<p><a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R320\">https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R320</a>\n\n</p><p>Currently <code>PyErr_Clear()</code> is only getting set here, when the <code>StopIteration</code> is explicitly thrown:\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R326\">https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R326</a>\n\n</p><p></p><hr/>\n<em>2017-Jul-19 13:28:26 by edquist:</em> <br/>\n\nYeah, it seems to me like this issue is the <code>OldClassAdIterator::next()</code> catches and handles a <code>StopIteration</code> error, but does not call <code>PyErr_Clear()</code>.  In Python 3, this somehow gets upgraded to a <code>SystemError('&lt;Boost.Python.function object at 0x...&gt; returned a result with an error set',)</code>\n\n<p>This behavior apparently got added in Python 3.5 to <code>_Py_CheckFunctionResult</code> which gets called from the underlying <code>PyObject_Call</code>.\n\n</p><p><a class=\"external\" href=\"https://bugs.python.org/issue23571\">https://bugs.python.org/issue23571</a>\n\n</p><p>... So I think this means we need to call <code>PyErr_Clear()</code> right before returning successfully from the <code>PyErr_ExceptionMatches(PyExc_StopIteration)</code> block:\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R345\">https://github.com/edquist/htcondor/compare/p3...p3.debug#diff-7baf982730e6d91f959cbdc077085022R345</a>\n\n</p><p>(... Brian, let me know if you think I'm on the wrong track here...)\n\n</p><p></p><hr/>\n<em>2017-Jul-19 17:00:37 by edquist:</em> <br/>\n\nThis seems to clear it up...  We'll see if any other places pop up that also should be doing a <code>PyErr_Clear</code> but aren't...\n\n<p><a class=\"external\" href=\"https://github.com/edquist/htcondor/commit/034728707cfc8bc486a9c256fb99e43ce47e8cf2\">https://github.com/edquist/htcondor/commit/034728707cfc8bc486a9c256fb99e43ce47e8cf2</a>\n\n</p><p>The next errors have to do with parsing classads from python file-like objects.  For some reason, in Python 3, the python object's file pointer (<code>.tell()</code>) is always set to the end of the file, despite the underlying classad library doing <code>fgetc</code> calls advancing a character at a time.\n\n</p><p>But as noted in <code>convert_to_FILEptr</code>, it's dubious that python3's file-like objects can be safely converted to a <code>FILE *</code>\n\n</p><p><a class=\"external\" href=\"https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_module.cpp#L66-L69\">https://github.com/edquist/htcondor/blob/p3/src/python-bindings/classad_module.cpp#L66-L69</a>\n\n</p><p></p><hr/>\n<em>2017-Jul-20 17:05:13 by edquist:</em> <br/>\n\nSo perhaps to re-iterate, the situation is:\n\n<p>- in Python 2, when parsing a classad file, the python <code>file</code> object's <code>FILE</code> pointer is used directly, which gets used by the parser from the classad library.  Advancing the file position via calls to <code>getc</code> and <code>ungetc</code> then gets reflected in the python <code>file</code> object.\n\n</p><p>- in Python 3, there is no <code>FILE</code> pointer available for file-like objects, but we access the underlying fd and with that we use <code>fdopen</code> to make a new <code>FILE</code> pointer.  When <code>getc</code> and <code>ungetc</code> calls are made to the <code>FILE</code> pointer, the position reported by <code>ftell()</code> no longer corresponds to the actual fd's file position.\n\n</p><p>One idea was to extend the <code>ClassAdFileIterator</code> class to contain the python file object also, and calls to <code>next()</code> would call <code>seek</code> on the python object to reset it to match <code>ftell()</code> on the <code>FILE</code> pointer ... But this feels messy.\n\n</p><p>Another approach which looks to work is to make our <code>FILE</code> object from <code>fdopen()</code> unbuffered, so that <code>getc</code> calls do not advance the fd position beyond what <code>ftell()</code> would report, and replace <code>ungetc</code> calls with <code>fseek(_file, -1, SEEK_CUR)</code> (since <code>ungetc</code> does not actually update the fd position).  This is a performance hit since it means one <code>read</code> system call per byte, but I'm not sure if there is a much better option...  Open to ideas.\n\n</p><p></p><hr/>\n<em>2017-Jul-20 17:28:07 by edquist:</em> <br/>\n\nAll classad tests now pass; on to the htcondor tests...\n\n<p></p><hr/>\n<em>2017-Jul-21 15:47:57 by bbockelm:</em> <br/>\n\nHi,\n\n<p>I am starting to fear this will be a nightmare to review.\n\n</p><p>Can you put together a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=GitHub\" title=\"Git Hub\">GitHub</a></span> PR so I can go through the technical pieces?\n\n</p><p>I don't want to do both modules as one big hunk.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2017-Jul-21 17:43:17 by edquist:</em> <br/>\n\nSure: <a class=\"external\" href=\"https://github.com/htcondor/htcondor/pull/16\">https://github.com/htcondor/htcondor/pull/16</a>\n\n<p>(Though i don't have permissions to assign you as a reviewer.)\n\n</p><p>I can also push this as a branch to the main condor repo on UW AFS, if/when that's appropriate...\n\n</p><p></p><hr/>\n<em>2017-Jul-21 18:28:14 by edquist:</em> <br/>\n\n<code>htcondor_version_tests.py</code> now pass with the fixes in my <code>master-gt6326-python3-htcondor_version_tests</code> branch:\n\n<p><a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/master-gt6326-python3...master-gt6326-python3-htcondor_version_tests\">https://github.com/edquist/htcondor/compare/master-gt6326-python3...master-gt6326-python3-htcondor_version_tests</a>\n\n</p><p>(The problem here was there is no <code>exceptions</code> module in python3, but all exceptions are actually builtins in python 2 &amp; 3, so we can just use the <code>builtins</code> module instead.)\n\n</p><p></p><hr/>\n<em>2017-Jul-21 18:47:00 by edquist:</em> <br/>\n\nI'll also be putting fixes for <code>htcondor_tests.py</code> under my <code>master-gt6326-python3-htcondor_tests</code> branch...\n\n<p><a class=\"external\" href=\"https://github.com/edquist/htcondor/compare/master-gt6326-python3-htcondor_version_tests...master-gt6326-python3-htcondor_tests\">https://github.com/edquist/htcondor/compare/master-gt6326-python3-htcondor_version_tests...master-gt6326-python3-htcondor_tests</a>\n\n</p><p></p><hr/>\n<em>2017-Jul-21 18:50:17 by edquist:</em> <br/>\n\nCurrent error set for the htcondor tests.  (Share the love! :)\n\n<p></p><div class=\"code\">\n<pre class=\"code\">======================================================================\nERROR: testDrain (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 603, in testDrain\n    startd.cancelDrainAllJobs(drain_id)\nAttributeError: 'Startd' object has no attribute 'cancelDrainAllJobs'\n\n======================================================================\nERROR: testNegotiate (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 384, in testNegotiate\n    session.sendClaim(claim['ClaimId'], claim, request)\nTypeError: No registered converter was able to produce a C++ rvalue of type std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; from this Python object of type ExprTree\n\n======================================================================\nERROR: testRemoteSetParam (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nStopIteration: All remote variables processed.\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 203, in testRemoteSetParam\n    self.assertTrue((\"ENABLE_CHIRP_DELAYED\", \"true\") in rparam2.items())\nSystemError: &lt;Boost.Python.function object at 0x7f98212fcbb0&gt; returned a result with an error set\n\n======================================================================\nERROR: testScheddNonblockingQuery (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 411, in testScheddNonblockingQuery\n    it.next()\nAttributeError: 'QueryIterator' object has no attribute 'next'\n\n======================================================================\nERROR: testScheddNonblockingQueryCount (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 444, in testScheddNonblockingQueryCount\n    schedd.act(htcondor.JobAction.Remove, \"true\")\nRuntimeError: Error when performing action on the schedd.\n\n======================================================================\nERROR: testScheddNonblockingQueryRemove (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 429, in testScheddNonblockingQueryRemove\n    cluster = schedd.submit(submit_ad, 300, False, ads)\nRuntimeError: Failed to connect to schedd.\n\n======================================================================\nFAIL: testCollectorAdvertise (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 253, in testCollectorAdvertise\n    self.assertEqual(ads[0][\"Bar\"], now)\nAssertionError: 1500680629.295669 != 1500680629.2956688\n\n======================================================================\nFAIL: testEventLog (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 646, in testEventLog\n    self.assertEqual(val, b[key])\nAssertionError: '2017-11-15T16:05:55' != '2017-11-15T17:05:55'\n- 2017-11-15T16:05:55\n?             ^\n+ 2017-11-15T17:05:55\n?             ^\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Jul-24 13:30:22 by bbockelm:</em> <br/>\n\nFirst round of review uploaded on github.  Mostly minor things noted.  (In the future, let's break up the PRs a bit more.)\n\n<p>Remaining things all look like one-off fixes.  Maybe we have all the big-picture changes fixed?\n\n</p><p></p><hr/>\n<em>2017-Jul-25 15:48:41 by edquist:</em> <br/>\n\nComments and additional commits added to PR after Brian's review:\n\n<p><a class=\"external\" href=\"https://github.com/htcondor/htcondor/pull/16\">https://github.com/htcondor/htcondor/pull/16</a>\n\n</p><p>Brian, if you can take another peek, let me know if you're happy enough and I can push it to a branch on UW AFS.\n\n</p><p>...\n\n</p><p>As for the <code>htcondor_tests</code>, I've made some more progress on some of the failures, and it also looks like 3 of the tests were also not passing for python2 (so, those are not new failures in python3).\n\n</p><p>The ones left specific to python3:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">======================================================================\nERROR: testScheddNonblockingQueryCount (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 444, in testScheddNonblockingQueryCount\n    schedd.act(htcondor.JobAction.Remove, \"true\")\nRuntimeError: Error when performing action on the schedd.\n\n======================================================================\nERROR: testScheddNonblockingQueryRemove (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 429, in testScheddNonblockingQueryRemove\n    cluster = schedd.submit(submit_ad, 300, False, ads)\nRuntimeError: Failed to connect to schedd.\n</pre></div>\n\n\n<p>The ones failing for python2 also:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">======================================================================\nERROR: testDrain (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 604, in testDrain\n    startd.cancelDrainAllJobs(drain_id)\nAttributeError: 'Startd' object has no attribute 'cancelDrainAllJobs'\n\n======================================================================\nERROR: testNegotiate (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 385, in testNegotiate\n    session.sendClaim(claim['ClaimId'], claim, request)\nTypeError: No registered converter was able to produce a C++ rvalue of type std::string from this Python object of type ExprTree\n\n======================================================================\nFAIL: testEventLog (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 647, in testEventLog\n    self.assertEquals(val, b[key])\nAssertionError: '2017-11-15T16:05:55' != '2017-11-15T17:05:55'\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Jul-26 11:21:26 by edquist:</em> <br/>\n\nHey Brian, the remaining python3-specific test failures both appear to be schedd related (<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RuntimeErrors\" title=\"Runtime Errors\">RuntimeErrors</a></span>: \"Failed to connect to schedd\" and \"Error when performing action on the schedd\").  Not sure what the best way to make progress is with these.  (Debugging was a bit easier with the classad tests since each test was independent and could be done by hand in an interactive python session - where the htcondor tests seem to have a bunch of context from the bootstrapping.)\n\n<p></p><hr/>\n<em>2017-Jul-27 15:41:03 by edquist:</em> <br/>\n\nBrian helped track down the schedd errors - turned out the python tests needed to set additional <code>*_PORT</code> env vars (at least when there was an already-running condor).  Also apparently there was some weirdness with <code>assertNotEqual</code> and classad objects that had an overloaded '==' operator.\n\n<p>Anyway, that's the last of the python3 failures!  Per Brian's review, I've merged my topic branches into <code>master</code>.\n\n</p><p>The two remaining have been around for a while failing for python2 also.  We can open a separate ticket for them:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">======================================================================\nERROR: testNegotiate (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 386, in testNegotiate\n    session.sendClaim(claim['ClaimId'], claim, request)\nTypeError: No registered converter was able to produce a C++ rvalue of type std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; from this Python object of type ExprTree\n\n======================================================================\nFAIL: testEventLog (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 648, in testEventLog\n    self.assertEqual(val, b[key])\nAssertionError: '2017-11-15T16:05:55' != '2017-11-15T17:05:55'\n- 2017-11-15T16:05:55\n?             ^\n+ 2017-11-15T17:05:55\n?             ^\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Aug-08 16:50:23 by edquist:</em> <br/>\n\nOne follow-up note -\n\n<p>Todd T had suggested trying to build with Python 3 on RHEL 7 using Anaconda Python 3.5, which is apparently the setup the space telescope people are using.\n\n</p><p>Turns out Anaconda Python is not to be confused with the redhat package called <code>anaconda</code>, which is the system installer.  I got anaconda python from <a class=\"external\" href=\"https://www.continuum.io/downloads\">https://www.continuum.io/downloads</a> - specifically <a class=\"external\" href=\"https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh\">https://repo.continuum.io/archive/Anaconda3-4.4.0-Linux-x86_64.sh</a>\n\n</p><p>Using a PROPER build (ie, non-UW_BUILD), I can get the python bindings to compile with anaconda python 3.x on RHEL 7, but the link step fails because <code>ld</code> can't find <code>-lboost_python3</code> ... That's right, RHEL 7 has the python2 version of <code>boost_python</code> -- specifically, linked against <code>libpython2.7.so.1.0</code>.  <code>boost_python3</code> is apparently only available in later versions of fedora.\n\n</p><p>So... I think this means that for python3 on RHEL 7 we need to do a UW_BUILD with the updated boost external.  I think that task is in progress (ticket no.?) but not yet complete.  (<a class=\"external\" href=\"https://htcondor-wiki.cs.wisc.edu/index.cgi/chngview?cn=52032\">https://htcondor-wiki.cs.wisc.edu/index.cgi/chngview?cn=52032</a>)\n\n</p><p></p><hr/>\n<em>2017-Aug-10 15:03:31 by edquist:</em> <br/>\n\nTim T has updated the boost external to version 1.64.0.  With anaconda python 3 installed, I did a cmake configure with\n\n<p></p><div class=\"code\">\n<pre class=\"code\">../configure_uw -DPYTHON_VERSION=3.6 -DPYTHON_INCLUDE_DIR=$HOME/anaconda3/include/python3.6m -DPYTHON_LIBRARY=$HOME/anaconda3/lib/libpython3.6m.so ..\n</pre></div>\n\n\n<p>Which picked up the correct anaconda python version (installed under the user's homedir).  However, the boost external failed to build with\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">./boost/python/detail/wrap_python.hpp:50:23: fatal error: pyconfig.h: No such file or directory\n # include &lt;pyconfig.h&gt;\n                       ^\ncompilation terminated.\n</pre></div>\n\n\n<p><code>pyconfig.h</code> is in the configured <code>PYTHON_INCLUDE_DIR</code>, so I think this means somehow boost needs to know about <code>PYTHON_INCLUDE_DIR</code> but doesn't.\n\n</p><p></p><hr/>\n<em>2017-Aug-10 16:05:27 by edquist:</em> <br/>\n\nYeah i'm not having any luck with this.  Apparently PYTHON_INCLUDE_DIR needs to be taken into account for the boost external (so, presumably somewhere in <code>externals/bundles/boost/1.64.0/CMakeLists.txt</code>) ... I'm not sure where though.\n\n<p></p><hr/>\n<em>2017-Aug-22 17:03:32 by edquist:</em> <br/>\n\nI was able to get <code>boost-1.64</code> (the version used in our externals) to build against anaconda Python 3 on RHEL 7, with some tweaking:\n\n<p>- the version of anaconda python I was using from the site <a class=\"external\" href=\"https://www.continuum.io/downloads\">https://www.continuum.io/downloads</a> was Python 3.6, which when installed was called <code>3.6m</code> ... This <code>m</code> in the version ended up causing some weird compile time errors for the <code>boost</code> external, which expected to find the python include dir under <code>$PYTHON_ROOT/include/python$VERSION</code>, with version <code>3.6</code>.  It correctly detected <code>PYTHON_ROOT</code> using the <code>python3</code> from <code>PATH</code> (set in <code>~/.bashrc</code>), but the actual include directory was <code>$PYTHON_ROOT/include/python3.6m</code>.  The fix that ended up working was to create a symlink in that include directory from <code>python3.6 -&gt; python3.6m</code>.\n\n</p><p>After that symlink tweak, I was able to get a condor <code>UW_BUILD</code> to compile against the non-system anaconda python3 install on RHEL 7.  To configure the UW-style build to point to the anaconda python, which I installed under <code>~/anaconda3/</code>, I used:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">mkdir bld3\ncd bld3\n../configure_uw -DPYTHON_VERSION=3.6 -DPYTHON_INCLUDE_DIR=$HOME/anaconda3/include/python3.6m -DPYTHON_LIBRARY=$HOME/anaconda3/lib/libpython3.6m.so ..\n</pre></div>\n\n\n<p>However, after a successful build, the python-bindings tests apparently have trouble finding some library symbol from boost:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">ana@el7-py35 ~/htcondor/bld3/src/python-bindings $ ./test_driver tests/classad_tests.py\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 8, in &lt;module&gt;\n    import classad\nImportError: /home/ana/htcondor/bld3/src/python-bindings/classad.so: undefined symbol: _ZN5boost6python6detail11init_moduleER11PyModuleDefPFvvE\n</pre></div>\n\n\n<p>Some grepping shows that this <code>_ZN5boost6python6detail11init_moduleER11PyModuleDefPFvvE</code> symbol is not present in any .so's that get built as part of the condor build; although it is present in the <code>~/htcondor/bld3/bld_external/boost-1.64.0/install/lib/libboost_python3.a</code> that gets built as part of the boost external.\n\n</p><p>Brian B, et al, any idea what I might be missing here?\n\n</p><p></p><hr/>\n<em>2017-Aug-25 12:34:55 by edquist:</em> <br/>\n\nFor the <code>UW_BUILD</code>, the <code>PYTHON_BOOST_LIB</code> was getting set to <code>boost_python</code>, but after our latest boost external update (to 1.64.0), the library when built against Python 3 is called <code>boost_python3</code> (already the case for <code>PROPER</code> builds).\n\n<p><span class=\"chng\"><a href=\"chngview?cn=52178\">[52178]</a></span> fixes the CMake rule to use <code>boost_python3</code> when building against Python 3, regardless of <code>PROPER</code> vs <code>UW_BUILD</code>.\n\n</p><p>Per discussion with Todd T, I've committed this to <code>V8_7_3-branch</code> for now.\n\n</p><p>Yay, the unit tests work now. (with a non-system anaconda python3 install)</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=7001\" title=\"Fix ClassAd parsing from non-seekable streams\">#7001</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nFix <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> parsing from non-seekable streams</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Oct-30 09:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52719\">[52719]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) re-drop Py*_Check compat macros a la 13db00ef99: - PyInt_Check is unused for python3 - PyString_Check got renamed to PyBytes_Check in python3, but the PyBytes_Check alias is also available in python2 this really should have been part of the merge of V8_7-gt6327 Committer: Jason Patton  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Sep-13 11:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52343\">[52343]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) re-drop Py*_Check compat macros a la 13db00ef99: - PyInt_Check is unused for python3 - PyString_Check got renamed to PyBytes_Check in python3, but the PyBytes_Check alias is also available in python2 this really should have been part of the merge of V8_7-gt6327  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Aug-25 12:03</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52178\">[52178]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) Python 3 lib for boost external is now is boost_python3 In our updated boost external (1.64.0), the PYTHON_BOOST_LIB for Python 3 is now called boost_python3, which is also the case for the system library for PROPER builds.\u00a0[...]\n (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-28 12:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51957\">[51957]</a></span>: Revert \"(<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) drop unnecessary error state preservation\" This reverts commit 3a04619db16cdf5225628f0ec034e2eba96cd745.\u00a0[...]\n (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-27 16:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51954\">[51954]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) python2 compatible access to builtins module ...apparently py_import(\"builtins\") doesn't work in python2...  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-27 15:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51951\">[51951]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) fix function name cancelDrainAllJobs -&gt; cancelDrainJobs  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-27 15:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51950\">[51950]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) fix assertion for python3 The '==' operator is overloaded for classad objects, something wasn't happy with this in python3's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AssertNotEqual\" title=\"Assert Not Equal\">AssertNotEqual</a></span>  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-27 15:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51949\">[51949]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) rename parse-&gt;parseOne to avoid <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DeprecationWarnings\" title=\"Deprecation Warnings\">DeprecationWarnings</a></span>  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-27 15:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51948\">[51948]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) set appropriate ports for htcondor tests  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-27 14:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51938\">[51938]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) drop unnecessary error state preservation The error state gets cleared afterwards since 80b6560.  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-25 14:47</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51947\">[51947]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) supply sufficient floating point precision the value for `now` was frequently being truncated at the default \"%f\" precision, causing the assertEqual test to fail. \"%.22f\" seems to be sufficient.  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-25 14:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51937\">[51937]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) clear <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StopIteration\" title=\"Stop Iteration\">StopIteration</a></span> error on success for python2 also this was only causing problems for python 3.5+, but it doesn't seem to hurt to clear the error for python2 also.  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-25 14:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51946\">[51946]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) clear <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StopIteration\" title=\"Stop Iteration\">StopIteration</a></span> error on success starting in Python 3.5, a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SystemError\" title=\"System Error\">SystemError</a></span> is raised if the function is returned with an exception set: <a class=\"external\" href=\"https://bugs.python.org/issue23571\">https://bugs.python.org/issue23571</a> See also: 80b65605a  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-25 10:55</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51936\">[51936]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) add note explaining trickery with lambda function  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-25 10:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51935\">[51935]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) add note explaining use of fseek over ungetc  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-25 10:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51934\">[51934]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) drop our Py*_Check compat macros Brian B didn't like us making macros that weren't obviously named, and anyway it looks like we can get by without them.\u00a0[...]\n (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-21 18:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51945\">[51945]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) use next(it) rather than it.next() As with 952045413: in python3 it's it.__next__(), but next(it) is correct for both.  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-21 18:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51944\">[51944]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) there's no types.FloatType in python3 - just use float  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-21 18:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51941\">[51941]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) python3 doesn't have an exceptions module and all exceptions are actually builtins in python 2 and 3, so just use the builtins module.  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-20 17:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51933\">[51933]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) re-open tempfile objects for python3 classad parsing does not seem to work on tempfile objects, but it does for the files returned by open.\u00a0[...]\n (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-20 17:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51932\">[51932]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) go out of our way to make FILE pos match the fd's In Python 3, our FILE pointer does not correspond to anything in the python object. Buffered getc calls will advance the fd pos a block at a time, and ungetc does not actually seek backwards.\u00a0[...]\n (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-19 13:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51931\">[51931]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) clear <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StopIteration\" title=\"Stop Iteration\">StopIteration</a></span> error here on success starting in Python 3.5, a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SystemError\" title=\"System Error\">SystemError</a></span> is raised if the function is returned with an exception set: <a class=\"external\" href=\"https://bugs.python.org/issue23571\">https://bugs.python.org/issue23571</a> ... note this makes the code immediately above meaningless, which saves and restores the error state...  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-12 18:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51930\">[51930]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) avoid warnings for redefining _DEFAULT_SOURCE on fedora-26  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-12 16:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51929\">[51929]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) use next(it) rather than it.next() ... in python3 it's it.__next__(), but next(it) is correct for both  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-11 15:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51928\">[51928]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) iterators' \"next\" attribute is called \"__next__\" in python3  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-07 12:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51927\">[51927]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) python3's bool method is __bool__ not __nonzero__ also, rename the C++ function to __bool__, since it's really just about converting to a bool  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-07 12:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51926\">[51926]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) there is no 'apply' builtin in python3 also consider using PyObject_Call from the native python C api here...  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-06 16:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51925\">[51925]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) bytes object required here in python3, not str ... and in python2, bytes == str  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-06 14:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51924\">[51924]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) fall through if PyMapping_Check succeeds but not PyMapping_Keys  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-05 16:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51923\">[51923]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) python2/3 compat for isinstance types checking  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-05 15:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51922\">[51922]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) avoid deprication warning: assertEquals -&gt; assertEqual  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-05 09:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51921\">[51921]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) Py_SetProgramName takes a wchar_t string in python3  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-05 09:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51920\">[51920]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) make PyString_Check available for python 3 in collector.cpp  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-03 10:31</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51919\">[51919]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) python3 compatible prints  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-03 10:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51918\">[51918]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) fix whitespace mixed indentation (tabs / spaces)  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-03 10:17</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51917\">[51917]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6326\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>) allow passing in -DPYTHON_VERSION=3.x to cmake ... would probably be better to have a WANT_PYTHON3 or something, eventually. also print PYTHONLIBS_VERSION_STRING / PYTHON_VERSION_STRING status messages.  (By Carl Edquist )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2017-Sep-11 22:16", "status": "resolved", "created": "2017-Jun-28 13:57", "fixed_version": "2017-Jun-28 13:57", "broken_version": "v080703", "priority": "1", "subsystem": "PythonBinding", "assigned_to": "edquist", "derived_from": "#4146", "creator": "tannenba", "rust": "", "customer_group": "users", "visibility": "public", "notify": "bbockelm@cse.unl.edu tannenba@cs.wisc.edu tim@cs.wisc.edu johnkn@cs.wisc.edu edquist@cs.wisc.edu blin@cs.wisc.edu", "due_date": "20170721"}