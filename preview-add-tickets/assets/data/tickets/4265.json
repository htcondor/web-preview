{"id": 4265, "title": "Ticket #4265: CKPT_SERVER_HOST=127.0.0.1 doesn't work", "description": "<blockquote>\nGreg asked if there was a ticket for this and there wasn't, so here it is.\n\n<p>Background: in order to take advantage of a fast distributed filesystem (Lustre) on Stampede which promises ~100GB/s aggregate performance, we want to run a checkpoint server on every compute node, all of which write checkpoints \"locally\" to a common directory on Lustre.  Since individual compute nodes may come and go from our Condor pool, we cannot use the LAN IP address of the compute node because any given IP may be gone when we need to restore.  However, localhost will always work.\n\n</p><p>We know the many-ckpt-servers-writing-to-the-same-directory part of this works (we've tested it), but the if we set CKPT_SERVER_HOST=127.0.0.1, Condor fails to store or restore checkpoints.  Any non-loopback IP address works, leading us to believe that there is some kind of inappropriate special-case in the code for localhost.\n\n</p><p>This is urgent as we are unable to scale individual checkpoint servers to support more than ~30 simultaneous checkpoints[*], and would like to support many 100's or 1000's.\n\n</p><p>[*] The math: ~3GB ckpt per job + ~150MB/s local disk throughput on the checkpoint server + 10min timeout == &gt;30 simultaneous checkpointers causes all checkpointers to timeout before completion.  With Luste we should be able to support &gt;10k simultaneous checkpointers.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-Mar-18 11:05:04 by adesmet:</em> <br/>\n\nFor reference, current CKPT_SERVER_HOST=127.0.0.1; STARTER_CHOOSES_CKPT_SERVER=True causes everything to go to crap. The starter and shadow wedge indefinitely.\n\n<p>Alternate thought: if you're only using checkpointing, not remote I/O, you could potentially submit standard universe jobs as vanilla jobs using a wrapper that copies data in and out of Lustre. On the down side, you'd lose (and potentially have to reinvent) the logic for CPU-matching, but if the cluster in question is homogenous, it shouldn't matter.\n\n</p><p></p><hr/>\n<em>2014-Mar-18 11:12:14 by pfc:</em> <br/>\n\nInteresting.  Can you expand on the vanilla universe solution a little?\n\n<p></p><hr/>\n<em>2014-Mar-18 11:42:18 by pfc:</em> <br/>\n\nIs there any mechanism via which we could have stduniv jobs automatically go on hold immediately after being vacated?\n\n<p>We\u2019re asking because <strong>if</strong> we could do this, and you could fix just the \u201crestore\u201d half of the checkpointing-to-localhost problem, then we could use CKPT_SERVER_HOST=$(IP_ADDRESS), and run \u201ccondor_qedit -const 'LastCkptServer <code>!</code> \u201clocalhost\u201d' <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LastCkptServer\" title=\"Last Ckpt Server\">LastCkptServer</a></span> localhost &amp;&amp; condor_release -const  'LastCkptServer <code>?</code> \u201clocalhost\u201d' on the schedd every minute to fix the checkpoint server attr after every vacate\u2026.\n\n</p><p>We considered periodic_hold, but unless it gets called immediately whenever a job's state changes (which would be cool/clever), it wouldn't work because with any interval, there will be a gap between checks, within which the job could be rescheduled before we can do the qedit\u2026\n\n</p><p></p><hr/>\n<em>2014-Mar-18 13:37:21 by adesmet:</em> <br/>\n\nThis is roughly the idea, in terrible, terrible pseudo-code.  It's inspired by the dcmtcp_shim code:\n\n<p></p><pre>  $LUSTRE=/lustre/$something_unique\n</pre>\n\n<p></p><pre>  catch SIGINT:\n      note checkpoint was requested\n      kill -s TSTP $PROGRAM_PID\n</pre>\n\n<p></p><pre>  if $LUSTER/$PROGRAM.ckpt does not exist: # First run\n      $ARGUMENTS = original arguments\n  else: # Restart\n      cp $LUSTER/$PROGRAM.ckpt ./\n      $ARGUMENTS = -_condor_restart $PROGRAM.ckpt\n</pre>\n\n<p></p><pre>  # The setarch disables address space randomization\n  # The PID is saved in $PROGRAM_PID\n  run setarch x86_64 -L -R $PROGRAM $ARGUMENTS\n</pre>\n\n<p></p><pre>  wait for program to exit\n  if checkpoint was not requested:\n      return same exit status\n  else:\n      cp $PROGRAM.ckpt $LUSTRE/\n      exit\n</pre>\n\n<p></p><hr/>\n<em>2014-Mar-18 14:44:23 by gthain:</em> <br/>\n\nI think for the checkpoint server to advertise that it is listening on localhost, and only localhost, you also need to set\n\n<p>CKPT_SERVER.NETWORK_INTERFACE=127.0.0.1\n\n</p><p></p><hr/>\n<em>2014-Mar-18 16:24:16 by gthain:</em> <br/>\n\nnote that the shadow initiates the restore request to the checkpoint server, then tells the job to fetch the bytes from the ip address / port that the checkpoint server told the shadow to use.  So, I don't think this is going to work without some surgery.\n\n<p></p><hr/>\n<em>2014-Mar-19 13:12:40 by pfc:</em> <br/>\n\nWould it possible to hack in a special config variable (e.g., FORCE_LOCAL_CKPT_SERVERS=True) that forces the shadow to reply with \"localhost\" (and the default resstore port) instead of whatever it would normally say?\n\n<p>I know it's ugly, but it might (???) just be a few lines of code in the shadow...\n\n</p><p>If necessary I can try to take a look at the shadow code myself but it would probably be better if someone who knew the code wielded the rusty knife... ;)\n\n</p><p></p><hr/>\n<em>2014-Mar-19 17:40:38 by gthain:</em> <br/>\n\nHow about we force <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LastCkptServer\" title=\"Last Ckpt Server\">LastCkptServer</a></span> to be the host it is now running on at startup?\n\n<p></p><hr/>\n<em>2014-Mar-20 07:26:31 by pfc:</em> <br/>\n\nIf it solves the problem, I'm for it.  Anything that works!\n\n<p></p><hr/>\n<em>2014-Mar-20 11:29:49 by gthain:</em> <br/>\n\nPeter:\n\n<p>Can you download and try <a class=\"external\" href=\"ftp://ftp.cs.wisc.edu/condor/temporary/forligo/pfc.tgz\">ftp://ftp.cs.wisc.edu/condor/temporary/forligo/pfc.tgz</a>\n\n</p><p>This contains a standard universe shadow and condor_util that support a new knob,\n\n</p><p>ALWAYS_USE_LOCAL_CKPT_SERVER\n\n</p><p>set this to true to force any restores to always go through the machine the job is matched to.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Jun-02 14:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=40295\">[40295]</a></span>: Minor edit of 8.0.7 version history item; correct ticket number; add defn of new knob. <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4265\" onclick=\"get_ticket_and_populate_wrapper('4265'); return false;\" title=\"CKPT_SERVER_HOST=127.0.0.1 doesn't work\">#4265</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-15 16:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39954\">[39954]</a></span>: Document <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4265\" onclick=\"get_ticket_and_populate_wrapper('4265'); return false;\" title=\"CKPT_SERVER_HOST=127.0.0.1 doesn't work\">#4265</a></span> (By Greg Thain )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-24 10:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39692\">[39692]</a></span>: Allow LIGO to force all checkpoints to local ckpt server <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4265\" onclick=\"get_ticket_and_populate_wrapper('4265'); return false;\" title=\"CKPT_SERVER_HOST=127.0.0.1 doesn't work\">#4265</a></span> Only when knob ALWAYS_USE_LOCAL_CKPT_SERVER is true.  (By Greg Thain )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2014-Apr-16 10:21", "status": "defer", "created": "2014-Mar-18 10:43", "fixed_version": "2014-Mar-18 10:43", "broken_version": "v080004", "priority": "5", "subsystem": "DaemonsExecNode", "assigned_to": "adesmet", "derived_from": "", "creator": "pfc", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "pfcouvar@syr.edu, anderson@ligo.caltech.edu, gthain@cs.wisc.edu, adesmet@cs.wisc.edu,pcouvare@caltech.edu", "due_date": ""}