{"id": 3435, "title": "Ticket #3435: negotiator-side resource consumption with consumption policies", "description": "<blockquote>\nI've put together a draft implementation of two interlocking new capabilities:\n<ul>\n<li>configurable resource consumption policies (for what we currently call p-slots)\n</li><li>enhancement to the negotiator to allow multiple jobs to match against a single p-slot during a negotiation cycle\n</li></ul>\n\n<p>The draft currently lives on this topic branch on my github fork:\n</p><ul>\n<li><a class=\"external\" href=\"https://github.com/erikerlandson/htcondor/tree/V7_9-prototype-negside-pslot-splits\">https://github.com/erikerlandson/htcondor/tree/V7_9-prototype-negside-pslot-splits</a>\n</li></ul>\n\n<p>I wrote up a discussion and demonstration of the proposed features here:\n</p><ul>\n<li><a class=\"external\" href=\"http://erikerlandson.github.com/blog/2012/12/03/a-demonstration-of-negotiator-side-resource-consumption/\">http://erikerlandson.github.com/blog/2012/12/03/a-demonstration-of-negotiator-side-resource-consumption/</a>\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Motivation </h2>\n\n<p>Some advantages of negotiator-side consumption:\n</p><ul>\n<li>each match only charged for cost of resources consumed - cleaner relationship between quotas, share, slot weights and match costs (e.g. solves <span class=\"ticket\"><a class=\"active\" href=\"tktview?tn=3013\" title=\"Pslots prevent Condor from negotiating jobs on idle pool\">#3013</a></span>)\n</li><li>resources consumed where there is direct access to the centralized accounting logic for concurrency limits and accounting groups\n</li><li>resource constraint checking is just another kind of match requirement\n</li><li>not restricted to exact requirements match, as with scheduler-side multiple claiming\n</li></ul>\n\n<p>Configurable resource consumption policies:\n</p><ul>\n<li>consumption logic lives on resource ad: consistent and accessible everywhere, e.g. on both negotiator and startd\n</li><li>Generalizes MODIFY_REQUEST_EXPR_*\n</li><li>static slots become just a particular kind of consumption policy (you get everything, regardless of what you ask for)\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Requirements </h2>\n\n<p>resource consumption in matchmaking:\n</p><ul>\n<li>Support ability to match multiple jobs against a single resource ad (p-slot)\n</li><li>Resource limits must be respected\n</li><li>Use consumption policy that resides on resource ads, in a manner consistent with startd and any other contexts\n</li><li>Support extensible resources\n</li><li>match costing policy must sanely extend current slot weight logic\n</li><li>Properly respect all other current constraints and logic (quotas, submitter shares, concurrency limits, requirements expressions, preemption policies, etc)\n</li></ul>\n\n<p>consumption policies:\n</p><ul>\n<li>Support a configurable consumption policy for each resource (p-slot) ad.\n</li><li>Consumption policy should be respected consistently in every context where it is relevant.  Currently, this includes the startd claiming logic and negotiator matchmaking.\n</li><li>\"Legacy\" slots without a configured consumption policy should be supported in backward compatible \"mixed-pool\" fashion\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Proposal </h2>\n\n<p>Consumption policies\n</p><ul>\n<li>Each resource Xxx has a corresponding attribute on a resource ad called <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ConsumptionXxx\" title=\"Consumption Xxx\">ConsumptionXxx</a></span>\n<ul>\n<li><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ConsumptionXxx\" title=\"Consumption Xxx\">ConsumptionXxx</a></span> has a classad expression that is evaluated to obtain the amount of that resource a job/match will consume.  The scope 'target.' refers to a job ad\n</li><li>Example:   <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ConsumptionMemory\" title=\"Consumption Memory\">ConsumptionMemory</a></span> = quantize(target.RequestMemory, {128})\n</li></ul>\n</li><li>To be considered for consumption policy logic, an ad must have one of these attributes for every resource, including extensible resources.\n<ul>\n<li>configuration of consumption policies is now exposed to config file params (see below), with defaults\n</li></ul>\n</li><li>consumption policy logic is abstracted so it can be shared between startd, negotiator, etc\n<ul>\n<li>determine if a resource ad supports consumption policy\n</li><li>evaluate Consumption* to obtain resources\n</li><li>actually subtract resources from slot ad\n</li><li>.../condor_utils/consumption_policy.{h,cpp}\n</li></ul>\n</li><li>When (all) present, Consumption* expressions are used to determine the resources used while claiming a slot, instead of Requested* or _condor_Requested*\n<ul>\n<li>_condor_RequestedXxx still allowed to override value of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RequestedXxx\" title=\"Requested Xxx\">RequestedXxx</a></span> when evaluating <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ConsumptionXxx\" title=\"Consumption Xxx\">ConsumptionXxx</a></span>\n</li><li>MODIFY_REQUEST_EXPR_* are still applied to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RequestedXxx\" title=\"Requested Xxx\">RequestedXxx</a></span> prior to above\n</li></ul>\n</li><li>Configuration of consumption policies\n<ul>\n<li>CONSUMPTION_&lt;asset&gt; (applies to any slot in startd)\n<ul>\n<li>e.g.  CONSUMPTION_CPUS = quantize(target.RequestCpus, {1})\n</li><li>defaults:\n<ul>\n<li>CONSUMPTION_CPUS = quantize(target.RequestCpus, {1})\n</li><li>CONSUMPTION_MEMORY = quantize(target.RequestMemory, {128})\n</li><li>CONSUMPTION_DISK = quantize(target.RequestDisk, {1024})\n</li><li>extensibles: CONSUMPTION_XXX = ifthenelse(target.RequestXxx <code>?</code> undefined, 0, target.RequestXxx)\n</li></ul>\n</li></ul>\n</li><li>SLOT_TYPE_&lt;N&gt;_CONSUMPTION_&lt;asset&gt;\n<ul>\n<li>e.g.  SLOT_TYPE_2_CONSUMPTION_MEMORY = Memory\n</li></ul>\n</li></ul>\n</li><li>Configuration of slot weight expressions\n<ul>\n<li>SLOT_WEIGHT = &lt;expr&gt;\n<ul>\n<li>e.g.  SLOT_WEIGHT = Cpus\n</li><li>default is 'SLOT_WEIGHT = Cpus', as usual\n</li></ul>\n</li><li>SLOT_TYPE_&lt;n&gt;_SLOT_WEIGHT = &lt;expr&gt;\n<ul>\n<li>e.g.  SLOT_TYPE_2_SLOT_WEIGHT = floor(Memory / 25)\n</li></ul>\n</li></ul>\n</li><li>Example of consumption policy configurations:\n<ul>\n<li><a class=\"external\" href=\"https://gist.github.com/erikerlandson/4731965\">https://gist.github.com/erikerlandson/4731965</a>\n</li></ul>\n</li></ul>\n\n<p>negotiator-side resource consumption\n</p><ul>\n<li>To support negotiator-side claiming logic, p-slots now generalized to hold multiple claim ids\n<ul>\n<li>each match removes one id from the set during a cycle.\n</li><li>a legacy slot is detected and induces a set of size 1.\n</li><li>number of supported claims configurable per slot type, currently defaults to number of cpus\n</li></ul>\n</li><li>The code for computing asset consumption values, and deducting those assets from an ad, is factored and reused between startd and negotiator\n<ul>\n<li>.../condor_utils/consumption_policy.{h,cpp}\n</li></ul>\n</li><li>slot weight is generalized slightly to become 'match cost' (or alternatively 'claim cost')\n<ul>\n<li>match cost is <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SlotWeight\" title=\"Slot Weight\">SlotWeight</a></span> for legacy slots\n</li><li>for resources supporting consumption policy, match cost is computed as W(S) - W(S'), where W(S) is <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SlotWeight\" title=\"Slot Weight\">SlotWeight</a></span> evaluated on resource ad prior to deducting the resources consumed by a job ad, and W(S') is <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SlotWeight\" title=\"Slot Weight\">SlotWeight</a></span> evaluated after the deduction.\n</li></ul>\n</li><li>insufficient resources to satisfy a job's consumption is a new match requirement\n<ul>\n<li>consumption policy is now addressed as another facet of match constraint checking in matchmakingAlgorithm()\n</li></ul>\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Testing </h2>\n\n<p>Testing needs to cover the following categories of behavior:\n</p><ol>\n<li>respect for configured consumption policies\n<ol>\n<li>validate resources deducted from parent resources (p-slots)\n</li><li>granularity of resources allocated to claims (d-slots)\n</li><li>any default policies, if we go that way\n</li></ol>\n</li><li>negotiator side resource consumption\n<ol>\n<li>achieving multiple matches per resource during a negotiator cycle\n</li><li>correctness of resource management\n</li><li>resource limits as a matching constraint\n</li></ol>\n</li><li>compatability with legacy/mixed-pool resources\n<ol>\n<li>static slots\n</li><li>legacy p-slots\n</li></ol>\n</li></ol>\n\n<p><span class=\"section\"></span></p><h2>Effort </h2>\n\n<p></p><ul>\n<li>implementation\n<ul>\n<li>implementation is largely done, the main exceptions being\n<ul>\n<li>migration of negotiator resource constraints to matchmakingAlgorithm() (2 days)\n</li><li>default values for policies (1 day)\n</li></ul>\n</li></ul>\n</li><li>testing\n<ul>\n<li>initial testing will be by hand (5 days)\n</li><li>hand testing needs to be codified into regression testing environment (5 days)\n</li></ul>\n</li><li>doc (3 days)\n</li><li>review/feedback (all stages) (5 days?)</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<hr/>\n<em>2013-Mar-05 10:58:27 by johnkn:</em> <br/>\n\nBulk change of target version from v070904 to v070905 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2013-Apr-01 12:01:58 by tannenba:</em> <br/>\n\nI think we should merge this work into master near the start of the next developer series (aka v8.1.x) assuming the below conditions are met [discussed these items w/ both Miron and Matt]:\n\n<p></p><ol>\n<li>Little more explanation work on the design doc. While Erik did write a design doc for this work (thank you!), it is still somewhat hand-wavy. For example, even I do not fully understand the point on all of the \"motivation\" bullets; this is bad. I attached it below as \"erik_negotiator_plsot_spitting.docx\".\n\n<p></p></li><li>We convince ourselves there is a single knob to fully disable this execution path and have the code operate as it did before.\n\n<p></p></li><li>We convince ourselves that this mechanism does not inhibit our longer term strategic plan to empower the schedd. (I think we are already good here, but we should think it through to be certain...).\n\n<p></p></li><li>Usability - Some concerns over the number of knobs involved, making sure there are good defaults such that users do not have to consult the manual and do configuration in the typical case(s).\n</li></ol>\n\n<p></p><hr/>\n<em>2013-Apr-01 15:03:43 by matt:</em> <br/>\n\nWith inclusion in devel.next, it is critical that the semantics not be changed beyond the defined tests w/o explicit agreement.\n\n<p>Todd, which motivation bullets are not fully understood?\n\n</p><p></p><hr/>\n<em>2013-Apr-01 18:50:28 by eje:</em> <br/>\n\nRegarding (2), the feature is \"opt-in\" -- so legacy behavior holds, unless a startd is deliberately configured with a consumption policy.  The latest draft passed batlab, which I take as system-test verification, however it can also be verified during code review.\n\n<p></p><hr/>\n<em>2013-Apr-01 18:59:05 by eje:</em> <br/>\n\nRegarding knobs and defaults, all the new knobs have defaults (default vals are described in the 'Proposal' section above), so the feature should be easy to configure.\n\n<p>Regarding future schedd roadmapping, there is nothing here that would prevent future schedd functionalities.   In fact, the consumption policy logic might be tweaked in the future to allow a policy option like 'send entire p-slot to schedd' (and/or just use the legacy logic for that purpose)\n\n</p><p></p><hr/>\n<em>2013-Apr-11 12:01:25 by gthain:</em> <br/>\n\nThe current negotiator hierarchical group quota code doesn't work well with both accept_surplus and weighted slots.  It seems like this patch doesn't address that problem.\n\n<p></p><hr/>\n<em>2013-Apr-11 19:08:31 by eje:</em> <br/>\n\nThe reason surplus sharing doesn't play well with generalized slot weights is that it has to draw an equivalence between jobs and 'weights' (at least, in its current incarnation).\n\n<p>A way to solve that unit analysis problem is to define slot weights so that slot weights represent units of 'jobs able to be run against slot':\n\n</p><p><a class=\"external\" href=\"http://erikerlandson.github.io/blog/2012/11/15/rethinking-the-semantics-of-group-quotas-and-slot-weights-claim-capacity-model/\">http://erikerlandson.github.io/blog/2012/11/15/rethinking-the-semantics-of-group-quotas-and-slot-weights-claim-capacity-model/</a>\n\n</p><p>So, this ticket \"solves\" the problem by enabling a consumption policy to be matched up with a slot weight in such a way as to make weights equal jobs, which makes it possible to ensure that surplus sharing logic plays properly with slot weights.\n\n</p><p>Really, this is just a generalization of the logic that was already present for counting Cpus:\n</p><div class=\"code\">\n<pre class=\"code\">int count_effective_slots(ClassAdListDoesNotDeleteAds&amp; startdAds, ExprTree* constraint)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2013-Apr-11 19:20:54 by eje:</em> <br/>\n\nI had a request to verify that consumption policies can operate when schedd-side \"leftover\" slot splitting is also enabled.\n\n<p>My initial test was to create a consumption policy that granted the entire slot.  My original theory was that the schedd could split that, however I had forgotten that I designed consumption policies to operate consistently across the negotiator and startd.  So the initial negotiator match obtains its claim, that represents all the resource assets.  The schedd has no problem attempting to further allocate leftovers, however there <strong>are</strong> no leftovers, as the first job acquires them all with its claim.\n\n</p><p>The first test did demonstrate that nothing pathological happens.  It just means that the negotiator will tend to acquire the matches/claim first, and the schedd will generally have nothing further to do in that case.\n\n</p><p>However, I did do a further test where I declared two startds.  Each startd has a p-slot, but only one has a consumption policy, and the other operates in traditional mode.  This test demonstrates that the system can operate in \"mixed pool\" mode, where some startds advertise traditional slots, and others can advertise slots with consumption policies, and the system correctly handles both.\n\n</p><p>the configuration was:\n</p><div class=\"code\">\n<pre class=\"code\"># spoof some cores\nNUM_CPUS = 5\n\nSTARTD.ST1.STARTD_LOG = $(LOG)/Startd_1_Log\nSTARTD.ST1.STARTD_NAME = st1\nSTARTD.ST1.ADDRESS_FILE = $(LOG)/.startd_1_address\nSTARTD_ST1_ARGS = -f -local-name ST1\nSTARTD_ST1 = $(STARTD)\n\nSTARTD.ST2.STARTD_LOG = $(LOG)/Startd_2_Log\nSTARTD.ST2.STARTD_NAME = st2\nSTARTD.ST2.ADDRESS_FILE = $(LOG)/.startd_2_address\nSTARTD_ST2_ARGS = -f -local-name ST2\nSTARTD_ST2 = $(STARTD)\n\nUSE_PROCD = FALSE\nDAEMON_LIST = MASTER, COLLECTOR, NEGOTIATOR, SCHEDD, STARTD_ST1, STARTD_ST2\n\n# configure an aggregate resource (p-slot) to consume\nSLOT_TYPE_1 = 100%\nSLOT_TYPE_1_PARTITIONABLE = True\n# declare multiple claims for negotiator to use\n# may also use global: NUM_CLAIMS\nSLOT_TYPE_1_NUM_CLAIMS = 20\nNUM_SLOTS_TYPE_1 = 1\n\n# turn on schedd-side claim splitting to test with a consumption policy\nCLAIM_PARTITIONABLE_LEFTOVERS = True\n\n# turn this off to demonstrate that consumption policy will handle this kind of logic\nMUST_MODIFY_REQUEST_EXPRS = False\n\n# configure a consumption policy.   This policy is modeled on\n# current 'modify-request-exprs' defaults:\n# \"my\" is resource ad, \"target\" is job ad\n# startd-wide consumption policy config\n# defaults for cpus/memory/disk consumption\nSTARTD.ST2.CONSUMPTION_POLICY = True\n\n# a consumption policy where match consumes whole slot each time\nSTARTD.ST2.CONSUMPTION_CPUS = 2\nSTARTD.ST2.CONSUMPTION_MEMORY = 32\nSTARTD.ST2.CONSUMPTION_DISK = 128\n\n# keep slot weights enabled for match costing\nNEGOTIATOR_USE_SLOT_WEIGHTS = True\n\n# weight used to derive match cost: W(before-consumption) - W(after-consumption)\nSlotWeight = Cpus\n\n# for simplicity, turn off preemption, caching, worklife\nCLAIM_WORKLIFE=0\nMAXJOBRETIREMENTTIME = 3600\nPREEMPT = False\nRANK = 0\nPREEMPTION_REQUIREMENTS = False\nNEGOTIATOR_CONSIDER_PREEMPTION = False\nNEGOTIATOR_MATCHLIST_CACHING = False\n\n# verbose logging\nALL_DEBUG = D_FULLDEBUG\n\nNEGOTIATOR_INTERVAL = 300\nSCHEDD_INTERVAL\t= 15\n</pre></div>\n\n\n<p>spin up the pool, and verify that there are two p-slots:\n</p><div class=\"code\">\n<pre class=\"code\">$ condor_status\nName               OpSys      Arch   State     Activity LoadAv Mem   ActvtyTime\n\nslot1@st1@localhos LINUX      X86_64 Unclaimed Idle      0.500 1897  0+00:00:04\nslot1@st2@localhos LINUX      X86_64 Unclaimed Idle      0.460 1897  0+00:00:04\n                     Total Owner Claimed Unclaimed Matched Preempting Backfill\n\n        X86_64/LINUX     2     0       0         2       0          0        0\n\n               Total     2     0       0         2       0          0        0\n</pre></div>\n\n\n<p>Now submit 10 jobs:\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\ncmd = /bin/sleep\nargs = 300\nshould_transfer_files = if_needed\nwhen_to_transfer_output = on_exit\nqueue 10\n</pre></div>\n\n\n<p>You should see three match-events in the negotiator:\n</p><div class=\"code\">\n<pre class=\"code\">$ grep Matched NegotiatorLog\n04/11/13 16:57:36       Matched 1.0 none.user0000@localdomain &lt;10.0.1.3:52463&gt; preempting none &lt;10.0.1.3:50396&gt; slot1@st1@localhost\n04/11/13 16:57:36       Matched 1.1 none.user0000@localdomain &lt;10.0.1.3:52463&gt; preempting none &lt;10.0.1.3:54095&gt; slot1@st2@localhost\n04/11/13 16:57:36       Matched 1.2 none.user0000@localdomain &lt;10.0.1.3:52463&gt; preempting none &lt;10.0.1.3:54095&gt; slot1@st2@localhost\n</pre></div>\n\n\n<p>Notice that only one match can occur against the \"traditional\" p-slot slot1@st1@localhost, but two matches are allowed against slot1@st2@localhost, since its consumption policy consumes 2 cpus per match and it has 5 cpus.\n\n</p><p>However, the schedd can use leftover-splitting on slot1@st2@localhost, so it will result in 7 total jobs running.  Five on slot1@st1, and two against slot1@st2:\n</p><div class=\"code\">\n<pre class=\"code\">[eje@rorschach grid]$ cchist condor_q RemoteHost\n      5 slot1@st1@localhost\n      2 slot1@st2@localhost\n      3 undefined\n     10 total\n</pre></div>\n\n<hr/>\n<em>2013-Apr-22 11:40:52 by johnkn:</em> <br/>\n\nBulk change of target version from v070905 to v070906 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2013-Jun-14 11:18:04 by tannenba:</em> <br/>\n\nThe merge of this code into master is pending that eje has time to work on the rest of the outstanding items in the design document; most notably regression tests, documentation.  I can help with this, but the bulk of the effort will have to come from the contributor (eje).\n\n<p>Re regression tests, I think we should start by listing out five or so user scenarios that are anticipated.  What user scenarios does this patch hopefully enable that the user could not do before?  Off the top of my head (not saying these are ones we want, but to give the flavor):\n\n</p><p></p><ul>\n<li>user wants to use concurrency limits alongside pslots; test showing behavior A with resource consumption disabled, and showing (hopefully more desirable) behavior B with resource consumption enabled.\n\n<p></p></li><li>user wants matches to be breadth first across multiple servers running pslots\n\n<p></p></li><li>user does not want any of this functionality at all (knob to disable this codepath completely - p.s. what is the knob to do this?)\n</li></ul>\n\n<p>Before documentation, we should think hard about terminology to prevent terminology bloat and other confusion.  I.e., for user documentation purposes, do we really want to introduce a new term/concept ('resource consumption'), or should we describe it in broader strokes using already established terminology such as negotiator pslot awareness ?\n\n</p><p></p><hr/>\n<em>2013-Jun-17 14:25:27 by tannenba:</em> <br/>\n\nIMO, this code was merged a bit prematurely (not sure why) from\n<code>V8_X-gittrac_3681-branch</code> to <code>master</code> branch.  It was targeted for v8.1.2 on purpose (as opposed to v8.1.0 or v8.1.1) to allow time for code review and regression test work as per design.  Looks like it was merged thinking it should be released in v8.1.0.\n\n<p></p><hr/>\n<em>2013-Jul-17 09:53:03 by johnkn:</em> <br/>\n\ncommit <span class=\"chng\"><a href=\"chngview?cn=36576\">[36576]</a></span> was causing frequent crashes of the STARTD in CHTC, so it was reverted from the V8_1_0-branch.\n\n<p>The crash appears to be caused by late references to deleted Claim objects via the r_claims member. this is a typical stack trace for the crash, it doesn't always crash here however.\n</p><div class=\"code\">\n<pre class=\"code\">/usr/lib64/condor/libcondor_utils_8_1_0.so(dprintf_dump_stack+0x12d)[0x7f71b93a401d]\n/usr/lib64/condor/libcondor_utils_8_1_0.so(+0x130992)[0x7f71b93b0992]\n/lib64/libpthread.so.0[0x31d440f500]\n/lib64/libc.so.6[0x31d413259f]\ncondor_startd(Resource::publish_private(compat_classad::ClassAd*)+0xdb)[0x4480fb]\ncondor_startd(Resource::publish_for_update(compat_classad::ClassAd*, compat_classad::ClassAd*)+0x44)[0x44b744]\ncondor_startd(Resource::do_update()+0x3f)[0x44ba9f]\n/usr/lib64/condor/libcondor_utils_8_1_0.so(TimerManager::Timeout(int*, double*)+0x1a1)[0x7f71b94c2071]\n/usr/lib64/condor/libcondor_utils_8_1_0.so(DaemonCore::Driver()+0x751)[0x7f71b94d7e41]\n/usr/lib64/condor/libcondor_utils_8_1_0.so(dc_main(int, char**)+0x1234)[0x7f71b94c5ed4]\n/lib64/libc.so.6(__libc_start_main+0xfd)[0x31d401ecdd]\n</pre></div>\n\n\n<p>the design of the r_claims member is the problem here.  It should <strong>not</strong> be a set of Claims, one of which is also pointed to by the other members of the Resource.  A Claim is a heavy data structure, but the only thing needed here is a set of claim ID's that haven't yet been inserted into a Claim object.\nA <code>StringList</code> would be the appropriate data structure for this purpose.\n\n</p><p></p><hr/>\n<em>2013-Jul-27 17:07:32 by eje:</em> <br/>\n\nnew topic branch including fix for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3792\" title=\"Claim handling for consumption policies causes crash in startd\">#3792</a></span> is: V8_1-gt3792-startd-crashes-fix\n\n<p>Also includes a tweak to accountant logic that enables consumption policies to work smoothly with both accounting groups and concurrency limits, and a new regression test for concurrency limits and accounting groups functionality with consumption policies.\n\n</p><p></p><hr/>\n<em>2013-Aug-09 12:25:46 by johnkn:</em> <br/>\n\nREVIEW:\nThe memory use after free problem (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3792\" title=\"Claim handling for consumption policies causes crash in startd\">#3792</a></span>) appears to be fixed, but in a way that is more wasteful and more fragile than recommended.\n\n<p>The r_claims member of the Resource object it still a set of Claim() objects rather than a <code>StringList</code> of claim ids. This is bad because a Claim is a heavy object. But it's use here is merely used as a holder for a ClaimId.id() for publication/comparison and later insertion into the current Claim object. Use of Claim here is here is dangerous because methods in the Claim object can call get_by_any_id() in the <code>ResMgr</code> object which can delete a Claim object depending on what ID is passed.  This is not how you were told to fix the problem, and your alternative solution is more code, more memory usage and less stable than what was recommended.\n\n</p><p>changes to slot_builder.cpp and resattributes.h serve no purpose that I can determine.\n\n</p><p>The change of <code>ClaimIdHash</code> from a <code>HashTable</code> to a map of sets is also gratituous. It will be better to leave the type of <code>ClaimIdHash</code> alone and allow the right hand side to be the same as the contents of ATTR_CLAIM_ID_LIST. Many of the changes in the matchmaker exist only to account for the unnecessary change of the type of <code>ClaimIdHash</code>.  This will also make changes to the matchmaker a bit more localized.\n\n</p><p></p><hr/>\n<em>2013-Aug-13 16:20:38 by eje:</em> <br/>\n\nsummary of some email discussion:\n\n<p></p><div class=\"verbatim\">\n<pre>&gt;    +The r_claims member of the Resource object it still a set of Claim()\n&gt;    objects rather than a =StringList= of claim ids. This is bad because a\n&gt;    Claim is a heavy object. But it's use here is merely used as a holder for\n&gt;    a ClaimId.id() for publication/comparison and later insertion into the\n&gt;    current Claim object.\n</pre></div>\n\n\n<p>Although claims are \"heavy\", they aren't enormous (my estimate was a few kB), and there aren't a very large number of them.  It defaults to the number of cores, and in general represents the maximum number of expected jobs to be running on a machine.  If <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span> isn't enabled, r_claims is empty.   My chief motivation for doing the way I did was that it works using the current conventions and machinery -- that is, a slot stores its claim structure(s), and an incoming claim request initiates a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ResMgr\" title=\"Res Mgr\">ResMgr</a></span> search over {slots}X{claims} for the one that matches the incoming request.  So doing it this way only required a localized gengeralization to (optionally) searching an additional source of claims: r_claims.  The fix on <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3792\" title=\"Claim handling for consumption policies causes crash in startd\">#3792</a></span> just cleaned up the logic to make sure that the same claim doesn't reside on both r_claims and r_cur simultaneously.  Although this can induce a situation where claims could get constructed/destructed that aren't ever used, it's not something that happens frequently, or in a tight inner loop.  The impact is small, and only happens if one wants to use the new consumption policy feature.\n\n</p><p></p><div class=\"verbatim\">\n<pre>&gt;    +changes to slot_builder.cpp and resattributes.h serve no purpose that I\n&gt;    can determine.\n</pre></div>\n\n\n<p>The purpose of those mods was to enable slots constructed with zero-valued resource assets.  It's a feature of consumption policies that, since different resources can drive the policy depending on configuration, other resources may be zero, and never be consumed.  (This property is also exercised on the <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span> regression tests).\n\n</p><p></p><div class=\"verbatim\">\n<pre>&gt;    +The change of =ClaimIdHash= from a =HashTable= to a map of sets is also\n&gt;    gratituous.\n</pre></div>\n\n\n<p>To support multiple matches against a single slot, it was necessary to generalize the rhs of the mapping to contain multiple claims.  Since I had to modify the structure definition, I just took the opportunity to migrate to a standard STL container while I was doing it.\n\n</p><p></p><div class=\"verbatim\">\n<pre>&gt; It's the CURRENT claim object that that is being\n&gt; destroyed there.   The state machine that is the STARTD is very complex,\n&gt; so it's important to write code that doesn't make too many assumptions\n&gt; about calling order.\n</pre></div>\n\n\n<p>The reason this works cleanly is that for p-slots, r_cur doesn't actually represent a live claim.  Instead, r_cur is handed off to a d-slot, and the d-slot is the actual holder of that claim.  Then r_cur is replaced with a new claim-structure on the p-slot, in preparation for the next claim request.  Effectively, I just added another bucket of claims that a p-slot can hand off to the d-slot.\n\n</p><p></p><hr/>\n<em>2013-Oct-10 17:42:17 by tannenba:</em> <br/>\n\nSquash commit into master for v8.1.2.  Documentation still needs work (no version history, nowhere does it explain what Consumption Policies actually are or how/why you'd want to use them, etc), so moving to docpending.\n\n<p></p><hr/>\n<em>2013-Oct-22 11:22:51 by eje:</em> <br/>\n\nHere is a draft of Consumption Policies exposition:\n<a class=\"external\" href=\"https://htcondor-wiki.cs.wisc.edu/index.cgi/wiki?p=ConsumptionPolicies\">https://htcondor-wiki.cs.wisc.edu/index.cgi/wiki?p=ConsumptionPolicies</a></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3792\" title=\"Claim handling for consumption policies causes crash in startd\">#3792</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nClaim handling for consumption policies causes crash in startd</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-29 13:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=38013\">[38013]</a></span>: minimal documentation for new consumption policy feature <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-10 17:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37815\">[37815]</a></span>: Add support for Consumption Policies, aka negotiator slot splits. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span> Squashed commit of the following:\u00a0[...]\n (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-03 14:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37758\">[37758]</a></span>: Disable classad caching on consumption policy unit and system tests to workaround interaction between caching and calls to quantize() where 2nd arg is a list <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span>  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-01 16:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37740\">[37740]</a></span>: better consumption policy expressions for static slot emulation (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span>)  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-01 16:24</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37739\">[37739]</a></span>: Consumption policy based matches fail if CP expressions do not properly evaluate to a non-negative value, or if all CP expressions evaluate to zero (no resources of any kind consumed) (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span>)  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-01 16:23</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37738\">[37738]</a></span>: Fix for logic errs caused by optimization of job ad Requirements expr (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span>)  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-01 16:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37737\">[37737]</a></span>: Fix logic error in cp_override_requested() that could create RequestXXX attributes which did not originally exist (<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span>) Conflicts: src/condor_utils/consumption_policy.cpp  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-27 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37026\">[37026]</a></span>: Support consumption policies and multiple matches against partitionable slots ===GT:Fixed=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3792\" title=\"Claim handling for consumption policies causes crash in startd\">#3792</a></span>  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jun-14 10:31</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=36576\">[36576]</a></span>: Support for Consumption Policies and Negotiator Resource Consumption <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3435\" title=\"negotiator-side resource consumption with consumption policies\">#3435</a></span>  (By Erik Erlandson )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2013-Oct-31 15:14", "status": "resolved", "created": "2013-Jan-11 13:36", "fixed_version": "2013-Jan-11 13:36", "broken_version": "v070900", "priority": "2", "subsystem": "DaemonsCM", "assigned_to": "smoler", "derived_from": "#2826", "creator": "eje", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu, tstclair@redhat.com, eje@cs.wisc.edu, tannenba@cs.wisc.edu, gthain@cs.wisc.edu, dan@hep.wisc.edu", "due_date": ""}