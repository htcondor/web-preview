{"id": 1069, "title": "Ticket #1069: Schedd shows no responsiveness during negotiation", "description": "<blockquote>\nThe current negotiation cycle involves a single connection from the Negotiator to the Schedd, on which all jobs and matches are communicated. During the lifetime of the connection, the Schedd and Negotiator are unresponsive to user commands and other operations.\n\n<p>For the Negotiator, this is not a huge issue. It's primary function is to perform negotiation cycles. User commands requiring the Negotiator are condor_q -better-analyze and condor_userprio.\n\n</p><p>For the Schedd, this is a significant issue. The primary function for the Schedd is to accept and manage jobs. User commands effected are condor_submit (critical) and condor_q (less critical). Normal operation includes communication with Shadow processes and Startds. Loss of condor_submit functionality is a hindrance to user experience and burden to automated systems submitting to the Schedd. Loss of communication with Shadow processes and Startds can result in failures that effect throughput and overall system health.\n\n</p><p>For the Schedd, this issue can be resolved by allowing the Schedd to re-enter select during negotiation. Also, the negotiation protocol could be modified to become more asynchronous in general.\n\n</p><p><span class=\"section\"></span></p><h2>Plan </h2>\n\n<p>Miron wants just the following:\n\n</p><p></p><ul>\n<li>Schedd's negotiation loop is changed to be asynchronous.\n\n<p></p></li><li>Schedd must support receiving matches \"out of the blue\", not just a match for the most recent job that was sent to the matchmaker.\n</li></ul>\n\n<p>Miron wants to see numbers showing the effect of this change before considering further changes, such as batching of job requests.\n\n</p><p>As we discussed, this plan is expected to reduce time spent by the schedd in negotiation, but it will likely <em>increase</em> time spent by the negotiator, since the negotiator may have to wait longer to get the next job from the schedd.\n\n</p><p><span class=\"section\"></span></p><h2>Results </h2>\n\n<p>I made the schedd's negotiation loop asynchronous.  I then ran simple tests against the ghost pool (7k slots) timing how much time is consumed in the schedd and the negotiator when matching 1000 jobs.\n\n</p><p><table border=\"1\" cellspacing=\"0\">\n<tbody><tr>\n<td>\nAsync</td>\n<td>\n<code>Matches</code></td>\n<td>\n<code>Jobs/Cluster</code></td>\n<td>\nSchedd Time</td>\n<td>\nNegotiator Time</td>\n</tr>\n\n<tr>\n<td>\nno   </td>\n<td>\n1000     </td>\n<td>\n1000          </td>\n<td>\n10s        </td>\n<td>\n30s            </td>\n</tr>\n\n<tr>\n<td>\nyes  </td>\n<td>\n1000     </td>\n<td>\n1000          </td>\n<td>\n10s        </td>\n<td>\n70s            </td>\n</tr>\n\n<tr>\n<td>\nno   </td>\n<td>\n1000     </td>\n<td>\n10            </td>\n<td>\n330s       </td>\n<td>\n350s           </td>\n</tr>\n\n<tr>\n<td>\nyes  </td>\n<td>\n1000     </td>\n<td>\n10            </td>\n<td>\n10s        </td>\n<td>\n390s           </td>\n</tr>\n\n</tbody></table>\n</p><p></p><ul>\n<li>Jobs/Cluster: number of jobs in each auto cluster\n</li><li>Schedd Time: time in which schedd was solely engaged in negotiation\n</li><li>Negotiator Time: time from start to stop of a negotiation cycle (in all cases, about 20s of this was spent pulling ads from the collector)\n</li></ul>\n\n<p>Additional tests were run with the schedd having to work harder.  However, due to the need for more memory, I had to switch schedd machines.  The previous tests were done with the schedd running on my laptop.  The following tests were done with the schedd running on a server-class machine (c158.chtc.wisc.edu).\n\n</p><p>In conducting the following tests, I also discovered a scaling problem in auto clustering <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1665\" title=\"search for existing auto cluster is O(N)\">#1665</a></span>.  The following results are with the patch for that problem applied in both the sync and async cases.\n\n</p><p></p><div class=\"verbatim\">\n<pre>jobs in queue: 100k\nMAX_JOBS_RUNNING: 1000\ncondor_q activity: 10/min\n</pre></div>\n\n\n<p><table border=\"1\" cellspacing=\"0\">\n<tbody><tr>\n<td>\nAsync</td>\n<td>\n<code>Matches</code></td>\n<td>\n<code>Jobs/Cluster</code></td>\n<td>\nSchedd Time</td>\n<td>\nNegotiator Time</td>\n</tr>\n\n<tr>\n<td>\nno   </td>\n<td>\n1000     </td>\n<td>\n10            </td>\n<td>\n260s       </td>\n<td>\n280s           </td>\n</tr>\n\n<tr>\n<td>\nyes  </td>\n<td>\n1000     </td>\n<td>\n10            </td>\n<td>\n11s        </td>\n<td>\n300s           </td>\n</tr>\n\n<tr>\n<td>\nno   </td>\n<td>\n1000     </td>\n<td>\n1             </td>\n<td>\n3100s      </td>\n<td>\n3100s          </td>\n</tr>\n\n<tr>\n<td>\nyes  </td>\n<td>\n1000     </td>\n<td>\n1             </td>\n<td>\n16s        </td>\n<td>\n3000s          </td>\n</tr>\n\n</tbody></table>\n</p><p>Although condor_q queries were attempted at the same rate in both tests, the synchronous schedd was entirely unresponsive to these queries during negotiation, whereas the asynchronous schedd remained responsive during all but 9s of time when it was building the list of prioritized jobs.\n\n</p><p><span class=\"section\"></span></p><h2>Alternate Plan</h2>\n\n<p>After talking with Miron, the following plan of action was shelved for the time being.\n\n</p><p>Planned fix: Move towards an asynch negotiation cycle as described in attached paper below.\n\n</p><p><strong>Milestones</strong>\n\n</p><p></p><ol>\n<li>Dan becomes familiar w/ the proof-of-concept implementation. (1 day)\n\n<p></p></li><li>Merge proof-of-concept code into the master branch. (2 days)\n\n<p></p></li><li>Circuit Breakers (2 days)\n<ol>\n<li>Make certain the negotiator max negotation time breaker continues to work.\n</li><li>Add a breaker about the max number of resource requests per user, and a useful notification when this breaker trips.\n</li></ol>\n\n<p></p></li><li>Backwards compatibility. Be able to talk old synchronous schedd and new asynch schedds. (1 day)\n\n<p></p></li><li>Regression tests for circuit breakers (2 days)\n\n<p></p></li><li>Honor job priorities (3+ days?  Depends how we want to implement, currently unknown)\n\n<p></p></li><li>Fix match rejection reason, perhaps by asynchronously sending out \"failed match\" ads.  Not certain if this is important to fix immediately or not - may slow down flocking if we don't, since flock levels increment when we receive a negative match response from a negotiator. (3 days)\n\n<p></p></li><li>Test (3 days)</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<hr/>\n<em>2011-Jan-27 14:46:04 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Jan-28 08:26:16 by tstclair:</em> <br/>\n\nisn't async negotiation in 7.5.5?  does this ticket still make sense?\n\n<p></p><hr/>\n<em>2011-Jan-28 09:50:16 by danb:</em> <br/>\n\nI am marking this ticket as resolved.  More could be done to improve the negotiation protocol, but the specific problem of schedd responsiveness during negotiation has been largely solved by asynchronous negotiation.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1841\" title=\"Flocking broken under certain conditions post async-schedd merge\">#1841</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nFlocking broken under certain conditions post async-schedd merge</td></tr>\n</tbody></table>", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/220/cs739.pdf\">cs739.pdf</a>\n106445 bytes added by tannenba on 2010-Sep-10 19:02:31 UTC.\n<br/>\nAsynch matchmaking paper, describing implementation and performance of the proof-of-concept implementation<br/>\n</li><li><a href=\"attach_get/221/asynch_negotiation_patch\">asynch_negotiation_patch</a>\n44490 bytes added by danb on 2010-Sep-14 15:28:23 UTC.\n<br/>\nTodd's asynchronous negotiation project.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jan-07 10:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19879\">[19879]</a></span>: Fixed problem with flocking level getting decreased incorrectly. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1841\" title=\"Flocking broken under certain conditions post async-schedd merge\">#1841</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1069\" title=\"Schedd shows no responsiveness during negotiation\">#1069</a></span> The flocking level was decreased when no jobs were explicitly rejected even if the schedd wasn't given an opportunity to present all of its jobs.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-30 14:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19105\">[19105]</a></span>: Fixed a bug in asynchronous negotiation. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1069\" title=\"Schedd shows no responsiveness during negotiation\">#1069</a></span> The schedd could end up in an infinite loop when MAX_JOBS_RUNNING is reached.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-28 21:11</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25696\">[25696]</a></span>: Documented asynchronous negotiation. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1069\" title=\"Schedd shows no responsiveness during negotiation\">#1069</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-28 12:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19076\">[19076]</a></span>: Make negotiation asynchronous in the schedd. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1069\" title=\"Schedd shows no responsiveness during negotiation\">#1069</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-28 12:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19077\">[19077]</a></span>: Made dedicated scheduler use the asynchronous negotiation code. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1069\" title=\"Schedd shows no responsiveness during negotiation\">#1069</a></span> This eliminates duplication of protocol code between the main schedd and the dedicated scheduler.  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Jan-28 09:50", "status": "resolved", "created": "2009-Dec-16 12:39", "fixed_version": "2009-Dec-16 12:39", "broken_version": "v070000", "priority": "3", "subsystem": "Daemons", "assigned_to": "danb", "derived_from": "#1284", "creator": "matt", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu, tstclair@redhat.com, tannenba@cs.wisc.edu", "due_date": ""}