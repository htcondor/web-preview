{"id": 7187, "title": "Ticket #7187: Add tests for queue_with_itemdata", "description": "<blockquote>\nIn <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7064\" onclick=\"get_ticket_and_populate_wrapper('7064'); return false;\" title=\"Make queue_with_itemdata easier to user\">#7064</a></span>, we accidentally introduced a regression in <code>Submit.queue_with_itemdata</code> where itemdata could not longer be <code>None</code>.\n\n<p>There should be regression tests for this method, including call signatures like\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">sub.queue_with_itemdata(txn)\nsub.queue_with_itemdata(txn, 1)\nsub.queue_with_itemdata(txn, 1, None)\nsub.queue_with_itemdata(txn, 1, iter([{}]))\nsub.queue_with_itemdata(txn, 1, iter(sub.itemdata()))\nsub.queue_with_itemdata(txn, 1, iter(sub.itemdata(\"matching *.dat\")))\n</pre></div>\n\n\n<p>After the patch to make iter() optional, these should also work\n</p><div class=\"code\">\n<pre class=\"code\">sub.queue_with_itemdata(txn, 1, [])\nsub.queue_with_itemdata(txn, 1, [{}])\nsub.queue_with_itemdata(txn, 1, [1,7])\nsub.queue_with_itemdata(txn, 1, [ {a:1,b:2}, [4,8], [5,10] ])\n</pre></div>\n\n\n<p>and these cases should not crash, and have reasonable errors\n</p><div class=\"code\">\n<pre class=\"code\">sub.queue_with_itemdata(txn, 1, {})\nsub.queue_with_itemdata(txn, 1, {[]})\nsub.queue_with_itemdata(txn, 1, 7)\nsub.queue_with_itemdata(txn, 1, \"seven\")\n</pre></div>\n\n\n<p>i.e., all the basic weird edge cases of what you can pass as the itemdata.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Sep-13 11:27:04 by tlmiller:</em> <br/>\n\nFollows the test I was using.  It is not sufficient for this not to crash (and you can probably reduce the loop to 100, based on my testing, but not below that), but you need to investigate the resulting jobs and make sure 'component' is set correctly.\n\n<p>When testing just the first to submits, I used <code>condor_q -af component | sort | uniq -c</code> to help with that task.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">\n#!/usr/bin/python3\nimport gc\nimport htmap\nimport htcondor\n\ndescriptors = {\n    'JobBatchName': 'deep-super-echo',\n    'log': '/tmp/events',\n    'submit_event_notes': '$(component)',\n    'stdout': '/tmp/$(component).stdout',\n    'stderr': '/tmp/$(component).stderr',\n    'should_transfer_files': 'YES',\n    'when_to_transfer_output': 'ON_EXIT_OR_EVICT',\n    'transfer_output_files': '_htmap_transfer/,_htmap_user_transfer/$(component)',\n    'transfer_output_remaps': '\"$(component).out=/tmp/$(component).out\"',\n    'on_exit_hold': 'ExitCode =!= 0',\n    'initialdir': '/tmp',\n    '+component': '$(component)',\n    '+IsHTMapJob': 'True',\n    'universe': 'vanilla',\n    'executable': '/bin/sleep',\n    'arguments': '$(component)',\n    'request_memory': '128MB',\n    'request_disk': '100MB',\n    'transfer_input_files': '/tmp/func,/tmp/$(component).in,$(extra_input_files)'\n}\nitemdata = [{'component': str(idx)} for idx in range(10)]\nschedd = htcondor.Schedd()\n\nfor i in range(1000):\n    sub = htcondor.Submit(descriptors)\n    with schedd.transaction() as txn:\n        submit_result = sub.queue_with_itemdata( txn, 1, iter(itemdata) )\n        submit_result = sub.queue_with_itemdata( txn, 1, itemdata )\n        submit_result = sub.queue_with_itemdata( txn, 1, None )\n        submit_result = sub.queue_with_itemdata( txn, 1, 7 )\n        submit_result = sub.queue_with_itemdata( txn, 1, \"seven\" )\n        submit_result = sub.queue_with_itemdata( txn, 1, descriptors )\n        print( i )\n\nprint(\"OK\")\n</pre></div>\n\n\n<p></p><hr/>\n<em>2019-Sep-13 13:26:51 by tlmiller:</em> <br/>\n\nFurther notes (which shouldn't be anything you don't already know, but in case you forget anything over the weekend):\n\n<p></p><ul>\n<li>There's already some logic in the perl tests to help detect when a test segfaults (or otherwise doesn't exit cleanly), so for now you can concentrate on writing up the test cases and checking the resulting jobs.\n</li><li>TJ or I can help with applying that logic to this test, if necessary.\n</li><li>The regression tests currently only test against Python 2.7, so we'll want ot run the test manually anyway (against Python 3).  We'd like to make the tests in 8.9.4 run against Python 3, so that's the deadline for finishing the full automation.\n</li></ul>\n\n<p></p><hr/>\n<em>2019-Sep-16 17:06:46 by jpatton:</em> <br/>\n\nI've got code that reliably segfaults in <a class=\"file\" href=\"rlog?f=src/condor_tests/queue_itemdata_regression_test.py\">/src/condor_tests/queue_itemdata_regression_test.py</a> . Could definitely use some help with the Perl wrapping and automation.\n\n<p>There's no validation yet, though I have some code to do validation that I took out to get the segfault regression test in ASAP. The validation is a little tricky because of behavior changes between 8.9.2 and (proposed changes in) 8.9.3.\n\n</p><p></p><hr/>\n<em>2019-Sep-16 22:30:06 by bbockelm:</em> <br/>\n\n@Jason -\n\n<p>What are you testing against?\n\n</p><p>Not clear if you were testing against master (which never had fixes in it) or some 8.9.3 RC (which had fixes at various points in time...).\n</p><hr/>\n<em>2020-Apr-10 07:46:37 by tim:</em> <br/>\n\nBulk change of target version from v080906 to v080907 using ticket-target-mover.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Sep-16 17:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=57843\">[57843]</a></span>: First pass at test addressing <span class=\"ticket\"><a class=\"active\" href=\"/tickets?ticket=7187\" onclick=\"get_ticket_and_populate_wrapper('7187'); return false;\" title=\"Add tests for queue_with_itemdata\">#7187</a></span>  (By Jason Patton )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-Nov-09 12:31", "status": "active", "created": "2019-Aug-06 11:26", "fixed_version": "2019-Aug-06 11:26", "broken_version": "", "priority": "4", "subsystem": "PythonBinding", "assigned_to": "jpatton", "derived_from": "#7064", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu, bbockelm@morgridge.org, johnkn@cs.wisc.edu, jpatton@cs.wisc.edu", "due_date": ""}