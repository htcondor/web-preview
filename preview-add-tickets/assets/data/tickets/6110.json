{"id": 6110, "title": "Ticket #6110: link and unlink afs token keyrings when switching priv state", "description": "<blockquote>\nCurrently, we create a new session keyring and link a user's AFS tokens into that keyring every time we set_user_priv.  This ends up creating more sessions than is really needed.\n\n<p>Really, what we need is one session per process, where we link and unlink the token keyring into that session when changing priv state.\n\n</p><p>This is not a security issue, and while not technically a bug it could lead us to running out of keyrings (limited by kernel per-user) so we're doing this in the stable series.</p></blockquote>", "remarks": "<blockquote>\n<em>2017-Mar-01 10:43:19 by tim:</em> <br/>\n\nNo documentation needed\n\n<p></p><hr/>\n<em>2017-Mar-02 09:41:13 by tannenba:</em> <br/>\n\n<strong>CODE REVIEW</strong>\n\n<p>Looks like there are some problems with this code... as this is security related, we need to be very very careful....\n\n</p><p></p><ol>\n<li>Order of operations seems incorrect to me; specifically, we should be checking to see if the pid changed and creating a new session keyring earlier in the sequence of events.  For one example of how this appears broken, consider a daemon is in user_priv state and then forks: i) the daemon will lose AFS access as soon as the child process leaves user_priv state, and ii) the child will lose AFS access as soon as the parent leaves user_priv state.  Both problems occur because the parent and child are still sharing the same session keyring.  This algorithm seems like it is becoming complex enough it should fully written out, ideally in a comment block in uids.cpp.\n\n<p></p></li><li>Looks like uninitialized memory reads were introduced, which could, if we are unlucky, cause incorrect keyrings to be accessed.  For example, variable <code>PreviousSessionKeyringUID</code> is compared to <code>UserUid</code> before it is ever initialized.\n\n<p></p></li><li>Leaving PRIV_USER and entering PRIV_UNKNOWN state leaks root access. This was not the case before this patch.\n\n<p></p></li><li>Commit <span class=\"chng\"><a href=\"chngview?cn=50063\">[50063]</a></span> has no comments and it is completely non-obvious why this special code in the event log implementation is required.  I happen to know it has to do with the fact that AFS checks token authorization at every file write() while non-AFS file systems only check authorization at file open(), but never in 100 years could anyone figure that out from the patch itself.  Not even the commit message helps. Good commenting for non-obvious code, esp security code, is a must.\n\n<p></p></li><li>On Linux uid_t is unsigned, so in theory a value of -99 is a valid uid (although a very large one).  Thus seems like using -99 for the value of KEY_SPEC_INVALID_UID is questionable.  I'd suggest using -1 instead, as setreuid() man page claims that value is not allowed.  Also, do we need an explicit cast to be sure to correctly/safely compare a literal like \"-99\" to a uid_t?\n\n<p></p></li><li>Knobs, like USE_SESSION_KEYRING and friends, should be in the param table.\n</li></ol>\n\n<p></p><hr/>\n<em>2017-Mar-07 16:08:29 by zmiller:</em> <br/>\n\nTo address the problem of what to do when forking and then potentially unlinking another process' credentials, we decided to return to creating a new session every time we switch priv state.\n\n<p>Before committing, I wrote a test program that agressively creates new sessions.  It takes about 3 seconds to create 1 million new sessions, and they are agressively garbage collected by the kernel, so the overhead of session creation was deemed negligible.\n\n</p><p></p><hr/>\n<em>2017-Apr-21 14:29:19 by tannenba:</em> <br/>\n\n<strong>CODE REVIEW PART 2</strong>\n\n<p>The issues identified in the initial code review look to be fixed, thanks.\n\n</p><p>Documentation is still pending until such time that we make general AFS support available (currently it is still just for CERN's setup).\n\n</p><p>Resolving this ticket.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-19 15:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51893\">[51893]</a></span>: Because AFS requires a live token for all operations on a file (and not just at time of open()), we also need to switch to user priv to close() the user log. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6110\" title=\"link and unlink afs token keyrings when switching priv state\">#6110</a></span>  (By zmiller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Mar-08 10:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50286\">[50286]</a></span>: code cleanup to get rid of warnings. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6110\" title=\"link and unlink afs token keyrings when switching priv state\">#6110</a></span>  (By zmiller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Mar-07 15:47</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50283\">[50283]</a></span>: Return to creating new sessions instead of link/unlink and address other items from Todd's code review <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6110\" title=\"link and unlink afs token keyrings when switching priv state\">#6110</a></span>  (By zmiller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Mar-03 10:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50266\">[50266]</a></span>: Add USE_KEYRING_SESSIONS to param table. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6110\" title=\"link and unlink afs token keyrings when switching priv state\">#6110</a></span>  (By zmiller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Mar-02 11:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50261\">[50261]</a></span>: Add a comment explaining why the new code was added to switch to USER_PRIV for logging. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6110\" title=\"link and unlink afs token keyrings when switching priv state\">#6110</a></span>  (By zmiller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jan-26 15:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50064\">[50064]</a></span>: Manage keyrings more explicitly by linking and unlinking on every priv state change. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6110\" title=\"link and unlink afs token keyrings when switching priv state\">#6110</a></span>  (By zmiller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jan-26 15:24</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50063\">[50063]</a></span>: Set the correct priv state for writing events if using AFS tokens. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6110\" title=\"link and unlink afs token keyrings when switching priv state\">#6110</a></span>  (By zmiller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2017-Apr-21 14:30", "status": "resolved", "created": "2017-Jan-26 15:13", "fixed_version": "2017-Jan-26 15:13", "broken_version": "v080600", "priority": "1", "subsystem": "Security", "assigned_to": "zmiller", "derived_from": "#6032", "creator": "zmiller", "rust": "", "customer_group": "cern", "visibility": "public", "notify": "tannenba@cs.wisc.edu tim@cs.wisc.edu zmiller@cs.wisc.edu", "due_date": "20160126"}