{"id": 4990, "title": "Ticket #4990: condor_submit -dump produces ClassAd unparsable by python bindings", "description": "<blockquote>\nTom Downs writes:\n\n<p></p><div class=\"verbatim\">\n<pre>I am working on a script involving condor_submit and the HTCondor python\nbindings. I would like to check that the accounting group in a job classad\nis, in fact, a valid accounting group according to the schedd\n\nBefore submission, I would like to use \"condor_submit -dump\" to produce the\nclassad, import it in Python and do a simple comparison.\n\nDumping the submit file below (on SL6) produces a classad file with\ntrailing blank lines.\n\ne.g. condor_submit -dump - sleep.sub\n\n###\nExecutable = sleep.sh\nUniverse = vanilla\nError = sleep.err\nOutput = sleep.out\nLog = sleep.log\ngetEnv = True\nnotification = Complete\nnotify_user = tpdownes@gravity.phys.uwm.edu\n\nQueue 1\n###\n\nUnless these blank lines are removed, this python command will fail:\n\nad=classad.parseOld(open('bla'))\n\nI would call this a bug in both condor_submit and the python bindings, but\nmore so in the python bindings. It would also be nice if it were clarified\nwhether condor_submit should be producing the \"new\" ClassAd format.\n</pre></div>\n\n\n<p>And followed up with:\n\n</p><p></p><div class=\"verbatim\">\n<pre>   - Are you able to reproduce this bug?\n   - Where do you consider to be a bug?\n   - Will condor_submit always -dump in the \"old\" ClassAd format?\n   - Is this dump guaranteed to capture the full job ClassAd as would have\n   been submitted in the absence of the -dump option?\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2015-Apr-07 15:14:55 by tlmiller:</em> <br/>\n\nAssigned to you, TJ, because GregT thought you'd been working on condor_q -dump recently.  Feel free to make a subticket for fixing the Python bindings, if necessary, and assign it to whoever's appropriate.  Thanks.\n\n<p></p><hr/>\n<em>2015-Apr-07 16:58:44 by johnkn:</em> <br/>\n\nThis is not a bug because -dump is going to STDOUT. <strong>along with the normal output of condor_submit</strong>\n\n<p></p><hr/>\n<em>2015-Apr-07 20:35:45 by bbockelm:</em> <br/>\n\nNote you might want to use <code>classad.parseOldAds()</code> instead of <code>classad.parseOld()</code>.  The former method is more tolerant of excess newline characters (as that's the separator between multiple classads).\n\n<p></p><hr/>\n<em>2015-Apr-08 15:39:58 by johnkn:</em> <br/>\n\nTom Downes says: I am not able to comment on the ticket but condor_submit -dump goes to a file or stdout. Either way it produces a completely blank line before EOF.\n\n<p></p><hr/>\n<em>2015-Apr-08 15:48:56 by johnkn:</em> <br/>\n\nTom, a single blank line at the end of -dump is valid because multiple ads are (potentially) possible.  I would say that the bug is that python classad reader doesn't properly handle blank lines.  In fact, the python classad reader that expects to see only a single ad should handle any number of blank lines.\n\n<p></p><hr/>\n<em>2015-Apr-08 16:24:34 by johnkn:</em> <br/>\n\nOther questions:\n\n<p>Q: Will condor_submit always -dump in the \"old\" Classad format?\n\n</p><p>A: yes\n\n</p><p>Q: Is this dump guaranteed to capture the full job Classad as would have\n   been submitted in the absence of the -dump option?\n\n</p><p>A: no. The processing logic in condor_submit is a bit different. In particular it can spit out attributes would would never actually be sent to the schedd when you Queue N and N &gt; 1.  Any line of the submit file that refers to $(Cluster) or $(Process) will be wrong.\n\n</p><p>The new -dry-run argument for condor_submit (new for 8.3.5) is guraranteed to be the same as the attributes that would be sent to the schedd, with the exception of <code>ClusterId</code> which will be set to a simulated value - currently always 1 - so once again, any line in the submit file that refers to $(Cluster) will be wrong. -dry-run is closer to what you want than -dump is though.\n\n</p><p></p><hr/>\n<em>2015-Apr-13 19:42:08 by bbockelm:</em> <br/>\n\nHi TJ,\n\n<p>I'm a bit nervous about the posted patch.  That would accept something like:\n\n</p><p></p><div class=\"verbatim\">\n<pre>FOO = 1\n\nBAR = 2\n</pre></div>\n\n\n<p>and parse that as a single <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span>, right?  I think that input such as the above should be ignored - or only parsed into a single ad, <code>[FOO = 1;]</code>.\n\n</p><p>My preference would be to have the method only ignore trailing empty lines.  Thoughts?\n\n</p><p></p><hr/>\n<em>2015-Apr-14 09:59:58 by bbockelm:</em> <br/>\n\nAfter a discussion with TJ, here's the current proposal:\n\n<p></p><ul>\n<li>parse/parseOld is a flawed API because it isn't explicit about what to do in the presence of multiple classads.\n<ul>\n<li>For example, <code>parse</code> silently ignores text after the ad.  <code>parseOld</code> throws an exception.\n</li><li>This is made worse because old classads doesn't have a well-defined format; the semantics of empty lines depends on the context.  Sometimes they signify separators between multiple ads; sometimes they are ignored.\n</li></ul>\n</li><li>Accordingly, we propose to deprecate parse and replace with two new functions:\n<ul>\n<li><code>parseNext</code> takes a file-like object and returns the next ad, advancing the file pointer to the end of the next ad.\n</li><li><code>parseOne</code> takes a string and parses the entire string as one classad.  In the presence of multiple ads or blank space, continue to merge the ads together until the entire string is consumed.\n</li></ul>\n</li><li>Since old-style ads don't have a well-defined format, we should ignore any unparseable lines\u00a0in parseOldClassAds().  This will allow us to handle the output of the history file and <code>condor_q -g -l</code>.\n</li></ul>\n\n<p>While the functions will be implemented in the python library, they will be equivalent to the following python code:\n\n</p><p></p><div class=\"verbatim\">\n<pre>def parse(text):\n    warnings.warn(\"parse is deprecated; use parseAds instead.\", DeprecationWarning)\n    return classad.parse(text)\n\ndef parseOld(text):\n    warnings.warn(\"parseOld is deprecated; use parseAds instead.\", DeprecationWarning)\n    ad_iter = classad.parseOldAds(text)\n    return ad_iter.next()\n\ndef parseOldAds(fp):\n    warnings.warn(\"parseOldAds is deprecated; use parseAds(fp, old=True) instead.\", DeprecationWarning)\n    return classad.parseOldAds(fp)\n\ndef parseAds(fp, old=False):\n    if old:\n        classad.parseOldAds(fp)\n    else:\n        classad.parseAds(fp)\n\ndef parseNext(fp, old=False):\n    if isinstance(fp, types.StringType):\n        raise ValueError(\"parseNext must be used with a file-like object; to parse a string into an ad, use parseOne\")\n    if old:\n        ad_iter = classad.parseOldAds(fp)\n    else:\n        ad_iter = classad.parseAds(fp)\n    ad = ad_iter.next()\n    return ad\n\ndef parseOne(text, old=False):\n    if old:\n        ad_iter = classad.parseOldAds(text)\n    else:\n        ad_iter = classad.parseAds(text)\n    result = classad.ClassAd()\n    for ad in ad_iter:\n        result.update(ad)\n    return result\n</pre></div>\n\n\n<p></p><hr/>\n<em>2015-Apr-14 11:11:16 by johnkn:</em> <br/>\n\nI believe that parseOld should point you at parseOldAds instead of parseNext.  It's almost certainly what you really meant to use.\n\n<p></p><pre>    warnings.warn(\"parseOld is deprecated; use parseOldAds instead.\",\n</pre>\n\n<p></p><hr/>\n<em>2015-Apr-14 11:15:53 by johnkn:</em> <br/>\n\nAs long as we are changing things the naming here <code>parse</code> for new syntax and <code>parseOld</code> for old syntax is misleading.  the \"old\" syntax is almost always the correct choice, but the naming implies otherwise.\n\n<p></p><hr/>\n<em>2015-Jul-20 16:48:51 by tim:</em> <br/>\n\nIn writing up the documentation, I noticed that the following example no longer works:\n<div class=\"code\">\n<pre class=\"code\">&gt;&gt;&gt; import classad\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; fd = os.popen(\"condor_history -l -match 4\")\n&gt;&gt;&gt; ads = classad.parseAds(fd)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIOError: [Errno 29] Illegal seek\n&gt;&gt;&gt;\n</pre></div>\n\nIn addition, even if you tell it the type of class ads, it still doesn't work:\n<div class=\"code\">\n<pre class=\"code\">&gt;&gt;&gt; import classad\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; fd = os.popen(\"condor_history -l -match 4\")\n&gt;&gt;&gt; ads = classad.parseAds(fd, classad.Parser.Old)\n&gt;&gt;&gt; print [ad[\"ClusterId\"] for ad in ads]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIOError: [Errno 29] Illegal seek\n&gt;&gt;&gt;\n</pre></div>\n\nSo, it works on files. But, it no longer works on streams.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=5274\" onclick=\"get_ticket_and_populate_wrapper('5274'); return false;\" title=\"Python ClassAd parser cannot handle streams\">#5274</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nPython <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> parser cannot handle streams</td></tr>\n</tbody></table>", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/873/Python_classad_parse_allow_blank_lines.diff\">Python_classad_parse_allow_blank_lines.diff</a>\n572 bytes added by johnkn on 2015-Apr-13 21:49:06 UTC.\n<br/>\nI believe this patch would make classad.parseOld() tolerate blank lines.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Jul-21 12:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=45375\">[45375]</a></span>: edit new doc for change to python bindings classad parsing interface <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4990\" onclick=\"get_ticket_and_populate_wrapper('4990'); return false;\" title=\"condor_submit -dump produces ClassAd unparsable by python bindings\">#4990</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Jul-21 11:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=45368\">[45368]</a></span>: Documentation for <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4990\" onclick=\"get_ticket_and_populate_wrapper('4990'); return false;\" title=\"condor_submit -dump produces ClassAd unparsable by python bindings\">#4990</a></span>  (By Tim Theisen )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Jul-06 15:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=45219\">[45219]</a></span>: Revamp <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> parsing. <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4990\" onclick=\"get_ticket_and_populate_wrapper('4990'); return false;\" title=\"condor_submit -dump produces ClassAd unparsable by python bindings\">#4990</a></span> Replace old, inconsistent parsing methods (parse, parseOld, parseOldAds) with a set of functions that provide better semantics.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Jun-18 12:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=45096\">[45096]</a></span>: Revamp <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> parsing. <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4990\" onclick=\"get_ticket_and_populate_wrapper('4990'); return false;\" title=\"condor_submit -dump produces ClassAd unparsable by python bindings\">#4990</a></span> Replace old, inconsistent parsing methods (parse, parseOld, parseOldAds) with a set of functions that provide better semantics.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2015-Sep-22 15:55", "status": "defer", "created": "2015-Apr-07 15:13", "fixed_version": "2015-Apr-07 15:13", "broken_version": "", "priority": "5", "subsystem": "Tools", "assigned_to": "tim", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "downes@uwm.edu, johnkn@cs.wisc.edu, bbockelm@cse.unl.edu,pcouvare@caltech.edu", "due_date": ""}