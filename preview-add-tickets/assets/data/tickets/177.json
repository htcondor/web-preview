{"id": 177, "title": "Ticket #177: Incompatibility between 32/64bit Ckpt Server and Shadow", "description": "<blockquote>\nIf you are running a 32-bit OS on the shadow and a 64-bit OS on the ckpt server, or vice versa, things do not work.  See ticket for details.\n\n<p>Only work-around for now is for the poor admin to roll out 64-bit ckpt servers if they are rolling out 64-bit submit machines.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Feb-03 13:51:20 by psilord:</em> <br/>\n\nEeww... In looking at the code, it seems that this type of thing is prevalent in the checkpoint server codebase for a lot of the structure which go over the wire.\n\n<p>I'm thinking about trying to get the checkpoint server to detect when it receives a structure from the shadow whose size mismatches the compiled size of the structure, and then convert it (losing precision, which I can check for validity at run time) into the compiled time structure, and then do normal processing.\n\n</p><p></p><hr/>\n<em>2009-Feb-18 10:51:27 by psilord:</em> <br/>\n\nStalled because of debian port\n\n<p></p><hr/>\n<em>2009-Feb-18 14:04:35 by tannenba:</em> <br/>\n\nBe aware that ticket <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2\" onclick=\"get_ticket_and_populate_wrapper('2'); return false;\" title=\"Get Dan Forrests Std Univ stuff into the code\">#2</a></span> may have a solution for this issue...\n\n<p></p><hr/>\n<em>2009-Apr-02 14:43:28 by psilord:</em> <br/>\n\nOk, while deb 5 x86_64 stduniv is stalled, I'm working on this.\n\n<p></p><hr/>\n<em>2009-Apr-03 14:12:44 by psilord:</em> <br/>\n\nStalled again since deb 5 x86_64 came back online.\n\n<p></p><hr/>\n<em>2009-Apr-09 13:27:02 by psilord:</em> <br/>\n\nOk active again since I've completed <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=24\" onclick=\"get_ticket_and_populate_wrapper('24'); return false;\" title=\"Port Condor to Debian 5.0 (Lenny)\">#24</a></span>.\n\n<p></p><hr/>\n<em>2009-Apr-27 11:39:44 by psilord:</em> <br/>\n\nOk, I'm really working on this one now.\n\n<p></p><hr/>\n<em>2009-Apr-27 16:25:47 by psilord:</em> <br/>\n\nThere are 4 ports the checkpoint server listens upon:\n\n<p><table border=\"1\" cellspacing=\"0\">\n<tbody><tr>\n<td>\nProtocol Kind</td>\n<td>\nPort</td>\n</tr>\n\n<tr>\n<td>\nCKPT_SVR_STORE_REQ_PORT</td>\n<td>\n5651</td>\n</tr>\n\n<tr>\n<td>\nCKPT_SVR_RESTORE_REQ_PORT</td>\n<td>\n5652</td>\n</tr>\n\n<tr>\n<td>\nCKPT_SVR_SERVICE_REQ_PORT</td>\n<td>\n5653</td>\n</tr>\n\n<tr>\n<td>\nCKPT_SVR_REPLICATE_REQ_PORT</td>\n<td>\n5654</td>\n</tr>\n\n</tbody></table>\n</p><p>Here are the packets sent/recvd from the point of view of the server.\n\n</p><p>This chart ignores the Replication protocol, since it is dead code.\n<table border=\"1\" cellspacing=\"0\">\n<tbody><tr>\n<td>\nProtocol </td>\n<td>\nDirection</td>\n<td>\nPacket</td>\n<td>\n32-bit size in bytes</td>\n<td>\n64-bit size in bytes</td>\n</tr>\n\n<tr>\n<td>\nSERVICE  </td>\n<td>\nRecv</td>\n<td>\nservice_req_pkt</td>\n<td>\n576</td>\n<td>\n592</td>\n</tr>\n\n<tr>\n<td>\n<pre>\n         </pre>\n</td>\n<td>\nSent</td>\n<td>\nservice_reply_pkt</td>\n<td>\n32</td>\n<td>\n40</td>\n</tr>\n\n<tr>\n<td>\nSTORE    </td>\n<td>\nSent</td>\n<td>\nstore_reply_pkt</td>\n<td>\n8</td>\n<td>\n8</td>\n</tr>\n\n<tr>\n<td>\n<pre>\n         </pre>\n</td>\n<td>\nRecv</td>\n<td>\nstore_req_pkt</td>\n<td>\n328</td>\n<td>\n352</td>\n</tr>\n\n<tr>\n<td>\nSTORE datasock</td>\n<td>\nSent</td>\n<td>\n(char*)&amp; of an int</td>\n<td>\n4</td>\n<td>\n4</td>\n</tr>\n\n<tr>\n<td>\nRESTORE  </td>\n<td>\nSent</td>\n<td>\nrestore_reply_pkt</td>\n<td>\n16</td>\n<td>\n24</td>\n</tr>\n\n<tr>\n<td>\n<pre>\n         </pre>\n</td>\n<td>\nRecv</td>\n<td>\nrestore_req_pkt</td>\n<td>\n320</td>\n<td>\n336</td>\n</tr>\n\n</tbody></table>\n</p><p>Grr.... the initial read from the ckpt server is for a known size of the service_req_pkt structure. This means I need to tell the difference between a very slow connection, and nothing more to read on the packet when reading two different packet sizes. How annoying.\n\n</p><p></p><hr/>\n<em>2009-Apr-27 16:31:15 by psilord:</em> <br/>\n\nFinally, a breakthough. There is a ''ticket'' field in the initial request structures which is hardcoded to 1637102411. I can use that to disambiguate\nwhich packets are which.\n\n<p></p><hr/>\n<em>2009-Apr-28 16:08:43 by psilord:</em> <br/>\n\nThe main problem really arises because the u_lint typedef is an unsigned long, which is 32-bit on some platforms and 64 on others. However, there is more horror to behold. It seems there are two header files which define the same stuff, typedef2.h and server_typedefs.h. They have different definitions for u_lint, the former being unsigned long, and the latter being unsigned int. This makes it appear that part of the codebase gets one definition, and part of the codebase gets the other definition. This makes me weep, since now I have to disentangle this as well so I can understand how it'll impact the changes I need to make.\n\n<p></p><hr/>\n<em>2009-May-06 11:57:32 by psilord:</em> <br/>\n\nI'm having blood flecked foaming at the mouth due to my rage at the checkpoint server code.... how did this thing <strong>ever</strong> work?\n\n<p></p><hr/>\n<em>2009-May-13 15:47:18 by psilord:</em> <br/>\n\nOk, it seems I have the service_req_pkt being somewhat correctly decoded. Once I get the protocol handling the service port totally and completely finished with regards to the 32/64 bit compatibility codes. The other protocols will be MUCH easier to write and test.\n\n<p></p><hr/>\n<em>2009-May-14 15:13:21 by psilord:</em> <br/>\n\nThe SERVICE protocol in a 32-bit client/server pair coarsely works. I'm testing it now and stumbling over some detritus Sonny left in the codes in addition to some old nasty crap that various developers presumably discovered and then forcibly forgot about suddenly thereafter.\n\n<p>I figured out the \"Weird 0xaabbccdd\" message in the shadow logs... Lose 1d8 SAN.\n\n</p><p></p><hr/>\n<em>2009-May-18 12:55:09 by psilord:</em> <br/>\n\nSo, after an afternoon of debugging, it appears that on 64-bit clients, the ticket field, which is a 64 bit quantity, is encoded with htonl(). htonl() is <strong>defined</strong> to only work on 32-bit quantities, so, this means that for 64 bit values, only the low oerder 32 bits are actually changed to network order and back again on the other side.\n\n<p>This screwed me up since I had written a real 64 bit host-&gt;network and back again translator (and there are multiple \"standards\"--which I had thought I screwed up in implementing), and then wondered why it was not producing what I needed.\n\n</p><p></p><hr/>\n<em>2009-May-19 12:09:01 by psilord:</em> <br/>\n\nOk, I figured <span class=\"chng\"><a href=\"chngview?cn=14706\">[14706]</a></span> out. There was a math error on the pointer where I was putting the data I was reading off of the net.\n\n<p></p><hr/>\n<em>2009-May-19 16:46:59 by psilord:</em> <br/>\n\nOk, the service protocol is as good as it used to be. Onward to the store and restore protocols. When those work, then I can cross test.\n\n<p></p><hr/>\n<em>2009-May-20 16:38:51 by psilord:</em> <br/>\n\nOk, the STORE protocol is tentatively done. I need to test it on 32 and 64 bit platforms independently before I can continue though.\n\n<p></p><hr/>\n<em>2009-May-21 16:29:45 by psilord:</em> <br/>\n\nI coded the RESTORE protocol API, but haven't integrated it into server2.cpp yet.\n\n<p>Once I do, then I have to inspect some tiny little protocol places when the checkpoints are actually being transferred, but I don't think it'll be a problem.\n\n</p><p>After that, cross compatibility testing... almost there.\n\n</p><p></p><hr/>\n<em>2009-May-28 11:06:29 by psilord:</em> <br/>\n\nOk, the STORE, RESTORE, and SERVICE protocol packets are done. I did find that the sub-action of SERVICE:CKPT_SERVER_SERVICE_STATUS will send a file_state_info structure raw on the wire to the client. However, I don't think there is any means by which that code path may execute in the current Condor codebase.\n\n<p></p><hr/>\n<em>2009-May-28 11:50:21 by psilord:</em> <br/>\n\nOk, I finally see the light at the end of the tunnel.\n\n<p>I have seen this matrix work in an autodetecting fashion:\n\n</p><p><table border=\"1\" cellspacing=\"0\">\n<tbody><tr>\n<td>\n<pre>\n             </pre>\n</td>\n<td>\nCkpt Server 32 bit</td>\n<td>\nCkpt Server 64 bit</td>\n</tr>\n\n<tr>\n<td>\nClient 32 bit</td>\n<td>\n YES             </td>\n<td>\n YES             </td>\n</tr>\n\n<tr>\n<td>\nClient 64 bit</td>\n<td>\n YES             </td>\n<td>\n YES             </td>\n</tr>\n\n</tbody></table>\n</p><p>One important thing left for me to do is to warn when a 32 bit ckpt server gets a file size for a 64 bit checkpoint that is larger than it can deal with. The error message should inform the admin to install a 64 bit server.\n\n</p><p></p><hr/>\n<em>2009-May-28 16:41:16 by psilord:</em> <br/>\n\nI added the helpful error message, and converted some previous fast rejection code for a store or restore request in the case of the maximum number of transfers being exceeded in either case or in total.\n\n<p></p><hr/>\n<em>2009-May-29 14:36:17 by psilord:</em> <br/>\n\nThis feature is now code complete and passes smoke tests. I have two things to do: A) valgrind it on 64 and 32 bit machines and B) have a lucky person code review a +2000 line and -300 line diff. :)\n\n<p></p><hr/>\n<em>2009-Jun-01 13:40:06 by psilord:</em> <br/>\n\nOk, I valgrinded the executables both on x86 and x86_64 and both under the permutations that matter. I fixed the couple of minor things it found already.\nI just have to write a largish comment at the start of protocol.cpp, check it in, and this can go for review.\n\n<p></p><hr/>\n<em>2009-Jun-01 15:50:47 by psilord:</em> <br/>\n\nI wrote the comment. My branch now needs code review and merging.\n\n<p></p><hr/>\n<em>2009-Jun-10 11:28:57 by tannenba:</em> <br/>\n\nBeing code reviewed by jfrey, added him to notifications.\n\n<p></p><hr/>\n<em>2009-Jun-10 11:41:49 by jfrey:</em> <br/>\n\nI have reviewed Pete's code and have the following comments:\n\n<p></p><ul>\n<li>In recv_service_req_pkt() and friends, calls to net_read_with_timeout() don't check that the full number of bytes was read. A call can return success with a partial read if the client closes the connection early. Unlikely, especially for a legit client, but it would be good to add a check.\n\n<p></p></li><li>If gcc's padding in structs has changed as you say, then why isn't the client-side code affected?\n</li></ul>\n\n<p>I give a thumbs-up to merging the branch into V7_2-branch.\n\n</p><p></p><hr/>\n<em>2009-Jun-10 12:00:55 by psilord:</em> <br/>\n\nThe first one I'll fix before merging.\n\n<p>As for the second one:\n\n</p><p>It may have been in the past. I don't know. :) It'll take too much time to figure out. I do know that at least on sparc it changed around gcc 3.4. If the structure padding was changed but the site upgraded the checkpoint server in addition to the binaries, the site would never know.\n\n</p><p>As it stands now, the client code <strong>would</strong> be affected if the structure padding changed on linux.\n\n</p><p>I'd much rather fix the client side code base as well to pack the crap into the byte array for the packet. This would disassociate the structure alignment from the packet layout all together and we'd never have to worry about it again. Doing that however, might be a little work since it would be a bit of code juggling to get the client library to contain the structure packing interface so both the ckpt server and client could use it.\n\n</p><p>However, even if it does change on linux, we have a means in the server codes to deal with it so again only the server would have to be upgraded.\n\n</p><p></p><hr/>\n<em>2009-Jun-10 14:09:36 by psilord:</em> <br/>\n\nDid the code changes recommended by Jamie.\n\n<p></p><hr/>\n<em>2009-Jun-10 15:53:41 by psilord:</em> <br/>\n\nTested my code changes.\n\n<p></p><hr/>\n<em>2009-Jun-10 15:54:58 by psilord:</em> <br/>\n\nI am complete with this work.\n\n<p>The V7_2-fixckptprot-branch branch has been merged into the V7_2-branch.\n\n</p><p>I have completed and committed the version history entry for this fix.\n\n</p><p>This ticket is resolved.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jun-10 15:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=24843\">[24843]</a></span>: Documented checkpoint server fix detailed in gittrac ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jun-10 13:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14876\">[14876]</a></span>: Code reviewed by Jamie. Added checks to validate that I read the expected number of bytes on the intial packet read with net_read_with_timeout(). Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jun-03 16:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14830\">[14830]</a></span>: Tighted up some comments, removed some unused code. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jun-01 15:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14799\">[14799]</a></span>: Added a large comment which describes the basis of the hack, which as of this checkin is code complete, tested, and run with valgrind. Removed some unused variables. Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jun-01 10:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14798\">[14798]</a></span>: Added some more initialization code to make valgrind happy. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-29 16:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14792\">[14792]</a></span>: Initialized the netpkt arrays to zero instead of leaving them uninitialized. Changed a strcpy to a memmove, which is more opaque about the internal data. Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-29 11:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14791\">[14791]</a></span>: Added a defensive type narrowing bit loss check from 64 to 32 bits when sending a restore packet to the client. Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-28 16:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14786\">[14786]</a></span>: Added in a check to clearly log if a 64 bit client is going to store too large of a checkpoint into a 32 bit ckpt server which probably can't handle the greater than 32 bit file size. Maybe I'll add one the other way, if a 32 bit client tries to restart a 64 bit checkpoint which is too large for it,\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-28 11:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14779\">[14779]</a></span>: Commented code paths not ever taken as not having had the 32/64 bit backward compatibility fixes in them. The comments reasonably explain what needs to be done in those cases. Updated some other comments. Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-27 13:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14765\">[14765]</a></span>: Coded the RESTORE API changes into server2.cpp. Initial testing on a 64 machine works. Will test 32 bit and then start cross testing and see if anything else needs fixing. Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-21 16:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14750\">[14750]</a></span>: Added the protocol API for the RESTORE protocol. I haven't yet fixed the higher level code to call it yet though. Also fixed some heinous latent errors from typoing some enum names, I need to do a serious and real final check of that stuff before this gets merged back into the stable branch. Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>.\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-20 16:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14746\">[14746]</a></span>: Fixed a typo. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-20 16:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14745\">[14745]</a></span>: Implemented the STORE protocol fixes for 32/64 bit backwards compatibility. + Only have done tentative testing of it on 32 bit machines. + Got rid of a bunch of htonl() and friends that are now unneeded. + Updated the log output to be more precise across the SERVICE and STORE protocols. + Simpler store_req_pkt\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-19 16:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14718\">[14718]</a></span>: + Fixed a time consuming bug where I was miscalculating a pointer position in writing the additional packet data for a 64 bit service_req_pkt into a buffer.\u00a0[...]\n (By Pete Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-18 16:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14706\">[14706]</a></span>: Still trying to debug why the service_req_pkt::owner_name field doesn't work. It is supposed to be at offset 24 in the network packet, but it arrives at offset 32 instead. I'm at a loss for what is going on and need to think. Also, htonl() and friends on 64 bit integral quantities only modifies the lower\u00a0[...]\n (By Pete Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-15 11:55</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14696\">[14696]</a></span>: Failed to work on 64 bit, there are endian issues with the uint64_t ordering functions I wrote. Added more debugging info, will figure out in next commit. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>  (By Pete Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-14 16:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14692\">[14692]</a></span>: Added the code to handle service_reply_pkt to 32/64 bit clients. The SERVICE protocol is basically sketched out and now I need to test it. A big thing was the protocol API functions now do the host/network byte ordering so I had to rip all of the explicit calls of them out of the SERVICE protocol path\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-13 16:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14681\">[14681]</a></span>: Added a close() on an fd so I don't forget to do it later. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-13 16:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14680\">[14680]</a></span>: Decoding of the service_req_packet is almost done. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span> I ran into trouble due to host/network order byte issues all over the codebase, plus dumb timeout handling on sockets. I need to push the FDContext idea through the rest of the service protocol and remove all of the explicit netowkr byte ordering\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-12 16:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14674\">[14674]</a></span>: Added more code to the unpacking of the service_req_pkt. Added a new service request structure which has constant field widths for both 32 and 64 bit machines. The original structures will be relegated to internet only. This is for ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-08 16:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14670\">[14670]</a></span>: Added more structure offset definitions. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-07 16:47</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14668\">[14668]</a></span>: Added more structure offsets and definitions. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=177\" onclick=\"get_ticket_and_populate_wrapper('177'); return false;\" title=\"Incompatibility between 32/64bit Ckpt Server and Shadow\">#177</a></span>  (By Peter Keller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Jan-31 13:39", "status": "resolved", "created": "2009-Feb-02 11:00", "fixed_version": "2009-Feb-02 11:00", "broken_version": "v070200", "priority": "1", "subsystem": "Std", "assigned_to": "psilord", "derived_from": "", "creator": "tannenba", "rust": "a18962", "customer_group": "other", "visibility": "public", "notify": "jfrey@cs.wisc.edu", "due_date": ""}