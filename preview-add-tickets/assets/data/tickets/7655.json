{"id": 7655, "title": "Ticket #7655: Python bindings transaction behavior is confusing and undocumented", "description": "<blockquote>\n(I've labelled this for 8.9.8 because I think we need to decide what to do about it before doing anything, and we should decide soon, because we need to think about whether to break compatibility for 9.x)\n\n<p>The current behavior of the <code>Transaction</code> object in the bindings is very confusing because it tries to serve several distinct roles. TJ, please correct me if any of this is wrong...\n\n</p><p></p><ul>\n<li>You <strong class=\"two\">must</strong> acquire a transaction before submitting jobs using a <code>Submit</code> object. You must explicitly pass the transaction to the queue method.\n</li><li>You <strong class=\"two\">may</strong> acquire a transaction object before <code>Schedd.edit</code>. If you do, the edits will all be part of the same transaction, even though you don't have to pass the transaction to the edit method. The edits implicitly use the transaction through global state in the bindings.\n</li><li>You <strong class=\"two\">must not</strong> <code>Schedd.act</code> inside a transaction with anything else in it, because the actual schedd doesn't support acting and editing/submitting in the same transaction.\n</li></ul>\n\n<p>It's unclear to me whether you can edit and submit in the same transaction; based on my understanding the answer is no. As I recall, we've also had problems with submitting twice in the same transaction. Perhaps TJ can clarify?\n\n</p><p>Even worse, making a transaction object immediately acquires the write lock in the schedd for the entire duration of the transaction context in Python. This is not documented anywhere and has obvious implications for how users should write code in transaction contexts (get in and out as quickly as possible).\n\n</p><p>The easiest and most immediate approach is to actually document all of these quirks in the manual (basically, stick the above text in the manual).\n\n</p><p>In the long-term, I think we should consider completely scrapping the current transaction model in Python and coming up with one that reflects the transaction model in the schedd (which we could also improve) more accurately and clearly. The new model should also defer actually acquiring the underlying write lock until the \"transaction\" context ends in Python (in particular, in the <code>__exit__</code> method of the context manager, so that the user doesn't get to run code as easily during the real transaction).</p></blockquote>", "remarks": "<blockquote>\n<em>2020-Aug-25 11:52:42 by tlmiller:</em> <br/>\n\n<a class=\"external\" href=\"https://docs.google.com/document/d/1BOAV6pW3ZmfxyhIXGuGHxts2HOIJxatWOdzPd-UXZWg\">https://docs.google.com/document/d/1BOAV6pW3ZmfxyhIXGuGHxts2HOIJxatWOdzPd-UXZWg</a></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7853\" onclick=\"get_ticket_and_populate_wrapper('7853'); return false;\" title=\"python submit method on schedd object should take a Submit object\">#7853</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\npython submit method on schedd object should take a Submit object</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2020-Nov-09 12:20", "status": "new", "created": "2020-May-21 17:01", "fixed_version": "2020-May-21 17:01", "broken_version": "", "priority": "2", "subsystem": "PythonBinding", "assigned_to": "johnkn", "derived_from": "", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu johnkn@cs.wisc.edu tannenba@cs.wisc.edu bbockelman@mogridge.org", "due_date": ""}