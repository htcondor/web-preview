{"id": 2993, "title": "Ticket #2993: Allow draining to be cancelled", "description": "<blockquote>\nCurrently, condor_defrag will not drain a machine if DEFRAG_WHOLE_MACHINE_EXPR evaluates to True for one or more p-slots in the startd.\n\n<p>I propose that if a machine is already draining and DEFRAG_WHOLE_MACHINE_EXPR evaluates to True for one or more p-slots, that the draining will then be cancelled if a new condor_defrag knob <code>DEFRAG_CAN_CANCEL</code> is set to true.\n\n</p><p>This is a very important change for HCC, as we have a stream of 8-core jobs and do not want to wait for an entire 64-core node to free up.\n\n</p><p>Patch incoming.</p></blockquote>", "remarks": "<blockquote>\n<em>2012-May-15 11:45:31 by tannenba:</em> <br/>\n\nCould you get what you want today without any patches by configuring your 64-way machines with eight 8-core pslots?\n\n<p></p><hr/>\n<em>2012-May-15 11:46:30 by bbockelm:</em> <br/>\n\nI wish.\n\n<p>I already asked danb: condor_defrag works at the startd level, not at the p-slot level.\n\n</p><p></p><hr/>\n<em>2012-May-15 15:47:47 by danb:</em> <br/>\n\nDraining partitionable slots rather than machines was rejected during the design phase.  In a possible future version, Miron wanted the interface between defrag and startd to be a request for a quantity of drained resources, not a request for a specific subset of the resources to be drained.\n\n<p>Statically partitioning the resources across multiple startds is one way to achieve draining of partial machines in the current system.  This would not work if you have policies that require the slots to all be under the management of a single startd (e.g. slot attributes).\n\n</p><p></p><hr/>\n<em>2012-May-15 17:40:07 by tannenba:</em> <br/>\n\nPatch 2 below being tested out on a cluster at HCC...\n\n<p></p><hr/>\n<em>2012-May-16 10:58:51 by danb:</em> <br/>\n\nHi Brian,\n\n<p>Review of patch 2:\n\n</p><p>The intermingling of the stop-draining-early logic with the existing start-draining logic in Defrag::poll() seems to have a few quirks.  For example, the following pre-existing optimization in Defrag::poll() could now cause the stop-early logic not to happen when it should:\n\n</p><p></p><pre>        if( num_draining &gt;= m_max_draining ) {\n            dprintf(D_ALWAYS,\"Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and there are %d draining machines.\\n\",\n                    m_max_draining, num_draining);\n            return;\n        }\n        else if( num_draining &lt; 0 ) {\n            dprintf(D_ALWAYS,\"Doing nothing, because DEFRAG_MAX_CONCURRENT_DRAINING=%d and the query to count draining machines failed.\\n\",\n                    m_max_draining);\n            return;\n        }\n</pre>\n\n<p>There are a few other similar cases.\n\n</p><p>More fundamentally, the stop-early logic is using the same loop over candidates as the start-draining logic.  Therefore, drain cancelation will only happen for draining machines that still happen to match DEFRAG_REQUIREMENTS.  This works with the default requirements expression, and I can imagine that it would happen to work in most cases where the expression is customized, but at the very least, this quirk would need to be documented.  As a user, I might not have expected DEFRAG_REQUIREMENTS to affect which draining machines would be chosen to stop early.\n\n</p><p>If, on the other hand, we detangled the stop-early logic from the draining logic, then the question is whether a new configuration variable should be added to constrain which machines are considered.  I think the answer is yes.  In that case, perhaps the boolean DEFRAG_CAN_CANCEL could be eliminated in favor of an expression that matches machines for which draining should be stopped.  Example: DEFRAG_CANCEL_REQUIREMENTS = $(DEFRAG_WHOLE_MACHINE_EXPR).\n\n</p><p>One last minor concern is that cancellation of draining by defrag could undo draining that was initiated by condor_drain.  That could be desired or not.  There is not currently anything advertised in the draining startd ad that indicates why the draining was initiated.  If there were, this could be used in the stop-early policy to avoid conflicting with administrator-initiated activity.  I think this concern is minor, because the administrator has several workarounds available.\n\n</p><p></p><hr/>\n<em>2012-Jul-02 14:39:22 by tannenba:</em> <br/>\n\nBrian, will you be able to create a patch 3 to address the issues in the code review above on patch 2 ?\n\n<p></p><hr/>\n<em>2012-Jul-16 13:37:27 by danb:</em> <br/>\n\nBrian's new patch looks great to me.  I have committed it.</blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/565/condor_partial_defrag.patch\">condor_partial_defrag.patch</a>\n7114 bytes added by bbockelm on 2012-May-15 02:28:15 UTC.\n</li><li><a href=\"attach_get/566/condor_partial_defrag_v2.patch\">condor_partial_defrag_v2.patch</a>\n7023 bytes added by bbockelm on 2012-May-15 22:09:59 UTC.\n<br/>\nSlightly cleaned up patch.<br/>\n</li><li><a href=\"attach_get/603/condor_partial_defrag_v3.patch\">condor_partial_defrag_v3.patch</a>\n9052 bytes added by bbockelm on 2012-Jul-16 17:28:59 UTC.\n<br/>\nRevised patch to address Dan's comments.  The biggest change is to separate out the cancellation into a separate function call, preventing the two sets of functionality from interfering with each other.\n\n<p>Added a new parameter, DEFRAG_CANCEL_REQUIREMENTS (defaults to $(DEFRAG_WHOLE_MACHINE_EXPR) ); when this evaluates to True for a node in the draining state, cancellation will be attempted.\n\n</p><p>This was tested on a personal box with: DEFRAG_WHOLE_MACHINE_EXPR = ((Cpus == <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TotalCpus\" title=\"Total Cpus\">TotalCpus</a></span>) || (Cpus &gt;= 2)) &amp;&amp; Offline=!=True\n<br/>\n</p></li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Sep-04 15:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=33258\">[33258]</a></span>: small edit and correct typos for new config knob DEFRAG_CANCEL_REQUIREMENTS ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2993\" title=\"Allow draining to be cancelled\">#2993</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Aug-14 14:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=33047\">[33047]</a></span>: first pass LaTeX/labels/references fixes to make 7.9.1 version history appear right in html. ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3030\" title=\"JobRouter should be able to route between multiple schedd's\">#3030</a></span> ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2993\" title=\"Allow draining to be cancelled\">#2993</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-16 13:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32797\">[32797]</a></span>: Documented DEFRAG_CANCEL_REQUIREMENTS. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2993\" title=\"Allow draining to be cancelled\">#2993</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-16 13:24</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32796\">[32796]</a></span>: Added a stop-early draining policy option to condor_defrag. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2993\" title=\"Allow draining to be cancelled\">#2993</a></span> Committer: Dan Bradley  (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2012-Jul-16 13:37", "status": "resolved", "created": "2012-May-14 21:28", "fixed_version": "2012-May-14 21:28", "broken_version": "", "priority": "2", "subsystem": "Daemons", "assigned_to": "bbockelm", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelm@cse.unl.edu tannenba@cs.wisc.edu dan@hep.wisc.edu", "due_date": ""}