{"id": 4090, "title": "Ticket #4090: Cleaner param_* interface", "description": "<blockquote>\nBased on a discussion between knoeller and adesmet:\n\n<p>The current param_* system...\n</p><ul>\n<li>...is error prone; if you typo the name, it will \"work\", but not as you expect.\n</li><li>...requires passing in a default, which is redundant and potentially error prone for parameters in param_info.in.\n</li><li>...has silly names. param_boolean returns a bool, not a boolean. param_integer returns an int, not an integer.\n</li><li>...should remain valid C, so no function name overloading.\n</li></ul>\n\n<p>Proposed:\n\n</p><p>Add new functions. They should use the type actually returned (param_bool, param_int).  They should not take a default. Instead of taking a typo-prone char*, it should take param_id, an enum from param_info_tables.h (the enum already exists, but is currently unnamed).  Using the enum provides some type safety. If an out-of-range value is passed it, it should be a fatal error, as it represents either memory corruption or a serious programming error.\n\n</p><p>For example, where today we have\n\n</p><p></p><pre>  // These omit some specialized arguments\n  bool param_boolean( const char *name, bool default_value);\n  int param_integer( const char *name, int default_value = 0);\n</pre>\n\n<p>we would also have\n\n</p><p></p><pre>  bool param_bool(param_id id);\n  int param_int(param_id id);\n</pre>\n\n<p>These new functions can't replace all cases, but they can replace a large number, probably the vast majority.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2013-Nov-20 15:47", "status": "new", "created": "2013-Nov-20 15:45", "fixed_version": "2013-Nov-20 15:45", "broken_version": "", "priority": "4", "subsystem": "Libs", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}