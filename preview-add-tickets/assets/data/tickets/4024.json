{"id": 4024, "title": "Ticket #4024: Problems with DAG node priority implementation", "description": "<blockquote>\nIn Dag::SetDefaultPriorities(), we go through and change the individual priorities of nodes according to the overall DAG priority.  I haven't experimentally verified this, but I'm 99% certain that that means than if we dump out an old-style rescue DAG the nodes in the rescue DAG won't have their original priority values.\n\n<p>I think it would be a lot cleaner to just keep the individual node priorities unchanged, and then figure out at submit time the higher of the overall priority and the node's priority.\n\n</p><p>(Hmm -- and for that matter, a node's priority value has already been adjusted according to its parents.  So maybe we need something like an original priority value and an effective priority value.)  Unless we just want to forget about old-style rescue DAGs...\n\n</p><p>Although I see another issue:  say you have a bunch of priority 5 nodes and a bunch of priority 10s.  If your overall DAG has a priority of 10 or higher you will erase the differences between the priority 5 and 10 nodes <strong>within this DAG</strong>.  Is that what we want?</p></blockquote>", "remarks": "<blockquote>\n<em>2013-Oct-31 13:41:34 by wenger:</em> <br/>\n\nOne more thing:  I kind of don't like the code appending priority to the VARS list of a node, as opposed to explicitly passing it in condor_submit() in dagman_submit.cpp.\n\n<p></p><hr/>\n<em>2013-Oct-31 13:56:14 by wenger:</em> <br/>\n\nI'm not sure why priority is in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SubmitDagDeepOptions\" title=\"Submit Dag Deep Options\">SubmitDagDeepOptions</a></span> -- it seems like the priority for a sub-DAG should be automatically taken care of by the normal priority stuff for a node -- and it seems like if you explicitly set the priority for a sub-DAG within the top-level DAG file, this might conflict with the priority in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SubmitDagDeepOptions\" title=\"Submit Dag Deep Options\">SubmitDagDeepOptions</a></span>.\n\n<p></p><hr/>\n<em>2013-Oct-31 14:16:26 by wenger:</em> <br/>\n\nI wonder if the \"effective\" priority of a node should be the <strong>sum</strong>\nof its own priority and the overall DAG priority.  I think that might\nremove some inconsistencies.\n\n<p></p><hr/>\n<em>2013-Oct-31 15:27:11 by wenger:</em> <br/>\n\nIgor and I have been going back and forth about this, and I'm wondering whether something simpler is the way to go:\n\n<p></p><pre>    effective node prio = explicit node prio + DAG prio\n</pre>\n\n<p>and the node's parents don't affect its priority.\n\n</p><p></p><hr/>\n<em>2013-Oct-31 15:28:50 by wenger:</em> <br/>\n\nI'm thinking that we should ask for feedback on htcondor-users about a potential change to how priorities work.  I don't know how many people are actually using them...\n\n<p></p><hr/>\n<em>2013-Oct-31 15:36:17 by wenger:</em> <br/>\n\nHmm --\n\n<p></p><pre>  effective node prio = explicit node prio + sum(parents' prios) + DAG prio\n</pre>\n\n<p>would be more consistent between sub-DAGs and parent/child, though.\n\n</p><p>That would also be another reason to implement socket nodes for splices -- that would make implementing priorities for splices way easier.\n\n</p><p>On the other hand, this could get kind of out-of-control for very \"long\" DAGs.\n\n</p><p>I guess one argument in favor of not having the parent nodes affect the priority is that a node can only have one DAG, but it can have any number of parents, so having the parent DAG's priority affect things is a lot simpler.\n\n</p><p></p><hr/>\n<em>2013-Oct-31 16:43:22 by wenger:</em> <br/>\n\nHere's kind of a summary:\n\n<p>Right now a node's priority is determined as follows:\n\n</p><p></p><pre>  effective node prio = max(explicit node prio, parents' effective prios,\n    DAG prio)\n</pre>\n\n<p>This is really a problem for eventually fixing/re-implementing the \"respond\nto priority change\" feature, because it makes things asymmetrical with\nregard to increasing/decreasing the DAG priority.\n\n</p><p>The current scheme also causes a problem because a high DAG priority erases relative priority differences of nodes within the DAG, which Igor and I both dislike.\n\n</p><p>So there are a bunch of possible alternatives we've thrown back and forth:\n\n</p><p></p><pre>  1) effective node prio = max(explicit node prio, parents' effective\n    prios) + DAG prio\n</pre>\n\n<p></p><pre>  2) effective node prio = sum(explicit node prio, parents' effective\n    prios, DAG prio)\n</pre>\n\n<p></p><pre>  3) effective node prio = explicit node prio + DAG prio\n</pre>\n\n<p>Number 1 is the smallest change from the way things currently work.  But Igor\ndoesn't like the max() function, and I'm not wild about it, either.\n\n</p><p>Number 2 is probably the most self-consistent -- parent DAGs and parent nodes\nhave the same effect on priorities.  But I'm worried that in \"long\" DAGs\npriorities will get ridiculously high.\n\n</p><p>Number 3 is very simple to understand, and avoids the \"priority explosion\" problem\nof number 2.  The only down side is that things are not consistent between parent\nnodes and parent DAGs.\n\n</p><p>I'm currently leaning towards number 3, and Igor says he's okay with that.\n\n</p><p>But I wanted to get some feedback (and probably run things past\nhtcondor-users) before making changes...\n\n</p><p>(BTW, I'm open to schemes other than the above 3, but I think we should go\nwith something fairly simple.  We actually had a more complex scheme that\nthe current one for a while, and as I recall we went away from it because it\nwas too hard to understand.)\n\n</p><p></p><hr/>\n<em>2013-Nov-29 14:11:07 by wenger:</em> <br/>\n\nI just sent an email about this to htcondor-users -- we'll have to see what the reaction is.\n\n<p></p><hr/>\n<em>2013-Dec-02 14:48:48 by wenger:</em> <br/>\n\nHere's another possibility:\n\n<p></p><pre>  4) effective node prio = average(explicit node prio, parents' effective\n    prios, DAG prio)\n</pre>\n\n<p>This treats parent nodes and parent DAGs the same, but should be at least somewhat better in terms of the priority \"explosion\" than number 2 above.\n\n</p><p></p><hr/>\n<em>2016-Jul-20 12:18:28 by wenger:</em> <br/>\n\nNote:  I think the changes to implement <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5749\" onclick=\"get_ticket_and_populate_wrapper('5749'); return false;\" title=\"Pegasus problems with DAG priorities\">#5749</a></span> will fix this, but I need to verify things.  Therefore I'm going to set this ticket back to the active state.\n\n<p></p><hr/>\n<em>2016-Jul-29 15:41:53 by wenger:</em> <br/>\n\nYes, the <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5749\" onclick=\"get_ticket_and_populate_wrapper('5749'); return false;\" title=\"Pegasus problems with DAG priorities\">#5749</a></span> fix <strong>does</strong> fix this problem, so I'm going to resolve the ticket.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4102\" onclick=\"get_ticket_and_populate_wrapper('4102'); return false;\" title=\"Complete rescue DAGs have incorrect node priorities\">#4102</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nComplete rescue DAGs have incorrect node priorities</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4130\" onclick=\"get_ticket_and_populate_wrapper('4130'); return false;\" title=\"job_dagman_propogate_priorities succeeds even if functionality fails\">#4130</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\njob_dagman_propogate_priorities succeeds even if functionality fails</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5749\" onclick=\"get_ticket_and_populate_wrapper('5749'); return false;\" title=\"Pegasus problems with DAG priorities\">#5749</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nPegasus problems with DAG priorities</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Sep-28 16:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=49331\">[49331]</a></span>: Fixup version history for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5849\" onclick=\"get_ticket_and_populate_wrapper('5849'); return false;\" title='Resolve log configuration madness for \"clone\" daemons.'>#5849</a></span> and <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4024\" onclick=\"get_ticket_and_populate_wrapper('4024'); return false;\" title=\"Problems with DAG node priority implementation\">#4024</a></span>  (By Tim Theisen )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2016-Jul-29 15:42", "status": "resolved", "created": "2013-Oct-31 13:40", "fixed_version": "2013-Oct-31 13:40", "broken_version": "v080004", "priority": "2", "subsystem": "Dag", "assigned_to": "wenger", "derived_from": "#3389", "creator": "wenger", "rust": "", "customer_group": "other", "visibility": "public", "notify": "wenger@cs.wisc.edu, gthain@cs.wisc.edu,isfiligoi@ucsd.edu", "due_date": ""}