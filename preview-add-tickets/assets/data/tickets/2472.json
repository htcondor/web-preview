{"id": 2472, "title": "Ticket #2472: Increase precision of classad::Value::integerValue to 64 bits", "description": "<blockquote>\nThere have been at least a couple cases where there's a growing use-case for obtaining values from config files and/or classads that are &gt; 2GB.  One particular example is <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2471\" onclick=\"get_ticket_and_populate_wrapper('2471'); return false;\" title=\"MAX_&lt;subsys&gt;_LOG does not properly handle values &gt;= 2GB\">#2471</a></span>\n\n<p>The \"right\" answer would be supporting something like param_integer_64bit(), however this in turn would require the classad library to support integer values of 64 bit precision.\n\n</p><p>I think this could be accomplished with reasonable effort by changing the type of classad::Value::integerValue from \"int\" to \"long long\" (or however we choose to denote a 64 bit integer type).\n\n</p><p>With an internal integer representation of 64 bits, we can then also provide accessor methods like EvaluateAttrInt64(), or <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EvaluateAttrLongLong\" title=\"Evaluate Attr Long Long\">EvaluateAttrLongLong</a></span>, whichever seems most appropriate.\n\n</p><p>I might also propose an accessor like EvaluateAttrOffT, for off_t values that may be 4 bytes on older systems.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Nov-09 13:59:47 by matt:</em> <br/>\n\nOnce this is done, param(\"MAX_..._LOG\") code needs to be updated to use a param_int64_t (or similar) that does <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> evaluation.\n\n<p></p><hr/>\n<em>2011-Dec-22 17:52:44 by eje:</em> <br/>\n\nDeveloping on branch V7_7-gt2472-classad-64-bit-int-publicbranch\n\n<p></p><hr/>\n<em>2012-Jan-20 11:05:13 by eje:</em> <br/>\n\nThere are some new unit tests associated with testing the 64-bit support, which you can run like this:\n\n<p></p><div class=\"code\">\n<pre class=\"code\"># now includes testing classad support for 64-bit vals:\n$ ./src/condor_tests/condor_unit_tests -t OTEST_Old_Classads -f\n\n========\nSUMMARY:\n========\n    Total Tested Objects:  1\n    Total Unit Tests:      282\n    Passed Unit Tests:     282\n    Failed Unit Tests:     0\n    Aborted Unit Tests:    0\n    Skipped Unit Tests:    0\n    Total Time Taken:      0 seconds\nTest suite has passed.\n\n# test param_integer and friends:\n$ ./src/condor_tests/condor_unit_tests -t FTEST_config -f\n\n========\nSUMMARY:\n========\n    Total Tested Objects:  0\n    Total Unit Tests:      4\n    Passed Unit Tests:     4\n    Failed Unit Tests:     0\n    Aborted Unit Tests:    0\n    Skipped Unit Tests:    0\n    Total Time Taken:      0 seconds\nTest suite has passed.\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Jan-23 16:35:30 by eje:</em> <br/>\n\nDesign princpiples for the proposed changes:\n\n<p></p><ul>\n<li>The internal integer member used to store integer values in the classad lib (Value::integerValue) changed from 'int' to 'long long', which has guaranteed precision of &gt;= 64 bits.\n</li><li>The data type for integer values is abstracted to a named type <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=IntType\" title=\"Int Type\">IntType</a></span>, which is defined in the \"classad\" namespace and so is accessible to all code in the classad library.\n</li><li><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=IntType\" title=\"Int Type\">IntType</a></span> is ideally intended to be internal to the classad lib.  Calling code would get integer values as 'int' or 'long' or 'long long', etc.  In practice, this ideal is violated in various places.\n</li><li>The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=IntType\" title=\"Int Type\">IntType</a></span> data type is also defined in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> class definition, so that customer code using the classad libs can refer to \"ClassAd::IntType\" as a convenient synonym for \"classad::IntType\"\n</li><li>classad API functions that currently return 'int&amp;' on the parameter list, e.g. ClassAd::EvaluateAttrInt(), now support an additional 'long long' overloading.\n</li><li>the same is true for int-returning functions at the compat_classad layer, e.g. Assign(... long long&amp;), LookupInteger(... long long&amp;) and EvalInteger(long long&amp;).\n</li><li>param_integer() from the config library has new friends param_long() and param_long_long()\n</li><li>If calling code asks for 'int&amp;' from a classad, and the evaluated value exceeds min/max 'int' value, the current proposed semantic is to return error condition if the function does this, or EXCEPT if no error return code is possible.   Other proposed semantics were to cap the values at min/max value for return type.\n</li><li>The new functionality is currently unit tested in OTEST_Old_Classad.cpp and the new FTEST_config.cpp\n</li><li>There are cases in the condor code where the interface layer with compat_classad and/or classad is bypassed - that is, where a direct reference to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=IntType\" title=\"Int Type\">IntType</a></span> is required, even though that type was ideally going to be internal.  I changed required declarations to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=IntType\" title=\"Int Type\">IntType</a></span> in those places.   Ideally, those places are candidates for rewriting in the future to adhere to classad or compat_classad functions instead, but I considered that out of the scope for this ticket.\n</li></ul>\n\n<p>Some of my working assumptions regarding mixed pools: there are two likely cases (imo): the case where a 64-bit value is configured in config file, in which case I expect such values to be mostly used locally to machines.  If you configure 64 bit values, and the code can handle 64 bit values, and the environment supports them, then this will work.   Otherwise it will fail, however that is already true, so I don't see this as loss of functionality.\n\n</p><p>The other case is values residing on various classads.   Here, the main potential problem I see is that somehow a value on a 64-bit machine grows to &gt; 2 gig, and then goes over the wire to a 32 bit machine, where it is likely to cause problems.  I don't see any way for this to not cause problems, however I also see these as likely to be rare, since pools today appear to be running fine and not generating such large values.  If they were, we'd already be seeing bad behavior.\n\n</p><p>What our overflow policy is will need to be considered.  the proposed policy is described above, however perhaps an \"all EXCEPT\" policy is even better to avoid any code that ignores return values, and fail early and informatively.\n\n</p><p>I think that mixed pool related problems are best dealt with via educating the user community via any needed documentation and other support.\n\n</p><p></p><hr/>\n<em>2012-Jan-24 11:15:29 by eje:</em> <br/>\n\nMatt recommended auditing for classad attributes and config params that are most at-risk for causing overflow problems in a mixed pool.\n\n<p>Running list:\n</p><ul>\n<li>attributes or params related to filesystem sizes, file sizes\n</li><li>attributes related to RAM/mem\n</li><li>schedd cumulative statistics</li></ul>\n</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2012\" onclick=\"get_ticket_and_populate_wrapper('2012'); return false;\" title=\"support 64-bit integer literals and values in the ClassAd language\">#2012</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nsupport 64-bit integer literals and values in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> language</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3248\" onclick=\"get_ticket_and_populate_wrapper('3248'); return false;\" title=\"Expose 64-bit integers and doubles in ClassAd compatibility layer\">#3248</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nExpose 64-bit integers and doubles in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> compatibility layer</td></tr>\n</tbody></table>", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/525/gt2472-classad-64-bit-int.patch\">gt2472-classad-64-bit-int.patch</a>\n112778 bytes added by eje on 2012-Jan-20 16:54:53 UTC.\n<br/>\nIncreases the supported integer value precision of classad expressions to 64 bits.<br/>\n</li><li><a href=\"attach_get/526/gt2472_stdu.patch\">gt2472_stdu.patch</a>\n2725 bytes added by jfrey on 2012-Jan-20 23:34:20 UTC.\n<br/>\nFix for standard universe with new classad 64-bit changes.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jun-27 10:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32493\">[32493]</a></span>: Fix 64-bit classad calls to work with caching changes. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2472\" onclick=\"get_ticket_and_populate_wrapper('2472'); return false;\" title=\"Increase precision of classad::Value::integerValue to 64 bits\">#2472</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Apr-16 15:23</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=32491\">[32491]</a></span>: First pass to increase classad integers to 64 bits. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2472\" onclick=\"get_ticket_and_populate_wrapper('2472'); return false;\" title=\"Increase precision of classad::Value::integerValue to 64 bits\">#2472</a></span> Classad integers are now internally reprsented as type long long. New methods have been added to get and set integer values as long and long long. The soversion is bumped, but code that uses classads should only need a recompile to use the new\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2012-Oct-02 17:35", "status": "resolved", "created": "2011-Sep-16 15:01", "fixed_version": "2011-Sep-16 15:01", "broken_version": "", "priority": "2", "subsystem": "Libs", "assigned_to": "jfrey", "derived_from": "", "creator": "eje", "rust": "", "customer_group": "other", "visibility": "public", "notify": "eje@cs.wisc.edu, willb@redhat.com, matt@cs.wisc.edu, gthain@cs.wisc.edu, jfrey@cs.wisc.edu, johnkn@cs.wisc.edu", "due_date": ""}