{"id": 6875, "title": "Ticket #6875: Explicit token management protocol between starter and shadow", "description": "<blockquote>\nBased on a suggestion from tlmiller in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span> (I suspect others have discussed the same thing, but I didn't see a ticket):\n\n<p>While the file transfer protocol is asynchronous -- a single ACK is only sent by the starter after the whole transfer is done -- we would like for the shadow to better manage the transfer queue slots <em>without</em> having to guess about which stage of the transfer the starter is in.  For 8.9.0, the shadow guesses that the starter is done with the queue slot after it has sent the last transfer and before it receives the ACK (under the theory that this is when the multifile transfers occur).\n\n</p><p>For 8.9.1, we should do better.  I propose we:\n\n</p><p>1.  Partition the file transfers into URLs and non-URLs, and lexigraphically sort the URLs.\n2.  Introduce a new SYN integer in the protocol that allows the shadow to indicate an ACK is requested.\n3.  When the SYN is received by the starter, it responds with the transfer status ACK.\n4.  Once the transfer ACK is received by the shadow, it does transfer token management - releases the token for now.\n\n</p><p>The intent is that multiple partitions or synchronizations may happen in the future.  For example, we can have one partition for each protocol we use for transfers -- or, for special ones such as HTTP/HTTPS, one partition per origin server.\n\n</p><p>The first step seems to be appropriate sorting and synchronization, however.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "todo", "last_change": "2019-Jan-19 08:37", "status": "new", "created": "2019-Jan-19 08:37", "fixed_version": "2019-Jan-19 08:37", "broken_version": "", "priority": "3", "subsystem": "", "assigned_to": "bbockelm", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "scitokens", "visibility": "public", "notify": "bbockelman@morgridge.org tannenba@cs.wisc.edu tlmiller@cs.wisc.edu", "due_date": ""}