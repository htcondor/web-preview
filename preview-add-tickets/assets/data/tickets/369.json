{"id": 369, "title": "Ticket #369: anacron-like behavior in crondor (Intelligent windows with priorities)", "description": "<blockquote>\nThis is a complex, unfinished idea based on a discussion Todd Miller and I had.  I think there are good ideas in here, but it's a bit of a jumble, sorry.  It will need to be made more concrete and probably broken into smaller pieces.\n\n<p>Goals:\n\n</p><p></p><ul>\n<li>Provide anacron-like behavior: \"I don't care when you run this, but run it once per day/week/month\"\n</li><li>Mix this with other Condor policy, so I can avoid particular times of day.\n</li></ul>\n\n<p>Use cases:\n\n</p><p></p><ul>\n<li>A big submit machine (NMI) has a bunch of users with cron or crondor jobs that submit nightly builds.  Everyone wants to run them \"after hours\", but early enough that the jobs will be done by the time they get into work.  So everyone just picks an arbitrary time.  12:30 AM is popular for some reason.  Jobs end up unnecessarily crushing the machine.  It seems like Condor should have the ability to be more clever.  A user might say \"Start somewhere between 11:00 PM and 4:00 AM\".  Currently you could say \"Start at 11:00 PM, and give up if 4:00 AM rolls around,\" but that's not quite equivalent.  In practice if 100 jobs all are willing to start at 11:00 PM, the schedd will merrily start them (we're talking local universe here) all at the same time, crushing the poor machine for a bit.  Limits on simultaneous running jobs will space them out, but the order will just be FIFO.  Something more clever could be done, ideally in a way that is easy for the administrator and trivial or transparent for the users.  You could use Requirements to not start if the load is too high, but there really isn't a ranking mechanism for local jobs so that jobs getting near the end of their window get to jump in front of the line.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2009-Apr-08 15:40:37 by tlmiller:</em> <br/>\n\nSo for our particular use case, what we'd be doing is running a job (nmi_submit) in the local (or scheduler) universe that turns around and fires off DAGMan.  (Two, actually, but the second is just to get automatic restarts of a single scheduler-universe job.)  The DAG creates load on both the submit node on the execute nodes, but the submit node first.\n\n<p>As noted, I'd like something a little more sophisticated than a load-based limit on the scheduler and local universes, both because I expect the submit node to have idle time outside of the \"suggested\" range, and because I need to avoid starvation.  I want the logic to be something like, \"If the submit node is idle, submit a once-a-day job that hasn't run yet for this day.  If it's near the end of the day and all the once-a-day jobs haven't been submitted yet, submit them, regardless of load-based limits or throttling.  If it's 'after hours', increase the load below which the machine is considered idle.\"</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2009-Dec-17 15:48", "status": "new", "created": "2009-Apr-08 14:18", "fixed_version": "2009-Apr-08 14:18", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}