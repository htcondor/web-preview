{"id": 6951, "title": "Ticket #6951: Allows schedd to mistrust certain startds", "description": "<blockquote>\nCurrently in HTCondor, the startd is a highly-trusted daemon, even if the startd advertised itself to the pool with the identity of a minimally-trusted user.  If that user misconfigured their startds, that could have serious negative effects on other users' jobs.  CHTC minimizes this problem for annex users by only allowing the annex startds to report to a different collector; a user must therefore opt in to danger by requesting flocking.  This is hardly ideal.\n\n<p>Although this could be a problem with GSI, in practice, everyone goes through glideInWMS, which correctly configures its startds.  Multiple pool passwords (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6947\" onclick=\"get_ticket_and_populate_wrapper('6947'); return false;\" title=\"Extend PASSWORD auth to support multiple and derived secrets\">#6947</a></span>) are in part designed to make this situation more common, by making it easier to establish potentially lower-trust relationships.\n\n</p><p>However, with multiple pool passwords, we could establish a connection between the identity used by a startd to join the pool and which jobs the schedd is willing to start running there.  The collector already records the authenticated identity with which the startd advertised itself; if we don't already, we should be simple to add this to the match ad.\n\n</p><p>At this point, the initial proposal is for the schedd, when looking for a job to run on a claim whose authenticated identity is not trusted, to restrict its search to those jobs whose owner matches the authenticated identity of the startd.  The schedd could reduce pointless matches by including this constraint in its resource request(s) for that user.\n\n</p><p>It would seem fair to also teach the accountant not to count resources contributed by the user against their priority in the rest of the pool.\n\n</p><p>Follow-up work could include more sophisticated constraints, or a way for users to opt-in to using another user's startds (if allowed).</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Mar-10 23:24:09 by bbockelm:</em> <br/>\n\nOne use case this wouldn't cover is a \"PI who purchases a HTCondor annex for his group\"; this would only allow a PI to consume hosts from a HTCondor annex which she bought for herself.  It wouldn't allow her to \"gift\" CPU time to her grad students.\n\n<p>Another confounding factor to consider is the child collector: forwarding from child to parent would cause the authenticated identity to change from the startd identity to the child identity.\n\n</p><p>(Not saying that these exceptions negate the approach, just they are something to think about!)\n\n</p><p></p><hr/>\n<em>2019-Mar-11 11:19:55 by tlmiller:</em> <br/>\n\n<div class=\"restricted\"><pre>&gt; One use case this wouldn't cover is a \"PI who purchases a HTCondor annex for\n&gt; his group\"; this would only allow a PI to consume hosts from a HTCondor annex\n&gt; which she bought for herself. It wouldn't allow her to \"gift\" CPU time to her\n&gt; grad students.\n</pre></div>\n<p>This exact scenario was the motivation behind \"more sophisticated constraints\" in the follow-up work.  A simpler option, for pools with schedd-enforced accounting groups, would be to allow the schedd to match the accounting group against the ID instead.  This would mean the admin would have to be involved, but that may be no bad thing when talking about groups.\n\n</p><p></p><div class=\"restricted\"><pre>&gt; Another confounding factor to consider is the child collector: forwarding from\n&gt; child to parent would cause the authenticated identity to change from the\n&gt; startd identity to the child identity.\n</pre></div>I hadn't thought about that.  That sounds buggy to me, but maybe we'll have to add an <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=OriginalAuthenticatedIdentity\" title=\"Original Authenticated Identity\">OriginalAuthenticatedIdentity</a></span> instead.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2019-Mar-12 13:52", "status": "new", "created": "2019-Mar-08 19:31", "fixed_version": "2019-Mar-08 19:31", "broken_version": "", "priority": "4", "subsystem": "DaemonsSubmitNode", "assigned_to": "tlmiller", "derived_from": "#6947", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelman@morgridge.org, tannenba@cs.wisc.edu, tlmiller@cs.wisc.edu", "due_date": ""}