{"id": 6477, "title": "Ticket #6477: Advertise GPU utilization in the same way as CPU utilization", "description": "<blockquote>\nOne of the burning issues right now is to track GPU utilization.  Currently the StartD peridically updates the job ad with CPU utilization and total time.  It should do the same for GPU utilization.\n\n<p>This is a burning issue right now for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=IceCube\" title=\"Ice Cube\">IceCube</a></span> and soon will be for CMS and others.\n\n</p><p>[<a class=\"external\" href=\"https://docs.google.com/document/d/18kawaim1R5nmQmVDojLxx6PvKTx20Y5dvYgoFKtMGtM\">Design document</a>].  [Poorly organized <a class=\"external\" href=\"https://docs.google.com/document/d/1JjZVjxNLgHziTr2grDg8lfaZ6jZpiff7A_ALJ9PUkt4\">technical details</a>.]</p></blockquote>", "remarks": "<blockquote>\n<em>2017-Nov-10 09:13:22 by gonzalo.merino:</em> <br/>\n\nWhat we are interested here is to monitor he GPUUtilization for the payload process, i.e. the user job.\n\n<p>I confess I am not familiar with CPUUtilization. Is it reporting the CPU utilization by the user job, or by the startd daemon itself?\n\n</p><p></p><hr/>\n<em>2017-Nov-13 16:13:54 by tlmiller:</em> <br/>\n\nMonitorSelfCPUUsage is the attribute reporting CPU usage by the daemon.  In the machine ad, it's reported by the startd.\n\n<p>The job ad attributes [Cumulative]Remote[User|System]Cpu report CPU usage (total seconds).  AFAIK, no job attributes report CPU utilization (percentage).\n\n</p><p></p><hr/>\n<em>2017-Dec-06 13:44:41 by tlmiller:</em> <br/>\n\n[Recording this somewhere more-permanent.]\n\n<p>2017-12-06\n\n</p><p>The next step is to have the starter insert the metrics into the job ad.  It will obtain the metrics' current and original value from the update ad, so that has to happen first.  With those in hand, the starter can compute values for the job-ad metric appropriately, and send them along to the shadow on each update (especially the last one).  The starter will probably have to understand the startd metric configuration to make the appropriate computations on the appropriate attributes.\n\n</p><p>The last step in the basic work is to remove the StartOfJob* attributes (from the extra ad corresponding to the newly-unallocated resource) when the starter terminates; this should get us multiple per-job GPU reporting.\n\n</p><p>We then have a lot of work left to do, first of which is testing:\n</p><ul>\n<li>multiple GPUs (make sure we count both GPUs)\n</li><li>GPU memory usage (test PEAK metrics; also need to test with multiple GPUs)\n</li><li>a non-GPU resource type (could be completely synthetic), also with multiple instances\n</li><li>continuous integration tests may require completely synthetic resources with predicatable usage reports.\n</li></ul>\n\n<p>After <em>that</em>, we have to think about:\n</p><ul>\n<li>partitionable slot ads\n</li><li>what happens on a reconfig\n</li><li>what happens when a continuous cron job restarts / making sure the extra ad isn't lost (and what happens to a noncontinuous cron job?)\n</li></ul>\n\n<p>At which point I should probably update the design doc.\n\n</p><p></p><hr/>\n<em>2017-Dec-21 15:12:31 by tlmiller:</em> <br/>\n\n<div class=\"restricted\"><i><pre>&gt; The next step is to have the starter insert the metrics into the job ad. It\n&gt; will obtain the metrics' current and original value from the update ad, so\n&gt; that has to happen first. With those in hand, the starter can compute values\n&gt; for the job-ad metric appropriately, and send them along to the shadow on\n&gt; each update (especially the last one). The starter will probably have to\n&gt; understand the startd metric configuration to make the appropriate\n&gt; computations on the appropriate attributes.\n</pre></i></div>\n<p>In my on-disk tree, the starter now copies attributes name in a configuration knob from the startd's update ad to its own; this is wrong.  It should be reading from the metric configuration.  The shadow now allows *Usage attributes into is periodic updates to the schedd; that will have to be expanded to include the other attribute-name suffices as we define them.  Also, the starter should not be calculating the (final end-user) metrics, because the least-imprecise average will be calculated based on when the monitor last output a value; what sense does it make to convey that number to the starter?\n\n</p><p>[Implementation detail: the metric updates occurs in publishUpdateAd().  That's probably right.  What does publishJobExitAd() do?  Do the metric updates need to happen there, too?]\n\n</p><p>That question raises another: which \"raw\" values, if any, should be sent to the starter / job ad?\n\n</p><p></p><div class=\"restricted\"><i><pre>&gt; The last step in the basic work is to remove the StartOfJob* attributes (from\n&gt; the extra ad corresponding to the newly-unallocated resource) when the starter\n&gt; terminates; this should get us multiple per-job GPU reporting.\n</pre></i></div>This work is done and in the branch.\n\n<p></p><hr/>\n<em>2017-Dec-29 16:42:05 by tlmiller:</em> <br/>\n\n<div class=\"restricted\"><i><pre>&gt; That question raises another: which \"raw\" values, if any, should be sent to the starter / job ad?\n</pre></i></div>\n<p>After a brief discussion with TJ, the answer, at least initially, is none.\n\n</p><p>About attribute naming: a monitor may watch more than resource, e.g., GPU[Core]s and GPU memory.  The metrics configuration defines a metric type for each named resource: SUM:GPUs, PEAK:GPUsMemory.  The monitor writes attributes named Uptime&lt;Resource&gt;Seconds or Uptime&lt;Resource&gt;PeakUsage, respectively; this could change in the future, but makes the current implementation easier (because the aggregation functions don't have to change the name of the attribute).\n\n</p><p>The startd generates the job-specific &lt;Resource&gt;Usage automatically.  For SUM metrics, this is the change in cumulative Uptime&lt;Resource&gt;Seconds divided by the job duration; for PEAK metrics, this just the Uptime&lt;Resource&gt;PeakUsage (during/as of the end of the job).\n\n</p><p>The startd does not presently but should also generate the Recent&lt;Resource&gt;[Seconds|PeakUsage] and Recent&lt;Resource&gt;Usage automatically.\n\n</p><p>Of these names, &lt;Resource&gt;Usage corresponds to the job ads' <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MemoryUsage\" title=\"Memory Usage\">MemoryUsage</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DiskUsage\" title=\"Disk Usage\">DiskUsage</a></span> (both of which are PEAK metrics); the corresponding CPUsUsage is not reported in the user log (and therefore, the job ad); this should be corrected (we have the necessary data and even publish most of it).  The machine ad currently has <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LoadAvg\" title=\"Load Avg\">LoadAvg</a></span> and its cousins; we should add RecentCPUsUsage for consistency.  (We could also add <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RecentMemoryUsage\" title=\"Recent Memory Usage\">RecentMemoryUsage</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RecentDiskUsage\" title=\"Recent Disk Usage\">RecentDiskUsage</a></span>, but it's not clear anybody wants those.)\n\n</p><p></p><div class=\"restricted\"><i><pre>&gt; In my on-disk tree, the starter now copies attributes name in a configuration\n&gt; knob from the startd's update ad to its own; this is wrong. It should be\n&gt; reading from the metric configuration.\n</pre></i></div>Still true.\n\n<p></p><div class=\"restricted\"><i><pre>[Implementation detail: the metric updates occurs in publishUpdateAd().  That's\nprobably right.  What does publishJobExitAd() do?  Do the metric updates need to\nhappen there, too?]\n</pre></i></div>Still an open question.\n\n<p></p><hr/>\n<em>2017-Dec-29 17:27:10 by tlmiller:</em> <br/>\n\n<div class=\"restricted\"><i><pre>&gt; In my on-disk tree, the starter now copies attributes name in a configuration\n&gt; knob from the startd's update ad to its own; this is wrong. It should be\n&gt; reading from the metric configuration.\n</pre></i></div>\n<p>Fixed.\n\n</p><p></p><div class=\"restricted\"><i><pre>&gt; The startd generates the job-specific &lt;Resource&gt;Usage automatically. For SUM\n&gt; metrics, this is the change in cumulative Uptime&lt;Resource&gt;Seconds divided by the\n&gt; job duration; for PEAK metrics, this just the Uptime&lt;Resource&gt;PeakUsage\n&gt; (during/as of the end of the job).\n</pre></i></div>The current code only does SUM metrics, but PEAK metrics are actually easier, so that won't take long to fix.\n\n<p></p><div class=\"restricted\"><i><pre>&gt; The startd does not presently but should also generate the Recent&lt;Resource&gt;\n&gt; [Seconds|PeakUsage] and Recent&lt;Resource&gt;Usage automatically.\n</pre></i></div>For emphasis.\n\n<p></p><hr/>\n<em>2018-Jan-03 17:46:25 by tlmiller:</em> <br/>\n\n\n<p></p><div class=\"restricted\"><i><pre>[Implementation detail: the metric updates occurs in publishUpdateAd().  That's\nprobably right.  What does publishJobExitAd() do?  Do the metric updates need to\nhappen there, too?]\n</pre></i></div>publishJobExitAd() now calls the same code as publishUpdateAd() to handle updates from the startd; it can't hurt.\n\n<p></p><div class=\"restricted\"><i><pre>&gt; The startd generates the job-specific &lt;Resource&gt;Usage automatically. For SUM\n&gt; metrics, this is the change in cumulative Uptime&lt;Resource&gt;Seconds divided by the\n&gt; job duration; for PEAK metrics, this just the Uptime&lt;Resource&gt;PeakUsage\n&gt; (during/as of the end of the job).\n</pre></i></div>Done.\n\n<p></p><div class=\"restricted\"><i><pre>&gt; The startd does not presently but should also generate the Recent&lt;Resource&gt;\n&gt; [Seconds|PeakUsage] and Recent&lt;Resource&gt;Usage automatically.\n</pre></i></div>After talking to TJ, this will require writing more custom code than I'd really hoped, which could take a while.  It could also take a while to get the testing outlined above done, so I'm considering delaying current metrics into another ticket to make sure we get something out in the next release.  That would mean giving <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=IceCube\" title=\"Ice Cube\">IceCube</a></span> only one of the two metrics they wanted, initially (a job's average GPU utilization in its ad and via condor_history, and the 'instantaneous' (last minute) utilization broken down by GPU ID.\n\n<p>The latter would mean publishing per-GPU information in the corresponding slot ad; this won't be hard, but will have to be added.\n\n</p><p></p><hr/>\n<em>2018-Jan-13 21:14:52 by tlmiller:</em> <br/>\n\nA few more things to do for the \"basic\" continuous integration test:\n\n<p></p><ol>\n<li>Also check the value(s) in the <code>.update.ad</code>.\n</li><li>Verify that the test (framework) will start the required custom condor (correctly) if it's not already running.\n</li><li>Actually run the test in the BaTLab. ;)\n</li></ol>\n\n<p>The \"advanced\" test should run the same set of tests for multi-device slots, and should be completed before I move on to adding the GPU memory (e.g., PEAK) metric and /its/ tests.\n\n</p><p>At that point, we can either do some of the additional testing/designing from above (that is: partitionable slot ads, what happens on a reconfig, what happens when a continuous cron job restarts / making sure the extra ad isn't lost) or start implementing recent metrics.\n\n</p><p>Note that the continuous integration test's monitor is a periodic cron jobs (rather than continuous) for simplicity, so that's been verified as working just fine.\n\n</p><p></p><hr/>\n<em>2018-Jan-17 16:55:38 by tlmiller:</em> <br/>\n\n<strong>Regarding Error</strong>\n\n<p>One unexpected component <span class=\"chng\"><a href=\"chngview?cn=53141\">[53141]</a></span> was the need to check for an interval more, as well as less then, the expected value.  This got me worried about more-subtle problems that might be hiding in the 5/6 to 7/6 range of allowed values, so I took a closer look to see if we could just allow 5/6, 6/6, and 7/6.*  The answer is no, because the startd presently computes usage as of when it writes the update ad (based on the total usage computed from the previous sample), which means we're occasionally too high because we're not dividing by the full length of the job.\n\n</p><p>The obvious solution is for the startd to compute the usage as of the last sample time, which is more accurate anyway, especially since -- as noted above -- we're not waiting around for the last sample interval anyway.  This still leaves some imprecision stemming from the job not starting at a sample boundary.  However, if we ignore the first (incomplete) interval, we can get an accurate usage number even though the usage we're accumulating is up to two intervals under-counted (because we're not dividing the accumulated value by the duration of those intervals).\n\n</p><p>This should (a) enable the use of exact values in the test and (b) improve the accuracy of the reported usage number in real operation.\n\n</p><p>Additionally, if using a continuous cron job that, like the GPU monitor, samples far more frequently than it reports, the continuous cron job could report a new sample when it detects increased usage, rather than waiting for its whole sampling period; this would cause the startd to include more of the job's usage in its accumulator.  Likewise, an additional sample could be published at the end of GPU usage to include that (assuming the job's spin-down period was long less than the faster sampling rate of the monitor).  We're leaving those as ideas in case it turns out people really do care about the total accumulated values.\n\n</p><p>* That is, the test run is six sampling intervals long.  Ideally, we'd see six samples' worth of usage, but of course we could miss an interval's worth of sampling at the end of the job (since we don't wait for the next sample before deactivating the claim).  It turns out we could also have an extra interval's worth because the startd measures from when it spawns the starter (which may be right before a sample) to some time just before the job ends (which may be right after a sample, if the starter took long enough to spawn the job and/or other race conditions occur).\n\n</p><p></p><hr/>\n<em>2018-Jan-25 19:04:21 by tlmiller:</em> <br/>\n\nThis ticket has gotten large enough, and I believe I've done everything that needs to be done for an 8.7.7 release, except for verify the final packaging works.  I'll break the rest of the 'advanced' testing and features off into their own tickets.\n\n<p></p><hr/>\n<em>2018-Jan-31 15:37:06 by tlmiller:</em> <br/>\n\nAdding 'use feature : gpus' to an RPM installation now reports GPUUsage for jobs.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=6543\" onclick=\"get_ticket_and_populate_wrapper('6543'); return false;\" title=\"Test multiple SUM metrics.\">#6543</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nTest multiple SUM metrics.</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6544\" onclick=\"get_ticket_and_populate_wrapper('6544'); return false;\" title=\"Add GPUsMemoryUsage\">#6544</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAdd GPUsMemoryUsage</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6545\" onclick=\"get_ticket_and_populate_wrapper('6545'); return false;\" title=\"Test GPUsUsage and company with dynamic slots.\">#6545</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nTest GPUsUsage and company with dynamic slots.</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=6546\" onclick=\"get_ticket_and_populate_wrapper('6546'); return false;\" title=\"Investigate custom machine resource monitor behavior in edge cases\">#6546</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nInvestigate custom machine resource monitor behavior in edge cases</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6553\" onclick=\"get_ticket_and_populate_wrapper('6553'); return false;\" title=\"GPUsUsage accounts for multiple GPU devices improperly.\">#6553</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nGPUsUsage accounts for multiple GPU devices improperly.</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=6554\" onclick=\"get_ticket_and_populate_wrapper('6554'); return false;\" title=\"Advanced Custom Machine Resource Tests\">#6554</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAdvanced Custom Machine Resource Tests</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6559\" onclick=\"get_ticket_and_populate_wrapper('6559'); return false;\" title=\"resource usage summary in the user log needs better formatting\">#6559</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nresource usage summary in the user log needs better formatting</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=6564\" onclick=\"get_ticket_and_populate_wrapper('6564'); return false;\" title=\"Report recent metrics for custom machine resources (GPUs)\">#6564</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nReport recent metrics for custom machine resources (GPUs)</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=6569\" onclick=\"get_ticket_and_populate_wrapper('6569'); return false;\" title=\"Test multiple PEAK metrics.\">#6569</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nTest multiple PEAK metrics.</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6605\" onclick=\"get_ticket_and_populate_wrapper('6605'); return false;\" title=\"Revised regression testing milestones.\">#6605</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRevised regression testing milestones.</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7169\" onclick=\"get_ticket_and_populate_wrapper('7169'); return false;\" title=\"Startd can't update starter when EncryptExecuteDirectory=true\">#7169</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nStartd can't update starter when EncryptExecuteDirectory=true</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Feb-08 15:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54242\">[54242]</a></span>: better formatting in userlog for floating point usage values. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6559\" onclick=\"get_ticket_and_populate_wrapper('6559'); return false;\" title=\"resource usage summary in the user log needs better formatting\">#6559</a></span>, part of <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span> this commit also makes the Assigned column optional and makes it round-trip correctly.  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Feb-02 16:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54206\">[54206]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Scrape out some dprintf() spam.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Feb-01 12:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54197\">[54197]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Don't overwrite the StartOfJob* attributes except when reset.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-31 16:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54193\">[54193]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Windows build fix.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-31 15:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54191\">[54191]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Fix .update.ad to work while a rootly condor.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-25 18:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54178\">[54178]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Add use feature: GPUsMonitor to use feature: GPUs. Add documentation.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-25 15:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54177\">[54177]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Fix condor_gpu_utilization to dlopen() for ease of building and distribution, like condor_gpu_discovery. Change condor_gpu_utilization to hang rather than exit in case of problems (to prevent useless churning when part of a continuous startd cron job). Change condor_gpu_utilization.c to .cpp\u00a0[...]\n (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-24 13:46</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54165\">[54165]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Add metaknobs GPUsMonitor and Monitor(). Made startd log less unnecessarily chatty.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-23 11:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54153\">[54153]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Merge branch 'V8_7-gt6477-branch'  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-23 11:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=54147\">[54147]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Temporarily disable condor_gpu_monitor build in the BaTLab. Fix the CI test.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-19 14:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53170\">[53170]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Set the required HTCondor configuration so that run_test.pl actually finds it.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-19 13:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53168\">[53168]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. CI test now checks the intermediate *Usage values in the .update.ad for sanity.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-18 11:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53164\">[53164]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Spoke too soon. Testing code isn't any simpler now, but the set of permissible results is a lot smaller.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-18 11:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53163\">[53163]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Record FirstUpdate* and LastUpdate* and use them to compute a more-accurate *Usage value. This strengthens and simplifies testing.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-13 21:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53141\">[53141]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Basic test now also checks the event log and history file usages for correctness.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-11 15:31</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53140\">[53140]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. First pass at a basic test for custom machine resources.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-11 13:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53139\">[53139]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Implement CPUsUsage.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-10 16:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53137\">[53137]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. condor_status -direct now always includes the internal accumulator(s).  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-02 15:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53078\">[53078]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Pull from startd's update ad when updating on job exit, as well.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jan-02 15:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53077\">[53077]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Compute usage for PEAK metrics automatically.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-29 17:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53076\">[53076]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. The starter now computes (rather than have configured) that metric names of interest.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-29 15:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53075\">[53075]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Renamed metric attributes; startd now computes the job's &lt;resource-name&gt;-seconds/duration values and elides those raw values. Not computing UptimeGPUsUsage because it's probably useless.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-28 13:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53074\">[53074]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Startd now writes the update ad and the starter reads it and forwards a configurable list of attributes to the shadow.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-28 12:46</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53073\">[53073]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. The shadow should pass *Usage attributes from the starter to the schedd as the job runs.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-20 15:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53051\">[53051]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Unset the StartOfJob* attributes in the claim destructor so prevent that attribute from becoming stale.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-15 15:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=53020\">[53020]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Implement PEAK metrics. (Allow for other metric types as well.)  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-01 16:17</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52911\">[52911]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Implement PEAK metrics. (Allow for other metric types as well.)  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-01 14:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52910\">[52910]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Machine resource monitors now explicitly configure which attributes (metrics) to aggregate and how.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-01 11:11</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52902\">[52902]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Implement condor_gpu_utilization, which should arguably be merged into condor_gpu_discovery.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-01 10:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52901\">[52901]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6477\" onclick=\"get_ticket_and_populate_wrapper('6477'); return false;\" title=\"Advertise GPU utilization in the same way as CPU utilization\">#6477</a></span>) Tracking commit. Add isResourceMonitor() and reset_monitors() plumbing; everything else will probably be changed.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2018-Jan-31 15:39", "status": "resolved", "created": "2017-Nov-08 14:10", "fixed_version": "2017-Nov-08 14:10", "broken_version": "", "priority": "2", "subsystem": "DaemonsExecNode", "assigned_to": "tlmiller", "derived_from": "", "creator": "emfajard", "rust": "", "customer_group": "osg", "visibility": "public", "notify": "gonzalo.merino@icecube.wisc.edu,dschultz@icecube.wisc.edu, tannenba@cs.wisc.edu, tlmiller@cs.wisc.edu", "due_date": ""}