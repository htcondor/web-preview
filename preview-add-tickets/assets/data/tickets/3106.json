{"id": 3106, "title": "Ticket #3106: Rotation of shared daemon log can result in writing to old file", "description": "<blockquote>\nWith the change to keep the daemon log file open across multiple calls to dprintf(), when multiple processes are writing to the same logfile, both processes can end up rotating the log. Afterwards, one of the processes will continue writing to a rotated file. The rotated files will not grow beyond the maximum log size.\n\n<p>We observed an example of this with the collector log of the batlab central manager. The collector was writing to <code>CollectorLog.old</code>, and <code>CollectorLog</code> contained 4 lines from the time <code>CollectorLog.old</code> was rotated. We believe the collector and a child it spawned to answer a query rotated the log, parent first and child second. The child wrote 3 lines to the new file and exited. The parent continued to write to the file rotated by the child.\n\n</p><p>This is undesirable, as the latest log entries are written to an old file, where they can be easily missed by an admin. This will also affect the schedd, shadow, and gridmanager, all of which can have multiple processes writing to the same logfile.</p></blockquote>", "remarks": "<blockquote>\n<em>2012-Jul-03 16:41:23 by bbockelm:</em> <br/>\n\nMy $0.02:\n\n<p>The \"most generic, completely race-free solution\" requires nasty locking, using syslog (yay!), or basically re-implementing syslog inside the condor_master.\n\n</p><p>The \"cheapest\" solution I can think of is OS-specific: use inotify and a watch fd to determine when a logfile rotates.  The \"very close to race free, but expensive in syscalls\" way to do this is to poll the watch fd prior to every line of logging.  The \"quicker, but a bit racy\" way is to have <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> select loop poll the watch fd for you.  Regardless, you'd want to still have a timer that manually checks the status of the log periodically, as there are some weirdo corner cases in inotify.\n\n</p><p></p><hr/>\n<em>2012-Jul-10 13:47:19 by jfrey:</em> <br/>\n\nHere's a change that should make this situation much rarer: When a daemon decides that it's time to rotate the log, it first closes the fd and stats the log file by filename. If that indicates that the file needs to be rotated, then the daemon performs the rotation. In either case, it then reopens the file. If there's a lock file configured for the log, it should be locked during this entire sequence of events.\n\n<p>When there isn't a lock file, there's still a race condition between two processes statting the file and renaming it. But it's a very narrow window of time.\n\n</p><p></p><hr/>\n<em>2012-Jul-10 14:04:36 by jfrey:</em> <br/>\n\nTJ suggests having a single daemon log rotation lock file used by all daemons when doing log rotation. This guarantees all log rotations are done atomically.\n\n<p></p><hr/>\n<em>2014-Sep-03 14:14:15 by tannenba:</em> <br/>\n\nAbandoning this ticket, as this is no longer an issue.\n\n<p>The log file of a shared daemon log (by default, the shadow and gridmanager) uses a lock file when rotating the log to prevent problems, as per Jaime's suggestion above.\n\n</p><p>Unfortunately, when a lock file is specified (eg <code>SHADOW_LOCK</code>) it looks like the log file is still continuously opened/closed upon every call to dprintf, although flock() is only called when the file is rotated.  But improving this is the subject of a different ticket.\n\n</p><p></p><hr/>\n<em>2014-Sep-05 14:02:58 by jfrey:</em> <br/>\n\nThis is still a problem.\n\n<p>Here is a new proposed fix (different than the one made before), that addresses the case where a daemon forks off a short-lived helper process (e.g. the collector or schedd creating a child process to handle a client query).\nIn the child process, the dprintf() code is instructed to never rotate the debug log and to close the log file after every write (like the shadow and gridmanager do).\n\n</p><p>With this change, the log can grow beyond the maximum size when a child writes to it, before being rotated by the main daemon. But if child processes are relatively short lived, then the excess size will be limited.\n\n</p><p></p><hr/>\n<em>2014-Sep-05 14:05:07 by jfrey:</em> <br/>\n\nDaemonCore::Create_Thread() and the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ForkWork\" title=\"Fork Work\">ForkWork</a></span> class are the two primary places where the altered dprintf() behavior in child processes would be triggered.\n\n<p></p><hr/>\n<em>2014-Oct-06 14:01:34 by johnkn:</em> <br/>\n\nCODE REVIEW: patch looks good.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4753\" onclick=\"get_ticket_and_populate_wrapper('4753'); return false;\" title=\"Daemon log rotation broken when using clone()\">#4753</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDaemon log rotation broken when using clone()</td></tr>\n</tbody></table>", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/846/log_no_rotate.patch\">log_no_rotate.patch</a>\n1667 bytes added by jfrey on 2014-Sep-10 16:44:01 UTC.\n<br/>\nPatch to fix log rotation problems due to helper processes forked by a daemon.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Oct-24 13:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=41452\">[41452]</a></span>: Rotation of shared daemon log can result in writing to old file <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3106\" onclick=\"get_ticket_and_populate_wrapper('3106'); return false;\" title=\"Rotation of shared daemon log can result in writing to old file\">#3106</a></span> When a daemon forks off a helper process on unix, the child process now reopens the log file on every write and doesn't perform log rotation. This fixes a bug where both parent and child will rotate the log, and one ends up continuing\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Oct-06 14:30</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=41329\">[41329]</a></span>: Rotation of shared daemon log can result in writing to old file <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3106\" onclick=\"get_ticket_and_populate_wrapper('3106'); return false;\" title=\"Rotation of shared daemon log can result in writing to old file\">#3106</a></span> When a daemon forks off a helper process on unix, the child process now reopens the log file on every write and doesn't perform log rotation. This fixes a bug where both parent and child will rotate the log, and one ends up continuing\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2014-Oct-06 14:31", "status": "resolved", "created": "2012-Jul-03 16:12", "fixed_version": "2012-Jul-03 16:12", "broken_version": "v070800", "priority": "4", "subsystem": "Daemons", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "johnkn@cs.wisc.edu,jfrey@cs.wisc.edu", "due_date": ""}