{"id": 2205, "title": "Ticket #2205: PERMISSION DENIED to unauthenticated@unmapped from host <garbage>", "description": "<blockquote>\nThe current master (targetting 7.7.0) occasionally writes log messages that look like this:\n<div class=\"code\">\n<pre class=\"code\">06/01/11 18:12:56 PERMISSION DENIED to unauthenticated@unmapped from host \u001a\ufffd\ufffd\ufffd\ufffd\ufffd\u007f\ufffd(\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd</pre></div>\n\nThis is obviously bad.\n\n<p>Investigation:\n</p><div class=\"strike\">\n<strike>\n1: gdb refuses to debug these binaries for me.  It eventually fails with\n{code}\nDetaching after fork from child process 3232.\nwarning: Can't attach LWP -1: No such process\n../../gdb/linux-thread-db.c:389: internal-error: thread_get_info_callback: Assertion `inout-&gt;thread_info != NULL' failed.\nA problem internal to GDB has been detected,\nfurther debugging may prove unreliable.\nQuit this debugging session? (y or n)\n{endcode}\nI haven't dug deeper to see if my system is hosed or what.\n</strike></div>\n\n\n<p></p><ol>\n<li>The code in question (DaemonCore::Verify <a class=\"file\" href=\"rlog?f=src/condor_daemon_core.V6/daemon_core.cpp\">/src/condor_daemon_core.V6/daemon_core.cpp</a> line 2903) is this:\n<div class=\"code\">\n<pre class=\"code\">\t\tchar ipstr[IP_STRING_BUF_SIZE];\n\t\taddr.to_ip_string(ipstr, sizeof(ipstr));\n\t//sin_to_ipstring(sin,ipstr,IP_STRING_BUF_SIZE);\n\n\t\t\t// Note that although this says D_ALWAYS, when the result is\n\t\t\t// ALLOW, we only get here if D_SECURITY is on.\n\t\tdprintf( D_ALWAYS,\n\t\t\t\t \"PERMISSION %s to %s from host %s for %s, \"\n\t\t\t\t \"access level %s: reason: %s\\n\",\n\t\t\t\t result_desc,\n\t\t\t\t (fqu &amp;&amp; *fqu) ? fqu : \"unauthenticated user\",\n\t\t\t\t ipstr,\n\t\t\t\t command_descrip ? command_descrip : \"unspecified operation\",\n\t\t\t\t PermString(perm),\n\t\t\t\t reason-&gt;Value() );\n</pre></div>\n\nprintf debugging reveals that inside addr.to_ip_string, everything is working fine.  just befor to_ip_string returns, ipstr contain a valid address, indeed it's the IP address for the local host (probably a child process).  However, as soon as to_ip_string returns, everything is trashed.</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<em>2011-Jun-01 20:50:53 by nwp:</em> <br/>\n\nThe fact that data seems to be being overwritten points to a buffer overflow somewhere, I think.  Maybe gdb is giving up because it cannot find the stack frame.  My shot from the hip for the day.\n\n<p></p><hr/>\n<em>2011-Jun-02 12:04:11 by adesmet:</em> <br/>\n\n<ul>\n<li>Rebuilding from scratch, Just In Case\n</li><li>Will retry GDB, this time with \"USE_CLONE_TO_CREATE_PROCESSES = false\", which I forgot.  (Surprised that the failure case is an internal GDB error)\n</li><li>psilord proposes turning off -O2 on the files in question.  Will try.\n</li></ul>\n\n<p></p><hr/>\n<em>2011-Jun-02 12:55:30 by adesmet:</em> <br/>\n\n<ul>\n<li>GDB problem: fixed by turning off cloning.\n</li><li>Garbage output: Immediate cause: Code path was asked to convert an invalid sockaddr_in struct into a string.  New question: why are invalid sockaddr_ins reaching this point.  Digging...\n</li></ul>\n\n<p></p><hr/>\n<em>2011-Jun-02 13:33:50 by adesmet:</em> <br/>\n\nReliSock::accept(ReliSock &amp;c) (<a class=\"file\" href=\"rlog?f=src/condor_io/reli_sock.cpp\">/src/condor_io/reli_sock.cpp</a> line 182) modifies c._sock directly.  As a result, c never becomes aware that it needs to rebuild c._who with the correct peer information.  Correct solution is probably to instead call c.assign() (which also happily eliminates the need to call c.move_descriptor_up()).\n\n<p></p><hr/>\n<em>2011-Jun-02 14:04:32 by adesmet:</em> <br/>\n\nWorth noting: the PERMISSION DENIED errors are probably because the permission system failed because the IP addresses were invalid.\n\n<p></p><hr/>\n<em>2011-Jun-07 10:02:25 by adesmet:</em> <br/>\n\npmackinn is still seeing the related behavior of\n\n<p></p><div class=\"code\">\n<pre class=\"code\">06/06/11 17:42:01 (fd:6) (pid:23161) Setting up command socket\n06/06/11 17:42:01 (fd:6) (pid:23161) CONDOR_INHERIT: \"23114  0 9*6*0*0*0*0***1**0*0* 10*2*0*0*0*0***0** 0\"\n06/06/11 17:42:01 (fd:6) (pid:23161) Parent PID = 23114\n06/06/11 17:42:01 (fd:6) (pid:23161) Parent Command Sock = 0\n06/06/11 17:42:01 (fd:6) (pid:23161) ERROR \"Daemoncore: Can only inherit SafeSock or ReliSocks, not 9 (57)\" at line 8890 in file /home/pmackinn/repos/uw/condor/CONDOR_SRC/src/condor_daemon_core.V6/daemon_core.cpp\n</pre></div>\n\n\n<p>I believe this fix fixed that, but he is seeing it on the head of the master which includes the fix.\n\n</p><p></p><hr/>\n<em>2011-Jun-07 10:03:15 by adesmet:</em> <br/>\n\npmackinn is observing on Fedora Core 14, 32-bit.\n\n<p></p><hr/>\n<em>2011-Jun-07 10:34:20 by adesmet:</em> <br/>\n\nCode paths to follow:\n<ul>\n<li>DaemonCore::CreateProcess <a class=\"file\" href=\"rlog?f=src/condor_daemon_core.V6/daemon_core.cpp\">/src/condor_daemon_core.V6/daemon_core.cpp</a> line 7171 reading \"inheritbuf += InfoCommandSinfulStringMyself(true);\" - Trace in and confirm that <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=InfoCommandSinfulStringMyself\" title=\"Info Command Sinful String Myself\">InfoCommandSinfulStringMyself</a></span> is returning something valid.\n</li></ul>\n\n<p></p><hr/>\n<em>2011-Jun-07 11:41:12 by adesmet:</em> <br/>\n\nNo longer convinced that \"Daemoncore: Can only inherit <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SafeSock\" title=\"Safe Sock\">SafeSock</a></span> or <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSocks\" title=\"Reli Socks\">ReliSocks</a></span>\" is related to this bug.  Forking that off into <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2216\" onclick=\"get_ticket_and_populate_wrapper('2216'); return false;\" title=\"IPv6: IP/hostname lookup problems when hostname maps to localhost\">#2216</a></span></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jun-02 14:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=22092\">[22092]</a></span>: Don't monkey around with another object's member variables; you circumvent important code. Not even if you're the same class. Assigning the file descriptor for a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> should always go through ReliSock::asign. Failure to do so means any attempt to call ReliSock::get_peername will fail.\u00a0[...]\n (By Alan De Smet )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2011-Jun-09 11:46", "status": "resolved", "created": "2011-Jun-01 18:23", "fixed_version": "2011-Jun-01 18:23", "broken_version": "v070700", "priority": "1", "subsystem": "", "assigned_to": "adesmet", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}