{"id": 4849, "title": "Ticket #4849: Rewrite all ads leaving collector on single-node pool", "description": "<blockquote>\n(Split off from <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4833\" onclick=\"get_ticket_and_populate_wrapper('4833'); return false;\" title=\"IPv6 bugfixes for 8.3.2\">#4833</a></span>.)\n\n<p>(It's not really a bug, but an issue when using dual-stack for the HTCondor-CE - so important for the OSG.)  In the case where all daemons are on a single node, we can perform address rewriting for all ads leaving the collector.  We should loosen the IP address rewriting rules to only match the IP, not the whole sinful.\n</p><ul>\n<li>Less aggressive, but would still fix the HTCondor-CE case is only rewriting ads when the sinful strings match <strong>or</strong> the same shared_port server is used.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2015-Jan-16 11:21 by tlmiller:</em>\n\n<p>I don't recall it at the moment -- more later, possibly, or maybe on Tuesday when Alan gets back -- but there's a really good reason we can't rewrite based only on IP address; it may not apply in this special case.  I guess we could offer a knob to force the collector to rewrite other people's ads?\n\n</p><p></p><hr/>\n<em>2015-Jan-17 07:48:35 by bbockelm:</em>\n\n<p>Yeah, I went back and forth whether to rewrite based on (IP address) or (IP address+port+using shared_port).  I picked the less conservative choice in the commit; however, rewriting only sinfuls on the same shared port server would be fine with me and fix this use case.\n\n</p><p></p><hr/>\n<em>2015-Jan-26 12:57:40 by adesmet:</em> <br/>\n\nWhat's the use case where this matters?  Why do you have single-node pools that provides usable ads to other machines both IPv4 and IPv6?\n\n<p></p><hr/>\n<em>2015-Jan-27 12:29:05 by bbockelm:</em> <br/>\n\nHi Alan,\n\n<p>The use case here is HTCondor-CE.  It is a single-node setup that offers an offsite network service.  We'd like to be able to support IPv4-only, IPv6-only, and mixed-mode clients.\n\n</p><p>In master (or 8.3.3 branch), if IPv6 is enabled, IPv4-only HTCondor-G clients will receive a IPv6 sinful when querying for the schedd.  As this would break the majority of clients, we can't really turn on IPv6 for HTCondor-CE right now.\n\n</p><p>Thanks!\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2015-Feb-09 15:44:00 by adesmet:</em> <br/>\n\nAfter discussion, Todd and I think such a patch is reasonable if it's hidden behind a default-off knob. This is adding a non-trivial amount of complexity to a chunk of code we want to kill. Adding complexity means adding support for the near term. Hopefully by hiding it behind a knob support issues will be minimized.\n\n<p></p><hr/>\n<em>2015-Feb-11 14:58:51 by bbockelm:</em> <br/>\n\nWith apologies to Alan and Todd, I'm switching the parent ticket to the OSG master ticket instead of the IPv6 one (as we're calling this an OSG-specific hack).\n\n<p>Too bad we can't derive from multiple tickets :(.  Let me know if this will ruin your day.\n\n</p><p></p><hr/>\n<em>2015-Feb-12 07:53:09 by bbockelm:</em> <br/>\n\nTodd or Alan,\n\n<p>Can you do a quick review of the newly posted branch?\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2015-Feb-16 16:47:54 by adesmet:</em> <br/>\n\nSorry, I had only looked at it briefly and got caught on the big picture issues, which is what Todd and I discussed. Looking closer, I see a number of things that I think should change.  My apologies, since on quick glance it looks like these were present in the previous offering.\n\n<p><strong>CODE REVIEW</strong>: Needs work.\n\n</p><p></p><ul>\n<li><code>SHARED_PORT_ADDRESS_REWRITING</code> is missing from <a class=\"file\" href=\"rlog?f=src/condor_utils/param_info.in\">/src/condor_utils/param_info.in</a> Should come with a comment about being born deprecated.\n\n<p></p></li><li>Should we document <code>SHARED_PORT_ADDRESS_REWRITING</code> in the version history and reference? If so, should it include a note that it was born deprecated?\n\n<p></p></li><li>my_hostname.cpp line 553: <code>\"Sinful commandPortSinful(commandPortSinfulString.c_str());\"</code> Initializing with this is misleading; it's never used. Why not move into the loop and re-initialize with *it each time?\n\n<p></p></li><li><code>DaemonCore::CommandSocksSinful:</code>\n<ul>\n<li>Code indenting is a mix of spaces and tabs. Should be tabs (to match rest of file).\n</li><li>Should be clearly marked as deprecated. Do not want new code to use.\n</li><li>Partially incompletely duplicates logic in <code>InfoCommandSinfulStringMyself</code>.\n<ul>\n<li>Rename to match? <code>InfoCommandSinfulStringsMyself?</code>\n</li><li>Arguably the difference is okay since the only user doesn't need the full sinfuls. But, the function becomes a landmine.\n</li><li>Should one be implemented in terms of the other to ensure they don't drift in implementation?  Maybe have <code>InfoCommandSinfulStringMyself(int index)</code> that both call?  Or have ICSSM call this and itself return the first element?\n</li></ul>\n</li><li>Is the caching <code>(m_dirty_command_sock_sinfuls)</code> redundant with caching in <code><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=InfoCommandSinfulStringMyself\" title=\"Info Command Sinful String Myself\">InfoCommandSinfulStringMyself</a></span> (m_dirty_sinful)?</code>  Almost certainly if one is implemented in terms of the other.\n</li></ul>\n\n<p></p></li><li><code>SharedPortEndpoint::GetMyRemoteAddresses</code>\n<ul>\n<li>Piggybacking <code>GetMyRemoteAddress</code> to set up cached information is too clever.  Create <code>EnsureInitRemoteAddress</code> which does<div class=\"code\">\n<pre class=\"code\">\tif( m_remote_addr.IsEmpty() &amp;&amp; m_retry_remote_addr_timer==-1 ) {\n\t\tRetryInitRemoteAddress();\n\t}</pre></div>\n and have both <code>GetMyRemoteAddress</code> and <code>GetMyRemoteAddresses</code> call it.  (Check for other possible duplicate code. Looks like <code>SharedPortEndpoint::GetMyRemoteAddress</code> has that logic.)\n</li></ul>\n\n<p></p></li><li><code>SharedPortEndpoint::InitRemoteAddress</code>\n<ul>\n<li><code>SharedPortCommandSinfuls</code> should be <code>#defined</code> in condor_includes/condor_attributes.h\n</li><li>Possible simplification: Eliminate <code>m_remote_addr</code> entirely.  Ensure that the first entry in <code>SharedPortCommandSinfuls</code> is the best default and that the order is preserved when it's <code>m_remote_addrs.push_back()ed.</code> Have <code>SharedPortEndpoint::GetMyRemoteAddress()</code> just return <code>m_remote_addrs.empty()?\"\":m_remote_addrs[0].</code>  All code wanting <code>m_remote_addrs</code> should call <code>SharedPortEndpoint::GetMyRemoteAddress()</code> instead, or nose around into <code>m_remote_addrs.</code>  If <code>SharedPortCommandSinfuls</code> isn't present, fall back on <code>ATTR_MY_ADDRESS</code> and insert it as the only entry in <code>m_remote_addrs.</code> (Or possibly jettison the <code>ATTR_MY_ADDRESS</code> logic entirely since we don't support mixing versions on a single host.)\n</li></ul>\n\n<p></p></li><li><code>SharedPortServer::PublishAddress</code>\n<ul>\n<li>Why bother with <code>commandAddresses;</code> could go straight to <code>commandAddressesSL:</code> <div class=\"code\">\n<pre class=\"code\">\tfor (std::vector&lt;Sinful&gt;::const_iterator it=mySinfuls.begin(); it!=mySinfuls.end(); it++)\n\t{\n\t\tcommandAddressesSL.insert(it-&gt;getSinful()-&gt;c_str());\n\t}</pre></div>\n\n</li><li><code>SharedPortCommandSinfuls</code> should be <code>#defined</code> in <code>condor_includes/condor_attributes.h</code>\n</li></ul>\n</li></ul>\n\n<p></p><hr/>\n<em>2015-Feb-16 21:18:44 by bbockelm:</em> <br/>\n\n<ul>\n<li><code>SHARED_PORT_ADDRESS_REWRITING</code> is missing from <a class=\"file\" href=\"rlog?f=src/condor_utils/param_info.in\">/src/condor_utils/param_info.in</a> Should come with a comment about being born deprecated.\n\n<p></p><ul>\n<li>DONE.\n</li></ul>\n\n<p></p></li><li>Should we document <code>SHARED_PORT_ADDRESS_REWRITING</code> in the version history and reference? If so, should it include a note that it was born deprecated?\n\n<p></p><ul>\n<li>I purposely didn't do this yet.  I wanted to chat about it on Tuesday and will do in a follow-up commit.\n</li></ul>\n\n<p></p></li><li>my_hostname.cpp line 553: <code>\"Sinful commandPortSinful(commandPortSinfulString.c_str());\"</code> Initializing with this is misleading; it's never used. Why not move into the loop and re-initialize with *it each time?\n\n<p></p><ul>\n<li>Artifact of old branch.  FIXED.\n</li></ul>\n\n<p></p></li><li><code>DaemonCore::CommandSocksSinful:</code>\n<ul>\n<li>Code indenting is a mix of spaces and tabs. Should be tabs (to match rest of file).  FIXED.\n</li><li>Should be clearly marked as deprecated. Do not want new code to use.  FIXED.\n</li><li>Partially incompletely duplicates logic in <code>InfoCommandSinfulStringMyself</code>.\n<ul>\n<li>I'm reluctant to do this as this function is \"born deprecated\".  In particular, the single-sinful version has very different ownership semantics from the vector version which prevents rewriting the one in terms of the other without rewriting all the call sites.\n</li></ul>\n</li><li>Is the caching <code>(m_dirty_command_sock_sinfuls)</code> redundant with caching in <code><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=InfoCommandSinfulStringMyself\" title=\"Info Command Sinful String Myself\">InfoCommandSinfulStringMyself</a></span> (m_dirty_sinful)?</code>  Almost certainly if one is implemented in terms of the other.\n<ul>\n<li>Without rewriting the one in terms of the other, I'm leaving this open.\n</li></ul>\n</li></ul>\n\n<p></p></li><li><code>SharedPortEndpoint::GetMyRemoteAddresses</code>\n<ul>\n<li>Piggybacking <code>GetMyRemoteAddress</code> to set up cached information is too clever.\n<ul>\n<li>DONE\n</li></ul>\n</li></ul>\n</li><li><code>SharedPortEndpoint::InitRemoteAddress</code>\n<ul>\n<li><code>SharedPortCommandSinfuls</code> should be <code>#defined</code> in condor_includes/condor_attributes.h\n<ul>\n<li>DONE.\n</li></ul>\n</li><li>Possible simplification: Eliminate <code>m_remote_addr</code> entirely.\n<ul>\n<li>I'm reluctant to do this.  I'd rather keep these changes self-contained so they're simpler to remove in the future.\n</li></ul>\n</li></ul>\n\n<p></p></li><li><code>SharedPortServer::PublishAddress</code>\n<ul>\n<li>Why bother with <code>commandAddresses;</code> could go straight to =commandAddressesSL:\n<ul>\n<li>DONE.\n</li></ul>\n</li></ul>\n</li></ul>\n\n<p></p><hr/>\n<em>2015-Feb-17 14:36:02 by adesmet:</em> <br/>\n\n<strong>CODE REVIEW</strong> Approved.\n\n<p>I'm convinced. Approved for merge.\n\n</p><p>Let's skip documentation: it's deprecated, has few potential users, will likely confuse users who try it unnecessarily, and we'd probably forget to purge it when we remove the feature.\n\n</p><p>That said, there should be some documentation, at the very least for our fellow developers. Brian, would you be willing to toss up a quick and dirty page about SHARED_PORT_ADDRESS_REWRITING here on the Wiki that opens with \"DANGER: COMPLETELY UNSUPPORTED AND NOT RECOMMENDED?\"\n\n</p><p></p><hr/>\n<em>2015-Feb-17 15:06:51 by bbockelm:</em> <br/>\n\nWiki page is created.\n\n<p>Since there are new code commits, doing one more batlab build for sanity's sake and will then merge.\n\n</p><p></p><hr/>\n<em>2015-Feb-17 22:25:19 by bbockelm:</em> <br/>\n\nBuild looked good in batlab; merged.  Moving ticket to ... resolved?</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6525\" onclick=\"get_ticket_and_populate_wrapper('6525'); return false;\" title=\"Remove all rewriting of sinful strings in ads going on the wire\">#6525</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRemove all rewriting of sinful strings in ads going on the wire</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Feb-16 21:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43377\">[43377]</a></span>: Fixes from code review. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4849\" onclick=\"get_ticket_and_populate_wrapper('4849'); return false;\" title=\"Rewrite all ads leaving collector on single-node pool\">#4849</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Feb-11 22:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43336\">[43336]</a></span>: Aggressively rewrite shared port addresses. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4848\" onclick=\"get_ticket_and_populate_wrapper('4848'); return false;\" title=\"Address rewriting only considers first command socket\">#4848</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4849\" onclick=\"get_ticket_and_populate_wrapper('4849'); return false;\" title=\"Rewrite all ads leaving collector on single-node pool\">#4849</a></span> If SHARED_PORT_ADDRESS_REWRITING is set to true, THEN:\u00a0[...]\n (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Jan-14 22:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=42222\">[42222]</a></span>: Fix various IPv6 issues. <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4833\" onclick=\"get_ticket_and_populate_wrapper('4833'); return false;\" title=\"IPv6 bugfixes for 8.3.2\">#4833</a></span> In particular: 1) Make sure the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=InitCommandSockets\" title=\"Init Command Sockets\">InitCommandSockets</a></span> code does not rely on the TCP port and UDP port being the same. In the case of the collector- behind-shared-port, the collector listens on UDP 9618 and a random TCP port. Previously, the code caused the collector to listen\u00a0[...]\n (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2015-Apr-13 14:36", "status": "resolved", "created": "2015-Jan-23 14:35", "fixed_version": "2015-Jan-23 14:35", "broken_version": "v080303", "priority": "4", "subsystem": "Daemons", "assigned_to": "tlmiller", "derived_from": "#4882", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelm@cse.unl.edu, tlmiller@cs.wisc.edu, adesmet@cs.wisc.edu", "due_date": ""}