{"id": 2432, "title": "Ticket #2432: sizeof(off_t) simultaneously 4 and 8, causes much grief.", "description": "<blockquote>\nSome portions of Condor have been modified to handle large files  This was done by setting\n<div class=\"code\">\n<pre class=\"code\">#define _FILE_OFFSET_BITS 64\n</pre></div>\n\nin the cpp files where it is needed: access_euid.unix.cpp, dprintf.cpp, and condor_open.cpp.  This works okay, until some code using off_t exists in both files that do and don't set _FILE_OFFSET_BITS=64. If you do, the errors will likely be non-obvious, there is a good change of silent memory corruption as you write 8-byte values into a structure with space for 4.  This very problem has happened.  It's a landmine, and if you hit it, working around it is difficult and verbose as you need to carefully segregate the 4 and 8 byte code paths. Z has run into it while working on the dprintf code.\n\n<p>Proposed fixes.\n\n</p><p></p><ol>\n<li><strong>#define _LARGEFILE64_SOURCE and $define _LARGEFILE_SOURCE everywhere</strong>. Existing code relying on _FILE_OFFSET_BITS=64 would need to be modified to use off64_t, fseeko64, and friends. Existing code would continue working and could be modified to use the 64-bit types and functions on an incremental basis.  Windows has slightly different functions; we can create condor_off64_t, condor_fseek64, and friends and implement on each platform. The implementations should be quite brief.\n\n<p></p></li><li><strong>#define _FILE_OFFSET_BITS 64 everywhere</strong>.  While the ideal goal as Condor would handle large files everywhere, it is very dangerous as there are almost certainly places where we put file sizes and offsets into an int or unsigned int.  Handling this would requiring checking the entire life-span usage of every variable passed in out return from a function dealing in off_ts.  Any variable those variables touched would similarly need to be checked, and so on.  High risk, requires getting everything right.\n\n<p></p></li><li><strong>Don't change anything</strong>  Very high risk. If someone bumps into the problem, it's very hard to identify.  Fixing it involves moving functions and structures into different files and keeping them completely isolated.  If someone later causes the files to interact, bugs will reappear.</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<em>2011-Sep-01 11:14:25 by ziliang:</em> <br/>\n\nThis bug actually can break the splitting of debug output to multiple files since dprintf_config fills in the array of off_t assuming they are size 4.  Then when dprintf uses that array, it believes they are 8 and will read in the combined two entries.  This means if there are two debug levels next to each other in the array used to organize their information, we get the wrong values for the max log size and can even end up being zero.  The current fix is to also define _FILE_OFFSET_BITS in dprintf_config.cpp since the off_t array elements are internal to the dprintf system.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Sep-01 11:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=27052\">[27052]</a></span>: Make off_t be the same size in dprintf.cpp and dprintf_config.cpp by having them both include the _FILE_OFFSET_BITS define. Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=2432\" title=\"sizeof(off_t) simultaneously 4 and 8, causes much grief.\">#2432</a></span>.  (By Ziliang Guo )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2011-Sep-07 12:05", "status": "resolved", "created": "2011-Aug-31 14:40", "fixed_version": "2011-Aug-31 14:40", "broken_version": "", "priority": "3", "subsystem": "", "assigned_to": "ziliang", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}