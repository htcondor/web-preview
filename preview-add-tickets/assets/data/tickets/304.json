{"id": 304, "title": "Ticket #304: Find a way to work around valid Layered Service Provider (LSP) on Win.", "description": "<blockquote>\nA common problem for Condor on Windows is improperly written Layered Service Providers (LSP).  It would be nice to find a way to work around valid LSPs on Window, so that Condor could co-exist with them.\n\n<p>From Wikipedia:\n\n</p><p>\"A Layered Service Provider (LSP) is a feature of the Microsoft Windows Winsock 2 Service Provider Interface (SPI). A Layered Service Provider is a DLL that uses Winsock APIs to insert itself into the TCP/IP stack. Once in the stack, a Layered Service Provider can intercept and modify inbound and outbound Internet traffic. It allows processing all the TCP/IP traffic taking place between the Internet and the applications that are accessing the Internet (such as a web browser, the email client, etc).\"\n\n</p><p>If possible, it would be nice if Condor could automatically bypass any of the installed LSPs and thus never fall victim to a broken one.  Also, doing this would allow for applications that depend on the LSP to run in conjunction with, or as a job managed by Condor (currently, if the LSP \"breaks\" the socket, Condor will simply not work).\n\n</p><p>For the Condor explanation of things, see:\n\n</p><p><a class=\"external\" href=\"http://www.cs.wisc.edu/condor/manual/v7.2/7_4Condor_on.html#SECTION008414000000000000000\">http://www.cs.wisc.edu/condor/manual/v7.2/7_4Condor_on.html#SECTION008414000000000000000</a></p></blockquote>", "remarks": "<blockquote>\n<em>2009-Mar-09 11:15:38 by burnett:</em> <br/>\n\nShort of intercepting socket calls, or reverting to Winsock 1.x, there seem to be no way to disable LSPs across Windows flavours.  The exception is Vista, which supports protecting process from malformed LSPs.  Via the <code>WSCSetApplicationCategory()</code> API, Condor can select which layered service provider (LSP) categories are associated with its daemons.\n\n<p></p><hr/>\n<em>2009-Oct-21 15:35:34 by psilord:</em> <br/>\n\nBen Burnett has left the Condor Project. This ticket is being unassigned.\n<hr/>\n<em>2010-Oct-20 15:59:08 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.\n<hr/>\n<em>2011-Jan-27 14:21:33 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 14:49:30 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2015-Mar-07 15:44:49 by tannenba:</em> <br/>\n\nUsing newer Winsock APIs introduced since Vista, I think we finally can deal with LSPs by default.\n\n<p>The problem is LSPs implementations may be sloppy and fail to implement\nsocket inheritance features. So our algorithm is as follows -\nFirst, we get the real kernel handle, which can be obtained on\nrecent Windows versions (Vista and newer) via an ioctl call.\nIf it turns out that _sock is a real kernel handle, we\ncan likely just call <code>SetHandleInformation()</code> which is Microsoft's\ncurrent recommendation for changing the inheritance of a socket.\nBut if _sock is from an LSP, of <code>SetHandleInformation()</code> fails for\nsome reason, then we duplicate the kernel handle into a new\nsocket that has the inheritance we want, and close the original _sock.\n\n</p><p>As for documentation, besides the Version History blurb, I updated FAQ Wiki page <span class=\"wiki\"><a href=\"wiki?p=WhyDaemonsExitThousandThirtyEight\" title=\"Why Daemons Exit Thousand Thirty Eight\">WhyDaemonsExitThousandThirtyEight</a></span>.</p></blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/97/LSP_Best_Practices_05_14_07.doc\">LSP_Best_Practices_05_14_07.doc</a>\n190464 bytes added by burnett on 2009-Sep-05 02:55:52 UTC.\n<br/>\nSome MS documentation that might help figure out why some LSPs missbehave.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-07 15:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43546\">[43546]</a></span>: Version history entry for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=304\" title=\"Find a way to work around valid Layered Service Provider (LSP) on Win.\">#304</a></span>.  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-07 15:23</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43545\">[43545]</a></span>: Improve how CEDAR inherits sockets on Windows. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=304\" title=\"Find a way to work around valid Layered Service Provider (LSP) on Win.\">#304</a></span> This patch leverages improved Winsock calls introduced since Vista to a) set socket inheritance status without the need to duplicate the socket (typically), and b) support socket inheritance even if a Winsock Layered Service Provider (LSP) is installed\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-07 15:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43544\">[43544]</a></span>: Improve some dprintfs in CEDAR. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=304\" title=\"Find a way to work around valid Layered Service Provider (LSP) on Win.\">#304</a></span> Dprintf D_NETWORK messages when closing UDP sockets, and also when sockets fail to close. Also move some messages from D_FULLDEBUG to D_NETWORK where they below.  (By Todd Tannenbaum )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2015-Mar-07 15:44", "status": "resolved", "created": "2009-Mar-06 16:52", "fixed_version": "2009-Mar-06 16:52", "broken_version": "v070300", "priority": "3", "subsystem": "Win32", "assigned_to": "tannenba", "derived_from": "", "creator": "tannenba", "rust": "a19063", "customer_group": "other", "visibility": "public", "notify": "tannenba@cs.wisc.edu johnkn@cs.wisc.edu jfrey@cs.wisc.edu", "due_date": ""}