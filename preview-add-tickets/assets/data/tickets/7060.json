{"id": 7060, "title": "Ticket #7060: Easy way to do \"condor_submit_dag\" from Python", "description": "<blockquote>\nBased on discussions at HTCondor week, it'd be useful if there was a \"simple\" way to submit DAGs to HTCondor, via the python bindings, based on an existing DAG file.\n\n<p>We should do this short-term while we are thinking through the official DAG API that includes constructing the DAG itself.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-May-21 14:31:46 by coatsworth:</em> <br/>\n\nI already have a Python binding for DAGMan ready to go. The API for using it looks something like this:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">dag = htcondor.Dag()\ndag.LoadFromFile(\"sleep.dag\")\ndag_args = {\n\t\"maxidle\" : 10,\n\t\"maxpost\": 5\n}\nsubmit = dag.Submit(dag_args)\n\nschedd = htcondor.Schedd()\nwith schedd.transaction() as txn:\n\tcluster_id = submit.queue(txn, 1)\n\tprint(\"Submit.queue returned cluster_id = \" + str(cluster_id))\n</pre></div>\n\n\n<p>This effort stalled a few months ago and there were two main reasons for this:\n\n</p><p></p><ol>\n<li>The binding fundamentally depends on a .dag file and always will. There was a lot of opposition to this.\n</li><li>Josh was looking into an interface to programatically generate DAGs, and we were colliding on the API namespace.\n</li></ol>\n\n<p>The second problem is easily solved. The first one is not. Removing the dependency on the .dag file is a massive engineering effort that is not realistic. I think we need to accept this in order to move forward.\n\n</p><p></p><hr/>\n<em>2019-May-21 14:46:04 by bbockelm:</em> <br/>\n\nCan we simplify this slightly?  How about:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">with open(\"sleep.dag\", \"r\") as fp:\n    dag = htcondor.Dag(fp.read())\n\nschedd = htcondor.Schedd()\nwith schedd.transaction() as txn:\n\thandle = dag.queue(maxidle = 10, maxpost = 5)\n\tprint(\"Submit.queue returned cluster_id = {}\".format(handle.cluster()))\n</pre></div>\n\n\n<p></p><hr/>\n<em>2019-May-21 14:50:52 by karpel:</em> <br/>\n\n<code>dag = htcondor.Dag.from_file(path_to_file)</code> is much saner. Users should not have to read the file in themselves.\n\n<p>Having a single <code>htcondor.Dag</code> (<code>htcondor.DAG</code>?) object without needing another <code>htcondor.Submit</code> makes more sense to me.\n\n</p><p>The actual submission seems sensible, but I don't know enough about DAGs to say which arguments should be part of the <code>htcondor.Dag</code> object and which should be arguments to the <code>queue</code> command.\n\n</p><p></p><hr/>\n<em>2019-May-21 14:56:57 by bbockelm:</em> <br/>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \ndag = htcondor.Dag.from_file(path_to_file) is much saner. Users should not have to read the file in themselves.\n</td></tr></tbody></table></div>\n\n\n<p>Sounds good to me.  I went with the constructor-based approach for symmetry with <code>Submit</code>.\n\n</p><p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nHaving a single htcondor.Dag (htcondor.DAG?) object without needing another htcondor.Submit makes more sense to me.\n</td></tr></tbody></table></div>\n\n\n<p>I like <code>DAG</code>.  I think of <code>Submit</code> as meaning \"submit file\" object, not \"submit to queue\".  Hence, since <code>DAG</code> is separate file format, I thought it made a lot of sense to have a separate object.\n\n</p><p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nThe actual submission seems sensible, but I don't know enough about DAGs to say which arguments should be part of the htcondor.Dag object and which should be arguments to the queue command.\n</td></tr></tbody></table></div>\n\n\n<p>Given I want the <code>DAG</code> object to represent a DAG file, I think of <code>queue</code> as the instantiation of the DAG -- hence I put the arguments in the <code>queue</code> method.\n\n</p><p></p><hr/>\n<em>2019-May-21 14:59:32 by coatsworth:</em> <br/>\n\nThis is shorter but not simpler. Also there are some things that just won't work, ie. passing file pointers as function parameters won't work in Windows.\n\n<p>We should discuss the API offline. I also want to get some feedback from Collin and other users so we make these decisions based on what they need, not what we think is best.\n\n</p><p></p><hr/>\n<em>2019-May-21 15:21:33 by karpel:</em> <br/>\n\nRelated question, now that I'm actually reading the ticket: do the bindings themselves need an in-memory DAG representation if there's no way to use it except to write out actual files? Or do we just need a high-level tool (<code>htcondor-jobs</code> or whatever) that helps users make those files in a sensible way?\n\n<p></p><hr/>\n<em>2019-May-22 07:43:27 by bbockelm:</em> <br/>\n\nRight - that's a good point.  So, the syntax becomes:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">dag = htcondor.Dag(filename=\"sleep.dag\")\n\nschedd = htcondor.Schedd()\nwith schedd.transaction() as txn:\n\thandle = dag.queue(maxidle = 10, maxpost = 5)\n\tprint(\"Submit.queue returned cluster_id = {}\".format(handle.cluster()))\n</pre></div>\n\n\n<p></p><hr/>\n<em>2019-Jun-01 15:54:35 by karpel:</em> <br/>\n\nGiven that there's currently no plan to let you do anything but submit an existing DAG file, why not\n\n<p></p><div class=\"code\">\n<pre class=\"code\">import htcondor\n\nschedd = htcondor.Schedd()\nwith schedd.transaction() as txn:\n\thandle = htcondor.submit_dag(path_to_dagfile, maxidle = 10, maxpost = 5)\n\tprint(\"cluster_id = {}\".format(handle.cluster()))\n</pre></div>\n\n\n<p>Doubly-so given that even if we added an API for building DAG files, we would want to keep that in-memory representation quite separate from the submission process to emphasize that the file on disk is the source of truth for DAGMan.\n\n</p><p></p><hr/>\n<em>2019-Aug-06 11:29:36 by coatsworth:</em> <br/>\n\nThis ticket is a duplicate of <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6275\" title=\"Python binding for condor_submit_dag\">#6275</a></span>, and since I was referencing that ticket in my commits I'm going to make it the \"official\" ticket for the <code>condor_submit_dag</code> python binding. The work is also complete at this point so I'm marking this as resolved, version history and documentation will reference <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=6275\" title=\"Python binding for condor_submit_dag\">#6275</a></span>.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2019-Sep-09 09:45", "status": "abandoned", "created": "2019-May-21 14:13", "fixed_version": "2019-May-21 14:13", "broken_version": "", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "coatsworth", "derived_from": "#6275", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelman@morgridge.org, coatsworth@cs.wisc.edu, karpel@wisc.edu", "due_date": ""}