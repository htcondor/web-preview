{"id": 3323, "title": "Ticket #3323: getProcInfoRaw performs useless retries", "description": "<blockquote>\nCurrent code has the number of attempts to find the pid in /proc hard coded at 5. That's 5 passes per pid.  Logs are showing as much as 68010 failed tries in 12 minutes. Looking at the logs further, I find that the scenario is that either there is 5 failed attempts per pid or success on the first try. Multiple attempts aren't required. The issue with multiple attempts is that the Master is spending upwards of 30s processing these while also failing to process Childalives.</blockquote>", "remarks": "<blockquote>\n<hr/>\n<em>2013-Jan-22 10:54:51 by johnkn:</em> <br/>\n\nBulk change of target version from v070903 to v070904 using ./ticket-target-mover.\n<hr/>\n<em>2013-Mar-05 10:58:27 by johnkn:</em> <br/>\n\nBulk change of target version from v070904 to v070905 using ./ticket-target-mover.\n<hr/>\n<em>2013-Apr-22 11:10:10 by johnkn:</em> <br/>\n\nBulk change of target version from v070905 to v070906 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2013-Aug-23 19:05:55 by eje:</em> <br/>\n\nTESTING\n\n<p>config requires disabling procd:\n</p><div class=\"code\">\n<pre class=\"code\">USE_PROCD = False\nMASTER_DEBUG = D_FULLDEBUG  D_PROCFAMILY\n\n# new option to reduce failed attempts to get proc info\nPROC_INFO_NUM_ATTEMPTS = 1\n</pre></div>\n\n\n<p>To repro failed attempts at get-proc-info, spin up a pool, and run a few jobs.  Watch <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MasterLog\" title=\"Master Log\">MasterLog</a></span>:\n</p><div class=\"code\">\n<pre class=\"code\">$ tail -f MasterLog | grep 'does not exist'\n</pre></div>\n\n\n<p>Now shoot the job processes in the head.  It may be most effective to do this a few times repeatedly.\n</p><div class=\"code\">\n<pre class=\"code\">$ pkill -9 condor_starter\n$ pkill -9 condor_shadow\n</pre></div>\n\n\n<p>Eventually you should see master fail to find some of these processes.  The original behavior is that it will try each pid 5 times:\n</p><div class=\"code\">\n<pre class=\"code\">$ tail -f MasterLog | grep 'does not exist'\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15867 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15867 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15867 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15867 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15867 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15868 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15868 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15868 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15868 does not exist.\n08/23/13 16:40:52 ProcAPI::getProcInfo() pid 15868 does not exist.\n</pre></div>\n\n\n<p>With the new code update, you can set 'PROC_INFO_NUM_ATTEMPTS = 1', and it will only attempt each pid once:\n</p><div class=\"code\">\n<pre class=\"code\">$ tail -f MasterLog | grep 'does not exist'\n08/23/13 16:46:27 ProcAPI::getProcInfo() pid 27424 does not exist.\n08/23/13 16:46:27 ProcAPI::getProcInfo() pid 27425 does not exist.\n08/23/13 16:46:27 ProcAPI::getProcInfo() pid 27426 does not exist.\n08/23/13 16:46:27 ProcAPI::getProcInfo() pid 27427 does not exist.\n</pre></div>\n\n\n<p></p><hr/>\n<em>2013-Aug-23 19:06:52 by eje:</em> <br/>\n\ntopic branch: V8_1-gt3323-get-proc-info-optimize\n\n<p></p><hr/>\n<em>2013-Sep-13 10:52:08 by johnkn:</em> <br/>\n\nCODE_REVIEW: this patch is rejected.\n\n<p>The problem is not the number of retries, the problem is that there are <strong>some</strong> failure conditions that should be treated as a reason to break out of the retry loop because there is no reason to expect to get a different answer on retry.\n\n</p><p>Instead of adding a configuration knob for retry count, the PROCAPI_NOPID &amp; PROCAPI_PERM errors should just unconditionally break out of the loop.\n\n</p><p></p><hr/>\n<em>2013-Sep-13 11:23:55 by jrt:</em> <br/>\n\nI don't disagree, but I don't know the history of the code.  Evidently the original author thought there would be a different answer on a retry. Hence a knob that preserves old behavior vs. a change that has no way to revert.\n\n<p></p><hr/>\n<em>2013-Sep-13 12:37:41 by johnkn:</em> <br/>\n\nIf you feel that there should be a knob to disable bailing out of the loop on NOPID and NOACCESS conditions, then I won't object to that. But I don't believe that the knob is necessary.\n\n<p>Review the commit history of this code to see why the author though the loop was necessary. I'm convinced that the retries are sometimes necessary.\n\n</p><p></p><hr/>\n<em>2013-Sep-13 13:02:21 by eje:</em> <br/>\n\nIf there are return codes that are <strong>guaranteed</strong> unrecoverable, then a hard breakout on those seems like a good strategy.\n\n<p>The original motivation for the ticket was that multiple retries were causing condor_master performance problems.  With that in mind, a return-independent throttle on retries seems like the only way to guarantee that repeated failures can't swamp condor_master.\n\n</p><p></p><hr/>\n<em>2013-Sep-26 17:20:56 by eje:</em> <br/>\n\nThe code history for ProcAPI::getProcInfoRaw() indicates that the read of the /proc/* files themselves is unreliable:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">// read the entry a certain number of times since it appears that linux\n// often simply does something stupid while reading.\n</pre></div>\n\n\n<p>I found no indication whether or not /proc/* read failures were fixed at a later date.\n\n</p><p>The source of failure is independent of any particular return code, so retaining the iteration on failure is still prudent.\n\n</p><p></p><hr/>\n<em>2013-Oct-11 16:51:53 by tannenba:</em> <br/>\n\nThe retries in procapi are mainly there for dealing with failing to read consistent info out of the /proc/pid file (it is not 'snapshot' safe). We have no reason to think that we need to retry if we fail to open the pid file due to ENOENT or EPERM. Thus after discussion with eje and others, decided to not add yet another knob but instead fix the root of the issue: do not do the retries in the event of ENOENT or EPERM (as suggested in the code review).  All the reported problems were related to ENOENT, so we should be good.\n\n<p>p.s. not sure this warrants a version history item, as it isn't really user visible... resolving.</p></blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/648/proc.patch\">proc.patch</a>\n528 bytes added by jrt on 2012-Nov-14 14:30:06 UTC.\n<br/>\nPatch to add knob. \n\n<p>The data from the RHEL platform suggests that the loop could removed. I'm not sure about other versions of Linux. The knob allows a backout and behavior preservation.<br/>\n</p></li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-11 16:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37824\">[37824]</a></span>: Do not do needless retries in ProcAPI. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3323\" onclick=\"get_ticket_and_populate_wrapper('3323'); return false;\" title=\"getProcInfoRaw performs useless retries\">#3323</a></span>  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Aug-23 18:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37330\">[37330]</a></span>: On topic branch: Add performance tuning parameter PROC_INFO_NUM_ATTEMPTS ===GT:Fixed=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3323\" onclick=\"get_ticket_and_populate_wrapper('3323'); return false;\" title=\"getProcInfoRaw performs useless retries\">#3323</a></span> Committer: Erik Erlandson  (By Jon Thomas )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2013-Oct-11 16:54", "status": "resolved", "created": "2012-Nov-14 08:29", "fixed_version": "2012-Nov-14 08:29", "broken_version": "v070604", "priority": "3", "subsystem": "Libs", "assigned_to": "tannenba", "derived_from": "", "creator": "jrt", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tstclair@redhat.com, eje@cs.wisc.edu, johnkn@cs.wisc.edu", "due_date": ""}