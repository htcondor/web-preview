{"id": 6923, "title": "Ticket #6923: Python Bindings: streamlined submit semantics", "description": "<blockquote>\nWhen you <code>condor_submit</code> from the command line, you don't need to explicitly provide a schedd or transaction if you don't want to. So why do you need to from the bindings?\n\n<p>This ticket changes the signatures of <code>Submit.queue</code> and <code>Submit.queue_with_itemdata</code> so that all of the arguments are keyword arguments, changes the meaning of one of the existing arguments, and adds a new optional argument. The argument ordering is the same, so this will not break existing users.\n\n</p><p><strong>Semantics change of old argument:</strong> <code>txn</code> (transaction) will be now be optional. If it is <code>None</code>, a <code>Transaction</code> will be created and used internally. if a <code>Transaction</code> is given, it is used to submit the job, just like it is now.\n\n</p><p><strong>New optional argument:</strong> <code>schedd</code>. If <code>None</code>, submits to the local <code>Schedd</code>.\n\n</p><p><code>txn</code> and <code>schedd</code> cannot both be non-=None=, because if you have a <code>Transaction</code> you should just pass it in. If they are both passed, we throw a <code>ValueError</code>.\n\n</p><p>Combined, this means you don't need to do the \"get a <code>Schedd</code>, get a <code>Transaction</code>, then submit\" rigmarole if you're doing what most users do: submit to the local schedd. You just create your <code>Submit</code> and <code>queue</code> it, which mirrors the behavior on the command line (create a submit file, then submit it).\n\n</p><p>All of this will be implemented via pure-Python wrappers over the existing C++ bindings code. No changes are necessary to the underlying bindings.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Feb-20 20:33:12 by bbockelm:</em> <br/>\n\n&gt; When you condor_submit from the command line, you don't need to explicitly provide a schedd or transaction if you don't want to. So why do you need to from the bindings?\n\n<p>Because the transaction model - and the relation between submission and the proxy object (the Schedd) - is very important?\n\n</p><p>The analogy is teaching someone about SQL without teaching them about transactions.  Sure, your SQL client probably has an autocommit mode, but at some point the concept of a transaction is pretty important to the model.\n\n</p><p>So, I see this as \"help people get going to the point they realize you simplified away a core concept they need to know\".\n\n</p><p>With that in mind, still think the approach is correct here?\n\n</p><p></p><hr/>\n<em>2019-Feb-20 20:41:39 by karpel:</em> <br/>\n\n&gt; So, I see this as \"help people get going to the point they realize you simplified away a core concept they need to know\".\n\n<p>I am unconvinced that most users ever need to know about transactions at all.\n\n</p><p>Admins should, but admins will be digging deeper into the API anyway.\n\n</p><p></p><hr/>\n<em>2019-Feb-20 20:50:22 by bbockelm:</em> <br/>\n\n&gt; I am unconvinced that most users ever need to know about transactions at all.\n\n<p>I think that's still compatible with my analogy and statement.  The majority of DB users are a-OK with autocommit mode, hence the fact its default in most (all?) SQL clients I am aware of!\n\n</p><p>However, it's still a core concept!\n\n</p><p>Hence my question is whether there should be some explicit space put between the \"streamlined\" mode and the existing syntax.\n\n</p><p>Another case to pull from is <code>libcurl</code>, whose C API has an \"easy\" mode -- and the corresponding function names are all called <code>easy_*</code>.  Should this be <code>submit</code> or <code>easy_submit</code>?  A class method or a module-level method?\n\n</p><p></p><hr/>\n<em>2019-Feb-20 21:57:14 by karpel:</em> <br/>\n\nI guess that, as a user, I don't consider submitting jobs without a transaction to be \"unsafe\" in the same way that autocommiting partial changes to a DB is, because (at least from my perspective) a single queue command is atomic.\n\n<p>I think a better analogy from DB-world would be that this aims to be the equivalent of making a blog post through your Wordpress web interface instead of writing the text and metadata into the DB yourself. Power-users and admins might need that for maximum whatever, but most people just want to get their blog post up.\n\n</p><p></p><hr/>\nAn example from Python-world would be how Requests' sessions work (<a class=\"external\" href=\"http://docs.python-requests.org/en/master/user/advanced/#session-objects\">http://docs.python-requests.org/en/master/user/advanced/#session-objects</a>). You create a <code>Session</code> and then make multiple requests from it, as if it were the main library API.\n\n<p>They let you shoot yourself in the foot by doing a lot of requests to the same place without making a <code>Session</code>, but it is the first major \"advanced\" topic, and I imagine if you google \"help my requests are slow\", the first thing you'll find is that.\n\n</p><p>It seems like the equivalent for us would be being able to do <code>Schedd.submit(submit_obj)</code>, or do <code>txn = Schedd.transaction(); txn.submit(submit_obj)</code>. But it seems that the bindings have been moving away from that kind of API.\n\n</p><p></p><hr/>\n<em>2019-Feb-20 22:55:32 by bbockelm:</em> <br/>\n\n&gt; I don't consider submitting jobs without a transaction to be \"unsafe\" in the same way that autocommiting partial changes to a DB is\n\n<p>I don't see autocommit as unsafe: rather, it's a significant simplification.\n\n</p><p>In terms of the bindings -- what about a module-level function of <code>htcondor.submit</code>?  <code>htcondor.ez_submit</code>?\n\n</p><p></p><hr/>\n<em>2019-Feb-21 14:37:45 by karpel:</em> <br/>\n\nAbandoned in favor of <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=6926\" onclick=\"get_ticket_and_populate_wrapper('6926'); return false;\" title=\"Python Bindings: Easy Submit and Cluster Handle\">#6926</a></span></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2019-Feb-21 14:37", "status": "abandoned", "created": "2019-Feb-20 19:54", "fixed_version": "2019-Feb-20 19:54", "broken_version": "", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "karpel", "derived_from": "#6907", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu,jpatton@cs.wisc.edu,tannenba@cs.wisc.edu,bbockelman@morgridge.org,johnkn@cs.wisc.edu,tlmiller@cs.wisc.edu", "due_date": ""}