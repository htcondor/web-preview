{"id": 1072, "title": "Ticket #1072: Review of Sinful's use of std::string", "description": "<blockquote>\nstd::string::c_str never returns NULL. At best it returns an empty string whose first char is NULL.\n\n<p>Sinful::getSinful,getHost,getPort are ambiguous as to if they should return NULL or not. They return c_str. There are numerous places in the code that assume calls to Sinful's methods can return NULL, e.g. if (sinful.getSinful) blah, and also places that will have problems if the methods return NULL, e.g. dprintf(..., \"%s\", sinful.getSinful).\n\n</p><p>This issue was encountered after a condor_collector failed to bind to the proper default port when it wasn't specified as part of COLLECTOR_HOST, and other processes failed attempt to contact the collector on the default port, e.g.\n\n</p><p></p><div class=\"verbatim\">\n<pre>$ condor_config_val -dump | grep -e ^\"COLLECTOR_HOST \" -e ^CONDOR_HOST\nCOLLECTOR_HOST = $(CONDOR_HOST)\nCONDOR_HOST = $(FULL_HOSTNAME)\n\nCollectorLog:\n...\nDaemonCore: command socket at &lt;192.168.1.101:62862&gt;\n...\n\nSchedLog:\n...\nattempt to connect to &lt;192.168.1.101:0&gt; failed: Can't assign requested address (connect errno = 49).  Will keep trying for 20 total seconds (20 to go).\n...\n</pre></div>\n\n\n<p>Assumption is that the functions should be able to return NULL, primarily because the Sinful code itself appears to assume they should be able to return NULL. Some analysis of Sinful functions and their uses:\n\n</p><p></p><div class=\"verbatim\">\n<pre>getCCBContact\n ccb_client.cpp - legit, sketchy based on return_address\n daemon.cpp - legit\ngetPrivateAddr\n daemon.cpp - legit\n shared_port_endpoint.cpp - legit\ngetPrivateNetworkName\n daemon.cpp - leginq\ngetSharedPortID\n daemon.cpp - legit\n cedar_no_ckpt.cpp - legit\n masterDaemon.cpp - legit\ngetSinful\n claim.cpp - legit, allow NULL\n masterDaemon.cpp - %s (bug)\n shared_port_endpoint.cpp - legit, allow NULL, MyString = NULL\n daemon.cpp - %s (bug),\n daemon_core.cpp - assume NULL (bug)\n ccb_server.cpp - assume NULL (bug)\n ccb_client.cpp - legit (assumes if getCCBContact then getSinful non-NULL)\ngetHost\n cedar_no_ckpt.cpp - strcmp\n daemon.cpp - assume NULL (bug)\n udp_waker.cpp - strncpy, assume NULL (bug)\n ccb_server.cpp - %s (bug)\ngetPort\n cedar_no_ckpy.cpp - assume NULL (bug)\n ccb_server.cpp - %s (bug)\ngetPortNum\n daemon.cpp - assume -1 (bug) &lt;- where i entered\n\nsetHost - host = NULL (bug)\nsetPort - port = NULL (bug)\nsetPort - m_port = int (bug)\n</pre></div>\n\n\n<p>Other notes:\n\n</p><p></p><ul>\n<li>claim.cpp thought getSinful could return NULL\n</li><li>masterDaemon.cpp tries to %s getSinful\n</li><li>shared_port_endpoint.cpp relies on MyString's NULL handling\n</li><li>shared_port_endpoint.cpp tests getPrivateAddr for NULL, can't happen\n</li><li>daemon_core.cpp returns getSinful, assumes it can be NULL (<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=InfoCommandSinfulString\" title=\"Info Command Sinful String\">InfoCommandSinfulString</a></span>)\n</li><li>daemon.cpp tries to %s getSinful\n</li><li>ccb_server.cpp assumes getSinful can return NULL\n</li><li>ccb_client.cpp tries to %s getSinful, and strcmp (return_address)\n</li><li>could use a typedef for map\n</li><li>Daemon::New_addr str -&gt; str, why?\n</li></ul>\n\n<p>Attached is a patch that resolves the COLLECTOR_HOST bug by allowing Sinful methods to return NULL, but also exposes bugs where the methods are assumed to not return NULL (see list above).</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Dec-21 11:07:17 by danb:</em> <br/>\n\nThanks for the patch, Matt!  In your patch, the fix for %s NULL in masterDaemon was backwards.\n\n<p>You say that shared_port_endpoint.cpp checks for NULL return from <code>getPrivateAddr()</code> even though this can never happen.  It <em>can</em> happen.  All URL \"params\" do return NULL if they do not exist.  Thankfully, your patch makes the other functions such as <code>getPort()</code> and <code>getHost()</code> consistent with this.</p></blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/130/sinful.patch\">sinful.patch</a>\n2732 bytes added by matt on 2009-Dec-17 04:33:06 UTC.\n<br/>\nA sinful patch.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-06 13:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16829\">[16829]</a></span>: Fix issues with empty/NULL strings in Sinful. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1072\" title=\"Review of Sinful's use of std::string\">#1072</a></span> This is a combination of Matt's patch plus a few other fixes.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-23 17:17</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16779\">[16779]</a></span>: Fix issues with empty/NULL strings in Sinful. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1072\" title=\"Review of Sinful's use of std::string\">#1072</a></span> This is a combination of Matt's patch plus a few other fixes. Committer: Alan De Smet  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-21 11:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16741\">[16741]</a></span>: Fix issues with empty/NULL strings in Sinful. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1072\" title=\"Review of Sinful's use of std::string\">#1072</a></span> This is a combination of Matt's patch plus a few other fixes.  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2009-Dec-21 11:20", "status": "resolved", "created": "2009-Dec-16 22:32", "fixed_version": "2009-Dec-16 22:32", "broken_version": "v070400", "priority": "2", "subsystem": "Daemons", "assigned_to": "danb", "derived_from": "", "creator": "matt", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu dan@hep.wisc.edu", "due_date": ""}