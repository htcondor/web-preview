{"id": 1846, "title": "Ticket #1846: FileTransfer::CommitFiles is not fault tolerant", "description": "<blockquote>\nIf there is a crash or filesystem error in the middle of <code>FileTransfer::CommitFiles()</code>, the job's spool can get into an inconsistent state that is not detected by Condor on restart.  If it is a job that uses the spool as a checkpoint, the job could rerun with some files as they were prior to the failed commit and some as they were in the failed commit.\n\n<p>This commit happens in a tight loop, uninterrupted by communication or copying of data, so the window of vulnerability is small.\n\n</p><p>In <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1844\" onclick=\"get_ticket_and_populate_wrapper('1844'); return false;\" title=\"shadow fails to replace output directories in spool\">#1844</a></span> I had to make some changes to <code>CommitFiles()</code> to support replacement of non-empty directories within the sandbox.  In order to do this, a third directory (swap) was introduced where files/directories to be replaced are moved.  This \"swap\" directory could be used to implement rollback in case of an aborted commit.  Some additional bookkeeping would be needed to clean up new files added during the failed commit.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Jan-10 12:25:28 by danb:</em> <br/>\n\nWait, I was wrong!\n\n<p>When <code>CommitFiles()</code> is interrupted, the operation is completed on the next run attempt before uploading files to the starter.  Condor is perfect.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "defect", "last_change": "2011-Jan-10 12:26", "status": "abandoned", "created": "2011-Jan-10 11:50", "fixed_version": "2011-Jan-10 11:50", "broken_version": "v070000", "priority": "4", "subsystem": "Daemons", "assigned_to": "", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}