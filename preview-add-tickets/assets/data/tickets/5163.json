{"id": 5163, "title": "Ticket #5163: Buffer received messages from ReliSock", "description": "<blockquote>\nCurrently, there's no buffering on the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> for <strong>receiving data</strong> (unlike sending data, which is buffered until 4KB or EOM).  Each thing coded on the socket (string, integer) is a separate call to recv() (and two fcntl and a poll).\n\n<p>This is especially obvious when receiving <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> updates (NOTE: during later investigation, it was revealed that the problematic case is qmgmt updates, not <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>).  Each attribute in an ad requires two recv()'s, meaning each attribute is about 10 syscalls.\n\n</p><p>I think <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RcvMsg\" title=\"Rcv Msg\">RcvMsg</a></span> should do a non-blocking read into a buffer; if there's insufficient bytes immediately available, then repeat the blocking read with precisely the number of bytes required.</p></blockquote>", "remarks": "<blockquote>\n<em>2015-Jul-22 22:03:14 by bbockelm:</em> <br/>\n\nChatting with Jaime, there might be something more subtle here (we think that it does \"the right thing\" in many cases).  Maybe this only occurs when in non-blocking mode?\n\n<p></p><hr/>\n<em>2015-Aug-03 08:55:39 by bbockelm:</em> <br/>\n\nFound some time to poke around at this one -\n\n<p><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> didn't seem to be the problem in the end.  Instead, it was a lot of the QMGMT commands (for example, condor_submit results in two recvfrom() syscalls per attribute; condor_shadow updates have a similar cost).\n\n</p><p>Enabling buffering in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> isn't too tricky - will push a branch soon.  The tricky part is the interplay between <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> and the Selector object; as the file descriptor no longer has bytes to read, it is no longer marked as ready by select.  Hence, any code touching ReliSock's must explicitly understand the buffered mode.\n\n</p><p>Accordingly, I left buffering off by default and only enabled it for DaemonCore-managed sockets and places where the socket has a short managed lifetime.  This will prevent such buffered sockets from leaking to places like the python bindings.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Aug-03 08:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=45451\">[45451]</a></span>: Allow <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> to buffer incoming data. <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=5163\" onclick=\"get_ticket_and_populate_wrapper('5163'); return false;\" title=\"Buffer received messages from ReliSock\">#5163</a></span> This adds a buffered mode to the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> (off by default) which keeps a 4KB buffer internal to the socket object itself. As the buffer mode will screw up polling of the underlying FD, it is only enabled for sockets registered for read in DC.  (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2016-Nov-16 10:42", "status": "review", "created": "2015-Jul-17 08:57", "fixed_version": "2015-Jul-17 08:57", "broken_version": "", "priority": "3", "subsystem": "", "assigned_to": "tannenba", "derived_from": "#5162", "creator": "bbockelm", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "", "due_date": ""}