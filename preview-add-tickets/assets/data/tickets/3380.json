{"id": 3380, "title": "Ticket #3380: Foolproof mechanism for JobRouter routes", "description": "<blockquote>\nRight now, the HTCondor-CE job routes are defined in the configuration file using a simple, declarative language.  This allows us to evaluate, set, and delete attributes from the source ad when creating the destination ad.\n\n<p>There are a few problems:\n</p><ul>\n<li>Some things are impossible to do in this framework.  For example, OSG puts all its environment variables in an external file; this file is read by Globus and the proper variables are inserted into the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span>.  It's not possible to do this in a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobRoute\" title=\"Job Route\">JobRoute</a></span> - you can't do IO or loops with classads.\n<ul>\n<li>Hence, we need to make the job router hooks plausible for a normal sysadmin to use.\n</li></ul>\n</li><li>There is no mechanism to test or validate job routes.\n<ul>\n<li>Everyone, including me, who has worked with HTCondor-CE has lost a few hours of time due to a misplaced \";\" or using \"#\" as a comment character in the new-classad.\n</li></ul>\n</li><li>Job hooks exist for the transform, but it's nearly impossible to write them well.  Most admins will be tempted to write a shell script.  <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> parsing rules are pretty complex, especially when it comes to quoting.  I suspect writing a compliant classad parser is well outside a normal admin's skillset.\n</li></ul>\n\n<p>To fix this, I propose two improvements:\n</p><ul>\n<li>Building a python wrapper library for libclassad.  This will allow admins to safely parse and manipulate <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> in a job hook.\n</li><li>Build a job route tester and validator.  It should, given the on-disk configuration\n<ul>\n<li>Validate the job routes can be parsed\n</li><li>Given a job classad, show which routes would match.  Does not need to analyze why routes <strong>do not</strong> match; we don't need a \"condor_router_q -analyze\" at this point.\n</li><li>Given a job classad and a router, print the resulting classad.</li></ul>\n</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2012-Dec-28 09:47:02 by bbockelm:</em> <br/>\n\nFor the callout mechanism, see the following project:\n\n<p><a class=\"external\" href=\"https://github.com/bbockelm/python-classad\">https://github.com/bbockelm/python-classad</a>\n\n</p><p></p><hr/>\n<em>2013-Jan-04 18:47:02 by bbockelm:</em> <br/>\n\nHere's an example job hook, written using the classad bindings.\n\n<p></p><div class=\"verbatim\">\n<pre>#!/usr/bin/python\n\nimport sys\nimport classad\n\nroute_ad = classad.ClassAd(sys.stdin.readline())\nseparator_line = sys.stdin.readline()\nassert separator_line == \"------\\n\"\nad = classad.parseOld(sys.stdin)\n\nad[\"Universe\"] = 5\nad[\"GridResource\"] = \"condor localhost localhost\"\nif \"x509UserProxyFirstFQAN\" in ad and \"/cms\" in ad.eval(\"x509UserProxyFirstFQAN\"):\n    ad[\"AccountingGroup\"] = \"cms.%s\" % ad.eval(\"Owner\")\nelse:\n    ad[\"AccountingGroup\"] = \"other.%s\" % ad.eval(\"Owner\")\n\nprint ad.printOld(),\n</pre></div>\n\n\n<p></p><hr/>\n<em>2014-Feb-25 11:21:37 by bbockelm:</em> <br/>\n\nThe callout script is now easy to do.  What's left is the \"job route tester and validator\" portion.\n\n<p></p><hr/>\n<em>2014-Sep-08 10:39:28 by blin:</em> <br/>\n\nThe work in this ticket was half done and the remaining work now lives in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4569\" onclick=\"get_ticket_and_populate_wrapper('4569'); return false;\" title=\"Debugging tools for JobRouter.\">#4569</a></span>. Closing this ticket.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2014-Sep-08 12:05", "status": "resolved", "created": "2012-Dec-13 18:58", "fixed_version": "2012-Dec-13 18:58", "broken_version": "", "priority": "4", "subsystem": "Daemons", "assigned_to": "danb", "derived_from": "#3275", "creator": "bbockelm", "rust": "", "customer_group": "osg", "visibility": "public", "notify": "bbockelm@cse.unl.edu, dweitzel@cse.unl.edu, marian.zvada@cern.ch", "due_date": ""}