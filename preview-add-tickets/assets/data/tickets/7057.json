{"id": 7057, "title": "Ticket #7057: Improve the \"process all files in a directory\" use case", "description": "<blockquote>\nIt is surprisingly hard to process all the files in a single directory.  For example, see <a class=\"external\" href=\"https://agenda.hep.wisc.edu/event/1325/session/3/contribution/40/material/slides/0.pptx\">https://agenda.hep.wisc.edu/event/1325/session/3/contribution/40/material/slides/0.pptx</a>\n\n<p>This gets effectively impossible once one needs to start escaping the contents of the job <code>Arguments</code> and <code>TransferInput</code>; in TJ's example, it was ultimately impossible to do and these had to be re-parsed out of the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> at runtime.\n\n</p><p>We should:\n\n</p><p></p><ol>\n<li>Provide an alternate mechanism for providing a list of arguments.  Could even be a JSON-formatted structure in the submit file.\n</li><li>Provide a mechanism for providing a list of files to transfer where filenames can be any arbitrary, valid platform filename.\n</li></ol>\n\n<p>Both could most likely non-default or something optimized for integration with the Python bindings.  The goal is that we get to the point where we can process arbitrary directories of files \"without any tricks\".</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2019-May-20 20:36", "status": "new", "created": "2019-May-20 20:36", "fixed_version": "2019-May-20 20:36", "broken_version": "", "priority": "3", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "bbockelman@morgridge.org", "due_date": ""}