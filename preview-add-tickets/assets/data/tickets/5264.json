{"id": 5264, "title": "Ticket #5264: condor_kbdd can't authenticate to X Server", "description": "<blockquote>\nThere are several reports that the condor_kbdd daemon isn't working, both in the UW-CS department and at customer sites.  From inspection, there are several problems with this daemon. This ticket will try to memorialize information learned about the daemon, how it is intended to work, and how the X Window System authenticates and propagates events.\n\n<p>The condor_kbdd is designed to either run as real user ID root (most likely started from init at boot time), or to run as a non-privileged user (most likely as a personal condor).  In the latter case, it can only connect to the X server it is running as the same user who is using the desktop.\n\n</p><p><span class=\"section\"></span></p><h2>X Authentication methods</h2>\n\n<p>In either case, the first thing the daemon must do is to connect and authenticate to the X server.  As of this writing, there are six methods that an X server use to authenticate, but only two seem to be in widespread use.  Apparently, most X servers are configured to only use one of them at any one time.  Also, modern X servers no longer listen on a TCP network port, rather, they only support local connections from a Unix domain socket.\n\n</p><p>MIT-MAGIC-COOKIE-1 is one common method for authentication.  At X server start, the X server is given via the -auth command line option, a set of cookies that it will use to authenticate clients.  The X startup script will generally put one of these cookies in a place in the filesystem a user can read it, and set their XAUTHORITY environment variable to point to this file.  Historically, this has been in the user's $HOME directory, and the condor keyboard daemon assumes that, but modern systems put the file under the tmpfs mounted /run or /var/run/gdm-someString/.\n\n</p><p>Server Independent is the other common method.  This has several submethods, one of which is \"localuser\".  If xhost shows SI:localuser:yourusername, then this method is in place.  This method ignores the XAUTHORITY environment variable and the file it points to, it just uses the Unix Domain socket SCM_CREDENTIALS sendmg system call to authenticate that the caller is running with the effective user id the server likes.\n\n</p><p>An authorized user can run xhost to authorize other local users.  So, one way to\nreliably allow the condor_kbdd to be able to authenticate is to somehow have the logged on user run:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">xhost SI:localuser:condor\n</pre></div>\n\n\n<p>On some Xservers, once authenticated, there are no privilege levels within the X server -- any authenticated client can read any keyboard press in any window, can send synthetic events to any window, can close any window, and so son.  Other X Servers support the SECURITY extension (xdpyinfo shows what extensions are loaded), and can generate two kinds of cookies: trusted and untrusted.  Clients that authenticate with untrusted cookies cannot get keypress events from windows they didn't create. It is unclear to me how this trust model works with SI:localuser authentication.\n\n</p><p><span class=\"section\"></span></p><h2>condor_kbdd connection attempts</h2>\n\n<p>The condor_kbdd first tries to connect to the X server as the root user, or the uid it was born as, if it is running as unprivileged daemon.  If this fails it reads all logged in users via the utmp file, and set-privs to that user, and sets the XAUTHORITY environment variable to that user's home directory.  Bug number one is that there is a cadence problem with this loop -- it always switches to the user id of the previous user in the loop.  This triggers bug number 2 -- it can init_user_ids to root, which is as of 8.4 condor, a fatal error.  If it still can't connect the XDisplay, it params for XAUTHORITY_USERS, and walks that list.  It is unclear to me when a user would have an active connection to our X server, with a valid .Xauthority file on the local disk, but no /etc/utmp entry.\n\n</p><p><span class=\"section\"></span></p><h2>Finding idle time</h2>\n\n<p>Once successfully connected, the condor_kbdd registers for interest in keyboard events on every window, and on window creation events.  Then, every 5 seconds, it drains the event queue, looking for keyboard press events. If it gets a new window created event, it registers for keyboard events on that window as well.  Finally, as a backstop, it reads the global position of the mouse pointer, and if that has changed since last time, considers the console busy.\n\n</p><p>However, in my tests, the only events that come into the event queue are the new window events.  I never see keyboard press (which we register for), or mouse movement events (which we don't register to get ???).  Only by the mouse-movement backstop does the keyboard daemon ever report usage.  The code to register for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=KeyPress\" title=\"Key Press\">KeyPress</a></span> events was cribbed from the xautolock program.  I downloaded and ran this, and it too, fails to see any <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=KeyPress\" title=\"Key Press\">KeyPress</a></span> events.  The only reason it work is that it relies on the MIT-SCREEN-SAVER extension to get the keyboard and mouse idle time.  We should add this method of idle detection to the keyboard daemon -- it seems much less intrusive than selecting on all windows, and appears to be shipped with pretty much every extant X server.</p></blockquote>", "remarks": "<blockquote>\n<em>2015-Sep-18 10:57:19 by gthain:</em> <br/>\n\nFor 8.2.10, we will just fix the off-by-one problems with reading utmp, and the crashing when trying to init_user_ids as root.\n\n<p>For 8.4 ticket (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5265\" onclick=\"get_ticket_and_populate_wrapper('5265'); return false;\" title=\"condor_kbdd should use the MIT Screen Saver extension to get idle time\">#5265</a></span>) will add support for using the MIT-SCREEN-SAVER extension to accurately read the keyboard idle time.\n\n</p><p></p><hr/>\n<em>2015-Sep-18 16:20:29 by johnkn:</em> <br/>\n\nCODE_REVIEW: looks good to me.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5265\" onclick=\"get_ticket_and_populate_wrapper('5265'); return false;\" title=\"condor_kbdd should use the MIT Screen Saver extension to get idle time\">#5265</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ncondor_kbdd should use the MIT Screen Saver extension to get idle time</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Sep-22 13:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=45872\">[45872]</a></span>: Document <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5264\" onclick=\"get_ticket_and_populate_wrapper('5264'); return false;\" title=\"condor_kbdd can't authenticate to X Server\">#5264</a></span>  (By Greg Thain )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Sep-18 10:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=45863\">[45863]</a></span>: Fix crashing and off-by-one bugs in condor_kbdd <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5264\" onclick=\"get_ticket_and_populate_wrapper('5264'); return false;\" title=\"condor_kbdd can't authenticate to X Server\">#5264</a></span> condor_kbdd will no longer try to init_user_priv as root, which is now fatal \u00a0[...]\n (By Greg Thain )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2015-Dec-03 16:25", "status": "resolved", "created": "2015-Sep-17 11:11", "fixed_version": "2015-Sep-17 11:11", "broken_version": "v080000", "priority": "1", "subsystem": "DaemonsExecNode", "assigned_to": "gthain", "derived_from": "", "creator": "gthain", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "", "due_date": ""}