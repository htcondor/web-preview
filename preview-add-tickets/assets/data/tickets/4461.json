{"id": 4461, "title": "Ticket #4461: IPv6 used by default if enabled", "description": "<blockquote>\nOne statement in the RFCs is that IPv6 should be used by default if available.  Right now, if ENABLE_IPV6 and ENABLE_IPV4 are set to true, no IPV6 communication is ever done.  In fact, it's impossible (due to a bug, outlined below) to use IPv6 to talk to daemons in at least one corner case.\n\n<p>All my findings below are, except where noted, on this branch: <a class=\"external\" href=\"https://github.com/bbockelm/htcondor/tree/ipv6_default\">https://github.com/bbockelm/htcondor/tree/ipv6_default</a>\n\n</p><p></p><ol>\n<li>We currently advertise whatever socket is created first.  So, to make IPv6 preferred, we must create an IPv6 socket first.\n<ul>\n<li>An even smarter idea is to make publicNetworkIpAddr protocol-aware.  Right now, we just guess the first public socket is the correct one.  This way if the connection to the collector goes over IPv6, we advertise IPv6.  If the connection is IPv4, we advertise IPv4.  I leave this for later\n</li></ul>\n</li><li>If a socket is listening on [::], we return the local IP address instead when we generate the condor_sockaddr.  The local IP address (usually, IPv4) is not protocol dependent; i.e., when converting an IPv6 command socket to a sinful string, a IPv4 address is returned.  We should have a local IP address per IP protocol.\n<ul>\n<li>In particular, we probably should assert that if we Sock::assign an IPv6 socket, the resulting address is actually IPv6.  Not true in the current code.  TODO for the future.\n</li><li>I need to lookup some IPv6 texts, but I think doing this is very wrong - we should rely on some invocation of getaddrinfo to convert from [::] or 0.0.0.0 to something we can advertise to clients to bind against.  TODO for the future.\n<ul>\n<li>I mean, in general, this is fundamentally wrong according to Internet experts (one should use DNS / getaddrinfo on the client side to do the sorting of appropriate addresses to use).  However, we disagree with said Internet experts...\n</li></ul>\n</li></ul>\n</li><li>At least as far as I can tell, _condor_is_ipv6() always returns false because it is invoked before the param table is configured (at least, before config.d is read).  We shouldn't cache things before param table is invoked.  We should initialize both IPv4 and IPv6 in the hostname detection and just throw away the IPv6 one if it wasn't used; I didn't implement this part.\n<ul>\n<li>In the future, we should convert this to ternary logic - default ENABLE_IPV6 to \"auto\" and use getaddrinfo to determine whether IPv6 should be used.  TODO for the future.\n</li></ul>\n</li><li>Initializing hostnames involves several steps that are IPv4 only (look at the TODOs in the code).  I didn't fix this.\n</li><li><div class=\"strike\">\n<strike>ConvertDefaultIPToSocketIP may change a IPv6 address to an IPv4 one (incorrectly too, as it leaves the []) via string substitution.  This function should be protocol aware.  This prevents IPv6-only daemons from being found by mixed-mode clients (as they currently communicate via IPv4 by default).</strike></div>\n Moved to <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4513\" onclick=\"get_ticket_and_populate_wrapper('4513'); return false;\" title=\"IPv6: ConvertDefaultIPToSocketIP always sets IPv4 address\">#4513</a></span>: IPv6: ConvertDefaultIPToSocketIP always sets IPv4 address.  Not fixed in this branch.\n</li><li>If a daemon advertises an IPv6 sinful string and an IPv4-only daemon tries to talk to it via the Daemon() class, an IPv4 socket will be created but we attempt to call connect() with an IPv6 sockaddr.  This results in a EPROTOTYPE but the do_connect function continues to block for about 6 minutes.  EPROTOTYPE should be caught and no retries should be attempted. I did not fix this.\n</li></ol>\n\n<p>There's enough sticky issues - especially in hostname resolution - that I think we should have a separate milestone of \"use IPv6 by default if enabled\" on the IPv6 roadmap.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-Aug-05 10:56:15 by bbockelm:</em> <br/>\n\nTo be clear - I think item 5 is really a user-visible issue.  It prevents a IPv6-only daemon from working on a mixed-mode pool.\n\n<p></p><hr/>\n<em>2015-Jan-14 12:38:15 by bbockelm:</em> <br/>\n\nThe explanation of the ticket is still valid, but the approach is no longer relevant (it's somewhat out-of-date after the new code for 8.3.2).  Will close this one as abandoned and open a new ticket.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2015-Jan-14 12:39", "status": "abandoned", "created": "2014-Jul-14 12:15", "fixed_version": "2014-Jul-14 12:15", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "adesmet", "derived_from": "#4492", "creator": "bbockelm", "rust": "", "customer_group": "lark", "visibility": "public", "notify": "tannenba@cs.wisc.edu", "due_date": ""}