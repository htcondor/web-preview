{"id": 6859, "title": "Ticket #6859: End-game for introducing the multifile_curl_plugin", "description": "<blockquote>\nThere are currently two libcurl-based file transfer plugins - the <code>curl_plugin</code> (used in production but doesn't support the new multifile protocol) and the <code>multifile_curl_plugin</code> (not used in production, but also a cleanup and supporting the multifile protocol).\n\n<p>This is an awkward setup: developers have to put code into both (duplicate work as there is no common code base), or decide whether they want to put it into the new plugin (and not have code used) or the old plugin (and know it's a waste of time going forward).\n\n</p><p>I propose we use the new 8.9.x series as an excuse to switchover to the new plugin.  That is:\n\n</p><p></p><ol>\n<li>We immediately claim the <code>curl_plugin</code> is in bugfix-only mode: all new development and features go into the <code>multifile_curl_plugin</code> variant.\n</li><li>8.9.0 we distribute both and enable multifile support by default.  To support developer testing, the <code>multifile_curl_plugin</code> claims to provide support for <code>dav://</code> and <code>davs://</code> URLs.  The <code>curl_plugin</code> is still the primary plugin for HTTP/HTTPS.\n</li><li>Once 8.9.0 is deployed to CHTC, all testing is based on the <code>multifile_curl_plugin</code>.\n</li><li>In 8.9.1, we distribute both codebases but the <code>multifile_curl_plugin</code> is renamed to <code>curl_plugin</code> and the <code>curl_plugin</code> is named <code>legacy_curl_plugin</code>.\n</li><li>In 8.9.2, only the <code>multifile_curl_plugin</code> (now called simply <code>curl_plugin</code>) is distributed and we delete the code for <code>legacy_curl_plugin</code>.\n</li></ol>\n\n<p>At any point, if testing goes poorly or other unexpected issues come up, we stop and re-evaluate the next steps.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Jan-16 10:14:50 by coatsworth:</em> <br/>\n\nThis is ambitious but I can get behind it :) TJ has identified some flaws with the multifile_curl_plugin that are important and need to be fixed before we turn it on by default. I'm pretty tied up with HTTP scale-out in the short term so not sure if I can do any work on this in time for 8.9.1, but agree we should push forward sooner rather than later.\n\n<p></p><hr/>\n<em>2019-Jan-17 12:02:56 by tannenba:</em> <br/>\n\nWhen the multifile plugin is enabled, I am not a fan of the current behavior where the starter lies to the shadow about URL transfers being immediately completed (when in fact the starter shuffles that transfer to anther list to transfer after everything is pulled from the shadow).  I would like the shadow to know how long it took to transfer each file, or at least how long it needed to stay connected to each origin.\n\n<p>I haven't yet had time to think about if we should make these changes before enabling multifile by default or if this change is something we can introduce in a backwards-compatible way later in the v8.9 series.  Both sides of the file transfer object know the version of their peer, so maybe not a big concern, but I wanted to note it here.\n\n</p><p></p><hr/>\n<em>2019-Jan-17 14:31:50 by bbockelm:</em> <br/>\n\nThe branch attached to the ticket implements the pieces necessary for the 8.9.0 proposal.\n\n<p>HOWEVER, note that the multifile protocol is not implemented / used for file upload.  That implies a more significant amount of work besides \"just debugging\" scheduled prior to 8.9.1.\n\n</p><p></p><hr/>\n<em>2019-Jan-17 16:23:43 by coatsworth:</em> <br/>\n\n<strong>CODE REVIEW</strong>\n\n<p></p><ul>\n<li>In multifile_curl_plugin.cpp, you've set \"<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SupportedMethods\" title=\"Supported Methods\">SupportedMethods</a></span> = \\\"http,https,ftp,file,dav,davs\\\". We <strong>only</strong> want this plugin to support dav and davs for now. Otherwise it could override the curl_plugin and become the default plugin for all http transfers.\n</li><li>In param_info, need to add $(LIBEXEC)/multifile_curl_plugin to the FILETRANSFER_PLUGINS knob default.\n</li></ul>\n\n<p>Otherwise I think everything looks good.\n\n</p><p></p><hr/>\n<em>2019-Jan-17 21:08:18 by bbockelm:</em> <br/>\n\nForgot to mention - tested this by transferring the same large file twice, once with <code>http</code> and once with <code>dav</code>.  Confirmed that the file transfer statistics recorded in the schedd log show that a transfer queue slot is held for the <code>http</code> transfer but not for the <code>dav</code> transfer.\n\n<p></p><hr/>\n<em>2019-Jan-18 13:20:42 by tlmiller:</em> <br/>\n\nI concur with ToddT's concern about the starter lying to the shadow, primarily because that will make the implementation of file transfer events way more complicated.\n\n<p></p><hr/>\n<em>2019-Jan-18 14:41:08 by bbockelm:</em> <br/>\n\n@tlmiller, @tannenba,\n\n<p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nI am not a fan of the current behavior where the starter lies to the shadow about URL transfers being immediately completed (when in fact the starter shuffles that transfer to anther list to transfer after everything is pulled from the shadow). I would like the shadow to know how long it took to transfer each file, or at least how long it needed to stay connected to each origin.\n</td></tr></tbody></table></div>\n\n\n<p>The starter does <strong>not</strong> lie to the shadow as this is an asynchronous protocol.  As far as I can tell, there is no ACK per transfer.  The schedd shoves as many URL-based file transfers requests as will fit into the TCP socket's kernel buffers (a thousand?).\n\n</p><p>At some undefined point later after the shadow requests a file transfer, if a transfer fails, there will be an asynchronous message that the schedd receives.\n\n</p><p></p><hr/>\n<em>2019-Jan-18 16:11:17 by tlmiller:</em> <br/>\n\nAnd yet, the shadow knows when the starter succeeds.  That may just be implicit, when the forked child that is the file-transfer object exits, but it implies that the right thing to do is add a mechanism so the starter can either explicitly return the transfer token (probably the right thing, since we'll want to have multiple transfer tokens in the near future) or explicitly signal success.\n\n<p></p><hr/>\n<em>2019-Jan-19 08:38:25 by bbockelm:</em> <br/>\n\ntlmiller -\n\n<p>Right, completely agreed.  Definitely no time for it this weekend, but I wrote up a ticket as a reminder: <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=6875\" onclick=\"get_ticket_and_populate_wrapper('6875'); return false;\" title=\"Explicit token management protocol between starter and shadow\">#6875</a></span>.\n\n</p><p></p><hr/>\n<em>2019-Jan-19 18:30:08 by tlmiller:</em> <br/>\n\nThanks.  I like the look of the new ticket.\n\n<p></p><hr/>\n<em>2019-Apr-08 14:53:39 by coatsworth:</em> <br/>\n\n<strong>CODE REVIEW</strong>\n\n<p>Everything here looks good. This isn't much by way of code changes here. These updates mostly just focus on turning on the new multifile curl plugin by default. Brian did make some significant code changes to the new plugin in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6885\" onclick=\"get_ticket_and_populate_wrapper('6885'); return false;\" title=\"Allow multifile uploads\">#6885</a></span> which I'll review separately.</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6885\" onclick=\"get_ticket_and_populate_wrapper('6885'); return false;\" title=\"Allow multifile uploads\">#6885</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAllow multifile uploads</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7007\" onclick=\"get_ticket_and_populate_wrapper('7007'); return false;\" title=\"Add Box multifile transfer plugin\">#7007</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAdd Box multifile transfer plugin</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Apr-11 14:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56575\">[56575]</a></span>: Fixed curl_plugin multifile test for live plugin (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-15 16:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56377\">[56377]</a></span>: Fixed segfault in multifile_curl_plugin (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-08 15:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56325\">[56325]</a></span>: Added libcurl return code to multifile_curl_plugin stats, added retry on write error (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-08 09:24</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56316\">[56316]</a></span>: Fixup RPM build <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span>  (By Tim Theisen )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-05 22:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56286\">[56286]</a></span>: Move the multifile implementation to be the default curl_plugin. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jan-22 12:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56039\">[56039]</a></span>: Fixed multifile curl tests to use Brian's testing protocol (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jan-17 16:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56018\">[56018]</a></span>: Remove HTTP support as a compromise for 8.9.0 <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jan-17 16:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56017\">[56017]</a></span>: Add multifile curl plugin to the default plugins. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jan-17 14:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56013\">[56013]</a></span>: Allow dav:// and davs:// schemes for multifile plugin. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span> With this, dav:// and davs:// schemes are automatically rewritten to <a class=\"external\" href=\"http://\">http://</a> and <a class=\"external\" href=\"https://\">https://</a>, respectively. This allows for developers to test the multifile plugin code on production clusters without superceding the default curl plugin.  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jan-17 13:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56012\">[56012]</a></span>: Enable the multifile transfer plugin protocol. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span> This enables multifile plugins by default, but is essentially a no-op unless someone explicitly uses the multifile-capable plugin.  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Jan-17 13:55</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56011\">[56011]</a></span>: Release xfer queue slot prior to final ACK. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6859\" onclick=\"get_ticket_and_populate_wrapper('6859'); return false;\" title=\"End-game for introducing the multifile_curl_plugin\">#6859</a></span> This allows the transfer queue to be released after the HTCondor-based transfers are done but before external transfers are executed in the multifile case. Hence, multifile plugin transfers don't clog up the schedd transfer queue.  (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2019-Apr-08 14:54", "status": "resolved", "created": "2019-Jan-16 10:03", "fixed_version": "2019-Jan-16 10:03", "broken_version": "", "priority": "3", "subsystem": "FileTransfer", "assigned_to": "coatsworth", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "osg", "visibility": "public", "notify": "coatsworth@cs.wisc.edu, johnkn@cs.wisc.edu, BBockelman@morgridge.org tlmiller@cs.wisc.edu", "due_date": ""}