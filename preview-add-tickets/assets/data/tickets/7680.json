{"id": 7680, "title": "Ticket #7680: condor_q -name useless for some hosts", "description": "<blockquote>\nMat reports:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">Got an issue: I've got a minicondor in a Docker container. The container's\nhostname -f is  \"c0a0000e013f\". It's in the host file so ping resolves but when\nI try to do condor_q -name `hostname -f` , I get Error: unknown host c0a0000e013f\n</pre></div>\n\n\n<p>After some analysis, it seems like the problem is that get_daemon_name() barfs when given a hostname that doesn't have a corresponding FQDN.  Supposedly get_daemon_name() is only called by client code prior to doing a collector query, so that's the wrong behavior; clearly, the daemons do something something else.  (Changing get_fqdn_from_hostname() seems likely to cause a lot of subtle issues, so let's avoid that.)\n\n</p><p>It's not clear what other side effects, if any, of this change would be, but Jaime points out that the following is absurd, and would be fixed by this change also:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">[jfrey@submit-1 ~]$ condor_status badname\ncondor_status: unknown host badname\n[jfrey@submit-1 ~]$ condor_status badname.nogood\n[jfrey@submit-1 ~]$\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2020-Jun-09 18:04", "status": "new", "created": "2020-Jun-09 18:04", "fixed_version": "2020-Jun-09 18:04", "broken_version": "", "priority": "4", "subsystem": "Tools", "assigned_to": "jfrey", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "osg", "visibility": "public", "notify": "mat@cs.wisc.edu, tlmiller@cs.wisc.edu, jfrey@cs.wisc.edu, johnkn@cs.wisc.edu", "due_date": ""}