{"id": 7024, "title": "Ticket #7024: GSI authentication failure can lead to skipping other auth methods", "description": "<blockquote>\nDuring CEDAR authentication, if the GSI authentication functions return failure, the client sends an integer value of 0 to the server before negotiating the next method to try. The server isn't expecting this, and interprets it as the client's mask of additional authentication methods. The value 0 means no other methods to try, so authentication fails and  the connection is aborted.\n\n<p>The client code that sends the unexpected 0 includes the following comment:\n</p><div class=\"verbatim\">\n<pre>        // Following four lines of code is added to temporarily\n        // resolve a bug (I belive so) in Globus's GSI code.\n        // basically, if client calls init_sec_context with\n        // mutual authentication and it returns with a mismatched\n        // target principal, init_sec_context will return without\n        // sending the server any token. The sever, therefore,\n        // hangs on waiting for the token (or until the timeout\n        // occurs). This code will force the server to break out\n        // the loop.\n</pre></div>\n\n\n<p>My reading of the GSI code shows that <code>globus_gss_assist_init_sec_context()</code> can return failure before any network activity if the <code>target_str</code> is set to a string other than <code>GSI-NO-TARGET</code>. But we never use a value other than <code>GSI-NO-TARGET</code>, so that shouldn't be a concern for us.\n\n</p><p>After a successful SSL handshake, the client sends a \"0\" or \"D\" character to indicate whether it wants to do a proxy delegation. Sending of this character may be skipped if <code>gss_init_sec_context()</code> 's checks of the server's credential fail. These include an unexpected subject name (not an issue for us) and an unexpected limited proxy (also not an issue for us). This will leave the server waiting for data. I assume the client's expected reaction is to close the connection, but we don't do that. I need to check the code some more to see if any of the failure conditions can arise with how we invoke these calls.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-May-02 09:46:26 by jfrey:</em> <br/>\n\nIt appears that all of the situations where the client doesn't send data that the server is expecting occur when the caller in the client provides an expected subject name for the server. We never do that, so I believe we can just remove the kludge at the CEDAR level.\n\n<p></p><hr/>\n<em>2019-May-02 14:36:03 by zmiller:</em> <br/>\n\n<strong>CODE REVIEW</strong>: Jaime and I discussed this and these changes look good!\n\n<p></p><hr/>\n<em>2019-May-13 21:05:19 by jfrey:</em> <br/>\n\nAfter removing the CEDAR-level kludge, I quickly encountered a situation where it's required. When the client doesn't like the server's credentials, it aborts the SSL handshake before sending its own credentials. The SSL code on the client generates a final packet of data to send to the server, but the error handling code in gss_init_sec_context() accidentally drops it.\n\n<p>In the failure case initially observed in this ticket, it appears the server didn't like the client's credentials and aborted the handshake at a later point in the protocol (after both sides sent their credentials). In that situation, the client wasn't expected to send any additional data.\n\n</p><p>In all observed situations (client abort, server abort, and success), the final packet of data exchanged is small (10-40 bytes). I will restore the CEDAR-level workaround, but trigger it only in the case where the last data exchange was a large packet (greater than 100 bytes) received by the client.\n\n</p><p></p><hr/>\n<em>2019-May-20 11:57:19 by zmiller:</em> <br/>\n\n<strong>CODE REVIEW</strong>: Looks good.  Docs in... resolving!\n\n<p></p><hr/>\n<em>2019-Jul-25 11:22:33 by jfrey:</em> <br/>\n\nWe've submitted a patch for the underlying GSI bug to the gridcf/gct repository (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7051\" onclick=\"get_ticket_and_populate_wrapper('7051'); return false;\" title=\"GSI authentication protocol bug\">#7051</a></span>).</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7051\" onclick=\"get_ticket_and_populate_wrapper('7051'); return false;\" title=\"GSI authentication protocol bug\">#7051</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nGSI authentication protocol bug</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7052\" onclick=\"get_ticket_and_populate_wrapper('7052'); return false;\" title=\"Print detailed error stack when GSI authentication fails\">#7052</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nPrint detailed error stack when GSI authentication fails</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-May-17 13:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56905\">[56905]</a></span>: Docs for GSI auth bug fix. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7024\" onclick=\"get_ticket_and_populate_wrapper('7024'); return false;\" title=\"GSI authentication failure can lead to skipping other auth methods\">#7024</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-May-13 16:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56875\">[56875]</a></span>: Improve code to keep CEDAR peers in sync afer GSI failures. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7024\" onclick=\"get_ticket_and_populate_wrapper('7024'); return false;\" title=\"GSI authentication failure can lead to skipping other auth methods\">#7024</a></span> It turns out the workaround for a GSI bug that we recently removed is necessary in some situations that we encounter. When the SSL handshake fails in certain ways, gss_init_sec_context() accidentally drops the last packet to be sent to\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-May-02 11:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56729\">[56729]</a></span>: Keep CEDAR peers in sync after GSI authentication fails. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7024\" onclick=\"get_ticket_and_populate_wrapper('7024'); return false;\" title=\"GSI authentication failure can lead to skipping other auth methods\">#7024</a></span> Remove a workaround for a GSI bug that can leave the peers out of sync when the server's subject name doesn't match what the client is expecting. The GSI server code is left expecting data that the client code doesn't send. We tell GSI that\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2019-Jul-25 11:22", "status": "resolved", "created": "2019-May-01 16:45", "fixed_version": "2019-May-01 16:45", "broken_version": "", "priority": "3", "subsystem": "Security", "assigned_to": "zmiller", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "zmiller@cs.wisc.edu", "due_date": ""}