{"id": 7594, "title": "Ticket #7594: Efficiently close FDs after fork", "description": "<blockquote>\nSee parent ticket for details.  Splitting this ticket across a code freeze.</blockquote>", "remarks": "<blockquote>\n<em>2020-Apr-10 15:27:21 by tlmiller:</em> <br/>\n\nImplementing a libbsd-style fix make be too radical for the stable series.\n\n<p></p><hr/>\n<em>2020-Apr-14 13:09:14 by tlmiller:</em> <br/>\n\nThe V8_9-gt7594-branch appears to work.  Asking for a review both for code quality (we really don't want to screw this up) and to determine if the change is safe for the stable series (probably not).\n\n<p></p><hr/>\n<em>2020-Apr-14 13:44:32 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>This code will attempt to close the FD associated with the DIR object. It happens after closedir(), so is harmless. I don't think a change is needed.\n\n</p><p>Otherwise, this looks good.\n\n</p><p>As mentioned already, not recommended for the stable series.\n\n</p><p></p><hr/>\n<em>2020-Apr-14 13:55:14 by bbockelm:</em> <br/>\n\nThoughts:\n\n<p></p><ol>\n<li>Factor this out into a library call.  We're going to want it later for <code>Create_Process</code>.\n</li><li>This might fail if /proc isn't mounted inside a container or if HTCondor is already at its ulimit for fds.  Needs a fallback.\n</li><li>I'm a bit nervous to buffer a vector of all fds.  What about having it break every 1K close() invocations and reopen the directory?  As long as we are making forward progress...\n</li></ol>\n\n<p></p><hr/>\n<em>2020-Apr-14 14:16:43 by tlmiller:</em> <br/>\n\nJaime: We could call <code>dirfd()</code> to avoid close()ing that FD redundantly, but I'm not sure which way is faster.\n\n<p>1.  Agreed, but it seemed a good idea to get it reviewed first.\n\n</p><p>2.  I feel like not mounting /proc should break all sorts of things, but fair enough, if the rest of HTCondor works without it, we should have a fallback.\n\n</p><p>3.  I guess if we avoided closing the dir FD, that would work, and I guess a fixed-size buffer would be faster anyway.\n\n</p><p>Thanks for the feedback, both of you.\n\n</p><p></p><hr/>\n<em>2020-Apr-15 08:22:09 by bbockelm:</em> <br/>\n\nRevisions look much better.  I also noticed we don't have much sanity checking for the <code>strtol</code> call; it might be worthwhile to check errno and that the value is positive (perhaps switching to <code>std::stol</code> while we're at it).k\n\n<p>Again, mostly paranoia -- but sometimes paranoia is OK too.\n\n</p><p></p><hr/>\n<em>2020-Apr-15 11:33:18 by tlmiller:</em> <br/>\n\nI think that the endptr check handles the only case we care about - did we convert the whole filename into an int or not, and even that's being really paranoid.  If the kernel suddenly spazzes out and drops non-numeric names or negative numbers in <code>/proc/self/fds</code>, I think we have other problems.\n\n<p>I suppose somebody could have not mounted <code>/proc</code> and filled <code>self/fds</code> with garbage?  Do we care about that case?\n\n</p><p>I'd rather not use <code>std::stol()</code> and have to deal with exceptions.\n\n</p><p></p><hr/>\n<em>2020-Apr-15 11:34:06 by tlmiller:</em> <br/>\n\nI have a patch to close only 1024 FDs at a time, but I don't like it (it involves cleverness to detect when we're done).  How strongly do we feel about that?\n\n<p></p><hr/>\n<em>2020-Apr-20 15:28:35 by bbockelm:</em> <br/>\n\nHeh: exceptions, that's the reason why I prefer the <code>std</code> version of the function :)\n\n<p>I'll let you be the judge on whether buffering the file descriptors is worthwhile.  If it's too much complexity, I agree it can be skipped.\n\n</p><p></p><hr/>\n<em>2020-Apr-20 15:37:32 by tlmiller:</em> <br/>\n\nAccording to BrianB, for <code>clone()</code>, we can't call <code>opendir()</code> or <code>readdir()</code> before the exec, or allocate memory, so we'll have to have a version where the list of FDs is populated in the parent and passed into the child.  (Which renders an attempt to only <code>close()</code> 1024 at a time meaningless.)</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Apr-14 15:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59345\">[59345]</a></span>: (<span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=7594\" onclick=\"get_ticket_and_populate_wrapper('7594'); return false;\" title=\"Efficiently close FDs after fork\">#7594</a></span>) Refactor to make available for Create_Process() when we're feeling brave. Automatically fall back the old (slow) way if we can't open /proc/self/fd for some reason.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Apr-14 13:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59343\">[59343]</a></span>: (<span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=7594\" onclick=\"get_ticket_and_populate_wrapper('7594'); return false;\" title=\"Efficiently close FDs after fork\">#7594</a></span>) Close only the FDs /proc has listed as open for us.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-Nov-09 12:22", "status": "review", "created": "2020-Apr-10 15:22", "fixed_version": "2020-Apr-10 15:22", "broken_version": "", "priority": "3", "subsystem": "DaemonsExecNode", "assigned_to": "tlmiller", "derived_from": "#7593", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, jfrey@cs.wisc.edu, bbockelman@morgridge.org", "due_date": ""}