{"id": 5806, "title": "Ticket #5806: Windows memory reporting incorrect (ImageSize_RAW, etc.)", "description": "<blockquote>\nWe are running HTCondor 8.4.8. We have a pool of:\n1) Linux (RHEL 7.2) central manager\n2) Windows 2012 R2 schedulers (soon to be RHEL 7.2)\n3) Windows 2012 R2 execute nodes\n\n<p>Memory reporting is incorrect. Jobs are all capped at reporting their memory usage at ~4.20 GBs. This is incorrect because the jobs shouldn't be using the same amount of memory, and also because logging onto the execute nodes shows that the processes are using much more. In some cases, jobs are using 30+ GBs of memory each. This is causing our nodes to run out of memory.\n\n</p><p>We are trying to implement policies to control memory usage, but because the memory reporting is incorrect, we're unable to catch and stop jobs using more than their allocation.\n\n</p><p>I will attach screenshots showing the output of condor_q as well as the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CycleServer\" title=\"Cycle Server\">CycleServer</a></span> GUI.</p></blockquote>", "remarks": "<blockquote>\n<em>2016-Jul-26 14:13:28 by johnkn:</em> <br/>\n\ncondor_history output is garbled, condor_q output is missing.\nI can't tell from this that the problem isn't in cycle server.\n\n<p>I can see that much of HTCondor (starter AND shadow) uses 32 bit values to move the <code>ResidentSetSize</code> attribute around,  But since that these values are in K, the job would have to be using 4TB to overflow that.\n\n</p><p>I'd like to see what values are actually coming back from the procapi into the starter.\n\n</p><p></p><hr/>\n<em>2016-Jul-26 15:44:45 by rfutrick:</em> <br/>\n\nThanks for taking a look!\n\n<p>Unfortunately, there is no condor_q output, as the job is no longer in the queue. At this point I'm not even sure the job is in the history file anymore either.\n\n</p><p>As far as CS being the source of the problem, the incorrect memory totals were originally reported from condor_history output only. I used <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CycleServer\" title=\"Cycle Server\">CycleServer</a></span> as a way of easily verifying the issue, but also confirmed that condor_history returns the same results. CS rounds the value for display, but not in its internal store.\n\n</p><p>I did a dump of the ImageSize_RAW for all jobs in the history file, and none were using more that ~4.2 GBs. But we are definitely seeing a small number of machines occasionally run out of memory. They have &gt; 10 GBs per core, but the problem jobs report upwards of 30 GBs used if we log directly on to the execute node.\n\n</p><p>1) How can I get you the values that are actually coming back from the procapi into the starter?\n\n</p><p>2) Is there any other data can we provide?\n\n</p><p></p><hr/>\n<em>2016-Aug-01 14:13:37 by johnkn:</em> <br/>\n\nIf you can catch it in the act, you could run the <code>procd_ctl</code> to see what the procd is reporting.  It would be helpful to know if the numbers are bad coming out of the procd, or are getting clamped somewhere down the line.\n\n<p></p><div class=\"verbatim\">\n<pre>  procd_ctl GET_USAGE &lt;pid&gt;\n</pre></div>\n\n\n<p>where <code>&lt;pid&gt;</code> should be the process id of the root process of the job.\n\n</p><p></p><hr/>\n<em>2016-Aug-18 00:52:34 by rfutrick:</em> <br/>\n\nHi John,\n\n<p>We reproduced it in our dev pool and got the information you're looking for. I'll include details below and attach some images as well.\n\n</p><p></p><div class=\"term\">\n<pre class=\"term\">PS C:\\condor&gt; procd_ctl.exe -A \\\\.\\\\pipe\\\\condor_procd_pipe GET_USAGE 3788\nNumber of Processes: 2\nUser CPU Time (s): 2\nSystem CPU Time (s): 1\nCPU Percentage (%): 0.000000\nMaximum Image Size (KB): 4197239\nTotal Image Size(KB): 8388606\nPS C:\\condor&gt;\n</pre></div>\n\n\n<p>To reproduce the problem, we wrote a small python script that just allocates memory. We verified in task manager that it's allocating the amount specified, and then compared that to Condor's reported memory usage. (We had the job sleep for a bit after allocating memory to ensure we were capturing the right values in task manager.)\n\n</p><p>Here's the output of condor_history -l &lt;job&gt;:\n</p><div class=\"term\">\n<pre class=\"term\">Arguments = \"C:\\Users\\chiaj\\mem.py 8\"\nAutoClusterAttrs = \"JobUniverse,LastCheckpointPlatform,NumCkpts,JobType,MachineLastMatchTime,ConcurrencyLimits,NiceUser,Rank,Requirements,CheckpointPlatform,IsValidCheckpointPlatform,SlotReservation,DiskUsage,RequestDisk,RequestMemory\"\nAutoClusterId = 21\nBufferBlockSize = 32768\nBufferSize = 524288\nBytesRecvd = 0.0\nBytesSent = 24.0\nClusterId = 147\nCmd = \"C:\\python.exe\"\nCommittedSlotTime = 306.0\nCommittedSuspensionTime = 0\nCommittedTime = 306\nCompletionDate = 1471473460\nCondorPlatform = \"$CondorPlatform: x86_64_RedHat7 $\"\nCondorVersion = \"$CondorVersion: 8.4.0 Sep 11 2015 BuildID: 341253 $\"\nCoreSize = 0\nCumulativeSlotTime = 306.0\nCumulativeSuspensionTime = 0\nCurrentHosts = 0\nDiskUsage = 10\nDiskUsage_RAW = 9\nEncryptExecuteDirectory = false\nEnteredCurrentStatus = 1471473460\nEnvironment = \"\"\nErr = \"147.0.err\"\nExecutableSize = 0\nExecutableSize_RAW = 0\nExitBySignal = false\nExitCode = 0\nExitStatus = 0\nGlobalJobId = \"xxxxxx.xxxxxx.com#147.0#1471473148\"\nImageSize = 4250000\nImageSize_RAW = 4197239\nIn = \"/dev/null\"\nIwd = \"/tmp\"\nJobCurrentStartDate = 1471473154\nJobCurrentStartExecutingDate = 1471473155\nJobCurrentStartTransferOutputDate = 1471473460\nJobFinishedHookDone = 1471473460\nJobLeaseDuration = 2400\nJobNotification = 0\nJobPrio = 0\nJobRunCount = 1\nJobStartDate = 1471473154\nJobStatus = 4\nJobUniverse = 5\nLastJobLeaseRenewal = 1471473460\nLastJobStatus = 2\nLastMatchTime = 1471473154\nLastPublicClaimId = \"&lt;xxx.xxx.xxx.xxx:49243&gt;#1471380412#152#...\"\nLastRemoteHost = \"slot1@xxxxxx.xxxxxx.com\"\nLastSuspensionTime = 0\nLeaveJobInQueue = false\nLocalSysCpu = 0.0\nLocalUserCpu = 0.0\nMachineAttrCpus0 = 1\nMachineAttrSlotWeight0 = 1\nMaxHosts = 1\nMemoryUsage = ( ( ResidentSetSize + 1023 ) / 1024 )\nMinHosts = 1\nMyType = \"Job\"\nNTDomain = \"xxx\"\nNiceUser = false\nNumCkpts = 0\nNumCkpts_RAW = 0\nNumJobMatches = 1\nNumJobStarts = 1\nNumRestarts = 0\nNumShadowStarts = 1\nNumSystemHolds = 0\nOnExitHold = false\nOnExitRemove = true\nOrigMaxHosts = 1\nOut = \"147.0.out\"\nOwner = \"chiaj\"\nPeriodicHold = false\nPeriodicRelease = false\nPeriodicRemove = false\nProcId = 0\nQDate = 1471473148\nRank = 0.0\nRemoteSysCpu = 1.0\nRemoteUserCpu = 2.0\nRemoteWallClockTime = 306.0\nRequestCpus = 1\nRequestDisk = DiskUsage\nRequestMemory = 1024\nRequirements = ( TARGET.OpSys == \"WINDOWS\" ) &amp;&amp; ( TARGET.Arch == \"X86_64\" ) &amp;&amp; ( TARGET.Disk &gt;= RequestDisk ) &amp;&amp; ( TARGET.Memory &gt;= RequestMemory ) &amp;&amp; ( TARGET.HasFileTransfer )\nResidentSetSize = 75\nResidentSetSize_RAW = 68\nRootDir = \"/\"\nRunAsOwner = true\nShouldTransferFiles = \"YES\"\nStartdPrincipal = \"execute-side@matchsession/xxx.xxx.xxx.xxx\"\nStreamErr = false\nStreamOut = false\nTargetType = \"Machine\"\nTerminationPending = true\nTotalSuspensions = 0\nTransferExecutable = false\nTransferIn = false\nTransferInputSizeMB = 0\nUser = \"chiaj@xxx\"\nUserLog = \"/tmp/147.0.log\"\nWantCheckpoint = false\nWantRemoteIO = true\nWantRemoteSyscalls = false\nWhenToTransferOutput = \"ON_EXIT\"\n</pre></div>\n\n\n<p></p><hr/>\n<em>2016-Aug-18 00:55:17 by rfutrick:</em> <br/>\n\nI attached a screenshot of the task manager showing the full memory usage.\n\n<p>Also, the python code to allocate the memory was basically:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">a.append(' ' * 1024 * 1024 * 1024 * 8)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2016-Aug-19 16:25:18 by johnkn:</em> <br/>\n\nI can reproduce the problem.  It seems that Windows will lie to 32 bit apps that ask for the memory usage of 64bit apps that are using more than 4Gb of memory.\n\n<p>Since HTCondor is 32-bits, it's getting lied to.  Todd created <a class=\"external\" href=\"ftp://ftp.cs.wisc.edu/condor/temporary/forcycle/v8.4_64bit_windows/\">a special 64-bit version of the v8.4.x condor_procd</a> and I verified that if I use that instead of the one what we ship, we report correct values back to the SCHEDD.  This is going to be very hard bug to fix....\n\n</p><p></p><hr/>\n<em>2016-Aug-26 10:34:22 by johnkn:</em> <br/>\n\nas of <span class=\"chng\"><a href=\"chngview?cn=49053\">[49053]</a></span>. If I enable  VS2012 Win64 builds on the Win10 box in the batlab, the build and tests are all green.\n\n<p></p><hr/>\n<em>2018-Oct-04 14:51:00 by tim:</em> <br/>\n\nThis went in the release announcement. (But not the version history.) No point in  updating it now. closing.</blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/954/condor_history_output.png\">condor_history_output.png</a>\n13455 bytes added by rfutrick on 2016-Jul-26 15:48:03 UTC.\n</li><li><a href=\"attach_get/955/CS-attributes-screenshot.png\">CS-attributes-screenshot.png</a>\n11494 bytes added by rfutrick on 2016-Jul-26 15:48:31 UTC.\n<br/>\nThe jobs attributes, as reported by HTCondor (and displayed by <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CycleServer\" title=\"Cycle Server\">CycleServer</a></span>). <br/>\n</li><li><a href=\"attach_get/956/CS-jobs-listing.png\">CS-jobs-listing.png</a>\n20089 bytes added by rfutrick on 2016-Jul-26 15:48:56 UTC.\n<br/>\n<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CycleServer\" title=\"Cycle Server\">CycleServer</a></span> showing many jobs (small fraction) displaying the same memory amount used. <br/>\n</li><li><a href=\"attach_get/963/mem-job-task-manager.png\">mem-job-task-manager.png</a>\n61099 bytes added by rfutrick on 2016-Aug-18 05:53:40 UTC.\n<br/>\nScreenshot of the windows task manager. Note the python process selected in the red box, and it's reported memory usage.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Aug-26 15:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=49084\">[49084]</a></span>: for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5806\" onclick=\"get_ticket_and_populate_wrapper('5806'); return false;\" title=\"Windows memory reporting incorrect (ImageSize_RAW, etc.)\">#5806</a></span>, change shared port serialize/deserialize to use new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> serializer  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Aug-26 10:30</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=49081\">[49081]</a></span>: In support of <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5806\" onclick=\"get_ticket_and_populate_wrapper('5806'); return false;\" title=\"Windows memory reporting incorrect (ImageSize_RAW, etc.)\">#5806</a></span>, fix sock &amp; shared port serialize &amp; deserialize code to properly handle HANDLES. This is accomplished by using new templatized int serialize &amp; deserialize code in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Aug-23 08:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=49053\">[49053]</a></span>: In support of <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5806\" onclick=\"get_ticket_and_populate_wrapper('5806'); return false;\" title=\"Windows memory reporting incorrect (ImageSize_RAW, etc.)\">#5806</a></span>, changes to allow x64 Windows builds in the batlab. x64 Windows builds currently disabled, they can be enabled by editing remote_pre in the nmi build glue. x64 Windows procd works, but daemon_core currently does not (socket passing is broken, not sure what else...)  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2018-Oct-04 14:51", "status": "resolved", "created": "2016-Jul-26 10:40", "fixed_version": "2016-Jul-26 10:40", "broken_version": "v080408", "priority": "1", "subsystem": "Win32", "assigned_to": "johnkn", "derived_from": "", "creator": "rfutrick", "rust": "", "customer_group": "other", "visibility": "public", "notify": "rfutrick@cyclecomputing.com, jer-ming.chia@cyclecomputing.com tannenba@cs.wisc.edu", "due_date": ""}