{"id": 3859, "title": "Ticket #3859: RFE: support user group and netgroup in ALLOW_* and QUEUE_SUPER_USER", "description": "<blockquote>\nSpecific use case for user lists would be for maintaining\nQUEUE_SUPER_USERS.  ALLOW_* expressions should be able to use netgroups\nwhen referring to machines or people also.\n\n<p>My working concept for this rfe:\n\n</p><p>suppose you have this entry in /etc/group:\nque_su:x:1000:eje,dryan,mkudlej\n\n</p><p>QUEUE_SUPER_USERS = %que_su\n\n</p><p>then users eje, dryan and mkudlej would be allowed as queue super users, by virtue of checking group membership using the output of the standard C getgrnam() library function.\n\n</p><p>Another example:\n\n</p><p>ALLOW_ADMINISTRATOR = +admin_hosts\n\n</p><p>Would allow any authenticated canonical user user@domain/host from the /etc/netgroup list 'admin_hosts' matching tuple (host,user,domain)  (netgroup lookup using innetgr() library function)\n\n</p><p>note, in a netgroup triple (host,user,domain) any or all of the three can be empty, signifying wildcard behavior.  For example, the tuple (,eje,) would match user 'eje' for any host and any uid-domain.\n\n</p><p>The plan for domains is to use condor's concept of uid-domain.  This is condor-specific behavior, but the strings listed in a netgroup definition are arbitrary, and so there's no barrier to adopting a condor-specific convention.</p></blockquote>", "remarks": "<blockquote>\n<em>2013-Aug-19 12:41:25 by tannenba:</em> <br/>\n\nYou definitely need a design doc for this.  Some questions to consider for your design (these questions and similar ones should be discussed in the design doc):\n\n<p></p><ol>\n<li>Unlike QUEUE_SUPER_USER, the ALLOW_* settings do not take a list of local login names.  They take a list of authorization principals that can include hostnames, subnets, and <em>mapped</em> user identities.\n\n<p></p></li><li>When do these get expanded?  Only on a  condor_reconfig? Or if I change /etc/groups will that automatically change HTCondor's authorization without issuing a reconfig?  If the latter, why, and how will it remain scalable?\n\n<p></p></li><li>At what level of the code will this expansion happen - the config macro subsystem level, the authorization level, ???  What are the pros and cons to the different approaches, which do you recommend, and why?\n\n<p></p></li><li>Thinking a bit about my own question above: Should this be in the low-level HTCondor libraries at all?  Couldn't it be a tool that reads a condor_config and rewrites out the \"expanded with group info\" configs?  Why should every daemon and tool (and shadow instance) carry around group expansion code, dependencies on netgroup code, etc, when the only time it is needed is when writing a config file?  Could the tool look for group names to expand, read in the local logins associated with that group, run them through the condor mapping process to come up with mapped htcondor principals, and then rewrite out the ALLOW_* knobs?\n\n<p></p></li><li>How about groups on Windows (e.g. don't group identifiers have a domain and group name etc)? While we may choose to not implement all features on all platforms, we should at least understand that the design is such that we can choose to implement it at a later date without changing the user interface.\n</li></ol>\n\n<p></p><hr/>\n<em>2013-Aug-19 12:44:28 by tannenba:</em> <br/>\n\nAdded Zach to Notification list of this ticket as the changes involve security.\n\n<p>Until such time as the design doc is written (in google docs, following the outline etc) and approved, please keep any implementation code on a topic branch.  Gracias!\n\n</p><p></p><hr/>\n<em>2013-Aug-19 16:57:03 by eje:</em> <br/>\n\nMy interpretation is that group and netgroup lookup happens on the fly, so it is the version where changing group or netgroup files alters htcondor's authorization without a reconfig.\n\n<p>The potential drawback is increased cost of lookups.  The advantage is that it provides more than just syntactic sugar for existing config.   That is, if it was only expanded at config time, it behaves as just a shorthand for the already-existing functionality, although the shorthand would be more useful than nothing.\n\n</p><p>A possible optimization would be to check the traditional-style entries on the list first, although I usually consider optimizations as best addressed on future refinement tickets, based on customer feedback.\n\n</p><p></p><hr/>\n<em>2013-Aug-20 13:57:54 by eje:</em> <br/>\n\nAnother comment on expansion:  netgroups can themselves be defined in terms of various wildcards, and other netgroups.  So (1) pre-expanding a netgroup into some kind of extensional set of 'concrete' hosts/ips is not a well defined process: at best it could be done via generate-and-test, and (2) if you actually could accomplish (1), the size of the resulting list could easily be prohibitively large.   Rather like attempting to pre-expand '*/*' in the existing htcondor security syntax.\n\n<p></p><hr/>\n<em>2013-Aug-21 11:04:42 by tannenba:</em> <br/>\n\nGoing out and doing a netgroup lookup on every command across thousands of machines is a non-option in my mind.  In HTCondor we have even had to cache results for supplemental groups, and also cache results for wildcard results in AUTHORIZE lists - this was not done as a refinement, it was done out of necessity to stop melting down NIS, OpenLDAP, etc at customer sites.\n\n<p></p><hr/>\n<em>2013-Aug-22 10:05:00 by eje:</em> <br/>\n\nThe netgroup lookup is also governed by the caching and SEC_&lt;access-level&gt;_SESSION_DURATION machinery.\n\n<p></p><hr/>\n<em>2013-Aug-27 00:02:00 by eje:</em> <br/>\n\nDESIGN DOC:\n<a class=\"external\" href=\"https://docs.google.com/document/d/10KEa1UIpAheCVYRZy7teTRF6qLe743LZ4EcLAoaqa8c/edit\">https://docs.google.com/document/d/10KEa1UIpAheCVYRZy7teTRF6qLe743LZ4EcLAoaqa8c/edit</a>\n\n<p></p><hr/>\n<em>2013-Aug-28 22:18:44 by eje:</em> <br/>\n\nTESTING - netgroups on ALLOW_* and DENY_*\n\n<p>To test netgroups, you need to have ypserv, ypbind and rpcbind installed and running on sandbox.   I set my nis network to local:  127.0.0.1\n\n</p><p>Configure /etc/netgroup like so:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">$ cat /etc/netgroup\ntest1 (localhost,eje,)\ntest2 (localhost,test_user_1,)\n# (don't forget to issue 'make' in /var/yp)\n</pre></div>\n\n\n<p>The test configuration is:\n</p><div class=\"code\">\n<pre class=\"code\">ALL_DEBUG = $(ALL_DEBUG) | D_SECURITY\n\n# keeps everything local\nNETWORK_INTERFACE = lo\n\nSEC_DEFAULT_AUTHENTICATION_METHODS = CLAIMTOBE\nSEC_DEFAULT_AUTHENTICATION = REQUIRED\n\n# enable 'everything' for exactly the members of test1 and test2 netgroups\nALLOW_ADMINISTRATOR = +test1, +test2\nALLOW_OWNER = $(ALLOW_ADMINISTRATOR)\nALLOW_DAEMON = $(ALLOW_ADMINISTRATOR)\nALLOW_NEGOTIATOR = $(ALLOW_ADMINISTRATOR)\nALLOW_WRITE = $(ALLOW_ADMINISTRATOR)\nALLOW_READ = $(ALLOW_ADMINISTRATOR)\n\n# if this is enabled, it overrides +test2 on allow\n#DENY_READ = +test2\n\n# this has the 'default' mapfile expressions\nCERTIFICATE_MAPFILE = $(CONDOR_HOME)/certificate_mapfile.txt\n</pre></div>\n\n\n<p>To test 'allow' for +test1 and +test2, spin up the pool and issue a condor_status command as yourself.  You should see the command succeed by matching test1, and in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CollectorLog\" title=\"Collector Log\">CollectorLog</a></span> you should see a message like this:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">IPVERIFY: matched canonical user eje@uid_domain/localhost to netgroup test1 on allow list\n</pre></div>\n\n\n<p>if you issue condor_status logged in as test_user_1, then it should also succeed by matching netgroup test2:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">IPVERIFY: matched canonical user test_user_1@uid_domain/localhost to netgroup test2 on allow list\n</pre></div>\n\n\n<p>Now, if you also place +test2 on DENY_READ:\n</p><div class=\"code\">\n<pre class=\"code\">DENY_READ = +test2\n</pre></div>\n\n\n<p>If you issue a condor_status as test_user_1 now, the command should fail, as DENY_* overrides ALLOW_*.\n\n</p><p></p><hr/>\n<em>2013-Aug-28 22:35:58 by eje:</em> <br/>\n\nTESTING - user groups on QUEUE_SUPER_USERS\n\n<p>I tested by adding a user (test_user_1) to 'my' group:\n</p><div class=\"code\">\n<pre class=\"code\">$ cat /etc/group\neje:x:1000:test_user_1\n</pre></div>\n\n\n<p>Then add user group 'eje' to QUEUE_SUPER_USERS\n</p><div class=\"code\">\n<pre class=\"code\">QUEUE_SUPER_USERS = %eje\n</pre></div>\n\n\n<p>I tested by submitting a job as myself (eje), and then attempting to remove the job logged in as test_user_1.   You should be able to remove the job because test_user_1 is a queue super user by virtue of being on user group 'eje'\n\n</p><p></p><hr/>\n<em>2013-Aug-30 16:33:01 by eje:</em> <br/>\n\nNotes on setting up NIS and netgroups\n\n<p>Currently netgroups are only served via NIS (there is no file-based back end option, like user groups).  So you have to set up an nis server to exercise the netgroup feature.\n\n</p><p>I adapted the following from:\n</p><ul>\n<li><a class=\"external\" href=\"http://www.server-world.info/en/note?os=Fedora_16&amp;p=nis\">http://www.server-world.info/en/note?os=Fedora_16&amp;p=nis</a>\n</li><li><a class=\"external\" href=\"http://www.yolinux.com/TUTORIALS/NIS.html\">http://www.yolinux.com/TUTORIALS/NIS.html</a>\n</li></ul>\n\n<p>These were what I had to do on F18.  Note, selinux may also need to be disabled.\n\n</p><p></p><div class=\"verbatim\">\n<pre># Install rpcbind, ypbind, ypserv, ypcat\n$ yum install ypserv ypbind yp-tools rpcbind\n\n# configuring a local ypserv\n# add these lines to /etc/sysconfig/network\nNETWORKING=yes\nGATEWAY=127.0.0.1\nNISDOMAIN=localdomain\n\n# configure ypbind\n# put this line in /etc/yp.conf:\nypserver localhost\n\n# create a file /etc/netgroup (was not created by default)\n$ cat /etc/netgroup\ntest1 (localhost,eje,)\ntest2 (localhost,test_user_1,)\n\n# point netgroups at NIS, which is currently only working option\n# add this line to /etc/nsswitch.conf\nnetgroup:   nis\n\n# edit /var/yp/Makefile so 'netgrp' dep is present on \"all:\" target\nall:  passwd group hosts rpc services netid protocols mail netgrp\n\n# start up rpcbind (note, this is 'portmap' daemon on some sytems)\n$ systemctl enable rpcbind.service\n\n# start up ypserv\n$ systemctl enable ypserv.service\n\n# initialize ypserv databases\n# /usr/lib64/yp/ypinit -m\n$ cd /var/yp; make\n\n# start up ypbind\n$ systemctl enable ypbind.service\n\n# at this point you should be able to dump yp databases:\n$ ypcat -k netgroup\ntest1 (localhost,eje,)\ntest2 (localhost,test_user_1,)\n\n# Whenever you edit /etc/netgroup, you should remake:\n$ cd /var/yp; make\n</pre></div>\n\n\n<p></p><hr/>\n<em>2013-Sep-16 16:04:56 by eje:</em> <br/>\n\nDesign doc allegedly passed review, so I am going to flip this to code review.\n\n<p>Topic branch: V8_1-gt3859-group-netgroup\n\n</p><p></p><hr/>\n<em>2013-Oct-29 09:13:53 by zmiller:</em> <br/>\n\n<strong>CODE REVIEW</strong> by zmiller: looks good.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-22 13:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37953\">[37953]</a></span>: document syntax extention to specify netgroups in knobs that specify authorization <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3859\" title=\"RFE: support user group and netgroup in ALLOW_* and QUEUE_SUPER_USER\">#3859</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-22 12:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37952\">[37952]</a></span>: properly define knob QUEUE_SUPER_USERS for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3859\" title=\"RFE: support user group and netgroup in ALLOW_* and QUEUE_SUPER_USER\">#3859</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-22 12:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37951\">[37951]</a></span>: rewrite version history items for the 2 features added in the single ticket <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3859\" title=\"RFE: support user group and netgroup in ALLOW_* and QUEUE_SUPER_USER\">#3859</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-04 17:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37784\">[37784]</a></span>: Fix version history entry for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3859\" title=\"RFE: support user group and netgroup in ALLOW_* and QUEUE_SUPER_USER\">#3859</a></span>  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-04 17:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37783\">[37783]</a></span>: ===GT:RevisionHistory=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3859\" title=\"RFE: support user group and netgroup in ALLOW_* and QUEUE_SUPER_USER\">#3859</a></span>  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Oct-04 17:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37782\">[37782]</a></span>: Support netgroups on ALLOW_* and DENY_* lists, and support user groups on QUEUE_SUPER_USERS ===GT:Fixed=== <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=3859\" title=\"RFE: support user group and netgroup in ALLOW_* and QUEUE_SUPER_USER\">#3859</a></span>  (By Erik Erlandson )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2013-Oct-29 09:38", "status": "resolved", "created": "2013-Aug-19 12:25", "fixed_version": "2013-Aug-19 12:25", "broken_version": "", "priority": "3", "subsystem": "Security", "assigned_to": "eje", "derived_from": "", "creator": "eje", "rust": "", "customer_group": "other", "visibility": "public", "notify": "eje@cs.wisc.edu, tstclair@redhat.com, matt@cs.wisc.edu, johnkn@cs.wisc.edu, tannenba@cs.wisc.edu zmiller@cs.wisc.edu", "due_date": ""}