{"id": 4978, "title": "Ticket #4978: Starter being shutdown by startd should not wait on reconnect or lease", "description": "<blockquote>\nWhen we enabled the code in the tests to fail a test if the condor_off -master left any daemons up, two test failed with all of their up after the 160 second waiting period. The by hand duplication is to do the following:\n<div class=\"code\">\n<pre class=\"code\">Create a minimal configuration for a personal condor\nrun a job which creates a shadow exception\nI ran a sleep job which had file transfer on and requested a transfer_output file which did not exist.\nremove the job\nthen condor_off -master\n</pre></div>\n\nYou will see something like this in the starter for the slot which ran the job\n<div class=\"code\">\n<pre class=\"code\">ReliSock::put_file_with_permissions(): Failed to stat file '/scratch/bt/bug4965/execute/dir_10249/foobar': No such file or directory (errno: 2, si_error: 1)\n04/01/15 14:16:47 (pid:10249) DoUpload: (Condor error code 13, subcode 2) STARTER at 128.105.121.64 failed to send file(s) to &lt;128.105.121.64:37382&gt;: error reading from /scratch/bt/bug4965/execute/dir_10249/foobar: (errno 2) No such file or directory; SHADOW failed to receive file(s) from &lt;128.105.121.64:45601&gt;\n04/01/15 14:16:47 (pid:10249) JICShadow::notifyJobTermination(): Sending mock terminate event.\n04/01/15 14:16:47 (pid:10249) JIC::transferOutput() failed, waiting for job lease to expire or for a reconnect attempt\n04/01/15 14:16:47 (pid:10249) Returning from CStarter::JobReaper()\n04/01/15 14:16:47 (pid:10249) Got SIGTERM. Performing graceful shutdown.\n04/01/15 14:16:47 (pid:10249) ShutdownGraceful all jobs.\n04/01/15 14:16:47 (pid:10249) condor_read() failed: recv(fd=6) returned -1, errno = 104 Connection reset by peer, reading 5 bytes from &lt;128.105.121.64:49193&gt;.\n04/01/15 14:16:47 (pid:10249) IO: Failed to read packet header\n04/01/15 14:16:47 (pid:10249) Lost connection to shadow, waiting 1200 secs for reconnect\n04/01/15 14:16:47 (pid:10249) Failed to send job exit status to shadow\n04/01/15 14:16:47 (pid:10249) JobExit() failed, waiting for job lease to expire or for a reconnect attempt\n04/01/15 14:26:47 (pid:10249) Got SIGQUIT.  Performing fast shutdown.\n04/01/15 14:26:47 (pid:10249) ShutdownFast all jobs.\n04/01/15 14:26:47 (pid:10249) Failed to send job exit status to shadow\n04/01/15 14:26:47 (pid:10249) JobExit() failed, waiting for job lease to expire or for a reconnect attempt\n</pre></div>\n\nWe know we are going down. The starter in this case should simply go away. As it currently sits the startd waits for the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MaxVacateTime\" title=\"Max Vacate Time\">MaxVacateTime</a></span> before sending a SIGQUIT to starter. Starter could just have gone away. We worked around this by having a short <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MaxVacateTime\" title=\"Max Vacate Time\">MaxVacateTime</a></span></blockquote>", "remarks": "<blockquote>\n<em>2015-Apr-02 14:46:07 by tannenba:</em> <br/>\n\n\n<p>I am thinking the above is correct behavior, because by default <code>condor_off</code> does a graceful shutdown, and a graceful shutdown is supposed to honor all guarantees made to the job for things like retirement time and job leases.\n\n</p><p>If you reproduced exactly the same as above but issued a <code>condor_off -master -fast</code> instead of just <code>condor_off -master</code>, does the shutdown happen immediately? I hope it does.  Please confirm.\n\n</p><p>bt: Yes\n\n</p><p></p><hr/>\n<em>2015-Apr-02 15:27:42 by tannenba:</em> <br/>\n\nOk, I am resolving this as it appears to be working as documented.  For the test suite case, seems like you want to explicitly perform a <code>condor_off -master -fast</code>.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "incident", "last_change": "2015-Apr-02 15:27", "status": "resolved", "created": "2015-Apr-02 12:46", "fixed_version": "2015-Apr-02 12:46", "broken_version": "v080208", "priority": "4", "subsystem": "DaemonsExecNode", "assigned_to": "tannenba", "derived_from": "", "creator": "bt", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "bt@cs.wisc.edu", "due_date": ""}