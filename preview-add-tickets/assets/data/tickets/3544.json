{"id": 3544, "title": "Ticket #3544: no AVX machine attribute causing stduniv job resumes to fail", "description": "<blockquote>\nVladimir Dergachev writes:\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nI think I figured out why some of my jobs are getting killed with signal 4 - illegal instruction.\n</td></tr></tbody></table></div>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nDuring program startup libc automatically determines CPU capabilities and if the job was started on a newer CPU (say with AVX) it will use AVX variant of math functions such sin, etc.\n</td></tr></tbody></table></div>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nHowever, if the job is checkpointed and then restarted on an older node\nit runs into a problem as the CPU is no longer capable to execute these instructions.\n</td></tr></tbody></table></div>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nSo it seems that condor needs to know which nodes are newer and that a checkpoint made on AVX node cannot be restored to an SSE only node.\n</td></tr></tbody></table></div>\n\n\n<p>Stuart asks:\n</p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nWhat is the current best way to handle this problem of checkpoint images getting started on non-compatible CPU's?\n</td></tr></tbody></table></div>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nIdeally, Condor would take care of this automatically by registering what type of CPU is needed when a checkpoint image is taken, and then using that information when match making to restart a job.\n</td></tr></tbody></table></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2013-Mar-18 14:18:36 by gthain:</em> <br/>\n\nJust to be complete, this is on RHEL6?\n\n<p></p><hr/>\n<em>2013-Mar-18 14:26:15 by pfc:</em> <br/>\n\nSL6 to be precise, but yes.\n\n<p></p><hr/>\n<em>2013-Mar-18 15:15:33 by bbockelm:</em> <br/>\n\nBe careful what you wish for here - AVX is one of many subtle differences you can run into between CPU instruction sets.  CMS has found that AMD and Intel love to leapfrog each other on slightly different, incompatible processor-specific instructions.  It'd be a bummer to have to tie things to a specific CPU model, but OTOH, the list of CPU flags is long:\n\n<p></p><div class=\"verbatim\">\n<pre>[bbockelm@brian-test condor]$ cat /proc/cpuinfo  | grep flags | tail -n 1\nflags\t\t: fpu tsc msr pae cx8 apic cmov pat clflush mmx fxsr sse sse2 ss syscall nx lm constant_tsc pni vmx ssse3 cx16 sse4_1 sse4_2 popcnt lahf_lm\n</pre></div>\n\n\n<p>Not all are going to be relevant to all executables either.\n\n</p><p>CMS has been looking at newer features in GCC 4.8 which allow us to make a single binary optimized for multiple CPU architectures.  Unfortunately, I think GCC 4.8's approach may not work transparently with stduni.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2013-Mar-19 10:11:55 by tlmiller:</em> <br/>\n\nSince AVX is the only instruction-set difference currently causing us grief, the consensus seems to be that adding it to the standard universe platform string is the right approach.\n\n<p></p><hr/>\n<em>2013-Mar-19 12:15:39 by bbockelm:</em> <br/>\n\nHi Todd,\n\n<p>Other common things that will likely cause issues: sse3, sse4_2, aes, fma4.  avx2 processors are around the corner, but I don't have access to any right now.\n\n</p><p>I would really strongly advise against doing a one-off knowing there are already several further issues down the road.  I'd hate to have this become like <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=OpSys\" title=\"Op Sys\">OpSys</a></span> in that it needs several redesigns to make it useful.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2013-Mar-19 13:32:22 by tlmiller:</em> <br/>\n\nAfter discussion with GregT, I'd like to take a step back and figure out why this isn't happening in our pool -- it may just be good luck -- and then reproduce it locally.\n\n<p>I'm loathe to partition people's pools any more than we have to: if glibc is only using AVX, then I'd prefer (even if we add the rest of the cpu flags infrastructure) to include only AVX in the checkpoint string.  Maybe this could be made configurable, and default to whatever the craziness inflicted on us by glibc is?\n\n</p><p></p><hr/>\n<em>2013-Mar-19 13:33:50 by pfc:</em> <br/>\n\nOnce again, I'd love a general, all-singing, all-dancing abstractastic solution that handles all cases, but if that's not on the table in the short-term it would be great to solve the actual problem in front of us.\n\n<p>The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=OpSys\" title=\"Op Sys\">OpSys</a></span> point is well-taken but one important difference is that <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=OpSys\" title=\"Op Sys\">OpSys</a></span> is user-visible so users have to know to change their submit files whenever it changes, whereas this is \"under the hood\" and can be fixed now for this one case and still improved later for the general case without users having to adjust.\n\n</p><p></p><hr/>\n<em>2013-Mar-19 13:35:34 by pfc:</em> <br/>\n\nPunting to the user / adding a knob / making this configurable would be a fine solution for us, if you'd prefer not to affect anyone else.\n\n<p></p><hr/>\n<em>2013-Mar-19 13:37:50 by tlmiller:</em> <br/>\n\nHow long is the \"short term\" for you?\n\n<p></p><hr/>\n<em>2013-Mar-19 16:27:22 by bbockelm:</em> <br/>\n\nWhat about advertising this with something like STARTD_CRON for now?\n\n<p></p><hr/>\n<em>2013-Mar-22 10:18:46 by tlmiller:</em> <br/>\n\nWhat do people think about making <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CheckpointPlatform\" title=\"Checkpoint Platform\">CheckpointPlatform</a></span> something that can be configured by the administrator?  Then they can partition (or not) their pool depending on their particular needs (including AVX), and HTCondor doesn't have to try to make one decision to fit every situation.\n\n<p></p><hr/>\n<em>2013-Mar-22 11:50:55 by pfc:</em> <br/>\n\nLIGO would be very happy with that solution.\n\n<p></p><hr/>\n<em>2013-Mar-28 10:18:20 by tlmiller:</em> <br/>\n\nI have a build which I think will do the above.  It's provisionally in 7.9.6; I need to do some more research to determine if this is really the right fix (since we don't understand why we haven't seen this problem locally).  I'd like you to test it and see how it works for you; which platform(s) do you need binaries for?\n\n<p></p><hr/>\n<em>2013-Mar-28 10:45:38 by pfc:</em> <br/>\n\nFor now, just RHEL6 x86_64 since that's what CIT runs.\n\n<p></p><hr/>\n<em>2013-Mar-29 09:56:02 by tlmiller:</em> <br/>\n\nLink sent, will be tested.  Still need to reproduce the problem here.\n\n<p></p><hr/>\n<em>2013-Apr-10 14:20:06 by tlmiller:</em> <br/>\n\nFound a user who /did/ get hit by this problem and swiped their binary.  Can now reproduce (even in the debugger!).  Confirmed that the problem is that glibc caches __cpu_features and calls optimized routines as indicated; in this particular case, HTCondor code was calling strcmp() (in order to deal with the file table).\n\n<p></p><hr/>\n<em>2013-Apr-10 16:27:47 by tlmiller:</em> <br/>\n\nOur heavy-hearted decision, made with tears in our eyes, is that we have to partition the pool, and add the bits that glibc cares about to the standard universe platform string.\n\n<p>Based on code inspection, those bits appear to be SSSE 3, SSE 4.1, and SSE 4.2; although the glibc code uses two other bits, having them set wrong will only incur a performance penalty.  (\"Prefers SSE for memory operations\" and \"Fast REP string\".  The latter instruction prefix exists on all x86 processors, but are only faster than the alternative on some; SSE has existed since the Pentium III, so I don't think we need to worry about detecting it.)  I've confirmed that (shockingly) the Linux kernel and glibc agree about which bits mean what, so we can simply grovel in /proc/cpuinfo and add which of those flags are present to the checkpoint platform string.\n\n</p><p></p><hr/>\n<em>2013-Apr-11 14:21:35 by tlmiller:</em> <br/>\n\n<strong class=\"two\">DESIGN PARAGRAPHS</strong>\n\n<p><strong>PROBLEM</strong>\n\n</p><p>A series of optimized functions in glibc are causing the standard universe grief: by detecting, at the time of the first call to these functions, if the processor supports particular instruction set extensions (SSE2, SSSE3, SSE4.1, SSE4.2), glibc can improve its performance.  Naturally, the detection is cached, so if we restart a checkpointed job on a machine without those extensions, the process will execute an illegal instruction the next time it calls these functions.\n\n</p><p><strong>SOLUTIONS</strong>\n\n</p><p>One option for a solution is to hack glibc never to use these optimized functions.  This has the advantage of keeping the pool unfragmented, but has two major disadvantages: it removes what glibc thinks is a worthwhile speedup, but more importantly, requires us to maintain another patch for glibc.  We would rather, in fact, be <em>removing</em> patches, rather than adding them.\n\n</p><p>Because this decision is made by glibc at runtime, we also can't solve this problem with matchmaking -- before start-up, the job could run on any machine.  Luckily, we already have a mechanism in place to handle this problem: the checkpoint platform (string).  By extending the platform string to include the bits that glibc cares about, we can partition the pool but also make sure that jobs don't crash after they migrate.\n\n</p><p><strong>IMPLEMENTATION</strong>\n\n</p><p>The sysapi already grovels /proc/cpuinfo, so we'll start there.  (This makes sense: as far as we know, nobody else <em>uses</em> glibc.)  We'll do two things with the attributes glibc cares about: advertise them, and add them to the checkpoint platform string.\n\n</p><p>By advertising them as individual attributes, we make it easier for admins to add new ones as or should they become necessary, and improve the ability of condor_q to analyze them usefully.  (We could just forward the 'flags' field into the job ad, substituting commas for spaces, in order to use the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> match-out-of-the-list function; but that would be harder to analyze.  It would also either include a lot of useless information or be harder to extend, when something new shows up.)  It will also standardize the representation of these attributes, which will help pools interoperate.\n\n</p><p>Likewise, we'll leave the existing patch in place, so that the checkpoint platform string can be updated by administrators as necessary.  (That is, before we the developers hear about the problem.)\n\n</p><p></p><hr/>\n<em>2013-May-20 16:38:46 by adesmet:</em> <br/>\n\n<span class=\"section\"><h2>Code Review</h2></span>\n\n<p>Code passes as is.\n\n</p><p><strong>strongly recommended</strong> The idiom \"Check for ATTR_CHECKPOINT_PLATFORM, fall back to sysapi_ckptpltfrm\" <span class=\"chng\"><a href=\"chngview?cn=35281\">[35281]</a></span> repeats several times .  May be overlooked if someone adds another call to sysapi_ckptpltfrm later.  Proposed change: create get_ckptpltfrm with encompasses the \"try param, then sysapi_ckptpltfm\" and use that instead.  Ensure that sysapi_ckptpltfrm is commented to warn that get_ckptpltfm is probably what you want.\n\n</p><p><strong>low importance</strong> <a class=\"file\" href=\"rlog?f=src/condor_sysapi/processor_flags.cpp\">/src/condor_sysapi/processor_flags.cpp</a> sysapi_processor_flags_raw Hard coded buffer of 1024. The comment (\"see ncpus.cpp\") is silly; just copy that comment over.  Or better: don't make it a hard coded buffer.  If this ever fails, it will fail cryptically as flags are silently lost.  Perhaps time to write a small \"safe_fgets\" that returns a newly malloced string (with a warning that the user needs to free it) and solve the problem once and for all?\n\n</p><p><strong>low importance</strong> <a class=\"file\" href=\"rlog?f=src/condor_sysapi/processor_flags.cpp\">/src/condor_sysapi/processor_flags.cpp</a> sysapi_processor_flags_raw Any possibility that we'll have different flags on different processors?  Seems unlikely, but I can envision a future where hyperthreaded core advertise different features.  Probably not worth trying to fix, but for bonus points: detect if the flags vary across cores and complain to the log.\n\n</p><p><strong>low importance</strong> <a class=\"file\" href=\"rlog?f=src/condor_sysapi/processor_flags.cpp\">/src/condor_sysapi/processor_flags.cpp</a> sysapi_processor_flags_raw For paranoia in case the /proc/cpuinfo format changes, assert that colon[1] == ' '?\n\n</p><p>Handing back to tlmiller\n\n</p><p></p><hr/>\n<em>2013-May-21 14:22:40 by tlmiller:</em> <br/>\n\nIn the course of investigating item 1, I discovered that CHECKPOINT_PLATFORM already existed as configuration file attribute to be used for setting the machine ad attribute <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CheckpointPlatform\" title=\"Checkpoint Platform\">CheckpointPlatform</a></span>, and confirmed that it worked.\n\n<p>I'll be removing that portion of this patch and updating the docs.</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3657\" onclick=\"get_ticket_and_populate_wrapper('3657'); return false;\" title=\"Make minor improvements to /proc/cpuinfo parsing code.\">#3657</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nMake minor improvements to /proc/cpuinfo parsing code.</td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-29 14:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35933\">[35933]</a></span>: edit of upgrade note about change to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CheckpointPlatform\" title=\"Checkpoint Platform\">CheckpointPlatform</a></span> ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-23 13:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35838\">[35838]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span>) Standard universe jobs won't resume without help after an upgrade.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-21 14:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35790\">[35790]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span>) Revert configuration setting <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CheckpointPlatform\" title=\"Checkpoint Platform\">CheckpointPlatform</a></span>; document existing configuration setting CHECKPOINT_PLATFORM, instead.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-08 16:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35669\">[35669]</a></span>: straighten out documentation for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-07 17:30</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35646\">[35646]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span>) Document standard universe \"AVX\" fixes.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Apr-16 16:12</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35429\">[35429]</a></span>: fix for windows build &amp; static analysis for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span> ===VersionHistory:None===  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Apr-16 10:46</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35414\">[35414]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span>) Add processor flags to checkpoint platform and advertised attributes.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Apr-16 10:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35413\">[35413]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span>) Add processor flags to checkpoint platform and advertised attributes.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Mar-26 16:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35281\">[35281]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3544\" onclick=\"get_ticket_and_populate_wrapper('3544'); return false;\" title=\"no AVX machine attribute causing stduniv job resumes to fail\">#3544</a></span>) Allow admins to set <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CheckpointPlatform\" title=\"Checkpoint Platform\">CheckpointPlatform</a></span> in the configuration file.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2020-Jun-11 11:20", "status": "resolved", "created": "2013-Mar-18 13:59", "fixed_version": "2013-Mar-18 13:59", "broken_version": "v070807", "priority": "5", "subsystem": "Std", "assigned_to": "tlmiller", "derived_from": "", "creator": "pfc", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "pfcouvar@syr.edu, anderson@ligo.caltech.edu, volodya@caltech.edu tannenba@cs.wisc.edu tlmiller@cs.wisc.edu,pcouvare@caltech.edu", "due_date": ""}