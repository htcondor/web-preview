{"id": 4192, "title": "Ticket #4192: Allow \"manual\" node retries within a DAG", "description": "<blockquote>\nThis is for the case where a node fails, but then the user fixes something in the submit file that will cause the node to succeed if it's re-tried.\n\n<p>This is what Brian had to say:\n\n</p><p></p><pre>  Yes - to be clear, I don't want to edit the nodes of a DAG - but change the\n  status of a node.  Here's what I would want:\n</pre>\n\n<p></p><pre>  1) For node N, kill any existing job and/or script.  Do not retry this node\n  or make forward progress..\n  2) For node N, clear any error state and change the number of retries to R.\n  Allow it to be scheduled for forward progress.\n</pre>\n\n<p>We can already do # 1.\n\n</p><p>For # 2, the re-submission of the job has to happen within DAGMan.  Internally I think it should be pretty simple -- we just need to reset the node's status from failed to ready, and reset a few things like the retry count.  The question is how the user communicates to DAGMan that a node should be \"manually\" re-tried.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-Feb-04 11:27:46 by bbockelm:</em> <br/>\n\nShoot, I must have missed it - how to do <span class=\"ticket\"><a class=\"abandoned\" href=\"tktview?tn=1\" title=\"Another Test\">#1</a></span> today?\n\n<p></p><hr/>\n<em>2014-Feb-04 11:55:55 by wenger:</em> <br/>\n\nWell, it depends on the exact behaviour you want:\n\n<p></p><ul>\n<li>If you just condor_rm the node job, any children of that job will not be run, but other \"paths\" in the DAG will continue.\n\n<p></p></li><li>If you halt the DAG with a halt file, and then condor_rm the node job, other already-submitted node jobs will continue, but no new node jobs will be submitted, and when the submitted jobs finish DAGMan will create a rescue DAG and exit (unless you unhold it first).\n\n<p></p></li><li>If you condor_rm the entire DAGMan, all progress will obviously stop and a rescue DAG will get created.\n</li></ul>\n\n<p></p><hr/>\n<em>2014-Feb-04 12:02:37 by bbockelm:</em> <br/>\n\nAh - so, that wouldn't work because:\n<ul>\n<li>The node may be in the post-script (and stuck).\n</li><li>The node may have additional retries left.  I want to kill it and prevent any future retries.\n</li></ul>\n\n<p>However, it gets us pretty close - most of the time, the use case is \"job X should run for 4 hours and it's been running for 24 hours.  Kill and resubmit it because something must have gone wrong.\"\n\n</p><p>The submit case is usually \"site X broke this morning and killed 100 of 10,000 jobs.  The sysadmin emailed me to say it is fixed and to retry things this afternoon.\"\n\n</p><p></p><hr/>\n<em>2014-Feb-04 12:07:17 by wenger:</em> <br/>\n\nAh, okay, so we need something like \"manually fail a node\", too.  (In other words, condor_rm the job, or kill the PRE or POST script, and immediately put the node into failed state, bypassing any remaining retries.)\n\n<p>Again, internally I don't think that should be so hard.  What we need to do is define a mechanism for communicating this to DAGMan.\n\n</p><p></p><hr/>\n<em>2014-Feb-04 12:20:22 by bbockelm:</em> <br/>\n\nMy initial thoughts -\n<ol>\n<li>Allow scheduler universe jobs to notify the schedd they will be listening onto a given domain socket.\n</li><li>Schedd will have a new command called \"INTERACT_WITH_JOB\".  If the remote side authenticates as the same user as the running job or as a super-user, invoke the shared port code to pass the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> to dagman.\n</li><li>At this point, DAGMan has a DC command socket authenticated by the schedd.  The client can perform additional commands against the DAGMan process.\n</li></ol>\n\n<p>(Why so complicated?  CMS doesn't have filesystem access to the schedd node...)</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2017-Apr-06 17:15", "status": "new", "created": "2014-Feb-04 11:10", "fixed_version": "2014-Feb-04 11:10", "broken_version": "v080103", "priority": "4", "subsystem": "Dag", "assigned_to": "coatsworth", "derived_from": "#4198", "creator": "wenger", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "wenger@cs.wisc.edu, bbockelm@cse.unl.edu, pfcouvar@syr.edu, coatsworth@cs.wisc.edu", "due_date": ""}