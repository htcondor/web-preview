{"id": 948, "title": "Ticket #948: DaemonCore::Reset_Timer code needs inspection", "description": "<blockquote>\nDaemonCore::Reset_Timer calls directly to TimerManager::ResetTimer. Documentation says <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ResetTimer\" title=\"Reset Timer\">ResetTimer</a></span> returns 0 on success and -1 if the timer is unknown. The current code for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ResetTimer\" title=\"Reset Timer\">ResetTimer</a></span> returns -1 properly and 0 on success OR if the timer is registered with a timeslice in which case the reset attempt is ignored.\n\n<p>NOTE: This special casing for timeslice suggests that time slices are implemented too low in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TimerManager\" title=\"Timer Manager\">TimerManager</a></span>. A time slice should be layered, and this test mostly serves as one way to protect against improper use of a time slice. A better approach would be a first class timer id and time slice, to prevent misuse of a time sliced timer id as if it were a regular timer id.\n\n</p><p>The return value of Reset_Timer is ignored almost everywhere (157 total uses), exceptions:\n\n</p><p></p><ul>\n<li>gahp-client.cpp - returned from reset_user_timer, mixed with TRUE/FALSE, and then ignored\n</li><li>vm_gahp_request.cpp - returned from resetUserTimer, mixed with TRUE/FALSE, and then ignored\n</li><li>daemon_core.cpp - checked for failure (ASSERT) in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=HandleChildAliveCommand\" title=\"Handle Child Alive Command\">HandleChildAliveCommand</a></span> when resetting timer for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=HungChildTimeout\" title=\"Hung Child Timeout\">HungChildTimeout</a></span>\n</li><li>cronjob.cpp - returned from <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=KillTimer\" title=\"Kill Timer\">KillTimer</a></span> and then ignored\n</li><li>admin_event.cpp - used to set m_timeridDoShutdown, but buggy and not worth saving, e.g. return value is conflated with Register_Timer return value\n</li><li>note: also in eventd[.V2], which doesn't count and is used improperly\n</li></ul>\n\n<p><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=HandleChildAliveCommand\" title=\"Handle Child Alive Command\">HandleChildAliveCommand</a></span> is the only proper use of a Reset_Timer return value. The check serves as a sanity check against DaemonCore's implementation of Timers. It checks to see if it has registered a timer that <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> still knows about it, e.g. DC has not lost it and no one has cancelled it without resetting the recorded timer id.\n\n</p><p>The uses of Reset_Timer's return value should be reduced to only HandleChildAliveCommand's, and then the decision should be made as to if the return value should be removed entirely.\n\n</p><p>NOTE: CancelTimer's return value is also suspect. It returns if the timer was found or not. <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CancelAllTimers\" title=\"Cancel All Timers\">CancelAllTimers</a></span> returns nothing.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "todo", "last_change": "2009-Dec-27 18:13", "status": "new", "created": "2009-Nov-14 13:42", "fixed_version": "2009-Nov-14 13:42", "broken_version": "", "priority": "4", "subsystem": "Daemons", "assigned_to": "matt", "derived_from": "#946", "creator": "matt", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu", "due_date": ""}