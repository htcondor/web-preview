{"id": 6600, "title": "Ticket #6600: net use command in a job on Windows leaks consoles", "description": "<blockquote>\nFrom one of our Windows condor users\n\n<p>I had an interesting problem that we ran into using condor and the <code>net use</code> command that I wanted to sure with you.  Basically what was happening is a set of condor jobs would always run the command <code>net use W: \\\\path\\to\\share</code>  After some amount of job runs we noticed the W:\\ was no longer available and jobs would just fail.  After some investigating we discovered the following:\n\n</p><p>Condor uses individual lsa logon sessions for each set of processes spawned off of the startd. The condor daemons use the native windows lsa functions to store credentials and launch new processes in session 0 (logon session). aka the services desktop.\n\n</p><p>When you launch a process in session 0, you get a new lsa session id for each process. This creates separation so that one process you launch into session 0 doesn't impact other processes in the same session running as the same user. In a normal lsa session within session 0, you will see a new <code>DosDevice</code> created in <code>\\Sessions\\0\\DosDevices\\&lt;lsa session id&gt;</code> with only a Global symlink (which points to <code>\\Global??</code>, the global devices mapped at \\Device such as Harddisk0).\nThis is fine, and you see the device go away when the session gets cleaned up.\n\n</p><p>The problem occurs when you run the net use command within one of these lsa sessions running in session 0. When you do this, the <code>DfsClient</code> will create a new symlink object per lsa session in each lsa session <code>DosDevice</code> directory. (the symlink points to something like <code>\\Device\\Mup\\DfsClient\\;W:&lt;lsa session id&gt;\\Bala01\\World</code>).\n\n</p><p>Looking through the condor source, it seems that in the daemon_core_main and condor_starter code a console is created for each starter. This is used to handle stdin/stdout as well as console commands to soft-kill processes (ctrl-c, etc.). In a normal scenario, this is fine, but I believe that when the <code>DfsClient</code> creates the symlink object, it connects to the console in your session and tests connectivity to the share you're mapping.\n\n</p><p>Condor will run freeConsole, which will normally release objects and free up the lsa sessions that were created; however, <em>since the =DfsClient= now has a connection to the console</em>, the console won't actually be freed.\n\n</p><p>The starter exits out, and your sessions and connections are left behind.\n\n</p><p>This is why we have so many connections. This can only be reproduced in session 0, You can't reproduce this on an RDP or WinRM session because you will always get the same lsa session, and will only ever create one symlink object.\n\n</p><p>The root of the problem seems to be that the <code>DfsClient</code> creates this mapping, and leaves the connection open for a long time. I'm not certain how long the <code>DfsClient</code> will keep these sessions open</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "defect", "last_change": "2020-Nov-09 10:52", "status": "new", "created": "2018-Mar-08 18:17", "fixed_version": "2018-Mar-08 18:17", "broken_version": "", "priority": "3", "subsystem": "DaemonsExecNode", "assigned_to": "johnkn", "derived_from": "", "creator": "johnkn", "rust": "", "customer_group": "users", "visibility": "public", "notify": "", "due_date": ""}