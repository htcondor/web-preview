{"id": 4915, "title": "Ticket #4915: Collector reuses invalid socket for forwarding", "description": "<blockquote>\nOSG is observing issues with our central collector.\n\n<p>The HTCondor-CE instance use the <code>CONDOR_VIEW_HOST</code> configuration variable to forward schedd ads from the site collector to a central collector at GOC.  We've observed many HTCondor-CE instances disappear from the collector after the biweekly maintenance, only to come back after a \"condor_reconfig\" is done at the site.\n\n</p><p>CMS has seen something similar when a top-level collector dies; since this (thankfully) doesn't happen often, we don't have a good way to reproduce.\n\n</p><p>We've been working under the assumption that this is tied in to issues with invalid security sessions.  However, OSG just got the server-logs and I no longer think this is security-related.\n\n</p><p>Here's the server logs at D_FULLDEBUG,D_NETWORK:\n\n</p><p></p><div class=\"verbatim\">\n<pre>02/26/15 12:39:29 ACCEPT bound to &lt;129.79.53.205:9619?alias=collector1.opensciencegrid.org%2cvip-collector.grid.iu.edu&gt; fd=13 peer=&lt;129.93.239.132:41134&gt;\n02/26/15 12:39:29 condor_read(fd=13 &lt;129.93.239.132:41134&gt;,,size=4,timeout=1,flags=2,non_blocking=0)\n02/26/15 12:39:29 condor_read(fd=13 &lt;129.93.239.132:41134&gt;,,size=5,timeout=0,flags=0,non_blocking=1)\n02/26/15 12:39:29 condor_read(fd=13 &lt;129.93.239.132:41134&gt;,,size=481,timeout=0,flags=0,non_blocking=1)\n02/26/15 12:39:29 Stream::get(int) incorrect pad received: ffffffd1\n</pre></div>\n\n\n<p>Here's the sendto() statement from strace:\n\n</p><p></p><div class=\"verbatim\">\n<pre>sendto(4, \"\\1\\0\\0\\1\\341\\321@\\312\\375l\\253\\211\\30\\1c\\354\\351\\257R\\16V\\0\\0\\0\\0\\0\\0\\352j\\0\\0\\0\\0\\0\\0\\0\\20Command = 1\\0SessionDuration = \\\"86400\\\"\\0AuthMethods = \\\"FS,GSI\\\"\\0Authentication = \\\"OPTIONAL\\\"\\0Enact = \\\"NO\\\"\\0Subsystem = \\\"COLLECTOR\\\"\\0ServerCommandSock = \\\"&lt;129.93.239.132:9619?noUDP&amp;sock=collector&gt;\\\"\\0ParentUniqueID = \\\"red-gw1:1561060:1423603964\\\"\\0Integrity = \\\"OPTIONAL\\\"\\0RemoteVersion = \\\"$CondorVersion: 8.3.2 Dec 29 2014 $\\\"\\0NewSession = \\\"YES\\\"\\0CryptoMethods = \\\"3DES,BLOWFISH\\\"\\0OutgoingNegotiation = \\\"PREFERRED\\\"\\0Encryption = \\\"OPTIONAL\\\"\\0SessionLease = 3600\\0ServerPid = 1561113\\0\\0\\0\", 502, 0, NULL, 0) = 502\n</pre></div>\n\n\n<p>In particular, look at the header:\n\n</p><p></p><div class=\"verbatim\">\n<pre>\\1\\0\\0\\1\\341\\321@\\312\\375l\\253\\211\\30\n</pre></div>\n\n\n<p>Bytes 5-13 are supposed to be a command int, properly padded; it looks like garbage (FWIW, the command int should be \"\\0\\0\\0\\0\\0\\0\\352j\" instead).\n\n</p><p>Ah-ha!\n\n</p><p>Poking around in the collector code, we create a list of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonClient\" title=\"Daemon Client\">DaemonClient</a></span> objects and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSocks\" title=\"Reli Socks\">ReliSocks</a></span> during the config process.  In <code>CollectorDaemon::send_classad_to_sock</code>, we have the following code:\n\n</p><p></p><div class=\"verbatim\">\n<pre>        if (!view_sock-&gt;is_connected()) {\n            // We must have gotten disconnected.  (Or this is the 1st time.)\n            ....\n            if (view_sock_timeslice.isTimeToRun()) {\n                ...\n                view_coll-&gt;connectSock(view_sock,20);\n</pre></div>\n\n\n<p>Looking in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> code, it doesn't seem that we flush message buffers on state transitions.  I think we are seeing leftover gunk in the buffers from the previous disconnect.\n\n</p><p>I see two approaches:\n</p><ol>\n<li>We delete-and-recreate the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> object.\n</li><li>We fix <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> to not have crap in its buffers.\n</li></ol>\n\n<p>(1) is an easy fix.  (2) is probably more appropriate, as I have no clue where else we might reuse <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> objects for multiple connections!</p></blockquote>", "remarks": "<blockquote>\n<em>2015-Feb-27 16:35:53 by jfrey:</em> <br/>\n\nIf integrity checking is enabled, then bytes 5-20 are the checksum, and the command int is after that. And the expected command int is there after 16 bytes of checksum. This isn't corruption.\n\n<p></p><hr/>\n<em>2015-Feb-27 16:38:35 by jfrey:</em> <br/>\n\nHowever, we did find a problem with buffers not being fully cleared on a close and reconnect when non-blocking mode is used for writing. ReliSock::SndMsg::m_out_buf needs to be deleted and set to NULL in ReliSock::init().\n\n<p>But the more we think about this, the more we're being convinced that a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> or <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SafeSock\" title=\"Safe Sock\">SafeSock</a></span> should not be reused after it's closed.\n\n</p><p></p><hr/>\n<em>2015-Feb-27 17:03:17 by jfrey:</em> <br/>\n\nIt appears that when the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> is closed and reopened, the state for whether to do integrity checks isn't cleared. So in the new connection, the client starts out doing checksums when the server isn't expecting it (since they've yet to establish a security session).\n\n<p>And CCB reuses closed <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSocks\" title=\"Reli Socks\">ReliSocks</a></span>, so we can't just ban that code path.\n\n</p><p></p><hr/>\n<em>2015-Mar-16 15:44:08 by tannenba:</em> <br/>\n\nCondierations while creating a patch for this ticket:\n\n<p></p><ol>\n<li>I didn't want to just change how the collector uses relisock, since there is at least one other place in HTCondor where a relisock is closed and then subsequently reused (ccb client).\n</li><li>I didn't want to simply obliterate all state when a relisock is closed, because some of the state (like bytes send/received) still makes sense to query after a close(), and some places in the code assume this.\n</li><li>Ideally I wanted a patch that fixed as much of the underlying cedar problems as I felt safe to do in a stable series.\n</li></ol>\n\n<p>So after much back and forth, I decided to tackle this problem by fixing just the specific problems in CEDAR with reuse of a relisock that were causing observable problems: the fact that buffers and security state lingered on after a close().  So the patches do not clear out the entire minefield, but it did clear out some mines from known code paths.\n\n</p><p>Someday we should make close() private to just cedar destructors and ccb, and make the Sock copy constructor private as well (currently the copy ctor is being used by daemoncore Create_Thread).\n\n</p><p>Assigning this ticket over to Jaime for a code review.  I tested this patch by recreating the problem described above by starting a view collector on port 9666, and then starting up a personal condor on the same machine using the following config:\n</p><div class=\"code\">\n<pre class=\"code\">NETWORK_INTERFACE = 127.0.0.1\nCONDOR_HOST = 127.0.0.1\nDAEMON_LIST = MASTER,COLLECTOR,NEGOTIATOR,SCHEDD,STARTD\nUPDATE_INTERVAL = 2\nSEC_DEFAULT_INTEGRITY = REQUIRED\nCONDOR_VIEW_HOST = 127.0.0.1:9666\nCOLLECTOR.UPDATE_COLLECTOR_WITH_TCP = True\n</pre></div>\n\n\n<p>Before the patch, restarting the view collector resulted in the view collector failing to receive any further updates until a condor_reconfig of the personal condor.  After the patch, behavior worked as expected: a restart of the view collector caused it to send an out-of-band session invalidate to the collector at port 9618, after which updates were received.\n\n</p><p></p><hr/>\n<em>2015-Mar-16 15:48:41 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>These changes look good.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-30 11:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=44457\">[44457]</a></span>: minor 8.2.8 version history item edit <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4915\" title=\"Collector reuses invalid socket for forwarding\">#4915</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-16 16:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43599\">[43599]</a></span>: Version history entry for <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4915\" title=\"Collector reuses invalid socket for forwarding\">#4915</a></span>  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-16 13:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43597\">[43597]</a></span>: Reset the security state of a cedar socket upon close. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4915\" title=\"Collector reuses invalid socket for forwarding\">#4915</a></span> Once a socket is closed, we need to discard security state such as the private key and integrity check mode, so that if the socket is reconnected we do not attempt to reuse stale session information.  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Mar-16 13:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=43596\">[43596]</a></span>: Discard all buffered data when relisock is closed or deleted. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=4915\" title=\"Collector reuses invalid socket for forwarding\">#4915</a></span> Add reset method to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SndMsg\" title=\"Snd Msg\">SndMsg</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RcvMsg\" title=\"Rcv Msg\">RcvMsg</a></span> to discard all buffers, including the SndMsg:m_out_buf buffer that holds data during non-blocking write operations and also fix bug where this buffer is potentially leaked when a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span> is deallocated.\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2015-Mar-16 16:11", "status": "resolved", "created": "2015-Feb-26 11:14", "fixed_version": "2015-Feb-26 11:14", "broken_version": "", "priority": "2", "subsystem": "DaemonsCM", "assigned_to": "tannenba", "derived_from": "#4882", "creator": "bbockelm", "rust": "", "customer_group": "osg", "visibility": "public", "notify": "bbockelm@cse.unl.edu, tlmiller@cs.wisc.edu, jfrey@cs.wisc.edu, tannenba@cs.wisc.edu, zmiller@cs.wisc.edu", "due_date": ""}