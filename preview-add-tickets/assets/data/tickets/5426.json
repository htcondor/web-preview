{"id": 5426, "title": "Ticket #5426: Split admin and user template/tool.", "description": "<blockquote>\nIt would be convenient for security reasons if the roles currently created for each annex were instead created once by the admin and used by each user's annex.  Likewise for the Lambda functions (which may need adjusting to be stack-independent, and should perhaps be moved into their own files).\n\n<p>Additionally, since we now support VPC, we should allow the admin to either tag a VPC (and its subnets) for condor_annex to find, and/or provide a tool they can run to create the VPC and subnets (all appropriately tagged) for them.\n\n</p><p>We could also create (or have the admin tag, as above) launch configurations for the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AutoScaling\" title=\"Auto Scaling\">AutoScaling</a></span> groups of each annex to use.</p></blockquote>", "remarks": "<blockquote>\n<em>2015-Dec-01 17:11:13 by tlmiller:</em> <br/>\n\nNote that the VPC must have public DNS names enabled; otherwise HTCondor as currently configured (2015-12-01) gets grumpy.\n\n<p></p><hr/>\n<em>2015-Dec-07 10:24:23 by tlmiller:</em> <br/>\n\nThe tool now includes a check at annex construction time to make sure that the VPC has public DNS names enabled.\n\n<p></p><hr/>\n<em>2015-Dec-07 10:34:41 by tlmiller:</em> <br/>\n\nIn order to obviate the need for the administrator to configure (or deliver configuration information to) every condor_annex user's machine, condor_annex can discover configuration by querying AWS.  In particular:\n\n<p>* Launch configurations named HTCondorAnnex-[1-8] will be used to generate the annex's launch configurations; presently, the annex adjusts only its AMI ID and instance type.\n\n</p><p>* The annex will create its security group in the VPC named 'HTCondorAnnex'.\n\n</p><p>* Each subnet of the VPC named 'HTCondorAnnex' will be specified in each <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AutoScaling\" title=\"Auto Scaling\">AutoScaling</a></span> Group.\n\n</p><p>This approach could be used for additional elements created by the admin template.\n\n</p><p></p><hr/>\n<em>2015-Dec-07 10:40:39 by tlmiller:</em> <br/>\n\nWe could also provide a template which creates the appropriately-named launch configurations for the default HTCondor 8.4.x AMI (once it goes public).  Maybe just one for a single-core instance type, since it's only an example?\n\n<p></p><hr/>\n<em>2015-Dec-18 09:54:30 by tlmiller:</em> <br/>\n\nIn some of these cases, names are hard to change, so it would be better to change to a tag-based approach.\n\n<p>Also, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5447\" onclick=\"get_ticket_and_populate_wrapper('5447'); return false;\" title=\"Use default keypair if available and not otherwise specified\">#5447</a></span> will need to be accounted for.\n\n</p><p></p><hr/>\n<em>2015-Dec-18 09:57:23 by tlmiller:</em> <br/>\n\nOne thing the admin template should include is a user role which has the minimal privileges necessary to use the tool.  It may be difficult to restrict this privileges enough to be useful as currently implemented.  (For instance, I would like to restrict the user role to deleting only stacks which the user has created (ideally, as the role).)  We'll have to decide if this is better-solved by creating independent accounts, especially w.r.t. tracking users who enter the wrong project ID.\n\n<p></p><hr/>\n<em>2016-Aug-25 11:30:08 by tlmiller:</em> <br/>\n\nAbandoning as specific to the prototype.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "experimental", "last_change": "2016-Aug-25 11:30", "status": "abandoned", "created": "2015-Dec-01 17:02", "fixed_version": "2015-Dec-01 17:02", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "tlmiller", "derived_from": "#5324", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}