{"id": 5037, "title": "Ticket #5037: Restructure Callbacks and event handling", "description": "<blockquote>\n<strong class=\"two\">Event Handling</strong>\n\n<p>It has long been true that any event which did not have a call back would cause a failure. There was no method to preset events as expected and ok. So now there is a call to allow events and another one to clear them.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">Condor::SetAllowedEvents(\"RegisterEvictedWithoutCheckpoint,RegisterSubmit,RegisterExecute,RegisterAbort\");\n</pre></div>\n\n\n<p>This makes the events legal and bypassed until removed with <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClearAllowedEvents\" title=\"Clear Allowed Events\">ClearAllowedEvents</a></span>. When an event happens a routine called <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CheckAllowed\" title=\"Check Allowed\">CheckAllowed</a></span> looks to see if the event is registered and if so no failure is declared. More on this in the Call back changes.\n\n</p><p><strong class=\"two\">Call Back Changes</strong>\n\n</p><p></p><ol>\n<li>It used to be that we reset the test module on every call to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RunTest\" title=\"Run Test\">RunTest</a></span> <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RunTestDag\" title=\"Run Test Dag\">RunTestDag</a></span> and SimpleJob::RunCheck. Set events and callbacks now only clear from an explicite call to Condor::EventReset. Ending the test will remove the impact on any event or callback. This persistenceof the new allowed events and callbacks is a very substantial change.\n</li><li>Since so much is done the SimpleJob:RunCheck including multiple uses per test, The module had to have memory of set callbacks so that a second call to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RunCheck\" title=\"Run Check\">RunCheck</a></span> would know this. The routine which lears events remembered in SimpleJob.pm is SimpleJob::CallbackReset.\n</li><li>You may reset any callback by passing a new handler. Runcheck at the beginning will over ride saved handlers if a new one is passed in.\n</li><li>The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RegisteredTimed\" title=\"Registered Timed\">RegisteredTimed</a></span> callback had conflicting usage from tests and from SimpleJob::RunCheck. The Condor.pm module now wathches the use of this timer\nand unless it is reset by a test which already has the timer. NOTE the timer is a callback and as such make sure you remove it at the right time or it might fire after you had moved on.\n</li><li>SimpleJob::Runcheck will now get it's own timer\n</li><li>Daemon log searching tools in Check::CondorLog.pm needs their own timer too or we will loose callbacks.</li></ol>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-May-07 12:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=44802\">[44802]</a></span>: New world order with three timers instead of over used 1 and <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=5037\" title=\"Restructure Callbacks and event handling\">#5037</a></span> and events persisiting until intentionally being removed.  (By Bill Taylor )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2015-May-14 14:35", "status": "resolved", "created": "2015-May-04 12:45", "fixed_version": "2015-May-04 12:45", "broken_version": "", "priority": "4", "subsystem": "Tests", "assigned_to": "bt", "derived_from": "#4520", "creator": "bt", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "johnkn@cs.wisc.edu, wenger@cs.wisc.edu", "due_date": ""}