{"id": 1825, "title": "Ticket #1825: code optimization bug in x86 rhel3 build", "description": "<blockquote>\nThe x86 rhel3 builds on V7_5_5-branch and trunk are failing tests in various ways.  I spent some time looking into this and concluded that it is likely due to incorrect code generation by the compiler.  I got a second opinion from Pete and he agreed.  We would like to be proven wrong!\n\n<p>The problem is that a call to std::string::c_str() returns a string lacking a null terminator.  Previous calls to std::string::c_str() on this same string work correctly.  In the debugger, we can see the string has a null terminator before the call to c_str() and lacks one after the call to c_str().  The value that is written where the null is desired comes from a location on the stack that is not initialized within Create_Process() but it is within that function's stack frame.  It happens in the following code:\n\n</p><p></p><div class=\"verbatim\">\n<pre>/usr/include/c++/3.2.3/bits/basic_string.h:229\n 80fc648:       8b 85 c8 0f ff ff       mov    0xffff0fc8(%ebp),%eax ; get address of string\n 80fc64e:       03 40 f4                add    0xfffffff4(%eax),%eax ; move to end of string\n/usr/include/c++/3.2.3/bits/char_traits.h:119\n 80fc651:       8a 8d 6f 0d ff ff       mov    0xffff0d6f(%ebp),%cl  ; read value from stack\n 80fc657:       88 08                   mov    %cl,(%eax)            ; assign value to end of string\n</pre></div>\n\n\n<p>Typically, in the first few calls to Create_Process, the address 0xffff0d6f(%ebp) points to a null byte.  But eventually it is common for some other value to be in this location.  We verified that we can set this value to something arbitrary at the top of the function, and it still has that value when it gets to the above code that references the address.  This makes it seem unlikely that this value is being corrupted within Create_Process().  While stepping through the code up to the point where the value is referenced, we never observe this location getting modified.  There are no explicit references to this stack offset anywhere else in the code.  Other calls to c_str() read the null value from a static variable rather than from a location on the stack, and this makes sense given the C++ code in the STL header file.\n\n</p><p>I have observed this same problem from binaries built on two different NMI build machines for this platform: nmi-0102 and nmi-0228, so it is not a problem specific to one machine.  The compiler in both cases is gcc 3.2.3, but the specific version string differs:\n\n</p><p></p><div class=\"verbatim\">\n<pre>gcc (GCC) 3.2.3 20030502 (Red Hat Linux 3.2.3-24)\ngcc (GCC) 3.2.3 20030502 (Red Hat Linux 3.2.3-59)\n</pre></div>\n\n\n<p>From all of the above, it seems that the compiler simply generated bad code.\n\n</p><p>The end result is that the first argument to the following function call is an unterminated const char *.\n\n</p><p></p><div class=\"verbatim\">\n<pre>ClaimIdParser claimId(session_id.c_str(), session_info.Value(), session_key.c_str());\n</pre></div>\n\n\n<p>When the program reads from the bytes after the end of the string, valgrind correctly detects the read of uninitialized memory.  This is the first complaint from valgrind, other than a complaint very early in the program within some ipv6 code, which Greg says is expected.  In Condor, the problem is usually not detected until the child process tries to read from an environment variable inherited from its parent.  The value of the environment variable contains some garbage characters which typically cause the child to EXCEPT like this:\n\n</p><p></p><div class=\"verbatim\">\n<pre>12/22/10 04:19:57 ERROR \"Assertion ERROR on (sesid)\" at line 2834 in file /home/condor/execute/dir_5930/userdir/src/condor_io/condor_secman.cpp\n</pre></div>\n\n\n<p><span class=\"section\"></span></p><h2>How to Fix</h2>\n\n<p>We are not very happy with any of the options for fixing this:\n\n</p><p></p><ol>\n<li>Turn off optimization for this file on this platform.\n\n<p></p></li><li>Turn off optimization for the entire build on this platform.\n\n<p></p></li><li>Perturb the affected code so that the problem appears to go away.  (For example, call c_str() once and store the result for subsequent use.)</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<em>2010-Dec-23 21:48:49 by tstclair:</em> <br/>\n\nPerturb the affected code so that the problem appears to go away. (For example, call c_str() once and store the result for subsequent use.)\n\n<p>^^^ This is exactly what optimizing compilers do...?\n\n</p><p></p><hr/>\n<em>2010-Dec-27 10:14:11 by danb:</em> <br/>\n\nNot this compiler ;-)  It did not reuse the result of c_str() in subsequent cases.  Each call produced inlined code, including the one buggy version that was the source of trouble.  Anyway, the tweak I made to the code did indeed work around this specific instance of the compiler bug, for what that's worth.\n<hr/>\n<em>2011-Jan-27 14:50:47 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 16:20:02 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Feb-01 16:44:37 by danb:</em> <br/>\n\nWe are living with the current resolution to this problem, which is that things appear to be ok after we perturbed the affected code.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-23 17:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19789\">[19789]</a></span>: Attempt to work around a compiler bug. <span class=\"ticket\"><a class=\"resolved\" href=\"tktview?tn=1825\" title=\"code optimization bug in x86 rhel3 build\">#1825</a></span>  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2011-Feb-01 16:44", "status": "resolved", "created": "2010-Dec-23 17:27", "fixed_version": "2010-Dec-23 17:27", "broken_version": "v070505", "priority": "4", "subsystem": "", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "other", "visibility": "public", "notify": "dan@hep.wisc.edu,psilord@cs.wisc.edu", "due_date": ""}