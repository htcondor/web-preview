diff --git a/src/condor_daemon_core.V6/condor_daemon_core.h b/src/condor_daemon_core.V6/condor_daemon_core.h
index 34805d6..702deff 100644
--- a/src/condor_daemon_core.V6/condor_daemon_core.h
+++ b/src/condor_daemon_core.V6/condor_daemon_core.h
@@ -177,6 +177,7 @@ struct FamilyInfo {
 	gid_t* group_ptr;
 #endif
 	const char* glexec_proxy;
+	bool want_pid_namespace;
 	const char* cgroup;
 
 	FamilyInfo() {
@@ -186,6 +187,7 @@ struct FamilyInfo {
 		group_ptr = NULL;
 #endif
 		glexec_proxy = NULL;
+		want_pid_namespace = false;
 		cgroup = NULL;
 	}
 };
diff --git a/src/condor_daemon_core.V6/daemon_core.cpp b/src/condor_daemon_core.V6/daemon_core.cpp
index 023df52..c871321 100644
--- a/src/condor_daemon_core.V6/daemon_core.cpp
+++ b/src/condor_daemon_core.V6/daemon_core.cpp
@@ -41,12 +41,20 @@ void Generic_stop_logging();
 #if HAVE_CLONE
 #include <sched.h>
 #include <sys/syscall.h>
+#include <sys/mount.h>
+
+static const char* MOUNT_PROC = "proc";
+static const char* MOUNT_SLASH_PROC = "/proc";
 #endif
 
 #if HAVE_RESOLV_H && HAVE_DECL_RES_INIT
 #include <resolv.h>
 #endif
 
+#if HAVE_CLONE
+#include <poll.h>
+#endif
+
 static const int DEFAULT_MAXCOMMANDS = 255;
 static const int DEFAULT_MAXSIGNALS = 99;
 static const int DEFAULT_MAXSOCKETS = 8;
@@ -119,6 +127,10 @@ CRITICAL_SECTION Big_fat_mutex; // coarse grained mutex for debugging purposes
 #include <sched.h>
 #endif
 
+#if !defined(CLONE_NEWPID)
+#define CLONE_NEWPID 0x20000000
+#endif
+
 static const char* EMPTY_DESCRIP = "<NULL>";
 
 // special errno values that may be returned from Create_Process
@@ -5468,7 +5480,13 @@ void DaemonCore::Send_Signal(classy_counted_ptr<DCSignalMsg> msg, bool nonblocki
 	// sanity check on the pid.  we don't want to do something silly like
 	// kill pid -1 because the pid has not been initialized yet.
 	int signed_pid = (int) pid;
+	// TODO: when using namespaces, it's possible to be PID 1!
+	// How should we handle this?
+#if defined(LINUX)
+	if ( signed_pid > -10 && signed_pid < 1 ) {
+#else
 	if ( signed_pid > -10 && signed_pid < 3 ) {
+#endif
 		EXCEPT("Send_Signal: sent unsafe pid (%d)",signed_pid);
 	}
 
@@ -6294,7 +6312,8 @@ public:
 		int the_want_command_port,
 		const sigset_t *the_sigmask,
 		size_t *core_hard_limit,
-		int		*affinity_mask
+		int		*affinity_mask,
+		bool want_pid_namespace
 	): m_errorpipe(the_errorpipe), m_args(the_args),
 	   m_job_opt_mask(the_job_opt_mask), m_env(the_env),
 	   m_inheritbuf(the_inheritbuf),
@@ -6309,7 +6328,10 @@ public:
 	   m_priv(the_priv), m_want_command_port(the_want_command_port),
 	   m_sigmask(the_sigmask), m_unix_args(0), m_unix_env(0),
 	   m_core_hard_limit(core_hard_limit),
-	   m_affinity_mask(affinity_mask)
+	   m_affinity_mask(affinity_mask),
+	   m_priv_state(PRIV_UNKNOWN),
+	   m_priv_state_parent(PRIV_UNKNOWN),
+	   m_want_pid_namespace(want_pid_namespace)
 	{
 	}
 
@@ -6326,6 +6348,7 @@ public:
 
 	pid_t clone_safe_getpid();
 	pid_t clone_safe_getppid();
+	int child_registration(pid_t, pid_t, bool);
 
 private:
 		// Data passed to us from the parent:
@@ -6334,6 +6357,7 @@ private:
 		// should expect anything that is not const to potentially be
 		// modified.
 	const int (&m_errorpipe)[2];
+	int m_syncpipe[2];
 	const ArgList &m_args;
 	const int m_job_opt_mask;
 	const Env *m_env;
@@ -6362,7 +6386,10 @@ private:
 	char **m_unix_env;
 	size_t *m_core_hard_limit;
 	const int    *m_affinity_mask;
+	priv_state m_priv_state;
+	priv_state m_priv_state_parent;
 	Env m_envobject;
+	const bool m_want_pid_namespace;
 };
 
 enum {
@@ -6423,13 +6450,42 @@ pid_t CreateProcessForkit::fork_exec() {
 		dprintf(D_FULLDEBUG,"Create_Process: using fast clone() "
 		                    "to create child process.\n");
 
+			// syncpipe is used to give the child the go-ahead to exec.
+		if (pipe(m_syncpipe)) {
+			dprintf(D_ALWAYS, "Create_Process: cannot create process "
+				"because we were unable to create a new pipe: %s\n",
+				 strerror(errno));
+			return -1;
+		}
+
+			// Request a unique PID and FS namespace.
+			// For PID NS, we need a new FS namespace in order to remount /proc so 'ps' works.
+		struct pollfd fds[0];
+		fds[0].fd = m_errorpipe[0];
+		fds[0].events = POLLIN;
+		bool pid_ns = false;
+		bool killed_child = false;
+		// Both PID and FS namespaces require PRIV_ROOT
+		if (m_want_pid_namespace) {
+			if (can_switch_ids()) {
+				m_priv_state = set_root_priv();
+				m_priv_state_parent = m_priv_state;
+			}
+			if (get_priv_state() == PRIV_ROOT) {
+				pid_ns = m_want_pid_namespace;
+			} else {
+				m_priv_state = PRIV_UNKNOWN;
+				m_priv_state_parent = PRIV_UNKNOWN;
+			}
+		}
+
 			// The stack size must be big enough for everything that
 			// happens in CreateProcessForkit::clone_fn().  In some
 			// environments, some extra steps may need to be taken to
 			// make a stack on the heap (to mark it as executable), so
 			// we just do it using the parent's stack space and we use
-			// CLONE_VFORK to ensure the child is done with the stack
-			// before the parent throws it away.
+			// synchronization with pipes to ensure the child is done 
+			// with the stack before the parent throws it away.
 		const int stack_size = 16384;
 		char child_stack[stack_size];
 
@@ -6445,29 +6501,74 @@ pid_t CreateProcessForkit::fork_exec() {
 		dprintf_before_shared_mem_clone();
 
 			// reason for flags passed to clone:
-			// CLONE_VM    - child shares same address space (so no time
-			//               wasted copying page tables)
-			// CLONE_VFORK - parent is suspended until child calls exec/exit
-			//               (so we do not throw away child's stack etc.)
-			// SIGCHLD     - we want this signal when child dies, as opposed
-			//               to some other non-standard signal
+			// CLONE_VM     - child shares same address space (so no time
+			//                wasted copying page tables)
+			// SIGCHLD      - we want this signal when child dies, as opposed
+			//                to some other non-standard signal
+			// These are optional:
+			// CLONE_NEWPID - Child lives in its own PID namespace; thinks
+			//                it's PID 1
+			// CLONE_NEWNS  - Child gets its own set of mounts; necessary for
+			//                remounting /proc later on.
 
 		enterCreateProcessChild(m_errorpipe[1]);
 
+		int flags = (CLONE_VM|SIGCHLD);
+
+		dprintf(D_ALWAYS, "About to clone.\n");
+		// We need a new FS namespace if we get a PID namespace to remount /proc
+		if (pid_ns)
+			flags |= CLONE_NEWPID|CLONE_NEWNS;
 		newpid = clone(
-			CreateProcessForkit::clone_fn,
-			child_stack_ptr,
-			(CLONE_VM|CLONE_VFORK|SIGCHLD),
-			this );
+				CreateProcessForkit::clone_fn,
+				child_stack_ptr,
+				flags,
+				this );
+		int clone_errno = errno;
+
+		if (newpid > 0) {
+			if (child_registration(newpid, clone_safe_getpid(), true)) {
+				// Drat, registration fail.  Kill the child.
+				kill(newpid, SIGKILL);
+				killed_child = true; // We'll print out this fact later on when it's safe to dprintf.
+			} else {
+				dprintf(D_ALWAYS, "Registration was a success for %d.\n", newpid);
+				write(m_syncpipe[1], "y", 1);
+			}
+		}
+			// We are done with synchronization.
+		close(m_syncpipe[1]);
 
-		exitCreateProcessChild();
+			// Close our copy of the write end.  As we didn't pass CLONE_FS, the
+			// child holds a separate FD for this pipe.
+			// We can detect when the child either exits or execs by whether the pipe is readable.
+		close(m_errorpipe[1]);
 
-			// Since we used the CLONE_VFORK flag, the child has exited
-			// or called exec by now.
+			// We can't make any memory modifications until
+			// the error pipe is closed or written to.
+			// Poll indefinitely - as long as the child dies, OS will return
+			// Throw away the result - the upper layer will actually read from pipe.
+		poll(fds, 1, -1);
 
 			// restore state
+		exitCreateProcessChild();
 		dprintf_after_shared_mem_clone();
 
+			// Close our resources.
+		close(m_errorpipe[0]);
+		close(m_syncpipe[0]);
+
+		if (killed_child) {
+			dprintf(D_ALWAYS, "Killed child PID %d because registration failed.\n", newpid);
+		}
+
+		if ((newpid == -1) && (clone_errno == EINVAL)) {
+			dprintf(D_ALWAYS, "PID namespaces not supported in this kernel.");
+		}
+
+		if (m_priv_state_parent != PRIV_UNKNOWN)
+			set_priv(m_priv_state_parent);
+
 		return newpid;
 	}
 #endif /* HAVE_CLONE */
@@ -6490,34 +6591,12 @@ int CreateProcessForkit::clone_fn( void *arg ) {
 	return 0;
 }
 
-void CreateProcessForkit::exec() {
-	extern char **environ;
+int CreateProcessForkit::child_registration(pid_t pid, pid_t ppid, bool parent=false) {
+		// Register the child process.
+		// If CLONE_NEWPID is used, then the child will think it's PID 1 and
+		// register itself as that with the procd; not going to work.  This function
+		// is called by the parent process in this case.
 
-		// Keep in mind that there are two cases:
-		//   1. We got here by forking, (cannot modify parent's memory)
-		//   2. We got here by cloning, (can modify parent's memory)
-		// So don't screw up the parent's memory and don't allocate any
-		// memory assuming it will be freed on exec() or _exit().  All objects
-		// that allocate memory MUST BE in data structures that are cleaned
-		// up by the parent (e.g. this instance of CreateProcessForkit).
-		// We do have our own copy of the file descriptors and signal masks.
-
-		// All critical errors in this function should write out the error
-		// code to the error pipe and then should call _exit().  Since
-		// some of the functions called below may result in a call to
-		// exit() (e.g. dprintf could EXCEPT), we use daemonCore's
-		// exit() wrapper to catch these cases and do the right thing.
-		// That is, this function must be wrapped by calls to
-		// enterCreateProcessChild() and exitCreateProcessChild().
-
-		// make sure we're not going to try to share the lock file
-		// with our parent (if it's been defined).
-	dprintf_init_fork_child();
-
-		// close the read end of our error pipe and set the
-		// close-on-exec flag on the write end
-	close(m_errorpipe[0]);
-	fcntl(m_errorpipe[1], F_SETFD, FD_CLOEXEC);
 
 		/********************************************************
 			  Make sure we're not about to re-use a PID that
@@ -6546,75 +6625,23 @@ void CreateProcessForkit::exec() {
 			  Derek Wright <wright@cs.wisc.edu> 2004-12-15
 		********************************************************/
 
-	pid_t pid = clone_safe_getpid();
-	pid_t ppid = clone_safe_getppid();
 	DaemonCore::PidEntry* pidinfo = NULL;
 	if( (daemonCore->pidTable->lookup(pid, pidinfo) >= 0) ) {
 			// we've already got this pid in our table! we've got
 			// to bail out immediately so our parent can retry.
 		int child_errno = DaemonCore::ERRNO_PID_COLLISION;
 		write(m_errorpipe[1], &child_errno, sizeof(child_errno));
-		_exit(4);
+		return 4;
 	}
 		// If we made it here, we didn't find the PID in our
 		// table, so it's safe to continue and eventually do the
 		// exec() in this process...
 
-		/////////////////////////////////////////////////////////////////
-		// figure out what stays and goes in the child's environment
-		/////////////////////////////////////////////////////////////////
-
-		// We may determine to seed the child's environment with the parent's.
-	if( HAS_DCJOBOPT_ENV_INHERIT(m_job_opt_mask) ) {
-		m_envobject.MergeFrom(environ);
-	}
-
-		// Put the caller's env requests into the job's environment, potentially
-		// adding/overriding things in the current env if the job was allowed to
-		// inherit the parent's environment.
-	if(m_env) {
-		m_envobject.MergeFrom(*m_env);
-	}
-
-		// if I have brought in the parent's environment, then ensure that
-		// after the caller's changes have been enacted, this overrides them.
-	if( HAS_DCJOBOPT_ENV_INHERIT(m_job_opt_mask) ) {
-
-			// add/override the inherit variable with the correct value
-			// for this process.
-		m_envobject.SetEnv( EnvGetName( ENV_INHERIT ), m_inheritbuf.Value() );
-
-		if( !m_privateinheritbuf.IsEmpty() ) {
-			m_envobject.SetEnv( EnvGetName( ENV_PRIVATE ), m_privateinheritbuf.Value() );
-		}
-			// Make sure PURIFY can open windows for the daemons when
-			// they start. This functionality appears to only exist when we've
-			// decided to inherit the parent's environment. I'm not sure
-			// what the ramifications are if we include it all the time so here
-			// it stays for now.
-		char *display;
-		display = param ( "PURIFY_DISPLAY" );
-		if ( display ) {
-			m_envobject.SetEnv( "DISPLAY", display );
-			free ( display );
-			char *purebuf;
-			purebuf = (char*)malloc(sizeof(char) * 
-									(strlen("-program-name=") + strlen(m_executable) + 
-									 1));
-			if (purebuf == NULL) {
-				EXCEPT("Create_Process: PUREOPTIONS is out of memory!");
-			}
-			sprintf ( purebuf, "-program-name=%s", m_executable );
-			m_envobject.SetEnv( "PUREOPTIONS", purebuf );
-			free(purebuf);
-		}
-	}
-
-		// Now we add/override  things that must ALWAYS be in the child's 
+		// Now we add/override  things that must ALWAYS be in the child's
 		// environment regardless of what is already in the child's environment.
 
-		// BEGIN pid family environment id propogation 
-		// Place the pidfamily accounting entries into our 
+		// BEGIN pid family environment id propogation
+		// Place the pidfamily accounting entries into our
 		// environment if we can and hope any children.
 		// This will help ancestors track their children a little better.
 		// We should be automatically propogating the pidfamily specifying
@@ -6628,11 +6655,11 @@ void CreateProcessForkit::exec() {
 	pidenvid_init(&penvid);
 
 		// if we weren't inheriting the parent's environment, then grab out
-		// the parent's pidfamily history... and jam it into the child's 
+		// the parent's pidfamily history... and jam it into the child's
 		// environment
 	if ( HAS_DCJOBOPT_NO_ENV_INHERIT(m_job_opt_mask) ) {
 		int i;
-			// The parent process could not have been exec'ed if there were 
+			// The parent process could not have been exec'ed if there were
 			// too many ancestor markers in its environment, so this check
 			// is more of an assertion.
 		if (pidenvid_filter_and_insert(&penvid, environ) ==
@@ -6645,12 +6672,12 @@ void CreateProcessForkit::exec() {
 					// before we exit, make sure our parent knows something
 					// went wrong before the exec...
 				write(m_errorpipe[1], &errno, sizeof(errno));
-				_exit(errno);
+				return errno;
 			}
 
 			// Propogate the ancestor history to the child's environment
 		for (i = 0; i < PIDENVID_MAX; i++) {
-			if (penvid.ancestors[i].active == TRUE) { 
+			if (penvid.ancestors[i].active == TRUE) {
 				m_envobject.SetEnv( penvid.ancestors[i].envid );
 			} else {
 					// After the first FALSE entry, there will never be
@@ -6661,19 +6688,19 @@ void CreateProcessForkit::exec() {
 	}
 
 		// create the new ancestor entry for the child's environment
-	if (pidenvid_format_to_envid(envid, PIDENVID_ENVID_SIZE, 
-								 m_forker_pid, pid, m_time_of_fork, m_mii) == PIDENVID_BAD_FORMAT) 
+	if (pidenvid_format_to_envid(envid, PIDENVID_ENVID_SIZE,
+								 m_forker_pid, pid, m_time_of_fork, m_mii) == PIDENVID_BAD_FORMAT)
 		{
 			dprintf ( D_ALWAYS, "Create_Process: Failed to create envid "
 					  "\"%s\" due to bad format. !\n", envid );
 				// before we exit, make sure our parent knows something
 				// went wrong before the exec...
 			write(m_errorpipe[1], &errno, sizeof(errno));
-			_exit(errno);
+			return errno;
 		}
 
-		// if the new entry fits into the penvid, then add it to the 
-		// environment, else EXCEPT cause it is programmer's error 
+		// if the new entry fits into the penvid, then add it to the
+		// environment, else EXCEPT cause it is programmer's error
 	if (pidenvid_append(&penvid, envid) == PIDENVID_OK) {
 		m_envobject.SetEnv( envid );
 	} else {
@@ -6684,41 +6711,19 @@ void CreateProcessForkit::exec() {
 			// before we exit, make sure our parent knows something
 			// went wrong before the exec...
 		write(m_errorpipe[1], &errno, sizeof(errno));
-		_exit(errno);
-	}
-		// END pid family environment id propogation 
-
-		// The child's environment:
-	m_unix_env = m_envobject.getStringArray();
-
-
-		/////////////////////////////////////////////////////////////////
-		// figure out what stays and goes in the job's arguments
-		/////////////////////////////////////////////////////////////////
-
-	if( m_args.Count() == 0 ) {
-		dprintf(D_DAEMONCORE, "Create_Process: Arg: NULL\n");
-		ArgList tmpargs;
-		tmpargs.AppendArg(m_executable);
-		m_unix_args = tmpargs.GetStringArray();
-	}
-	else {
-		if(DebugFlags & D_DAEMONCORE) {
-			MyString arg_string;
-			m_args.GetArgsStringForDisplay(&arg_string);
-			dprintf(D_DAEMONCORE, "Create_Process: Arg: %s\n", arg_string.Value());
-		}
-		m_unix_args = m_args.GetStringArray();
+		return errno;
 	}
-
+		// END pid family environment id propogation
 
 		// check to see if this is a subfamily
 	if( ( m_family_info != NULL ) ) {
 
 			//create a new process group if we are supposed to
-		if(param_boolean( "USE_PROCESS_GROUPS", true )) {
+		if((!parent) && param_boolean( "USE_PROCESS_GROUPS", true )) {
 
 				// Set sid is the POSIX way of creating a new proc group
+				// If we have our own PID namespace, we are already the session leader
+				// and this call will fail.
 			if( setsid() == -1 )
 				{
 					dprintf(D_ALWAYS, "Create_Process: setsid() failed: %s\n",
@@ -6726,7 +6731,7 @@ void CreateProcessForkit::exec() {
 						// before we exit, make sure our parent knows something
 						// went wrong before the exec...
 					write(m_errorpipe[1], &errno, sizeof(errno));
-					_exit(errno);
+					return errno;
 				}
 		}
 
@@ -6771,7 +6776,7 @@ void CreateProcessForkit::exec() {
 			if (!ok) {
 				errno = DaemonCore::ERRNO_REGISTRATION_FAILED;
 				write(m_errorpipe[1], &errno, sizeof(errno));
-				_exit(4);
+				return 4;
 			}
 
 			if (tracking_gid_ptr != NULL) {
@@ -6779,6 +6784,138 @@ void CreateProcessForkit::exec() {
 			}
 		}
 	}
+	return 0;
+}
+
+void CreateProcessForkit::exec() {
+	extern char **environ;
+
+		// Keep in mind that there are two cases:
+		//   1. We got here by forking, (cannot modify parent's memory)
+		//   2. We got here by cloning, (can modify parent's memory)
+		// So don't screw up the parent's memory and don't allocate any
+		// memory assuming it will be freed on exec() or _exit().  All objects
+		// that allocate memory MUST BE in data structures that are cleaned
+		// up by the parent (e.g. this instance of CreateProcessForkit).
+		// We do have our own copy of the file descriptors and signal masks.
+
+		// All critical errors in this function should write out the error
+		// code to the error pipe and then should call _exit().  Since
+		// some of the functions called below may result in a call to
+		// exit() (e.g. dprintf could EXCEPT), we use daemonCore's
+		// exit() wrapper to catch these cases and do the right thing.
+		// That is, this function must be wrapped by calls to
+		// enterCreateProcessChild() and exitCreateProcessChild().
+
+		// make sure we're not going to try to share the lock file
+		// with our parent (if it's been defined).
+	dprintf_init_fork_child();
+
+	pid_t pid = clone_safe_getpid();
+
+		// Wait until the parent informs us we can proceed.
+	char ok = 'n';
+	if (read(m_syncpipe[0], &ok, 1) != 1) {
+		// Our parent wants us to die...
+		// It actually just gives us a SIGKILL.  This should
+		// be unreachable.
+		write(m_errorpipe[1], &errno, sizeof(errno));
+		_exit(errno);
+	}
+	close(m_syncpipe[0]);
+	close(m_syncpipe[1]);
+
+		// close the read end of our error pipe and set the
+		// close-on-exec flag on the write end
+	close(m_errorpipe[0]);
+	if (fcntl(m_errorpipe[1], F_SETFD, FD_CLOEXEC)) {
+		// No clue if we will leak the pipe.  Bail.
+		dprintf(D_ALWAYS, "Unable to set error pipe to CLOEXEC: %s\n", strerror(errno));
+		write(m_errorpipe[1], &errno, sizeof(errno));
+		_exit(errno);
+	}
+	dprintf(D_FULLDEBUG, "Child will attempt to exec based on parent response.\n");
+
+
+		// If we made it here, we didn't find the PID in our
+		// table, so it's safe to continue and eventually do the
+		// exec() in this process...
+
+		/////////////////////////////////////////////////////////////////
+		// figure out what stays and goes in the child's environment
+		/////////////////////////////////////////////////////////////////
+
+		// We may determine to seed the child's environment with the parent's.
+	if( HAS_DCJOBOPT_ENV_INHERIT(m_job_opt_mask) ) {
+		m_envobject.MergeFrom(environ);
+	}
+
+		// Put the caller's env requests into the job's environment, potentially
+		// adding/overriding things in the current env if the job was allowed to
+		// inherit the parent's environment.
+	if(m_env) {
+		m_envobject.MergeFrom(*m_env);
+	}
+
+		// if I have brought in the parent's environment, then ensure that
+		// after the caller's changes have been enacted, this overrides them.
+	if( HAS_DCJOBOPT_ENV_INHERIT(m_job_opt_mask) ) {
+
+			// add/override the inherit variable with the correct value
+			// for this process.
+		m_envobject.SetEnv( EnvGetName( ENV_INHERIT ), m_inheritbuf.Value() );
+
+		if( !m_privateinheritbuf.IsEmpty() ) {
+			m_envobject.SetEnv( EnvGetName( ENV_PRIVATE ), m_privateinheritbuf.Value() );
+		}
+			// Make sure PURIFY can open windows for the daemons when
+			// they start. This functionality appears to only exist when we've
+			// decided to inherit the parent's environment. I'm not sure
+			// what the ramifications are if we include it all the time so here
+			// it stays for now.
+		char *display;
+		display = param ( "PURIFY_DISPLAY" );
+		if ( display ) {
+			m_envobject.SetEnv( "DISPLAY", display );
+			free ( display );
+			char *purebuf;
+			purebuf = (char*)malloc(sizeof(char) * 
+									(strlen("-program-name=") + strlen(m_executable) +
+									 1));
+			if (purebuf == NULL) {
+				EXCEPT("Create_Process: PUREOPTIONS is out of memory!");
+			}
+			sprintf ( purebuf, "-program-name=%s", m_executable );
+			m_envobject.SetEnv( "PUREOPTIONS", purebuf );
+			free(purebuf);
+		}
+	}
+
+
+		// The child's environment:
+	m_unix_env = m_envobject.getStringArray();
+
+
+		/////////////////////////////////////////////////////////////////
+		// figure out what stays and goes in the job's arguments
+		/////////////////////////////////////////////////////////////////
+
+	if( m_args.Count() == 0 ) {
+		dprintf(D_DAEMONCORE, "Create_Process: Arg: NULL\n");
+		ArgList tmpargs;
+		tmpargs.AppendArg(m_executable);
+		m_unix_args = tmpargs.GetStringArray();
+	}
+	else {
+		if(DebugFlags & D_DAEMONCORE) {
+			MyString arg_string;
+			m_args.GetArgsStringForDisplay(&arg_string);
+			dprintf(D_DAEMONCORE, "Create_Process: Arg: %s\n", arg_string.Value());
+		}
+		m_unix_args = m_args.GetStringArray();
+	}
+
+
 
 	int openfds = getdtablesize();
 
@@ -6975,6 +7112,17 @@ void CreateProcessForkit::exec() {
 		}
 	}
 
+	// We need to remount /proc.  As we have our own mount namespace,
+	// this won't change the parent's memory.
+	if ((pid == 1) && mount(MOUNT_PROC, MOUNT_SLASH_PROC, MOUNT_PROC, 0, 0)) {
+		write(m_errorpipe[1], &errno, sizeof(errno));
+		_exit(errno);
+	}
+
+	// Restore the privilege state; only needed if we are going to use NEWPID
+	if (m_priv_state != PRIV_UNKNOWN)
+		set_priv_no_memory_changes(m_priv_state);
+
 		// now head into the proper priv state...
 	if ( m_priv != PRIV_UNKNOWN ) {
 			// This is tricky in the case where we share memory with our
@@ -7044,6 +7192,7 @@ void CreateProcessForkit::exec() {
 
 		// and ( finally ) exec:
 	int exec_results;
+
 	exec_results =  execve(m_executable_fullpath, m_unix_args, m_unix_env);
 
 	if( exec_results == -1 ) {
@@ -7051,6 +7200,7 @@ void CreateProcessForkit::exec() {
 			// Let's exit with our errno.
 			// before we exit, make sure our parent knows something
 			// went wrong before the exec...
+
 		write(m_errorpipe[1], &errno, sizeof(errno));
 		_exit(errno);
 	}
@@ -8101,7 +8251,8 @@ int DaemonCore::Create_Process(
 			want_command_port,
 			sigmask,
 			core_hard_limit,
-			affinity_mask);
+			affinity_mask,
+			family_info ? family_info->want_pid_namespace : false);
 
 		newpid = forkit.fork_exec();
 	}
@@ -8121,9 +8272,6 @@ int DaemonCore::Create_Process(
 			}
 		}
 
-			// close the write end of our error pipe
-		close(errorpipe[1]);
-
 			// check our error pipe for any problems before the exec
 		int child_errno = 0;
 		if (read(errorpipe[0], &child_errno, sizeof(int)) == sizeof(int)) {
@@ -8262,6 +8410,8 @@ int DaemonCore::Create_Process(
 	}
 #endif
 
+	dprintf(D_ALWAYS, "Create process made PID %d\n", newpid);
+
 	// Now that we have a child, store the info in our pidTable
 	pidtmp = new PidEntry;
 	pidtmp->pid = newpid;
diff --git a/src/condor_starter.V6.1/vanilla_proc.cpp b/src/condor_starter.V6.1/vanilla_proc.cpp
index b4fe9d7..f08df95 100644
--- a/src/condor_starter.V6.1/vanilla_proc.cpp
+++ b/src/condor_starter.V6.1/vanilla_proc.cpp
@@ -208,6 +208,20 @@ VanillaProc::StartJob()
 	}
 #endif
 
+#if defined(LINUX)
+
+	// On Linux kernel 2.6.24 and later, we can give each
+	// job its own PID namespace
+	if (param_boolean("USE_PID_NAMESPACES", false)) {
+		if (!can_switch_ids()) {
+			EXCEPT("USE_PID_NAMESPACES enabled, but can't perform this "
+					"call in Linux unless running as root.");
+		}
+		fi.want_pid_namespace = true;
+	}
+	dprintf(D_FULLDEBUG, "PID namespace option: %s\n", fi.want_pid_namespace ? "true" : "false");
+#endif
+
 #if defined(HAVE_EXT_LIBCGROUP)
 	// Determine the cgroup
 	char* cgroup_base = param("BASE_CGROUP"), *cgroup = NULL;
