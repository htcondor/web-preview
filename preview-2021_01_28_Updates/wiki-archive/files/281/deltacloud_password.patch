diff --git a/src/condor_gridmanager/dcloudjob.cpp b/src/condor_gridmanager/dcloudjob.cpp
index f0a6ee2..351e851 100644
--- a/src/condor_gridmanager/dcloudjob.cpp
+++ b/src/condor_gridmanager/dcloudjob.cpp
@@ -220,9 +220,9 @@ DCloudJob::DCloudJob( ClassAd *classad )
 		goto error_exit;
 	}
 
-	if ( !jobAd->LookupString( ATTR_DELTACLOUD_PASSWORD, &m_password ) ) {
+	if ( !jobAd->LookupString( ATTR_DELTACLOUD_PASSWORD_FILE, &m_password ) ) {
 		sprintf( error_string, "%s is not set in the job ad",
-				 ATTR_DELTACLOUD_PASSWORD );
+				 ATTR_DELTACLOUD_PASSWORD_FILE );
 		goto error_exit;
 	}
 
diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index d2c4f8d..ed562ea 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -120,7 +120,7 @@ extern const char * const  ATTR_DELTACLOUD_PROVIDER_ID;
 extern const char * const  ATTR_DELTACLOUD_PUBLIC_NETWORK_ADDRESSES;
 extern const char * const  ATTR_DELTACLOUD_RETRY_TIMEOUT;
 extern const char * const  ATTR_DELTACLOUD_USERNAME;
-extern const char * const  ATTR_DELTACLOUD_PASSWORD;
+extern const char * const  ATTR_DELTACLOUD_PASSWORD_FILE;
 extern const char * const  ATTR_DELTACLOUD_IMAGE_ID;
 extern const char * const  ATTR_DELTACLOUD_REALM_ID;
 extern const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE;
diff --git a/src/condor_submit.V6/submit.cpp b/src/condor_submit.V6/submit.cpp
index 4a19918..17f1cc4 100644
--- a/src/condor_submit.V6/submit.cpp
+++ b/src/condor_submit.V6/submit.cpp
@@ -380,7 +380,7 @@ const char* AmazonInstanceType = "amazon_instance_type";
 // Deltacloud Parameters
 //
 const char* DeltacloudUsername = "deltacloud_username";
-const char* DeltacloudPassword = "deltacloud_password";
+const char* DeltacloudPasswordFile = "deltacloud_password_file";
 const char* DeltacloudImageId = "deltacloud_image_id";
 const char* DeltacloudRealmId = "deltacloud_realm_id";
 const char* DeltacloudHardwareProfile = "deltacloud_hardware_profile";
@@ -5075,12 +5075,21 @@ SetGridParams()
 		exit( 1 );
 	}
 
-	if ( (tmp = condor_param( DeltacloudPassword, ATTR_DELTACLOUD_PASSWORD )) ) {
-		buffer.sprintf( "%s = \"%s\"", ATTR_DELTACLOUD_PASSWORD, tmp );
+	if ( (tmp = condor_param( DeltacloudPasswordFile, ATTR_DELTACLOUD_PASSWORD_FILE )) ) {
+		// check private key file can be opened
+		if ( !DisableFileChecks ) {
+			if( ( fp=safe_fopen_wrapper(full_path(tmp),"r") ) == NULL ) {
+				fprintf( stderr, "\nERROR: Failed to open password file %s (%s)\n", 
+							 full_path(tmp), strerror(errno));
+				exit(1);
+			}
+			fclose(fp);
+		}
+		buffer.sprintf( "%s = \"%s\"", ATTR_DELTACLOUD_PASSWORD_FILE, full_path(tmp) );
 		InsertJobExpr( buffer.Value() );
 		free( tmp );
 	} else if ( JobGridType && strcasecmp( JobGridType, "deltacloud" ) == 0 ) {
-		fprintf(stderr, "\nERROR: Deltacloud jobs require a \"%s\" parameter\n", DeltacloudPassword );
+		fprintf(stderr, "\nERROR: Deltacloud jobs require a \"%s\" parameter\n", DeltacloudPasswordFile );
 		DoCleanup( 0, 0, NULL );
 		exit( 1 );
 	}
diff --git a/src/condor_utils/condor_attributes.cpp b/src/condor_utils/condor_attributes.cpp
index f4e0db2..1c56558 100644
--- a/src/condor_utils/condor_attributes.cpp
+++ b/src/condor_utils/condor_attributes.cpp
@@ -180,7 +180,7 @@ const char * const ATTR_DELTACLOUD_PROVIDER_ID	 = "DeltacloudProviderId";
 const char * const ATTR_DELTACLOUD_PUBLIC_NETWORK_ADDRESSES = "DeltacloudPublicNetworkAddresses";
 const char * const ATTR_DELTACLOUD_RETRY_TIMEOUT = "DeltacloudRetryTimeout";
 const char * const  ATTR_DELTACLOUD_USERNAME	 = "DeltacloudUsername";
-const char * const  ATTR_DELTACLOUD_PASSWORD	 = "DeltacloudPassword";
+const char * const  ATTR_DELTACLOUD_PASSWORD_FILE = "DeltacloudPasswordFile";
 const char * const  ATTR_DELTACLOUD_IMAGE_ID	 = "DeltacloudImageId";
 const char * const  ATTR_DELTACLOUD_REALM_ID	 = "DeltacloudRealmId";
 const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE = "DeltacloudHardwareProfile";
diff --git a/src/deltacloud_gahp/dcloudgahp_commands.cpp b/src/deltacloud_gahp/dcloudgahp_commands.cpp
index 599023b..19a3ec3 100644
--- a/src/deltacloud_gahp/dcloudgahp_commands.cpp
+++ b/src/deltacloud_gahp/dcloudgahp_commands.cpp
@@ -56,6 +56,72 @@ static char *escape_id(const char *id)
     return ret;
 }
 
+static ssize_t
+full_read(int fd, void *ptr, size_t nbytes)
+{
+	int nleft, nread;
+
+	nleft = nbytes;
+	while (nleft > 0) {
+
+#ifndef WIN32
+		REISSUE_READ: 
+#endif
+		nread = read(fd, ptr, nleft);
+		if (nread < 0) {
+
+#ifndef WIN32
+			/* error happened, ignore if EINTR, otherwise inform the caller */
+			if (errno == EINTR) {
+				goto REISSUE_READ;
+			}
+#endif
+			/* The caller has no idea how much was actually read in this
+				scenario and the file offset is undefined */
+			return -1;
+
+		} else if (nread == 0) {
+			/* We've reached the end of file marker, so stop looping. */
+			break;
+		}
+
+		nleft -= nread;
+			/* On Win32, void* does not default to "byte", so we cast it */
+		ptr = ((char *)ptr) + nread;
+	}
+
+	/* return how much was actually read, which could include 0 in an
+		EOF situation */
+	return (nbytes - nleft);	 
+}
+
+static char *read_file( const char *path )
+{
+	if ( path == NULL ) {
+		return NULL;
+	}
+
+	int fd = open( path, O_RDONLY );
+	if ( fd < 0 ) {
+		return NULL;
+	}
+	struct stat stat_buf;
+	if ( fstat( fd, &stat_buf ) < 0 ) {
+		close( fd );
+		return NULL;
+	}
+
+	char *data = calloc( stat_buf.st_size + 1, 1 );
+	if ( full_read( fd, data, stat_buf.st_size ) < 0 ) {
+		close( fd );
+		free( data );
+		return NULL;
+	}
+
+	close( fd );
+	return data;
+}
+
 static std::string create_instance_output(char * reqid,
 					  struct deltacloud_instance *inst)
 {
@@ -121,7 +187,7 @@ static std::string create_instance_output(char * reqid,
  */
 bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
 {
-    char *url, *user, *password, *image_id, *name, *realm_id, *hwp_id, *reqid;
+    char *url, *user, *password_file, *password, *image_id, *name, *realm_id, *hwp_id, *reqid;
     char *keyname, *userdata;
     struct deltacloud_api api;
     struct deltacloud_instance inst;
@@ -135,7 +201,7 @@ bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
     reqid = argv[1];
     url = argv[2];
     user = argv[3];
-    password = argv[4];
+    password_file = argv[4];
     image_id = argv[5];
     name = argv[6];
     realm_id = argv[7];
@@ -143,7 +209,7 @@ bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
     keyname = argv[9];
     userdata = argv[10];
 
-    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, image_id %s, name %s, realm_id %s, hwp_id %s, keyname %s\n", reqid, url, user, password, image_id, name, realm_id, hwp_id, keyname);
+    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, image_id %s, name %s, realm_id %s, hwp_id %s, keyname %s\n", reqid, url, user, password_file, image_id, name, realm_id, hwp_id, keyname);
 
     if (STRCASEEQ(url, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_URL");
@@ -153,15 +219,13 @@ bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
         output_string = create_failure(reqid, "Invalid_User");
         return FALSE;
     }
-    if (STRCASEEQ(password, NULLSTRING)) {
-        output_string = create_failure(reqid, "Invalid_Password");
-        return FALSE;
-    }
     if (STRCASEEQ(image_id, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_Image_ID");
         return FALSE;
     }
 
+    if (STRCASEEQ(password_file, NULLSTRING))
+        password_file = NULL;
     if (STRCASEEQ(name, NULLSTRING))
         name = NULL;
     if (STRCASEEQ(realm_id, NULLSTRING))
@@ -173,12 +237,23 @@ bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
     if (STRCASEEQ(userdata, NULLSTRING))
         userdata = NULL;
 
+    password = read_file( password_file );
+	if ( !password ) {
+		output_string = create_failure(reqid, "Invalid_Password_File");
+		return FALSE;
+	}
+	for ( int idx = strlen( password ) - 1; idx >= 0 && isspace( password[idx] ); idx-- ) {
+		password[idx] = '\0';
+	}
+
     if (deltacloud_initialize(&api, url, user, password) < 0) {
         output_string = create_failure(reqid, "Deltacloud_Init_Failure: %s",
                                        deltacloud_get_last_error_string());
         return FALSE;
     }
 
+	free( password );
+
     if (deltacloud_create_instance(&api, image_id, name, realm_id, hwp_id,
                                    keyname, userdata, &inst) < 0) {
         output_string = create_failure(reqid, "Create_Instance_Failure: %s",
@@ -204,7 +279,7 @@ bool dcloud_start_worker(int argc, char **argv, std::string &output_string)
  */
 bool dcloud_action_worker(int argc, char **argv, std::string &output_string)
 {
-    char *url, *user, *password, *instance_id, *action, *reqid;
+    char *url, *user, *password_file, *password, *instance_id, *action, *reqid;
     struct deltacloud_api api;
     struct deltacloud_instance instance;
     int action_ret;
@@ -218,11 +293,11 @@ bool dcloud_action_worker(int argc, char **argv, std::string &output_string)
     reqid = argv[1];
     url = argv[2];
     user = argv[3];
-    password = argv[4];
+    password_file = argv[4];
     instance_id = argv[5];
     action = argv[6];
 
-    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, instance_id %s, action %s\n", reqid, url, user, password, instance_id, action);
+    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, instance_id %s, action %s\n", reqid, url, user, password_file, instance_id, action);
 
     if (STRCASEEQ(url, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_URL");
@@ -232,10 +307,6 @@ bool dcloud_action_worker(int argc, char **argv, std::string &output_string)
         output_string = create_failure(reqid, "Invalid_User");
         return FALSE;
     }
-    if (STRCASEEQ(password, NULLSTRING)) {
-        output_string = create_failure(reqid, "Invalid_Password");
-        return FALSE;
-    }
     if (STRCASEEQ(instance_id, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_Instance_ID");
         return FALSE;
@@ -245,12 +316,26 @@ bool dcloud_action_worker(int argc, char **argv, std::string &output_string)
         return FALSE;
     }
 
+    if (STRCASEEQ(password_file, NULLSTRING))
+        password_file = NULL;
+
+    password = read_file( password_file );
+	if ( !password ) {
+		output_string = create_failure(reqid, "Invalid_Password_File");
+		return FALSE;
+	}
+	for ( int idx = strlen( password ) - 1; idx >= 0 && isspace( password[idx] ); idx-- ) {
+		password[idx] = '\0';
+	}
+
     if (deltacloud_initialize(&api, url, user, password) < 0) {
         output_string = create_failure(reqid, "Deltacloud_Init_Failure: %s",
                                        deltacloud_get_last_error_string());
         return FALSE;
     }
 
+	free( password );
+
     if (deltacloud_get_instance_by_id(&api, instance_id, &instance) < 0) {
         output_string = create_failure(reqid, "Instance_Lookup_Failure: %s",
                                        deltacloud_get_last_error_string());
@@ -298,7 +383,7 @@ cleanup_library:
  */
 bool dcloud_info_worker(int argc, char **argv, std::string &output_string)
 {
-    char *url, *user, *password, *instance_id, *reqid;
+    char *url, *user, *password_file, *password, *instance_id, *reqid;
     struct deltacloud_api api;
     struct deltacloud_instance inst;
     bool ret = FALSE;
@@ -311,10 +396,10 @@ bool dcloud_info_worker(int argc, char **argv, std::string &output_string)
     reqid = argv[1];
     url = argv[2];
     user = argv[3];
-    password = argv[4];
+    password_file = argv[4];
     instance_id = argv[5];
 
-    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, instance_id %s\n", reqid, url, user, password, instance_id);
+    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, instance_id %s\n", reqid, url, user, password_file, instance_id);
 
     if (STRCASEEQ(url, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_URL");
@@ -324,21 +409,31 @@ bool dcloud_info_worker(int argc, char **argv, std::string &output_string)
         output_string = create_failure(reqid, "Invalid_User");
         return FALSE;
     }
-    if (STRCASEEQ(password, NULLSTRING)) {
-        output_string = create_failure(reqid, "Invalid_Password");
-        return FALSE;
-    }
     if (STRCASEEQ(instance_id, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_Instance_ID");
         return FALSE;
     }
 
+    if (STRCASEEQ(password_file, NULLSTRING))
+        password_file = NULL;
+
+    password = read_file( password_file );
+	if ( !password ) {
+		output_string = create_failure(reqid, "Invalid_Password_File");
+		return FALSE;
+	}
+	for ( int idx = strlen( password ) - 1; idx >= 0 && isspace( password[idx] ); idx-- ) {
+		password[idx] = '\0';
+	}
+
     if (deltacloud_initialize(&api, url, user, password) < 0) {
         output_string = create_failure(reqid, "Deltacloud_Init_Failure: %s",
                                        deltacloud_get_last_error_string());
         return FALSE;
     }
 
+	free( password );
+
     if (deltacloud_get_instance_by_id(&api, instance_id, &inst) < 0) {
         output_string = create_failure(reqid, "Instance_Lookup_Failure %s: %s",
                                        instance_id,
@@ -364,7 +459,7 @@ cleanup_library:
  */
 bool dcloud_statusall_worker(int argc, char **argv, std::string &output_string)
 {
-    char *url, *user, *password, *reqid;
+    char *url, *user, *password_file, *password, *reqid;
     struct deltacloud_api api;
     struct deltacloud_instance *instances;
     struct deltacloud_instance *curr;
@@ -379,9 +474,9 @@ bool dcloud_statusall_worker(int argc, char **argv, std::string &output_string)
     reqid = argv[1];
     url = argv[2];
     user = argv[3];
-    password = argv[4];
+    password_file = argv[4];
 
-    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s\n", reqid, url, user, password);
+    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s\n", reqid, url, user, password_file);
 
     if (STRCASEEQ(url, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_URL");
@@ -391,10 +486,18 @@ bool dcloud_statusall_worker(int argc, char **argv, std::string &output_string)
         output_string = create_failure(reqid, "Invalid_User");
         return FALSE;
     }
-    if (STRCASEEQ(password, NULLSTRING)) {
-        output_string = create_failure(reqid, "Invalid_Password");
-        return FALSE;
-    }
+
+    if (STRCASEEQ(password_file, NULLSTRING))
+        password_file = NULL;
+
+    password = read_file( password_file );
+	if ( !password ) {
+		output_string = create_failure(reqid, "Invalid_Password_File");
+		return FALSE;
+	}
+	for ( int idx = strlen( password ) - 1; idx >= 0 && isspace( password[idx] ); idx-- ) {
+		password[idx] = '\0';
+	}
 
     if (deltacloud_initialize(&api, url, user, password) < 0) {
         output_string = create_failure(reqid, "Deltacloud_Init_Failure: %s",
@@ -402,6 +505,8 @@ bool dcloud_statusall_worker(int argc, char **argv, std::string &output_string)
         return FALSE;
     }
 
+	free( password );
+
     if (deltacloud_get_instances(&api, &instances) < 0) {
         output_string = create_failure(reqid, "Instance_Fetch_Failure: %s",
                                        deltacloud_get_last_error_string());
@@ -439,7 +544,7 @@ cleanup_library:
  */
 bool dcloud_find_worker(int argc, char **argv, std::string &output_string)
 {
-    char *url, *user, *password, *name, *reqid;
+    char *url, *user, *password_file, *password, *name, *reqid;
     struct deltacloud_api api;
     struct deltacloud_instance inst;
     int rc;
@@ -455,10 +560,10 @@ bool dcloud_find_worker(int argc, char **argv, std::string &output_string)
     reqid = argv[1];
     url = argv[2];
     user = argv[3];
-    password = argv[4];
+    password_file = argv[4];
     name = argv[5];
 
-    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, name %s\n", reqid, url, user, password, name);
+    dcloudprintf("Arguments: reqid %s, url %s, user %s, password %s, name %s\n", reqid, url, user, password_file, name);
 
     if (STRCASEEQ(url, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_URL");
@@ -468,21 +573,31 @@ bool dcloud_find_worker(int argc, char **argv, std::string &output_string)
         output_string = create_failure(reqid, "Invalid_User");
         return FALSE;
     }
-    if (STRCASEEQ(password, NULLSTRING)) {
-        output_string = create_failure(reqid, "Invalid_Password");
-        return FALSE;
-    }
     if (STRCASEEQ(name, NULLSTRING)) {
         output_string = create_failure(reqid, "Invalid_Name");
         return FALSE;
     }
 
+    if (STRCASEEQ(password_file, NULLSTRING))
+        password_file = NULL;
+
+    password = read_file( password_file );
+	if ( !password ) {
+		output_string = create_failure(reqid, "Invalid_Password_File");
+		return FALSE;
+	}
+	for ( int idx = strlen( password ) - 1; idx >= 0 && isspace( password[idx] ); idx-- ) {
+		password[idx] = '\0';
+	}
+
     if (deltacloud_initialize(&api, url, user, password) < 0) {
         output_string = create_failure(reqid, "Deltacloud_Init_Failure: %s",
                                        deltacloud_get_last_error_string());
         return FALSE;
     }
 
+	free( password );
+
     rc = deltacloud_get_instance_by_name(&api, name, &inst);
     if (rc == 0) {
         /* found the instance, output the id */
