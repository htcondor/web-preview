{"id": 424, "title": "Ticket #424: non-blocking operations need timeouts", "description": "<blockquote>\nThe 7.2.2 schedd on the CMS gatekeeper at the Wisconsin T2 ran out of file descriptors because of a never-ending non-blocking read in the security handshake.  The socket was in a connected state to a machine that crashed in some way that apparently kept TCP_KEEPALIVE happy and never resulted in the socket closing, at least not for the 2-3 days in which the problem built up.  The schedd was sending ALIVE messages and these were stacking up behind the waiting TCP security session socket.\n\n<p>At least one part of the solution is to add timeouts to non-blocking operations.  Currently, non-blocking connect has a timeout associated with it, but non-blocking reads do not.  In some places where non-blocking reads are used, a higher-level timeout is enforced via timers.  However, the non-blocking reads in the security handshake (new in Condor 7.1.2) need to have their own internal timeout in case there is no such higher-level timeout.\n\n</p><p>Simply using the existing socket timeout value as the non-blocking timeout does not seem quite right, because the two cases have different semantics.  For blocking operations, the duration of the timeout may significantly impact the performance of the daemon, so it needs to be kept fairly small.  For non-blocking operations, the duration of the timeout can be much longer without hurting performance.  It just needs to be short enough to avoid tying up too many sockets for too long.\n\n</p><p>If the non-blocking timeout is applied individually to each operation, this has the somewhat arbitrary effect of multiplying the upper bound on the lifespan of the socket by the number of operations that happen to be done on it.  Therefore, I propose adding a new socket setting which serves as a deadline for the entire socket.  If the socket still exists after the deadline, all further operations (blocking or non-blocking) should time out.\n\n</p><p>This is a little larger of a change than I would like for the stable series, but I think it is better than having two different solutions, a quick fix for the stable series, and a different fix in the development series.  I therefore propose adding socket deadlines in 7.2.3 but only applying them to the non-blocking operations in the security handshake, since this is the case where there is a known problem.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Apr-28 10:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/24427daa37e3aa08dd1c6a1b0e3847001951f11d\">[14569]</a></span>: Added SEC_TCP_SESSION_DEADLINE. This adds timeouts for non-blocking operations, generalizing the support that was already there for timing out on non-blocking connects. The problem that was observed is that sockets attempting some non-blocking operation would pile up without any timeout, eventually leading\u00a0[...]\n (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Jan-31 13:39", "status": "resolved", "created": "2009-Apr-28 10:12", "fixed_version": "2009-Apr-28 10:12", "broken_version": "v070102", "priority": "4", "subsystem": "Daemons", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "dan@hep.wisc.edu", "due_date": ""}