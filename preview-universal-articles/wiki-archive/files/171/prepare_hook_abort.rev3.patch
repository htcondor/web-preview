diff --git a/src/condor_c++_util/hook_utils.cpp b/src/condor_c++_util/hook_utils.cpp
index fc88fdc..17e5fcb 100644
--- a/src/condor_c++_util/hook_utils.cpp
+++ b/src/condor_c++_util/hook_utils.cpp
@@ -25,53 +25,59 @@
 #include "directory.h"
 
 
-char*
-validateHookPath( const char* hook_param )
+bool validateHookPath( const char* hook_param, char*& hpath )
 {
+    hpath = NULL;
 	char* tmp = param(hook_param);
-	if (tmp) {
-		StatInfo si(tmp);
-		if (si.Error() != SIGood) {
-			int si_errno = si.Errno();
-			dprintf(D_ALWAYS, "ERROR: invalid path specified for %s (%s): "
-					"stat() failed with errno %d (%s)\n",
-					hook_param, tmp, si_errno, strerror(si_errno));
-			free(tmp);
-			return NULL;
-		}
+
+    // an undefined hook parameter is not an error
+    if (NULL == tmp) return true;
+
+	StatInfo si(tmp);
+	if (si.Error() != SIGood) {
+		int si_errno = si.Errno();
+		dprintf(D_ALWAYS, "ERROR: invalid path specified for %s (%s): "
+				"stat() failed with errno %d (%s)\n",
+				hook_param, tmp, si_errno, strerror(si_errno));
+		free(tmp);
+		return false;
+	}
+
 #if !defined(WIN32)
-		mode_t mode = si.GetMode();
-		if (mode & S_IWOTH) {
-			dprintf(D_ALWAYS, "ERROR: path specified for %s (%s) "
-					"is world-writable! Refusing to use.\n",
-					hook_param, tmp);
-			free(tmp);
-			return NULL;
-		}
+	mode_t mode = si.GetMode();
+	if (mode & S_IWOTH) {
+		dprintf(D_ALWAYS, "ERROR: path specified for %s (%s) "
+				"is world-writable! Refusing to use.\n",
+				hook_param, tmp);
+		free(tmp);
+		return false;
+	}
 #endif
-		if (!si.IsExecutable()) {
-			dprintf(D_ALWAYS, "ERROR: path specified for %s (%s) "
-					"is not executable.\n", hook_param, tmp);
-			free(tmp);
-			return NULL;
-		}
-			// TODO: forbid symlinks, too?
-		
-			// Now, make sure the parent directory isn't world-writable.
+
+	if (!si.IsExecutable()) {
+		dprintf(D_ALWAYS, "ERROR: path specified for %s (%s) "
+				"is not executable.\n", hook_param, tmp);
+		free(tmp);
+		return false;
+	}
+
+	// TODO: forbid symlinks, too?
+	
+	// Now, make sure the parent directory isn't world-writable.
 #if !defined(WIN32)
-		StatInfo dir_si(si.DirPath());
-		mode_t dir_mode = dir_si.GetMode();
-		if (dir_mode & S_IWOTH) {
-			dprintf(D_ALWAYS, "ERROR: path specified for %s (%s) "
-					"is a world-writable directory (%s)! Refusing to use.\n",
-					hook_param, tmp, si.DirPath());
-			free(tmp);
-			return NULL;
-		}
+	StatInfo dir_si(si.DirPath());
+	mode_t dir_mode = dir_si.GetMode();
+	if (dir_mode & S_IWOTH) {
+		dprintf(D_ALWAYS, "ERROR: path specified for %s (%s) "
+				"is a world-writable directory (%s)! Refusing to use.\n",
+				hook_param, tmp, si.DirPath());
+		free(tmp);
+		return false;
+	}
 #endif
-	}
 
-		// If we got this far, we've either got a valid hook or it
-		// wasn't defined. Either way, we can just return that directly.
-	return tmp;
+    // If the hook parameter was defined and the path passes inspection,
+    // return with success.
+    hpath = tmp;
+	return true;
 }
diff --git a/src/condor_c++_util/hook_utils.h b/src/condor_c++_util/hook_utils.h
index abbc4e9..4dd8061 100644
--- a/src/condor_c++_util/hook_utils.h
+++ b/src/condor_c++_util/hook_utils.h
@@ -25,11 +25,11 @@
   Lookup the given hook config parameter and make sure it is
   defined, pointing to a valid executable, and that we have
   some reason to believe that executable is trust-worthy.
-
-  @return The strdup'ed string from param() if everything is
-    ok, otherwise NULL.
+  @param hook_param The name of the hook parameter
+  @param hpath Returns with path to hook. NULL if not defined, or path error
+  @return true if successful, false if there was a path error
 */
-char* validateHookPath( const char* hook_param );
+bool validateHookPath( const char* hook_param, char*& hpath );
 
 
 #endif /* _CONDOR_HOOK_UTILS_H_ */
diff --git a/src/condor_job_router/JobRouterHookMgr.cpp b/src/condor_job_router/JobRouterHookMgr.cpp
index 45145e1..d53bc4b 100644
--- a/src/condor_job_router/JobRouterHookMgr.cpp
+++ b/src/condor_job_router/JobRouterHookMgr.cpp
@@ -152,7 +152,9 @@ JobRouterHookMgr::getHookPath(HookType hook_type, classad::ClassAd ad)
 	{
 		MyString _param;
 		_param.sprintf("%s_HOOK_%s", keyword.c_str(), getHookTypeString(hook_type));
-		hook_path = validateHookPath(_param.Value());
+        // Here the distinction between undefined hook and a hook path error 
+        // is being collapsed
+		validateHookPath(_param.Value(), hook_path);
 		dprintf(D_FULLDEBUG, "Hook %s: %s\n", _param.Value(),
 			hook_path ? hook_path : "UNDEFINED");
 	}
diff --git a/src/condor_startd.V6/StartdHookMgr.cpp b/src/condor_startd.V6/StartdHookMgr.cpp
index bb07f74..b10e3c0 100644
--- a/src/condor_startd.V6/StartdHookMgr.cpp
+++ b/src/condor_startd.V6/StartdHookMgr.cpp
@@ -110,8 +110,10 @@ StartdHookMgr::getHookPath(HookType hook_type, Resource* rip)
 	if (!path) {
 		MyString _param;
 		_param.sprintf("%s_HOOK_%s", keyword, getHookTypeString(hook_type));
-		path = validateHookPath(_param.Value());
-		if (!path) {
+		bool hperr = validateHookPath(_param.Value(), path);
+        // Here the distinction between undefined hook and a hook path error 
+        // is being collapsed
+		if ((path == NULL) || (hperr)) {
 			hook_paths[(int)hook_type] = UNDEFINED;
 		}
 		else {
diff --git a/src/condor_starter.V6.1/StarterHookMgr.cpp b/src/condor_starter.V6.1/StarterHookMgr.cpp
index 41d3154..c61008f 100644
--- a/src/condor_starter.V6.1/StarterHookMgr.cpp
+++ b/src/condor_starter.V6.1/StarterHookMgr.cpp
@@ -63,12 +63,15 @@ StarterHookMgr::clearHookPaths()
 {
 	if (m_hook_prepare_job) {
 		free(m_hook_prepare_job);
+        m_hook_prepare_job = NULL;
 	}
 	if (m_hook_update_job_info) {
 		free(m_hook_update_job_info);
+        m_hook_update_job_info = NULL;
 	}
 	if (m_hook_job_exit) {
 		free(m_hook_job_exit);
+        m_hook_job_exit = NULL;
 	}
 }
 
@@ -85,14 +88,14 @@ StarterHookMgr::initialize(ClassAd* job_ad)
 		dprintf(D_FULLDEBUG,
 				"Job does not define %s, not invoking any job hooks.\n",
 				ATTR_HOOK_KEYWORD);
-		return false;
+		return true;
 	}
 	else {
 		dprintf(D_FULLDEBUG,
 				"Using %s value from job ClassAd: \"%s\"\n",
 				ATTR_HOOK_KEYWORD, m_hook_keyword);
 	}
-	reconfig();
+	if (!reconfig()) return false;
 	return HookClientMgr::initialize();
 }
 
@@ -100,26 +103,24 @@ StarterHookMgr::initialize(ClassAd* job_ad)
 bool
 StarterHookMgr::reconfig()
 {
-		// Clear out our old copies of each hook's path.
+	// Clear out our old copies of each hook's path.
 	clearHookPaths();
 
-	m_hook_prepare_job = getHookPath(HOOK_PREPARE_JOB);
-	m_hook_update_job_info = getHookPath(HOOK_UPDATE_JOB_INFO);
-	m_hook_job_exit = getHookPath(HOOK_JOB_EXIT);
+    if (!getHookPath(HOOK_PREPARE_JOB, m_hook_prepare_job)) return false;
+    if (!getHookPath(HOOK_UPDATE_JOB_INFO, m_hook_update_job_info)) return false;
+    if (!getHookPath(HOOK_JOB_EXIT, m_hook_job_exit)) return false;
 
 	return true;
 }
 
 
-char*
-StarterHookMgr::getHookPath(HookType hook_type)
+bool StarterHookMgr::getHookPath(HookType hook_type, char*& hpath)
 {
-	if (!m_hook_keyword) {
-		return NULL;
-	}
+    hpath = NULL;
+	if (!m_hook_keyword) return true;
 	MyString _param;
 	_param.sprintf("%s_HOOK_%s", m_hook_keyword, getHookTypeString(hook_type));
-	return validateHookPath(_param.Value());
+	return validateHookPath(_param.Value(), hpath);
 }
 
 
diff --git a/src/condor_starter.V6.1/StarterHookMgr.h b/src/condor_starter.V6.1/StarterHookMgr.h
index c769a1b..8b249ef 100644
--- a/src/condor_starter.V6.1/StarterHookMgr.h
+++ b/src/condor_starter.V6.1/StarterHookMgr.h
@@ -94,9 +94,10 @@ private:
 		   If the job we're running defines a hook keyword, find the
 		   validate path to the given hook.
 		   @param hook_type The hook you want the path for.
-		   @return Path to the hook if defined and valid, otherwise NULL.
+           @param hpath Returns with hook path.  NULL if undefined or path error.
+		   @return true if hook path is good (or not defined).  false if path error.
 		*/
-	char* getHookPath(HookType hook_type);
+	bool getHookPath(HookType hook_type, char*& hpath);
 
 		/// Clears out all the hook paths we've validated and saved.
 	void clearHookPaths( void );
diff --git a/src/condor_starter.V6.1/jic_local.cpp b/src/condor_starter.V6.1/jic_local.cpp
index b000903..581b170 100644
--- a/src/condor_starter.V6.1/jic_local.cpp
+++ b/src/condor_starter.V6.1/jic_local.cpp
@@ -342,7 +342,7 @@ bool
 JICLocal::initJobInfo( void ) 
 {
 		// Give our base class a chance.
-	JobInfoCommunicator::initJobInfo();
+	if (!JobInfoCommunicator::initJobInfo()) return false;
 
 	char *orig_job_iwd;
 
diff --git a/src/condor_starter.V6.1/jic_shadow.cpp b/src/condor_starter.V6.1/jic_shadow.cpp
index 334ff7c..d958343 100644
--- a/src/condor_starter.V6.1/jic_shadow.cpp
+++ b/src/condor_starter.V6.1/jic_shadow.cpp
@@ -1194,7 +1194,7 @@ bool
 JICShadow::initJobInfo( void ) 
 {
 		// Give our base class a chance.
-	JobInfoCommunicator::initJobInfo();
+	if (!JobInfoCommunicator::initJobInfo()) return false;
 
 	char *orig_job_iwd;
 
diff --git a/src/condor_starter.V6.1/job_info_communicator.cpp b/src/condor_starter.V6.1/job_info_communicator.cpp
index f0084cc..368cf62 100644
--- a/src/condor_starter.V6.1/job_info_communicator.cpp
+++ b/src/condor_starter.V6.1/job_info_communicator.cpp
@@ -712,7 +712,7 @@ JobInfoCommunicator::initJobInfo( void )
 {
 #if HAVE_JOB_HOOKS
 	m_hook_mgr = new StarterHookMgr;
-	m_hook_mgr->initialize(job_ad);
+	return m_hook_mgr->initialize(job_ad);
 #endif
 	return true;
 }
