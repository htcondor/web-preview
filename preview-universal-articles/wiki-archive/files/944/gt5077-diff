diff --git a/doc/version-history/8-5.history.tex b/doc/version-history/8-5.history.tex
index 65fb63f..aefa5b1 100644
--- a/doc/version-history/8-5.history.tex
+++ b/doc/version-history/8-5.history.tex
@@ -29,7 +29,10 @@ The details of each version are described below.
 
 \begin{itemize}
 
-\item None.
+\item Any \SubmitCmd{accounting\_group} and
+\SubmitCmd{accounting\_group\_user} values specified for a
+DAG are now propagated to all jobs of the workflow, including sub-DAGs.
+\Ticket{5077}
 
 \end{itemize}
 
diff --git a/src/condor_dagman/dagman_classad.cpp b/src/condor_dagman/dagman_classad.cpp
index a242dc6..dee6bd0 100644
--- a/src/condor_dagman/dagman_classad.cpp
+++ b/src/condor_dagman/dagman_classad.cpp
@@ -157,6 +157,34 @@ DagmanClassad::GetSetBatchName( const MyString &primaryDagFile,
 
 //---------------------------------------------------------------------------
 void
+DagmanClassad::GetAcctInfo( MyString &group, MyString &user )
+{
+	if ( !_valid ) {
+		debug_printf( DEBUG_VERBOSE,
+					"Skipping ClassAd query -- DagmanClassad object is invalid\n" );
+		return;
+	}
+
+	Qmgr_connection *queue = OpenConnection();
+	if ( !queue ) {
+		return;
+	}
+
+	GetDagAttribute( ATTR_ACCT_GROUP, group, false );
+	debug_printf( DEBUG_VERBOSE, "Workflow accounting_group: <%s>\n",
+				group.Value() );
+
+	GetDagAttribute( ATTR_ACCT_GROUP_USER, user, false );
+	debug_printf( DEBUG_VERBOSE, "Workflow accounting_group_user: <%s>\n",
+				user.Value() );
+
+	CloseConnection( queue );
+
+	return;
+}
+
+//---------------------------------------------------------------------------
+void
 DagmanClassad::InitializeMetrics()
 {
 
diff --git a/src/condor_dagman/dagman_classad.h b/src/condor_dagman/dagman_classad.h
index d8ddbe1..0bde09a 100644
--- a/src/condor_dagman/dagman_classad.h
+++ b/src/condor_dagman/dagman_classad.h
@@ -67,6 +67,12 @@ class DagmanClassad {
 	void GetSetBatchName( const MyString &primaryDagFile,
 				MyString &batchName );
 
+		/** Get the AcctGroup and AcctGroupUser values from our ClassAd.
+			@param group: A MyString to receive the AcctGroup value
+			@param user: A MyString to receive the AcctGroupUser value
+		*/
+	void GetAcctInfo( MyString &group, MyString &user );
+
   private:
 		/** Initialize metrics information related to our classad.
 		*/
@@ -100,6 +106,7 @@ class DagmanClassad {
 			@param attrVal: A MyString to receive the attribute value.
 			@param printWarning: Whether to print a warning if we
 				can't get the requested attribute.
+			@return true if we got the requested attribute, false otherwise
 		*/
 	bool GetDagAttribute( const char *attrName, MyString &attrVal,
 				bool printWarning = true );
diff --git a/src/condor_dagman/dagman_main.cpp b/src/condor_dagman/dagman_main.cpp
index c1e0eaa..8f22208 100644
--- a/src/condor_dagman/dagman_main.cpp
+++ b/src/condor_dagman/dagman_main.cpp
@@ -867,6 +867,10 @@ void main_init (int argc, char ** const argv) {
 	dagman._dagmanClassad->GetSetBatchName( dagman.primaryDagFile,
 				dagman._batchName );
 
+	dagman._dagmanClassad->GetAcctInfo(
+				dagman._submitDagDeepOpts.acctGroup,
+				dagman._submitDagDeepOpts.acctGroupUser );
+
 	dagman.ResolveDefaultLog();
 
     //
diff --git a/src/condor_dagman/dagman_recursive_submit.h b/src/condor_dagman/dagman_recursive_submit.h
index d4eaef7..065b7b9 100644
--- a/src/condor_dagman/dagman_recursive_submit.h
+++ b/src/condor_dagman/dagman_recursive_submit.h
@@ -116,6 +116,8 @@ struct SubmitDagDeepOptions
 	int priority; // Priority of parent of DAG node
 
 	bool suppress_notification;
+	MyString acctGroup;
+	MyString acctGroupUser;
 
 	SubmitDagDeepOptions() 
 	{ 
@@ -132,6 +134,8 @@ struct SubmitDagDeepOptions
 		importEnv = false;
 		priority = 0;
 		suppress_notification = true;
+		acctGroup = "";
+		acctGroupUser = "";
 	}
 };
 
diff --git a/src/condor_dagman/dagman_submit.cpp b/src/condor_dagman/dagman_submit.cpp
index 9a446c5..462d7ca 100644
--- a/src/condor_dagman/dagman_submit.cpp
+++ b/src/condor_dagman/dagman_submit.cpp
@@ -331,7 +331,44 @@ condor_submit( const Dagman &dm, const char* cmdFile, CondorID& condorID,
 	var += dm.dag->NumNodesFailed();
 	args.AppendArg( var.Value() );
 
-		// how big is the command line so far
+	if( hold_claim ){
+		args.AppendArg( "-a" );
+		MyString holdit = MyString("+") + MyString(ATTR_JOB_KEEP_CLAIM_IDLE) + " = "
+			+ dm._claim_hold_time;
+		args.AppendArg( holdit.Value() );	
+	}
+	
+	if (dm._submitDagDeepOpts.suppress_notification) {
+		args.AppendArg( "-a" );
+		MyString notify = MyString("notification = never");
+		args.AppendArg( notify.Value() );
+	}
+
+		//
+		// Add accounting group and user if we have them.
+		//
+	if ( dm._submitDagDeepOpts.acctGroup != "" ) {
+		args.AppendArg( "-a" );
+		MyString arg = "accounting_group=";
+		arg += dm._submitDagDeepOpts.acctGroup;
+		args.AppendArg( arg );
+	}
+
+	if ( dm._submitDagDeepOpts.acctGroupUser != "" ) {
+		args.AppendArg( "-a" );
+		MyString arg = "accounting_group_user=";
+		arg += dm._submitDagDeepOpts.acctGroupUser;
+		args.AppendArg( arg );
+	}
+
+		//
+		// Add parents of this node to arguments, if we have room.
+		//
+		// This should be the last thing in the arguments, except
+		// for the submit file name!!!
+		//
+
+		// how big is the command line so far?
 	MyString display;
 	args.GetArgsStringForDisplay( &display );
 	int cmdLineSize = display.Length();
@@ -356,19 +393,6 @@ condor_submit( const Dagman &dm, const char* cmdFile, CondorID& condorID,
 		args.AppendArgsFromArgList( parentNameArgs );
 	}
 
-	if( hold_claim ){
-		args.AppendArg( "-a" );
-		MyString holdit = MyString("+") + MyString(ATTR_JOB_KEEP_CLAIM_IDLE) + " = "
-			+ dm._claim_hold_time;
-		args.AppendArg( holdit.Value() );	
-	}
-	
-	if (dm._submitDagDeepOpts.suppress_notification) {
-		args.AppendArg( "-a" );
-		MyString notify = MyString("notification = never");
-		args.AppendArg( notify.Value() );
-	}
-
 	args.AppendArg( cmdFile );
 
 	bool success = do_submit( args, condorID, dm.prohibitMultiJobs );
diff --git a/src/condor_tests/CMakeLists.txt b/src/condor_tests/CMakeLists.txt
index e025138..86e6e6e 100644
--- a/src/condor_tests/CMakeLists.txt
+++ b/src/condor_tests/CMakeLists.txt
@@ -657,6 +657,7 @@ if (BUILD_TESTING)
 	condor_pl_test(job_dagman_set_attr "Test setting ClassAd attrs in DAG file" "dagman;quick;full;quicknolink")
 	condor_pl_test(job_dagman_event_timestamp "Test event timestamps in dagman.out file" "dagman;quick;full;quicknolink")
 	condor_pl_test(job_dagman_batch_name "Test setting & propagation of batch-name" "dagman;quick;full;quicknolink")
+	condor_pl_test(job_dagman_acct_grp "Test setting & propagation of accounting group and user" "dagman;quick;full;quicknolink")
 	#condor_pl_test(perf_jobs_sue_10_10_30_van "Generated jobs performance test" "performance;long")
 	#condor_pl_test(perf_xfer_deb_10_10_30_van "Generated transfer performance test" "performance;long")
 	condor_pl_test(job_filexfer_sandbox-empty_van "Are job sandboxes with bad permissions cleaned up?" "framework;quick;full;quicknolink")
diff --git a/src/condor_tests/Test_Requirements b/src/condor_tests/Test_Requirements
index 30d79c0..f296fbc 100644
--- a/src/condor_tests/Test_Requirements
+++ b/src/condor_tests/Test_Requirements
@@ -206,6 +206,7 @@ job_dagman_submit_glob-B: personal
 job_dagman_set_attr: personal
 job_dagman_event_timestamp: personal
 job_dagman_batch_name: personal
+job_dagman_acct_grp: personal
 job_filexfer_base-input1_van: personal
 job_filexfer_base_van: personal
 job_filexfer_basic_van: personal
diff --git a/src/condor_tests/job_dagman_acct_grp-lower.dag b/src/condor_tests/job_dagman_acct_grp-lower.dag
new file mode 100644
index 0000000..6e4a67c
--- /dev/null
+++ b/src/condor_tests/job_dagman_acct_grp-lower.dag
@@ -0,0 +1,5 @@
+job NodeLA job_dagman_acct_grp-node.sub
+vars NodeLA nodename = "$(JOB)"
+
+job NodeLB job_dagman_acct_grp-node.sub
+vars NodeLB nodename = "$(JOB)"
diff --git a/src/condor_tests/job_dagman_acct_grp-node.sub b/src/condor_tests/job_dagman_acct_grp-node.sub
new file mode 100644
index 0000000..1edf7d0
--- /dev/null
+++ b/src/condor_tests/job_dagman_acct_grp-node.sub
@@ -0,0 +1,6 @@
+universe = vanilla
+executable = ./x_echostring.pl
+arguments = group: $$([AcctGroup]) user: $$([AcctGroupUser])
+output = job_dagman_acct_grp-$(nodename).out
+error = job_dagman_acct_grp-$(nodename).err
+queue
diff --git a/src/condor_tests/job_dagman_acct_grp-upper.dag b/src/condor_tests/job_dagman_acct_grp-upper.dag
new file mode 100644
index 0000000..4c6860a
--- /dev/null
+++ b/src/condor_tests/job_dagman_acct_grp-upper.dag
@@ -0,0 +1,7 @@
+job NodeUA job_dagman_acct_grp-node.sub
+vars NodeUA nodename = "$(JOB)"
+
+job NodeUB job_dagman_acct_grp-node.sub
+vars NodeUB nodename = "$(JOB)"
+
+subdag external DagUC job_dagman_acct_grp-lower.dag
diff --git a/src/condor_tests/job_dagman_acct_grp.run b/src/condor_tests/job_dagman_acct_grp.run
new file mode 100755
index 0000000..afc7821
--- /dev/null
+++ b/src/condor_tests/job_dagman_acct_grp.run
@@ -0,0 +1,130 @@
+#! /usr/bin/env perl
+##**************************************************************
+##
+## Copyright (C) 1990-2007, Condor Team, Computer Sciences Department,
+## University of Wisconsin-Madison, WI.
+## 
+## Licensed under the Apache License, Version 2.0 (the "License"); you
+## may not use this file except in compliance with the License.  You may
+## obtain a copy of the License at
+## 
+##    http://www.apache.org/licenses/LICENSE-2.0
+## 
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an "AS IS" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+##
+##**************************************************************
+
+use CondorTest;
+use CondorUtils;
+
+$cmd = 'job_dagman_acct_grp-upper.dag';
+$testdesc =  'Condor submit dag - setting & propagation of accounting group and user - scheduler U';
+$testname = "job_dagman_acct_grp";
+$dagman_args = "-verbose -append accounting_group=Physics -append accounting_group_user=Albert";
+
+@outfiles = ("job_dagman_acct_grp-upper.dag.dagman.out",
+	"job_dagman_acct_grp-lower.dag.dagman.out",
+	"job_dagman_acct_grp-NodeLA.out",
+	"job_dagman_acct_grp-NodeLB.out",
+	"job_dagman_acct_grp-NodeUA.out",
+	"job_dagman_acct_grp-NodeUB.out");
+
+$expected_contents = "group: Physics user: Albert ";
+
+my $killedchosen = 0;
+
+# truly const variables in perl
+sub IDLE{1};
+sub HELD{5};
+sub RUNNING{2};
+
+# Get rid of any existing output files.
+foreach $name (@outfiles) {
+	if (-e $name) {
+		runcmd("rm -f $name");
+	}
+}
+
+$abnormal = sub 
+{
+	die "Want to see only submit, execute and successful completion\n";
+};
+
+$failure = sub 
+{
+	die "Error: DAG is not expected to fail!\n";
+};
+
+$aborted = sub 
+{
+	die "Abort event NOT expected\n";
+};
+
+$held = sub 
+{
+	die "Held event NOT expected\n";
+};
+
+$executed = sub
+{
+	my %info = @_;
+
+	CondorTest::debug("Good. We need the dag to run<$info{cluster}>\n",1);
+};
+
+$submitted = sub
+{
+	CondorTest::debug("submitted: This test will see submit, executing and successful completion\n",1);
+};
+
+$success = sub
+{
+	CondorTest::debug("executed successfully\n",1);
+	CondorTest::debug("Verifying output\n",1);
+	$diditpass = 1;
+	shift @outfiles; # get rid of upper dagman.out
+	shift @outfiles; # get rid of lower dagman.out
+	foreach $file (@outfiles) {
+		CondorTest::debug("Checking $file\n",1);
+
+		$canopen = open(OUT, "<$file");
+		if (! (defined $canopen)) {
+			CondorTest::debug("Cannot open output file <$file>:$!\n",1);
+			$diditpass = 0;
+		} else {
+			$contents = do { local $/; <OUT>; };
+			chomp $contents;
+			if ($contents eq $expected_contents) {
+				CondorTest::debug("Found <$contents> in $file\n",1);
+			} else {
+				CondorTest::debug("ERROR: expected <$expected_contents> in file $file, but found <$contents>\n",1);
+				$diditpass = 0;
+			}
+			close(OUT);
+		}
+	}
+
+	if ($diditpass == 0) {
+		die "All expected files and correct output failed\n";
+	}
+};
+
+CondorTest::RegisterExitedSuccess( $testname, $success);
+CondorTest::RegisterExitedFailure( $testname, $failure );
+CondorTest::RegisterExecute($testname, $executed);
+CondorTest::RegisterExitedAbnormal( $testname, $abnormal );
+CondorTest::RegisterAbort( $testname, $aborted );
+CondorTest::RegisterHold( $testname, $held );
+CondorTest::RegisterSubmit( $testname, $submitted );
+
+if( CondorTest::RunDagTest($testname, $cmd, 0, $dagman_args) ) {
+	CondorTest::debug("$testname: SUCCESS\n",1);
+	exit(0);
+} else {
+	die "$testname: CondorTest::RunTest() failed\n";
+}
+
diff --git a/src/condor_tests/job_dagman_batch_name.run b/src/condor_tests/job_dagman_batch_name.run
index cd82fae..747c0bf 100755
--- a/src/condor_tests/job_dagman_batch_name.run
+++ b/src/condor_tests/job_dagman_batch_name.run
@@ -26,7 +26,7 @@ $testdesc =  'Condor submit dag - setting & propagation of batch-name - schedule
 $testname = "job_dagman_batch_name";
 $dagman_args = "-verbose -batch-name job_dagman_batch_name";
 
-@outfiles = ("job_dagman_batch_name-upper.dag.lib.out",
+@outfiles = ("job_dagman_batch_name-upper.dag.dagman.out",
 	"job_dagman_batch_name-lower.dag.dagman.out",
 	"job_dagman_batch_name-NodeLA.out",
 	"job_dagman_batch_name-NodeLB.out",
