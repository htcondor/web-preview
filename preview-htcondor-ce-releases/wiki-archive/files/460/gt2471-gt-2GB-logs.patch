diff --git a/src/condor_utils/dprintf.cpp b/src/condor_utils/dprintf.cpp
index a1bc148..48106c9 100644
--- a/src/condor_utils/dprintf.cpp
+++ b/src/condor_utils/dprintf.cpp
@@ -749,12 +749,7 @@ debug_lock(int debug_level, const char *mode, int force_lock )
 				return debug_lock(debug_level, mode, 1);
 			}
 
-				// Casting length to int to get rid of compile warning.
-				// Probably format should be %ld, and we should cast to
-				// long int, but I'm afraid of changing the output format.
-				// wenger 2009-02-24.
-			_condor_dfprintf( DebugFP, "MaxLog = %d, length = %d\n",
-							  (int) MaxLog[debug_level], (int)length );
+			_condor_dfprintf(DebugFP, "MaxLog = %lld, length = %lld\n", (long long)MaxLog[debug_level], (long long)length);
 			preserve_log_file(debug_level);
 		}
 	}
diff --git a/src/condor_utils/dprintf_config.cpp b/src/condor_utils/dprintf_config.cpp
index 5781868..70e65c1 100644
--- a/src/condor_utils/dprintf_config.cpp
+++ b/src/condor_utils/dprintf_config.cpp
@@ -287,9 +287,16 @@ dprintf_config( const char *subsys )
 					(void)sprintf(pname, "MAX_%s_%s_LOG", subsys,
 								  _condor_DebugFlagNames[debug_level-1]+2);
 				}
+                
+                off_t maxlog = 0;
 				pval = param(pname);
-				if( pval != NULL ) {
-					MaxLog[debug_level] = atoi( pval );
+				if (pval != NULL) {
+                    // because there is nothing like param_long_long() or param_off_t()
+                    bool r = lex_cast(pval, maxlog);
+                    if (!r || (maxlog < 0)) {
+                        EXCEPT("Invalid config: %s = %s", pname, pval);
+                    }
+                    MaxLog[debug_level] = maxlog;
 					free(pval);
 				} else {
 					MaxLog[debug_level] = 1024*1024;
@@ -301,13 +308,7 @@ dprintf_config( const char *subsys )
 					(void)sprintf(pname, "MAX_NUM_%s_%s_LOG", subsys,
 								  _condor_DebugFlagNames[debug_level-1]+2);
 				}
-				pval = param(pname);
-				if (pval != NULL) {
-					MaxLogNum[debug_level] = atoi(pval);
-					free(pval);
-				} else {
-					MaxLogNum[debug_level] = 1;
-				}
+                MaxLogNum[debug_level] = param_integer(pname, 1, 0);
 			}
 		}
 	} else {
diff --git a/src/condor_utils/stl_string_utils.h b/src/condor_utils/stl_string_utils.h
index 20b9ce4..bda0d0a 100644
--- a/src/condor_utils/stl_string_utils.h
+++ b/src/condor_utils/stl_string_utils.h
@@ -22,6 +22,7 @@
 
 #include <string>
 #include <vector>
+#include <sstream>
 #include "condor_header_features.h"
 #include "MyString.h"
 
@@ -72,4 +73,14 @@ const char *GetNextToken(const char *delim, bool skipBlankTokens);
 
 void join(std::vector< std::string > &v, char const *delim, std::string &result);
 
+// Returns true iff (s) casts to <T>, and all of (s) is consumed,
+// i.e. if (s) is an exact representation of a value of <T>, no more and
+// no less.
+template<typename T>
+bool lex_cast(const std::string& s, T& v) {
+    std::stringstream ss(s);
+    ss >> v;
+    return ss.tellg() == s.size();
+}
+
 #endif // _stl_string_utils_h_
