diff --git a/msconfig/condor_api.vcproj b/msconfig/condor_api.vcproj
index f7c23bd..ef9efc6 100644
--- a/msconfig/condor_api.vcproj
+++ b/msconfig/condor_api.vcproj
@@ -225,6 +225,10 @@
 			>
 		</File>
 		<File
+			RelativePath="$(OutDir)\stl_string_utils.obj"
+			>
+		</File>
+		<File
 			RelativePath="$(OutDir)\operators.obj"
 			>
 		</File>
diff --git a/msconfig/condor_cpp.vcproj b/msconfig/condor_cpp.vcproj
index 0ea86d4..72c22bb 100644
--- a/msconfig/condor_cpp.vcproj
+++ b/msconfig/condor_cpp.vcproj
@@ -988,6 +988,14 @@
 			>
 		</File>
 		<File
+			RelativePath="..\src\condor_c++_util\stl_string_utils.cpp"
+			>
+		</File>
+		<File
+			RelativePath="..\src\condor_c++_util\stl_string_utils.h"
+			>
+		</File>
+		<File
 			RelativePath="..\src\condor_c++_util\net_string_list.cpp"
 			>
 		</File>
diff --git a/src/condor_c++_util/Imakefile b/src/condor_c++_util/Imakefile
index d7fd027..e0272e2 100644
--- a/src/condor_c++_util/Imakefile
+++ b/src/condor_c++_util/Imakefile
@@ -227,6 +227,7 @@ OBJ = state_machine_driver.o event_handler.o name_tab.o selector.o \
 	metric_units.o condor_ver_info.o \
 	condor_md.o \
 	proc_id.o HashTable.o MyString.o \
+        stl_string_utils.o \
 	KeyCache.o dc_stub.o which.o iso_dates.o java_config.o \
 	Regex.o my_distribution.o error_utils.o $(DH_OBJ) $(BASE64_OBJ) \
 	translation_utils.o command_strings.o enum_utils.o \
diff --git a/src/condor_c++_util/MyString.cpp b/src/condor_c++_util/MyString.cpp
index 96c79a1..fe86b55 100644
--- a/src/condor_c++_util/MyString.cpp
+++ b/src/condor_c++_util/MyString.cpp
@@ -56,6 +56,12 @@ MyString::MyString(const MyString& S)
     *this=S; // = operator is overloaded!
 }
 
+MyString::MyString(const std::string& S)
+{
+    init();
+    *this = S.c_str();
+}
+
 MyString::~MyString() 
 {
     if (Data) {
@@ -65,6 +71,13 @@ MyString::~MyString()
 	init(); // for safety -- errors if you try to re-use this object
 }
 
+
+MyString::operator std::string()
+{
+    std::string r = this->Value();
+    return r;
+}
+
 /*--------------------------------------------------------------------
  *
  * Accessors. (More accessors in MyString.h)
diff --git a/src/condor_c++_util/MyString.h b/src/condor_c++_util/MyString.h
index f57bf6d..bd98c10 100644
--- a/src/condor_c++_util/MyString.h
+++ b/src/condor_c++_util/MyString.h
@@ -24,6 +24,7 @@
 #include "condor_header_features.h"
 #include <string.h>
 #include <stdarg.h>
+#include <string>
 
 /** The MyString class is a C++ representation of a string. It was
  * written before we could reliably use the standard string class.
@@ -59,10 +60,16 @@ class MyString
 	/** Copy constructor */
 	MyString(const MyString& S);
 
+    /** Casting constructor from std::string */
+    MyString(const std::string& S);
+
 	/** Destructor */
 	~MyString();
     //@}
 
+    /** Casting operator to std::string */
+    operator std::string();
+
 	// ----------------------------------------
 	//               Accessors
 	// ----------------------------------------
diff --git a/src/condor_c++_util/stl_string_utils.cpp b/src/condor_c++_util/stl_string_utils.cpp
new file mode 100644
index 0000000..f0929fc
--- /dev/null
+++ b/src/condor_c++_util/stl_string_utils.cpp
@@ -0,0 +1,134 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2010, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+#include "condor_common.h" 
+#include "condor_snutils.h"
+#include "condor_debug.h"
+
+#include "stl_string_utils.h"
+
+void assign(std::string& dst, const MyString& src) {
+    dst = src.Value();
+}
+void assign(MyString& dst, const std::string& src) {
+    dst = src.c_str();
+}
+
+bool operator==(const MyString& L, const std::string& R) { return R == L.Value(); }
+bool operator==(const std::string& L, const MyString& R) { return L == R.Value(); }
+bool operator!=(const MyString& L, const std::string& R) { return R != L.Value(); }
+bool operator!=(const std::string& L, const MyString& R) { return L != R.Value(); }
+bool operator<(const MyString& L, const std::string& R) { return R > L.Value(); }
+bool operator<(const std::string& L, const MyString& R) { return L < R.Value(); }
+bool operator>(const MyString& L, const std::string& R) { return R < L.Value(); }
+bool operator>(const std::string& L, const MyString& R) { return L > R.Value(); }
+bool operator<=(const MyString& L, const std::string& R) { return R >= L.Value(); }
+bool operator<=(const std::string& L, const MyString& R) { return L <= R.Value(); }
+bool operator>=(const MyString& L, const std::string& R) { return R <= L.Value(); }
+bool operator>=(const std::string& L, const MyString& R) { return L >= R.Value(); }
+
+
+int sprintf(std::string& s, const char* format, va_list pargs) {
+    char fixbuf[STL_STRING_UTILS_FIXBUF];
+    const int fixlen = sizeof(fixbuf)/sizeof(fixbuf[0]);
+	int n;
+	va_list  args;
+
+    // Attempt to write to fixed buffer.  condor_snutils.{h,cpp}
+    // provides an implementation of vsnprintf() in windows, so this
+    // logic works cross platform 
+	va_copy(args, pargs);
+	n = vsnprintf(fixbuf, fixlen, format, args);
+	va_end(args);
+
+    // In this case, fixed buffer was sufficient so we're done.
+    // Return number of chars written.
+    if (n < fixlen) {
+        s = fixbuf;
+        return n;
+    }
+
+    // Otherwise, the fixed buffer was not large enough, but return from 
+    // vsnprintf() tells us how much memory we need now.
+    n += 1;
+    char* varbuf = NULL;
+    // Handle 'new' behavior mode of returning NULL or throwing exception
+    try {
+        varbuf = new char[n];
+    } catch (...) {
+        varbuf = NULL;
+    }
+    if (NULL == varbuf) EXCEPT("Failed to allocate char buffer of %d chars", n);
+
+    // re-print, using buffer of sufficient size
+	va_copy(args, pargs);
+	int nn = vsnprintf(varbuf, n, format, args);
+	va_end(args);
+
+    // Sanity check.  This ought not to happen.  Ever.
+    if (nn >= n) EXCEPT("Insufficient buffer size (%d) for printing %d chars", n, nn);
+
+    // safe to do string assignment
+    s = varbuf;
+
+    // clean up our allocated buffer
+    delete[] varbuf;
+
+    // return number of chars written
+    return nn;
+}
+
+int sprintf(std::string& s, const char* format, ...) {
+    va_list args;
+    va_start(args, format);
+    int r = sprintf(s, format, args);
+    va_end(args);
+    return r;
+}
+
+int sprintf(MyString& s, const char* format, ...) {
+    va_list args;
+    std::string t;
+    va_start(args, format);
+    // this gets me the sprintf-standard return value (# chars printed)
+    int r = sprintf(t, format, args);
+    va_end(args);
+    assign(s, t);
+    return r;
+}
+
+int sprintf_cat(std::string& s, const char* format, ...) {
+    va_list args;
+    std::string t;
+    va_start(args, format);
+    int r = sprintf(t, format, args);
+    va_end(args);
+    s += t;
+    return r;
+}
+
+int sprintf_cat(MyString& s, const char* format, ...) {
+    va_list args;
+    std::string t;
+    va_start(args, format);
+    int r = sprintf(t, format, args);
+    va_end(args);
+    s += t.c_str();
+    return r;
+}
diff --git a/src/condor_c++_util/stl_string_utils.h b/src/condor_c++_util/stl_string_utils.h
new file mode 100644
index 0000000..279f8b1
--- /dev/null
+++ b/src/condor_c++_util/stl_string_utils.h
@@ -0,0 +1,62 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2010, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+#ifndef _stl_string_utils_h_
+#define _stl_string_utils_h_ 1
+
+#include <string>
+#include "condor_header_features.h"
+#include "MyString.h"
+
+// sprintf() will try to write to a fixed buffer first, for reasons of 
+// efficiency.  This is the size of that buffer.
+#define STL_STRING_UTILS_FIXBUF 500
+
+// Analogous to standard sprintf(), but writes to std::string 's', and is
+// memory/buffer safe.
+int sprintf(std::string& s, const char* format, ...) CHECK_PRINTF_FORMAT(2,3);
+int sprintf(MyString& s, const char* format, ...) CHECK_PRINTF_FORMAT(2,3);
+
+// Appending versions of above.
+// These return number of new chars appended.
+int sprintf_cat(std::string& s, const char* format, ...) CHECK_PRINTF_FORMAT(2,3);
+int sprintf_cat(MyString& s, const char* format, ...) CHECK_PRINTF_FORMAT(2,3);
+
+// comparison ops between the two houses divided
+bool operator==(const MyString& L, const std::string& R);
+bool operator==(const std::string& L, const MyString& R);
+bool operator!=(const MyString& L, const std::string& R);
+bool operator!=(const std::string& L, const MyString& R);
+bool operator<(const MyString& L, const std::string& R);
+bool operator<(const std::string& L, const MyString& R);
+bool operator>(const MyString& L, const std::string& R);
+bool operator>(const std::string& L, const MyString& R);
+bool operator<=(const MyString& L, const std::string& R);
+bool operator<=(const std::string& L, const MyString& R);
+bool operator>=(const MyString& L, const std::string& R);
+bool operator>=(const std::string& L, const MyString& R);
+
+// MyString now provides casting ops that make these unnecessary.
+// Can now use '=' between MyString <--> std::string
+// The below assignment std::string <-- MyString will be more 
+// efficient, due to some copying in the casting op, if that matters.
+void assign(std::string& dst, const MyString& src);
+void assign(MyString& dst, const std::string& src);
+
+#endif // _stl_string_utils_h_
diff --git a/src/condor_unit_tests/FTEST_stl_string_utils.cpp b/src/condor_unit_tests/FTEST_stl_string_utils.cpp
new file mode 100644
index 0000000..c77f9ed
--- /dev/null
+++ b/src/condor_unit_tests/FTEST_stl_string_utils.cpp
@@ -0,0 +1,438 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2010, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+/*
+	This code tests the sin_to_string() function implementation.
+ */
+
+#include "condor_common.h"
+#include "condor_debug.h"
+#include "condor_config.h"
+
+#include "function_test_driver.h"
+#include "emit.h"
+#include "unit_test_utils.h"
+
+#include "stl_string_utils.h"
+
+bool test_sprintf_string();
+bool test_sprintf_MyString();
+bool test_sprintf_cat_string();
+bool test_sprintf_cat_MyString();
+bool test_comparison_ops_lhs_string();
+bool test_comparison_ops_lhs_MyString();
+
+bool FTEST_stl_string_utils(void) {
+		// beginning junk for getPortFromAddr()
+	e.emit_function("STL string utils");
+	e.emit_comment("Package of functions/operators to facilitate adoption of std::string");
+	
+		// driver to run the tests and all required setup
+	FunctionDriver driver(10);
+	driver.register_function(test_comparison_ops_lhs_string);
+	driver.register_function(test_comparison_ops_lhs_MyString);
+	driver.register_function(test_sprintf_string);
+	driver.register_function(test_sprintf_MyString);
+	driver.register_function(test_sprintf_cat_string);
+	driver.register_function(test_sprintf_cat_MyString);
+	
+		// run the tests
+	bool test_result = driver.do_all_functions();
+	e.emit_function_break();
+	return test_result;
+}
+
+
+bool test_sprintf_string() {
+    e.emit_test("Test sprintf overloading for std::string");
+
+    int nchars = 0;
+    int rchars = 0;
+    std::string dst;
+    std::string src;
+
+    nchars = STL_STRING_UTILS_FIXBUF / 2;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.c_str());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF - 1;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.c_str());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.c_str());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF + 1;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.c_str());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF * 2;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.c_str());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+	e.emit_result_success(__LINE__);
+	return true;
+}
+
+bool test_sprintf_MyString() {
+    e.emit_test("Test sprintf overloading for MyString");
+
+    int nchars = 0;
+    int rchars = 0;
+    MyString dst;
+    MyString src;
+
+    nchars = STL_STRING_UTILS_FIXBUF / 2;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.Value());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF - 1;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.Value());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.Value());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF + 1;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.Value());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+    nchars = STL_STRING_UTILS_FIXBUF * 2;
+    src="";
+    for (int j = 0;  j < nchars;  ++j) src += char('0' + (j % 10));
+    rchars = sprintf(dst, "%s", src.Value());
+    if (dst != src) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (rchars != nchars) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+	e.emit_result_success(__LINE__);
+	return true;
+}
+
+bool test_sprintf_cat_string() {
+    e.emit_test("Test sprintf_cat overloading for std::string");
+
+    std::string s = "foo";
+    int r = sprintf_cat(s, "%s", "bar");
+    if (s != "foobar") {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (r != 3) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+	e.emit_result_success(__LINE__);
+	return true;
+}
+
+bool test_sprintf_cat_MyString() {
+    e.emit_test("Test sprintf_cat overloading for MyString");
+
+    MyString s = "foo";
+    int r = sprintf_cat(s, "%s", "bar");
+    if (s != "foobar") {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if (r != 3) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }    
+
+	e.emit_result_success(__LINE__);
+	return true;
+}
+
+bool test_comparison_ops_lhs_string() {
+    e.emit_test("Test comparison operators: LHS is std::string and RHS is MyString");
+
+    std::string lhs;
+    MyString rhs;
+
+        // test operators when lhs == rhs
+    lhs = "a";
+    rhs = "a";
+    if ((lhs == rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs != rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs < rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs > rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs <= rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs >= rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+        // test operators when lhs < rhs
+    lhs = "a";
+    rhs = "b";
+    if ((lhs == rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs != rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs < rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs > rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs <= rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs >= rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+        // test operators when lhs > rhs
+    lhs = "b";
+    rhs = "a";
+    if ((lhs == rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs != rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs < rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs > rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs <= rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs >= rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+	e.emit_result_success(__LINE__);
+	return true;
+}
+
+bool test_comparison_ops_lhs_MyString() {
+    e.emit_test("Test comparison operators: LHS is MyString and LHS is std::string");
+
+    MyString lhs;
+    std::string rhs;
+
+        // test operators when lhs == rhs
+    lhs = "a";
+    rhs = "a";
+    if ((lhs == rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs != rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs < rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs > rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs <= rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs >= rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+        // test operators when lhs < rhs
+    lhs = "a";
+    rhs = "b";
+    if ((lhs == rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs != rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs < rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs > rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs <= rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs >= rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+        // test operators when lhs > rhs
+    lhs = "b";
+    rhs = "a";
+    if ((lhs == rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs != rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs < rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs > rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs <= rhs) != false) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+    if ((lhs >= rhs) != true) {
+		e.emit_result_failure(__LINE__);
+		return false;        
+    }
+
+	e.emit_result_success(__LINE__);
+	return true;
+}
diff --git a/src/condor_unit_tests/Imakefile b/src/condor_unit_tests/Imakefile
index a4d1f7e..5477e58 100644
--- a/src/condor_unit_tests/Imakefile
+++ b/src/condor_unit_tests/Imakefile
@@ -7,7 +7,8 @@ LIB = $(STD_LIBS) $(CONFIGURE_PCRE_LDFLAGS)
 OBJ = FTEST_string_to_sin.o FTEST_sin_to_string.o FTEST_getHostFromAddr.o \
 	  FTEST_getPortFromAddr.o FTEST_host_in_domain.o FTEST_is_ipaddr.o \
 	  FTEST_is_valid_network.o FTEST_is_valid_sinful.o FTEST_string_to_port.o \
-	  FTEST_string_to_hostname.o FTEST_string_to_ip.o OTEST_HashTable.o
+	  FTEST_string_to_hostname.o FTEST_string_to_ip.o OTEST_HashTable.o \
+          OTEST_MyString.o FTEST_stl_string_utils.o
 
 UNIT_TEST_DEPENDENCY_OBJ = emit.o function_test_driver.o unit_tests.o \
 	unit_test_utils.o 
diff --git a/src/condor_unit_tests/OTEST_MyString.cpp b/src/condor_unit_tests/OTEST_MyString.cpp
new file mode 100644
index 0000000..218550b
--- /dev/null
+++ b/src/condor_unit_tests/OTEST_MyString.cpp
@@ -0,0 +1,77 @@
+/***************************************************************
+ *
+ * Copyright (C) 1990-2010, Condor Team, Computer Sciences Department,
+ * University of Wisconsin-Madison, WI.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you
+ * may not use this file except in compliance with the License.  You may
+ * obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ ***************************************************************/
+
+
+/* Test the HashTable implementation.
+ */
+
+#include "condor_common.h"
+#include "condor_debug.h"
+#include "condor_config.h"
+
+#include "function_test_driver.h"
+#include "unit_test_utils.h"
+#include "emit.h"
+
+#include "MyString.h"
+#include <string>
+
+	// test functions
+bool test_stl_string_casting();
+
+bool OTEST_MyString() {
+		// beginning junk
+	e.emit_object("MyString");
+	e.emit_comment("condor's string class");
+	
+		// driver to run the tests and all required setup
+	FunctionDriver driver(10);
+	driver.register_function(test_stl_string_casting);
+	
+		// run the tests
+	bool test_result = driver.do_all_functions();
+	e.emit_function_break();
+	return test_result;
+}
+
+bool test_stl_string_casting() {
+    e.emit_test("Test casting operations wrt std::string");
+        //e.emit_input_header();
+        //e.emit_output_expected_header();
+        //e.emit_output_actual_header();
+
+    // test casting ops provided via MyString
+    MyString str1 = "foo";
+    std::string str2 = "bar";
+    str2 = str1;
+    if (str2 != str1.Value()) {
+		e.emit_result_failure(__LINE__);
+		return false;
+    }
+
+    str2 = "bar";
+    str1 = str2;
+    if (str1 != str2.c_str()) {
+		e.emit_result_failure(__LINE__);
+		return false;
+    }
+
+	e.emit_result_success(__LINE__);
+	return true;
+}
diff --git a/src/condor_unit_tests/unit_tests.cpp b/src/condor_unit_tests/unit_tests.cpp
index ef5863a..cfeb513 100644
--- a/src/condor_unit_tests/unit_tests.cpp
+++ b/src/condor_unit_tests/unit_tests.cpp
@@ -39,12 +39,14 @@ bool FTEST_string_to_hostname(void);
 bool FTEST_string_to_ip(void);
 bool FTEST_string_to_sin(void);
 bool FTEST_string_to_port(void);
+bool FTEST_stl_string_utils(void);
 bool OTEST_HashTable(void);
+bool OTEST_MyString(void);
 
 int main() {
 	e.init();
 		// set up the function driver
-	FunctionDriver driver(15);
+	FunctionDriver driver(20);
 	driver.register_function(FTEST_host_in_domain);
 	driver.register_function(FTEST_getHostFromAddr);
 	driver.register_function(FTEST_getPortFromAddr);
@@ -56,7 +58,9 @@ int main() {
 	driver.register_function(FTEST_string_to_ip);
 	driver.register_function(FTEST_string_to_sin);
 	driver.register_function(FTEST_string_to_port);
+	driver.register_function(FTEST_stl_string_utils);
 	driver.register_function(OTEST_HashTable);
+    driver.register_function(OTEST_MyString);
 
 		// run all the functions and return the result
 	bool result = driver.do_all_functions();
