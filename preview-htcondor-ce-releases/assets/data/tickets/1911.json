{"id": 1911, "title": "Ticket #1911: Use precompiled headers during the build in the post cmake world", "description": "<blockquote>\nBefore the switch over to cmake, the build on Windows leveraged MSVC compiler's precompiled headers capabilities to increase the speed of the build approx 4x.\n\n<p>Before cmake, our Windows build made one precompiled header based on <code>condor_common.h</code> (actually, two - one for C and one for C++), and then used this precompiled header for all targets. This was easy enough to do because our old build system deposited all results (.obj object files, .pch precompiled header files, etc) into one flat subdirectory. Nowadays, Cmake deposits generated results for each target in its own sub-directory which makes sharing a pre-compiled header across multiple targets challenging - <a class=\"external\" href=\"http://social.msdn.microsoft.com/Forums/en-US/vclanguage/thread/665d4183-f85c-481d-bada-03283b310099/\">several folks on the web have discussed this and ways to get around it</a>. As a generated precompiled header file is ~18MB, until precompiled headers shared across the entire solution, we want to limit the number of generated precompiled header files so the space required for a build does not explode in size by hundreds of megs.\n\n</p><p><strong>Propose the following milestones:</strong>\n\n</p><p></p><ol>\n<li>Use precompiled headers only targets with a lot of source files (more than 90 - essentially just the utils and condorapi targets) to get the most bang for the buck - e.g. fastest compilation without using tons of extra disk.  <strong>DONE</strong>\n</li></ol>\n\n<p><strong>Future Work</strong>\n\n</p><p>Potential future work on this could include:\n\n</p><p></p><ol>\n<li>Have a Cmake optional switch to enable/disable precompiled headers.\n\n<p></p></li><li>Enable one precompiled header to be used across multiple targets. This would speed up the build on Windows even more, but the complexity involved makes me wonder if it is worth the trouble. What we have currently, but using precompiled headers w/ the really large targets like utils, already gives a nice speedup w/o the dangers of trying to force MSVC to do something it wasn't intended to do (sigh).\n\n<p></p></li><li>Use precompiled headers of w/ g++ as well?</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<em>2011-Feb-11 13:22:59 by tannenba:</em> <br/>\n\nmilestone 1 above pushed into master branch, should end up in v7.5.6.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Feb-11 13:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/b64af67030ddd9008a18f303e20b1bcb10369520\">[20378]</a></span>: Added initial support for building with pre-compiled headers on Windows. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=1911\" onclick=\"get_ticket_and_populate_wrapper('1911'); return false;\" title=\"Use precompiled headers during the build in the post cmake world\">#1911</a></span> The alogirthm is to use Cmake regex support to automagically enable pre-compiled headers for .cpp files that include condor_common.h right at the start. For now, until support is added for sharing a generated precompiled header\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Mar-30 11:35", "status": "resolved", "created": "2011-Feb-11 13:10", "fixed_version": "2011-Feb-11 13:10", "broken_version": "v070505", "priority": "3", "subsystem": "Packaging", "assigned_to": "tannenba", "derived_from": "", "creator": "tannenba", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}