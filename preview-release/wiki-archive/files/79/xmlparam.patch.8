diff --git a/src/condor_examples/Imakefile b/src/condor_examples/Imakefile
index 8306f08..3629a51 100644
--- a/src/condor_examples/Imakefile
+++ b/src/condor_examples/Imakefile
@@ -40,3 +40,10 @@ static::
 html:
 
 public_copy_target(condor_limits_wrapper.sh,libexec,condor_limits_wrapper.sh,EXECUTABLE_MODE)
+
+generate_xml: y.tab.c lex.yy.c
+	$(CC) $^ -o $@  -lfl
+
+y.tab.c: generic_xml.yacc
+	$(YACC) -d $<
+
diff --git a/src/condor_examples/condor_config.generic b/src/condor_examples/condor_config.generic
index 3a3fad4..e3f13b0 100644
--- a/src/condor_examples/condor_config.generic
+++ b/src/condor_examples/condor_config.generic
@@ -2291,6 +2291,20 @@ XEN_SCRIPT = $(SBIN)/condor_vm_xen.sh
 ## description that Condor writes.
 #XEN_LOCAL_SETTINGS_FILE = /path/to/file
 
+## This is the path to the XML helper command; the libvirt_simple_script.awk
+## script just reproduces what Condor already does for the kvm/xen VM
+## universe
+
+#LIBVIRT_XML_SCRIPT = $(SBIN)/libvirt_simple_script.awk 
+
+## This is the optional debugging output file for the xml helper
+## script.  Scripts that need to output debugging messages should
+## write them to the file specified by this argument, which will be
+## passed as the second command line argument when the script is
+## executed
+
+#LIBVRT_XML_SCRIPT_ARGS = /dev/stderr
+
 
 ##
 ##--------------------------------------------------------------------
diff --git a/src/condor_vm-gahp/Imakefile b/src/condor_vm-gahp/Imakefile
index 63f1140..86185fb 100644
--- a/src/condor_vm-gahp/Imakefile
+++ b/src/condor_vm-gahp/Imakefile
@@ -2,7 +2,7 @@ VM_GAHP_SERVER = condor_vm-gahp
 
 PROGRAMS = $(VM_GAHP_SERVER)
 
-all_target( $(PROGRAMS) condor_vm_xen.sh condor_vm_vmware.pl)
+all_target( $(PROGRAMS) condor_vm_xen.sh condor_vm_vmware.pl libvirt_simple_script.awk)
 
 CFLAGS = $(STD_C_FLAGS)
 
@@ -21,6 +21,7 @@ VM_GAHP_SERVER_OBJ = vmgahp_main.o pbuffer.o vm_request.o vm_type.o vmgahp.o vmg
 public_c_plus_target($(VM_GAHP_SERVER),sbin,$(VM_GAHP_SERVER_OBJ),$(LIB))
 public_copy_target(condor_vm_xen.sh,sbin,condor_vm_xen.sh,EXECUTABLE_MODE)
 public_copy_target(condor_vm_vmware.pl,sbin,condor_vm_vmware.pl,EXECUTABLE_MODE)
+public_copy_target(libvirt_simple_script.awk,sbin,libvirt_simple_script.awk,EXECUTABLE_MODE)
 
 html:
 testbin:: all
diff --git a/src/condor_vm-gahp/libvirt_simple_script.awk b/src/condor_vm-gahp/libvirt_simple_script.awk
new file mode 100644
index 0000000..367c74c
--- /dev/null
+++ b/src/condor_vm-gahp/libvirt_simple_script.awk
@@ -0,0 +1,67 @@
+#!/usr/bin/awk -f
+
+BEGIN {
+# So that the awk interpreter does not attempt to read the command
+# line as a list of input files.
+    ARGC = 1;
+
+# Debugging output is requested
+    if(ARGV[1] != "")
+    {
+	debug_file = ARGV[1];
+    }
+    else
+    {
+# By doing this, we ensure that we only need to test for debugging
+# output once; if it is not requested, we just write all the debugging
+# statements to /dev/null
+	debug_file = "/dev/null";
+    }
+}
+
+# The idea here is to collect the job attributes as they are passed to
+# us by the VM GAHP.  The GAHP then outputs a blank line to indicate
+# that the entire classad has been sent to us.
+{
+    gsub(/\"/, "")
+    attrs[$1] = $3
+    print "Received attribute: " $1 "=" attrs[$1] >debug_file
+}
+
+END {
+    if(index(attrs["JobVMType"],"xen") != 0) 
+    {
+	print "<domain type='xen'>";
+    }
+    else if(index(attrs["JobVMType"],"kvm") != 0)
+    {
+	print "<domain type='kvm'>" ;
+    }
+    else
+    {
+	print "Unknown VM type: " index(attrs["JobVMType"], "kvm") >debug_file;
+	exit(-1);
+    }
+    print "<name>" attrs["VMPARAM_VM_NAME"] "</name>" ;
+    print "<memory>" attrs["JobVMMemory"] "</memory>" ;
+    print "<vcpu>" attrs["JobVM_VCPU"] "</vcpu>" ;
+    print "<os><type arch='i686'>hvm</type></os>" ;
+    print "<devices>" ;
+    if(attrs["JobVMNetworking"] == "TRUE")
+    {
+	if(index(attrs["JobVMNetworkingType"],"nat") != 0)
+	{
+	    print "<interface type='network'><source network='default'/></interface>" ;
+	}
+	else
+	{
+	    print "<interface type='bridge'><mac address='" attrs["JobVM_MACADDR"] "'/></interface>" ;
+	}
+    }
+    print "<disk type='file'>" ;
+    split(attrs["VMPARAM_Xen_Disk"], disk_string, ":");
+    print "<source file='" disk_string[1] "'/>" ;
+    print "<target dev='" disk_string[2] "'/>" ;
+    print "</disk></devices></domain>" ;
+    exit(0);
+}
\ No newline at end of file
diff --git a/src/condor_vm-gahp/vmgahp.cpp b/src/condor_vm-gahp/vmgahp.cpp
index bd21fc5..f636751 100644
--- a/src/condor_vm-gahp/vmgahp.cpp
+++ b/src/condor_vm-gahp/vmgahp.cpp
@@ -683,8 +683,15 @@ VMGahp::executeStart(VMRequest *req)
 	}
 
 	VMType *new_vm = NULL;
+	char * tmp = param("LIBVIRT_XML_SCRIPT");
 #if defined(LINUX)
-	if(strcasecmp(vmtype, CONDOR_VM_UNIVERSE_XEN) == 0 ) {
+	if((tmp != NULL) && (strcasecmp(vmtype, CONDOR_VM_UNIVERSE_VMWARE) != 0))
+	  {
+	    new_vm = new VirshType(m_gahp_config->m_vm_script.Value(), 
+				   vmworkingdir.Value(), m_jobAd);
+		ASSERT(new_vm);
+	  }
+	else if(strcasecmp(vmtype, CONDOR_VM_UNIVERSE_XEN) == 0 ) {
 		new_vm = new XenType(m_gahp_config->m_vm_script.Value(), 
 				vmworkingdir.Value(), m_jobAd);
 		ASSERT(new_vm);
@@ -699,7 +706,8 @@ VMGahp::executeStart(VMRequest *req)
 				m_gahp_config->m_vm_script.Value(), 
 				vmworkingdir.Value(), m_jobAd);
 		ASSERT(new_vm);
-	}else {
+	}else 
+	  {
 		// We should not reach here
 		vmprintf(D_ALWAYS, "vmtype(%s) is not yet implemented\n", vmtype);
 		req->m_has_result = true;
diff --git a/src/condor_vm-gahp/vmgahp_common.cpp b/src/condor_vm-gahp/vmgahp_common.cpp
index 2735bb0..3982354 100644
--- a/src/condor_vm-gahp/vmgahp_common.cpp
+++ b/src/condor_vm-gahp/vmgahp_common.cpp
@@ -515,18 +515,25 @@ bool canSwitchUid(void)
 	return can_switch_ids();
 }
 
+/**
+ * merge_stderr_with_stdout is intended for clients of this function
+ * that wish to have the old behavior, where stderr and stdout were
+ * both added to the same StringList.
+ */
 int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList * cmd_in,
-				   int want_stderr )
+		   StringList *cmd_err, bool merge_stderr_with_stdout)
 {
 	int result = 0;
 	FILE *fp = NULL;
+	FILE * fp_for_stdin = NULL;
 	MyString line;
 	char buff[1024];
 	StringList *my_cmd_out = cmd_out;
 
 	priv_state prev = PRIV_UNKNOWN;
 
-	int sockets[2];
+	int stdout_pipes[2];
+	int stdin_pipes[2];
 	int pid;
 	if( is_root ) {
 		prev = set_root_priv();
@@ -534,7 +541,7 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 		prev = set_user_priv();
 	}
 #if defined(WIN32)
-	if(cmd_in != NULL)
+	if((cmd_in != NULL) || (cmd_err != NULL))
 	  {
 	    vmprintf(D_ALWAYS, "Invalid use of systemCommand() in Windows.\n");
 	    return -1;
@@ -543,18 +550,33 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	//	fp = privsep_popen(args, "r", want_stderr, job_user_uid);
 	//}
 	//else {
-	fp = my_popen( args, "r", want_stderr );
+	fp = my_popen( args, "r", merge_stderr_with_stdout );
 	//}
 #else
 	// The old way of doing things (and the Win32 way of doing
 	//	things)
 	// fp = my_popen( args, "r", want_stderr );
+	if((cmd_err != NULL) && merge_stderr_with_stdout)
+	  {
+	    vmprintf(D_ALWAYS, "Invalid use of systemCommand().\n");
+	    return -1;
+	  }
+
 	PrivSepForkExec psforkexec;
 	char ** args_array = args.GetStringArray();
+	int error_pipe[2];
 		// AIX 5.2, Solaris 5.9, HPUX 11 don't have AF_LOCAL
-	if(socketpair(AF_UNIX, SOCK_STREAM, 0, sockets) < 0)
+
+	if(pipe(stdin_pipes) < 0)
 	  {
-	    vmprintf(D_ALWAYS, "Error opening local socket: %s\n", strerror(errno));
+	    vmprintf(D_ALWAYS, "Error creating pipe: %s\n", strerror(errno));
+	    return -1;
+	  }
+	if(pipe(stdout_pipes) < 0)
+	  {
+	    vmprintf(D_ALWAYS, "Error creating pipe: %s\n", strerror(errno));
+	    close(stdin_pipes[0]);
+	    close(stdin_pipes[1]);
 	    return -1;
 	  }
 
@@ -564,11 +586,26 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	      vmprintf(D_ALWAYS,
 		       "my_popenv failure on %s\n",
 		       args_array[0]);
-	      close(sockets[0]);
-	      close(sockets[1]);
+	      close(stdin_pipes[0]);
+	      close(stdin_pipes[1]);
+	      close(stdout_pipes[0]);
+	      close(stdout_pipes[1]);
 	      return -1;
 	    }
 	}
+
+	if(cmd_err != NULL)
+	  {
+	    if(pipe(error_pipe) < 0)
+	      {
+		vmprintf(D_ALWAYS, "Could not open pipe for error output: %s\n", strerror(errno));
+		close(stdin_pipes[0]);
+		close(stdin_pipes[1]);
+		close(stdout_pipes[0]);
+		close(stdout_pipes[1]);
+		return -1;
+	      }
+	  }
 	// Now fork and do what my_popen used to do
 	pid = fork();
 	if(pid < 0)
@@ -578,11 +615,18 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	  }
 	if(pid == 0)
 	  {
-	    close(sockets[0]);
-	    dup2(sockets[1], STDOUT_FILENO);
-	    dup2(sockets[1], STDIN_FILENO);
+	    close(stdout_pipes[0]);
+	    close(stdin_pipes[1]);
+	    dup2(stdout_pipes[1], STDOUT_FILENO);
+	    dup2(stdin_pipes[0], STDIN_FILENO);
+
+	    if(merge_stderr_with_stdout) dup2(stdout_pipes[1], STDERR_FILENO);
+	    else if(cmd_err != NULL) 
+	      {
+		close(error_pipe[0]);
+		dup2(error_pipe[1], STDERR_FILENO);
+	      }
 
-	    if(want_stderr) dup2(sockets[1], STDERR_FILENO);
 
 	    uid_t euid = geteuid();
 	    gid_t egid = getegid();
@@ -603,16 +647,32 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	    
 	      ArgList al;
 	      psforkexec.in_child(cmd, al);
-	      args_array = al.GetStringArray();			
+	      args_array = al.GetStringArray();
 	    }
 
 
 	    execvp(args_array[0], args_array);
-	    // Something went horribly wrong!
+	    vmprintf(D_ALWAYS, "Could not execute %s: %s\n", args_array[0], strerror(errno));
 	    exit(-1);
 	  }
-	close(sockets[1]);
-	fp = fdopen(sockets[0], "r+");
+	close(stdin_pipes[0]);
+	close(stdout_pipes[1]);
+	fp_for_stdin = fdopen(stdin_pipes[1], "w");
+	fp = fdopen(stdout_pipes[0], "r");
+	FILE * childerr;
+	if(cmd_err != NULL)
+	  {
+	    close(error_pipe[1]);
+	    childerr = fdopen(error_pipe[0],"r");
+	    if(childerr == 0)
+	      {
+		vmprintf(D_ALWAYS, "Could not open pipe for reading child error output: %s\n", strerror(errno));
+		close(error_pipe[0]);
+		close(stdin_pipes[1]);
+		close(stdout_pipes[0]);
+		return -1;
+	      }
+	  }
 
 	if ( privsep_enabled() && (job_user_uid != get_condor_uid())) {
 	  FILE* _fp = psforkexec.parent_begin();
@@ -651,9 +711,12 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 	  char * tmp;
 	  while((tmp = cmd_in->next()) != NULL)
 	    {
-	      fprintf(fp, "%s\n", tmp);
-	      fflush(fp);
+	      fprintf(fp_for_stdin, "%s\n", tmp);
+	      fflush(fp_for_stdin);
 	    }
+	  // So that we will not be waiting for output while the
+	  // script waits for stdin to be closed.
+	  fclose(fp_for_stdin);
 	}
 
 	if ( my_cmd_out == NULL ) {
@@ -668,6 +731,19 @@ int systemCommand( ArgList &args, bool is_root, StringList *cmd_out, StringList
 		}
 	}
 
+	if(cmd_err != NULL)
+	  {
+	    while(fgets(buff, sizeof(buff), childerr) != NULL)
+	      {
+		line += buff;
+		if(line.chomp())
+		  {
+		    cmd_err->append(line.Value());
+		    line = "";
+		  }
+	      }
+	    fclose(childerr);
+	  }
 #if defined(WIN32)
 	result = my_pclose( fp );
 #else
diff --git a/src/condor_vm-gahp/vmgahp_common.h b/src/condor_vm-gahp/vmgahp_common.h
index 69f41fd..7015613 100644
--- a/src/condor_vm-gahp/vmgahp_common.h
+++ b/src/condor_vm-gahp/vmgahp_common.h
@@ -59,7 +59,7 @@ void write_to_daemoncore_pipe(int pipefd, const char* str, int len);
 void write_to_daemoncore_pipe(const char* fmt, ... ) CHECK_PRINTF_FORMAT(1,2);
 int write_stderr_to_pipe();
 int systemCommand( ArgList &args, bool is_root, StringList *cmd_out = NULL, StringList * cmd_in = NULL,
-				   int want_stderr = 1 );
+		   StringList * cmd_err = NULL, bool merge_stderr_with_stdout = true);
 MyString makeErrorMessage(const char* err_string);
 
 void initialize_uids(void);
diff --git a/src/condor_vm-gahp/xen_type.cpp b/src/condor_vm-gahp/xen_type.cpp
index 6f156f1..9d43cb3 100644
--- a/src/condor_vm-gahp/xen_type.cpp
+++ b/src/condor_vm-gahp/xen_type.cpp
@@ -31,6 +31,8 @@
 #include "xen_type.h"
 #include "vmgahp_error_codes.h"
 #include "condor_vm_universe_types.h"
+#include "my_popen.h"
+#include <string>
 
 #define XEN_CONFIG_FILE_NAME "xen_vm.config"
 #define XEN_CKPT_TIMESTAMP_FILE_SUFFIX ".timestamp"
@@ -149,6 +151,9 @@ VirshType::Start()
 	systemcmd.AppendArg(m_configfile);
 
 	int result = systemCommand(systemcmd, true, &cmd_out);
+	char * flarg = cmd_out.print_to_delimed_string("/");
+	vmprintf(D_FULLDEBUG, "%s\n", flarg);
+	free(flarg);
 	if( result != 0 ) {
 		// Read error output
 		char *temp = cmd_out.print_to_delimed_string("/");
@@ -284,6 +289,72 @@ VirshType::Checkpoint()
 	return true;
 }
 
+// I really need a good way to determine the type of a classad
+// attribute.  Right now I just try all four possibilities, which is a
+// horrible mess...
+bool VirshType::CreateVirshConfigFile(const char* filename)
+{
+  vmprintf(D_FULLDEBUG, "In VirshType::CreateVirshConfigFile\n");
+  //  std::string name;
+  char * name, line[1024];
+  char * tmp = param("LIBVIRT_XML_SCRIPT");
+  if(tmp == NULL)
+    {
+      vmprintf(D_ALWAYS, "Something went really bad, the xml helper command variable is not\
+                          configured (but it must be for this code to be reachable).\n");
+      return false;
+    }
+  // This probably needs some work...
+  ArgList args;
+  args.AppendArg(tmp);
+  free(tmp);
+
+  // We might want to have specific debugging output enabled in the
+  // helper script; however, it is not clear where that output should
+  // go.  This gives us a way to do so even in cases where the script
+  // is unable to read from condor_config (why would this ever
+  // happen?)
+  tmp = param("LIBVIRT_XML_SCRIPT_ARGS");
+  if(tmp != NULL) 
+    {
+      MyString errormsg;
+      args.AppendArgsV1RawOrV2Quoted(tmp, &errormsg);
+      free(tmp);
+    }
+  StringList input_strings, output_strings, error_strings;
+  MyString classad_string;
+  m_classAd.sPrint(classad_string);
+  input_strings.append(classad_string.Value());
+
+  int ret = systemCommand(args, true, &output_strings, &input_strings, &error_strings, false);
+  error_strings.rewind();
+  if(ret != 0)
+    {
+      vmprintf(D_ALWAYS, "XML helper script could not be executed\n");
+      output_strings.rewind();
+      // If there is any output from the helper, write it to the debug
+      // log.  Presumably, this is separate from the script's own
+      // debug log.
+      while((tmp = error_strings.next()) != NULL)
+	{
+	  vmprintf(D_FULLDEBUG, "Helper stderr output: %s\n", tmp);
+	}
+      return false;
+    }
+  while((tmp = error_strings.next()) != NULL)
+    {
+      vmprintf(D_ALWAYS, "Helper stderr output: %s\n", tmp);
+    }
+  output_strings.rewind();
+  FILE * xml_file = fopen(filename, "w");
+  while((tmp = output_strings.next()) != NULL)
+    {
+      fprintf(xml_file, "%s\n", tmp);
+    }
+  fclose(xml_file);
+  return true;
+}
+
 bool
 VirshType::ResumeFromSoftSuspend(void)
 {
diff --git a/src/condor_vm-gahp/xen_type.h b/src/condor_vm-gahp/xen_type.h
index c9d3f51..b1d7d07 100644
--- a/src/condor_vm-gahp/xen_type.h
+++ b/src/condor_vm-gahp/xen_type.h
@@ -62,7 +62,6 @@ public:
 	virtual bool CreateConfigFile();
 
 	virtual bool killVM();
-
 protected:
 	MyString makeVirshDiskString(void);
 	bool createISO();
@@ -77,7 +76,10 @@ protected:
 	bool checkCkptSuspendFile(const char* file);
 	bool ResumeFromSoftSuspend(void);
 	bool CreateXenVMConfigFile(const char* filename);
-	virtual bool CreateVirshConfigFile(const char* filename)=0;
+
+	// For the base class, this just prints out the classad
+	// attributes and the type for each attribute.
+	virtual bool CreateVirshConfigFile(const char* filename);
 
 	SimpleList<XenDisk*> m_disk_list;
 
diff --git a/src/condor_examples/generic_xml.yacc b/src/condor_examples/generic_xml.yacc
new file mode 100644
index 0000000..f25f19d
--- /dev/null
+++ b/src/condor_examples/generic_xml.yacc
@@ -0,0 +1,480 @@
+%{
+#define YYSTYPE int
+#include <math.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <limits.h>
+#include <errno.h>
+#include <fcntl.h>
+  int yylex (void);
+  void yyerror (char const *);
+  float *addf(float, float);
+  float *subf(float, float);
+  float *mulf(float, float);
+  float *divf(float, float);
+
+  void flush_buffers();
+  void initialize_buffers();
+
+  FILE * output_file, *flog;
+  char * colonseparate(char *, int);
+  char colonbuf[1024];
+  char empty_string[] = "\0";
+%}
+
+%token NUM
+%token SSTRING
+%token VSTRING
+%token FNUM
+%token BOOL
+%token COLONSEP
+%token PIPE
+%token WHITESPACE
+%token WPIPE
+%left '-' '+' 
+%left '*' '/'
+
+%%
+input:
+       | input exp
+;
+
+exp:  '\n' {fprintf(output_file, "\n");}
+| strexp {fprintf(output_file, "%s", $1); fflush(output_file); flush_buffers();}
+| '\'' strexp '\'' {fprintf(output_file, "\'%s\'", $2);}
+| BOOL {fprintf(output_file, "%s", $1 ? "true" : "false");}
+| '\'' BOOL '\'' {fprintf(output_file, "\'%s\'", $2 ? "true" : "false");}
+| mexp {fprintf(output_file, "%d", $1);}
+| '\'' mexp '\'' {fprintf(output_file, "\'%d\'", $2);}
+| fexp {float * ptr = (float *)$1; fprintf(output_file, "%f", *ptr); free(ptr);}
+| '\'' fexp '\'' {float * ptr = (float *)$2; fprintf(output_file, "\'%f\'", *ptr); free(ptr);}
+;
+
+strexp:
+sstrexp {$$ = $1;}
+| PIPE '(' SSTRING ')' {$$ = (int)read_pipe_line((char*)$3);}
+| strexp WPIPE '(' SSTRING ')' {write_pipe_line((char*)$4, (char*)$1); $$ = (int)empty_string;}
+;
+
+sstrexp:
+SSTRING {$$ = $1;}
+| VSTRING {$$ = $1;}
+| VSTRING COLONSEP NUM {$$ = (int)colonseparate((char *)$1, $3);}
+;
+
+mexp:    sexp {$$ = $1;}
+| mexp '+' mexp {$$ = $1 + $3;}
+| mexp '-' mexp {$$ = $1 - $3;}
+;
+sexp:  ssexp {$$ = $1;}    
+| sexp '*' sexp {$$ = $1 * $3;}
+| sexp '/' sexp {$$ = $1 / $3;}
+;
+
+ssexp: NUM {$$ = $1;}
+| '(' mexp ')' {$$ = $2;}
+;
+
+fexp:   sfexp {$$ = $1;}
+| fexp '+' fexp {float * ptr1 = (float*)$1; float * ptr2 = (float*)$3; $$ = (int)addf(*ptr1, *ptr2); free(ptr1); free(ptr2);}
+| fexp '-' fexp {float * ptr1 = (float*)$1; float * ptr2 = (float*)$3; $$ = (int)subf(*ptr1, *ptr2); free(ptr1); free(ptr2);}
+;
+
+sfexp:  ssfexp {$$ = $1;}
+| sfexp '*' sfexp {float * ptr1 = (float*)$1; float * ptr2 = (float*)$3; $$ = (int)mulf(*ptr1, *ptr2); free(ptr1); free(ptr2);}
+| sfexp '/' sfexp {float * ptr1 = (float*)$1; float * ptr2 = (float*)$3; $$ = (int)divf(*ptr1, *ptr2); free(ptr1); free(ptr2);}
+;
+
+ssfexp:  FNUM {$$ = $1;}
+       | '(' fexp ')' {$$ = $2;}
+       
+;
+;
+%%
+
+struct input_file_list
+{
+  char filename[PATH_MAX];
+  char line_buffer[LINE_MAX];
+  FILE * pipe_input;
+  FILE * pipe_output;
+  int pid;
+  struct input_file_list * next;
+};
+
+struct input_file_list * open_pipes;
+
+void cleanup_subprocs()
+{
+  struct input_file_list * n = open_pipes;
+  while(n != NULL)
+    {
+      fclose(n->pipe_input);
+      fclose(n->pipe_output);
+      n = n->next;
+    }
+}
+
+struct input_file_list * open_input_pipe(char * pipe_name)
+{
+  int pipes_r[2];
+  int pipes_w[2];
+  int pid;
+  struct input_file_list * n = (struct input_file_list *)malloc(sizeof(struct input_file_list));
+  strncpy(n->filename, pipe_name, PATH_MAX);
+
+  if(strcmp(n->filename, pipe_name) != 0)
+    {
+      fprintf(stderr, "Fail\n");
+      exit(-1);
+    }
+
+  if(pipe(pipes_r) < 0)
+    {
+      fprintf(stderr, "Error opening pipe: %s\n", strerror(errno));
+      exit(-1);
+    }
+  if(pipe(pipes_w) < 0)
+    {
+      fprintf(stderr, "Error opening pipe: %s\n", strerror(errno));
+      exit(-1);
+    }
+  pid = fork();
+  if(pid < 0)
+    {
+      fprintf(stderr, "Unable to fork: %s\n", strerror(errno));
+      exit(-1);
+    }
+  if(pid == 0)
+    {
+      close(pipes_r[0]);
+      close(pipes_w[1]);
+      if(dup2(pipes_r[1], STDOUT_FILENO) < 0)
+	{
+	  fprintf(stderr, "Error in opening stdout pipe: %s\n", strerror(errno));
+	  exit(-1);
+	}
+      if(dup2(pipes_w[0], STDIN_FILENO) < 0)
+	{
+	  fprintf(stderr, "Error in opening stdin pipe: %s\n", strerror(errno));
+	  exit(-1);
+	}
+
+      execl(pipe_name, pipe_name, NULL);
+      fprintf(stderr, "Error: %s (while trying to execute %s)\n", strerror(errno), pipe_name);
+      exit(-1);
+    }
+  close(pipes_r[1]);
+  close(pipes_w[0]);
+  if((n->pipe_input = fdopen(pipes_r[0], "r")) == NULL)
+    {
+      fprintf(stderr, "Error while opening stdout pipe: %s\n", strerror(errno));
+      exit(-1);
+    }
+  if((n->pipe_output = fdopen(pipes_w[1], "w")) == NULL)
+    {
+      fprintf(stderr, "Error while opening stdin pipe: %s\n", strerror(errno));
+      exit(-1);
+    }
+  n->pid = pid;
+  n->next = open_pipes;
+  open_pipes = n;
+  return n;
+}
+
+char * read_pipe_line(char * pipe_name)
+{
+  struct input_file_list * n = open_pipes;
+  if(pipe_name[strlen(pipe_name)-1] == '\n') pipe_name[strlen(pipe_name)-1] = '\0';
+  fprintf(stderr, "Reading a line from %s\n", pipe_name);
+  while(n != NULL)
+    {
+      if(strcmp(pipe_name, n->filename) == 0)
+	{
+	  if(fgets(n->line_buffer, LINE_MAX, n->pipe_input) != NULL)
+	    {
+	      if(n->line_buffer[strlen(n->line_buffer)-1] == '\n') n->line_buffer[strlen(n->line_buffer)-1] = '\0';
+	      fprintf(stderr, "Read: %s\n", n->line_buffer);
+	      return n->line_buffer;
+	    }
+	  else
+	    {
+	      fprintf(stderr, "Reached end of file.\n");
+	      return "\n";
+	    }
+	}
+      n = n->next;
+    }
+  n = open_input_pipe(pipe_name);
+  if(fgets(n->line_buffer, LINE_MAX, n->pipe_input) != NULL)
+    {
+      if(n->line_buffer[strlen(n->line_buffer)-1] == '\n') n->line_buffer[strlen(n->line_buffer)-1] = '\0';
+      return n->line_buffer;
+    }
+  else
+    {
+      fprintf(stderr, "Reached end of file.\n");
+      return "";
+    }
+}
+
+int write_pipe_line(char * pipe_name, char * line)
+{
+  int ret;
+  struct input_file_list * n = open_pipes;
+  if(pipe_name[strlen(pipe_name)-1] == '\n') pipe_name[strlen(pipe_name)-1] = '\0';
+  fprintf(stderr, "Writing %s to %s\n", line, pipe_name);
+  while(n != NULL)
+    {
+      if(strcmp(pipe_name, n->filename) == 0)
+	{
+	  ret = fprintf(n->pipe_output, "%s\n", line);
+	  fflush(n->pipe_output);
+	  return ret;
+	}
+      n = n->next;
+    }
+  n = open_input_pipe(pipe_name);
+  ret = fprintf(n->pipe_output, "%s\n", line);
+  fflush(n->pipe_output);
+  return ret;
+}
+ 
+
+float *addf(float a, float b) {float * ret =malloc(sizeof(float)); *ret = a+b; return ret;}
+float *subf(float a, float b) {float * ret =malloc(sizeof(float)); *ret = a-b; return ret;}
+float *mulf(float a, float b) {float * ret =malloc(sizeof(float)); *ret = a*b; return ret;}
+float *divf(float a, float b) {float * ret =malloc(sizeof(float)); *ret = a/b; return ret;}
+ 
+struct name_value_pair
+{
+  char name[2048];
+  char value[2048];
+  char type;
+  struct name_value_pair * next;
+};
+
+struct name_value_pair * vars_list;
+
+extern char * yytext;
+
+void yyerror(const char *c)
+{
+  fprintf(stderr, "%s\n", c);
+  fprintf(stderr, "On: %s\n", yytext);
+  exit(-1);
+}
+
+char * colonseparate(char * str, int col)
+{
+  int colons = 0;
+  int i = 0, j = 0;
+  colonbuf[0] ='\0';
+  for(i = 0; i < strlen(str); i++)
+    {
+      if(str[i] == ':') colons++;
+      if(colons == col) break;
+    }
+  if(i == strlen(str)) return colonbuf;
+  if(col != 0) i++;
+  j = i;
+  for(; i < strlen(str); i++)
+    {
+      if(str[i] == ':') break;
+      if(str[i] != '"') colonbuf[i - j] = str[i];
+      else j++;
+    }
+  colonbuf[i - j] = '\0';
+  return colonbuf;
+}
+
+char * find_value(struct name_value_pair * list, char * name)
+{
+  while(list != 0)
+    {
+      if(strcasecmp(name, list->name) == 0) return list->value;
+      list = list->next;
+    }
+  fprintf(stderr,"Unknown variable: %s\n", name);
+  fprintf(stderr, "Variables are:\n");
+  list = vars_list;
+  while(list != 0)
+    {
+      fprintf(stderr, "\t%s\n", list->name);
+      list = list->next;
+    }
+  exit(-1);
+  return 0;
+}
+
+int lookupVarType(struct name_value_pair * list, char * name)
+{
+ while(list != 0)
+    {
+      if(strcasecmp(name, list->name) == 0)
+	{
+	  if(list->type == 'S') return VSTRING;
+	  else if(list->type == 'I') return NUM;
+	  else if(list->type == 'F') return FNUM;
+	  else return BOOL;
+	}
+      list = list->next;
+    }
+ fprintf(stderr, "Unknown variable: %s\n", name);
+ fprintf(stderr, "Variables are:\n");
+ list = vars_list;
+ while(list != 0)
+   {
+     fprintf(stderr, "\t%s\n", list->name);
+     list = list->next;
+   }
+
+ exit(-1);
+ return 0;
+}
+
+int open_xml_file(void)
+{
+  FILE * config = fopen("/etc/condor/condor_config", "r");
+  char buf[1024], buf2[12];
+  while(fgets(buf, 1024, config) != NULL)
+    {
+      if(buf[strlen(buf)-1] == '\n') buf[strlen(buf)-1] = '\0';
+      strncpy(buf2, buf, 11);
+      if(strcmp(buf2, "LIBVIRT_XML") == 0)
+	{
+	  int i;
+	  int fd;
+	  for(i = 0; i < strlen(buf); i++)
+	    {
+	      if(buf[i] == '=')
+		{
+		  i++;
+		  break;
+		}
+	    }
+	  while(i < strlen(buf))
+	    {
+	      if((buf[i] != ' ') && (buf[i] != '\t')) break;
+	      i++;
+	    }
+	  
+	  fd = open(buf+i, O_RDONLY);
+	  if(fd < 0)
+	    {
+	      fprintf(stderr, "Error while opening XML file: %s\n", strerror(errno));
+	      exit(-1);
+	    }
+	  fprintf(stderr, "%s\n", buf+i);
+	  dup2(fd, STDIN_FILENO);
+	  return 0;
+	}
+    }
+  return -1;
+}
+
+char determine_type_from_value(char * value)
+{
+  char * endp;
+
+  strtod(value, &endp);
+  if(value != endp) return 'F';
+
+  strtol(value, &endp, 10);
+  if(value != endp) return 'I';
+
+  if((strcasecmp(value, "true") == 0) || (strcasecmp(value, "false") == 0)) return 'B';
+
+  return 'S';
+}
+
+int main(int argc, char ** argv)
+{
+  //  floatlist = 0;
+  // First, build the table of variables
+  char line[8192], * xml, * execute_dir;
+  FILE * generic_xml_file;
+  struct name_value_pair * list = 0, * cur = 0;
+  int i, j;
+  char * tmpfile = "/tmp/libvirtXXXXXX";
+  output_file = stdout;
+  if(output_file == 0)
+    {
+      fprintf(stderr, "Unable to open file %s\n", argv[1]);
+      return -1;
+    }
+
+  fgets(line, 8192, stdin);
+  while(line[0] != '\n')
+    {
+      struct name_value_pair * nvp = malloc(sizeof(struct name_value_pair));
+      if(list == 0) 
+	{
+	  list = nvp;
+	  cur = nvp;
+	}
+      else
+	{
+	  cur->next = nvp;
+	  cur = nvp;
+	}
+      //    nvp->type = line[0];
+      for(i = 0; i < strlen(line); i++)
+	{
+	  if((line[i] == ' ') || (line[i] == '=')) break;
+	  nvp->name[i] = line[i];
+	}
+      nvp->name[i] = '\0';
+
+
+      for(; i<strlen(line); i++)
+	{
+	  if((line[i] != ' ') && (line[i] != '=')) break;
+	}
+      j = i;
+
+      for(; i < strlen(line)-1; i++)
+	{
+	  nvp->value[i - j] = line[i];
+	}
+      nvp->value[i-j] = '\0';
+      fprintf(stderr,"%s %s\n", nvp->name, nvp->value);
+      nvp->type = determine_type_from_value(nvp->value);
+
+      nvp->next = 0;
+      if(fgets(line, 8192, stdin) == NULL) break;
+    }
+  vars_list = list;
+  // Find the xml file.
+  if(open_xml_file() < 0)
+    {
+      fprintf(stderr, "Could not open xml file, trying for classad\n");
+    }
+  else
+    {
+      int xml_fd;
+      FILE * xml_file;
+
+      char * xml = find_value(list, "LIBVIRT_XML");
+      xml_fd = mkstemp(tmpfile);
+      xml_file = fdopen(xml_fd, "w");
+      fprints(xml_file, "%s", xml);
+      fclose(xml_file);
+      xml_fd = open(tmpfile, O_RDONLY);
+      dup2(xml_fd, STDIN_FILENO);
+    }
+  initialize_buffers();
+  int ret = yyparse();
+  cleanup_subprocs();
+  if(ret != 0)
+    {
+      fprintf(stderr, "Unknown error.\n");
+    }
+  // If the tempfile was created for XML, delete it
+  if(tmpfile[strlen(tmpfile)-1] != 'X')
+    {
+      unlink(tmpfile);
+    }
+  return ret;
+}
diff --git a/src/condor_examples/generic_xml.yy b/src/condor_examples/generic_xml.yy
new file mode 100644
index 0000000..90fb51a
--- /dev/null
+++ b/src/condor_examples/generic_xml.yy
@@ -0,0 +1,100 @@
+%{
+#include "y.tab.h"
+#include <string.h>
+extern char * yylval;
+extern FILE * output_file;
+float fval;
+
+struct name_value_pair
+{
+  char name[2048];
+  char value[2048];
+  struct name_value_pair * next;
+};
+
+char * lookupVarValue(char * var);
+char * find_value(struct name_value_pair * list, char * name);
+char* copy_to_buffer(char *, int);
+
+extern struct name_value_pair * vars_list;
+
+
+%}
+
+%%
+
+[0-9]+	yylval = (char*)atoi(yytext); return NUM;
+[0-9]+\.[0-9]+ {float *ptr = (float*)malloc(sizeof(float)); *ptr  = atof(yytext); yylval = (char*)ptr; return FNUM;}
+[-+\*\(\)/\n']	yylval = yytext; return yytext[0];
+\|\< yylval = yytext; return PIPE;
+\|\> yylval = yytext; return WPIPE;
+\<*[A-Za-z/'=\.[:space:]]+\>*|\>|\< yylval = copy_to_buffer(yytext, yyleng); return SSTRING;
+\$[A-Za-z0-9\_]+ yylval = lookupVarValue(yytext+sizeof(char)); return lookupVarType(vars_list, yytext+sizeof(char));
+\-\> yylval = ":"; return COLONSEP;
+
+
+%%
+char * lookupVarValue(char * var)
+{
+	int var_type;
+	char * var_str = find_value(vars_list, var);
+	var_type = lookupVarType(vars_list, var);
+	if(var_type == VSTRING) return var_str;
+	else if(var_type == NUM) return (char*)atoi(var_str);
+	else if(var_type == FNUM) 
+	{
+		float *val = malloc(sizeof(float));	
+		*val = atof(var_str);
+		return (char*)val;
+	}
+	else 
+	{
+             int ret = (strcasecmp(var_str, "true")) ? -1 : 0;    
+	     return (char*)ret;
+	}
+}
+
+struct buffer_list
+{
+char * data;
+struct buffer_list * next;
+};
+
+struct buffer_list * buffers;
+
+char * copy_to_buffer(char * txt, int len)
+{
+	struct buffer_list * buf = (struct buffer_list*)malloc(sizeof(struct buffer_list));
+	buf->data = (char*)malloc(sizeof(char)*(len+1));
+	strncpy(buf->data, txt, len);
+	buf->next = buffers;
+	return buf->data;
+}
+
+void flush_buffers()
+{
+	struct buffer_list * list, *tmp;
+	list = buffers;
+	while(list != NULL)
+	{
+		free(list->data);
+		tmp = list;
+		list = list->next;
+		free(tmp);
+	}
+	buffers = NULL;
+}
+
+void initialize_buffers()
+{
+	buffers = NULL;
+}
+
+int lookupVarType(struct name_value_pair *, char * var);
+/*{
+	//	OK, what we need to do is pass the exact type using the variable name, perhaps prefixes?
+	if(var[0] == 'S') return VSTRING;
+	else if(var[0] == 'I') return NUM;
+	else if(var[0] == 'F') return FNUM;
+	else return BOOL;
+}*/
\ No newline at end of file
diff --git a/src/condor_examples/mkqcow.sh b/src/condor_examples/mkqcow.sh
new file mode 100644
index 0000000..c22964f
--- /dev/null
+++ b/src/condor_examples/mkqcow.sh
@@ -0,0 +1,11 @@
+#!/bin/bash
+
+# This script should call qemu-img to create a qcow image based on its
+# first line of input.  Basically, it should take img_name.img and
+# create a qcow in the same directory as that image, and then echo the
+# location of that qcow.
+
+read
+export qcow_cnt=`ls $REPLY* | wc -l`
+qemu-img create -f qcow2 -b $REPLY $REPLY.$qcow_cnt.qcow >/dev/null
+echo $REPLY.$qcow_cnt.qcow
