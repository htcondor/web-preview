{"id": 1680, "title": "Ticket #1680: Job should be able to emit heartbeat to the starter", "description": "<blockquote>\nWe are currently hosting some services for NEOS by running them as jobs under Condor.  From time to time, these services hang.  We have control over the source of these python-based services.  It would be very useful to define a heartbeat protocol between the job and the starter.  This way, condor could restart the job when it hangs, and clean up the sandbox.\n\n<p>There are many possible implementations.  I think if the job somehow sent a cedar CHILD_ALIVE message to the starter periodically, everything would just work.  Obviously, that's tight coupling, and authentication might be a bit of a trick.  Maybe the job could touch a file in the sandbox, and use that as a keepalive.  Or SOAP, or ... ?</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Sep-27 17:04:10 by matt:</em> <br/>\n\n<a class=\"external\" href=\"http://spinningmatt.wordpress.com/2009/10/21/condor_master-for-managing-processes/\">http://spinningmatt.wordpress.com/2009/10/21/condor_master-for-managing-processes/</a>\n\n<p>There are authentication issues (need SEC_DAEMON_AUTH/ENC/INT=OPTIONAL), but cleaning them up and maybe simplifying the message that must be sent is the most attractive solution.\n\n</p><p></p><hr/>\n<em>2010-Sep-28 12:43:21 by gthain:</em> <br/>\n\nNote that in this case, I'd like it to be a job, in case the machine crashes, etc., but squawk is an interesting idea.\n\n<p></p><hr/>\n<em>2010-Sep-28 13:34:24 by matt:</em> <br/>\n\n<div class=\"verbatim\">\n<pre>We currently provide an administrative wrapper that can monitor a job, the USER_JOB_WRAPPER. We currently tell people that they can do the same for their job by making it a script that executes their job and monitors it.\n\nHowever, turning\n\ncmd = /usr/bin/matlab\nargs = ...\nqueue\n\ninto\n\ncmd = matlab_plus.sh\nargs = ...\nqueue\n\nis actually a non-trivial task, in any number of ways - from file-transfer semantics changing to the complexity of properly spawning (not exec'ing) and managing the actual job to identically model the life-cycle.\n\nWhat about a parallel management process that shares the execution environment of the job itself, e.g.\n\ncmd = /usr/bin/matlab\nargs = ...\nmonitor = my_monitor.sh\nqueue\n\nmy_monitor.sh can chirp and squawk.\n\nSemantics of monitor -\n o spawned after job (controlled by monitor_start_lag in seconds, provided job parent pid)\n o terminated after job completion (controlled by monitor_exit_lag in seconds)\n  . possibly signaled about job termination, or not, make it just wait\n  . possibly provided access to exit information of job\n o policy for termination during job execution\n  . possibly just say no effect (like monitor_exit_fatal = false)\n  . possibly monitor_exit_fatal = bool\n   + true = terminate job and follow WANT_HOLD policy\n    - NOTE: This is a place where we pick semantics\n   + false = allow job to continue\n o resource consumption of monitor charged to job\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-Sep-28 13:38:35 by matt:</em> <br/>\n\nRe: \"a job\" as in not under the Master - All <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> processes should be able to handle CHILD_ALIVE, including the Starter.\n<hr/>\n<em>2011-Jan-27 14:50:47 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 16:20:02 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2013-Jan-22 09:35", "status": "new", "created": "2010-Sep-27 14:53", "fixed_version": "2010-Sep-27 14:53", "broken_version": "v070400", "priority": "5", "subsystem": "Daemons", "assigned_to": "gthain", "derived_from": "", "creator": "gthain", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}