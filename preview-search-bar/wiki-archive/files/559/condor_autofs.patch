diff --git a/src/condor_includes/config.h.cmake b/src/condor_includes/config.h.cmake
index 170c08e..7667bc5 100644
--- a/src/condor_includes/config.h.cmake
+++ b/src/condor_includes/config.h.cmake
@@ -252,6 +252,12 @@
 /* Define to 1 if you have the 'unshare' systemcall.*/
 #cmakedefine HAVE_UNSHARE 1
 
+/* Define to 1 if the system has the MS_PRIVATE flag. */
+#cmakedefine HAVE_MS_PRIVATE 1
+
+/* Define to 1 if the system has the MS_SHARED flag. */
+#cmakedefine HAVE_MS_SHARED 1
+
 /* Do we have the blahp external (used Imake)*/
 #cmakedefine HAVE_EXT_BLAHP 1
 
diff --git a/src/condor_utils/filesystem_remap.cpp b/src/condor_utils/filesystem_remap.cpp
index 422f3d2..c0e1abe 100644
--- a/src/condor_utils/filesystem_remap.cpp
+++ b/src/condor_utils/filesystem_remap.cpp
@@ -34,6 +34,7 @@ FilesystemRemap::FilesystemRemap() :
 	m_mounts_shared()
 {
 	ParseMountinfo();
+	FixAutofsMounts();
 }
 
 int FilesystemRemap::AddMapping(std::string source, std::string dest) {
@@ -104,6 +105,28 @@ int FilesystemRemap::CheckMapping(const std::string & mount_point) {
 #endif
 }
 
+int FilesystemRemap::FixAutofsMounts() {
+#ifndef HAVE_UNSHARE
+	// An appropriate error message is printed in FilesystemRemap::CheckMapping;
+	// Not doing anything here.
+	return -1;
+#else
+
+#ifdef HAVE_MS_SHARED
+	TemporaryPrivSentry sentry(PRIV_ROOT);
+	for (std::list<pair_strings>::const_iterator it=m_mounts_autofs.begin(); it != m_mounts_autofs.end(); it++) {
+		if (mount(it->first.c_str(), it->second.c_str(), NULL, MS_SHARED, NULL)) {
+			dprintf(D_ALWAYS, "Marking %s->%s as a shared-subtree autofs mount failed. (errno=%d, %s)\n", it->first.c_str(), it->second.c_str(), errno, strerror(errno));
+			return -1;
+		} else {
+			dprintf(D_FULLDEBUG, "Marking %s as a shared-subtree autofs mount successful.\n", it->second.c_str());
+		}
+	}
+#endif
+	return 0;
+#endif
+}
+
 // This is called within the exec
 // IT CANNOT CALL DPRINTF!
 int FilesystemRemap::PerformMappings() {
@@ -209,6 +232,11 @@ void FilesystemRemap::ParseMountinfo() {
 			is_shared = is_shared || (strncmp(token, SHARED_STR, strlen(SHARED_STR)) == 0);
 			ADVANCE_TOKEN(token, str)
 		}
+		ADVANCE_TOKEN(token, str) // filesystem type
+		if ((!is_shared) && (strcmp(token, "autofs") == 0)) {
+			ADVANCE_TOKEN(token, str)
+			m_mounts_autofs.push_back(pair_strings(token, mp));
+		}
 		// This seems a bit too chatty - disabling for now.
 		// dprintf(D_FULLDEBUG, "Mount: %s, shared: %d.\n", mp.c_str(), is_shared);
 		m_mounts_shared.push_back(pair_str_bool(mp, is_shared));
diff --git a/src/condor_utils/filesystem_remap.h b/src/condor_utils/filesystem_remap.h
index 0085928..890590a 100644
--- a/src/condor_utils/filesystem_remap.h
+++ b/src/condor_utils/filesystem_remap.h
@@ -35,6 +35,16 @@
  * will perform the equivalent of this command:
  *    mount --bind /var/lib/condor/execute/1234 /tmp
  * This is meant to give Condor the ability to provide per-job temporary directories.
+ *
+ * The class does two special things:
+ *   1) For each remapping, if the parent mount is marked as shared-subtree, remount
+ *      it first as non-shared-subtree.  This prevents remappings we make from
+ *      escaping to the parent.
+ *   2) Promote each autofs mount to shared-subtree.  Autofs is not aware of
+ *      namespaces and when a job accesses the mount point in the job's namespaces,
+ *      autofs will do the real mount in the *parent* namespace, so the job cannot
+ *      access it unless we do the shared-subtree trick.
+ * 
  */
 typedef std::pair<std::string, std::string> pair_strings;
 typedef std::pair<std::string, bool> pair_str_bool;
@@ -91,8 +101,17 @@ private:
 	 */
 	int CheckMapping(const std::string &);
 
+	/**
+	 * autofs does not understand namespaces and ends up making the "real" fs
+	 * invisible to the job - it goes into the parent namespace instead.  We
+	 * provide this hack to remount autofs mounts as shared-subtree so changes
+	 * to the parent namespace are visible to all jobs.
+	 */
+	int FixAutofsMounts();
+
 	std::list<pair_strings> m_mappings;
 	std::list<pair_str_bool> m_mounts_shared;
+	std::list<pair_strings> m_mounts_autofs;
 
 };
 
