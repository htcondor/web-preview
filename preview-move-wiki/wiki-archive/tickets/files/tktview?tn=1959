<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<link rel="stylesheet" type="text/css" href="https://htcondor-wiki.cs.wisc.edu/index.cgi/cvstrac.10.css">
<link rel="stylesheet" type="text/css" href="https://htcondor-wiki.cs.wisc.edu/index.cgi/cvstrac.tj.css">
<link rel="stylesheet" type="text/css" href="https://htcondor-wiki.cs.wisc.edu/index.cgi/diff2html.css">
<link rel="alternate stylesheet"
      title="prosimii-screen"
      type="text/css" href="https://htcondor-wiki.cs.wisc.edu/index.cgi/prosimii-screen.css">
<link rel="alternate stylesheet"
      title="Default Stylesheet"
      type="text/css" href="https://htcondor-wiki.cs.wisc.edu/index.cgi/cvstrac_default.css">
<link rel="alternate" type="application/rss+xml"
   title="HTCondorWiki Timeline Feed" href="https://htcondor-wiki.cs.wisc.edu/index.cgi/timeline.rss">
<link rel="index" title="Index" href="https://htcondor-wiki.cs.wisc.edu/index.cgi/index">
<link rel="search" title="Search" href="https://htcondor-wiki.cs.wisc.edu/index.cgi/search">
<link rel="help" title="Help"
   href="https://htcondor-wiki.cs.wisc.edu/index.cgi/wiki?p=CvstracDocumentation">
<title>HTCondorWiki: Ticket #1959</title>
<script type="text/javascript">
  function setFocus() {
    var firstForm, e;
    if ( document.forms && (firstForm = document.forms[0]) ) {
      if      ( (e = firstForm.elements["u"]) && e.type == "text" ) e.focus();
      else if ( (e = firstForm.elements["t"]) && e.type == "text" ) e.focus();
      else if ( (e = firstForm.elements["s"]) && e.type == "text" ) e.focus();
    }
  }
</script>
</head>
<body onload="setFocus()">
<div id="header">
<div class="midHeader">
<div class="iconHeader">
<a href="https://www.cs.wisc.edu/condor"><img src="https://research.cs.wisc.edu/htcondor/images/HTCondor_wiki_logo_small.png" alt="HTCondor High Throughput Computing" border=0></a>
</div>
</div>
</div><div id="header">
<h1 id="title">
Ticket #1959
</h1>
<p id="identity">
<a href="honeypot"><notatag arg="meaningless"></a>
<a href="login?nxp=/index.cgi/tktview%3Ftn%3D1959" title="Log in">Not logged in</a>
</p>
<ul id="navigation">
<li><a href="dir">Browse</a></li>
<li><a href="wiki?p=CvstracTicket">Help</a></li>
<li><a href="index">Home</a></li>
<li><a href="login">Login</a></li>
<li><a href="reportlist">Reports</a></li>
<li><a href="search?t=1">Search</a></li>
<li><a href="timeline">Timeline</a></li>
<li><a href="wiki">Wiki</a></li>
</ul>
<ul id="action">
<li><a href="tkthistory?tn=1959" rel="nofollow">History</a></li>
</ul>
</div>
<div id="content">
<h2>Ticket #1959: Implement per-job PID namespaces.</h2>
<blockquote>
Since Linux kernel 2.6.24, it is possible to create PID namespaces.  This makes a process believe it is PID 1, while processes in the global namespace see the &quot;normal&quot; PIDS for the process and its descendants.  Reference: <a class="external" href="http://lwn.net/Articles/259217/">http://lwn.net/Articles/259217/</a>

<p>If a Condor job is launched with its own namespace, we'd have the following advantages:
<ul>
<li>Cleanup: when &quot;PID 1&quot; dies, the kernel kills the rest of the processes in the namespace.
<li>Separation: two jobs running under the same Unix user account cannot see each other.
</ul>

<p>In order to implement this, one also has to implement a separate mount namespace for the job as you must remount /proc for &quot;ps&quot; to work as expected.  That leads to the tantalizing possibility of having a per-job /tmp and /var/tmp; I'll address this in a later ticket.  Here's what the job runtime environment will look like:
<div class="code">
<pre class="code">
[bbockelm@rcf-bockelman condor]$ condor_run ps faux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
bbockelm     1  0.0  0.0 106200  1132 ?        SN   14:15   0:00 /bin/bash /home/bbockelm/projects/condor/.condor_run.17238
bbockelm     2  0.0  0.0 108052  1000 ?        RN   14:15   0:00 ps faux
</pre></div>


<p>Patch to come.</blockquote>

<table align="right" style="margin: 0 10px;" cellpadding=2 border=0>
<tr><td bgcolor="#a0b5f4" class="border1">
<table width="100%" border=0 cellpadding=4 cellspacing=0>
<tr bgcolor="#d0d9f4" class="bkgnd1">
<td valign="top" align="left">
[<a href="tktappend?tn=1959">Append remarks</a>]
</td></tr></table></td></tr></table>
<h3>Remarks:</h3>
<blockquote>
<em>2011-Mar-28 12:23:12 by tannenba:</em> <br>

<hr>
<em>2011-Mar-28 12:19:35 by tannenba:</em> <br>

<strong>Initial Feedback</strong>

<p>First off, thanks for the interesting work and the patch!  Thoughts below.

<p><ol>
<li>Should the code to create a new pid namespace be implemented in daemon core, or should it be a standalone command-line tool?  Since it would need to run as root, options are this tool could be setuid or invoked as a hook via Condor or via the switchboard.

<p><li>If the pid namespace creation stays in daemon core, we need at least a road map plan for how this functionality would work with priv sep enabled.

<p><li>As written, the patch uses pthread conditionals to synchronize between the parent and child processes for procd registration.  This is not desired, nor required. One way to eliminate both the pthread calls (nothing but the <span class="wiki"><a title="Condor Threads"
class="missing"
  href="wiki?p=CondorThreads">CondorThreads</a></span> class should call pthreads directly) and the need for this synchronization is to always have the child process register with the procd as before, and have the parent pass the global pid to the child via the already in-place pipe. Another idea would be for the parent to always register w/ the procd, and to have the child block pending a message on the pipe from the parent telling the child a successful procd registration has occurred. The former may be preferred due to less code churn. In either event, the same codepath to register w/ the procd should be used regardless of if a new pid namespace is being created or not.

<p><li>Functionality to remap /tmp and friends should be a different patch/ticket. Though not ideal, it is ok to rebase the patch off of this one if it makes it easier, but it needs to be a seperate commit that could be merged/revoked independently w/ a separate discussion thread (ticket).
</ol>

<p><hr>
<em>2011-Mar-28 13:07:54 by bbockelm:</em> <br>

Hi Todd,

<p>3, 4 are no problem.  I think the main part to discuss is 1 and 2.

<p>One aspect of privsep I don't understand is the propagation of error messages.  If the switchboard is successfully invoked, but exec fails, how does this error message propagate back?

<p>Since CLONE_NEWPID can definitely fail on an otherwise-functional system, I would prefer proper error propagation.

<p>Brian

<p><hr>
<em>2011-Mar-30 08:43:17 by bbockelm:</em> <br>

Hi,

<p>I did some more research into implementing this with privsep.  There appears to be no way to have a process &quot;switch PID namespace&quot;.  It can only be done when clone() is called.  Unfortunately, the only thread in a process that will perform exec (regardless of the thread that calls exec) is the thread group leader, preventing us from playing games with CLONE_THREAD.

<p>Hence, any use of PID namespaces requires a parent and child process.  For non-privsep this is OK: the parent is the starter, the child is the job.  To implement this in privsep, we would need to have an additional process in the tree: starter -&gt; shim -&gt; job.  We would need to make the shim correctly reap the job, have the same lifetime of the job, and have the same exit code as the job.  In other words, we'd have a non-trivial, long-lasting process with elevated privileges (<strong>and</strong> change the running semantics on sysadmins!  Right now, PID namespaces is rather invisible to admins, although it does change semantics for users): quite a project to do and security audit.

<p>Another, more-plausible, approach would be to have the shim short-lived and reparent back to the starter (CLONE_PARENT).  This would require the switchboard to synchronize with the starter and inform it of the child's final PID.  In general, I think the switchboard ought to do this sort of synchronization with the starter in order to gracefully communicate other exec failures.  However, if the infrastructure isn't already there to synchronize via pipe ... I would personally call it out of scope for this ticket.

<p>Thoughts?  I'll add ZKM to the ticket to see what he thinks.

<p>Brian

<p><hr>
<em>2011-May-02 18:26:50 by bbockelm:</em> <br>

Hi Todd, all,

<p>Can I bump this ticket?  Been about a month ready for another review, I think.

<p>Brian

<p><hr>
<em>2011-Nov-29 14:21:06 by eje:</em> <br>

One open issue is generalizing current checks for &quot;small pid&quot; relating to preventing security holes, so they don't trigger when pid namespaces are in effect.

<p>Places I identified:

<p><div class="verbatim">
<PRE>
./src/condor_procd/procd_main.cpp:247:				if (root_pid == 1) {
./src/condor_procd/procd_main.cpp:340:	if (own_pi->ppid == 1) {
./src/condor_utils/killfamily.cpp:234:		if ( (*old_pids)[i].ppid == 1 || (*old_pids)[i].pid == 0 ) {
./src/condor_daemon_core.V6/daemon_core.cpp:5716:	if ( signed_pid > -10 && signed_pid &lt; 3 ) {
</PRE></div>


<p>Pete Keller suggested abstracting these checks into a function, like &quot;bool is_safe_pid(int pid)&quot;, which allows small pids when it knows pid namespaces are being used, but otherwise does not for legacy behavior.

<p><hr>
<em>2012-Apr-05 11:42:49 by adesmet:</em> <br>

Possibly related: <span class="ticket"><a href="tktview?tn=2558" class="defer"
title="condor_startd can sometimes crash after enabling fetchwork"
>#2558</a></span>.  clone() was causing grief for the startd, so it was disabled for all daemons except the schedd.

<p><hr>
<em>2012-Jul-25 15:56:08 by tstclair:</em> <br>

Patch doesn't apply cleanly and wasn't targeted to release.
<hr>
<em>2012-Oct-22 14:58:32 by zmiller:</em> <br>

Bulk change of target version from v070901 to v070902 using ./ticket-target-mover.
<hr>
<em>2012-Dec-11 16:37:58 by johnkn:</em> <br>

Bulk change of target version from v070902 to v070903 using ./ticket-target-mover.

<p><hr>
<em>2013-Jan-10 11:55:33 by gthain:</em> <br>

A key requirement here is that many OSG site do not run with slot users, and all users from any given site are mapped to the same OS user.  As a result, two jobs from two different users which land on the same machine can kill each others jobs (perhaps unintentionally), gdb attach, etc.</blockquote>
<table align="right" style="margin: 0 10px;" cellpadding=2 border=0>
<tr><td bgcolor="#a0b5f4" class="border1">
<table width="100%" border=0 cellpadding=4 cellspacing=0>
<tr bgcolor="#d0d9f4" class="bkgnd1">
<td valign="top" align="left">
[<a href="tktappend?tn=1959">Append remarks</a>]
</td></tr></table></td></tr></table>


<h3>Properties:</h3>

<blockquote>
<table>
<tr>
  <td align="right">Type:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>enhance&nbsp;</b></td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  <td align="right">Last&nbsp;Change:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>2013-Feb-18 16:20</b></td>
</tr>
<tr>
  <td align="right">Status:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>resolved</b></td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  <td align="right">Created:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>2011-Mar-10 14:33</b></td>
</tr>
<tr>
  <td align="right">Fixed&nbsp;Version:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>v070904&nbsp;</b></td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  <td align="right">Broken&nbsp;Version:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>v070700&nbsp;</b></td>
</tr>
<tr>
  <td align="right">Priority:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>1&nbsp;</b></td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  <td align="right">Subsystem:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>Daemons&nbsp;</b></td>
</tr>
<tr>
  <td align="right">Assigned&nbsp;To:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>smoler&nbsp;</b></td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  <td align="right">Derived From:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>
  &nbsp;
  </b></td>
</tr>
<tr>
  <td align="right">Creator:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>bbockelm&nbsp;</b></td>
<td></td>
  <td align="right">Rust:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>&nbsp;</b></td>
</tr>
<tr>
  <td align="right">Customer Group:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>other&nbsp;</b></td>
<td></td>
  <td align="right">Visibility:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>public&nbsp;</b></td>
</tr>
<tr>
  <td align="right">Notify:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>tstclair@redhat.com matt@cs.wisc.edu tannenba@cs.wisc.edu zmiller@cs.wisc.edu eje@cs.wisc.edu bbockelm@cse.unl.edu&nbsp;</b></td>
<td></td>
  <td align="right">Due Date:</td>
  <td bgcolor="#d0d0d0" class="bkgnd3"><b>20120130&nbsp;</b></td>
</tr>
</table>
</blockquote>
<h3>Derived Tickets:</h3>
<table cellspacing=0 border=0 cellpadding=0>
<tr><td valign="top" width=160 align="right">
<span class="ticket"><a href="tktview?tn=1965" class="active"
title="condor_master should be able to have its own PID namespace"
>#1965</a></span></td>
<td valign="center" width=30 align="center">
<span class="icon ptr1">&nbsp;</span></td>
<td valign="top" align="left">
condor_master should be able to have its own PID namespace</td></tr>
<tr><td valign="top" width=160 align="right">
<span class="ticket"><a href="tktview?tn=2015" class="resolved"
title="Take advantage of filesystem namespaces"
>#2015</a></span></td>
<td valign="center" width=30 align="center">
<span class="icon ptr1">&nbsp;</span></td>
<td valign="top" align="left">
Take advantage of filesystem namespaces</td></tr>
</table>
<h3>Related Check-ins:</h3>
<table cellspacing=0 border=0 cellpadding=0>
<tr><td valign="top" width=160 align="right">2013-Feb-27 13:00</td>
<td valign="top" width=30 align="center">
<span class="icon dot">&nbsp;</span></td>
<td valign="top" align="left"> 
Check-in <span class="chng"><a href="chngview?cn=35025">[35025]</a></span>: final wording update for doc on per job PID namespaces ===GT=== <span class="ticket"><a href="tktview?tn=1959" class="resolved"
title="Implement per-job PID namespaces."
>#1959</a></span>  (By Karen Miller )</td></tr>
<tr><td valign="top" width=160 align="right">2013-Feb-22 11:56</td>
<td valign="top" width=30 align="center">
<span class="icon dot">&nbsp;</span></td>
<td valign="top" align="left"> 
Check-in <span class="chng"><a href="chngview?cn=34997">[34997]</a></span>: last 2 details on per job PID namespaces did not make it into the 7.9.4 manual. Done now. ===GT=== <span class="ticket"><a href="tktview?tn=1959" class="resolved"
title="Implement per-job PID namespaces."
>#1959</a></span>  (By Karen Miller )</td></tr>
<tr><td valign="top" width=160 align="right">2013-Feb-14 12:12</td>
<td valign="top" width=30 align="center">
<span class="icon dot">&nbsp;</span></td>
<td valign="top" align="left"> 
Check-in <span class="chng"><a href="chngview?cn=34924">[34924]</a></span>: documentation (missing a couple of details) of per job PID namespaces ===GT=== <span class="ticket"><a href="tktview?tn=1959" class="resolved"
title="Implement per-job PID namespaces."
>#1959</a></span>  (By Karen Miller )</td></tr>
<tr><td valign="top" width=160 align="right">2013-Jan-23 14:58</td>
<td valign="top" width=30 align="center">
<span class="icon dot">&nbsp;</span></td>
<td valign="top" align="left"> 
Check-in <span class="chng"><a href="chngview?cn=34733">[34733]</a></span>: Implement USE_PID_NAMESPACE <span class="ticket"><a href="tktview?tn=1959" class="resolved"
title="Implement per-job PID namespaces."
>#1959</a></span> On Linux, allows jobs to run in separate pid namespaces  (By Greg Thain )</td></tr>
</table>
<h3>Attachments:</h3>
<blockquote>
<ul>
<li><a href="attach_get/285/condor_pid_namespaces_v1.patch">condor_pid_namespaces_v1.patch</a>
22524 bytes added by bbockelm on 2011-Mar-10 20:46:55 UTC.
<br>
This patch implements a per-job PID namespace.  It's diff'd off the patch in <span class="ticket"><a href="tktview?tn=1831" class="resolved"
title="Take advantage of cgroups-based capabilities on new Linux platforms"
>#1831</a></span> and won't apply against trunk.

<p>There are a few things left undone:
<ul>
<li>How should we present this new behaviour to the sysadmin?  I assume we want some sort of CONDOR_CONFIG variable.
<li>We really don't need to depend on cgroups for this.  Separate the two.
</ul>

<p>This is a <strong>hard</strong> patch to review because it does careful surgery to DaemonCore's <span class="wiki"><a title="Create Process Forkit"
class="missing"
  href="wiki?p=CreateProcessForkit">CreateProcessForkit</a></span>.  I try to include many comments.

<p>The hard part about this patch is that the child thinks it is 'pid 1' and tries to register with the procd as pid 1.  So, I used pthreads cond's to properly synchronize the child and parent thread.  The child stops, the parent wakes up and registers the child with the procd, and wakes the child.  The child continues its usual startup sequence, remounts /proc, and calls exec.  The parent then uses 'poll' on the error pipe and will stall until the child either exec's or exits.  So, even though the synchronization and registration is handled differently, the same conditions should hold true when the parent leaves fork_and_exec as the previous implementation.

<p>This is some deep voodoo; because of the mix of pthreads and the poll trick, I'd appreciate it if someone can give a thorough review and feedback.<br>
<li><a href="attach_get/288/condor_pid_namespaces_v2.patch">condor_pid_namespaces_v2.patch</a>
38861 bytes added by bbockelm on 2011-Mar-11 21:19:18 UTC.
<br>
v2 of the patch.  A few notes:
<ul>
<li>No longer tied to cgroups; instead, creates a new PID namespace if USE_PID_NAMESPACES = true in the config.  Diff is based from my local cgroups branch.
<li>Adds USE_FS_NAMESPACES; if set to true, it will mask /tmp, /var/tmp, and $EXECUTE with $_CONDOR_SCRATCH_DIR, $_CONDOR_SCRATCH_DIR, and $IWD respectively.  Hence, &quot;condor_run ls /tmp&quot; will return blank; you also can't peak at other job's sandboxes.  This works with any Linux 2.6 kernel.
<li>Adds SQUASH_DIRS: set this to a list of directories to &quot;squash&quot; them to point at $_CONDOR_SCRATCH_DIR.  Useful for sites that have other world-writeable directories.  SQUASH_DIRS should work on any 2.6 kernel.
</ul>

<p>Ok, now the issues:
<ul>
<li>If $IWD is a subdirectory of $EXECUTE, then we alter the call to exec accordingly.  <strong>However</strong>, it's possible the env now reports to &quot;squashed&quot; directories.  How should we mangle the environment?
<li>Is squashing $EXECUTE even the right thing to do?  Is there some better way to hide the other jobs' sandboxes?
<li>I'd appreciate an expect in the condor_starter evaluate how I pass the remap object through to <span class="wiki"><a title="Daemon Core"
class="missing"
  href="wiki?p=DaemonCore">DaemonCore</a></span>.  I put it in vanilla_proc, but maybe it belongs in os_proc?
</ul>
<br>
<li><a href="attach_get/294/condor_pid_namespaces_v3_756_1959.patch">condor_pid_namespaces_v3_756_1959.patch</a>
37975 bytes added by bbockelm on 2011-Mar-19 16:36:58 UTC.
<br>
Next version of this patch:
<ul>
<li>Remove the squashing of $EXECUTE for now.  I've decided this can't be accomplished without the full knowledge of the starter.  Because of the complexity that would be added to the patch - increasing the difficulty of the review - I've left it off for now.  We'll revisit in the future, as this is really necessary to completely sandbox the job.
<li>Rebased against V7_5_6-branch.  This should help with the review; no cgroups are required.</ul>
<br>
<li><a href="attach_get/307/condor_pid_namespaces_v4.patch">condor_pid_namespaces_v4.patch</a>
25369 bytes added by bbockelm on 2011-Mar-30 13:31:20 UTC.
<br>
The new version of this patch has the following changes:

<p><ul>
<li>Remove usage of pthreads; synchronization only happens using pipes.
<li>The control path is now identical regardless of whether PID namespaces are in use.
<li>Separate out all the FS namespace functionality to make the patch minimal.
</ul>

<p>This should be ready for review, I believe.<br>
<li><a href="attach_get/368/condor_pid_namespaces_v5.patch">condor_pid_namespaces_v5.patch</a>
25635 bytes added by bbockelm on 2011-Jun-03 02:10:33 UTC.
<br>
Update of the PID namespace patch against the latest master (small merge issues due to the inclusion of cgroups into master).<br>
<li><a href="attach_get/530/condor_pid_namespaces_v6.patch">condor_pid_namespaces_v6.patch</a>
7528 bytes added by bbockelm on 2012-Feb-11 03:16:11 UTC.
<br>
Here's a completely rewritten approach for implementing PID namespaces.  This is far less destructive to the existing code, and uses the fact that the clone syscall acts like POSIX fork.

<p>No more careful surgery to <span class="wiki"><a title="Create Process Forkit"
class="missing"
  href="wiki?p=CreateProcessForkit">CreateProcessForkit</a></span>!<br>
<li><a href="attach_get/533/condor_pid_namespaces_v6.patch">condor_pid_namespaces_v6.patch</a>
7542 bytes added by bbockelm on 2012-Feb-14 17:43:39 UTC.
<br>
Fix of small bug in ALLOWED_FLAGS in v6 patch.<br>
<li><a href="attach_get/535/condor_pid_namespaces_v7.patch">condor_pid_namespaces_v7.patch</a>
8945 bytes added by bbockelm on 2012-Feb-16 20:25:47 UTC.
<br>
This version moves the remounting of /proc into the <span class="wiki"><a title="Filesystem Remap"
class="missing"
  href="wiki?p=FilesystemRemap">FilesystemRemap</a></span> object.  This allows PID namespaces to be used in conjunction with NAMED_CHROOT.<br>
</ul>
</blockquote>
</div>
</div>
<div id="footer" style="text-align:right">
<p>
This work is supported by NSF under Cooperative Agreement OAC-2030508 as part of the <a href="https://path-cc.io/"> PATh Project</a>. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the NSF. Site built using <a href="about">CVSTrac</a>.
</div>
</body></html>