{"id": 7660, "title": "Ticket #7660: Python ExprTrees should be able to parenthesize themselves", "description": "<blockquote>\n<code>classad.ExprTree</code> should have a method that returns the same expression, but wrapped in parentheses. This would be helpful when building up complex expressions.\n\n<p>In particular, the fact that these give the same result is a problem:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">&gt;&gt;&gt; x = classad.ExprTree(\"x == 1\")\n&gt;&gt;&gt; y = classad.ExprTree(\"y == 2\")\n&gt;&gt;&gt; z = classad.ExprTree(\"z == 3\")\n&gt;&gt;&gt; (x &amp; y) | z\nx == 1 &amp; y == 2 | z == 3\n&gt;&gt;&gt; x &amp; (y | z)\nx == 1 &amp; y == 2 | z == 3\n</pre></div>\n\n\n<p>We can't fix that, but we can do <code>(x &amp; y).parenthesize() | z</code>.\n\n</p><p>I don't have any strong opinions on the name of the method. <code>parenthesize</code> is accurate but long and hard to type. Maybe <code>wrap</code> or <code>group</code>?</p></blockquote>", "remarks": "<blockquote>\n<em>2020-May-22 10:40:00 by tlmiller:</em> <br/>\n\nI think the actual problem is with the operators used here.  Python will evaluate <code>(x &amp; y) | z</code> in the correct order -- calling <code>__and__</code> followed by <code>__or__</code>.  Both functions need to parenthesize their arguments:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">x &amp; y -&gt; (x) &amp; (y)\nw | z -&gt; (w) | (z)\n------------------\n(x &amp; y) | z -&gt; ((x) &amp; (y)) | (z)\n</pre></div>\n\n\n<p>An obvious optimization would be to not parenthesize 'simple' <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTrees\" title=\"Expr Trees\">ExprTrees</a></span>.\n\n</p><p></p><hr/>\n<em>2020-May-22 10:50:44 by tlmiller:</em> <br/>\n\nActually, thinking about the C++ implementation, I realized it would be harder to implement this wrong behavior than the correct one.  So I tried:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">&gt;&gt;&gt; w = (x &amp; y) | z\n&gt;&gt;&gt; w.eval()\n10\n&gt;&gt;&gt; q = x &amp; (y | z)\n&gt;&gt;&gt; q.eval()\n2\n</pre></div>\n\n\n<p>which sure makes it look like the issue is just one of converting <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTrees\" title=\"Expr Trees\">ExprTrees</a></span> to strings.  (Either we don't parenthesize subexpressions, or we do but have a bug in optimizing the extra ones away.)</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2020-Nov-09 12:20", "status": "new", "created": "2020-May-21 17:58", "fixed_version": "2020-May-21 17:58", "broken_version": "", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "johnkn", "derived_from": "", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu", "due_date": ""}