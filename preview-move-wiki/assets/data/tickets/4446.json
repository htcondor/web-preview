{"id": 4446, "title": "Ticket #4446: Secure sandboxing for glideins", "description": "<blockquote>\n(This ticket is more of an open brainstorm)\n\n<p>HTCondor has made great strides in the last few years in terms of process isolation (cgroups, namespaces) by taking advantage of new kernel features.  Unfortunately, almost all of this progress is useless for users of glideins as they typically run as unprivileged users and all the new kernel techniques require some sort of privilege.\n\n</p><p>Because there's no built-in way to do process isolation, CMS has turned to glexec - this is quite the can of worms!\n\n</p><p>A few ideas:\n</p><ol>\n<li>The introduction of user namespaces in the kernel allows most of our process isolation techniques.  Unfortunately, this isn't available in RHEL7.0 (although I found a random blog post from a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RedHat\" title=\"Red Hat\">RedHat</a></span> employee saying there's interest in adding it during the RHEL7.x series.  This would be set in condor_master and no changes to the startd would be required.\n<ul>\n<li>Unfortunately, even the latest Fedora doesn't have this enabled so I don't really have a good development platform.  Bah.\n</li></ul>\n</li><li>Use a combination of a ptrace jail and seccomp filter.  Modern ptrace ain't your father's ptrace.\n<ul>\n<li>seccomp mode 2 allows us to filter out the syscalls.  We can suppress the payload's ability to call ptrace or send signals and ENOSYS syscalls we don't recognize.  Safe syscalls can be passed through to the kernel.\n</li><li>PTRACE_O_TRACESECCOMP allows us to pop syscalls that we can't examine from the BPF.  This allows us to examine things like which file is being opened by the syscall.  We wouldn't need to emulate the syscalls like parrot - just check the arguments and filter them out as necessary.  This would allow us to filter filesystem operations.  Because we can whitelist the syscalls we want to examine with ptrace, we won't suffer the ptrace overhead for things like futex / clock_gettime.\n</li><li>PTRACE_O_EXITKILL prevents the traced processes from escaping in case the sandbox screws up.\n</li><li>See <a class=\"external\" href=\"http://pdos.csail.mit.edu/~taesoo/pubs/2013/mbox/mbox.pdf\">http://pdos.csail.mit.edu/~taesoo/pubs/2013/mbox/mbox.pdf</a> for a clever example of how to mitigate TOCTTOU attacks.\n</li><li>Signals, filesystem operations, ptrace.  What else would we need to look at?</li></ul>\n</li></ol>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "todo", "last_change": "2014-Jul-04 21:00", "status": "new", "created": "2014-Jul-04 21:00", "fixed_version": "2014-Jul-04 21:00", "broken_version": "", "priority": "4", "subsystem": "DaemonsExecNode", "assigned_to": "bbockelm", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelm@cse.unl.edu", "due_date": ""}