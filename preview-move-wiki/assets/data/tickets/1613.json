{"id": 1613, "title": "Ticket #1613: [RFE] New ClassAd function - unparse()", "description": "<blockquote>\nThe <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> language contains two types that are intimately related: strings and expressions. The language also contains tools to dissect and manipulate strings. It does not contain tools to manipulate expressions. Proposed is the first tool for expression manipulation: quote(). Unlike string(), which evaluates the expression before converting it to a string, quote() directly converts the expression into a string. The string tools become available, and the existence of eval() becomes even more interesting.\n\n<p>One concrete use case for quote() is parsing Requirements expressions. For example, detecting if <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DiskUsage\" title=\"Disk Usage\">DiskUsage</a></span> is referenced within job ads:\n</p><div class=\"verbatim\">\n<pre>   condor_q -constraint 'regexp(\".*DiskUsage.*\", quote(Requirements))'\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2010-Sep-30 06:16:24 by matt:</em> <br/>\n\n<a class=\"external\" href=\"http://www.cs.wisc.edu/condor/classad/refman/node4.html#SECTION00043900000000000000\">http://www.cs.wisc.edu/condor/classad/refman/node4.html#SECTION00043900000000000000</a>\n\n<p>string(any x) returns string.\n\n</p><p></p><pre>  If x is a String, the result is x. Otherwise, the result is the canonical unparsing of x (see Section 3.3.3).\n</pre>\n\n<p><a class=\"external\" href=\"http://www.cs.wisc.edu/condor/classad/refman/node3.html#sec:unparsing\">http://www.cs.wisc.edu/condor/classad/refman/node3.html#sec:unparsing</a>\n\n</p><p>The canonical unparsing of an expression is completely parenthesized and has no comments and no whitespace outside of string literals or attribute names. For example, the strings ``-x + 3 * (y + 1)'' and ``((-x)+(3*(y+1)))'' both parse to the same internal form. The second string is the canonical unparsing.\n\n</p><p></p><hr/>\n<em>2010-Sep-30 06:18:37 by matt:</em> <br/>\n\n<div class=\"verbatim\">\n<pre>$ ./condor_status -format \"%s\\n\" 'string(-x + 3 * (y + 1))'\n$ ./condor_status -format \"%s\\n\" 'string(-10 + 3 * (100 + 1))'\n293\n$ ident ./condor_status\n./condor_status:\n     $CondorVersion: 7.5.5 Sep 29 2010 PRE-RELEASE-UWCS $\n     $CondorPlatform: X86_64-LINUX_F13 $\n     $CondorVersion: %d.%d.%d %s %d %d $\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-Sep-30 10:17:09 by danb:</em> <br/>\n\nHmm.  I haven't thought about it deeply, but the spec for string() seems quite unexpected to me.  I would expect string() to coerce its evaluated argument to a string, just like int() coerces its evaluated argument to an integer.\n\n<p>I think we need two separate functions: one for coercing and one for unparsing.  I'd recommend calling the unparser unparse() rather than quote().\n\n</p><p>Note that the spec for string() doesn't quite match what you are hoping for.  \"The canonical unparsing of an attribute name is simply the name itself.\"  It seems that you were hoping for the attribute name to be expanded.  Perhaps we need both \"deep\" and \"shallow\" variants of the unparser.\n\n</p><p></p><hr/>\n<em>2010-Sep-30 11:11:53 by jfrey:</em> <br/>\n\nI suspect the spec assumes when an expression is a valid function argument, it's evaluated before use. The definition of 'const' arguments to functions probably needs refinement as well, but that's for another ticket.\n\n<p>I could see several behaviors desired for this quote()/unparse() function with regard to expanding attribute references:\n</p><ul>\n<li>No expansion. This could be useful if you want the unparsed expression in canonical form as a string.\n</li><li>Single expansion. If the expression consists of a single attribute reference (including scoping), expand that reference to its value, if possible, before unparsing. This would be Matt's example with condor_q -constraint.\n</li><li>Full expansion. Expand all attribute references in the expression, including references in the resulting values.\n</li></ul>\n\n<p>There could be an optional second parameter to the function which controls which form of expansion is used.\n\n</p><p></p><hr/>\n<em>2010-Oct-04 12:23:59 by psilord:</em> <br/>\n\nFWIW, I'd call it Unparse(). Quote() has a usual meaning in programming languages\nand what is described in this ticket is not it. :)\n<hr/>\n<em>2010-Oct-20 16:03:30 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.\n<hr/>\n<em>2011-Jan-27 14:46:04 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 16:19:13 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Aug-03 10:55:23 by tstclair:</em> <br/>\n\n+1 to make it unparse as it fits within the classad namespace nicely.\n\n<p>Testing addition using prettyprint.\n\n</p><p></p><hr/>\n<em>2011-Aug-03 11:47:38 by tstclair:</em> <br/>\n\nw/modification:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">condor_status -format \"%s=\" 'unparse(-SlotID + 3)' -format \"%s\\n\" 'string(-SlotID + 3)'\n -SlotID + 3=2\n -SlotID + 3=1\n -SlotID + 3=0\n -SlotID + 3=-1\n -SlotID + 3=-2\n</pre></div>\n\n\n<p></p><hr/>\n<em>2011-Aug-09 14:32:52 by jfrey:</em> <br/>\n\nWhat is unparse() good for in its current form? It doesn't dereference any attributes in the argument. Instead of calling unparse(), you can write the expression as a string literal. You can't use it to print the Requirements or Start expression of a machine ad in condor_status:\n<div class=\"code\">\n<pre class=\"code\">% condor_status -format '%s\\n' 'unparse(start)'\nstart\nstart\n%\n</pre></div>\n\n\n<p>Similarly, Matt's motivating example with condor_q at the top of this ticket won't work.\n\n</p><p></p><hr/>\n<em>2011-Aug-09 14:46:14 by tstclair:</em> <br/>\n\nwhoops that's my mistake.  Missing some bits.\n\n<p></p><hr/>\n<em>2011-Aug-10 15:07:00 by tstclair:</em> <br/>\n\nw/new mod\n\n<p></p><div class=\"code\">\n<pre class=\"code\">condor_status -format \"%s\\n\" 'unparse(Requirements)'\n( START ) &amp;&amp; ( IsValidCheckpointPlatform )\n( START ) &amp;&amp; ( IsValidCheckpointPlatform )\n( START ) &amp;&amp; ( IsValidCheckpointPlatform )\n( START ) &amp;&amp; ( IsValidCheckpointPlatform )\n( START ) &amp;&amp; ( IsValidCheckpointPlatform )\n</pre></div>\n\n\n<p></p><hr/>\n<em>2011-Aug-10 15:17:20 by jfrey:</em> <br/>\n\nOnce your new mod is ready, I can review it.\n\n<p></p><hr/>\n<em>2011-Aug-11 15:00:53 by jfrey:</em> <br/>\n\nI propose making a small change to unparse() (patch attached). That will make the function act as follows:\n\n<p></p><ul>\n<li>Return Error if wrong number of arguments.\n</li><li>Return Error if argument isn't an attribute name.\n</li><li>Return an empty string if the attribute can't be found.\n</li><li>Else, return the unevaluated, unparsed value of the attribute as a string.\n</li></ul>\n\n<p>The unparse() function should be either entirely in or entirely out of 7.7.1. Right now, we have a broken version in 7.7.1 wit the fix on master.\n\n</p><p></p><hr/>\n<em>2011-Sep-12 12:00:45 by smoler:</em> <br/>\n\nCode in 7.7.1.  Sadly, no documentation, and the release of 7.7.1 is likely very soon.  Ticket has been in docpending state since Aug 11.\n\n<p>Not even a version history item appears in the 7.7.1 manual.</p></blockquote>", "derived_tickets": "", "attachments": "<blockquote>\n<ul>\n<li><a href=\"attach_get/433/unparse.patch\">unparse.patch</a>\n404 bytes added by jfrey on 2011-Aug-11 19:56:29 UTC.\n<br/>\nHave unparse() return Error if not given an attribute name.<br/>\n</li></ul>\n</blockquote>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Sep-20 10:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=27298\">[27298]</a></span>: Quick LaTeX edit and remove contractions from new defn of unparse(), as well as of eval(). Note that changes made on V7_7_2-branch, as 7.7.1 is already released. ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1613\" onclick=\"get_ticket_and_populate_wrapper('1613'); return false;\" title=\"[RFE] New ClassAd function - unparse()\">#1613</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Sep-16 15:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=27266\">[27266]</a></span>: Document <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> function unparse() in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> chapter. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1613\" onclick=\"get_ticket_and_populate_wrapper('1613'); return false;\" title=\"[RFE] New ClassAd function - unparse()\">#1613</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-11 15:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26740\">[26740]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1613\" onclick=\"get_ticket_and_populate_wrapper('1613'); return false;\" title=\"[RFE] New ClassAd function - unparse()\">#1613</a></span> Update from code review  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-11 15:30</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26739\">[26739]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1613\" onclick=\"get_ticket_and_populate_wrapper('1613'); return false;\" title=\"[RFE] New ClassAd function - unparse()\">#1613</a></span> - Update to unparse to lookup in add prior to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=PrettyPrint\" title=\"Pretty Print\">PrettyPrint</a></span>  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-10 15:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26720\">[26720]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1613\" onclick=\"get_ticket_and_populate_wrapper('1613'); return false;\" title=\"[RFE] New ClassAd function - unparse()\">#1613</a></span> - Update to unparse to lookup in add prior to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=PrettyPrint\" title=\"Pretty Print\">PrettyPrint</a></span>  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-03 11:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26595\">[26595]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1613\" onclick=\"get_ticket_and_populate_wrapper('1613'); return false;\" title=\"[RFE] New ClassAd function - unparse()\">#1613</a></span> +New <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> function - unparse()  (By Timothy St. Clair )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Sep-16 15:57", "status": "resolved", "created": "2010-Aug-26 16:11", "fixed_version": "2010-Aug-26 16:11", "broken_version": "v070500", "priority": "2", "subsystem": "Libs", "assigned_to": "tstclair", "derived_from": "", "creator": "matt", "rust": "", "customer_group": "other", "visibility": "public", "notify": "smoler@cs.wisc.edu, matt@cs.wisc.edu,dan@hep.wisc.edu,tstclair@redhat.com,jfrey@cs.wisc.edu", "due_date": "20110809"}