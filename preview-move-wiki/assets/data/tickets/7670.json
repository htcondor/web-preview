{"id": 7670, "title": "Ticket #7670: Python bindings daemon objects should know their own address", "description": "<blockquote>\nPython bindings daemon objects (like <code>Collector</code> and <code>Schedd</code>) should expose enough information to re-locate them. For instance, I should be able to do something like\n\n<p></p><div class=\"code\">\n<pre class=\"code\">c1 = Collector(\"some-address\")\nc2 = Collector(c1.address)\n</pre></div>\n\n\n<p>or\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">s1 = Schedd()\ns2 = Schedd(s1.address)\n</pre></div>\n\n\n<p>(One difference between these is that the Collector constructor takes a string, but the Schedd needs a location ad... perhaps we can unify the API while we're at it? Related: <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7668\" onclick=\"get_ticket_and_populate_wrapper('7668'); return false;\" title=\"Make Python bindings Schedd constructor location_ad argument optional\">#7668</a></span>)\n\n</p><p>Internally, this is probably necessary for doing the per-daemon locking that will be part of the followup to <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7359\" onclick=\"get_ticket_and_populate_wrapper('7359'); return false;\" title=\"Python bindings multi-thread programs crash talking to Schedd\">#7359</a></span> .</p></blockquote>", "remarks": "<blockquote>\n<em>2020-May-29 15:51:08 by karpel:</em> <br/>\n\nTJ notes that there might be some complications in the protocol. From my perspective, the important things are:\n\n<p></p><ol>\n<li>I should be able to make a fresh instance using information available on an existing instance.\n</li><li>I should be able to uniquely identify a daemon based on information available on an instance.\n</li></ol>\n\n<p></p><hr/>\n<em>2020-Jun-01 08:27:16 by bbockelm:</em> <br/>\n\nWould it be OK if the \"location information\" was kept opaque instead of a human-readable address?  There's some value to push to keep the sinful string as an \"implementation detail\" as possible.\n\n<p>Alternately, a daemon's contact details is really the tuple of <code>(collector, type, name)</code>; what if we exposed that?\n\n</p><p></p><hr/>\n<em>2020-Jun-01 08:32:26 by karpel:</em> <br/>\n\nRight - I don't want the internal representation (sinful), I want the \"Pythonized\" address so that I can do Python stuff to it. Returning a tuple (or even better, a named tuple <a class=\"external\" href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\">https://docs.python.org/3/library/collections.html#collections.namedtuple</a> or equivalent) of contact details would be fine.\n\n<p></p><hr/>\n<em>2020-Jun-26 09:41:57 by johnkn:</em> <br/>\n\nDaemon contact details are not (collector, type, name) - that's what you use to do a locate query.  But most daemons are actually constructed from address files.\n\n<p>The contact details are (sinful, version), that's what you get from an address file, and also the important part of what you get back from a locate query.\n\n</p><p></p><hr/>\n<em>2020-Jul-14 10:43:04 by johnkn:</em> <br/>\n\nnotes from a conversation between TJ and Josh:\n\n<p><code>Daemon.location()</code> or <code>Daemon.location</code>, second form is preferable\nlocation is a named tuple or equivalent so you can do <code>location.address</code> like <code>JobEvent.cluster</code>\n\n</p><p>The location tuple must have an address (sinful) member, is should have a\nversion member.\n\n</p><p>All daemon object constructors should be able to take a <code>Location</code>, or a\ndaemon ad.\n\n</p><p>Location must be hashable and comparable\n\n</p><p>Location object <strong>may</strong> contain a member that is the collector query tuple needed\nto refresh the address and version fields, this tuple consists of (collector,type,name)\n\n</p><p>Probaby should be a sub-ticket, but some daemon objects should also have a directQuery member, for example\n\n</p><p></p><pre>    htcondor.Startd(collector.locate(...)).directQuery(...)\n    htcondor.Startd(location).directQuery(...) for location in collector.locate(...)\n</pre>\n\n<p>also maybe this?\n\n</p><p></p><pre>    daemon.directQuery(...) for daemons in collector.locate_daemons(...)</pre>\n</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7668\" onclick=\"get_ticket_and_populate_wrapper('7668'); return false;\" title=\"Make Python bindings Schedd constructor location_ad argument optional\">#7668</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nMake Python bindings Schedd constructor location_ad argument optional</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Oct-05 09:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=61418\">[61418]</a></span>: version history for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7874\" onclick=\"get_ticket_and_populate_wrapper('7874'); return false;\" title=\"Late materialization jobs that fail SUBMIT_REQUIREMENTS abort schedd\">#7874</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7668\" onclick=\"get_ticket_and_populate_wrapper('7668'); return false;\" title=\"Make Python bindings Schedd constructor location_ad argument optional\">#7668</a></span> and <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7670\" onclick=\"get_ticket_and_populate_wrapper('7670'); return false;\" title=\"Python bindings daemon objects should know their own address\">#7670</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Jul-21 17:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=60310\">[60310]</a></span>: Add .location methods to python-bindings daemon objects, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7670\" onclick=\"get_ticket_and_populate_wrapper('7670'); return false;\" title=\"Python bindings daemon objects should know their own address\">#7670</a></span> the .location methods return a named tuple of type <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonLocation\" title=\"Daemon Location\">DaemonLocation</a></span> daemon constructors will now accept a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonLocation\" title=\"Daemon Location\">DaemonLocation</a></span> tuple or a location classad ===VersionHistory:Pending===  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-Oct-05 09:51", "status": "resolved", "created": "2020-May-29 15:46", "fixed_version": "2020-May-29 15:46", "broken_version": "", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "johnkn", "derived_from": "", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu", "due_date": ""}