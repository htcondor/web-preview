{"id": 712, "title": "Ticket #712: Matchmaker code doesn't implement fair share correctly", "description": "<blockquote>\nGroups get appropriate quota and users get the correct number of slots within\nthose quotas. However, if there are unused slots and autoregroup is specified,\nthe group quotas (and hence usage) do not grow relative to their initial\nproportions. This is because in the second stage of negotiation all users,\nincluding those group users, are negotiated at the same time using prio\nnormalization values based upon all user prios.\n\n<p>The end result is two fold. If one specifies group quota as a percent, the % doesn't extend into unused slots. A second issue is that in the second level of negotiation, it's possible that some group users will get additional slots while others will not get any.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Oct-02 15:05:05 by danb:</em> <br/>\n\nI see staticquota declared and initialized to 0 at the top-level scope in negotiationTime().  This variable is set to 1 the first time any group is encountered with a static quota and then from that point on (for all subsequent groups), all code that depends conditionally on staticquota will see staticquota=1.  Is this really intended?  If so, I think a comment explaining why it makes sense would be appropriate.  The variable is used like a bool, so it should probably be declared as one.\n\n<p>This code uses the submitter ad's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TotalJobsRunning\" title=\"Total Jobs Running\">TotalJobsRunning</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TotalJobsIdle\" title=\"Total Jobs Idle\">TotalJobsIdle</a></span> in the calculation of unusedslots.  If a user submits a bunch of jobs with requirements=false, this computation would get a different result than if those jobs were not there.  That's a facetious example, but it makes me worried that there is a deeper problem in the assumptions that are being made.  For example, what about a schedd that is flocking to multiple pools?\n\n</p><p>Another problem with this calculation is that it assumes each job will consume one unit of quota.  If the dynamic quota stuff were correctly implemented to work with <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SlotWeight\" title=\"Slot Weight\">SlotWeight</a></span>, then this assumption of one job consuming one unit of quota would not be true.  It appears to me that dynamic quotas are <em>not</em> correctly dealing with <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SlotWeight\" title=\"Slot Weight\">SlotWeight</a></span>.  That's certainly not the fault of this patch, but fixing it would break the assumption being made in this patch.\n\n</p><p>The variable 'unclaimed' appears to be declared at a much broader scope than necessary.  In such a huge function, I think it is better to reduce scope.  This makes it easier to tell what affects what.\n\n</p><p>What's up with explicitly putting a null at the end of the string constant?\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">+                       groupArray[groupArrayLen].groupName = \"none\\0\";\n</pre></div>\n\n\n<p>And is it important for that name not to match any actual group name?\n\n</p><p>I see a variable totaljobs initialized to 0 and never set to anything else.  There is code that conditionally branches depending on the value.\n\n</p><p>Does the following code assume that 100 will be larger than the prio of any other group?  I'm not sure that is guaranteed.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">+                       groupArray[groupArrayLen].prio = 100;\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Oct-05 10:30:03 by jrt:</em> <br/>\n\nThe use of staticquota is bool. Initially the patch changed behavior for configs with static and dynamic quotas. We decided to keep old behavior when the config specifies a static quota. So, staticquota is used as a flag. Adding comments and changing to a bool is easy enough.\n\n<p>Regarding the calculation of unusedslots and multiple pools, my thought would be that if the Ad's are accurate in terms of queues, available slots, etc then the algorithm should allocate in an hfs manner. If there is some underlying config or architecture that renders the algorithm's output moot, I would have to venture that it also renders output from the current algorithm moot.\n\n</p><p>I would agree that <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SlotWeight\" title=\"Slot Weight\">SlotWeight</a></span> doesn't work with dynamic quotas with or without the patch. I would think fixing the current code or the patched code would be fairly similar effort. Our perspective was that slotweight was fairly new and replaced something that was also fairly new, so we were not sure of it's longevity in the code. Add to that slotweights don't work with dynamic quota, we disabled it in our tests and defer addressing the issue. Having said that, I think changes to negotiationTime to address slotweight won't be terribly different with or without the patch.\n\n</p><p>The variable unclaimed can be reduced in scope. As I recall the null termination was required for output. I believe I added it since initializeFromString adds it to all the group names. The name of the group will not collide because the name of the non-group user group (\"none\") is never pattern matched. The reason the field is filled is because groupname is used as a flag in calculateSubmitterLimit to toggle behavior between group and user.\n\n</p><p>The variable totaljobs was replaced by numsubmits[groupArrayLen]. I made some last minute variable name changes with some streamlining of the calculation of unused slots and apparently attached the wrong file. I checked and this is the only place that is different. I'll attach the correct file.\n\n</p><p>The other groups use prio = ( 100 * usage ) / quota; Groups are sorted based on this value. Groups using the least percent of their quota negotiate first.  I used\n\n</p><p></p><pre>    +                       groupArray[groupArrayLen].prio = 100;\n</pre>\n\n<p>in order to make non group users negotiate last which is how the current algorithm works. My view is that the sort order should be somewhat irrelevant.\n\n</p><p></p><hr/>\n<em>2009-Oct-20 10:48:55 by danb:</em> <br/>\n\nJon, sorry for the long delay.\n\n<p>If some groups have static quotas and some have dynamic quotas, what will the effect of your algorithm be?  It appears to me to be somewhat order dependent.  After the first static group, all subsequent dynamic groups will be treated differently than dynamic groups who came before the first static group.  If that's not the case, then it's not easily apparent and should be documented.\n\n</p><p>The more important issue with this patch is the reliance on the job counts in the submitter ads (<code>TotalJobsRunning</code> and <code>TotalJobsIdle</code>).  I don't agree that, \"If there is some underlying config or architecture that renders the algorithm's output moot, I would have to venture that it also renders output from the current algorithm moot.\"  The current algorithm does not rely on the job counts in the submitter ad other than to know whether a submitter wants to negotiate or not.  Those job counts are a very high level view of the queue and do not reliably indicate how many machines can actually be claimed by the user in question.  It would be a very significant change to make the negotiator's resource allocation decisions depend on the submitter ad job counts.  For this reason, I think it is essential to schedule a meeting with Todd to discuss how to go forward.\n\n</p><p></p><hr/>\n<em>2010-Jan-11 11:34:48 by matt:</em> <br/>\n\nEnacting push then [full] review</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/101/hfs.patch\">hfs.patch</a>\n14535 bytes added by jrt on 2009-Sep-29 15:56:13 UTC.\n<br/>\nPatch to fix hfs for dynamic quota. This basically ensures hfs is maintained when groups can't use all their quota. The previous behavior was that w/ autoregroup the unused slots would be negotiated at the user against user priofactor level and group quotas would not play a role. That meant a different normalization factor was used and, in some cases, the result that hfs isn't maintained. The patch hands out unused slots at the group level in a manner consistent with the quota config.<br/>\n</li><li><a href=\"../files/106/hfs.patch\">hfs.patch</a>\n14551 bytes added by jrt on 2009-Oct-05 15:31:16 UTC.\n<br/>\nthis should replace the previous patch. <br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-12 09:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16861\">[16861]</a></span>: Minor code changes to make Windows compiler happy, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=712\" onclick=\"get_ticket_and_populate_wrapper('712'); return false;\" title=\"Matchmaker code doesn't implement fair share correctly\">#712</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-11 11:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16860\">[16860]</a></span>: Updates from review by DanB <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=712\" onclick=\"get_ticket_and_populate_wrapper('712'); return false;\" title=\"Matchmaker code doesn't implement fair share correctly\">#712</a></span> Committer: Matthew Farrellee  (By Jon Thomas )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-11 11:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16859\">[16859]</a></span>: Implemented scaling dynamic group quotas <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=712\" onclick=\"get_ticket_and_populate_wrapper('712'); return false;\" title=\"Matchmaker code doesn't implement fair share correctly\">#712</a></span> If any static group quotas are configured the old semantics apply Committer: Matthew Farrellee  (By Jon Thomas )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Feb-03 11:36", "status": "resolved", "created": "2009-Sep-03 14:00", "fixed_version": "2009-Sep-03 14:00", "broken_version": "v070302", "priority": "4", "subsystem": "Daemons", "assigned_to": "jrt", "derived_from": "", "creator": "jrt", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu dan@hep.wisc.edu tannenba@cs.wisc.edu jthomas@redhat.com rrati@redhat.com", "due_date": "20100115"}