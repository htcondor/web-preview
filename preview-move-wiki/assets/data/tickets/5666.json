{"id": 5666, "title": "Ticket #5666: submit via python bindings should work like condor_submit", "description": "<blockquote>\nIt should be possible to submit jobs to the SCHEDD via python bindings and get all of the same defaults and behavior as condor_submit without having to replicate all of that code in your python script.\n\n<p>The way to do this is to move most of the code in the current condor_submit that builds up a job ad from a submit file into the condor_utils  library.  Then both condor_submit and python bindings could use that same library to make a job ad from a submit file/hashtable and get the same defaults and validiation behavior.\n\n</p><p>the condor_submit source would still have all of the code to process command line arguments and talk to the schedd.  But it would use shared library code to parse the submit file and make a job ad from it.\n\n</p><p>The submit python bindings could expose the hashtable that results from parsing the submit file to python code, and then provide a python method to make a job ad from that submit hashtable, then the current python bindings chould be used to send that job ad along to the schedd.\n\n</p><p>At that point, the python bindings code to manipulate the job ad just prior to sending it should be removed - because a much more correct manipulation would happen in the code that turns a submit file/hashtable into a job ad.</p></blockquote>", "remarks": "<blockquote>\n<em>2016-May-17 09:51:56 by bbockelm:</em> <br/>\n\nSome notes from a whiteboard session between TJ and myself:\n\n<p></p><ul>\n<li>We want to introduce a new class, <code>Submit</code>.  This object behaves like a dictionary (unordered hash table of key-value pairs) and represents the text in a submit file up to a single \"queue\" statement.\n</li><li>The object will have the following methods (in addition to the \"standard dictionary protocol\"):\n<ul>\n<li><code>queue(N)</code>: submits <code>N</code> copies of the current job represented by the <code>Submit</code> object to the schedd.\n</li><li><code>queueForEach(\"ColumnA\", \"ColumnB\", [(0, 0), (1, 1), (2, 2), procs=N)</code>: Submits N jobs per entry in the list, where <code>ColumnA</code> and <code>ColumnB</code> are substituted with the values of the entry.\n</li><li><code>queueFrom(\"ColumnA\", \"ColumnB\", file, procs=N, separator=\",\")</code>: Submits N jobs per entry in the list, where <code>ColumnA</code> and <code>ColumnB</code> are substitute with fields form the file.\n</li><li><code>queueAction</code>: Queue the job given an <code>Action</code> object.  See notes below on the <code>Action</code> object.\n</li></ul>\n</li><li>gthain noted <code>queueForEach</code> and <code>queueFrom</code> are not particularly pythonic; however, they might be necessary once we start having factory jobs.  Hence, we note them here but don't intend to implement them in this ticket.\n<ul>\n<li>A future alternate might be to drop these and allow the equivalent to be constructed by the <code>Action</code> object.\n</li></ul>\n</li><li>The <code>queue*</code> methods will only work if there's a currently active transaction.\n</li><li>We will add a module-level function, <code>parseSubmitFile</code>, that parses a submit file and returns an iterator which produces <code>Submit</code> and <code>Action</code> objects.\n</li><li>The <code>Action</code> class represents a <code>queue</code> statement parsed from a submit file.  Users cannot construct these objects - they only come from <code>parseSubmitFile</code>.\n</li></ul>\n\n<p>So, a few code examples:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">submit = htcondor.Submit()\nsubmit[\"executable\"] = \"my_great_script.sh\"\nsubmit[\"output\"] = \"output.$(ProcId)\"\nwith schedd.transaction():\n  for filename in os.listdir(...):\n    if filename.endswith(\".mpeg\"):\n      submit[\"arguments\"] = filename\n      submit.queue(3)\n</pre></div>\n\n\n<p>The above will submit 3 jobs per filename ending \".mpeg\" in a given directory.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">with schedd.transaction():\n  for submit, action in parseSubmitFile(open(\"/tmp/foo.submit\")):\n    submit.queueAction(action)\n</pre></div>\n\n\n<p>The above will be equivalent to calling <code>condor_submit /tmp/foo.submit</code>.\n\n</p><p></p><hr/>\n<em>2016-May-17 10:49:21 by bbockelm:</em> <br/>\n\n<strong>Note</strong>: we probably need an <code>ad_result</code> keyword argument on the <code>queue*</code> methods (just like we do with <code>submit</code> in order to support spooling jobs.\n\n<p></p><hr/>\n<em>2016-May-17 13:38:12 by bbockelm:</em> <br/>\n\nTalking further with TJ:\n<ul>\n<li>Priority for 8.5 is the <code>Submit</code> object; parsing submit files can come in 8.7 as this seems esoteric to us.\n</li><li>TJ will work to allow the <code>submit_utils</code> functions to return a list of warnings so we can integrate with the python warning subsystem.\n</li><li>TJ will provide an iterator in <code>submit_utils</code> for managing complex submit statements.\n<ul>\n<li>At this point, will revisit signature of the <code>parseSubmitFile</code>.\n</li></ul>\n</li></ul>\n\n<p></p><hr/>\n<em>2016-Jun-15 22:45:58 by bbockelm:</em> <br/>\n\nOk, I believe the pieces for 8.5.x are currently done.  Merging to master and will mark as ready for documentation.\n\n<p></p><hr/>\n<em>2016-Jun-28 23:21:09 by bbockelm:</em> <br/>\n\nI integrated the new error stack object into the python warning/exception system.\n\n<p><strong>NOTE</strong>: did not commit to 8.5.6 branch but to master; feel free to cherrypick as appropriate.\n\n</p><p></p><hr/>\n<em>2016-Jun-28 23:23:24 by bbockelm:</em> <br/>\n\nWorth noting - this likely prevents a segfault when there are parse errors in 8.5.6.  So, it really might be worth backporting.\n\n<p></p><hr/>\n<em>2016-Jul-26 13:45:57 by wenger:</em> <br/>\n\nHmm -- I'm trying to understand this to document it.  Anyhow, in schedd.cpp, there are a bunch of things where the C++ method doesn't seem to agree with the Python definition, for example:\n\n<p></p><pre>  std::string\n  expand(const std::string attr) const\n</pre>\n\n<p></p><pre>  .def(\"expand\", &amp;Submit::expand, \"Expand all macros for a given attribute\")\n</pre>\n\n<p>(in this case the C++ method takes an argument but the .def line doesn't seem to define any arguments).\n\n</p><p>Is this actually a problem, or is it just a matter of my lack of understanding of how this code works?\n\n</p><p></p><hr/>\n<em>2016-Jul-26 13:52:47 by bbockelm:</em> <br/>\n\nHi Kent,\n\n<p>The <code>.def</code> method invocation uses templating to resolve the required arguments at compile time.  All the <code>boost::arg</code> stuff is there to (a) improve the docstrings by giving the arguments a name (argument names are not part of the C++ ABI) and (b) provide defaults (python's keyword arguments are a bit more flexible than C++).\n\n</p><p>So, there's no requirement that the arguments be specified (correctly or at all) in the <code>.def</code> invocation.  I try to do it where I can, but I often skip it for simpler methods.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2016-Jul-26 13:54:01 by wenger:</em> <br/>\n\nOkay, so I should just look at the C++ code to see what the arguments are, right?\n\n<p></p><hr/>\n<em>2016-Jul-26 13:56:48 by bbockelm:</em> <br/>\n\nSure, that's one way to do that; I usually utilize <code>help(htcondor.Submit)</code> from the python prompt to get this information though.\n\n<p></p><hr/>\n<em>2016-Jul-26 15:13:42 by wenger:</em> <br/>\n\nBrian, can you take a look at the attached PDF and let me know if the submit stuff is accurate?  Do more functions need to be documented (e.g., keys, values, items, etc.)?\n\n<p></p><hr/>\n<em>2016-Jul-27 13:07:27 by wenger:</em> <br/>\n\nI want to add an example to the docs for this, but I want to finish off some other tickets first...\n\n<p></p><hr/>\n<em>2016-Dec-09 11:38:48 by wenger:</em> <br/>\n\nNote:  fixed version refers to when the code for this went in; the ticket was not resolved at that point because documentation wasn't complete.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/957/python_bindings.pdf\">python_bindings.pdf</a>\n157349 bytes added by wenger on 2016-Jul-26 20:12:34 UTC.\n<br/>\nPython bindings manual section with preliminary Submit documentation.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-26 15:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48852\">[48852]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span>: Preliminary documentation (needs feedback from BrianB as to whether it's accurate).  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-20 16:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48821\">[48821]</a></span>: Version history for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span> and preliminary documention of new python bindings <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5507\" onclick=\"get_ticket_and_populate_wrapper('5507'); return false;\" title=\"Expose condor_drain functionality in the Python bindings\">#5507</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-11 09:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48760\">[48760]</a></span>: Bugfix: clear internal buffer. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span> Committer: Tim Theisen  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-10 21:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48759\">[48759]</a></span>: Bugfix: clear internal buffer. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jun-29 09:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48686\">[48686]</a></span>: Integrate submit warnings / errors with python. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span> Whenever the submit hash records an error, turn it into a python exception. When it records a warning, turn it into a python warning object. Committer: John (TJ) Knoeller  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jun-28 23:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48685\">[48685]</a></span>: Integrate submit warnings / errors with python. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span> Whenever the submit hash records an error, turn it into a python exception. When it records a warning, turn it into a python warning object.  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jun-24 14:24</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48634\">[48634]</a></span>: remove obsolete PRAGMA_REMIND from previous commit of <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jun-22 12:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48612\">[48612]</a></span>: for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span>, add <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CondorError\" title=\"Condor Error\">CondorError</a></span> and cwd to MACRO_EVAL_CONTEXT so that submit bindings can get back an errorstack instead of having errors written to stderr. And so that the cwd for macro expansion can be set independently of the actual current working directory. This commit also adds a,b,f, and w options\u00a0[...]\n (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jun-15 22:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48566\">[48566]</a></span>: Support '+' syntax in submit objects. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span> Includes some simple unit tests to verify functionality.  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-May-18 13:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48391\">[48391]</a></span>: Allow python bindings to use submit file syntax. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-May-09 15:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48375\">[48375]</a></span>: In support of <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5666\" onclick=\"get_ticket_and_populate_wrapper('5666'); return false;\" title=\"submit via python bindings should work like condor_submit\">#5666</a></span>, move most of condor_submit into condor_utils library as new submit_utils module.\u00a0[...]\n (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-May-21 16:36", "status": "resolved", "created": "2016-May-09 14:25", "fixed_version": "2016-May-09 14:25", "broken_version": "", "priority": "3", "subsystem": "Libs", "assigned_to": "", "derived_from": "", "creator": "johnkn", "rust": "", "customer_group": "other", "visibility": "public", "notify": "johnkn@cs.wisc.edu, bbockelm@cse.unl.edu, wenger@cs.wisc.edu", "due_date": ""}