{"id": 3218, "title": "Ticket #3218: Support JobPrio scope across multiple schedulers", "description": "<blockquote>\nGiven a set of jobs across all Schedds in a pool owned by the same user that are competing for the same set of resources, we would like to decrease the number of jobs that begin execution ahead of higher priority jobs. E.g. decrease the instances of job priority inversions.  See the below attached design document for details re motivation, goals, and design.\n\n<p>This mechanism is controlled via the config knob <code>USE_GLOBAL_JOB_PRIOS</code>, which will default to false.\n\n</p><p>The work for this design is complete, thus resolving; however, more work needs to be done before documentation. See <span class=\"ticket\"><a class=\"active\" href=\"/tickets?ticket=3691\" onclick=\"get_ticket_and_populate_wrapper('3691'); return false;\" title=\"Remove hard-coded policies on how schedd can reuse claims\">#3691</a></span>.\n\n</p><p><strong>Milestones</strong>\n\n</p><p></p><ol>\n<li>Modify the Schedd to report <span class=\"quote\">JobPrioArray</span> and <span class=\"quote\">JobPrioArrayOverflow</span> attributes. [2 days]\n</li><li>Modify the Schedd to support the Negotiator-Schedd protocol extension. [2 days]\n</li><li>Modify the Negotiator to implement the new procedure. [3 days]\n</li><li>Testing [4 days]\n</li></ol>\n\n<p></p><div>\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"0\" summary=\"EMBED: Status Table of Derived Tickets\">\n<caption>\n  <a href=\"rptview?rn=86\" rel=\"nofollow\" title=\"EMBED: Status Table of Derived Tickets\">EMBED: Status Table of Derived Tickets</a>\n</caption>\n<tbody><tr>\n<td colspan=\"11\"><form action=\"rptview\" method=\"GET\">\n<input name=\"rn\" type=\"hidden\" value=\"86\"/>\nTN: <input name=\"TN\" type=\"text\" value=\"3218\"/>\n<input type=\"submit\" value=\"Go\"/>\n</form></td></tr> \n<tr>\n<th><a href=\"rptview?rn=86&amp;order_by=2&amp;order_dir=ASC&amp;TN=3218\">Developer</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=3&amp;order_dir=ASC&amp;TN=3218\">#</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=4&amp;order_dir=ASC&amp;TN=3218\">Status</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=5&amp;order_dir=ASC&amp;TN=3218\">Type</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=6&amp;order_dir=ASC&amp;TN=3218\">Pri</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=7&amp;order_dir=ASC&amp;TN=3218\">Created</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=8&amp;order_dir=ASC&amp;TN=3218\">Changed</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=9&amp;order_dir=ASC&amp;TN=3218\">Target</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=10&amp;order_dir=ASC&amp;TN=3218\">Due Date</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=11&amp;order_dir=ASC&amp;TN=3218\">Days left</a></th>\n<th><a href=\"rptview?rn=86&amp;order_by=12&amp;order_dir=ASC&amp;TN=3218\">Title</a></th>\n</tr>\n<tr bgcolor=\"#c8c8c8\">\n<td valign=\"top\">\ntannenba\n</td>\n<td valign=\"top\"><a href=\"tktview?tn=3255,86\">3255</a></td>\n<td valign=\"top\">\nresolved\n</td>\n<td valign=\"top\">\nenhance\n</td>\n<td valign=\"top\">\n2\n</td>\n<td valign=\"top\">\n2012 Oct\n</td>\n<td valign=\"top\">\n2012 Oct\n</td>\n<td valign=\"top\">\nv070902\n</td>\n<td valign=\"top\">\n2012-10-05\n</td>\n<td valign=\"top\">\n-3288.9\n</td>\n<td valign=\"top\">\nImplement JobPrioArray and JobPrioArrayOverflow attrs in submitter ad\n</td>\n</tr>\n<tr bgcolor=\"#c8c8c8\">\n<td valign=\"top\">\ntannenba\n</td>\n<td valign=\"top\"><a href=\"tktview?tn=3256,86\">3256</a></td>\n<td valign=\"top\">\nresolved\n</td>\n<td valign=\"top\">\nenhance\n</td>\n<td valign=\"top\">\n2\n</td>\n<td valign=\"top\">\n2012 Oct\n</td>\n<td valign=\"top\">\n2012 Oct\n</td>\n<td valign=\"top\">\nv070902\n</td>\n<td valign=\"top\">\n2012-10-08\n</td>\n<td valign=\"top\">\n-3285.9\n</td>\n<td valign=\"top\">\nImplement Negotiator-Schedd protocol extension for global jobprios\n</td>\n</tr>\n<tr bgcolor=\"#c8c8c8\">\n<td valign=\"top\">\ngthain\n</td>\n<td valign=\"top\"><a href=\"tktview?tn=3257,86\">3257</a></td>\n<td valign=\"top\">\nresolved\n</td>\n<td valign=\"top\">\nenhance\n</td>\n<td valign=\"top\">\n2\n</td>\n<td valign=\"top\">\n2012 Oct\n</td>\n<td valign=\"top\">\n2013 Jan\n</td>\n<td valign=\"top\">\nv070903\n</td>\n<td valign=\"top\">\n2012-10-10\n</td>\n<td valign=\"top\">\n-3283.9\n</td>\n<td valign=\"top\">\nImplement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator\n</td>\n</tr>\n</tbody></table></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2012-Sep-05 12:34:29 by bbockelm:</em> <br/>\n\nHere's the basic problem description (contributions from both sfiligoi and bbockelm):\n<ul>\n<li>CMS would like to assign global priorities to jobs. Each job can potentially have a different priority, in a range spanning O(100k) different values. In practice, we envision having O(100) different priority levels at any point in time. The need for O(100k) levels is so that it is possible at any given moment to pick a priority number between two existing ones.\n<ul>\n<li>From a currently running instance, the ratio of (# of unique priorities) : (# of jobs) is 1:100.  In the current implementation, each workflow gets a priority, and the jobs share that priority.  A subset of the jobs can be boosted (so, there's not precisely 1 priority per workflow).  There is no current plan to have more than two priorities per workflow, but that doesn't imply there won't be further changes in the future.\n</li></ul>\n</li><li>These job priorities should be global for a user/group.  Job X from user1@domain1@scheddA should be run before job Y from user1@domain1@scheddA if the X.JobPrio &gt; Y.JobPrio.\n</li><li>We are targeting the system to scale to at least 100k running jobs.  There is no way to run this from a single schedd host; and it is not only a Condor schedd scalability issue, other resource intensive processes have to run alongside Condor as well.\n<ul>\n<li>The stage-in / stage-out can take a large amount of resources.  We can peg a 1Gbps line at a modest level of runningjobs (10k).  This will provide another barrier to single-schedd solutions; not insurmountable, but considerable.\n</li></ul>\n</li><li>Right now, all jobs share the same submitter (user@domain), and are multiples schedds.  That might not be true in the future, so the solution should respect group priorities.\n</li><li>CMS isn't interested in preemption-based solutions (but definitely kudos to Erik for figuring out one!)\n</li></ul>\n\n<p></p><hr/>\n<em>2012-Sep-05 12:35:35 by bbockelm:</em> <br/>\n\nHere is my proposal.  I understand Todd and Igor are working on an alternate one.\n\n<p>My proposal is to, during each spin of the pie, only negotiate with jobs whose priority is equal to the maximum job prio of all submitters in the group.  The max job prio is known from the submitter ads (and assumed to be INT_MIN if not present).  If there's only one submitter in the group, do not apply this rule.\n\n</p><p>As an example, let's say we have:\nuser1@domain1@ScheddA\n</p><ul>\n<li>Job 4, Prio 9\n</li><li>Job 5, Prio 8\nuser1@domain1@ScheddB\n</li><li>Job 1, Prio 10\n</li><li>Job 2, Prio 8\n</li><li>Job 3, Prio 10\n</li></ul>\n\n<p>Suppose further the sort order is scheddA, then scheddB.  The max job prio is 10, so the negotiation will look like:\n</p><ol>\n<li>Connect to ScheddA, get job 4, spin.  Update submitter ad to have max job prio to 9\n</li><li>Connect to ScheddB, get job 1 - assign.  Get job 3 - assign.  Get job 3 - assign.  Get job 2 - spin.  Update submitters's max job prio to 8.\n</li><li>Connect to ScheddA, get job 4, assign.  Get job 5 - spin.  Update submitter ad to have max job prio 8.\n</li><li>Connect to ScheddB, get job 2 - spin.\n</li><li>Connect to ScheddA, get job 5 - assign.  Get NO_MORE_JOBS.  Done.\n</li><li>Connect to ScheddB, get job 2 - assign.  Get NO_MORE_JOBS.  Done.\n</li></ol>\n\n<p>Example implementation attached (don't be fooled by the fact it compiles - it likely doesn't work, but hopefully shows that the implementation is simple).  Another approach is Igor's idea to include all the possible job prios in the submitter ad (I'd think you need to add a limit to the number of job prios posted, but that's a fairly small tweak).  I believe this approach keeps the logic simpler, at a cost of spinning more often.\n\n</p><p>This patch is a no-op except when there are multiple schedds with the same submitter who is using multiple job priorities.  The effects are theoretically pretty small assuming there's a large number of jobs per priority.\n\n</p><p></p><hr/>\n<em>2012-Sep-05 12:51:17 by sfiligoi:</em> <br/>\n\nAny solution will likely need changes in core Condor components (e.g. Negotiator and Schedd), so it will need sign off by the highest level of Condor management (i.e Miron, and possibly others).\n\n<p>We thus need a comprehensive study of the problem and of any proposed solution(s).\n\n</p><p></p><hr/>\n<em>2012-Sep-05 20:36:53 by bbockelm:</em> <br/>\n\nWe had a quick phone call about this.  I wasn't able to stay for the full thing (so I don't know the conclusion).\n\n<p>One very solid point ToddT and others made was to consider the case where we have 30k job slots, a single schedd can run 20k jobs at a time, and all the \"high priority\" jobs are in one schedd.  In such a case, you will have at least 10k low-priority jobs running.\n\n</p><p>This RFE would not handle such a case well.  CMS mostly avoids this because the difference between \"global running jobs\" and \"maximum running jobs in a schedd\" is fairly close and the distribution of high priority jobs is \"not that bad\" (but still bad enough that this is an issue!).  This likely changes in the future if we want to go up to 100k jobs - as stated previously, we will never be able to support all of CMS in a single schedd.  CMS will still need to load-balance somewhat between multiple schedds.\n\n</p><p>We will take this input back to CMS to see if this won't upset the whole idea.\n\n</p><p></p><hr/>\n<em>2012-Sep-06 11:53:52 by eje:</em> <br/>\n\nA few other points from the 9/5 phone call:\n\n<p></p><ul>\n<li>the condor schedulers are fed by a potentially much larger wmagent \"pre-queue\" : <a class=\"external\" href=\"https://twiki.cern.ch/twiki/bin/view/CMSPublic/CompOpsWorkflowOperationsWMAgentToolkit\">https://twiki.cern.ch/twiki/bin/view/CMSPublic/CompOpsWorkflowOperationsWMAgentToolkit</a>\n</li><li>one part of the wmagent's job is to do balancing of <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> across available schedulers (\"manure spreading\")\n</li><li>balancing can fail in various ways (e.g. if one schedd goes down temporarily and fails to get its share of high prio jobs).   Totally eliminating these failure modes is not possible\n\n<p></p></li><li>because it is not possible to guarantee prevention of all failure modes in <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> balancing, some kind of metric is desired to at least measure if any changes to condor yielded an improvement\n</li><li>whether the wmagent's behavior can be improved is an open question for inquiry\n</li><li>whether the wmagent can adaptively respond to a job being removed from a condor scheduler (or if it fails, etc) is another important question.  If it can adaptively reschedule jobs, that would allow significant ability to correct <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> imbalances when the occur\n</li></ul>\n\n<p></p><hr/>\n<em>2012-Sep-06 12:58:52 by bbockelm:</em> <br/>\n\n<ul>\n<li>Another failure mode is that there is a minimum granularity of number of jobs the WMAgent can pull off the global queue.  Depending on the dataset, the minimum might be 100 or 10,000 (there's been cases of up to 500k minimum granularity, but I think those are considered mistakes).\n<ul>\n<li>...I will CC some additional folks so they can check the accuracy of this statement...\n</li><li>However, some of this is inherent to the workflow and cannot be removed.\n</li></ul>\n</li><li>I don't think I understand the question about jobs being removed.  Do you mean removed from one schedd and added to another one?\n</li><li>For a metric, I would suggest the percent of jobs in the system that are priority starved - i.e., what percentage of jobs have higher priority than the lowest-priority running job.\n<ul>\n<li>Note this metric can only be zero in the degenerate case where any job can run at any site.  This is not true.\n</li></ul>\n</li></ul>\n\n<p>Steve Foulkes provided us with a table of job priority distribution.  It appears this RFE would work well for today's job distribution (although it's not clear from his table how much the data dependencies came into play).\n\n</p><p>So, my questions for CMS (I will add CMS folks to the ticket; they can email me, and I will copy/paste in responses):\n</p><ul>\n<li>Today we see 130k jobs in the&amp;#160;WMAgent systems (from Steve's email) with 90k jobs in Condor (from \"condor_status -submitter\").  There are about 40 (schedd, workflow priority).\n<ul>\n<li>Is this a representative, average day?\n</li><li>How does a \"bad day\" compare?  What are the extremes of the above three parameters?\n</li></ul>\n</li><li>How badly out-of-balance can the job distribution be (see prior comment about one schedd getting many high-prio jobs - more than it can run - but another one getting only low-prio jobs)?\n<ul>\n<li>What's the average, what's the extremes, and is this part of the \"Condor side\" or the \"CMS side\" of the problem?\n</li></ul>\n</li></ul>\n\n<p></p><hr/>\n<em>2012-Sep-06 13:13:42 by eje:</em> <br/>\n\nWhat I'm wondering in terms of \"adaptive wmagent\" is whether it is possible (programmatically, with little or no human effort) to:\n\n<p></p><ol>\n<li>detect a <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> imbalance on one or more schedds\n</li><li>remove low-prio jobs from schedds\n</li><li>put those low jobs back into the wmagent for re-spreading\n</li><li>replace them with hi-prio jobs currently waiting on the wmagent\n</li></ol>\n\n<p>That sequence doesn't address the case where all the highest-prio jobs are already committed to some other schedd, but in that case it might be possible to just place a hold on lower-prio jobs and let slots be filled from the schedds having the high-prio jobs\n\n</p><p></p><hr/>\n<em>2012-Sep-06 14:25:36 by bbockelm:</em> <br/>\n\nAnswers and input from CMS Devs:\n<ul>\n<li>O(100k) running jobs might be an under-estimate.  Needs further follow-up from CMS Ops.\n</li><li>Worst case to plan for is 100 workflows per agent instance.  So, worst case is approximately 1 order-magnitude worse than the currently-observed 40 (schedd, prio) tuples.\n</li><li>The target ratio between Condor jobs and jobs in the WMAgent database is 1:2 to 1:3.\n</li><li>Worst case is 100 workflows per agent.  So, the original guess of O(100) unique priorities is about correct.\n</li><li>The system has to process a single block in one WMAgent; a block is 1-50,000 jobs.  To remove a job from one WMAgent and move it to another, you have to cancel all current progress for the whole block.\n<ul>\n<li>The block sizes are an artifact of the underlying physics, and this situation is not changeable for the foreseeable future.\n</li><li>If the block is in the WMAgent, its input files already exist.  No shish-kabob DAGs.\n</li></ul>\n</li><li>If a job fails/disappears, the system has a retry policy.  After so many failures, operators intervene manually.\n</li><li>The operators keep a watch on the system and keep the job priorities between agents in relative balance.  In the extreme cases we outlined above (one WMAgent gets too many high-priority jobs), the operators would intervene manually.  So, for CMS, we don't need to consider the case of large imbalances.\n</li><li>No assumptions can be made about the number of possible sites for a job to run.  It ranges from 1 site to all CMS sites, depending on the input data.\n</li><li>The average negotiation cycle (current data only, from Condor statistics) is 65 seconds for Phase 1, 12s for Phase 2, 0 for Phase 3, 70s for Phase 4.  5 submitters were considered.\n</li></ul>\n\n<p>Hope this helps.  I see no blockers for the proposed solution in these answers.  Priority inversions will still exist in the proposed solution, but some level of inversion is acceptable.  Negotiation times will take longer, but it is currently not too bad.\n\n</p><p></p><hr/>\n<em>2012-Sep-07 14:13:26 by eje:</em> <br/>\n\nSanity check: My reading of the proposed design is that a JobPrio-oriented negotiation would use a separate, optional, code path for ordering the loop over submitters.  There would be the traditional sorting by acct-prio, and a new alternative ordering logic that refers to <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> values.\n\n<p>Question: when <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> ordering is in effect, will fairshare values still be applied to place limits on individual submitters, or will those be ignored to give maximum credence to <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span>?\n\n</p><p>Question: how will accounting groups interact with <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> negotiation?\n\n</p><p></p><hr/>\n<em>2012-Sep-07 14:17:24 by sfiligoi:</em> <br/>\n\nThere should be no change in fair share mechanisms.\n\n<p><span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> ordering is only within a single user, and all limits in place for that user should be preserved.\n\n</p><p>The only change is the order in which the jobs for that user are considered; nothing else.\n\n</p><p></p><hr/>\n<em>2012-Sep-07 16:38:14 by matt:</em> <br/>\n\nWhat about: the <span class=\"wiki\"><a href=\"wiki?p=JobPrioArray\" title=\"Job Prio Array\">JobPrioArray</a></span> being a maximum size (say N and run length encoded); and, a call to (Job, <span class=\"wiki\"><a href=\"wiki?p=JobPrioArray\" title=\"Job Prio Array\">JobPrioArray</a></span>) GetNextJobAndPriorities(User) on the Schedd, instead of Job GetNextJobWithPriority(User, Prio). The Job should also indicate its priority. The Schedd is allowed to decide what the next highest priority job is. The Negotiator gets to know the next N priorities for each user, updated each time a job is pulled for matching. If the job prio pulled does not match the expected priority the Negotiator needs to re-sort <span class=\"wiki\"><a href=\"wiki?p=JobPrioArrays\" title=\"Job Prio Arrays\">JobPrioArrays</a></span>.\n\n<p>Fundamentally, the Negotiator is using <span class=\"wiki\"><a href=\"wiki?p=JobPrioArray\" title=\"Job Prio Array\">JobPrioArray</a></span> to guess at which Schedd has the next highest priority job. That job may have been removed or a new higher priority one may have been submitted since the Negotiator sorted the <span class=\"wiki\"><a href=\"wiki?p=JobPrioArrays\" title=\"Job Prio Arrays\">JobPrioArrays</a></span>.\n\n</p><p></p><div class=\"verbatim\">\n<pre>Schedd:\n . Maintains JobPrioArray per Submitter\n . Provides: (Job, JobPrioArray) GetNextJobAndPriorities(Submitter)\n . GetNextJobAndPriorities should return the next job that has not received a claim. Specifically, if called twice without being provided a claim between calls, it should return the same job. This avoids the need for the negotiator to push jobs back onto the schedd's queue when a prio mismatch occurs.\n . On receiving a claim, the JobPrioArray is updated for the submitter\n\nNegotiator alg would be something along the lines of:\n . sort Submitters based on JobPrioArray\n . do\n .   pop submitter off sorted list\n .   expectedPrio = submitter.nextPrio\n .   job, newPrioArray = schedd.getNextJobAndPriorities(submitter)\n .   if job.prio != expectedPrio // JobPrioArray was stale\n .     update sorted submitter list\n .   else\n .     send schedd a claim\n . while sorted submitter list isn't empty and quota isn't exhaused etc\n</pre></div>\n\n\n<p>Quick, pre HH, brain dump: Is it even an optimization to have len(JobPrioArray) &gt; 1? Consider reducing the entire description here to external sort. Fundamentally what we're trying to do is order across a dataset larger than we would like to pull into Negotiator memory. The optimization would be to have <span class=\"wiki\"><a href=\"wiki?p=JobArray\" title=\"Job Array\">JobArray</a></span> GetNextNJobs(Submitter).\n\n</p><p></p><hr/>\n<em>2012-Sep-07 19:23:23 by eje:</em> <br/>\n\nWill there be any issues with needing to lump user names across uid_domain, with respect to <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span>?  For example, would we ever need to consider these two submitters as identical for job-prio purposes, because they're both 'userA' but with two different uit-domains:\n<div class=\"verbatim\">\n<pre>userA@domain1\nuserA@domain2\n</pre></div>\n\n\n<p></p><hr/>\n<em>2012-Sep-07 21:22:34 by sfiligoi:</em> <br/>\n\nI don't think we should; it would change the fair share policy. And we stated above fair share should not be changed.\n\n<p>And definitely not needed for CMS.\n\n</p><p></p><hr/>\n<em>2012-Sep-08 14:11:56 by eje:</em> <br/>\n\nI think Matt's observation about this being essentially a merge-sort with N pre-sorted schedd inputs is a good one.\n\n<p>at any point in the loop over the submitter ads, you have some number K (&lt;= N) ads having jobs for the current submitter name 'user@domain'.  If each ad is supplied with the highest <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> for that (submitter,schedd), then you can insert these all into a heap, (say, using stl priority_queue&lt;&gt;, or some other popular heap option).  Then the loop over the K ads becomes just:\n\n</p><p></p><ol>\n<li>take an ad off the heap (which by construction will be one with highest <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span>)\n</li><li>do the usual negotiation mamba\n</li><li>with each job ad, the schedd sends back its most-recent assessment of what the next-highest <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> is (which could be either &lt;= or possibly &gt; the current value, if there's been new jobs sent to that schedd very recently)\n</li><li>put the submitter ad back into the heap, with the updated <span class=\"wiki\"><a href=\"wiki?p=NextJobPrio\" title=\"Next Job Prio\">NextJobPrio</a></span> val\n</li><li>loop until we hit submitter limit, or no more jobs, etc, as usual\n</li></ol>\n\n<p>Note that this doesn't even require a new command for the schedd, since it can send back <span class=\"wiki\"><a href=\"wiki?p=NextJobPrio\" title=\"Next Job Prio\">NextJobPrio</a></span> on the job ad.\n\n</p><p>I think it's already been mentioned that the <strong>initial</strong> values of <span class=\"wiki\"><a href=\"wiki?p=NextJobPrio\" title=\"Next Job Prio\">NextJobPrio</a></span>, coming from the submitter ads pulled off the collector, will probably have the most potential for being 'out of date', but they will be heuristically reasonable, and any out-of-dateness can be bounded by configured update freqs\n\n</p><p>Another possible variation, if the very-latest <span class=\"wiki\"><a href=\"wiki?p=NextJobPrio\" title=\"Next Job Prio\">NextJobPrio</a></span> values were desired to initialize the heap, would be to grab K job-ads, and use the <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> and <span class=\"wiki\"><a href=\"wiki?p=NextJobPrio\" title=\"Next Job Prio\">NextJobPrio</a></span> vals to prime the loop.  However, whenever K &gt; submitter-limit, this is extra work and it would add up.\n\n</p><p></p><hr/>\n<em>2012-Sep-08 16:05:59 by matt:</em> <br/>\n\nFYI, the Negotiator punishes Schedds for various reasons. One that comes to mind is being slow. The proposed algorithm should also punish Schedds for having a lot of job churn. Record a demerit each time the <span class=\"wiki\"><a href=\"wiki?p=GetNextJob\" title=\"Get Next Job\">GetNextJob</a></span> prio is not the expected prio. After N demerits, skip the Schedd (purge it from the heap, during the pop operation). All demerits need to be wiped at the start of the negotiation cycle.\n\n<p></p><hr/>\n<em>2012-Sep-09 07:41:57 by bbockelm:</em> <br/>\n\neje, mattf -\n\n<p>I really like the idea of pulling K job ads at a time, even if not all are used by the negotiator.  In this particular setup, some of the schedds are on the other side of the Atlantic.  Any sort of bulk operations and avoidance of network round-trips is a plus.\n\n</p><p></p><hr/>\n<em>2012-Sep-10 12:04:23 by tstclair:</em> <br/>\n\nWhatever happens on <strong>this</strong> ticket it is <strong>imperative</strong> that it happen on a topic branch for all to see.  Who will be the <strong>owner</strong> of this ticket?\n\n<p></p><hr/>\n<em>2012-Sep-18 16:25:56 by eje:</em> <br/>\n\nAn issue with the \"duplicating submitter ads\" proposal is scaling.   I think in the use cases under immediate consideration it will not pose a problem, however providing the feature will open the door to customers who may want to apply it with either very large numbers of unique <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> values, or a very large number of submitters, or conceivably both.  In any case, when {JobPrio}X{submitter} is ever large, it could hit the negotiator performance.\n\n<p></p><hr/>\n<em>2012-Sep-19 15:17:08 by tstclair:</em> <br/>\n\nCan we capture how/if this will affect auto-clustering?\n\n<p></p><hr/>\n<em>2012-Sep-21 17:11:21 by tannenba:</em> <br/>\n\n@eje: yes, it can impact negotiation performance, as identified in the design doc.\n\n<p>@tstclair: relationship to autoclusters is covered in v5 of the design doc below. in a nutshell, if the knob is enabled to consider job prios across schedds, the negotiator will add <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> to the list of significant attributes.\n\n</p><p></p><hr/>\n<em>2012-Sep-22 12:27:25 by eje:</em> <br/>\n\nWe'll need to pay some attention to how duplication of idle-job counts on submitter ads interacts with HGQ (at least in the case where surplus sharing is operating), and possible heuristic submitter removal on zero idle jobs.\n\n<p>Duplicating submitter ads may also break assumptions in summation of usages over submitters.  We'll need to sanity check that.  e.g. calculatePieLeft(), calculateNormalizationFactor(), and this loop\n\n</p><p></p><pre>        // cycle through the submitter ads, and load them into the appropriate group node in the tree\n        dprintf(D_ALWAYS, \"group quotas: assigning %d submitters to accounting groups\\n\", int(scheddAds.MyLength()));\n        scheddAds.Open();\n</pre>\n\n<p></p><hr/>\n<em>2012-Oct-12 16:50:44 by tannenba:</em> <br/>\n\n@eje: re the comment directly above, I wouldn't expect it to be a problem, since this code should already handle the situation given that the same user can submit from more than one schedd already. With at least a quick look at <code>calculateNormilationFactor()</code>, it looks like it already does the right thing.\n\n<p></p><hr/>\n<em>2012-Oct-12 16:52:43 by tannenba:</em> <br/>\n\nSomething I encountered during testing: as expected, the schedd will reuse a claim with another job from the same autocluster... however, if there are not more jobs in the same autocluster, since time immortal the schedd will attempt to find any other job (even one from a different autocluster) that is from the same owner and matches the startd ad. Given how CMS runs jobs (claims are really re-used much anyhow), it shouldn't really matter for them.  But thought I would leave this as a remark on this ticket for testing purposes.\n<hr/>\n<em>2012-Dec-11 16:38:39 by johnkn:</em> <br/>\n\nBulk change of target version from v070902 to v070903 using ./ticket-target-mover.\n<hr/>\n<em>2013-Jan-22 10:54:51 by johnkn:</em> <br/>\n\nBulk change of target version from v070903 to v070904 using ./ticket-target-mover.\n<hr/>\n<em>2013-Mar-05 10:58:27 by johnkn:</em> <br/>\n\nBulk change of target version from v070904 to v070905 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2013-Mar-05 18:31:48 by bbockelm:</em> <br/>\n\nIsn't this ticket done?\n<hr/>\n<em>2013-Apr-22 11:10:10 by johnkn:</em> <br/>\n\nBulk change of target version from v070905 to v070906 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2013-Aug-01 23:18:46 by eje:</em> <br/>\n\nIs there a description of how to test this feature, and the expected behavior before/after, that could be attached to this ticket?\n\n<p></p><hr/>\n<em>2013-Aug-02 10:58:11 by tannenba:</em> <br/>\n\n^^^ For testing procedure, see remarks in child tickets (aka <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3255\" onclick=\"get_ticket_and_populate_wrapper('3255'); return false;\" title=\"Implement JobPrioArray and JobPrioArrayOverflow attrs in submitter ad\">#3255</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3257\" onclick=\"get_ticket_and_populate_wrapper('3257'); return false;\" title=\"Implement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator\">#3257</a></span>)</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3255\" onclick=\"get_ticket_and_populate_wrapper('3255'); return false;\" title=\"Implement JobPrioArray and JobPrioArrayOverflow attrs in submitter ad\">#3255</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nImplement <span class=\"wiki\"><a href=\"wiki?p=JobPrioArray\" title=\"Job Prio Array\">JobPrioArray</a></span> and <span class=\"wiki\"><a href=\"wiki?p=JobPrioArrayOverflow\" title=\"Job Prio Array Overflow\">JobPrioArrayOverflow</a></span> attrs in submitter ad</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3256\" onclick=\"get_ticket_and_populate_wrapper('3256'); return false;\" title=\"Implement Negotiator-Schedd protocol extension for global jobprios\">#3256</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nImplement Negotiator-Schedd protocol extension for global jobprios</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3257\" onclick=\"get_ticket_and_populate_wrapper('3257'); return false;\" title=\"Implement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator\">#3257</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nImplement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/631/condor_global_job_prio.patch\">condor_global_job_prio.patch</a>\n10080 bytes added by bbockelm on 2012-Sep-05 17:35:49 UTC.\n</li><li><a href=\"../files/636/GlobalJobPrioV5.doc\">GlobalJobPrioV5.doc</a>\n47616 bytes added by tannenba on 2012-Sep-21 22:05:51 UTC.\n<br/>\ndesign document to support job prio across multiple schedds, version 5<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-19 11:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/2660bfaf08ef9abdf7a17d91715829271064316f\">[33707]</a></span>: Change consolidate_globaljobprio_submitter_ads to have fewer assumptions about its inputs, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3257\" onclick=\"get_ticket_and_populate_wrapper('3257'); return false;\" title=\"Implement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator\">#3257</a></span> Part of the USE_GLOBAL_JOB_PRIOS code. compiler warnings led us to take another look at this function, and it made many assumptions about the order of submitter ads in its input stream. these assumptions\u00a0[...]\n (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-17 17:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6eb0cbddad76afd2a6d575ad2143e756e8c573ca\">[33694]</a></span>: Do not automatically add <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> to significant attributes with global jobprios. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3257\" onclick=\"get_ticket_and_populate_wrapper('3257'); return false;\" title=\"Implement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator\">#3257</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3218\" onclick=\"get_ticket_and_populate_wrapper('3218'); return false;\" title=\"Support JobPrio scope across multiple schedulers\">#3218</a></span> Upon more reflection, adding <span class=\"wiki\"><a href=\"wiki?p=JobPrio\" title=\"Job Prio\">JobPrio</a></span> to the significant attributes here just increases negotiation time, even with USE_GLOBAL_JOB_PRIOS.  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-15 13:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/c2cad6efc77fdee488911ead8ada423d1b19c7d2\">[33672]</a></span>: Fix compiler warnings re unused variable. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3257\" onclick=\"get_ticket_and_populate_wrapper('3257'); return false;\" title=\"Implement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator\">#3257</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3218\" onclick=\"get_ticket_and_populate_wrapper('3218'); return false;\" title=\"Support JobPrio scope across multiple schedulers\">#3218</a></span>  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-15 12:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/1469aeed17dc01fbe34ce5dab77bd8f5a4870ef5\">[33671]</a></span>: Implement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3257\" onclick=\"get_ticket_and_populate_wrapper('3257'); return false;\" title=\"Implement USE_GLOBAL_JOB_PRIOS mechanism in the negotiator\">#3257</a></span> Negotiation protocol extended so negotiator can request only jobs from user X with job priorities between Y and Z based on job priority array attribute visible in the submitter ad; wire compatibility is ensured by just adding new attributes\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-08 14:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/7daac78c4c8ee9e8aff07e5ed7521243ecc2a5ae\">[33602]</a></span>: Enhance schedd to support negotiation protocol extention for global jobprios. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3256\" onclick=\"get_ticket_and_populate_wrapper('3256'); return false;\" title=\"Implement Negotiator-Schedd protocol extension for global jobprios\">#3256</a></span> Negotiation protocol extended so negotiator can request only jobs from user X with job priorities between Y and Z; wire compatibility is ensured by just adding new attributes in the classad exchanged between schedd and\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Oct-08 14:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/0d185d37012e2c84c65b55a8abffd3a0cd1294f3\">[33601]</a></span>: Add <span class=\"wiki\"><a href=\"wiki?p=JobPrioArray\" title=\"Job Prio Array\">JobPrioArray</a></span> and <span class=\"wiki\"><a href=\"wiki?p=JobPrioArrayOverflow\" title=\"Job Prio Array Overflow\">JobPrioArrayOverflow</a></span> attrs to submitter ad. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3255\" onclick=\"get_ticket_and_populate_wrapper('3255'); return false;\" title=\"Implement JobPrioArray and JobPrioArrayOverflow attrs in submitter ad\">#3255</a></span> These attributes are used by the negotiator to honor job priories across multiple schedds. This commit also introduces a consolidated method to create a submitter ad, removing code clones. Parent ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3218\" onclick=\"get_ticket_and_populate_wrapper('3218'); return false;\" title=\"Support JobPrio scope across multiple schedulers\">#3218</a></span>  (By Todd Tannenbaum )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2013-Aug-02 10:58", "status": "resolved", "created": "2012-Sep-05 11:38", "fixed_version": "2012-Sep-05 11:38", "broken_version": "v070900", "priority": "2", "subsystem": "Daemons", "assigned_to": "tannenba", "derived_from": "", "creator": "eje", "rust": "s3218", "customer_group": "cms", "visibility": "public", "notify": "eje@cs.wisc.edu, tstclair@redhat.com, matt@cs.wisc.edu, dan@hep.wisc.edu, bbockelm@cse.unl.edu, sfiligoi@fnal.gov, tannenba@cs.wisc.edu, gthain@cs.wisc.edu", "due_date": ""}