{"id": 6468, "title": "Ticket #6468: Memory handling issues in python bindings when using projections", "description": "<blockquote>\nThis ticket cleans up memory management bugs in the Python bindings with respect to STL vectors.  These bugs result in ASSERTS being thrown by the standard C library on Windows when using query functions with projections, and I suppose could result in the memory of the Python process being trashed.\n\n<p>The problem was in several places in the Python binding implementation, the following idiom was used:\n</p><div class=\"code\">\n<pre class=\"code\">  std::vector&lt;xxx&gt; array;\n  array.reserve(max);\n  for (x=0; x&lt;max; x++) {\n     array[x] = ....\n  }\n</pre></div>\n\nIn the above code, the <code>reserve()</code> method was used instead of the <code>resize()</code> method.  This is a problem because <code>reserve()</code> alone is not sufficient to start referencing vectors by index, as no vector entries were actually created.\n\n<p>Turns out the patch to fix these incidents does not bother with calling <code>resize()</code>, because in most cases the use of an STL vector wasn't required and thus the errant code was simply removed.  In other cases, <code>push_back()</code> was used.</p></blockquote>", "remarks": "<blockquote>\n<em>2017-Oct-31 14:31:23 by tannenba:</em> <br/>\n\nGood news:\n\n<p>On my Linux test VM (Scientific Linux 6.9, Python 2.6.6), I ran the regression test for the htcondor package at <a class=\"file\" href=\"rlog?f=src/python-bindings/tests/htcondor_tests.py\">/src/python-bindings/tests/htcondor_tests.py</a> and the patches in this ticket did not change the results.\n\n</p><p>Bad news:\n\n</p><p>6 of the 23 tests had problems even before these patches.  Oddly this is different than the results Carl reported in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6326\" onclick=\"get_ticket_and_populate_wrapper('6326'); return false;\" title=\"Python bindings core dump when used with Python 3\">#6326</a></span>.  Looks like there is a 'fix python regression test failures' ticket in my future.\n\n</p><p></p><div class=\"verbatim\">\n<pre>======================================================================\nERROR: testDrain (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 604, in testDrain\n    drain_id = startd.drainJobs(htcondor.DrainTypes.Fast)\nRuntimeError: Startd failed to begin draining jobs.\n\n======================================================================\nERROR: testNegotiate (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 386, in testNegotiate\n    session.sendClaim(claim['ClaimId'], claim, request)\nTypeError: No registered converter was able to produce a C++ rvalue of type std::string from this Python object of type ExprTree\n\n======================================================================\nERROR: testRemoteLocate (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 231, in testRemoteLocate\n    remote_ad = self.waitRemoteDaemon(htcondor.DaemonTypes.Collector, \"%s@%s\" % (htcondor.param[\"COLLECTOR_NAME\"], htcondor.param[\"CONDOR_HOST\"]))\n  File \"tests/htcondor_tests.py\", line 169, in waitRemoteDaemon\n    return coll.locate(dtype, dname)\nValueError: Unable to find daemon.\n\n======================================================================\nERROR: testScheddLocate (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 240, in testScheddLocate\n    schedd_ad = self.waitRemoteDaemon(htcondor.DaemonTypes.Schedd, name, timeout=10)\n  File \"tests/htcondor_tests.py\", line 169, in waitRemoteDaemon\n    return coll.locate(dtype, dname)\nValueError: Unable to find daemon.\n\n======================================================================\nFAIL: testEventLog (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 648, in testEventLog\n    self.assertEqual(val, b[key])\nAssertionError: '2017-11-15T16:05:55' != '2017-11-15T17:05:55'\n\n======================================================================\nFAIL: testTransaction (__main__.TestPythonBindings)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/htcondor_tests.py\", line 717, in testTransaction\n    self.assertEqual(len(ads), 0)\nAssertionError: 1 != 0\n\n----------------------------------------------------------------------\nRan 23 tests in 296.531s\n\nFAILED (failures=2, errors=4)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Oct-31 16:46:24 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>These code changes look good.\n\n</p><p>The version history entry has a doubled 'could'.\n\n</p><p></p><hr/>\n<em>2017-Nov-02 09:12:00 by johnkn:</em> <br/>\n\n<strong>code review</strong> changes look good.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Oct-31 13:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52733\">[52733]</a></span>: Version history blurb for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6468\" onclick=\"get_ticket_and_populate_wrapper('6468'); return false;\" title=\"Memory handling issues in python bindings when using projections\">#6468</a></span>  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Oct-30 17:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52732\">[52732]</a></span>: Remove unneeded STL vector. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6468\" onclick=\"get_ticket_and_populate_wrapper('6468'); return false;\" title=\"Memory handling issues in python bindings when using projections\">#6468</a></span> Removed a hunk of code that only exists in case <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StringList\" title=\"String List\">StringList</a></span> does not make internal copies of entries. But it turns out <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=StringList\" title=\"String List\">StringList</a></span> DOES make copies.  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Oct-30 17:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52731\">[52731]</a></span>: Fix faulty use of STL vector in python binding that could trash memory. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6468\" onclick=\"get_ticket_and_populate_wrapper('6468'); return false;\" title=\"Memory handling issues in python bindings when using projections\">#6468</a></span> Errant use of vector (referencing an entry by index before it was created - the reserve() method does NOT act like resize) fixed by ussing push_back() instead.  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Oct-30 17:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52730\">[52730]</a></span>: Remove faulty use of uneeded STL vector that could trash memory. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6468\" onclick=\"get_ticket_and_populate_wrapper('6468'); return false;\" title=\"Memory handling issues in python bindings when using projections\">#6468</a></span> Errant use of vector (referencing an entry by index before it was created - the reserve() method does NOT act like resize) fixed by simply removing the vector entirely - it was not needed. Note that calling reserve() is not the same\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2017-Dec-18 13:21", "status": "resolved", "created": "2017-Oct-30 17:06", "fixed_version": "2017-Oct-30 17:06", "broken_version": "v080600", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "tannenba", "derived_from": "", "creator": "tannenba", "rust": "", "customer_group": "other", "visibility": "public", "notify": "jfrey@cs.wisc.edu bbockelm@cse.unl.edu tannenba@cs.wisc.edu", "due_date": ""}