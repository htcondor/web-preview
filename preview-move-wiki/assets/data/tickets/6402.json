{"id": 6402, "title": "Ticket #6402: condor_chirp coredumps when fetching a nonexistent file", "description": "<blockquote>\nMichael Pelletier reports that 8.6.5's condor_chirp core dumps when fetching a nonexistent file.\n\n<p>This is not, technically, a bug - the chirp C API is working as designed. But it doesn't seem very useful. So we will be changing the condor_chirp tool so that it doesn't dump core when the chirp API aborts.</p></blockquote>", "remarks": "<blockquote>\n<em>2017-Sep-12 10:41:34 by mvpelletier:</em> <br/>\n\nIt appears that this only core dumps when a destination file argument is given, as either a hyphen or a filename.\n\n<p></p><hr/>\n<em>2017-Sep-14 11:25:53 by mvpelletier:</em> <br/>\n\nFurther experimentation has identified a few other quirky behaviors which may be related to the root cause of the core dump.\n\n<p></p><div class=\"verbatim\">\n<pre>host_name --long &gt; toput\ncat toput\nhost_name.us.ray.com\n\ncondor_chirp put toput wasput\n\nwhoami | condor_chirp put - wasput\n\ncat wasput\n\npelletm\ne.us.ray.com\n</pre></div>\n\n\n<p>This behavior makes sense when dealing with data files, so you can put a field into a specific spot in the remote file, but it's not clear in the documentation that this:\n\n</p><p></p><pre>   cat file | condor_chirp put - file\n</pre>\n\n<p>... is not equivalent to this:\n\n</p><p></p><pre>   condor_chirp put file file\n</pre>\n\n<p>I thought I'd save myself some hassle by avoiding creation of a scratch file, and that's mainly when it started biting me. The core dump may have been occurring in some cases because I was treating it as if they were equivalent.\n\n</p><p></p><hr/>\n<em>2017-Nov-09 14:26:56 by johnkn:</em> <br/>\n\nThis is by design.  the chirp c API aborts whenever it cannot perform the requested action.\n\n<p></p><div class=\"code\">\n<pre class=\"code\">...\nresult = simple_command(c,\"getfile %s\\n\",path);\nif(result&gt;=0) {\n  // successful getfile\n  ...\n} else {\n  chirp_fatal_request(\"getfile\");\n}\n...\n// where chirp_fatal_request is\nvoid chirp_fatal_request( const char *name )\n{\n  fprintf(stderr,\"chirp: couldn't %s: %s\\n\",name,strerror(errno));\n  abort();\n}\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Dec-11 14:54:18 by tlmiller:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>Looks good.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Dec-12 16:55</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52988\">[52988]</a></span>: version history for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6402\" onclick=\"get_ticket_and_populate_wrapper('6402'); return false;\" title=\"condor_chirp coredumps when fetching a nonexistent file\">#6402</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Nov-10 10:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=52778\">[52778]</a></span>: for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6402\" onclick=\"get_ticket_and_populate_wrapper('6402'); return false;\" title=\"condor_chirp coredumps when fetching a nonexistent file\">#6402</a></span>, change condor_chirp so that it does not dump core when the chirp API aborts, which it does whenever it cannot do the requested command. ===VersionHistory:Pending===  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2017-Dec-18 13:20", "status": "resolved", "created": "2017-Sep-12 10:21", "fixed_version": "2017-Sep-12 10:21", "broken_version": "v080605", "priority": "2", "subsystem": "Tools", "assigned_to": "johnkn", "derived_from": "", "creator": "tlmiller", "rust": "s85338", "customer_group": "other", "visibility": "public", "notify": "Michael.V.Pelletier@raytheon.com", "due_date": ""}