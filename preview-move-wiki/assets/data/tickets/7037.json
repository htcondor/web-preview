{"id": 7037, "title": "Ticket #7037: formalize python wheel building process", "description": "<blockquote>\nPyPA has upgraded their Docker image to support building of \"manylinux2010\" wheels in addition to the \"manylinux1\" wheels that we have already been building. The difference is that 2010 flavor is based on CentOS 6 instead of CentOS 5. Given the many patches we already have to use to get condor building in CentOS 5 containers, this is a welcome upgrade.\n\n<p>We should continue to build the manylinux1 wheels, though, as older versions of `pip` may not recognize the new manylinux2010 tag. I imagine most `pip` users are using a non-system Python install (e.g. Anaconda), though, so this may not be a long, ongoing issue.\n\n</p><p><a class=\"external\" href=\"https://github.com/pypa/manylinux\">https://github.com/pypa/manylinux</a>\n\n</p><p>(This also presents an opportune time to upstream the wheel building/release process to the release manager.)</p></blockquote>", "remarks": "<blockquote>\n<em>2019-May-08 12:48:17 by bbockelm:</em> <br/>\n\nHi Jason,\n\n<p>Can you at least write down the current process?\n\n</p><p>I wouldn't mind putting the existing manylinux into the Travis-CI builds.\n\n</p><p></p><hr/>\n<em>2020-Jan-13 13:23:49 by jpatton:</em> <br/>\n\nGoing to use this ticket to track progress towards offloading wheel builds to the package manager. The goal is to be able to do proper builds of the bindings (i.e. externals are part of the Docker image instead of part of the build), bundling the latest external libraries that can be done \"easily.\" By easily, I mean don't build every single dependency that each external depends on from scratch (you're only allowed to do this to a point, anyway, following the manylinux standards), but just build externals that don't have deep, intertwined dependencies, and get everything else out of the RHEL/EPEL repositories. We'll rely on the Python folks continuing to update the manylinux standard (now up to manylinux2014, i.e. CentOS 7) and building the bindings on updated manylinux-es for users that are needing updated externals that are difficult to build and bundle cleanly (this includes, notably, kerberos and keyutils).\n\n<p>Here are the steps to bring each flavor of manylinux docker image up to snuff for building and packaging the bindings:\n\n</p><p></p><ol>\n<li>Determine which externals to build by hand (put in <code>/usr/local</code>) versus install from a repository.\n</li><li>Determine which optional binaries (put in <code>/opt</code> temporarily) are needed to build the by-hand-externals (may only apply to manylinux1 [i.e. CentOS 5] which needs updated perl and pkg-config).\n</li><li>Make <code>CMakeLists.txt</code> and <code>ifdef</code> changes as needed to enable builds on older versions of CentOS (also may only apply to manylinux1... if we're lucky).\n</li><li>Write a Dockerfile branching off the specific manylinux version that <code>yum</code> installs the by-repo-externals and then copies and runs a build script that installs the by-hand-externals.\n</li><li>Update the build script as needed.\n</li><li>Update the auditwheel patch (for handling <code>classad.so</code> correctly) and also including the patching step in the Dockerfile.\n</li></ol>\n\n<p>That last step is trickier than its description, and warrants some further discussion since auditwheel is sometimes updated.\n\n</p><p></p><hr/>\n<em>2020-Jan-13 13:28:23 by jpatton:</em> <br/>\n\nFor manylinux1, these are the externals built by hand:\n\n<p></p><ul>\n<li>PCRE\n</li><li>OpenSSL (requires newer Perl than available from CentOS 5 repo)\n</li><li>VOMS\n</li><li>GCT (requires newer pkg-config than available from CentOS 5 repo)\n</li><li>MUNGE\n</li><li>Boost.Python (for each version of Python in the Docker image)\n</li></ul>\n\n<p>Building Boost.Python this way requires some more CMakeList changes since the libraries are named e.g. <code>boost_python36</code> for Python 3.6, <code>boost_python27</code> for Python 2.7, and so on.\n\n</p><p>Users of the manylinux1 wheels will have to deal with older kerberos and keyutils, which was a complaint on htcondor-users. This will be addressed by (hopefully) manylinux2010 and (absolutely) manylinux2014. Installing wheels using these updated standards require newer versions of pip, which may only exist in the Python 3.5+ world.\n\n</p><p></p><hr/>\n<em>2020-Feb-25 16:48:11 by jpatton:</em> <br/>\n\nMoving the manylinux2010 (and 2014) part to a new ticket, but patches have been merged, the process formalized over at <a class=\"external\" href=\"https://github.com/htcondor/htcondor_manylinux_docker\">https://github.com/htcondor/htcondor_manylinux_docker</a> , and release management handed to TimT.\n<hr/>\n<em>2020-Apr-10 07:46:13 by tim:</em> <br/>\n\nBulk change of target version from v080906 to v080907 using ticket-target-mover.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Feb-20 11:07</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58988\">[58988]</a></span>: tcp_info objs are missing attrs in older glibc <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7037\" onclick=\"get_ticket_and_populate_wrapper('7037'); return false;\" title=\"formalize python wheel building process\">#7037</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Feb-20 10:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58987\">[58987]</a></span>: Better ifdef-ing of MS_PRIVATE <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7037\" onclick=\"get_ticket_and_populate_wrapper('7037'); return false;\" title=\"formalize python wheel building process\">#7037</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Feb-20 10:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58986\">[58986]</a></span>: MS_PRIVATE must be available to do private /dev/shm mounts <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7037\" onclick=\"get_ticket_and_populate_wrapper('7037'); return false;\" title=\"formalize python wheel building process\">#7037</a></span>  (By Jason Patton )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Feb-20 10:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=58984\">[58984]</a></span>: Boost.Python is now Python-version specific when building wheels <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7037\" onclick=\"get_ticket_and_populate_wrapper('7037'); return false;\" title=\"formalize python wheel building process\">#7037</a></span>  (By Jason Patton )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-May-04 09:47", "status": "resolved", "created": "2019-May-07 13:45", "fixed_version": "2019-May-07 13:45", "broken_version": "", "priority": "2", "subsystem": "PythonBinding", "assigned_to": "jpatton", "derived_from": "", "creator": "jpatton", "rust": "", "customer_group": "other", "visibility": "public", "notify": "jpatton@cs.wisc.edu,bbockelman@morgridge.org,karpel@wisc.edu,tim@cs.wisc.edu", "due_date": ""}