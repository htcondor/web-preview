{"id": 6811, "title": "Ticket #6811: openmpiscript does not support multi-program, multi-data style launch", "description": "<blockquote>\n<a class=\"external\" href=\"https://lists.cs.wisc.edu/archive/htcondor-users/2018-October/msg00135.shtml\">A user on htcondor-users</a> requests support for <a class=\"external\" href=\"https://www.open-mpi.org/faq/?category=running#mpmd-run\">launching a multiple program, multiple data (MPMD) mpi job</a>. For example, a submit file could look like:\n\n<p></p><div class=\"verbatim\">\n<pre>universe = parallel\n\nexecutable = openmpiscript\narguments = a.out first\nmachine_count = 1\n\nqueue\n\nexecutable = openmpiscript\narguments = b.out second\nmachine_count = 1\n\nqueue\n</pre></div>\n\n\n<p>As it's currently written, <code>openmpiscript</code> will not handle this as expected and will only pass the first set of executable and arguments to <code>mpirun</code>.\n\n</p><p>Implementing MPMD will require each node to chirp put its set of arguments to <code>mpirun</code> to the shared spool directory for the head node to chirp fetch and pass to <code>mpirun</code> (see the <code>my_appfile</code> example in the Open MPI FAQ).</p></blockquote>", "remarks": "<blockquote>\n<em>2018-Oct-30 15:33:16 by jpatton:</em> <br/>\n\n<strong>WORKAROUND:</strong> Submit a job with a wrapper script as the MPI application:\n\n<p></p><div class=\"verbatim\">\n<pre>#!/bin/sh\n# mpi_wrapper.sh\n\n# use whatever logic to decide which application gets which arguments\nif [ \"$_CONDOR_PROCNO\" -lt 1 ]; then\n    exec ./a.out first\nelse\n    exec ./b.out second\nfi\n</pre></div>\n\n\n<p>And submit it as:\n\n</p><p></p><div class=\"verbatim\">\n<pre>universe = parallel\nexecutable = openmpiscript\narguments = mpi_wrapper.sh\ntransfer_input_files = mpi_wrapper.sh, a.out\nmachine_count = 1\nqueue\n\ntransfer_input_files = mpi_wrapper.sh, b.out\nmachine_count = 1\nqueue\n</pre></div>\n\n\n<p></p><hr/>\n<em>2018-Oct-30 15:40:05 by jpatton:</em> <br/>\n\nFuture design thought from Greg:\n\n<p>Allow users to put <code>:</code> in their arguments list, and then parse <code>Args</code> into a command line that <code>mpirun</code> understands (i.e. stick <code>-np X</code> in front of each set of arguments)? (Still need to know the correct values for <code>X</code>... still need chirp?)</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2019-May-13 17:03", "status": "defer", "created": "2018-Oct-30 08:40", "fixed_version": "2018-Oct-30 08:40", "broken_version": "", "priority": "5", "subsystem": "Parallel", "assigned_to": "jpatton", "derived_from": "", "creator": "jpatton", "rust": "", "customer_group": "users", "visibility": "public", "notify": "jpatton@cs.wisc.edu,gthain@cs.wisc.edu", "due_date": ""}