{"id": 7211, "title": "Ticket #7211: Everything is Terrible, condor_now edition", "description": "<blockquote>\nJaime just fixed <span class=\"chng\"><a href=\"chngview?cn=57671\">[57671]</a></span> a bug introduced in the <code>condor_now</code> support, where after a restart, the schedd generates match records which do not have (and never gain) a machine ad.  We need to check if other parts of the <code>condor_now</code> support code use the machine ad for anything, and if so, how they handle it being missing.\n\n<p></p><ul>\n<li>First priority is to make sure the schedd doesn't crash in those cases.\n</li><li>Second priority is making sure that the <code>condor_now</code> support code (mostly in\n    the <code>pccc*</code> code) doesn't leak in those cases.  (I should also verify that\n    there's garbage collection more generally, since I just don't remember.)\n    It may be best/easiest to accomplish this by checking the match record for\n    a machine ad as part of checking a job ID for suitability, and rejecting\n    rather than trying to deal with it.\n</li><li>It would be nice, if the <code>condor_now</code> support code <em>does</em> use the machine\n    ad for something, to change it so it doesn't require it; TJ may have ideas.\n    A substantial fraction of the pool might be inaccessible otherwise.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2019-Aug-21 15:43:26 by tlmiller:</em> <br/>\n\nThe <code>condor_now</code> support code does not appear to use <code>my_match_ad</code> anywhere except for when trying to return the list of match records marked with now jobs.\n\n<p>Four files in <code>schedd.V6/</code> reference <code>my_match_ad</code>:\n</p><ul>\n<li><code>dedicated_scheduler.cpp</code> -- did not examine\n</li><li><code>qmgmt.cpp</code> -- only one instance of the text was to the match record member, and it was used safely.\n</li><li><code>scheduler.h</code> -- declaration\n</li><li><code>schedd.cpp</code> -- found a few place where <code>my_match_ad</code> was assumed to be non-NULL.\n</li></ul>\n\n<p></p><hr/>\n<em>2019-Aug-21 16:29:52 by tlmiller:</em> <br/>\n\nJaime is more familiar with this part of the schedd than I am, so he'll take a look at the places I identified and see if any checks are actually necessary (and if so, what they should do on a failure).\n\n<p></p><hr/>\n<em>2019-Aug-22 10:43:10 by jfrey:</em> <br/>\n\nWith the code as written now, I don't see a danger of dereferencing a NULL my_match_ad pointer.\n\n<p></p><ul>\n<li>Once a match_rec has a non-NULL my_match_ad, the value is never set to NULL.\n</li><li>The callers of contactStartd() and claimedStartd() also set a non-NULL my_match_ad.\n</li><li>For swappedClaims() and CheckForClaimSwap(), the m_can_start_jobs value in match_rec guards against using a NULL my_match_ad.\n</li><li>When making reconnect records after a restart, the dedicated scheduler queries the collector to get the slot ads for its match_rec objects.\n</li></ul>\n\n<p></p><hr/>\n<em>2019-Aug-27 12:05:52 by tlmiller:</em> <br/>\n\nI think that means we can resolve this ticket, then.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/1030/my_match_ad.diff\">my_match_ad.diff</a>\n2999 bytes added by tlmiller on 2019-Aug-21 20:45:24 UTC.\n<br/>\nPatch inserting <code>ASSERT()=s where we use =my_match_ad</code> unguardedly.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "", "type": "defect", "last_change": "2019-Oct-03 14:26", "status": "abandoned", "created": "2019-Aug-15 14:37", "fixed_version": "2019-Aug-15 14:37", "broken_version": "v080900", "priority": "2", "subsystem": "DaemonsSubmitNode", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, jfrey@cs.wisc.edu", "due_date": ""}