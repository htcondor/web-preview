{"id": 2745, "title": "Ticket #2745: Better handling of output files that have unreadable permissions", "description": "<blockquote>\nIf Condor encounters a file whose permissions block reading while transfering output back to the submit point, the job will be put on hold.  The normal error message is:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">012 (034.000.000) 01/04 12:25:51 Job was held.\n    Error from dot.cs.wisc.edu: STARTER at 128.105.165.118 failed to send file(s) to &lt;128.105.185.14:59241&gt;: error reading from /scratch/condor/execute/dir_20718/eraseme.badpermfile: (errno 13) Permission denied; SHADOW failed to receive file(s) from &lt;128.105.165.118:40408&gt;\n    Code 13 Subcode 13\n</pre></div>\n\n\n<p>although if you have privlege seperation on, the error message is:\n</p><div class=\"code\">\n<pre class=\"code\">012 (68230.000.000) 01/04 11:26:46 Job was held.\n        Error from slot4@e019.chtc.wisc.edu: error changing sandbox ownership to condor\n        Code 31 Subcode 0\n</pre></div>\n\n\n<p></p><ol>\n<li><strong>Transfer unreadable files:</strong> If the problem is just permissions, Condor is perfectly able to chmod() them to readability, then transfer them.  This will eliminate a cause of problems for users and potential wasted work.\n\n<p></p></li><li><strong>Unify behavior:</strong> The behavior when privlege seperation is on should be identical to the behavior when it is off.  The privlege seperation error at the moment is less useful.\n\n<p></p></li><li><strong>Restore unreadability:</strong> Optionally, when the files are copied to the submit machine, restore the exact permissions the file used to have.  This ensures that the output files are as similar as possible to those on the execute node.  It also will clue the user in that their job is setting suspicious permissions.\n</li></ol>\n\n<p>Why might it bad to retrieve a file marked as unreadable? What problems might we create.  Brainstorming:\n\n</p><p></p><ul>\n<li>Perhaps the user doesn't want the file to be retrieved.  If so, this is clumsy solution, and ineffective at the moment as the job fails and is held.  The correct solution is unlinking the file.  What is the file is export controlled and needs to never be retrieved?  Are there good reasons to mark is as unreadable temporarily to block it's retrieval?  Seems like a poor solution.\n</li><li>How might an attacker take advantage of this? I can't imagine any circumstances in which an attacker might insert an unreadable file that he couldn't just insert a readable file to the same result.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2012-May-16 16:33:31 by adesmet:</em> <br/>\n\nAn additional thought: this can bite jobs doing self-checkpointing. The implicit promise is that when a self-checkpointing job  (when_to_transfer_output=on_exit_or_evict) restarts after being evicted, the files in the current working directory should be identical to the what was there when the job was evicted.  If you had an unreadable file when you were evicted, that unreadable file should be there when you restart.\n\n<p>Admittedly, a valid use of this is unlikely,  but I find it entirely plausible that a job might erroneously create unreadable files and instead of fixing the cause might just fix the permissions when needed.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2012-May-16 16:33", "status": "new", "created": "2012-Jan-05 14:59", "fixed_version": "2012-Jan-05 14:59", "broken_version": "v070600", "priority": "4", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}