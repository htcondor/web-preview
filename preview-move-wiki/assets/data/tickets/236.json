{"id": 236, "title": "Ticket #236: Submit Requirements Expression Feature for Condor", "description": "<blockquote>\n<span class=\"section\"><h2>Submit Requirements Expression</h2></span>\n\n<p>This is a development proposal.\n\n</p><p>As a Condor administrator, I'd like to control the kinds of jobs that are <strong>submitted</strong> into my pool. I'd like to ensure things like:\n</p><ul>\n<li>In my pool, each job ad has attributes added with the + option, so I'd like to check they are there and contain valid values.\n</li><li>The schedd can reject jobs based upon its internal state, such as not accepting a job if the spool directory doesn't have enough space to hold it.\n</li><li>I'll accept submitted jobs from user X, but only if they are in one of three Accounting Groups.\n</li><li>I have a schedd specifically for cron jobs. I would like the schedd to only accept scheduler universe jobs that have these N attributes defined with valid values.\n</li></ul>\n\n<p><span class=\"subsection\"></span></p><h3>Two possible implementations</h3>\n<ol>\n<li><strong>Requirements Expression in the Schedd</strong> <br/>\n\nIn this implementation, there is a new condor configuration attribute called <code>SubmitRequirements</code> which lives in the <code>condor_config</code> file. The schedd reads this expression, and evaluates it in terms of the schedd and and a submitting ad, and if true, accepts the job it its queue. If false, we could evaluate another expression called <code>SubmitFailExpression</code>, also detailed in the <code>condor_config</code> file, which returns a state the job should go to: HOLD, IDLE, or REJECT, in which case the job is rejected as if the submit had failed (cluster id consumed, etc, etc, etc).\n</li><li><strong>Symmetric Match of Schedd Ad and Job Ad</strong> <br/>\n\nIn this implementation, the schedd contains a <em>matchmaker</em> which takes the schedd ad, which has in it a <code>Requirements</code> expression and the submitting job ad, which also has a <code>Requirements</code> expression. It tries to match them together and if both <code>Requirements</code> expression return true, the job is allowed to be submitted. In this model, there are two more details of implementation:\n<ol>\n<li>Job ad uses <strong>one</strong> Requirements expression which must be able to tell the difference between types of ads it is being evaluated against.\n</li><li>Job ad has different requirements expression for matching to schedd as opposed to a startd.\n</li></ol>\n\n<p></p></li></ol>\n<ul>\nIf the match fails, we could still use the <code>SubmitFailExpression</code> to determine what to do with the job.\n</ul>\n\n<p><span class=\"subsection\"></span></p><h3>Commentary </h3>\n\n<p></p><ul>\n<li>How is this related to gang-matching?\nIn gang matching, a set of ads has to simultaneously resolve with themselves for all of them to be joined. In this model, there is always an implicit order of matching, and being accepted by, one or more submit points in a chain, and then matching to a slot. This ordering may imply a relaxation so we don't need to implement gang matching.\n</li><li>A schedd accepting submitting jobs has a strong analog to a startd accepting jobs and probably much more can be done with this proposal than the simple things described here.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2009-Feb-23 15:10:41 by tannenba:</em> <br/>\n\nThis sounds like some work I started long ago (and never finished) named <em>Restricted Attributes</em>. The idea was for the administrator to be able to place restrictions on the values of job attributes.\n\n<p>Some examples of what could be placed in the condor_config file to make use of Restricted Attributes:\n</p><div class=\"verbatim\">\n<pre>   RESTRICT_ATTRS = Universe != 5  &amp;&amp; UidDomain == \"cs.wisc.edu\"\n   RESTRICT_ATTRS_BY_OWNER_STOLLEY = group =?= \"compsci\"\n   RESTRICT_ATTRS_BY_GROUP_COMPSCI = clusternode == false\n</pre></div>\n\n\n<p>I even have some code to implement this crap...\n\n</p><p>One interesting note about my implementation:  it was done as a \"check restrictions\" class in the C++ util lib.  Just pass it a job classad, and it comes back with thumbs up or thumbs down, and if the latter, what it didn't like.  Then the check was called in three places:\n</p><ol>\n<li>condor_submit to give users an early error message\n</li><li>condor_schedd to enforce jobs coming from SOAP, custom condor_submits, etc\n</li><li>condor_negotiator, for job ads coming from flockers etc.\n</li></ol>\n\n<p></p><hr/>\n<em>2009-Feb-23 15:58:35 by gthain:</em> <br/>\n\nWhat happens when the negotiator rejects the job?  Does the schedd keep sending it back?  And does this mean that the autocluster code needs to know about which attributes are restricted?\n\n<p></p><hr/>\n<em>2018-Mar-28 14:56:19 by jfrey:</em> <br/>\n\nThe functionality described here is is now mostly implemented via SUBMIT_REQUIREMENTS (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2640\" onclick=\"get_ticket_and_populate_wrapper('2640'); return false;\" title=\"SUBMIT_REQUIREMENTS: reject condor_submit if fails\">#2640</a></span>) and JOB_TRANSFORMS (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5885\" onclick=\"get_ticket_and_populate_wrapper('5885'); return false;\" title=\"enable the schedd to perform job classad transforms upon submission\">#5885</a></span>). Abandoning this ticket.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2018-Mar-28 14:56", "status": "abandoned", "created": "2009-Feb-23 11:15", "fixed_version": "2009-Feb-23 11:15", "broken_version": "", "priority": "4", "subsystem": "Unknown", "assigned_to": "", "derived_from": "", "creator": "psilord", "rust": "", "customer_group": "other", "visibility": "public", "notify": "psilord@cs.wisc.edu", "due_date": ""}