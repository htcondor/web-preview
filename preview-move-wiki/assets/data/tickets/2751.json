{"id": 2751, "title": "Ticket #2751: procd communication protocol is not 32/64-bit safe", "description": "<blockquote>\nThe condor_procd speaks a binary protocol over a named socket.  The communication messages used are simply the in-memory data formats dumped to the socket.  Something like:\n\n<p>write(fd, &amp;foo, sizeof(foo));\n\n</p><p>Unfortunately, the size of the data structures differs between 32- and 64-bit; for example, struct <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcFamilyUsage\" title=\"Proc Family Usage\">ProcFamilyUsage</a></span> is 40 bytes on 32-bit and 72-bytes on 64-bit.  This means that, best case, mixing binaries will cause errors.  Worst case, mixing binaries will cause garbled messages to be passed back and forth.\n\n</p><p>Assigning to Todd so he can make the call as to whether this is a bug or a feature.</p></blockquote>", "remarks": "<blockquote>\n<em>2012-Jan-09 12:49:30 by tannenba:</em> <br/>\n\nThanks for reporting this.\n\n<p>While not ideal, we currently claim that all binaries running <em>on the same machine</em> must have the same version and platform string.  E.g. mix and matching binaries w/ different versions or platform strings is allowed within a pool, but not upon one machine.\n\n</p><p>Given the above, while it would be nice to fix this problem, I think it would be better to expend effort elsewhere.  Thus marking this ticket as abandoned.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "todo", "last_change": "2012-Jan-09 12:49", "status": "abandoned", "created": "2012-Jan-09 08:56", "fixed_version": "2012-Jan-09 08:56", "broken_version": "", "priority": "4", "subsystem": "Daemons", "assigned_to": "tannenba", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}