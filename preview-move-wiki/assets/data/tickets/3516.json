{"id": 3516, "title": "Ticket #3516: ProcLog on MacOSX shows error on startup.", "description": "<blockquote>\nBaTLab MacOSX machine exec-22 shows this error in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcLog\" title=\"Proc Log\">ProcLog</a></span> upon startup:\n<div class=\"code\">\n<pre class=\"code\">02/25/13 12:15:25 : ***********************************\n02/25/13 12:15:25 : * condor_procd STARTING UP\n02/25/13 12:15:25 : * PID = 21206\n02/25/13 12:15:25 : * UID = 0\n02/25/13 12:15:25 : * GID = 0\n02/25/13 12:15:25 : ***********************************\n02/25/13 12:15:25 : Procd has a watcher pid and will die if pid 21203 dies.\n02/25/13 12:15:25 : taking a snapshot...\n02/25/13 12:15:25 : ProcAPI: task_port_pid() on pid 0 failed with 5((os/kern) failure), Marking imgsize,\n rsssize, cpu/sys time as zero for the pid.\n02/25/13 12:15:25 : method PID: found family 21203 for process 21203\n02/25/13 12:15:25 : method PARENT: found family 21203 for process 21206\n02/25/13 12:15:25 : method PARENT: found family 21203 for process 21206 (already determined)\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2013-Feb-25 14:08:58 by tannenba:</em> <br/>\n\nKey in the above to me is the \"...on pid 0 failed...\" part of the log. Of course getting info on pid 0 is going to fail, why is the procd trying to look at pid 0 in the first place?\n\n<p></p><hr/>\n<em>2013-Mar-11 18:46:14 by tannenba:</em> <br/>\n\nMaybe related to <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2537\" onclick=\"get_ticket_and_populate_wrapper('2537'); return false;\" title=\"Procd / Master crash on MacOS in batlabs\">#2537</a></span> ?  If not perhaps <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2537\" onclick=\"get_ticket_and_populate_wrapper('2537'); return false;\" title=\"Procd / Master crash on MacOS in batlabs\">#2537</a></span> should be resolved or abandoned?\n\n<p></p><hr/>\n<em>2013-Apr-24 13:02:49 by zmiller:</em> <br/>\n\nhere's a potentially illumniating comment from gquinn in 2007:\n\n<p></p><div class=\"verbatim\">\n<pre>        Depending upon how the user machine is configured, task_for_pid() could\n        work or not work when a process is not running as root. As of macos\n        10.4, the default is 0. However, since an admin may configure their\n        machine to have a process utilize task_for_pid when it isn't running\n        as root, we allow the admin to tell Condor about this.\n\n        As for 09/05/2007 for macosx 10.3 &amp; 10.4, these are the\n        applicable values.\n\n        Old policy is:\n            - the caller is running as root (EUID 0)\n            - if the caller is running as the\n                same UID as the target (and the target's\n                EUID matches its RUID, that is, it's not\n                running a setuid binary)\n        New policy is:\n            - if the caller was running as root (EUID 0)\n            - if the pid is that of the caller\n            - if the caller is running as the same UID\n                as the target and the target's EUID matches\n                its RUID, that is, it's not a setuid binary\n                AND the caller is in group \"procmod\" or\n                \"procview\"\n\n                The long term goal of having both \"procmod\"\n                and \"procview\" is that task_for_pid would\n                return a send right for the task control\n                port only to those processes in \"procmod\";\n                the callers in \"procview\" would only get a\n                send right to a task inspection port.  This\n                distinction is not currently implemented.\n\n        To actually set the policy, do this:\n\n        $ sudo sysctl -w kern.tfp.policy=1 #set old policy\n        $ sudo sysctl -w kern.tfp.policy=2 #set new policy\n        $ sudo sysctl -w kern.tfp.policy=0 #disable task_for_pid except for root\n\n        Since I can't seem to find a man page for task_for_pid() *anywhere*,\n        which is odd, I'm going to declare that if it comes back not a\n        KERN_SUCCESS, then I don't have permission to see the pid. Sadly,\n        I can't tell if a pid is not there, or I don't have a permission\n        to see it using this method.\n</pre></div>\n\n\n<p>I'm just waiting for an account so I can inspect those settings and the procd logs.\n\n</p><p></p><hr/>\n<em>2013-Apr-26 12:52:15 by zmiller:</em> <br/>\n\nthe above is interesting but not the problem here.  kern.tfp.policy is already set to \"2\" on the node i examined.  so there must be some other reason we are getting \"0\" from task_for_pid.  continuing to investigate.\n\n<p></p><hr/>\n<em>2013-May-16 14:46:30 by jfrey:</em> <br/>\n\nPid 0 is pseudo-process named \"kernel_task\" that represents the kernel. It doesn't show up in ps, but does show up in the Activity Monitor application. Since it's not a real process that can be manipulated, I propose we ignore it when building the full list of pids on the system.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-23 13:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/be498e8969bb6639a697408d5cc953e525b5e370\">[35844]</a></span>: Version history for pid 0 errors on mac. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3516\" onclick=\"get_ticket_and_populate_wrapper('3516'); return false;\" title=\"ProcLog on MacOSX shows error on startup.\">#3516</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-16 16:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/fd295513035aa32c97eb5cf637d9348608f18d84\">[35719]</a></span>: Ignore pid 0 in procapi on macosx. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3516\" onclick=\"get_ticket_and_populate_wrapper('3516'); return false;\" title=\"ProcLog on MacOSX shows error on startup.\">#3516</a></span> The full list of pids returned by sysctl() on MacOSX include pid 0, which is not a real userland process. It's named kernel_task and represents the kernel. Calls like task_for_pid() fail on it, leading to worrying messages in the procd log. Ignore it in ProcAPI::buildPidList().\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2014-Aug-04 11:56", "status": "resolved", "created": "2013-Feb-25 12:21", "fixed_version": "2013-Feb-25 12:21", "broken_version": "v070901", "priority": "3", "subsystem": "", "assigned_to": "jfrey", "derived_from": "", "creator": "bgietzel", "rust": "", "customer_group": "batlab", "visibility": "public", "notify": "bgietzel@cs.wisc.edu tannenba@cs.wisc.edu", "due_date": ""}