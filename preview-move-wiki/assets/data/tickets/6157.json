{"id": 6157, "title": "Ticket #6157: Allow/handle multiple simultaneous annexes", "description": "<blockquote>\nThe current behaviour of <code>condor_annex</code> when given two annex identical annex names in succession is currently undefined and sub-optimal.  While we'd like to be able to extend (or shorten) the lease after construction (without adding more instances), the bigger issue is that there current mechanism for secure configuration transport can only use one file.\n\n<p>So we need to remove or work-around that restriction; supporting size changes will have to wait until we do size maintenance, except for adding new instances (which could allow ODI annexes to end up with more than one instance type, if we like -- that way we wouldn't have to remember anything).  However, it would be nice to add command-line support for modifying the lease, as well.\n\n</p><p>[More on how to support multiple annex configs later.]</p></blockquote>", "remarks": "<blockquote>\n<ul>\n<li>Being able to mutate the role doesn't help us any, since we still have only one.\n</li><li>We could create a role per annex -- without too much trouble once with initial set-up automation is done -- but then we have to worry about (a) how many roles each account can have and, more importantly, (b) how to clean them up.  We could probably do (b) in lambda function, especially if the roles were carefully named, but that requires some additional, potentially-scary permissions.\n</li><li>Creating a new bucket per annex implies creating a new role, so that's no help, either.\n</li><li>If we adjusted the role to permit reading from multiple files (e.g., config-*.tar.gz, where the * is the annex name), we could have arbitrarily many (basically) simultaneously active configs and only one role... if the instance could determine which config file to read.  So, if the instance can read its own client token (this may require an additional permission in the role, because it might be an API call and not something in the metadata), and assuming the client token is propagated to SFR instances, we might have a solution.\n</li></ul>\n\n<p></p><hr/>\n<em>2017-Mar-15 17:31:49 by tlmiller:</em> <br/>\n\n... which of course leads to a question about clean-up that maybe the lease function can help us solve.\n\n<p></p><hr/>\n<em>2017-Mar-17 14:44:12 by tlmiller:</em> <br/>\n\nSo having the Lambda function delete the annex-specific tarball works well, but I found a new problem once I got this working for on-demand instances: the spot fleet instances don't have a client token I control, and thus the code they use to determine which annex they belong to needs tweaking.\n\n<p>I don't like relying on tags, but it looks I'll need to: assume that if an instance has the 'aws:ec2spot:fleet-request-id' tag, then the value thereof points to a SFR whose <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClientToken\" title=\"Client Token\">ClientToken</a></span> can be parsed for annex ID (instead of my own).  This shouldn't be too hard, but will required updating the default image (again).\n\n</p><p></p><hr/>\n<em>2017-Mar-20 17:15:25 by tlmiller:</em> <br/>\n\nDefault image updated; will push code with other SFR fixes shortly.\n\n<p></p><hr/>\n<em>2017-Apr-04 14:12:38 by tlmiller:</em> <br/>\n\n... or I could just list all of the SFRs and look for the one whose client token begins with the Annex ID I was passed.  That seems a lot safer.\n\n<p></p><hr/>\n<em>2017-Apr-04 17:57:21 by tlmiller:</em> <br/>\n\nFail.  The <em>lease function</em> checks all SFRs for a client token beginning with the annex ID, but of course the <em>instance</em> isn't passed the annex ID as a parameter, and has to use its 'aws:ec2spot:fleet-request-id' tag to find its SFR and extract the annex ID from that.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Mar-20 14:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50348\">[50348]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6157\" onclick=\"get_ticket_and_populate_wrapper('6157'); return false;\" title=\"Allow/handle multiple simultaneous annexes\">#6157</a></span>) Remove per-annex config file from S3 bucket after its lease expires.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Mar-15 17:23</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50323\">[50323]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6157\" onclick=\"get_ticket_and_populate_wrapper('6157'); return false;\" title=\"Allow/handle multiple simultaneous annexes\">#6157</a></span>) Allow multiple simultaneous annex configurations.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "experimental", "last_change": "2017-Apr-04 18:07", "status": "resolved", "created": "2017-Feb-20 14:14", "fixed_version": "2017-Feb-20 14:14", "broken_version": "v080700", "priority": "2", "subsystem": "Annex", "assigned_to": "tlmiller", "derived_from": "#6111", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}