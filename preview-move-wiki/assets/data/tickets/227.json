{"id": 227, "title": "Ticket #227: Benchmark new classads vs. old", "description": "<blockquote>\n<span class=\"section\"><h2>Benchmark New ClassAds against old ClassAds</h2></span>\n\n<p><span class=\"subsection\"></span></p><h3>Summary </h3>\nBefore switching to new classads, we should do a quick benchmarking of the code against old classads, just to make sure that there are no big surprises.  We need to measure both CPU and memory usage of common operations: insert, lookup, parsing, and matching.\n\n<p><span class=\"subsection\"></span></p><h3>Benchmarks to perform</h3>\n\n<p></p><ol>\n<li>A benchmark that instantiates N classads, adds A attributes into it, and then deletes them. Compare execution time and size b/w new and old classads. <em>Nick</em> <strong>DONE</strong>\n\n<p></p></li><li>A benchmark that instantiates N classads, then does a constraint evaluation on all of them. Compare execution time and size b/w new and old classads. <em>Nick</em> <strong>DONE</strong>\n\n<p></p></li><li>Grab the output of condor_status -l off one of the collectors (?) on a pool to get all the machine classads in the pool into a text file. Suck this up into a program which instantiates a classad for each of these machines. (Maybe make 10 instances of classads for each machine to magnify results). Check memory footprint; compare b/w new and old classads. <em>Nick</em> <strong>Done</strong>\n\n<p></p></li><li>Similarly with a job queue, grab the job classads, and suck them into a program which instantiates classads for each job in the text file. (Magnify as needed). Check memory footprint; compare b/w new and old classads. <em>Nick</em> <strong>Done</strong>\n</li></ol>\n\n<p>One of the concerns is that old classads do a reference counting of strings, whereas new classads use C++ strings. Check how much of an impact this would be especially when:\n</p><ol>\n<li>job ads contain entire environment.\n</li><li>repetitious strings like condor version string are repeated across multiple machine ads across the pool.\n</li></ol>\n\n<p><span class=\"subsection\"></span></p><h3>Summary of results</h3>\n\n<p></p><ol>\n<li>Instantiate, fill, delete N classads\n<ul>\n<li>New <span class=\"quote\">ClassAds</span> seem to consistently run this benchmark faster, up to 2x, depending on the mix of the \"input\" data, the frequency of duplicate strings, etc.\n</li><li>New <span class=\"quote\">ClassAds</span> seem to consistently use less memory, as well, about 2/3 that of old <span class=\"quote\">ClassAds</span>, again depending on the mix.\n</li></ul>\n\n<p></p></li><li>Matching\n<ul>\n<li>Memory use between the two is very close, with new <span class=\"quote\">ClassAds</span> consistently using about 96% of the RAM compared to old <span class=\"quote\">ClassAds</span>.\n</li><li>Old <span class=\"quote\">ClassAds</span> performed 4.7x faster than new <span class=\"quote\">ClassAds</span>.\n</li></ul>\n\n<p></p></li><li>Instantiate \"real\" machine ads\n<ul>\n<li>New <span class=\"quote\">ClassAds</span> used a very similar amount of memory (very slightly less) that old <span class=\"quote\">ClassAds</span> in these tests\n</li><li>New <span class=\"quote\">ClassAds</span> performed at approximately 56% (instantiations / second) compared to old <span class=\"quote\">ClassAds</span>.\n</li></ul>\n\n<p></p></li><li>Instantiate \"real\" job ads\n<ul>\n<li>In this benchmark, old <span class=\"quote\">ClassAds</span> were both faster and consumed less memory than new classads.\n</li><li>Old <span class=\"quote\">ClassAds</span> performed 2.3x faster than new <span class=\"quote\">ClassAds</span>\n</li><li>New <span class=\"quote\">ClassAds</span> used 1.4x the amount of RAM compared to old <span class=\"quote\">ClassAds</span>\n</li></ul>\n</li></ol>\n\n<p><span class=\"subsection\"></span></p><h3>Running the bencharks</h3>\n\n<p></p><ol>\n<li>Instantiate, fill, delete N classads\n<ul>\n<li>New: <code><span class=\"quote\">./cabench_inst-new 5 inst.attrs 10000 1000 </span></code>\n</li><li>Old: <code><span class=\"quote\">./cabench_inst-old 5 inst.attrs 10000 1000 </span></code>\n</li></ul>\n\n<p></p></li><li>Matching\n<ul>\n<li>New: <code><span class=\"quote\">./cabench_query-newlist --enable-2way 3 collector.ads-new 10000 '[Requirements = (other.Arch == \"X86_64\"); JobUniverse = 5; ]' </span></code>\n</li><li>Old: <code><span class=\"quote\"></span></code>\n</li></ul>\n\n<p></p></li><li>Instantiate \"real\" machine ads\n<ul>\n<li>New: <code><span class=\"quote\">./cabench_query-newlist 0 collector.ads-new '*10' - --filter '[Requirements = (other.MyType == \"Machine\") ]' </span></code>\n</li><li>Old: <code><span class=\"quote\"></span></code>\n</li></ul>\n\n<p></p></li><li>Instantiate \"real\" job ads\n<ul>\n<li>New: <code><span class=\"quote\">./cabench_query-newlist 3 jobs-newbio.ads-new '*10' -</span></code>\n</li><li>Old: <code><span class=\"quote\">./cabench_query-oldlist 3 jobs-newbio.ads-old '*10' -</span></code></li></ul>\n</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<hr/>\n<em>2009-Mar-30 14:33:15 by nleroy:</em> <br/>\n\n<span class=\"subsection\"><h3>Benchmark 2:</h3></span>\n\n<p></p><div class=\"verbatim\">\n<pre>./classad_benchmark_constraint-new --view 'other.MyType == \"Machine\"' --enable-2way all.newad 10000 10 '[Requirements = (other.Arch == \"X86_64\"); JobUniverse = 5; ]'\nsearches                    10 in  4.15679s =&gt; 0.4156794sp       2.41/s\nTotal Ads               100000 in  4.15679s =&gt; 0.0000416sp   24057.00/s\nTotal View Members       53930 in  4.15679s =&gt; 0.0000771sp   12973.94/s\nTotal Query matches      10380 in  4.15679s =&gt; 0.0004005sp    2497.12/s\n\n./classad_benchmark_constraint-new --disable-view --enable-2way all.newad 10000 10 '[Requirements = (other.Arch == \"X86_64\" &amp;&amp; other.MyType == \"Machine\"); JobUniverse = 5; ]'\nsearches                     10 in  6.07513s =&gt; 0.6075133sp       1.65/s\nTotal Ads                100000 in  6.07513s =&gt; 0.0000608sp   16460.54/s\nTotal View Members       100000 in  6.07513s =&gt; 0.0000608sp   16460.54/s\nTotal Query matches       10200 in  6.07513s =&gt; 0.0005956sp    1678.98/s\n\n./classad_benchmark_constraint-old --disable-view --enable-2way all.oldad 10000 10 '[Requirements = (Arch == \"X86_64\"); JobUniverse = 5; MyType=\"Job\"; TargetType=\"Machine\" ]'\nsearches                     10 in  1.59872s =&gt; 0.1598716sp       6.26/s\nTotal Ads                100000 in  1.59872s =&gt; 0.0000160sp   62550.20/s\nTotal View Members       100000 in  1.59872s =&gt; 0.0000160sp   62550.20/s\nTotal Query matches        9790 in  1.59872s =&gt; 0.0001633sp    6123.66/s\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Apr-01 12:40:20 by tannenba:</em> <br/>\n\nThe above looks good for new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClasAds\" title=\"Clas Ads\">ClasAds</a></span>.  I am wondering, however, why the number of ads that match the constraint varies across the three tests.  Is the input data not controlled?\n\n<p></p><hr/>\n<em>2009-Apr-01 12:55:04 by matt:</em> <br/>\n\nCan you give numbers when running the same constraint on both new and old classads?\n\n<p>They <strong>are</strong> running with the same constraints.  The differences that you see are due to the fact that old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> automagically compare <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyType\" title=\"My Type\">MyType</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TargetType\" title=\"Target Type\">TargetType</a></span> of the ads, and new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> doesn't have such a concept, so I had to build that into my query.\n\n</p><p>Can you explain what the numbers mean? It looks like new classads are 3-4 times slower when matching and 4-5 times slower for whatever ads and view members is?\n\n</p><p></p><hr/>\n<em>2009-Apr-01 14:41 by nleroy:</em> <br/>\n\n\n<p>To Todd:\n\n</p><p>For better or for worse, the current benchmark is told to generate n (in the above case 10000) ads based on a 'snapshot' of condor_status -any -l.  As it goes through and adds more ads, there is a degree of randomness as to which of the original ads (from the snapshot) it bases the next ad to add to the collection from.  So, in one run there might be more schedd ads, then next more X86_64 ads, etc.\n\n</p><p>To Matt:\n\n</p><p>Old classads doesn't have a view concept.  Or, rather it may have at some point (it referended in some header files), but has since been disabled.  New classads collections allows the application to create a distinct 'view' of the collection that matches a given constraint.  In the above, I used 'other.MyType == \"Machine\" to specify the view, so the view view that I then queried is a sub-set of the entire <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> collection.\n\n</p><p>Yes, you're right, the new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> collection code does appear to be slower to query than that of old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.  That being said, old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> doesn't even <strong>have</strong> a real query -- it allows you to iterate through the collection and pick out ads that match, which is what the current collector does.  I haven't looked at all into any possible optimizations that could be done to new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> collection queries.\n\n</p><p></p><hr/>\n<em>2009-Apr-01 15:35:54 by matt:</em> <br/>\n\nNick, it is impossible to follow the comments if you edit them instead of appending.\n\n<p></p><hr/>\n<em>2009-Apr-29 14:58:00 by nleroy:</em> <br/>\n\nOK, I have benchmarks based on walking through an STL list of ads, matching one at a time.  I've run these tests with list&lt;&gt;s of 10,000 up to 50,000 ads.  At 100,000 the image size of the process grew large enough that I eventually gave up and killed the process.\n\n<p>The timings seem pretty consistent..  Old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> do match-making about 5x to 6x faster than new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.  This is consistent through a wide range of list sizes.\n\n</p><p>Memory use between the two is very close, with new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> consistently using about 96% of the RAM compared to old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.\n\n</p><p>All of these measurements seem to remain constant with scaling from 10,000 up to 50,000 ads.  At 50,000 ads, new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> contributed 826,428M to the test program's image size, while old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> used 855,816M.  Again, the ratio between the two is very consistent.\n\n</p><p></p><hr/>\n<em>2009-Apr-30 15:18:40 by nleroy:</em> <br/>\n\nI just completed an update that allows the test to \"pre-filter\" ads such that it'll run the query against a subset of ads -- in this case jobs with <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyType\" title=\"My Type\">MyType</a></span> == \"Machine\".  This had little affect on the performance of old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> (not surprizing), and sped up new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> somewhat.  This was an attempt to better emulate the behavior of the negotiator.\n\n<p>Under these conditions, old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> performed 4.7x faster than new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.\n\n</p><p>Memory usage patters, not surprisingly, were not affected by this.\n\n</p><p></p><hr/>\n<em>2009-Apr-30 15:21:18 by nleroy:</em> <br/>\n\nThis benchmarking work is being done on it's own branch:\nV7_3-new_classads_benchmarks-branch\n\n<p>There's also the V7_3-new_classads-branch branch which is intended to be updates and additions to new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> without the benchmarks.  The benchmarks branch is based off the this branch.\n\n</p><p></p><hr/>\n<em>2009-May-14 15:38:15 by nleroy:</em> <br/>\n\n<span class=\"section\"><h2>Benchmark 3 (instantiate ads from 'condor_status -l' results)</h2></span>\n\n<p><span class=\"subsection\"></span></p><h3>summary </h3>\nNew <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> used a very similar amount of memory (very slightly less) that old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> in these tests, but performed at approximately 56% (instantiations / second) compared to old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.\n\n<p><span class=\"subsection\"></span></p><h3>Old ClassAds</h3>\nOn tonic, old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> consistently instantiates about 1100 ads / second (as read from a file), using 341188k to instantiate 13150 machine ads (10x) (about 26.0k per ad).\n<div class=\"verbatim\">\n<pre>Target: 13150 ads\nsetup @ 1242332853.07s: 7532k 2640k\n  done            13150 in 11.95430s =&gt; 0.0009091sp    1100.02/s\n  done                 @  11.95430s   341180k   341188k [diff]\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>New ClassAds</h3>\nOn tonic, new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> consistently instantiates about 620 ads / second (as read from a file), using 337196k to instantiate 13150 machine ads (10x) (about 25.6k per ad).\n<div class=\"verbatim\">\n<pre>Target: 13150 ads\nsetup @ 1242332832.55s: 7548k 2648k\n  done            13150 in 21.17745s =&gt; 0.0016105sp     620.94/s\n  done                 @  21.17745s   337124k   337196k [diff]\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-May-14 18:35:38 by nleroy:</em> <br/>\n\n<span class=\"section\"><h2>Results for benchmark 4 (instantiation of job ads)</h2></span>\nThe job ads for this test were pulled from the schedd on 'newbio'; I have no idea how representative they are of other workloads.\n\n<p><span class=\"subsection\"></span></p><h3>Summary </h3>\nIn this benchmark, old classads were both faster and consumed less memory than new classads.  Old classads performed 2.3x faster than new classads, while new classads used 1.4x the amount of RAM.\n\n<p><span class=\"subsection\"></span></p><h3>Old ClassAds</h3>\nThe old classad code instantiated 35720 ads at a rate of about 1400 ads / second, using a total of 514672k of RAM (14.4k / ad).\n\n<p></p><div class=\"verbatim\">\n<pre>Target: 35720 ads\nsetup @ 1242343502.23s: 7688k 2908k\n  done            35720 in 25.55164s =&gt; 0.0007153sp    1397.95/s\n  done                 @  25.55164s   514704k   514672k [diff]\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>New ClassAds</h3>\nThe new classad code instantiated 35720 ads at a rate of about 600 ads / second, consuming 713252k of RAM (20.0k / ad).\n\n<p></p><div class=\"verbatim\">\n<pre>Target: 35720 ads\nsetup @ 1242343574.07s: 7760k 2952k\n  done            35720 in 59.22017s =&gt; 0.0016579sp     603.17/s\n  done                 @  59.22017s   713308k   713252k [diff]\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-May-18 15:47:34 by nleroy:</em> <br/>\n\n<span class=\"section\"><h2>Benchmark #1 results</h2></span>\n\n<p><span class=\"subsection\"></span></p><h3>summary </h3>\n\n<p>This one is a bit more difficult to interpret.\n\n</p><p>New <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> seem to consistently run this benchmark faster, up to 2x, depending on the mix of the \"input\" data, the frequency of duplicate strings, etc.\n\n</p><p>New <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> seem to consistently use less memory, as well, about 2/3 that of old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, again depending on the mix.\n\n</p><p><span class=\"subsection\"></span></p><h3>benchmark apparatus</h3>\nI created a separate Python script to generate attribute / value pairs, along with \"duplicate\" numbers for each.  All of the attribute / value pairs are randomly generated strings (and integers and booleans).  Strings, however, can have a non-zero random duplicate number that the benchmark itself uses to instantiate the same a/v pair duplicates into the number of ads.  Several \"classes\" of strings were used, each with a different length range and duplicate probability; however the benchmark itself only \"sees\" a string with a duplication number.  This number is actually the percentage of ads for which this a/v should be duplicated -- thus, the same data file can be used for tests with 10 ads as well as 1,000 ads.\n\n<p>For the benchmarks below, ran 5 loops; in each loop, 10,000 ads were created and then populated, each with 1,000 attributes.  Duplicate strings were used as specified in the input data file (see above paragraph).\n\n</p><p>At the bottom of each loop, all ads were delete()ed from memory.\n\n</p><p><span class=\"subsection\"></span></p><h3>old ClassAd details</h3>\nUnder the above benchmark, old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> used approximately 35716k (3.57k/ad) (each loop) to fill the ads, requiring about 41 seconds.  Generating the \"empty\" ads used 1524k (0.15k/ad), and required about 0.003 seconds.  Deletion freed 5128k (0.51k/ad) and required about 0.32 seconds.\n\n<p></p><div class=\"verbatim\">\n<pre>** loop 1 **\n  init complete   10000 in  0.01580s =&gt; 0.0000016sp  632873.22/s\n  init complete        @   0.01580s img:1524k (0.15k/s)      rss:1540k (0.15k/s)      [diff]\n  fill complete   10000 in 41.87912s =&gt; 0.0041879sp     238.78/s\n  fill complete        @  41.87912s img:35716k (3.57k/s)     rss:35760k (3.58k/s)     [diff]\n  delete complete 10000 in  0.31660s =&gt; 0.0000317sp   31585.90/s\n  delete complete      @   0.31660s img:-5128k (-0.51k/s)    rss:-5120k (-0.51k/s)    [diff]\n\n** loop 2 **\n  init complete   10000 in  0.00410s =&gt; 0.0000004sp 2437840.16/s\n  init complete        @   0.00410s img:0k (0.00k/s)         rss:0k (0.00k/s)         [diff]\n  fill complete   10000 in 42.03365s =&gt; 0.0042034sp     237.90/s\n  fill complete        @  42.03365s img:35616k (3.56k/s)     rss:35564k (3.56k/s)     [diff]\n  delete complete 10000 in  0.32466s =&gt; 0.0000325sp   30801.18/s\n  delete complete      @   0.32466s img:-5128k (-0.51k/s)    rss:-5128k (-0.51k/s)    [diff]\n\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>new ClassAd details</h3>\nNew <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> used approximately 27204k (2.72k/ad) (each loop) to fill the ads, requiring about 21 seconds.  Generating the \"empty\" ads used 812k (0.08k/ad) and required about 0.006 seconds.  Deletion freed 0k (0.0k/ad) and required about 0.16 seconds.\n\n<p></p><div class=\"verbatim\">\n<pre>** loop 1 **\n  init complete   10000 in  0.00351s =&gt; 0.0000004sp 2846683.86/s\n  init complete        @   0.00351s img:812k (0.08k/s)       rss:764k (0.08k/s)       [diff]\n  fill complete   10000 in 21.48621s =&gt; 0.0021486sp     465.41/s\n  fill complete        @  21.48621s img:27204k (2.72k/s)     rss:27240k (2.72k/s)     [diff]\n  delete complete 10000 in  0.15971s =&gt; 0.0000160sp   62613.51/s\n  delete complete      @   0.15971s img:0k (0.00k/s)         rss:0k (0.00k/s)         [diff]\n\n** loop 2 **\n  init complete   10000 in  0.00268s =&gt; 0.0000003sp 3735575.35/s\n  init complete        @   0.00268s img:0k (0.00k/s)         rss:0k (0.00k/s)         [diff]\n  fill complete   10000 in 21.60156s =&gt; 0.0021602sp     462.93/s\n  fill complete        @  21.60156s img:27196k (2.72k/s)     rss:27176k (2.72k/s)     [diff]\n  delete complete 10000 in  0.18101s =&gt; 0.0000181sp   55244.69/s\n  delete complete      @   0.18101s img:0k (0.00k/s)         rss:0k (0.00k/s)         [diff]\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>Image size strangeness</h3>\nNew <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> benchmark memory usage measurements are returning results that are confusing to me.  After deleting the ads, the image size and RSS of the old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> benchmark drops as expected.  With new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, however, that doesn't appear to be the case.  I've done some reworks on the benchmark apparatus (in case it was the apparatus I was measuring, not the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> code itself), but that had no affect.  At the top of the next loop, both new and old have reduced isize and RSS -- this seems normal.  After the start of the second and each loop after, both had a constant isize and RSS.\n\n<p>For new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, this number was 752k (compared to that before the start of the first loop.  For old <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, this number was 1632k.\n\n</p><p></p><hr/>\n<em>2009-Dec-01 14:37:56 by nleroy:</em> <br/>\n\nThe files that are mentioned in my previous posts are in /scratch.1 on tonic:\n/scratch/nleroy/workspace/trunk-classad/build-condor/src/classad_benchmarks</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=473\" onclick=\"get_ticket_and_populate_wrapper('473'); return false;\" title=\"Profiling of new ClassAds\">#473</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nProfiling of new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span></td></tr>\n</tbody></table>", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-21 17:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14751\">[14751]</a></span>: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> benchmarks (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>): Fixed a bug that basically disabled the query in the query benchmark  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-18 15:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14705\">[14705]</a></span>: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> benchmarks (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>): More work to insure that the results for benchmark ##1 are valid.  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-15 10:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14695\">[14695]</a></span>: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> benchmarks (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>): Misc updates to support job ads  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-14 16:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14694\">[14694]</a></span>: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> Benchmarks (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>): Added support for job ads to scripts  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-14 14:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14688\">[14688]</a></span>: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> Benchmarks (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>): 1. Fixed a couple of random bugs 2. Implemented logic for item 3 ( and, I think, 4)  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-13 22:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14685\">[14685]</a></span>: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> benchmarks; fixed a bug in command line handling (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>)  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-13 21:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14684\">[14684]</a></span>: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> Benchmarks: Instantation benchmarks appear to be functional. (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>)  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-13 14:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14683\">[14683]</a></span>: Rework classad benchmarks to make adding other benchmarks easier (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>)  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-May-12 15:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=14682\">[14682]</a></span>: Cleaned up the I/F to debug_timer (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>)  (By Nick <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LeRoy\" title=\"Le Roy\">LeRoy</a></span> )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Jan-21 07:32", "status": "resolved", "created": "2009-Feb-18 16:42", "fixed_version": "2009-Feb-18 16:42", "broken_version": "", "priority": "3", "subsystem": "", "assigned_to": "nleroy", "derived_from": "#131", "creator": "gthain", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tannenba@cs.wisc.edu,matt@cs.wisc.edu", "due_date": ""}