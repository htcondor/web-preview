{"id": 1330, "title": "Ticket #1330: Idle scheduler jobs can crash schedd when spooling input files", "description": "<blockquote>\nWhen a job's input files are transferred to the schedd over the network as part of a job submission, the job is submitted on hold, the files are transferred, then the job is released by the schedd. The function in the schedd that's called once the transfer is complete (Scheduler::spoolJobFilesReaper()) does the following:\n<ul>\n<li>Start a queue transaction\n</li><li>Modify some attributes in the job ad\n</li><li>call releaseJob()\n</li><li>Commit the transaction\n</li></ul>\n\n<p>releaseJob() ends up calling Scheduler::timeout(), which will attempt to start any idle scheduler universe jobs, using a transaction to update the job ad. So if there are any idle scheduler universe jobs, the schedd attempts to start two transactions in parallel, which blows an ASSERT().\n\n</p><p>Here's a stack trace:\n</p><div class=\"code\">\n<pre class=\"code\">#0  0xb7c5df84 in abort () from /lib/i686/cmov/libc.so.6\n#1  0x081db092 in _EXCEPT_ (fmt=0x84e4475 \"Assertion ERROR on (%s)\")\n    at except.c:89\n#2  0x082378f9 in ClassAdLog::BeginTransaction (this=0x86aaa60)\n    at classad_log.cpp:364\n#3  0x0816e6cb in ClassAdCollection::BeginTransaction (this=0x86aaa60)\n    at ../condor_c++_util/classad_collection.h:93\n#4  0x08168fca in BeginTransaction () at qmgmt.cpp:2370\n#5  0x08144a69 in Scheduler::start_sched_universe_job (this=0x85f1880,\n    job_id=0xbf9fb188) at schedd.cpp:7967\n#6  0x08137378 in Scheduler::spawnJobHandler (this=0x85f1880, cluster=3770857,\n    proc=0, srec=0x0) at schedd.cpp:2420\n#7  0x0813722f in aboutToSpawnJobHandlerDone (cluster=3770857, proc=0,\n    shadow_record=0x0) at schedd.cpp:2378\n#8  0x081372cf in callAboutToSpawnJobHandler (cluster=3770857, proc=0,\n    srec=0x0) at schedd.cpp:2397\n#9  0x081403cb in find_idle_local_jobs (job=0x87268e0) at schedd.cpp:6130\n#10 0x0816ccf0 in WalkJobQueue (\n    func=0x814000c &lt;find_idle_local_jobs(ClassAd*)&gt;) at qmgmt.cpp:3761\n#11 0x0814086f in Scheduler::StartLocalJobs (this=0x85f1880) at schedd.cpp:6284\n#12 0x081329ae in Scheduler::timeout (this=0x85f1880) at schedd.cpp:653\n#13 0x0814be4f in Scheduler::needReschedule (this=0x85f1880)\n    at schedd.cpp:11155\n#14 0x081502f9 in releaseJob (cluster=3770907, proc=0,\n    reason=0x84af8b5 \"Data files spooled\", use_transaction=false,\n    email_user=false, email_admin=false, write_to_user_log=false)\n    at schedd.cpp:12610\n#15 0x08139715 in Scheduler::spoolJobFilesReaper (this=0x85f1880, tid=24272,\n    exit_status=256) at schedd.cpp:3245\n#16 0x081c71cd in DaemonCore::CallReaper (this=0x8682448, reaper_id=6,\n    whatexited=0x84c974c \"pid\", pid=24272, exit_status=256)\n    at daemon_core.cpp:8902\n#17 0x081c7401 in DaemonCore::HandleProcessExit (this=0x8682448, pid=24272,\n    exit_status=256) at daemon_core.cpp:9002\n#18 0x081c7059 in DaemonCore::HandleDC_SERVICEWAITPIDS (this=0x8682448)\n    at daemon_core.cpp:8573\n#19 0x081bc265 in DaemonCore::Driver (this=0x8682448) at daemon_core.cpp:2868\n#20 0x081d1110 in main (argc=1, argv=0xbf9fbe98) at daemon_core_main.cpp:2255\n</pre></div>\n\n\n<p>An easy solution would be to make Scheduler::needReschedule() trigger a call to Scheduler::timeout() by daemon-core immediately after the current handler, rather than calling it directly. timeout() can already decide to delay the next time it runs, so this change shouldn't break any assumptions made by callers to needReschedule().</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Apr-05 13:57:22 by jfrey:</em> <br/>\n\nThis crash is being observed repeatedly by nanoHub. The cases examined, a scheduler universe job exits, but <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=OnExitRemove\" title=\"On Exit Remove\">OnExitRemove</a></span> evaluates to False, so the job returns to Idle. Immediately afterwards, input file spooling for another job completes. This results in a call to Scheduler::timeout() while the first job is idle, but a transaction is open for the second job.\n\n<p></p><hr/>\n<em>2010-Apr-05 14:00:32 by jfrey:</em> <br/>\n\nIn the nanoHub case, the reaper for the first job should trigger a re-execution. It doesn't because Scheduler::child_exit() updates <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SchedUniverseJobsRunning\" title=\"Sched Universe Jobs Running\">SchedUniverseJobsRunning</a></span> but not <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SchedUniverseJobsIdle\" title=\"Sched Universe Jobs Idle\">SchedUniverseJobsIdle</a></span>, and it's subsequent call to Scheduler::StartJobs() looks at <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SchedUniverseJobsIdle\" title=\"Sched Universe Jobs Idle\">SchedUniverseJobsIdle</a></span> to see if it needs to try starting any jobs. If the job returns to idle on exit, Scheduler::child_exit() should increment <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SchedUniverseJobsIdle\" title=\"Sched Universe Jobs Idle\">SchedUniverseJobsIdle</a></span>.\n\n<p></p><hr/>\n<em>2010-Apr-05 14:33:01 by jfrey:</em> <br/>\n\nThe attached patch is now running on condor.nanohub.org.\n\n<p></p><hr/>\n<em>2010-Apr-06 13:39:58 by jfrey:</em> <br/>\n\nPushed commit to V7_4-branch for 7.4.3 which delays the call to timeout() done by needReschedule().\n\n<p></p><hr/>\n<em>2010-Apr-06 13:42:54 by jfrey:</em> <br/>\n\nI'm holding off on committing the second half of the proposed patch. The first half fixes the crash, and re-spawning a scheduler universe job inside the reaper of the previous execution seems aggressive.\n\n<p></p><hr/>\n<em>2010-Jun-14 10:38:06 by jfrey:</em> <br/>\n\nResolving this ticket, as the second half of the patch doesn't appear to be needed.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/153/schedd.patch\">schedd.patch</a>\n1097 bytes added by jfrey on 2010-Apr-05 19:32:18 UTC.\n<br/>\nProposed fix for both problems described in this ticket.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Apr-11 15:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3037e3323b7acaccc7c4e56d23d23bbf60515ffd\">[17811]</a></span>: Merge 7.4-branch to master: Fix RPM and Debian packages Squashed commit of the following: commit d0889c025232cd286684ffa3a780e5314eeae201 Author: Thawan Kooburat &lt;kooburat@cs.wisc.edu&gt; Date: Sun Apr 11 15:01:06 2010 -0500\u00a0[...]\n (By Thawan Kooburat )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Apr-06 13:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6b163279ee657ef755719a30db86e225a0e5613f\">[17791]</a></span>: Fix idle scheduler jobs crashing schedd when spooling input files. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1330\" onclick=\"get_ticket_and_populate_wrapper('1330'); return false;\" title=\"Idle scheduler jobs can crash schedd when spooling input files\">#1330</a></span> When a job's input files are transferred to the schedd over the network as part of a job submission, the job is submitted on hold, the files are transferred, then the job is released by the schedd. The function in the schedd that's\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Jun-14 10:38", "status": "resolved", "created": "2010-Apr-05 13:35", "fixed_version": "2010-Apr-05 13:35", "broken_version": "v070401", "priority": "2", "subsystem": "Daemons", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}