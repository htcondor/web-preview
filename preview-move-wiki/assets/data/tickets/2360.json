{"id": 2360, "title": "Ticket #2360: CCB command handlers can block for 20s due to misbehaving client", "description": "<blockquote>\nWe had an incident that we believe was caused by \"misbehaving\" daemons that made the CHTC collector block for 20s each time the collector tried to service CCB_REGISTER commands from those daemons.\n\n<p>When the CCB server (collector) services the CCB_REGISTER command, and security negotiation is turned on, it is possible that the command payload (a small classad) has not arrived yet.  If security negotiation is disabled, the command int and the payload are part of the same message, so by the time we get to the command handler, we know that the payload has already been sent.  Security negotiation causes the command int and the payload to be sent in separate messages.\n\n</p><p>The solution we would like to follow is to add an option when registering a command to tell <code>DaemonCore</code> to wait (non-blocking) for at least one byte of the payload to arrive.  Then we can afford to use a very short timeout in the command handler, and the server will not be vulnerable to strangely behaving clients that do not send the payload for 20 seconds.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Aug-08 16:57:55 by danb:</em> <br/>\n\nI should note that when a daemon first starts up, it does a blocking CCB_REQUEST, so this is unlikely to be the case that was causing trouble.  If the initial request fails, or if the CCB connection ever goes bad, daemons then retry connecting periodically using asynchronous requests.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-12 16:23</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26757\">[26757]</a></span>: Improved logging in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> when payload for a command is delayed. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2360\" onclick=\"get_ticket_and_populate_wrapper('2360'); return false;\" title=\"CCB command handlers can block for 20s due to misbehaving client\">#2360</a></span> Now when the payload arrives, it is possible to see who the peer is. ===NoVersionHistory===  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-08 13:46</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26655\">[26655]</a></span>: Documented fix for CCB server blocking while reading the command payload. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2360\" onclick=\"get_ticket_and_populate_wrapper('2360'); return false;\" title=\"CCB command handlers can block for 20s due to misbehaving client\">#2360</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-08 13:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26654\">[26654]</a></span>: Fixed problem of CCB server blocking while trying to read payload in command requests. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2360\" onclick=\"get_ticket_and_populate_wrapper('2360'); return false;\" title=\"CCB command handlers can block for 20s due to misbehaving client\">#2360</a></span> Now when registering <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCore\" title=\"Daemon Core\">DaemonCore</a></span> commands, one can specify a maximum amount of time to wait (non-blocking) for the command payload, before calling the command handler.  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2014-Aug-04 14:57", "status": "resolved", "created": "2011-Aug-05 18:06", "fixed_version": "2011-Aug-05 18:06", "broken_version": "v070400", "priority": "2", "subsystem": "", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "tstclair@redhat.com", "due_date": "20110809"}