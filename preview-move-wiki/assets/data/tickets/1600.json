{"id": 1600, "title": "Ticket #1600: make BOINC via fetch-work more convenient", "description": "<blockquote>\n<span class=\"subsection\"><h3>Plan </h3></span>\n\n<p>To make it easier for users to run BOINC as a backfill task using Condor's fetch-work hooks, the following things need to be done:\n\n</p><p></p><ol>\n<li>Create a fetch-work tool for generating boinc jobs.  The tool must work on windows as well as unix, so a shell script is probably not acceptable.\n\n<p></p></li><li>The boinc job should be made with a working directory equal to boinc/slotX inside the slot execute directory.  The hook must create this directory if it does not exist (using the privsep switchboard if necessary).  The startd and preen must be made to avoid deleting the boinc execute directory, because boinc needs this directory to be persistent.\n\n<p></p></li><li>Condor should automatically generate the boinc global_prefs_override.xml file in the working directory.  One possible solution is to have a template for this file, modifiable by the administrator, which is turned into the working file by replacing macros in the file with values configured/computed by condor.  It is important that this file be configured correctly to limit how many cpus boinc tries to use so that this matches the number of cpus associated with the slot.  This is done via max_cpus (I believe older versions used max_ncpus_pct, which is less convenient for our purposes, because it is not a fixed scale).\n\n<p></p></li><li>Optional but nice: The state of the machine should appear as \"Backfill\" rather than \"Claimed\" in order to make it easy for admins to see what is going on.\n</li></ol>\n\n<p>The administrator will need to configure the following:\n\n</p><p></p><ul>\n<li>STARTD_JOB_HOOK_KEYWORD = BOINC\n</li><li>BOINC_EXECUTABLE - path to the boinc executable\n</li><li>BOINC_PROJECT_URL - e.g. <a class=\"external\" href=\"http://einstein.phys.uwm.edu\">http://einstein.phys.uwm.edu</a>\n</li><li>BOINC_PROJECT_KEY - e.g. 23451132\n</li></ul>\n\n<p>The admin will also need to create a 'boinc' account and will need to install boinc.\n\n</p><p>The following settings should have reasonable defaults that do not typically need to be edited:\n\n</p><p></p><ul>\n<li>BOINC_IdleTime = 900\n</li><li>BOINC_REQUIREMENTS = (State == \"Unclaimed\" &amp;&amp; $(StateTimer) &gt; $(BOINC_IdleTime))\n</li><li>BOINC_ACCOUNT = boinc\n</li><li>BOINC_ACCOUNTING_GROUP = BOINC\n</li><li>BOINC_ARGS = -no_gui_rpc -attach_project $(BOINC_PROJECT_URL) $(BOINC_PROJECT_KEY)\n</li><li>BOINC_HOOK_FETCH_WORK = $(LIBEXEC)/fetch_work_boinc\n</li><li>BOINC_MaxJobRetirementTime = 0\n</li><li>RANK = -MY.IsBackfillJob\n</li></ul>\n\n<p>Notice that the default RANK expression needs to rank BOINC jobs below all others.  The semantics of RANK are a pretty good fit for expressing when backfill should run.  However, this is somewhat fragile.  Is there a better way?  If the admin has overridden the RANK expression and forgotten to preserve the term for backfill jobs, then backfill jobs may run when they should not.  The admin must also be careful about assigning jobs a rank &lt;= boinc jobs.  In summary, the generality of RANK gives the admin flexibility, but this comes at the cost of making it possible for the admin to change the meaning of \"backfill\" without realizing it.</p></blockquote>", "remarks": "<blockquote>\n<hr/>\n<em>2010-Oct-20 16:03:30 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.\n<hr/>\n<em>2011-Jan-27 14:46:04 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 16:19:13 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2012-Oct-17 12:36", "status": "new", "created": "2010-Aug-23 15:55", "fixed_version": "2010-Aug-23 15:55", "broken_version": "v070504", "priority": "4", "subsystem": "", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}