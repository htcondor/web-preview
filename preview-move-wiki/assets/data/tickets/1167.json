{"id": 1167, "title": "Ticket #1167: GSI leaks memory", "description": "<blockquote>\nWe have several pieces of evidence that GSI authentication leaks memory.  I found one leak that goes back to at least 7.1.4, probably earlier.  There is another leak in the new VOMS stuff, first released in 7.3.2.\n\n<p>Evidence:\n\n</p><p>I took a look at one of the glidein 7.4.1 sub-collectors at UCSD.  By analyzing strings in the core file, it is pretty obvious that there is a memory leak related to GSI or VOMS.  There are less than a hundred security sessions and ads in the collector, but the count of how many times the same string appears in the core file comes up with some fairly big numbers:\n\n</p><p></p><div class=\"verbatim\">\n<pre> 14427 lcg-voms.cern.ch0\n 15590 DOEGrids\n 15593 DOEGrids1 0\n 15849     computers1\n 16020 cern1\n 17004 proxy\n 23306 ESnet\n 23568 ESnet1 0\n 23605 net1\n 24614 ]MH/\n 25517 doegrids\n 25524 Services\n 27071 DOEGrids CA 1\n 34215 Services1+0)\n 34325 doegrids1\n 38820 Certificate Authorities\n 39241 Certificate Authorities1\n 40049 ESnet Root CA 1\n 51072 org1\n</pre></div>\n\n\n<p>A google heap profiler dump from a 7.4.1 condor_collector from glideinWMS in Nebraska showed that 60% of all memory was allocated in CRYPTO_malloc.  Unfortunately, the lack of stack frames made it impossible to see where that was being called from.\n\n</p><p>Running GSI-authenticated condor_q under valgrind shows a leak going back to at least 7.1.4, probably earlier.  The leak is in Condor_Auth_X509::get_server_info(), which does not free memory allocated in a couple globus calls that it makes:\n\n</p><p></p><div class=\"verbatim\">\n<pre>  definitely lost: 616 bytes in 7 blocks\n  indirectly lost: 2,054 bytes in 100 blocks\n</pre></div>\n\n\n<p>On a platform that supports VOMS (linux), I found another leak reported by valgrind when I run condor_q:\n\n</p><p></p><div class=\"verbatim\">\n<pre>==3765== 16,736 (552 direct, 16,184 indirect) bytes in 6 blocks are definitely lost in loss record 116 of 122\n==3765==    at 0x40213C0: malloc (vg_replace_malloc.c:149)\n==3765==    by 0x82D29DD: default_malloc_ex (in /scratch/dan/condor/peep/src/condor_q.V6/condor_q)\n==3765==    by 0x82D305E: CRYPTO_malloc (in /scratch/dan/condor/peep/src/condor_q.V6/condor_q)\n==3765==    by 0x830D046: asn1_item_ex_combine_new (in /scratch/dan/condor/peep/src/condor_q.V6/condor_q)\n==3765==    by 0x830FC5D: ASN1_item_ex_d2i (in /scratch/dan/condor/peep/src/condor_q.V6/condor_q)\n==3765==    by 0x8310400: ASN1_item_d2i (in /scratch/dan/condor/peep/src/condor_q.V6/condor_q)\n==3765==    by 0x8304A14: ASN1_item_dup (in /scratch/dan/condor/peep/src/condor_q.V6/condor_q)\n==3765==    by 0x8307BD6: X509_dup (in /scratch/dan/condor/peep/src/condor_q.V6/condor_q)\n==3765==    by 0x8280FF0: globus_gsi_cred_get_cert_chain (globus_gsi_cred_handle.c:996)\n==3765==    by 0x815DC09: extract_VOMS_info (globus_utils.c:313)\n==3765==    by 0x81FA039: Condor_Auth_X509::authenticate_client_gss(CondorError*) (condor_auth_x509.cpp:742)\n==3765==    by 0x81FAA06: Condor_Auth_X509::authenticate(char const*, CondorError*) (condor_auth_x509.cpp:159)\n==3765==\n==3765== LEAK SUMMARY:\n==3765==    definitely lost: 552 bytes in 6 blocks.\n==3765==    indirectly lost: 16,184 bytes in 690 blocks.\n</pre></div>\n\n\n<p>I have confirmed that the daemon-side of the connection has the same leak.  This leak goes away if I set USE_VOMS_ATTRIBUTES = False.  The globus function globus_gsi_cred_get_cert_chain appears to be the cause of the leak, even though we are calling sk_x509_free on the allocated object.  I found that calling sk_x509_pop_free() instead of sk_x509_free() solves the leak.  This is consistent with other uses of globus_gsi_cred_get_cert_chain() in condor code.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-01 11:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25245\">[25245]</a></span>: Documented fix for GSI memory leak. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1167\" onclick=\"get_ticket_and_populate_wrapper('1167'); return false;\" title=\"GSI leaks memory\">#1167</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-01 11:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17055\">[17055]</a></span>: Fixed memory leak when using GSI and USE_VOMS_ATTRIBUTES=True. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1167\" onclick=\"get_ticket_and_populate_wrapper('1167'); return false;\" title=\"GSI leaks memory\">#1167</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-29 17:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17045\">[17045]</a></span>: Fixed a GSI-related memory leak. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1167\" onclick=\"get_ticket_and_populate_wrapper('1167'); return false;\" title=\"GSI leaks memory\">#1167</a></span>  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Feb-01 11:32", "status": "resolved", "created": "2010-Jan-29 17:08", "fixed_version": "2010-Jan-29 17:08", "broken_version": "v070104", "priority": "4", "subsystem": "", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "dan@hep.wisc.edu,zmiller@cs.wisc.edu,jfrey@cs.wisc.edu", "due_date": ""}