{"id": 6665, "title": "Ticket #6665: Update AWS Lambda functions by July 31", "description": "<blockquote>\nNode.js v4.3 was declared end-of-life on April 30.  AWS will stop allowing new Node.js v4.3 functions on July 31, so we want to update to the new run-time by then.  We should probably jump directly to v8.10 (after sufficient testing) so we can delay updating again for as long as possible.</blockquote>", "remarks": "<blockquote>\n<em>2018-Jul-12 12:58:11 by tlmiller:</em> <br/>\n\n<a class=\"external\" href=\"https://github.com/nodejs/wiki-archive/blob/master/Breaking-changes-between-v4-and-v5.md\">https://github.com/nodejs/wiki-archive/blob/master/Breaking-changes-between-v4-and-v5.md</a>\n\n<p><a class=\"external\" href=\"https://github.com/nodejs/wiki-archive/blob/master/Breaking-changes-between-v5-and-v6.md\">https://github.com/nodejs/wiki-archive/blob/master/Breaking-changes-between-v5-and-v6.md</a>\n\n</p><p><a class=\"external\" href=\"https://github.com/nodejs/wiki-archive/blob/master/Breaking-changes-between-v6-LTS-and-v8-LTS.md\">https://github.com/nodejs/wiki-archive/blob/master/Breaking-changes-between-v6-LTS-and-v8-LTS.md</a>\n\n</p><p></p><hr/>\n<em>2018-Jul-12 14:04:49 by tlmiller:</em> <br/>\n\nI'm starting off by verifying that I the old code works with the new Node; it looks like it will.  If it does, I should investigate if I can force the \"upgrade\" to happen by altering existing Lambda functions, rather than deleting the stack and re-running condor_annex -setup.  (That is, I won't have to update the version number of the common components.)\n\n<p></p><hr/>\n<em>2018-Jul-12 15:30:25 by tlmiller:</em> <br/>\n\nOK, the old code seems to work with the new Node.js.\n\n<p></p><hr/>\n<em>2018-Jul-12 16:12:22 by tlmiller:</em> <br/>\n\nWrote a nasty little Python script to update the runtime for existing Lambda functions.  Would arguably be both cleaner and easier to install if it used Boto instead of the aws command-line tool, and fished the credentials out in the same way that condor_annex does.\n\n<p>TJ thinks putting it up on the Wiki and linking to it in the release notes is a reasonable way to do things; we can just put it in the announce stream even if we don't release on time, I suppose.\n\n</p><p></p><hr/>\n<em>2018-Jul-12 17:35:21 by tlmiller:</em> <br/>\n\nActually, given that the code change will be necessary for any /new/ condor_annex users, we should do both.\n\n<p></p><hr/>\n<em>2018-Jul-12 17:35:37 by tlmiller:</em> <br/>\n\nAlso, the little python script is now cleaner, as defined above.\n\n<p>Still needs to be tested with multiple defined regions and with the default assignments.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">#!/usr/bin/python2\n\nimport os\nimport boto3\n\n#\n# Ask condor_config_val for the default AWS region, in case we need it.\n#\ndefaultRegion = os.popen( 'condor_config_val ANNEX_DEFAULT_AWS_REGION' ).read().strip()\n\n#\n# Get the region-specific credentials and lambda function ARNs.\n#\n\ndef parseCCVOutput( dataByRegion, output, attribute, islist = False ):\n        for line in output.split( \"\\n\" ):\n                if line.count( '=' ) == 1:\n                        k, v = line.split( ' = ' )\n\n                        region = defaultRegion\n                        if k.count( '.' ) == 1:\n                                region = k.split( '.' )[0]\n\n                        if region not in dataByRegion:\n                                dataByRegion[ region ] = {}\n                        if islist:\n                                if attribute not in dataByRegion[ region ]:\n                                        dataByRegion[ region ][ attribute ] = []\n                                dataByRegion[ region ][ attribute ].append( v );\n                        else:\n                                dataByRegion[ region ][ attribute ] = v\n\n#\n# Ask condor_config_val for the user's AWS credential files and Lambda functions.\n#\nakFileRaw = os.popen( 'condor_config_val -dump ANNEX_DEFAULT_ACCESS_KEY_FILE' ).read()\nskFileRaw = os.popen( 'condor_config_val -dump ANNEX_DEFAULT_SECRET_KEY_FILE' ).read()\nodiARNRaw = os.popen( 'condor_config_val -dump ANNEX_DEFAULT_ODI_LEASE_FUNCTION_ARN' ).read()\nsfrARNRaw = os.popen( 'condor_config_val -dump ANNEX_DEFAULT_SFR_LEASE_FUNCTION_ARN' ).read()\n\ndataByRegion = {}\nparseCCVOutput( dataByRegion, akFileRaw, 'akfile' )\nparseCCVOutput( dataByRegion, skFileRaw, 'skfile' )\nparseCCVOutput( dataByRegion, odiARNRaw, 'functionARNs', True )\nparseCCVOutput( dataByRegion, sfrARNRaw, 'functionARNs', True )\n\n#\n# For each region, update each of its lambda functions to use the new runtime.\n#\n\ndef updateRegionalFunctions( region, akfile, skfile, functionARNs ):\n        accessKeyID = open( akfile, 'r' ).read().strip()\n        secretAccessKey = open( skfile, 'r' ).read().strip()\n\n        lc = boto3.client( 'lambda',\n                region_name = region,\n                aws_access_key_id = accessKeyID,\n                aws_secret_access_key = secretAccessKey );\n\n        runtime = 'nodejs8.10'\n        for function in functionARNs:\n                print \"Upgrading function \" + function + \"...\"\n                update = lc.update_function_configuration( FunctionName = function, Runtime = runtime )\n                if( update['Runtime'] == runtime ):\n                        print \"... done.\"\n                else:\n                        print \"... failed.\"\n\nfor regionName, region in dataByRegion.items():\n        regionName = regionName.replace( '_', '-' )\n        updateRegionalFunctions( regionName, region[ 'akfile' ], region[ 'skfile' ], region[ 'functionARNs' ] )\n\nexit( 0 );\n</pre></div>\n\n\n<p></p><hr/>\n<em>2018-Jul-13 15:43:18 by tlmiller:</em> <br/>\n\nMany thanks to Mat for his review of the script; it is much improved as a result.\n\n<p></p><hr/>\n<em>2018-Jul-13 15:48:58 by tlmiller:</em> <br/>\n\n<div class=\"code\">\n<pre class=\"code\">#!/usr/bin/python2\n\nimport os\nimport sys\nimport boto3\n\ndef main( argv ):\n    #\n    # Ask condor_config_val for the default AWS region, in case we need it.\n    #\n    pipe = os.popen( 'condor_config_val ANNEX_DEFAULT_AWS_REGION' )\n    default_region = pipe.read().strip()\n    if pipe.close():\n        print( \"Setting default region to 'us-east-1'...\" )\n        default_region = 'us-east-1'\n\n    #\n    # Get the region-specific credentials and lambda function ARNs.\n    #\n    data_by_region = {}\n\n    ak_file_raw = fetch_raw_from_CCV( 'ANNEX_DEFAULT_ACCESS_KEY_FILE' )\n    sk_file_raw = fetch_raw_from_CCV( 'ANNEX_DEFAULT_SECRET_KEY_FILE' )\n    odi_ARN_raw = fetch_raw_from_CCV( 'ANNEX_DEFAULT_ODI_LEASE_FUNCTION_ARN' )\n    sfr_ARN_raw = fetch_raw_from_CCV( 'ANNEX_DEFAULT_SFR_LEASE_FUNCTION_ARN' )\n\n    parse_CCV_output( default_region, data_by_region, ak_file_raw, 'ak_file' )\n    parse_CCV_output( default_region, data_by_region, sk_file_raw, 'sk_file' )\n    parse_CCV_output( default_region, data_by_region, odi_ARN_raw, 'function_ARNs', True )\n    parse_CCV_output( default_region, data_by_region, sfr_ARN_raw, 'function_ARNs', True )\n\n    #\n    # For each region, update each of its lambda functions to use the new runtime.\n    #\n    for regionName, region in data_by_region.items():\n        regionName = regionName.replace( '_', '-' )\n        update_regional_functions( regionName, region['ak_file'], region['sk_file'], region['function_ARNs'] )\n\n    return 0\n\ndef fetch_raw_from_CCV( config_attr ):\n    pipe = os.popen( 'condor_config_val -dump ' + config_attr )\n    temp = pipe.read()\n    rv = pipe.close()\n    if rv:\n        raise RuntimeError( 'Problem (' + str(rv) + ') obtaining ' + config_attr )\n    return temp\n\ndef parse_CCV_output( default_region, data_by_region, output, attribute, islist=False ):\n    for line in output.split( \"\\n\" ):\n        if line.count( '=' ) == 1:\n            # machine-generated, no reason to use re_split().\n            k, v = line.split( ' = ', 1 )\n\n            region = default_region\n            if k.count( '.' ) == 1:\n                region = k.split( '.' )[0]\n\n            if region not in data_by_region:\n                data_by_region[region] = {}\n            if islist:\n                if attribute not in data_by_region[region]:\n                    data_by_region[region][attribute] = []\n                data_by_region[region][attribute].append( v )\n            else:\n                data_by_region[region][attribute] = v\n\ndef update_regional_functions( region, ak_file, sk_file, function_ARNs ):\n    accessKeyID = open( ak_file, 'r' ).read().strip()\n    secretAccessKey = open( sk_file, 'r' ).read().strip()\n\n    lc = boto3.client( 'lambda',\n        region_name=region,\n        aws_access_key_id=accessKeyID,\n        aws_secret_access_key=secretAccessKey )\n\n    runtime = 'nodejs8.10'\n    for function in function_ARNs:\n        print( \"Upgrading function \" + function + \"...\" )\n        update = lc.update_function_configuration( FunctionName=function, Runtime=runtime )\n        if( update['Runtime'] == runtime ):\n            print( \"... done.\" )\n        else:\n            print( \"... failed.\" )\n\nif __name__ == \"__main__\":\n    try:\n        exit( main( sys.argv ) )\n    except IOError as io_error:\n        print( \"Failed to read credential file '\" + io_error.filename + \"': \" + io_error.strerror )\n        exit( 1 )\n    except RuntimeError as rt_error:\n        print( rt_error )\n        exit( 1 )\n</pre></div>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jul-13 16:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55169\">[55169]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6665\" onclick=\"get_ticket_and_populate_wrapper('6665'); return false;\" title=\"Update AWS Lambda functions by July 31\">#6665</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6697\" onclick=\"get_ticket_and_populate_wrapper('6697'); return false;\" title=\"coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED\">#6697</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6701\" onclick=\"get_ticket_and_populate_wrapper('6701'); return false;\" title=\"condor_off -peaceful disrespects max job length\">#6701</a></span>) Update \"known problems\" section.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jul-13 16:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55168\">[55168]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6665\" onclick=\"get_ticket_and_populate_wrapper('6665'); return false;\" title=\"Update AWS Lambda functions by July 31\">#6665</a></span>) It seems wise to include a copy of the script in the repository.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jul-13 15:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=55167\">[55167]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6665\" onclick=\"get_ticket_and_populate_wrapper('6665'); return false;\" title=\"Update AWS Lambda functions by July 31\">#6665</a></span>) Update setup version to 8. Update runtime to Node.js 8.10.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "todo", "last_change": "2018-Oct-19 15:07", "status": "resolved", "created": "2018-Apr-27 13:18", "fixed_version": "2018-Apr-27 13:18", "broken_version": "", "priority": "2", "subsystem": "Annex", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}