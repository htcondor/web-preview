{"id": 7708, "title": "Ticket #7708: procd inefficiencies on macOS", "description": "<blockquote>\nTaking a snapshot of all processes in procapi is highly inefficient on macOS. <code>ProcAPI::buildPidList()</code> calls <code>sysctl()</code> to retrieve information about all processes on the system. It extracts the pids and discards the rest. Then, in <code>ProcAPI::getProcInfoRaw()</code>, <code>sysctl()</code> is called to get the same information about each process individually. We can avoid these per-process calls to <code>sysctl()</code>, which would can greatly reduce the time to take a snapshot.\n\n<p>The inefficient snapshot code is having a major impact on batlab machines. On the macOS 10.15 machines, it's common for test suite jobs to get bogged down with 450 procds monitoring 3000 processes. Each procd snapshot is taking up to 10 minutes. A <code>ps auwx</code> command also takes about 3 minutes. With no active procds, a <code>ps auwx</code> takes less than a third of a second. Eliminating the per-process <code>sysctl()</code> calls would reduce the time to take a snapshot by 80%. Doing so for all of the procds in a test suite run could result in even greater performance.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7717\" onclick=\"get_ticket_and_populate_wrapper('7717'); return false;\" title=\"Clean up ProcAPI\">#7717</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nClean up ProcAPI</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7851\" onclick=\"get_ticket_and_populate_wrapper('7851'); return false;\" title=\"procd inefficiencies on macOS in 8.8\">#7851</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nprocd inefficiencies on macOS in 8.8</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Sep-10 10:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=61261\">[61261]</a></span>: Remove redundant sysctl() calls in procapi for macos. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7851\" onclick=\"get_ticket_and_populate_wrapper('7851'); return false;\" title=\"procd inefficiencies on macOS in 8.8\">#7851</a></span> (This was back-ported from <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7708\" onclick=\"get_ticket_and_populate_wrapper('7708'); return false;\" title=\"procd inefficiencies on macOS\">#7708</a></span> in 8.9.8) Save information from initial sysctl() call that returns information about all processes, to avoid subsequent per-process calls of sysctl(). Similar to Windows, this involves a custom buildProcInfoList()\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Sep-10 10:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=61262\">[61262]</a></span>: Remove redundant sysctl() call in procapi for macos single-pid query <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7851\" onclick=\"get_ticket_and_populate_wrapper('7851'); return false;\" title=\"procd inefficiencies on macOS in 8.8\">#7851</a></span> (This was back-ported from <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7708\" onclick=\"get_ticket_and_populate_wrapper('7708'); return false;\" title=\"procd inefficiencies on macOS\">#7708</a></span> in 8.9.8) When calling sysctl() for a single pid, we know the size of the data structure, so we don't need an extra call to find it out.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Sep-10 10:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=61263\">[61263]</a></span>: Remove remaining buildPidList() calls on macOS. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7851\" onclick=\"get_ticket_and_populate_wrapper('7851'); return false;\" title=\"procd inefficiencies on macOS in 8.8\">#7851</a></span> (This was back-ported from <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7708\" onclick=\"get_ticket_and_populate_wrapper('7708'); return false;\" title=\"procd inefficiencies on macOS\">#7708</a></span> in 8.9.8)  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Jun-29 15:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=60026\">[60026]</a></span>: Remove remaining buildPidList() calls on macOS. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7708\" onclick=\"get_ticket_and_populate_wrapper('7708'); return false;\" title=\"procd inefficiencies on macOS\">#7708</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Jun-25 13:12</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59994\">[59994]</a></span>: Docs for macOS procd improvements. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7708\" onclick=\"get_ticket_and_populate_wrapper('7708'); return false;\" title=\"procd inefficiencies on macOS\">#7708</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Jun-24 15:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59976\">[59976]</a></span>: Remove redundant sysctl() call in procapi for macos single-pid query <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7708\" onclick=\"get_ticket_and_populate_wrapper('7708'); return false;\" title=\"procd inefficiencies on macOS\">#7708</a></span> When calling sysctl() for a single pid, we know the size of the data structure, so we don't need an extra call to find it out.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Jun-24 15:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59974\">[59974]</a></span>: Remove redundant sysctl() calls in procapi for macos. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7708\" onclick=\"get_ticket_and_populate_wrapper('7708'); return false;\" title=\"procd inefficiencies on macOS\">#7708</a></span> Save information from initial sysctl() call tht returns information about all processes, to avoid subsequent per-process calls of sysctl(). Similar to Windows, this involves a custom buildProcInfoList() and no buildPidList() call.\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-Oct-13 17:04", "status": "resolved", "created": "2020-Jun-24 14:18", "fixed_version": "2020-Jun-24 14:18", "broken_version": "", "priority": "3", "subsystem": "DaemonProcD", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "batlab", "visibility": "public", "notify": "", "due_date": ""}