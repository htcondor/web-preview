{"id": 1681, "title": "Ticket #1681: shared_port deadlocking", "description": "<blockquote>\nIn Igor's large-scale tests of condor_shared_port, we observed that the schedd often failed to send a heartbeat to the master, resulting in the master thinking that the schedd was hung.\n\n<p>This appears to be caused by a temporary deadlock between the schedd and condor_shared_port.  If all of the shared_port workers (SHARED_PORT_MAX_WORKERS=50) are busy, the shared_port server will attempt to service the next incoming request in the main process.  If, at the same time, the schedd is doing a blocking connect through the shared_port server, the two processes can deadlock.\n\n</p><p></p><div class=\"verbatim\">\n<pre>SchedLog:\n09/28/10 12:21:37 (pid:28067) DaemonCore: in SendAliveToParent()\n09/28/10 12:24:46 (pid:28067) attempt to connect to &lt;131.225.206.93:9999&gt;\n failed: Connection timed out (connect errno = 110).\n09/28/10 12:24:46 (pid:28067) DaemonCore: Could not connect to parent\n&lt;131.225.206.93:9999?sock=9580_059f&gt;. SendAliveToParent() failed.\n09/28/10 12:24:46 (pid:28067) DaemonCore: Leaving SendAliveToParent() - FAILED\nsending to &lt;131.225.206.93:9999?sock=9580_059f&gt;\n</pre></div>\n\n\n<p></p><div class=\"verbatim\">\n<pre>SharedPortLog:\n09/28/10 12:21:23 SharedPortClient: failed to connect to /home/igorschedd\n/glidecondor/condor_local/log/daemon_sock/28067_7d8e_1454 as requested by\nSTARTD &lt;131.225.191.183:34504?CCBID=131.225.206.102:7665#4810&gt; on\n&lt;131.225.191.183:58965&gt;: No such file or directory\n09/28/10 12:24:56 condor_read() failed: recv() returned -1, errno = 104\nConnection reset by peer, reading 5 bytes from &lt;131.225.206.93:0&gt;.\n09/28/10 12:24:56 IO: Failed to read packet header\n09/28/10 12:24:56 SharedPortClient: failed to receive result for\nSHARED_PORT_PASS_FD to /home/igorschedd/glidecondor/condor_local/log/daemon_sock\n/28067_7d8e_1074 as requested by STARTD\n&lt;131.225.191.175:50593?CCBID=131.225.206.102:7704#3996&gt; on\n&lt;131.225.191.175:34026&gt;: Connection reset by peer\n</pre></div>\n\n\n<p><span class=\"section\"></span></p><h2>Workaround </h2>\n\n<p>Set SHARED_PORT_MAX_WORKERS so large that it never runs out or set NOT_RESPONDING_TIMEOUT very large.\n\n</p><p><span class=\"section\"></span></p><h2>How to Fix</h2>\n\n<p></p><ol>\n<li>[DONE] Use a non-blocking connect in <code>SendAliveToParent()</code>, because blocking connects between daemons are always sources of trouble, even without shared_port.\n\n<p></p></li><li>In the shared_port server, create a queue for each target and only process N at a time from each queue where N is small compared to SHARED_PORT_MAX_WORKERS.  If daemon A needs to connect to daemon B, it will not be possible for all of the workers to be blocked on daemon A and thus deadlock is avoided.</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<hr/>\n<em>2011-Jan-27 14:50:47 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 16:20:02 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Feb-01 16:36:30 by danb:</em> <br/>\n\nI am marking this ticket as resolved.  More could be done (i.e. the unfinished item above), but no case has been observed where this is actually a problem.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-01 10:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19107\">[19107]</a></span>: Set a reasonable timeout for DC_CHILDALIVE messages. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1681\" onclick=\"get_ticket_and_populate_wrapper('1681'); return false;\" title=\"shared_port deadlocking\">#1681</a></span> After my recent change, it was using the default timeout of 20s. Now it will scale the timeout with NOT_RESPONDING_TIMEOUT.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-28 21:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25697\">[25697]</a></span>: Documented fix for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SendAliveToParent\" title=\"Send Alive To Parent\">SendAliveToParent</a></span>. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1681\" onclick=\"get_ticket_and_populate_wrapper('1681'); return false;\" title=\"shared_port deadlocking\">#1681</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-28 21:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19089\">[19089]</a></span>: <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SendAliveToParent\" title=\"Send Alive To Parent\">SendAliveToParent</a></span> now only blocks on initial keepalive message. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1681\" onclick=\"get_ticket_and_populate_wrapper('1681'); return false;\" title=\"shared_port deadlocking\">#1681</a></span> When using TCP to send the keepalive (e.g. when using shared_port), we used to do a blocking connect, which could cause deadlocking. Also added up to 3 retries in all cases rather than only retrying in initial case.  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2011-Feb-01 16:36", "status": "resolved", "created": "2010-Sep-28 15:20", "fixed_version": "2010-Sep-28 15:20", "broken_version": "v070500", "priority": "4", "subsystem": "", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "dan@hep.wisc.edu", "due_date": ""}