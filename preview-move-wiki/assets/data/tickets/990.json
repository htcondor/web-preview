{"id": 990, "title": "Ticket #990: Address new ClassAds performance concerns", "description": "<blockquote>\n<span class=\"section\"><h2>Summary of new ClassAds Optimization Task</h2></span>\n\n<p>This is one of the identified flightworthy development activities for 7.5.\n\n</p><p>Current people assigned to work on this: Jim Hill and Dan Bradley\n\n</p><p>As shown in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=227\" onclick=\"get_ticket_and_populate_wrapper('227'); return false;\" title=\"Benchmark new classads vs. old\">#227</a></span>, new classads performs about 5x slower matchmaking and 1-2x slower in instantiating real job and machine ads.  Our job is to figure out why and if possible fix it.\n\n</p><p><span class=\"section\"></span></p><h2>Tasks and Due Dates</h2>\n\n<p></p><ol>\n<li>2009-12-4 [DONE]: Profile the benchmarks and understand where the CPU time is being spent.\n\n<p></p></li><li>2009-12-18 [DONE]: Optimize algorithms identified as problematic.\n\n<p></p></li><li>2010-01-08: (Jim) Add tests of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=FlattenAndInline\" title=\"Flatten And Inline\">FlattenAndInline</a></span> to classad_functional_tester.\n\n<p></p></li><li>Once integration of new classads into Condor is done, run performance tests of full Condor system (e.g. submit 100k jobs, drain 100k queue) and see if there are any performance issues relating to the new classad integration.\n\n<p></p></li><li>Optimize again if needed.\n</li></ol>\n\n<p><span class=\"section\"></span></p><h2>Matchmaking Optimizations</h2>\n\n<p>How much slower new <code>ClassAds</code> is than old <code>ClassAds</code> is reported here for each optimization.  The comparison was done using the loop times for <code>cabench_query-newlist</code>.  How much difference each optimization makes depends on the order in which they are applied in some cases.  I'm just reporting what I observed when applying optimizations in the following order:\n\n</p><p></p><ol>\n<li>4.8x: no optimization\n\n<p></p></li><li>3.9x: using hash_map for <code>AttrList</code>\n\n<p></p></li><li>1.8x: compiling with -O2 (1.7x for -O3, which doesn't seem worth it).  It is interesting to note that old classads is not helped much by compiler optimization.  I think it is the STL code in new classads that benefits so much from optimization.\n\n<p></p></li><li>1.4x: using max depth instead of <code>EvalState</code> cache.\n\n<p></p></li><li>0.72x: <code>FlattenAndInline</code> machine requirements before matchmaking.  Without special attention to references to \"MY\" this was 0.84x in my tests.\n\n<p></p></li><li>0.62x: Optimize structure of the match ad and flatten references to TARGET to a single global-scope lookup.\n\n<p></p></li><li>0.39x: Add short-circuiting in &amp;&amp; and || operators.\n</li></ol>\n\n<p>Conclusion: It seems a good idea to \"flatten\" the requirements expressions before matchmaking, since they will usually be evaluated multiple times.  This, in combination with the other optimizations allows us to do matchmaking at a faster rate than with old <code>ClassAds</code>.\n\n</p><p>TODO: I noticed that flattening does not simplify some expressions such as (true &amp;&amp; X --&gt; X where X is some boolean expression).  It may be worth making it smarter.  Ideally, the flattening would happen before the ads are sent to the collector, saving a little cpu time in the central manager.  However, it doesn't appear to make a big difference.  Inlining might bloat memory usage a bit (6% in our test), but further simplification could help counter that.  To reduce memory usage, it might be worth flattening (but not inlining) all attributes other than requirements.\n\n</p><p><span class=\"section\"></span></p><h2>Parser Optimizations</h2>\n\n<p>How much slower new <code>ClassAds</code> is than old <code>ClassAds</code> is reported here for each optimization.  The comparison was done using the setup time for <code>cabench_query-newlist</code>.  How much difference each optimization makes depends on the order in which they are applied in some cases.  I'm just reporting what I observed when applying optimizations in the following order:\n\n</p><p></p><ol>\n<li>1.7x: no optimizations\n\n<p></p></li><li>1.4x: optimize <code>ClassAd::Insert()</code> to use single-lookup insertion method.\n\n<p></p></li><li>1.5x: using hash_map for <code>AttrList</code>.\n\n<p></p></li><li>0.85x: compiling with -O2\n\n<p></p></li><li>0.89x: <code>FlattenAndInline</code> machine requirements before matchmaking.  Inlining caused 6% increase in memory usage.\n</li></ol>\n\n<p>Conclusion: the optimizations we did to improve matchmaking did not hurt parsing speed.  Individually, some of them slow down parsing slightly, but overall parsing is faster.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Dec-02 17:26:40 by danb:</em> <br/>\n\n<span class=\"section\"><h2>Observations </h2></span>\n\n<p>We looked at the following using callgrind:\n\n</p><p></p><pre>  cabench_query-newlist --enable-2way 3 collector.ads-new 10000 '[Requirements = (target.Arch == \"X86_64\"); JobUniverse = 5; MyType = \"Job\"; TargetType = \"Machine\"]'\n</pre>\n\n<p><span class=\"subsection\"></span></p><h3>looking up attributes</h3>\n\n<p>Matchmaking in new <code>ClassAds</code> spends about 30% of its time looking up attributes in <code>ClassAds</code>.\n\n</p><p>In the 1.2 million calls to <code>ClassAd::Lookup()</code>, there are 6.4 million calls to <code>strcasecmp()</code>.  The <code>AttrList</code> data structure is an stl map, which is implemented as a balanced tree, so I would expect O(log(N)) string comparisons per lookup.  The machine ads in this sample have ~160 attributes, and log2(160)=7.3, which is close to the observed ratio of 5.3 string compares/lookup calls.\n\n</p><p>Question: would it be better to use a hash table here?  Old classads uses a hash table.  Matchmaking with new <code>ClassAds</code> is about 4.5x slower than old.  In new <code>ClassAds</code> we observe 5x as many string compares as lookups in this benchmark.  Since we only spend 30% of our time in lookups, I'm being sloppy to suggest that the 4.5x slowdown is due to the 5x string compares, but it is still a tempting comparison to make.\n\n</p><p>Also: in some simple tests I did, strcasecmp() is ~60 times more expensive than strcmp().  If we could figure out how to canonicalize strings without hurting memory size too much, this could be a big win.\n\n</p><p><span class=\"subsection\"></span></p><h3>state cache</h3>\n\n<p>In <code>AttributeReference::_Evaluate()</code>, there is some stuff that looks things up and adds things to state.cache.  This consumes ~30% of the matchmaking time.  The intention is to prevent infinite recursion due to recursive references and to speed up evaluation when there are multiple references to the same thing.  I suspect that the overhead of copying evaluation results into the cache is greater than the typical savings from reusing those results.  If we get rid of the cache, we would just need some way of preventing infinite recursion.  This could be done with a simple depth counter and a fixed maximum depth, or it could be done with something like the existing solution (using a set or hash data structure) but without the overhead of caching the evaluated results.\n\n</p><p><span class=\"subsection\"></span></p><h3>insertion into map/hash</h3>\n\n<p>The existing pattern for inserting attributes into <code>ClassAds</code> and the eval state cache is to first search for an existing entry using find(), remove it if there is one, and then insert.  It should be more efficient to attempt to insert and if this fails due to an existing entry to modify the entry returned by insert() (i.e. only one lookup in all cases).\n\n</p><p></p><hr/>\n<em>2009-Dec-10 17:37:42 by danb:</em> <br/>\n\nI just found a big memory leak in the Flatten() code.  This makes me less confident that this code has been rigorously tested.  If we are to trust it, I think we need to create a suite of tests that check the validity of the flattened expressions.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1773\" onclick=\"get_ticket_and_populate_wrapper('1773'); return false;\" title=\"condor_q is significantly slower due to new classads\">#1773</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ncondor_q is significantly slower due to new classads</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-18 14:11</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17279\">[17279]</a></span>: Use cached match ad everywhere in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> compat layer. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span> Also consolidate insertion and removal of ads from the match ad.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-12 14:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17225\">[17225]</a></span>: Added target type checking back in IsAHalfMatch (removed by my recent commit b2a95fd). <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span> Also fixed a bug in the target type checking where it would crash if the type name in either ad was NULL.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-09 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17152\">[17152]</a></span>: Added short circuiting for &amp;&amp;, ||, and ? operators. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-09 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17153\">[17153]</a></span>: Added convenience functions to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MatchClassAd\" title=\"Match Class Ad\">MatchClassAd</a></span> interface. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-09 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17154\">[17154]</a></span>: Improved efficiency of classad compatibility matchmaking functions. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-09 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17155\">[17155]</a></span>: Negotiator optimizes ads for matchmaking. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-09 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17150\">[17150]</a></span>: Fixed a bug in the matchmaking requirements optimization. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span> References to the right ad from the left ad were broken due to a typo.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-09 16:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17151\">[17151]</a></span>: Fixed a bug in FlattenAndInline() that caused all function calls to fail! <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-04 16:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17101\">[17101]</a></span>: Fix hash_map instantiaion in new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> on Windows. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span> The hash_map template on Windows wants a less-than comparison function, not an equal-to function.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jan-11 17:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16864\">[16864]</a></span>: Fix hash_map usage in new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> on Windows. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span> The hash_map implementation varies slightly between gcc and Windows.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-17 15:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16712\">[16712]</a></span>: Fixed problem introduced in optimization of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MatchClassAd\" title=\"Match Class Ad\">MatchClassAd</a></span>. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span> Some users of this class (such as View) assume the left and right ads are initialized to non-null values.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 17:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16716\">[16716]</a></span>: Simplify machine ad before matchmaking. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16711\">[16711]</a></span>: Fixed memory leak in Flatten(). <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16710\">[16710]</a></span>: Switched <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AttrList\" title=\"Attr List\">AttrList</a></span> to using hash_map. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16707\">[16707]</a></span>: Optimized new classad hash functions. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16706\">[16706]</a></span>: Add option to optimize left/right ads to be inserted into matchClassAd. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16705\">[16705]</a></span>: Flatten expr in attribute references of form expr.attribute. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16704\">[16704]</a></span>: Optimized references to ads in the match classad. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16703\">[16703]</a></span>: Removed <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EvalState\" title=\"Eval State\">EvalState</a></span> cache. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16702\">[16702]</a></span>: Using single-lookup insert method in attrref <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EvalCache\" title=\"Eval Cache\">EvalCache</a></span> insertion. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16701\">[16701]</a></span>: Compile new classads with -O2. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Dec-15 15:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=16700\">[16700]</a></span>: Using single-lookup insert method in ClassAd::Insert(). <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=990\" onclick=\"get_ticket_and_populate_wrapper('990'); return false;\" title=\"Address new ClassAds performance concerns\">#990</a></span>  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Mar-19 14:08", "status": "resolved", "created": "2009-Nov-20 12:27", "fixed_version": "2009-Nov-20 12:27", "broken_version": "v070500", "priority": "4", "subsystem": "Libs", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "other", "visibility": "public", "notify": "jshill4@cs.wisc.edu,tannenba@cs.wisc.edu", "due_date": "20100108"}