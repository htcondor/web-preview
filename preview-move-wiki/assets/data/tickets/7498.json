{"id": 7498, "title": "Ticket #7498: Opt-in printing of job event log as JSON records", "description": "<blockquote>\nProposal: it would be convenient if admins/users could opt-in to printing their job event logs as JSON records instead of as formatted text (the current behavior). JSON is a nice format for this because it balances human readability with much easier, more flexible, and backwards-compatible parsing. Plus, you don't need <strong>our</strong> library code to parse it!\n\n<p>I am imagining a config knob <code>JOB_EVENT_LOG_FORMAT</code> (<code>USER_JOB_EVENT_LOG_FORMAT</code>?), as well as a submit-level override <code>job_event_log_format</code> (or perhaps <code>log_format</code>, to match the existing <code>log</code> command). The values for this knob would be <code>VERBOSE</code> (?) or <code>JSON</code>.\n\n</p><p>Each record should contain two keys: one to hold \"event\" information, like the type of the event, the timestamp, a human-readable cause, etc; and one to hold a user-defined projection of the job ad at the time of event. It would be convenient if we supported both a whitelist and a blacklist mode for the projection, so that it's easy to specify a small, human-readable set, or to exclude certain things if you're just slurping them up into a database.\n\n</p><p>This format is easily extensible to events that don't concern a single job. For example, a cluster or set-level event could produce a record with a \"cluster_ad\" key instead of a \"job_ad\" key (perhaps they should both just be \"ad\"; the point is that we can provide the right ad for the event type).\n\n</p><p>To maintain a degree of human-readability, the JSON format should be reasonably verbose, something like\n</p><div class=\"code\">\n<pre class=\"code\">{ # one event\n    \"event\": {\n        \"code\": 7\n        \"cause\": \"job was held\",\n        \"holdReason\": \"you messed up real bad\",\n        \"timestamp\": 12345678,\n        # any other details coming from the event architecture itself...\n    },\n    \"job_ad\": {\n        \"ClusterId\": 1234,\n        \"ProcId\": 42,\n        # user/admin-set projection of job ad follows...\n    }\n}\n{ # next event\n    # contents...\n}\n</pre></div>\n\n\n<p></p><div class=\"strike\">\n<strike>\nThe JSON output should just be the result of doing JSON conversion on the event classad (which is currently converted into formatted text). ToddM points out that not all the information is in the event ad; things like the timestamp may need to be injected before printing.\n</strike></div>\n (superseded by the paragraph above the example format)\n\n<p>Note the above is not strictly valid JSON (it's not an array of records, it's just records stacked after each other). In Python (for example), parsing these is a little annoying (<a class=\"external\" href=\"https://stackoverflow.com/questions/27907633/multiple-json-objects-in-one-file-extract-by-python/47958749\">https://stackoverflow.com/questions/27907633/multiple-json-objects-in-one-file-extract-by-python/47958749</a>), but not prohibitively so. We would need to point this out clearly in the docs and give strategies for parsing the event log correctly.</p></blockquote>", "remarks": "<blockquote>\n<em>2020-Feb-10 20:39:12 by bbockelm:</em> <br/>\n\nNote the format proposed is basically JSON streaming:\n\n<p><a class=\"external\" href=\"https://en.wikipedia.org/wiki/JSON_streaming\">https://en.wikipedia.org/wiki/JSON_streaming</a>\n\n</p><p>Several libraries handle newline-delimited streams well.  YMMV for the more complex example above.\n\n</p><p></p><hr/>\n<em>2020-Feb-11 08:59:38 by tlmiller:</em> <br/>\n\nIn particular, I think we want \"Concatenated JSON\".  Quoting Wikipedia:\n\n<p>\"The advantage of this format is that it can handle JSON objects that have been formatted with embedded newline characters, e.g., pretty-printed for human readability.\"\n\n</p><p>In particular, it suggests -- and I think we want for readability anyway -- a newline after each object.\n\n</p><p>On the other hand, it seems like it the reader might be easier to code and more resilient to pretty-printing changes if we keep our record separator intact (<code>...\\n</code>):\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">import json\n\n# Warning, terrible Python ahead\ntext = \"\"\nblobs = []\nwith open(\"log\") as file:\n    while True:\n        line = file.readline()\n        if line == \"\":\n            blobs.append(json.loads(text))\n            break\n        elif line == \"...\\n\":\n            blobs.append(json.loads(text))\n            text = \"\"\n        else:\n            text = text + line\n\nfor blob in blobs:\n    print(blob)\n</pre></div>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2020-Feb-11 08:59", "status": "new", "created": "2020-Feb-10 13:04", "fixed_version": "2020-Feb-10 13:04", "broken_version": "", "priority": "4", "subsystem": "DaemonsSubmitNode", "assigned_to": "tlmiller", "derived_from": "", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu, tlmiller@cs.wisc.edu, johnkn@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}