{"id": 6114, "title": "Ticket #6114: Generate and pass runtime configuration to annex instances", "description": "<blockquote>\nIf the instances have the proper software/configuration installed (which we'll want to make an RPM, eventually), and they're running as a compatible IAM role (and we offer a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CloudFormation\" title=\"Cloud Formation\">CloudFormation</a></span> template to create one), then they can securely obtain configuration (including security tokens) from an S3 bucket (which also must be properly configured).  What we'd like to do is (for a certain limited set of situations) automate the process of generating that configuration and uploading it to the S3 bucket in question.\n\n<p>Since we can assume we \"own\" the uploaded file, and S3 <a class=\"external\" href=\"http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\">assures us</a> that partial writes don't happen, we won't worry about rolling back file uploads like we do everything else if something terrible happens.  (In a later version, with a persistent daemon, when the instance-joining delay has passed, we could delete the uploaded file at that point.)\n\n</p><p>In addition to the security configuration, we <em>must</em> pass the annex name in such a way that it will be advertised by both the master and the startd; since the mechanism already handles arbitrary configuration files, this should not be difficult.\n\n</p><p>If it's just as easy, and it probably will be, we'd like to allow the admin (or user) to specify a configuration directory into which we will write additional configuration and security token files.  This will afford admins (or users) an easy way to adjust their condor configuration on a per-annex basis.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jan-31 14:07</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50085\">[50085]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6114\" onclick=\"get_ticket_and_populate_wrapper('6114'); return false;\" title=\"Generate and pass runtime configuration to annex instances\">#6114</a></span>) Bunch of minor fixes, add upload of config tarball.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jan-30 16:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50078\">[50078]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6114\" onclick=\"get_ticket_and_populate_wrapper('6114'); return false;\" title=\"Generate and pass runtime configuration to annex instances\">#6114</a></span>) Create tarball if given example directory.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jan-27 19:03</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50075\">[50075]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6114\" onclick=\"get_ticket_and_populate_wrapper('6114'); return false;\" title=\"Generate and pass runtime configuration to annex instances\">#6114</a></span>) Implement S3 upload back-end.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "experimental", "last_change": "2017-Feb-15 14:46", "status": "resolved", "created": "2017-Jan-30 15:01", "fixed_version": "2017-Jan-30 15:01", "broken_version": "", "priority": "1", "subsystem": "Annex", "assigned_to": "tlmiller", "derived_from": "#6111", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}