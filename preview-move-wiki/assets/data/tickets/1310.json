{"id": 1310, "title": "Ticket #1310: Improving locking reliability of log files", "description": "<blockquote>\nAs described in tickets <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1108\" onclick=\"get_ticket_and_populate_wrapper('1108'); return false;\" title=\"Improving the locking situation of the logging systems\">#1108</a></span> , locking of log files has been an ongoing problem. To approach a solution for that, the following steps will be implemented:\n\n<p></p><ul>\n<li>Creating zero-length lock files in tmp folder on local disk only [*Done*]\n</li><li>Lock file names will be created by computing a hash value from the real path of the name of the file to be locked, such that the file name is guaranteed to be unique [*Done*]\n</li><li>There will exist at most <em>x</em> lock files at a time such that we cannot run into problems by having too many files in one directory [*Done*]\n</li><li>The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=FileLock\" title=\"File Lock\">FileLock</a></span> destructor will delete the file; however, Condor preen should check for forgotten zero-length files, lock them, and delete them periodically</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2010-Aug-17 15:31:07 by tannenba:</em> <br/>\n\nAfter this patch has passed code review, perhaps NEW_LOCKING should be enabled by default, yes?\n\n<p></p><hr/>\n<em>2010-Aug-17 15:41:36 by tannenba:</em> <br/>\n\nCode-review comment - upon a quick glance of the code, looks like the patch introduced a new method <code>FileLock::GetTempPath()</code>.  This method should leverage the functionality provided by the pre-existing function <code>directory.cpp:temp_dir_path()</code>, as it seems like these two methods do very similar work.  Lets have this logic in just one place if possible (and if impossible, a comment explaining why).\n\n<p></p><hr/>\n<em>2010-Aug-17 19:40:45 by matt:</em> <br/>\n\nWill you make the point where locks are consolidated configurable?\n\n<p></p><hr/>\n<em>2010-Aug-19 17:11:06 by gthain:</em> <br/>\n\nIn the preen code, there's the following new code\n\n<p></p><div class=\"code\">\n<pre class=\"code\">+                       while( (file = files-&gt;Next()) &amp;&amp; i &lt; 65536) {\n+                               if(! files-&gt;IsDirectory() ) {\n+                                       const char *path = files-&gt;GetFullPath();\n\n</pre></div>\n\n\n<p>Should that 2nd and 3rd \"files\" be \"file\"?\n\n</p><p></p><hr/>\n<em>2010-Aug-26 13:11:22 by gthain:</em> <br/>\n\nAlso, is NEW_LOCKING defined in the param table?  Before we do, let's pick a better name than NEW_LOCKING.\n\n<p></p><hr/>\n<em>2010-Aug-31 18:14:21 by cweiss:</em> <br/>\n\n@GetTempPath() function: If we used the directory class function, we would create a lot more dependencies for libcondorapi (e.g. directory.o itself and stat_info.o ). We can certainly do that -- at the time I considered it a cleaner approach to not do it, though. Comments on that appreciated. If we decided to stick to the function, I can gladly add a comment in the code why the decision was made to add an additional function for a similar job.\n\n<p></p><hr/>\n<em>2010-Sep-02 17:38:59 by cweiss:</em> <br/>\n\n@Greg's comment: Nope, both should in fact be \"files\". The directory object serves as an iterator here and operates on the \"current\" file it points to (it seems a bit non-intuitive).\n\n<p>NEW_LOCKING is now renamed to CREATE_LOCKS_ON_LOCAL_DISK, default set to true, and the value entered into the param table. There is currently an issue with the DAGMan tests in NMI - once that is solved, I will commit the modified version.\n\n</p><p></p><hr/>\n<em>2010-Nov-24 15:47:57 by matt:</em> <br/>\n\nFrom a side discussion -\n\n<p>The lock files will likely be reused due to directory size concerns. A single lock file may require access from multiple users. A possible solution is to store lock files with 0666. The locking is performed with flock(). Setting 0666 provides a point for users to maliciously lock files. Alternatively,\n\n</p><p></p><ul>\n<li>hash(file) -&gt; hashvalue gets created as .../uid/ha/sh/value\n</li><li>uid is uid of file owner\n</li><li>ownership on lockfile (.../value) is uid with permissions 0644 or less\n</li><li>permissions on lock may match that of file (if explicit sharing is desirable) - stretch goal\n</li></ul>\n\n<p>Problems -\n\n</p><p></p><ul>\n<li>source file changes ownership and the lockfile (.../uid/ha/sh/value) does not\n</li><li>mirroring permissions, source file changes perms and lockfile does not\n</li></ul>\n\n<p></p><hr/>\n<em>2010-Dec-08 13:22:27 by matt:</em> <br/>\n\nQuestion - how does this code behave in cases where the target is removed, say between or during lock calls? what about if the target is recreated?\n\n<p></p><hr/>\n<em>2010-Dec-08 13:37:58 by cweiss:</em> <br/>\n\nWhat's your definition of \"target\"? The log file the lock is held for, or the actual lock file? (In the old code they are the same file -- with the local locks they are not.)\n\n<p></p><hr/>\n<em>2010-Dec-08 13:43:27 by matt:</em> <br/>\n\ntarget as the file the lock is held for, lock(target) -&gt; lockfile = hash(target), lock(lockfile). The \"file\" in our 24 Nov discussion.\n\n<p></p><hr/>\n<em>2010-Dec-08 13:52:06 by cweiss:</em> <br/>\n\nThe lock file object does not track deletion of the origin. If the origin were to be deleted and recreated between lock calls, it would not matter - it does not hold a reference to the origin's fd -- the only reference it has is a file name. Also it never stats the origin.\n\n<p>The instantiating code would be responsible for updating the lock file in case this were necessary (in case of a rename of the origin).\n\n</p><p></p><hr/>\n<em>2010-Dec-16 08:09:16 by matt:</em> <br/>\n\nA little strace fun...\n\n<p>NOTE: This is a patched 7.4.5 condor_submit\n\n</p><p></p><div class=\"verbatim\">\n<pre>$ echo 'cmd=/bin/true\\nlog=/tmp/true.log\\nqueue' | strace -e open,fcntl,unlink,rmdir,mkdir,write condor_submit\n[snip linker]\n[snip config]\n[snip schedd connect and auth]\nopen(\"/tmp/true.log\", O_RDWR|O_CREAT|O_EXCL|O_APPEND, 0664) = 4\nfcntl(4, F_GETFL)                       = 0x8402 (flags O_RDWR|O_APPEND|O_LARGEFILE)\n[snip stdout]\nopen(\"/tmp/true.log\", O_WRONLY|O_CREAT|O_EXCL|O_APPEND, 0664) = -1 EEXIST (File exists)\nopen(\"/tmp/true.log\", O_WRONLY|O_APPEND) = 0\nfcntl(0, F_GETFL)                       = 0x8401 (flags O_WRONLY|O_APPEND|O_LARGEFILE)\nopen(\"/tmp/condorLocks/12/03/500/635467.lockc\", O_RDWR|O_CREAT|O_EXCL, 0644) = -1 ENOENT (No such file or directory)\nmkdir(\"/tmp\", 0777)                     = -1 EEXIST (File exists)\nopen(\"/tmp/condorLocks/12/03/500/635467.lockc\", O_RDWR|O_CREAT|O_EXCL, 0644) = -1 ENOENT (No such file or directory)\nmkdir(\"/tmp/condorLocks\", 0777)         = 0\nopen(\"/tmp/condorLocks/12/03/500/635467.lockc\", O_RDWR|O_CREAT|O_EXCL, 0644) = -1 ENOENT (No such file or directory)\nmkdir(\"/tmp/condorLocks/12\", 0777)      = 0\nopen(\"/tmp/condorLocks/12/03/500/635467.lockc\", O_RDWR|O_CREAT|O_EXCL, 0644) = -1 ENOENT (No such file or directory)\nmkdir(\"/tmp/condorLocks/12/03\", 0777)   = 0\nopen(\"/tmp/condorLocks/12/03/500/635467.lockc\", O_RDWR|O_CREAT|O_EXCL, 0644) = -1 ENOENT (No such file or directory)\nmkdir(\"/tmp/condorLocks/12/03/500\", 0777) = 0\nopen(\"/tmp/condorLocks/12/03/500/635467.lockc\", O_RDWR|O_CREAT|O_EXCL, 0644) = 3\nfcntl(3, F_SETLKW, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}) = 0\nwrite(0, \"000 (073.000.000) 12/16 09:02:39\"..., 84) = 84\nfcntl(3, F_SETLKW, {type=F_UNLCK, whence=SEEK_SET, start=0, len=0}) = 0\n[snip stdout]\nfcntl(3, F_SETLKW, {type=F_WRLCK, whence=SEEK_SET, start=0, len=0}) = 0\nunlink(\"/tmp/condorLocks/12/03/500/635467.lockc\") = 0\nrmdir(\"/tmp/condorLocks/12/03/500\")     = 0\nrmdir(\"/tmp/condorLocks/12/03\")         = 0\nrmdir(\"/tmp/condorLocks/12\")            = 0\nfcntl(3, F_SETLKW, {type=F_UNLCK, whence=SEEK_SET, start=0, len=0}) = 0\n[snip stdout]\nfcntl(3, F_GETFL)                       = 0x2 (flags O_RDWR)\nfcntl(3, F_SETFL, O_RDWR|O_NONBLOCK)    = 0\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-Dec-16 08:17:56 by matt:</em> <br/>\n\nCathrin - Could the cleanup code also cleanup the condorLocks dir? It looks like the construction code will recreate it.\n\n<p>Thought from premature optimization-ville, it may be more efficient to mkdir+open from right to left. Of course, that would assume sharing, which is probably undesirable. Or mkdir until EEXIST and then try open, which would reduce open calls in the common case of no sharing.\n\n</p><p></p><hr/>\n<em>2010-Dec-16 12:25:00 by matt:</em> <br/>\n\nNOTE: The hash algorithm appears to be an enhancement on SDBM that generates a string between 6 and 10 characters in length (in a buffer that's 256 chars). The length could not be &lt; 5 characters else it would not be separable for dir names.\n\n<p></p><hr/>\n<em>2010-Dec-16 13:23:56 by cweiss:</em> <br/>\n\nJust a few comments on the comments:\n\n<p></p><ul>\n<li>Yes, I can include the condorLocks dir.\n</li><li>Doing the directory creation from right to left will double the number of calls to mkdir if the directories do not exist. I already considered that (also the \"repeat until you hit EEXIST and then go back from there\"). I'm not sure what is the best way to go -- each option is optimal for some scenarios and suboptimal for others.\n</li><li>re: hash algorithm, yup, improved SDBM (as used in Berkeley DB) with low collision rate. I did not spent much thought on the length of the hash value, just wanted to make sure the number of character is in fact larger than 5. 256 positions is overkill -- that can be changed too.\n</li></ul>\n\n<p></p><hr/>\n<em>2010-Dec-16 13:59:17 by matt:</em> <br/>\n\nFYI, I ran a variant of the hash function (no uid) on a set of 55K real <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=UserLog\" title=\"User Log\">UserLog</a></span> values and had no collisions.\n\n<p></p><hr/>\n<em>2010-Dec-16 16:27:30 by matt:</em> <br/>\n\nFileLock::Obtain will return false on an error, indicating the lock attempt failed.\n\n<p>Obtaining a lock -\n\n</p><p>lock or except - condor_master, condor_job_router, ReadUserLog::Lock (all but readEventOld)<br/>\n\ntry lock and ignore - ReadUserLog::readEventOld (lots of: if locked then release), WriteUserLog::doWriteEvent<br/>\n\ntry lock and log - condor_preen, WriteUserLog::*Global* (EVENT_LOG write attempts skipped, log messages aren't all useful)<br/>\n\n\n</p><p>ReadUserLog::readEventOld is called for all non-XML log reads!<br/>\n\nWriteUserLog::doWriteEvent is the common path for writing events!\n\n</p><p>Open question - does writing an XML entry attempt to lock?\n\n</p><p>It is dangerous to fail the lock and continue. This situation is not introduced by the new code here. The new code actually introduces 5 attempts, previous code would attempt once. The attempts are safe from signal interrupts.\n\n</p><p></p><hr/>\n<em>2010-Dec-17 10:21:37 by bbockelm:</em> <br/>\n\nHi Catherin,\n\n<p>I don't think check-in <span class=\"chng\"><a href=\"chngview?cn=19589\">[19589]</a></span> always works as advertised.  You use \"getuid\" (if the schedd is started as root, this is always 0); you probably want to use \"geteuid\" (for the schedd case, this is the user running the job).\n\n</p><p>For daemon cases like the schedd locking, is it possible to:\n</p><ul>\n<li>Have all lock files owned by user \"condor\".\n</li><li>Put in the admin-defined lock directory.\n</li></ul>\n\n<p>I can understand why these two points wouldn't apply for the case of user submits.\n\n</p><p>Another note - if you change the hashing algorithm to UID/ab/cd/efg, we would avoid lots of world-writable directories.  That would make me more comfortable with the scheme, even if it's at the cost of a significant number of inodes.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2010-Dec-17 10:23:30 by matt:</em> <br/>\n\nAnother request - make condorLocks location (and name) it's own configuration variable\n\n<p></p><hr/>\n<em>2010-Dec-17 10:57:13 by matt:</em> <br/>\n\nUse of getuid vs file owner's uid is definitely a problem.\n\n<p>Submitting two jobs with the same <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=UserLog\" title=\"User Log\">UserLog</a></span> (/tmp/sleep0) results in condor_submit opening and locking /tmp/condorLocks/38/91/500/760032.lockc whereas condor_schedd (run as root) locks /tmp/condorLocks/38/91/0/760032.lockc\n\n</p><p>We can't guarantee all processes writing to the log will have the same uid. Especially if dagman does some writing.\n\n</p><p></p><hr/>\n<em>2010-Dec-17 11:06:10 by cweiss:</em> <br/>\n\nCREATE_LOCKS_ON_LOCAL_DISK = False\n\n<p></p><hr/>\n<em>2010-Dec-17 11:52:19 by matt:</em> <br/>\n\n<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=GetTempPath\" title=\"Get Temp Path\">GetTempPath</a></span> has a path==NULL test which can never be true, which is good because it would result in a delete []NULL in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=CreateHashName\" title=\"Create Hash Name\">CreateHashName</a></span>.\n\n<p></p><hr/>\n<em>2010-Dec-17 13:59:51 by matt:</em> <br/>\n\nCathrin, I've attached a patch to use the LOCK param as a home for locks, before calling back to TMP_DIR/TEMP_DIR and /tmp/condorLocks. If you're ok with it I'll push.\n\n<p></p><hr/>\n<em>2010-Dec-17 14:03:32 by cweiss:</em> <br/>\n\nFWIW: Go ahead and use the $LOCK directory -- but typically this one has only condor user R/W permissions (and that purposely so, since you don't want anybody to mess with <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=InstanceLock\" title=\"Instance Lock\">InstanceLock</a></span> and Co).\n\n<p>Sources: for example $LOCK in CHTC\n\n</p><p></p><hr/>\n<em>2010-Dec-17 14:06:45 by cweiss:</em> <br/>\n\nAppended the last remark before I saw the previous one. I don't think I am ok w/ pushing, because for many pools you will break the use of local locking then entirely because users don't have permission to write into $LOCK.\n\n<p></p><hr/>\n<em>2010-Dec-17 14:17:01 by matt:</em> <br/>\n\nHow about LOCAL_DISK_LOCK_DIR? Those inclined can set it to something along the lines of $LOCK/local, which will be a tmp-like directory (a+rwxt).\n\n<p></p><hr/>\n<em>2010-Dec-20 15:11:50 by matt:</em> <br/>\n\nI've added LOCAL_DISK_LOCK_DIR (also to the param table) and removed the uid.\n\n<p></p><hr/>\n<em>2010-Dec-23 10:24:57 by matt:</em> <br/>\n\nFYI, update on the 55K hashes, actually 54,661 and there were 7 collisions\n\n<p></p><hr/>\n<em>2010-Dec-28 14:00:47 by bbockelm:</em> <br/>\n\nIs this patch ready for another round of testing?  I'd like to push it out to a handful of local schedd's during the holiday \"quiet period\".\n\n<p></p><hr/>\n<em>2011-Jan-05 16:46:21 by cweiss:</em> <br/>\n\nI attached a patch that reintroduces the UID idea: now the effective UID, of course. We don't really ever have the scenario where multiple users (effective UID) write to the same file (as discussed with Todd). Thus it makes sense to have the eUID in there. Additionally, go back to stripping the file's hash value mod 10000, use that value as the first directory value, and then the eUID as a directory value. This will limit the number of directories created to 10000 * number of UIDs. Feel free to apply this patch as appropriate.\n\n<p></p><hr/>\n<em>2011-Feb-04 14:33:16 by matt:</em> <br/>\n\nGreg ACKd at FW on 4 Feb 2011, and it's already in master. I'm resolving.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2038\" onclick=\"get_ticket_and_populate_wrapper('2038'); return false;\" title=\"Long file paths corrupt memory in file locking code\">#2038</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nLong file paths corrupt memory in file locking code</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"stalled\" href=\"/tickets?ticket=2650\" onclick=\"get_ticket_and_populate_wrapper('2650'); return false;\" title=\"Fix shortcomings of log file locking code\">#2650</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nFix shortcomings of log file locking code</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/255/0001-Introduced-use-of-LOCK-param-as-first-home-for-local.patch\">0001-Introduced-use-of-LOCK-param-as-first-home-for-local.patch</a>\n1069 bytes added by matt on 2010-Dec-17 19:57:16 UTC.\n<br/>\nPatch to use LOCK param<br/>\n</li><li><a href=\"../files/257/file_lock_added_euid.patch\">file_lock_added_euid.patch</a>\n1142 bytes added by cweiss on 2011-Jan-05 22:47:02 UTC.\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jan-20 09:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=20037\">[20037]</a></span>: Create lock files as 0666 to allow for sharing, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jan-19 18:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=20033\">[20033]</a></span>: Removed the UID in the lock file path name since this may lead to trouble w/ <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DagMan\" title=\"Dag Man\">DagMan</a></span> (I thought this already happened with Matt's change but apparently made it into master and not into 7.5.5). Also made the lock file world r/w. This essentially almost goes back to the original version for the new locking\u00a0[...]\n (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jan-03 12:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19836\">[19836]</a></span>: Completion of process uid removal from local disk lock path, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-28 13:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19809\">[19809]</a></span>: This change seems to improve error messages with the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EventLog\" title=\"Event Log\">EventLog</a></span> we have been seeing for quite a while: before opening the file descriptor to the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EventLog\" title=\"Event Log\">EventLog</a></span> lock file (either the statically defined on or the one created according to local locking rules), switch to Condor user priviledges. Also do in fact\u00a0[...]\n (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-20 15:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19728\">[19728]</a></span>: Introduced use of LOCK param as first home for local lock files, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-20 15:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19729\">[19729]</a></span>: Removed process uid from local disk lock path, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-20 15:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19730\">[19730]</a></span>: Changed LOCK param to LOCAL_DISK_LOCK_DIR for local disk locking, which should be a /tmp-like directory, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-20 15:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19731\">[19731]</a></span>: Added LOCAL_DISK_LOCK_DIR to param table, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>  (By Matthew Farrellee )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-07 13:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19599\">[19599]</a></span>: Added missing functionality to create lock file directory structure upon obtaining a lock if object is already instantiated but the file/directory structure was deleted by another process. (ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>).  (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Dec-06 18:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19589\">[19589]</a></span>: Modified directory structure of where the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=FileLock\" title=\"File Lock\">FileLock</a></span> objects are created in case locking on local disk is active (default). They will now default to TEMP_DIR/condorLocks/ab/cd/uid/efg.lockc, where ab and cd are the first digits of the hash value of the filename of the file to be locked. Directories are\u00a0[...]\n (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-20 15:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25746\">[25746]</a></span>: Fix version history for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span> (bad grammar).  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Oct-19 16:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25743\">[25743]</a></span>: Added a missing version history item for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span> and also adapted the change accordingly in the manual  (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-27 21:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19072\">[19072]</a></span>: The final touch to the local disk file locking: moved various directory functions out of directory.cpp into new file directory_util.cpp in order to use them from there and without having to link directory.o into libcondorapi. Consequently, add directory_util.h as a general header file to directory.h\u00a0[...]\n (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-27 17:42</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=19067\">[19067]</a></span>: The final touch to the local disk file locking: moved various directory functions out of directory.cpp into new file directory_util.cpp in order to use them from there and without having to link directory.o into libcondorapi. Consequently, add directory_util.h to all files using the functions in question.\u00a0[...]\n (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Apr-21 14:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25447\">[25447]</a></span>: added defn for config knob NEW_LOCKING, and edited version history notes about it (gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>)  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Apr-08 10:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25397\">[25397]</a></span>: Documented changes made for <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=843\" onclick=\"get_ticket_and_populate_wrapper('843'); return false;\" title=\"New test: detect excessive CPU usage\">#843</a></span> (Procd log does now know rotation) and <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span> (userLog lock files will optionally be created on local disk).  (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Mar-31 19:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17776\">[17776]</a></span>: This commit introduces an option (setting NEW_LOCKING = true) to have file locking done via creating and locking separate lock files in /tmp (or according to TMP_DIR/TEMP_DIR) on the local disk (see gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span>). The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=FileLock\" title=\"File Lock\">FileLock</a></span> object will delete the lock file when destroyed. However, condor_preen will\u00a0[...]\n (By Cathrin Weiss )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Feb-04 14:33", "status": "resolved", "created": "2010-Mar-26 10:39", "fixed_version": "2010-Mar-26 10:39", "broken_version": "v070000", "priority": "2", "subsystem": "", "assigned_to": "cweiss", "derived_from": "#1108", "creator": "cweiss", "rust": "", "customer_group": "other", "visibility": "public", "notify": "cweiss@cs.wisc.edu matt@cs.wisc.edu tstclair@redhat.com", "due_date": "20100330"}