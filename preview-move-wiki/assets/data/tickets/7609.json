{"id": 7609, "title": "Ticket #7609: Submit.queue_with_itemdata() segfaults if iterator raises an exception", "description": "<blockquote>\n<a class=\"external\" href=\"https://www-auth.cs.wisc.edu/lists/htcondor-users/2020-April/msg00076.shtml\">Paul Skopnik reports on HTCondor-users</a>:\n\n<p></p><hr/>\nThe Submit.queue_with_itemdata method causes a segmentation fault when\nthe iterator passed raises an exception during <code>next(it)</code>.\n<code>Submit.queue_with_itemdata()</code> should check whether an exception occurred\nduring <code>next(it)</code> and pass on this exception to its Python caller.\n\n<p>Minimal reproducible example:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">import htcondor\n\ndef my_it():\n    raise Exception()\n    yield {}\n\nsub = htcondor.Submit()\nschedd = htcondor.Schedd()\n\nwith schedd.transaction() as txn:\n    result = sub.queue_with_itemdata(txn, itemdata=my_it())\n</pre></div>\n\n\n<p></p><hr/>\nI'd love if we could re-raise the exception that is raised inside the iterator instead of our generic <code>RuntimeError</code>.\n\n<p>Further update from Paul:\n\n</p><p></p><hr/>\nI discovered further details about the bug while attempting a\nworkaround. I believe there are two separate but related issues.\n\n<p>## No 1: Segfault during queue_with_itemdata\n\n</p><p>The segmentation fault is caused not by the exception inside next(it)\nbut by the Iterator yielding no elements (\"length\" of 0).\n\n</p><p>This code causes a segfault:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">import htcondor\n\nsub = htcondor.Submit()\nschedd = htcondor.Schedd()\n\nwith schedd.transaction() as txn:\n    result = sub.queue_with_itemdata(txn, itemdata=iter([]))\n</pre></div>\n\n\n<p>## No 2: Late checking for exception\n\n</p><p>This is not a bug from a user perspective, but might be a programming issue.\n\n</p><p>The reason for the segfault in my original example is, that there is no\nimmediate check whether an exception occurred during iteration. Hence,\nPyIter_Next returning NULL is interpreted as the iterator being exhausted.\n\n</p><p>The exception is then detected and raised to the caller later on. This\ncan be seen in this code which sort of <strong class=\"two\">works as expected</strong>:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">import htcondor\n\ndef my_it():\n    yield {'executable': '/bin/ls'}\n    raise Exception()\n\nsub = htcondor.Submit()\nschedd = htcondor.Schedd()\n\nwith schedd.transaction() as txn:\n    result = sub.queue_with_itemdata(txn, itemdata=my_it())\n</pre></div>\n\n\n<p></p><hr/>\n</blockquote>", "remarks": "<blockquote>\n<em>2020-Apr-20 08:47:27 by tannenba:</em> <br/>\n\nPerhaps this same bug also exists in v8.8 series?\n\n<p></p><hr/>\n<em>2020-Apr-20 08:55:41 by karpel:</em> <br/>\n\nGood catch; it does at least appear in v8.8.8, so I've marked it as such, and changed the fixed version to v8.8.9 (but I imagine it was broken in the entire 8.8 series).\n\n<p></p><hr/>\n<em>2020-Apr-27 16:59:40 by tlmiller:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>Looks good to me.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Apr-23 18:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59459\">[59459]</a></span>: fix <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7609\" onclick=\"get_ticket_and_populate_wrapper('7609'); return false;\" title=\"Submit.queue_with_itemdata() segfaults if iterator raises an exception\">#7609</a></span> python queue_with_itemdata segfault  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2020-Apr-27 17:00", "status": "resolved", "created": "2020-Apr-20 08:24", "fixed_version": "2020-Apr-20 08:24", "broken_version": "v080808", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "johnkn", "derived_from": "", "creator": "karpel", "rust": "", "customer_group": "users", "visibility": "public", "notify": "paul@skopnik.me, karpel@wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}