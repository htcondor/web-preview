{"id": 7456, "title": "Ticket #7456: Fix fine-grained token auth with ALLOW and alternate permissions", "description": "<blockquote>\nIn 8.9.3 (ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7006\" onclick=\"get_ticket_and_populate_wrapper('7006'); return false;\" title=\"Add support for a token request workflow\">#7006</a></span>), we allowed daemon core to implicitly give the ALLOW authorization to fine-grained tokens, even if it's not listed in the token's scopes (the idea being that ALLOW is always allowed).\n\n<p>However, it appears this broke in the handling of alternate permission levels in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7225\" onclick=\"get_ticket_and_populate_wrapper('7225'); return false;\" title=\"Allow ADVERTISE_* level authz to register with CCB, maybe others.\">#7225</a></span>; if ALLOW only shows up in the alternate permission, then daemon_command.cpp requires it to show up in the token.\n\n</p><p>Marking this as a regression in 8.9.4.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Dec-31 08:34:07 by bbockelm:</em> <br/>\n\nIt appears there's a similar issue with <code>Sock::isAuthorizationInBoundingSet</code>; however, it's not possible to trigger any bug in that method.\n\n<p>We should still fix the issue as it might bite someone in the future.\n\n</p><p></p><hr/>\n<em>2020-Jan-15 14:42:22 by tlmiller:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>This looks good to me, but I don't know enough about the alternate permissions table to say if it makes sense.  Holding off on the merge for now.\n\n</p><p></p><hr/>\n<em>2020-Feb-01 14:48:27 by bbockelm:</em> <br/>\n\nComing back to this - did you have any particular question on the alternate perms table?\n\n<p>Basically, if there are more than one permission levels the command is registered with, we need to use a specific permission level to build the security policy.  So, suppose we have something that is accessible via DAEMON and WRITE - which security policy do we use?  Instead of trying to do a merge of two policies, one permission level becomes the \"primary\" (and that security policy is used) and the other(s) becomes the \"alternate(s)\".\n\n</p><p>So, let's say you have a command (such as requesting tokens) that you want to enable for EVERYONE but want to use a specific security policy (such as DAEMON); for example, you may want the ALLOW authorizations but distrust the CLAIMTOBE that the admin set for ALLOW and instead use the authentication methods for DAEMON.  In such a case, you set the primary auth to DAEMON and alternate to ALLOW.\n\n</p><p>That gets to this bug -- all TOKENs are assumed to have the ALLOW authorization.  We currently only check if the primary auth'z is set to ALLOW; if the alternates are set to allow, they are ignored.  The change in this branch tracks to see if any of the alternate permissions are ALLOW and, if so, accepts the TOKEN.\n\n</p><p></p><hr/>\n<em>2020-Feb-03 15:10:05 by tlmiller:</em> <br/>\n\nSo the previous HTCondor solution to wanting multiple authorization levels -- for instance, with the queue management commands -- was to \"upgrade\" the security of the connection once the appropriate level was determined.  That approach won't work with single-authorization-level TOKENs because daemon core will reject them at the lower authorization level.  (For instance, an ADVERTISE_SCHEDD token doesn't -- and we don't want it to -- include a WRITE authorization.  Without it, daemon core will reject the WRITE-level connection before the command handler is called and can do the \"upgrade\".)  Instead of carrying around an otherwise-unnecessary authorization and requiring the client know to use it for certain commands, we instead updated daemon core to check the \"alternate\" table for the ALLOW/DENY lists of other authorization levels.  This check ignores the other authorization levels' methods (preventing privilege escalation).\n<hr/>\n<em>2020-Apr-10 07:46:37 by tim:</em> <br/>\n\nBulk change of target version from v080906 to v080907 using ticket-target-mover.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-May-02 22:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/b7f135c9a0ae0ee7f3c5881f2bc0bfd0a59e5f20\">[59562]</a></span>: Document bugfix for regression. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7456\" onclick=\"get_ticket_and_populate_wrapper('7456'); return false;\" title=\"Fix fine-grained token auth with ALLOW and alternate permissions\">#7456</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Dec-31 08:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/35c98fbd69201e51487e730aba63425f13e769ad\">[58888]</a></span>: Add ALLOW authorization to bounding set check. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7456\" onclick=\"get_ticket_and_populate_wrapper('7456'); return false;\" title=\"Fix fine-grained token auth with ALLOW and alternate permissions\">#7456</a></span> This always adds the ALLOW authorization to the bounding set check. It doesn't appear any reasonable use of the method looks for ALLOW (the only possible case is if someone registers config changes at at the ALLOW level), meaning this shouldn't change\u00a0[...]\n (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Dec-31 08:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/baabac8a64d62ff5cab034967a8c445224bd9090\">[58887]</a></span>: Implicitly add ALLOW permission to tokens. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7456\" onclick=\"get_ticket_and_populate_wrapper('7456'); return false;\" title=\"Fix fine-grained token auth with ALLOW and alternate permissions\">#7456</a></span> The behavior to add ALLOW permissions (introduced in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7006\" onclick=\"get_ticket_and_populate_wrapper('7006'); return false;\" title=\"Add support for a token request workflow\">#7006</a></span>) was not carried over to the alternate permissions approach added in  (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2020-May-02 22:34", "status": "resolved", "created": "2019-Dec-31 08:14", "fixed_version": "2019-Dec-31 08:14", "broken_version": "v080904", "priority": "2", "subsystem": "Security", "assigned_to": "bbockelm", "derived_from": "#7445", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelman@morgridge.org, tlmiller@cs.wisc.edu", "due_date": ""}