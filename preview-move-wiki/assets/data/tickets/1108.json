{"id": 1108, "title": "Ticket #1108: Improving the locking situation of the logging systems", "description": "<blockquote>\nThe different logging systems have different file locking strategies for log file access and rotation. Some of them cause problems in shared file systems (such as NFS). The goal is to design the new unified logging system in a way, such that locking does not constitute a point of failure anymore.\n\n<p>A quick overview of the current locking strategies:\n\n</p><p></p><hr/>\n<strong>History files :</strong>\n<hr/>\n- write  : No actual locking. Solely a reference counter assures that all started write processes will also be finished before closing.\n\n<p></p><pre>\t- AppendHistory(ClassAd *)  // condor_c++_util/classadHistory.cpp\n\t\t-&gt; OpenHistoryFile() // -- \" --\n\t\t  -&gt; safe_open_wrapper (if not open yet) + refCount increase\n\t\t-&gt; fwrite\n                -&gt; RelinquishHistoryFile() : decrease of refCount after\n\t\tsuccessfully finished write process\n\t -  CloseHistoryFile() : makes sure that refCount is 0\n</pre>\n\n<p>- rotation :  File is simply renamed. This assures that the file is\n  closed at the time (therefore the last write process was finished; otherwise\n  it wouldn't be closed, according to the close-file semantics)\n\n</p><p></p><pre>      - int rotate_file(const char *old_filename, const char *new_filename)\n\t( condor_util_lib/rotate_file.c )\n</pre>\n\n<p></p><hr/>\n<strong>dprintf :</strong>\n<hr/>\n- write  : mutex/critical section for every write process; seems to have a\n  queue for waiting messages\n\n<p>- rotation  :  rename of the old file; creation of a new one\n\n</p><p></p><hr/>\n<strong>Event-/User-Logs :</strong>\n<hr/>\n- write :\n\tEvent file is opened with either locking en- or disabled. If enabled,\n\ta lock file is created that indicates that the file is accessed.\n\tIf disabled, a fake lock will be created to simplify API usage; no\n\teffect on read/write access.\n\n<p></p><pre>\t ( condor_c++_util/write_user_log.cpp )\n\t - WriteUserLog::openFile(  const char *file, bool log_as_user, bool\n\t   use_lock, bool append, FileLockBase *&amp;lock, FILE *&amp;fp )\n\t   -&gt; uses condor_includes/file_lock.h API for creating a lock file\n\t   and managing thereof\n\t - Write processes in WriteUserLog class obtain a WRITE_LOCK prior to\n\t   writing to the file.\n</pre>\n\n<p>- rotation : separate lock file (same API) as for \"write\". The lock file is already\n  created in the Configure() process and cannot be turned off (makes sense).\n  An actual lock status is obtained during the write process before rotation\n  takes place (the actual rotation function does not deal with locking) and\n  released after.\n\n</p><p></p><hr/>\n<hr/>\n<strong>BENCHMARKS</strong>\n<hr/>\n<em>average dprintf call with locking (personal Condor):</em>  0.03 ms\n\n<p><em>Event logs (average) including write process (personal Condor) :</em> 0.13 ms\n<br/>\n(max values around 1 ms)\n\n</p><p></p><hr/>\n<strong>API suggestions</strong>\n<hr/>\nEssentially two options: either stick to integrated logging functions of one logging class or let a separate logging daemon handle all logging-related things.\n\n<p><strong>(1) Logging daemon:</strong>\n\n</p><p>- Pro: Locking question becomes obsolete, because only one process will ever access file\n- Con: Daemon independence is not guaranteed; what happens if logging daemon is down?\n\n</p><p>Assumption: something like syslog will manage the logging itself; therefore it is possible to forward log messages to another host\n\n</p><p></p><pre>\tLogd();\n\tInit(Type, Level, Location = NULL)\n\t\t\t\t\t\t\t\t\t   // whereas location could also be another host; NULL default means local\n\t\t\t\t\t\t\t\t\t   // Level is the max level that will be written (according to D_ALWAYS, D_FULLDEBUG, ... )\n\t\t\t\t\t\t\t\t\t   // Type: Which process requests logging (History, Daemon dprintf (Schedd, Shadow,...), EventLog...)\n</pre>\n\n<p></p><pre>\tint Write(Type, Level, Msg) // write message\n</pre>\n\n<p></p><pre>\tRead(...) // Read function .. will be more complex. TODO: Which args would be necessary?\n</pre>\n\n<p></p><pre>\tClose(Type) // Finishing log process\n</pre>\n\n<p></p><hr/>\n<em>Open questions:</em> <br/>\n\nHow to track number of log entries that will be discarded by deleting old log files in order to not exceed disk space?<br/>\n\n\n<p>How to prevent daemons from waiting for logd to come up or to stop working or to just discard log messages in case logd is failing?\n\n</p><p><strong>(2) Integrated logging functions:</strong>\n\n</p><p>Problem: Locking needs to be taken care of -&gt; how to avoid a) deadlocks, b) incompatibilities of different file systems/ interactions of different OS</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Jan-20 09:50:57 by tstclair:</em> <br/>\n\nIt is highly unlikely for a logging daemon such as syslog to go down, as most if not all systems heavily rely on it.  I believe there is recovery built in, but it should be verified independently.\n<hr/>\n<em>2010-Oct-20 16:03:30 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.\n<hr/>\n<em>2011-Jan-27 14:46:04 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 14:49:30 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Aug-16 14:47:55 by cweiss:</em> <br/>\n\nEven though this is probably a never-ending story, I'll go ahead and close this ticket. If more work in this area is going to be done, this ticket can be a reference.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1310\" onclick=\"get_ticket_and_populate_wrapper('1310'); return false;\" title=\"Improving locking reliability of log files\">#1310</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nImproving locking reliability of log files</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-01 15:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17057\">[17057]</a></span>: Added new lock file class with initial functions and tests ( <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1108\" onclick=\"get_ticket_and_populate_wrapper('1108'); return false;\" title=\"Improving the locking situation of the logging systems\">#1108</a></span> )  (By Cathrin Weiss )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Nov-21 15:07", "status": "resolved", "created": "2010-Jan-14 09:49", "fixed_version": "2010-Jan-14 09:49", "broken_version": "v070400", "priority": "2", "subsystem": "Daemons", "assigned_to": "cweiss", "derived_from": "#1016", "creator": "cweiss", "rust": "", "customer_group": "other", "visibility": "public", "notify": "cweiss@cs.wisc.edu, gthain@cs.wisc.edu, matt@cs.wisc.edu, tstclair@redhat.com", "due_date": ""}