{"id": 4209, "title": "Ticket #4209: DAG final node goofs up node status file", "description": "<blockquote>\nCMS reported that adding a final node to their DAGs ended up causing the node status file to be incorrect.  Specifically, after the DAG exited, the node status file has the following:\n\n<p></p><pre>  DAG status: STATUS_SUBMITTED ()\n</pre>\n\n<p>when it should be\n\n</p><p></p><pre>  DAG status: STATUS_DONE      (success)\n</pre>\n\n<p>(Note:  it's not as simple as just having a final node causing this problem -- I was not able to reproduce it.  But they provided files that clearly show the problem.)\n\n</p><p>I had them run with a debug setting of 4, which produced the following output in the dagman.out file:\n\n</p><p></p><pre>  02/11/14 22:50:43 Node status file not updated because min. status update time has not yet passed\n</pre>\n\n<p>So it looks like the test that's supposed to bypass the minimum update time when the DAG has finished is failing in this case.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-Feb-12 14:40:42 by wenger:</em> <br/>\n\nTry setting minimumUpdateTime for the node status file to a really large value in the job_dagman_node_status test.  (I'm curious whether the FinishedRunning() test fails only with final nodes, or if it fails all of the time but we mostly don't notice the failure because the minimumUpdateTime has elapsed.)\n\n<p></p><hr/>\n<em>2014-Feb-12 15:33:17 by bbockelm:</em> <br/>\n\nHi Kent,\n\n<p>Do you mean to try the node status with a large update time in general?  This definitely works; we've been using the node_status file to determine whether the task is updated for awhile.\n\n</p><p>Thanks,\n\n</p><p></p><hr/>\n<em>2014-Feb-12 15:38:37 by wenger:</em> <br/>\n\nBrian, the note above was just a reminder to myself to try that in the test, to try to see whether FinishedRunning() actually works except for certain final nodes, or fails all of the time...\n\n<p></p><hr/>\n<em>2014-Feb-13 08:35:23 by bbockelm:</em> <br/>\n\nIt gets worse --\n\n<p>If we send a SIGUSR1 to one of these tasks, it does not write out the node status file nor does it kill off running jobs.  This causes jobs to \"leak out\" (esp because we map SIGUSR1 to the hold signal).\n\n</p><p></p><hr/>\n<em>2014-Feb-13 14:38:51 by wenger:</em> <br/>\n\nCreated V8_0-gittrac_4209-branch for this.\n\n<p></p><hr/>\n<em>2014-Feb-14 09:35:32 by wenger:</em> <br/>\n\nRe the SIGUSR1 business -- what you describe is pretty much what you should expect when you condor_hold a DAGMan job.  The held state for a DAG is kind of a weird state, especially if you don't eventually do a condor_release on the DAGMan job.\n\n<p>At this point, if you want to suspend submission of new node jobs, I recommend\nthe halt file functionality, instead of condor_hold (see <a class=\"external\" href=\"http://research.cs.wisc.edu/htcondor/manual/v8.1/2_10DAGMan_Applications.html#SECTION003106000000000000000\">http://research.cs.wisc.edu/htcondor/manual/v8.1/2_10DAGMan_Applications.html#SECTION003106000000000000000</a>).  When you use a halt file, DAGMan itself is still running, just not submitting new node jobs.  So if you subsequently condor_rm the halted DAGMan, you'll still get a rescue file, etc.\n\n</p><p></p><hr/>\n<em>2014-Feb-15 19:27:16 by bbockelm:</em> <br/>\n\nActually, no, we want SIGUSR1 to kill off all running jobs and scripts, then write out the node status file / rescue DAG.\n\n<p>The halt file is not usable regardless because we don't have the ability to write to the remote schedd's filesystem.\n\n</p><p></p><hr/>\n<em>2014-Feb-17 12:23:26 by wenger:</em> <br/>\n\nSo what happens if you do condor_rm of a DAGMan?  In the default setup, condor_rm of a DAGMan sends SIGUSR1 to the condor_dagman job, which ends up removing all node jobs and writing a rescue DAG.  I'm curious what's going on if you're sending a SIGUSR1 to a DAGMan and that's not happening.  Can you send a dagman.out file?\n\n<p></p><hr/>\n<em>2014-Feb-17 12:30:20 by wenger:</em> <br/>\n\nOh, yeah -- if you have a final node, that gets run after DAGMan gets a SIGUSR1.  I just realized that that's not documented...\n\n<p></p><hr/>\n<em>2014-Feb-17 15:31:24 by bbockelm:</em> <br/>\n\nHi,\n\n<p>There's no way for users to 'condor_rm' the dag; we use 'hold' instead so users can later do a condor_release to resubmit.\n\n</p><p>Once we added the FINAL node, condor_hold (with hold signal set to SIGUSR1; verified the correct signal was delivered via watching the process with strace) does not clean up running jobs.\n\n</p><p>If I would condor_rm the DAG itself, the node jobs would probably be removed via <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=OtherJobRemoveRequirements\" title=\"Other Job Remove Requirements\">OtherJobRemoveRequirements</a></span>.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2014-Feb-17 16:30:19 by wenger:</em> <br/>\n\nHmm -- I'm not sure what's going on here.  The schedd now removes node jobs when a condor_dagman is condor_rm'ed (in case you remove a held DAGMan).  But DAGMan itself still tries to remove the node jobs, too.  Can you send me a dagman.out file from a case where condor_dagman gets a SIGUSR1 but doesn't remove the node jobs and create a rescue DAG?\n\n<p>There's another ticket that might be relevant to this: <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=2616\" onclick=\"get_ticket_and_populate_wrapper('2616'); return false;\" title=\"Create a command-line tool to communicate with DAGMan\">#2616</a></span>: Create a command-line tool to communicate with DAGMan.  If we eventually do something like that, it would allow us to create some finer-grainer variations in the control of a running DAG.  You might also be interested in these:\n</p><ul>\n<li><span class=\"ticket\"><a class=\"reviewdesign\" href=\"/tickets?ticket=3889\" onclick=\"get_ticket_and_populate_wrapper('3889'); return false;\" title=\"Periodically dump rescue DAG while continuing to run\">#3889</a></span>: Periodically dump rescue DAG while continuing to run\n</li><li><span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=3756\" onclick=\"get_ticket_and_populate_wrapper('3756'); return false;\" title=\"provide command to peacefully pause a DAG\">#3756</a></span>: provide command to peacefully pause a DAG\n</li></ul>\n\n<p>I guess in general I need to understand more about your use case, like why users can condor_hold a DAGMan but not condor_rm it.\n\n</p><p>I do have a fix mostly done for the basic final node/node status file problem that originally prompted this ticket.\n\n</p><p></p><hr/>\n<em>2014-Feb-17 16:38:32 by bbockelm:</em> <br/>\n\nHi,\n\n<p>Actually, the user has no access to the schedd at all - all access to the schedd is mitigated by an application server.  Hence, we can prevent them from ever doing condor_rm.\n\n</p><p>Re <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=2616\" onclick=\"get_ticket_and_populate_wrapper('2616'); return false;\" title=\"Create a command-line tool to communicate with DAGMan\">#2616</a></span> - that's similar to what we're looking for in <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=4192\" onclick=\"get_ticket_and_populate_wrapper('4192'); return false;\" title='Allow \"manual\" node retries within a DAG'>#4192</a></span> and <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=4194\" onclick=\"get_ticket_and_populate_wrapper('4194'); return false;\" title=\"Remotely query DAG node status\">#4194</a></span>.\n\n</p><p>Will look forward to the bugfix in 8.0.7 and see if this issue with SIGUSR1 also goes away.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2014-Mar-03 16:28:41 by wenger:</em> <br/>\n\nHmm -- here's another issue with this, which I don't think I'm going to address right now:  in the node status file, for a node in PRE status, we don't differentiate whether the script has already been started.  So in the job_dagman_final-I test, for example, node I_C2 is reported as being in the PRERUN status when DAGMan exits.  I think that might end up being kind of confusing...  Maybe this should be split into a separate ticket?\n\n<p></p><hr/>\n<em>2014-Mar-03 19:35:18 by bbockelm:</em> <br/>\n\nHi Kent,\n\n<p>Yes - i think that's really for <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=4195\" onclick=\"get_ticket_and_populate_wrapper('4195'); return false;\" title=\"Add more detail to DAGMan node status file\">#4195</a></span>.  Improving the node status with this sort of info is becoming high priority for us.\n\n</p><p>Similar issue exists for the post script.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2014-Mar-04 10:06:05 by wenger:</em> <br/>\n\nNotes to myself about fixes (I've found some other cases besides the original one where the node status file is incorrect):\n\n<p></p><ul>\n<li>I need to fix Dag::DoneSuccess(), Dag::DoneFailed(), and Dag::DoneCycle(). For example, Dag::DoneCycle() returns true for both the abort-A and halt-A tests -- I think that could be fixed by them checking Dag::_dagStatus for the DAG_STATUS_ABORT value, etc.\n</li><li>If I do fix Dag::DoneSuccess(), Dag::DoneFailed(), and Dag::DoneCycle(), I think I can revert a bunch of the (temporary?) changes I made to Dag::DumpNodeStatus() -- that would mean a less-complex overall set of code changes.\n</li><li>I think that Dag::_dagStatus should be updated when a final node finishes, so that it's consistent with other stuff.  (Hmm -- if you condor_rm DAGMan, and the final node fails, should _dagStatus be DAG_STATUS_NODE_FAILED or DAG_STATUS_RM?)\n</li><li>I need to add a new abort-final node-node status file test -- probably commit in 8.0, but only enable it in 8.1 to avoid violating the \"no new tests in stable series\" rule.\n</li><li>I need to add something to the documentation about the final node exit code overriding the abort-dag-on exit code, if you have both.\n</li></ul>\n\n<p></p><hr/>\n<em>2014-Mar-05 13:04:38 by wenger:</em> <br/>\n\nNote to myself again:  What is _dagStatus set to if we're aborting with an exit code of 0? -- Need to check that...\n\n<p></p><hr/>\n<em>2014-Mar-06 12:35:33 by wenger:</em> <br/>\n\nHmm -- when aborting with an exit code of zero, _dagStatus is DAG_STATUS_OK, not DAG_STATUS_ABORT -- so you can't tell from _dagStatus that the DAG has been aborted.  I think we may need a separate flag that tells us the DAG has been aborted, even if the exit code is 0.\n\n<p></p><hr/>\n<em>2014-Mar-19 13:39:55 by wenger:</em> <br/>\n\nNotes for reviewer:  V8_0-gittrac_4209-branch contains fixes for both this ticket and the derived ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span> (Node status counts are incorrect after DAG abort).\n\n<p>Also, don't waste time by looking at all of the commits individually -- the intermediate commits have a ton of debug code, temporary code, etc., and just looking at the diff between the beginning and end of the branch will be much less confusing.\n\n</p><p>There are a number of new tests on this branch, but they are currently commented out in CMakeLists.txt -- the idea is that the new tests should be enabled once all of this stuff is merged to master/8.1.\n\n</p><p></p><hr/>\n<em>2014-Mar-20 12:32:48 by wenger:</em> <br/>\n\nAnother note for review:  The fundamental fix to this bug is not setting _runningFinalNode (now renamed to _finalNodeRun) to false in Dag::TerminateJob().  When _runningFinalNode got set to false, that goofed up Dag::FinishedRunning(), which could incorrectly return false when we actually <strong>were</strong> done running.  That in turn prevented Dag::DumpNodeStatus() from overriding _minStatusUpdateTime and writing the node status file even if _minStatusUpdateTime seconds haven't elapsed.\n\n<p>Most of the other changes on this branch are to fix other node status file-related problems (see <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span>).\n\n</p><p></p><hr/>\n<em>2014-Apr-14 13:16:50 by wenger:</em> <br/>\n\nJust merged and pushed this to 8.0 even though it's still under review -- we can revert if there are problems, I guess.\n\n<p></p><hr/>\n<em>2016-Feb-01 15:24:29 by wenger:</em> <br/>\n\nNote:  actually changing what happens on a SIGUSR1 is in a separate ticket: <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5175\" onclick=\"get_ticket_and_populate_wrapper('5175'); return false;\" title=\"Have condor_dagman condor_rm jobs on SIGUSR1 (revert #4618)\">#5175</a></span>: Have condor_dagman condor_rm jobs on SIGUSR1 (revert <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4618\" onclick=\"get_ticket_and_populate_wrapper('4618'); return false;\" title=\"Remove DAGMan code that condor_rms node jobs on condor_rm of DAGMan\">#4618</a></span>).</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=4239\" onclick=\"get_ticket_and_populate_wrapper('4239'); return false;\" title=\"Node status file should show whether PRE/POST scripts are running\">#4239</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nNode status file should show whether PRE/POST scripts are running</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nNode status counts are incorrect after DAG abort</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4312\" onclick=\"get_ticket_and_populate_wrapper('4312'); return false;\" title=\"Final status for aborted DAG is incorrect\">#4312</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nFinal status for aborted DAG is incorrect</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/823/cms_dag_issue.tar.gz\">cms_dag_issue.tar.gz</a>\n8690 bytes added by wenger on 2014-Feb-12 17:56:34 UTC.\n<br/>\nThis tarball has the original DAG file, dagman.out file, node status file, and workflow log file from a run that shows the problem.<br/>\n</li><li><a href=\"../files/923/gt4209_dif.txt\">gt4209_dif.txt</a>\n56464 bytes added by wenger on 2016-Jan-28 17:44:20 UTC.\n<br/>\nHere's more-or-less a complete diff of the relevant branch (it seems to be a lot harder to get a complete diff of a branch once the branch has been merged...).<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Jun-03 12:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=40323\">[40323]</a></span>: Minor 8.0.7 edits and a clarafication about DAG FINAL nodes. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-15 11:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39939\">[39939]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span>: Fixed job_dagman_cycle-A test (failed on MacOS because it was mistakenly using /bin/true as the executable for the node jobs).  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-14 14:47</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39922\">[39922]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span>: Enabled new tests on the master (code is also in 8.0 but new tests are not enabled). (job_dagman_abort-B is not enabled because that currently fails -- need to make a corresponding ticket.)  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-20 12:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39668\">[39668]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span> / <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span>: Updated the manual; also a couple of very minor fixes to the related tests.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-18 12:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39655\">[39655]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span> / <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span>: Hopefully the final version except for manual changes -- all tests now pass except for job_dagman_abort-B.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-17 17:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39647\">[39647]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span> / <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span> / <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=4253\" onclick=\"get_ticket_and_populate_wrapper('4253'); return false;\" title=\"DAGMan abort-dag-on test improvement\">#4253</a></span>: Changed job_dagman_abort-B to hit a slighly different variation -- the test now fails because DAGMan doesn't handle this corner case correctly.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-17 15:52</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39644\">[39644]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span> / <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span>: All tests now pass; still need to do lots of cleanup. Fixed a bunch of the tests because STATUS_UNREADY is now STATUS_NOT_READY in the node status file, to be consistent.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-11 17:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39581\">[39581]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span> / <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span>: Added new job_dagman_cycle-A test (passes, but not yet enabled); added checking of node status file to job_dagman_final-I (fails, dammit!).  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-09 18:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39580\">[39580]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span> / <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span>: All tests now pass; still need to do lots of cleaning up, and checking to make sure I haven't introduced any new errors... (Made some changes to the abort tests to make them more deterministic -- but we should add an abort test that makes sure an abort removes other running jobs.)\u00a0[...]\n (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-06 16:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39547\">[39547]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span> / <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4248\" onclick=\"get_ticket_and_populate_wrapper('4248'); return false;\" title=\"Node status counts are incorrect after DAG abort\">#4248</a></span>: Better testing for node status file problems: added some new tests, and added checking of the node status file to job_dagman_abort-A. (Note that new tests aren't enabled yet -- they should be enabled when this is all merged to 8.1/master.)  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Feb-27 18:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39509\">[39509]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span>: More fixes (right now the only error case I know of is aborting with an exit code of 0); lots of diagnostic and temporary code still in place; need to make sure new code is correct.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Feb-14 15:12</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39423\">[39423]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span>: Implemented the fundamental fix for the bug -- Dag::TerminateJob() no longer sets _runningFinalNode to false; that was an error, because _runningFinalNode is supposed to stay true after the final node has run.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Feb-14 14:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39422\">[39422]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span>: job_dagman_final-A test now has checks to fail if we see this bug.  (By Kent Wenger )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Feb-13 14:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39412\">[39412]</a></span>: Gittrac <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4209\" onclick=\"get_ticket_and_populate_wrapper('4209'); return false;\" title=\"DAG final node goofs up node status file\">#4209</a></span>: job_dagman_final-A.dag now reproduces the problem (the test script needs to be modified to check for it automatically).  (By Kent Wenger )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2016-Oct-12 16:22", "status": "resolved", "created": "2014-Feb-12 11:55", "fixed_version": "2014-Feb-12 11:55", "broken_version": "v080004", "priority": "2", "subsystem": "Dag", "assigned_to": "wenger", "derived_from": "#4198", "creator": "wenger", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "wenger@cs.wisc.edu, bbockelm@cse.unl.edu, marco.mascheroni@cern.ch, johnkn@cs.wisc.edu", "due_date": ""}