{"id": 3127, "title": "Ticket #3127: Caching code makes ClassAds much less thread-safe", "description": "<blockquote>\nWith the new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> caching code (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2541\" onclick=\"get_ticket_and_populate_wrapper('2541'); return false;\" title=\"Memory utilization of classads (revised)\">#2541</a></span>), we see frequent crashes of the blahp. If we disable the caching, the crashes disappear. We believe the crashes are due to the blahp's multi-threaded nature. Before the caching code, there was little to no data shared between threads that weren't explicitly sharing <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> data structures. Now, they share the cache and cached <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTrees\" title=\"Expr Trees\">ExprTrees</a></span>.\n\n<p>As an immediate fix for 7.9.0, we propose to add a flag in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> to enable/disable all caching. Caching would be disabled by default, and Condor tools/daemons would enable it. We could even make cache use in Condor configurable, which would be very handy for testing.\n\n</p><p>Here are a couple backtraces from blahp crashes:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">#0  0x00002abcf611db2a in std::tr1::hashtable&lt;std::string, std::pair&lt;std::string const, std::tr1::weak_ptr&lt;classad::CacheEntry&gt; &gt;, std::allocator&lt;std::pair&lt;std::string const, std::tr1::weak_ptr&lt;classad::CacheEntry&gt; &gt; &gt;, Internal::extract1st&lt;std::pair&lt;std::string const, std::tr1::weak_ptr&lt;classad::CacheEntry&gt; &gt; &gt;, classad::CaseIgnEqStr, classad::StringCaseIgnHash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true&gt;::size (this=0x1008)\n    at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/tr1/hashtable:1124\n#1  0x00002abcf611fe6b in ClassAdCache::flush (this=0x11ebc4d0,\n    szName=@0x2aaaac000ec8, szValue=@0x2aaaac000ed0)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/classadCache.cpp:130\n#2  0x00002abcf611d1ed in ~CacheEntry (this=0x2aaaac000ec0)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/classadCache.cpp:231\n#3  0x00002abcf611e3b9 in std::tr1::_Sp_deleter&lt;classad::CacheEntry&gt;::operator() (this=0x2aaaac000f30, p=0x2aaaac000ec0)\n    at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/tr1/boost_shared_ptr.h:93\n#4  0x00002abcf611e6fd in std::tr1::_Sp_counted_base_impl&lt;classad::CacheEntry*, std::tr1::_Sp_deleter&lt;classad::CacheEntry&gt; &gt;::dispose (this=0x2aaaac000ef0)\n    at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/tr1/boost_shared_ptr.h:215\n#5  0x00002abcf611ea89 in std::tr1::_Sp_counted_base::release (\n    this=0x2aaaac000ef0)\n    at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/tr1/boost_shared_ptr.h:153\n#6  0x00002abcf611eb7e in ~shared_count (this=0x2aaaac000e10)\n    at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/tr1/boost_shared_ptr.h:277\n#7  0x00002abcf611eb99 in ~shared_ptr (this=0x2aaaac000e08)\n    at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/tr1/boost_shared_ptr.h:486\n#8  0x00002abcf611d022 in ~CachedExprEnvelope (this=0x2aaaac000df0)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/classadCache.cpp:238\n#9  0x00002abcf6111f08 in classad::ClassAd::Clear (this=0x11ebbf20)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/classad.cpp:202\n#10 0x00002abcf61171da in ~ClassAd (this=0x11ebbf20)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/classad.cpp:192\n#11 0x000000000041328e in ?? ()\n#12 0x000000000040ac9e in classad::ClassAdUnParser::UnparseAux ()\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/sink.cpp:347\n#13 0x000000376160677d in start_thread () from /lib64/libpthread.so.0\n#14 0x0000003760ad30dd in clone () from /lib64/libc.so.6\n</pre></div>\n\n\n<p></p><div class=\"code\">\n<pre class=\"code\">#0  0x00002b3dc61aab6d in classad::CachedExprEnvelope::self (this=0x1be4ee60)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/classadCache.cpp:339\n#1  0x00002b3dc61a1552 in classad::ClassAd::Insert (this=0x1be4b800,\n    attrName=@0x50f4e300, pRef=@0x50f4e308, cache=true)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/classad.cpp:483\n#2  0x00002b3dc61edcee in classad::ClassAdParser::parseClassAd (\n    this=0x50f4e4a0, ad=@0x1be4b800, full=false)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/source.cpp:1194\n#3  0x00002b3dc61f0257 in classad::ClassAdParser::ParseClassAd (\n    this=0x50f4e4a0, lexer_source=0x50f4e430, full=false)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/source.cpp:309\n#4  0x00002b3dc61f06af in classad::ClassAdParser::ParseClassAd (\n    this=0x50f4e4a0,\n    buffer=0x50f4e5f0 \"[BatchJobId=\\\"5780\\\"; WorkerNode=\\\"c002.chtc.wisc.edu\\\"; JobStatus=4; ExitCode= 0; ]\", full=false)\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/source.cpp:263\n#5  0x00000000004134b7 in ?? ()\n#6  0x0000000000407a4a in classad::ClassAdUnParser::UnparseAux ()\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/sink.cpp:347\n#7  0x000000000040ab83 in classad::ClassAdUnParser::UnparseAux ()\n    at /u/j/f/jfrey/condor/CONDOR_SRC/src/classad/sink.cpp:347\n#8  0x000000376160677d in start_thread () from /lib64/libpthread.so.0\n#9  0x0000003760ad30dd in clone () from /lib64/libc.so.6\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2012-Jul-13 10:38:24 by tstclair:</em> <br/>\n\nA lock can be placed around insert+lookup.\n\n<p>Or I've made it so that it's really easy to disable for multithreaded code.\n\n</p><p></p><hr/>\n<em>2012-Jul-13 14:29:09 by jfrey:</em> <br/>\n\nWouldn't the lock also have to go around all parsing methods, deletion of attributes from an ad, and deletion of ads?\n\n<p>When you say it's really easy to disable, are you referring to the argument to ClassAd::Insert()? That requires changing all of the application's callsites. And it doesn't handle the parsing class's calls to Insert(). I didn't see another way to disable caching.\n\n</p><p></p><hr/>\n<em>2012-Jul-13 14:49:19 by tstclair:</em> <br/>\n\nIt all backs against 2 calls in the envelope which could be locked on entry.\n\n<p>Or disabled on those sections as well.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Aug-06 15:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/7ce5883653bcaa5622b8495211a7e494ee337580\">[32965]</a></span>: Change the default for ENABLE_CLASSAD_CACHING to False. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3127\" onclick=\"get_ticket_and_populate_wrapper('3127'); return false;\" title=\"Caching code makes ClassAds much less thread-safe\">#3127</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-17 14:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/8e6d706a066ae60a91e43c2193b1280c9c57a8fb\">[32823]</a></span>: edit of version history item and knob defn related to new caching of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3127\" onclick=\"get_ticket_and_populate_wrapper('3127'); return false;\" title=\"Caching code makes ClassAds much less thread-safe\">#3127</a></span> ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2541\" onclick=\"get_ticket_and_populate_wrapper('2541'); return false;\" title=\"Memory utilization of classads (revised)\">#2541</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-13 14:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/c4d82a992295e520cbeafc1e4c0e9a1e9118d185\">[32776]</a></span>: Enable <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> caching in all Condor daemons and tools. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3127\" onclick=\"get_ticket_and_populate_wrapper('3127'); return false;\" title=\"Caching code makes ClassAds much less thread-safe\">#3127</a></span> Now that caching is disabled by default, we need to explictly enable it when we want to use it. There's a new config knob, ENABLE_CLASSAD_CACHING, which can be used to disable caching in Condor if desired. ===VersionHistory:Complete===  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jul-13 14:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/84e22807327ec00bdb0f8d4782a5352049c658b6\">[32775]</a></span>: Disable classad caching by default, add api to enable on request. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3127\" onclick=\"get_ticket_and_populate_wrapper('3127'); return false;\" title=\"Caching code makes ClassAds much less thread-safe\">#3127</a></span> The classad caching code makes classads much less thread-safe. Threads using different classads now operate on shared data (the cache and the shared <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTrees\" title=\"Expr Trees\">ExprTrees</a></span>). This is causing frequent crashes in the blahp.\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2012-Jul-16 16:07", "status": "resolved", "created": "2012-Jul-13 10:32", "fixed_version": "2012-Jul-13 10:32", "broken_version": "v070900", "priority": "4", "subsystem": "Libs", "assigned_to": "jfrey", "derived_from": "#2541", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tstclair@redhat.com", "due_date": ""}