{"id": 1146, "title": "Ticket #1146: Give CondorTest.pm a more idiomatic object-oriented interface", "description": "<blockquote>\nCondorTest.pm has a fairly fiddly system for handling multiple tests.  It would be more elegantly expressed in a traditional Perl idiomatic style.\n\n<p>Current style:\n</p><div class=\"code\">\n<pre class=\"code\">CondorTest::RegisterSubmit( $testname, $submit );\nCondorTest::RegisterAbort($testname, $aborted);\nCondorTest::RegisterExited( $testname, $exited );\n\nif( CondorTest::RunTest($testname, $cmd, 0) ) {\n    CondorTest::debug(\"$testname: SUCCESS\\n\",$debuglevel);\n    exit(0);\n} else {\n    die \"$testname: CondorTest::RunTest() failed\\n\";\n}\n</pre></div>\n\n\n<p>Proposed style:\n</p><div class=\"code\">\n<pre class=\"code\">my $test = new CondorTest($testname);\n$test-&gt;RegisterSubmit($submit);\n$test-&gt;RegisterAbort($aborted);\n$test-&gt;RegisterExited($exited);\n\nif( $test-&gt;RunTest($cmd, 0) ) {\n    CondorTest::debug(\"$testname: SUCCESS\\n\",$debuglevel);\n    exit(0);\n} else {\n    die \"$testname: CondorTest::RunTest() failed\\n\";\n}\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2010-Jan-28 13:46", "status": "new", "created": "2010-Jan-28 13:45", "fixed_version": "2010-Jan-28 13:45", "broken_version": "", "priority": "4", "subsystem": "Tests", "assigned_to": "", "derived_from": "#1124", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}