{"id": 4009, "title": "Ticket #4009: Schedd crashes when using clone on F19 & >", "description": "<blockquote>\nFor full details see: <a class=\"external\" href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1000106\">https://bugzilla.redhat.com/show_bug.cgi?id=1000106</a></blockquote>", "remarks": "<blockquote>\n<em>2013-Oct-25 15:44:52 by gthain:</em> <br/>\n\nNote that a trunk build seems to work fine on f19, as does the rhel6 tarball, all running as root and with USE_CLONE_TO_CREATE_PROCESSES=true\n\n<p></p><hr/>\n<em>2013-Oct-25 15:54:52 by tannenba:</em> <br/>\n\nGiven Greg's remark above, sounds like the problem is specific (somehow) to how the Fedora 19 build or packaging takes place....\n\n<p></p><hr/>\n<em>2013-Nov-18 15:47:41 by johnkn:</em> <br/>\n\nwhen the <code>ProcFamilyClient</code> attempts to contact the PROCD. the UNIX <code>NamedPipeReader</code> code allocates a fd_set on the stack, but the SCHEDD can have more fd's than the standard allocation. if the named pipe fd used to communicate with the procd is &gt; sizeof(fd_set), then NamedPipeReader::read_data will trash the stack and the caller will very likely fault on return.\n\n<p>We saw EPB getting set to either 0, or a value with only 1 bit set.  This will cause either a NULL deref, or in rare cases a SIGBUS.\n\n</p><p>When the <code>ProcFamily</code> code is called from within clone, it's possibly to trash the clone stack so hard the the main SCHEDD thread's stack is also overwritten with 0's.  We have seen the IP of the main schedd thread set to 0, which can will cause the SCHEDD to hang rather than exit.\n\n</p><p>The clone thread will only call the <code>ProcFamily</code> code in the SCHEDD when starting a local universe job.\n\n</p><p></p><hr/>\n<em>2013-Nov-20 11:43:05 by tim:</em> <br/>\n\nThis will be fixed under <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4088\" onclick=\"get_ticket_and_populate_wrapper('4088'); return false;\" title=\"Use of select() overrunning bit array bounds\">#4088</a></span>\n\n<p></p><hr/>\n<em>2013-Nov-26 11:12:43 by gthain:</em> <br/>\n\n<span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=4008\" onclick=\"get_ticket_and_populate_wrapper('4008'); return false;\" title=\"fetch work difficult to configure with partitionable slots\">#4008</a></span> doesn't solve this problem.  I can reproduce this now on my F19 laptop, but only when building with -O2.\n\n<p></p><hr/>\n<em>2013-Dec-04 17:19:35 by gthain:</em> <br/>\n\nThe problem is that we we call clone(2), we need to pass a stack for the clone'd thread to use.  clone requires that we pass a pointer either to the lowest address of this stack or the highest, depending on whether the architecture we are running on has the stack growing up or down.  To determine this, there's the static function in daemon_core.cpp:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">static int stack_direction(volatile int *ptr=NULL) {\n    volatile int location;\n    if(!ptr) return stack_direction(&amp;location);\n    if (ptr &lt; &amp;location) {\n        return STACK_GROWS_UP;\n    }\n\n    return STACK_GROWS_DOWN;\n}\n</pre></div>\n\n\n<p>With the gcc 4.8 compiler series, which is the default on Fedora 19, this code return STACK_GROWS_UP if compiled with -O2, which is the default in nmi.  Interestingly, it returns the correct STACK_GROWS_DOWN when compiled with either -O0 or -O3.  Given that the linux clone(2) man page says that the only Linux architecture where the STACK GROWS UP is HP-PA, I'm just going to hardcode STACK_GROWS_DOWN.  I'm curious if this is true for our CMS friends currently experimenting with ARM?\n\n</p><p></p><hr/>\n<em>2013-Dec-04 17:45:26 by eje:</em> <br/>\n\nThere might be a way to improve the detection by making it less vulnerable to optimization, e.g.\n\n<p><a class=\"external\" href=\"https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15011\">https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15011</a>\n</p><ul>\n\"To get reliable results, you need to compare the address of a variable local to Rf_initialize_R with the address of a variable local to a function called from Rf_initialize_R, that is defined in another source file (to stop the compiler from inlining it).\"\n</ul>\n\n<p>or: <a class=\"external\" href=\"http://www.devx.com/tips/Tip/37412\">http://www.devx.com/tips/Tip/37412</a>\n\n</p><p></p><hr/>\n<em>2013-Dec-05 09:17:47 by gthain:</em> <br/>\n\nAs this impacts none of our released platforms, I'm not putting a version history note in the file.\n\n<p></p><hr/>\n<em>2013-Dec-05 10:09:40 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>The change to &amp;#8203;stack_direction() looks good.\n\n</p><p></p><hr/>\n<em>2014-Jan-21 10:48:59 by tim:</em> <br/>\n\nThis problem is not specific to Fedora. It also happened with Debian testing. They are both using a newer version of gcc. So, this is compiler dependent. Not OS dependent.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4088\" onclick=\"get_ticket_and_populate_wrapper('4088'); return false;\" title=\"Use of select() overrunning bit array bounds\">#4088</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nUse of select() overrunning bit array bounds</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Dec-05 09:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=38940\">[38940]</a></span>: Revert \"set USE_CLONE_TO_CREATE_PROCESSES=false for Fedora19 <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4009\" onclick=\"get_ticket_and_populate_wrapper('4009'); return false;\" title=\"Schedd crashes when using clone on F19 &amp; &gt;\">#4009</a></span>\" This reverts commit 1c8bf4eef6d1f1e99cbecfa0f9e113b4f7d1e122. The underlying problem has been fixed.  (By Greg Thain )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Dec-05 09:12</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=38936\">[38936]</a></span>: Fix crashes on F19 with optimization an USE_CLONE...=true <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4009\" onclick=\"get_ticket_and_populate_wrapper('4009'); return false;\" title=\"Schedd crashes when using clone on F19 &amp; &gt;\">#4009</a></span> Compiler optimization was defeating our detection of the direction of stack growth. Given that there's no truely portable way to do this, and the clone man page tells us the only architecture where stack grows up is HP-PA, and we are unlikely\u00a0[...]\n (By Greg Thain )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Nov-26 09:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=38840\">[38840]</a></span>: set USE_CLONE_TO_CREATE_PROCESSES=false for Fedora19 <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4009\" onclick=\"get_ticket_and_populate_wrapper('4009'); return false;\" title=\"Schedd crashes when using clone on F19 &amp; &gt;\">#4009</a></span> this change should be reverted once until we find and fix the crashing bug. ===VersionHistory:None===  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2014-Jan-21 10:48", "status": "resolved", "created": "2013-Oct-25 11:22", "fixed_version": "2013-Oct-25 11:22", "broken_version": "v070800", "priority": "2", "subsystem": "DaemonsSubmitNode", "assigned_to": "gthain", "derived_from": "", "creator": "tstclair", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tannenba@cs.wisc.edu, eje@cs.wisc.edu, tstclair@redhat.com, gthain@cs.wisc.edu", "due_date": ""}