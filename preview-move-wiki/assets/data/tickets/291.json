{"id": 291, "title": "Ticket #291: Consistent Execute Directories", "description": "<blockquote>\nSome software packages build with absolute paths in their binaries, e.g., <code>/home/condor/execute/dir_577/install</code>.  When that binary is retrieved by a later build or test, that directory may not exist, which could cause problems.  It would convenient to be able to specify a token in the submit file used to create the directory instead of the PID.  For instance, for the <code>bigComplicatedTest</code> token, Condor could create <code>/home/condor/execute/token_bigComplicatedTest/</code>, or <code>/home/condor/execute/&lt;username&gt;/bigComplicatedTest/</code>; whatever, as long as it was consistent.  Initially, concurrency could be ignored (user beware), or maybe the execute node could just reject a job if its token directory is already in use.  (In the same way it would if, for whatever reason, it couldn't create <code>dir_&lt;pid&gt;</code>, or ran out of disk space, whatever.).\n\n<p>These directories would be identical to <code>dir_&lt;pid&gt;</code> directories in all ways, and the user (Metronome, really) responsible for populating them.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Mar-03 07:08:29 by matt:</em> <br/>\n\nWhat are the problems that are caused?\n\n<p></p><hr/>\n<em>2009-Mar-03 10:05:07 by tlmiller:</em> <br/>\n\nGenerally, the software won't work.  For dynamic library dependencies, of course, setting LD_LIBRARY_PATH (or its equivalent) will probably get the job done, but other issues -- reading the configuration file, one binary executing another -- can't be handled by at the system level.\n\n<p>Granted, not being able to work around problems like these really means that the software should be changed to avoid the problem, but this request sounds simple enough and would help people who depend on software they don't control.\n\n</p><p></p><hr/>\n<em>2009-Mar-03 10:53:03 by matt:</em> <br/>\n\nAre the dynamic library issues related to rpaths? Are people hoping to put their dynamic libs in a non-standard location (most sane systems have defaults search paths for dyn libs and provide a means to extend the paths) and not use LD_LIB_PATH type options?\n\n<p>If the software is tied to /home/condor/execute/dir_&lt;pid&gt; or .../token (let's hope two pieces of software don't use the same token) then that path needs to exist on all machines where the software is to be run and it must be properly populated (installed)?\n\n</p><p></p><hr/>\n<em>2009-Mar-03 11:29:09 by tlmiller:</em> <br/>\n\nAs I said, this generally isn't a problem for dynamic libraries.  VDT may elect to disagree with me, but they distribute the generate binaries; this is strictly intended to allow software to be built and tested across multiple runs in the same pool.  (So that the absolute path of the Condor execute directory is the same.  Naturally, if it isn't, this technique won't work, but that's something we can fix as the admin.  At present, we can't change how Condor names the per-job temporary directories.)  If Condor names the execute directory in a predictable and repeatable way, the user (or Metronome, acting on the user's behalf) can populate it appropriately.\n\n<p></p><hr/>\n<em>2009-Mar-03 21:31:13 by matt:</em> <br/>\n\nThen what's a concrete, example of a, problem that you're trying to solve here?\n\n<p>It sounds like you want a defined directory where your program is built under EXECUTE and then later some process, other than Condor, would control that directory.\n\n</p><p>Would it be simpler/better to wrap the build process so that it is setup in a chroot. That might allow for a more consistent view of the world wrt the build, additionally assisting in rpath issues (incase there still are some). Since the builds should only be dependent on prereqs you even have the information needed to help populate a chroot.\n\n</p><p>Thoughts?\n\n</p><p></p><hr/>\n<em>2009-Mar-04 12:08:55 by tlmiller:</em> <br/>\n\n&gt; Then what's a concrete, example of a, problem that you're trying to solve here?\n\n<p>For instance, we just received a user request to install nscd on some of our execute nodes, because a user needs to test against it.  As it happens, nscd does let you specify the location of its configuration file on the command-line, but it's easy to imagine one that doesn't.  (A widely-used daemon that has a hard-coded path to its configuration file(s) is 'cron'.  I don't know why you'd be running tests of or with cron, but the problem is by no means hypothetical.)  If you tried to do the right thing, you would build '=hardcodedpathd=' with <code>--prefix=/some/condor/execute/directory</code>, and then use that binary over and over for subsequent runs.  However, since you have no way of ensuring that <code>/some/condor/execute/directory</code> exists, <code>hardcodedpathd</code> would fail.\n\n</p><p>The simplest way around this problem is to find a safe way to allow users to request that their runs happen in a given directory.  My suggestion is to allow the user to supply a name that gets used instead <code>dir_&lt;pid&gt;</code>.\n\n</p><p>&gt; It sounds like you want a defined directory where your program is built under &gt; EXECUTE and then later some process, other than Condor, would control that\n&gt; directory.\n\n</p><p>Not in the slightest.  If the Condor job in question happens to be Metronome, than Metronome can automatically populate the directory before running the user's tests, as a convienence for set user.\n\n</p><p>&gt; Would it be simpler/better to wrap the build process so that it is setup in a\n&gt; chroot.\n\n</p><p>Absolutely not.  If we have to go the route of creating throw-away environments for our users' builds, we're better encapsulating them in virtual machines.  This feature request could solve a user problem with far less effort and far greater efficiency.  If the priority should be (even) lower, that's fine; Zach asked me to drop this idea here, presumably so if wouldn't be forgotten.  The priority can just be bumped when a user actually trips on this.</p></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2012-Oct-16 13:21", "status": "new", "created": "2009-Mar-02 17:20", "fixed_version": "2009-Mar-02 17:20", "broken_version": "", "priority": "4", "subsystem": "Daemons", "assigned_to": "zmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}