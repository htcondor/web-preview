{"id": 6729, "title": "Ticket #6729: memory leak in submitMany python binding", "description": "<blockquote>\nFNAL reports that the submitMany python binding is leaking memory.  Their own ticket for this is <a class=\"external\" href=\"https://github.com/dmwm/WMCore/issues/8493\">https://github.com/dmwm/WMCore/issues/8493</a>.  This ticket indicates the problem is with 8.5.7, but we have email from them indicating that the problem reproduces on 8.6.11 and 8.7.7.\n\n<p>They have provided a script for reproducing the problem here\n<a class=\"external\" href=\"https://github.com/amaltaro/ProductionTools/blob/master/testCondorSubmission.py\">https://github.com/amaltaro/ProductionTools/blob/master/testCondorSubmission.py</a></p></blockquote>", "remarks": "<blockquote>\n<em>2018-Aug-01 17:29:36 by tannenba:</em> <br/>\n\nPossible workaround:\n\n<p>Using submitMany() is a pain in the rear. It is a lot easier to to submit jobs via the htcondor.Submit() object, and (hopefully!) this does not suffer the memory leak bug.  htcondor.Submit() uses the same key/value pairs that you would use in a regular <code>condor_submit</code> file, so no need to come up with a classad for the job.  Example of submitting a 100 jobs (procs) into one cluster :\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">import htcondor\nsub = htcondor.Submit()\n# Specify executable\nsub['Executable']='Example.exe'\n# Specify a custom attribute - use the '+' just like a submit file\nsub['+MyCustomAttribute']='True'\n# Specify arguments, using $(Process) like a submit file\nsub['Arguments']='-run_number $(Process)'\n# Send 100 jobs into a cluster\nwith schedd.transaction() as txn:\n  sub.queue(txn,100)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2018-Aug-07 10:45:54 by johnkn:</em> <br/>\n\nI did some investigation, it's leaking the classAds that are returned by submitMany via the 4th argument. But only if you don't supply the 4th argument. Not really sure why this is so, but you can easily work around the bug just by calling submitMany with 4 arguments like this:\n\n<p></p><pre>    submitMany(clusterAd, procAds, 0, [])\n</pre>\n\n<p></p><hr/>\n<em>2018-Aug-07 13:43:23 by johnkn:</em> <br/>\n\nactually\n\n<p></p><pre>  schedd.submitMany(clusterAd, procAds, 0, None)\n</pre>\n\n<p>Is better, because None causes the creation of the result_ads to be skipped entirely.\n\n</p><p></p><hr/>\n<em>2018-Oct-08 15:13:19 by tlmiller:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>Although it doesn't show up in the commit, in <code>submitMany()</code> we explicitly check for and handle the case that <strong>ad_results</strong> is not a list.  <code>submit()</code> turns around and calls <code>submitMany()</code> without even looking at <strong>ad_results</strong>, so that should be fine, too.\n\n</p><p>Approved.  Documentation looks good as well.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/1020/testCondorSubmit.py\">testCondorSubmit.py</a>\n13953 bytes added by johnkn on 2018-Aug-01 21:55:53 UTC.\n<br/>\nscript to reproduce memory leak<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Aug-07 13:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/7fceeeddbbabf54ccd0664d620af2e294bd8d22e\">[55263]</a></span>: fix memory leak in python bindings submit and submitMany methods. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6729\" onclick=\"get_ticket_and_populate_wrapper('6729'); return false;\" title=\"memory leak in submitMany python binding\">#6729</a></span> ===VersionHistory:Complete===  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2018-Oct-09 10:59", "status": "resolved", "created": "2018-Aug-01 16:52", "fixed_version": "2018-Aug-01 16:52", "broken_version": "v080611", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "johnkn", "derived_from": "", "creator": "johnkn", "rust": "", "customer_group": "fermi", "visibility": "public", "notify": "johnkn@cs.wisc.edu tannenba@cs.wisc.edu zmiller@cs.wisc.edu fkhan@fnal.gov alan.malta@cern.ch", "due_date": ""}