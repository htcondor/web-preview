{"id": 1396, "title": "Ticket #1396: Make Condor libraries friendlier to std::string", "description": "<blockquote>\nIt should be easy for someone to use std::string when writing new code. However, the core Condor libraries often make that difficult by using <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> in their function arguments.\n\n<p>The new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> API uses std::string extensively. As we start shifting to using the new API, callers will have to start dealing with std::string. A given function shouldn't have to keep converting between <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> and std::string.\n\n</p><p>To make future code writing and maintenance easier, the Condor libraries should be made more friendly to std::string. Functions that take a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> as an argument can be changed to take a const char *, or accompanied by an alternate version that takes a std::string.</p></blockquote>", "remarks": "<blockquote>\nAttaching a patch that implements:\n\n<p></p><div class=\"verbatim\">\n<pre>int sprintf(std::string&amp; s, const char* format, ...)\nint sprintf(MyString&amp; s, const char* format, ...)\n\nvoid assign(std::string&amp; dst, const MyString&amp; src)\nvoid assign(MyString&amp; dst, const std::string&amp; src)\n</pre></div>\n\n\n<p>(also includes a unit testing harness)\n\n</p><p>This patch looks good, except for a couple of things -- it tries to catch an exception thrown by new on memory exhaustion.  Everywhere else in the code we assume null return.  If you submit a workspace build on nmi, and it builds everywhere, I'll merge it into master.  Also, if you could merge the unit test into condor_unit_tests, it'll get run every night. Finally, I thought we were going to add a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> ctor which takes a std::string, and an operator std::string() method to Mystring, so we don't need to add overloaded operators all over the place --greg\n\n</p><p></p><hr/>\n<em>2010-May-07 10:00:41 by eje:</em> <br/>\n\nAdding the casting methods to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> is good with me.  I wanted to keep my initial submission external to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> since I considered it a proposal.\n\n<p>I'll submit an updated patch w/ additions to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span>.\n\n</p><p>I'm not a \"trusted committer\" so I'm not sure if I'm supposed to be doing any merging or NMI submissions.\n-E\n\n</p><p></p><hr/>\n<em>2010-May-07 16:42:33 by eje:</em> <br/>\n\nAttached an updated patch addressing Greg's suggestions.\n\n<p></p><hr/>\n<em>2010-May-10 15:35:16 by psilord:</em> <br/>\n\nAre there entries in <code>sr/condor_unit_tests/OTEST_MyString.cpp</code> (in the master) for the new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> functions?\n\n<p></p><hr/>\n<em>2010-May-10 17:26:28 by eje:</em> <br/>\n\nI haven't ported my unit tests into condor_unit_test (yet).  I did write unit tests for the new functionality here:  .../condor_c++_util/test_stl_string_utils.cpp\n\n<p></p><hr/>\n<em>2010-May-11 11:36:10 by jfrey:</em> <br/>\n\nWe're also going to want a pair of sprintf_cat() functions that append to the given <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> or std::string.\n\n<p></p><hr/>\n<em>2010-May-12 18:48:12 by eje:</em> <br/>\n\n<div class=\"verbatim\">\n<pre>Attached latest patch:\nMigrated unit tests to condor_unit_tests framework.\nAdded sprintf_cat().\nUpdated vcproj files.\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-May-13 18:26:51 by eje:</em> <br/>\n\n<ul>\n<li>Put in fix for windows build w/ va_copy issue.\n</li><li>Attached new patch, with respect to UW master branch.  Merged in with Jaime's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> contribs.\n</li><li>Submitted two nmi builds for latest patch: One RH platform and one Win platform.</li></ul>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/168/stl_string_utils.patch\">stl_string_utils.patch</a>\n12636 bytes added by eje on 2010-May-06 18:25:01 UTC.\n<br/>\nPatch implements sprintf(std::string&amp; s, const char* format, ...) and some related utilities to facilitate a proposed migration to std::string<br/>\n</li><li><a href=\"../files/172/stl_string_utils.rev2.patch\">stl_string_utils.rev2.patch</a>\n21643 bytes added by eje on 2010-May-07 21:41:54 UTC.\n<br/>\nAdded casting ops to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span>, for std::string.\nAdded comparison operators between <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> and std::string.\nUpdated unit tests for above.<br/>\n</li><li><a href=\"../files/174/stl_string_utils.rev3.patch\">stl_string_utils.rev3.patch</a>\n26853 bytes added by eje on 2010-May-12 23:47:09 UTC.\n<br/>\n<div class=\"verbatim\">\n<pre>Migrated unit tests to condor_unit_tests framework.\nAdded sprintf_cat()\nUpdated vcproj files.\n</pre></div>\n<br/>\n</li><li><a href=\"../files/175/stl_string_utils.uw.rev1.patch\">stl_string_utils.uw.rev1.patch</a>\n25833 bytes added by eje on 2010-May-13 23:23:32 UTC.\n<br/>\nThis patch is with respect to UW repo master branch.  Merged in w/ Jaime's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> contribs.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-02 11:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18927\">[18927]</a></span>: Add free-standing Tokenize() and GetNextToken() functions. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span> This make it easy to use MyString's tokenizing functionality on char* and std::string values.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jun-02 11:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18293\">[18293]</a></span>: Add unit tests for several new std::string-related functions. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jun-02 11:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18292\">[18292]</a></span>: Add utility functions for std::string based on <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> methods. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span> The functions are chomp(), trim(), lower_case() and upper_case(). They take a std::string and behave just like the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> methods of the same name.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jun-02 11:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18291\">[18291]</a></span>: Add several methods to compat <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> for std::string. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jun-02 11:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18290\">[18290]</a></span>: Add operator+=(const std::string&amp;) to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span>. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-May-20 14:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18229\">[18229]</a></span>: Include stl_string_utils.h for all users of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span>. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span> This file contains utilities for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> as well.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-May-19 11:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18204\">[18204]</a></span>: Add comparison operators to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> to avoid compiler ambiguity. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span> Without these operators, any code that includes the new stl_string_utils.h header will result in a compiler error when comparing a const char * to a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span>. This is because the compiler doesn't know which of three operator==()\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-May-14 13:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18001\">[18001]</a></span>: Add forgotten files from last push <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span>  (By Greg Thain )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-May-14 11:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18000\">[18000]</a></span>: Add support for ::sprintf(Mystring) and ::sprintf(std::stdtring) <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span> Committer: Greg Thain  (By Erik Erlandson )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-May-06 11:11</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17946\">[17946]</a></span>: Remove <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> from public interface of Condor_Auth_X509 class. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-May-06 11:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17945\">[17945]</a></span>: Add methods to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> to convert from std::string. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-May-06 11:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17944\">[17944]</a></span>: Add methods to CEDAR to send and receive std::strings. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1396\" onclick=\"get_ticket_and_populate_wrapper('1396'); return false;\" title=\"Make Condor libraries friendlier to std::string\">#1396</a></span>  (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2012-Sep-18 07:33", "status": "resolved", "created": "2010-May-06 09:27", "fixed_version": "2010-May-06 09:27", "broken_version": "v070500", "priority": "4", "subsystem": "Libs", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "eje@redhat.com,matt@cs.wisc.edu,gthain@cs.wisc.edu,jfrey@cs.wisc.edu, tstclair@redhat.com", "due_date": ""}