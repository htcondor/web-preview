{"id": 666, "title": "Ticket #666: Added eval() classad function to old classads.", "description": "<blockquote>\nAdd an eval(argument) function where argument is coerced to a string and then parsed and evaluated as a class ad expression. This is useful in forming generalized slot policies where the number of cores is a variable. Using eval(), it is then possible to look at slotX_Attribute where X is some expression relative to the current slot.</blockquote>", "remarks": "<blockquote>\n<em>2009-Aug-13 11:26:29 by tannenba:</em> <br/>\n\nCool, <em>but</em> .....\n\n<p>Unless there is some explicit loop detection, couldn't this be a major DoS attack angle?  Wouldn't it be pretty trivial for a user to submit a classad that results in infinite eval recursion?\n\n</p><p></p><hr/>\n<em>2009-Aug-13 11:51:29 by tannenba:</em> <br/>\n\nAlso, wanna be 100% certain all of the following is true:\n\n<p></p><ol>\n<li>This can only change values on the right hand side of an expression -- never in any way could eval() be used to change the left hand side\n\n<p></p></li><li>Never in any way could eval() be used to add a <em>new</em> attribute (name/value pair) to the ad.\n</li></ol>\n\n<p></p><hr/>\n<em>2009-Aug-13 11:53:01 by danb:</em> <br/>\n\nHmm.  Good thing to bring up.  However, I can't come up with a case that causes an infinite eval loop, because <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> evaluation already does loop detection.  For example, the following evaluates to ERROR as one would hope:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">requirements = Attr1\n+Attr1 = eval(\"Attr2\")\n+Attr2 = eval(\"Attr1\")\n</pre></div>\n\n\n<p>Can you think of something more devious?\n\n</p><p>Another problem with eval() is that it would defeat automatic significant attributes detection.  I think that just needs to be documented.  The use-case is in the machine policy expressions, where this is not currently a concern.\n\n</p><p>In the future, hopefully we will have a better system for inter-slot references and then eval() can be relegated to the obscure dark corner it deserves.\n\n</p><p></p><hr/>\n<em>2009-Aug-13 11:53:29 by danb:</em> <br/>\n\neval() cannot be used to modify the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> in any way.\n\n<p></p><hr/>\n<em>2009-Aug-13 13:01:45 by tannenba:</em> <br/>\n\nRe thinking of something more devious, how about self-referencing loops :\n\n<p></p><pre>   requirements = Attr1\n   +Attr1 = eval(\"eval(Attr1)\")\n</pre>\n\n<p>Hopefully caught the same way, but wanna be certain....\n\n</p><p></p><hr/>\n<em>2009-Aug-13 13:30:12 by danb:</em> <br/>\n\nThe following also does not cause an infinite loop:\n+Attr1 = eval(\"eval(\\\"Attr1\\\")\")\n\n<p></p><hr/>\n<em>2009-Aug-13 14:12:09 by tannenba:</em> <br/>\n\nFair 'nuff.  Resolving...</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Aug-12 14:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/b716f20f65bdc0b0b41b248977c529b6d46e4e86\">[15308]</a></span>: Added eval() classad function to old classads. The argument is coerced to a string and then parsed and evaluated as a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> expression. This is useful in forming generalized slot policies where the number of cores is a variable. Using eval(), it is then possible to look at slotX_Attribute where X is\u00a0[...]\n (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Jan-31 13:40", "status": "resolved", "created": "2009-Aug-13 11:24", "fixed_version": "2009-Aug-13 11:24", "broken_version": "v070302", "priority": "3", "subsystem": "Libs", "assigned_to": "danb", "derived_from": "", "creator": "tannenba", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "tannenba@cs.wisc.edu", "due_date": ""}