{"id": 552, "title": "Ticket #552: schedd/shadow block on connecting to down ckpt server", "description": "<blockquote>\nIf the checkpoint server is down, the schedd blocks forever trying to connect to\nit in order to remove the last checkpoint image when the job completes. The\nshadow will also block forever attempting the same operation.\n\n<p>The fix is to keep a small hash of ckpt servers which have timed out, and only try to contact them after a period of time has elapsed. This means if 1000 jobs all using the ckpt server time out, we don't want each job to time out since that would mean 1000 * timeout in seconds wasted. It is better to timeout the first time, then wait a period of time, assuming the timeout will happen for the next queries. If enough time passes, we can retry.\n\n</p><p>This also means that when a ckpt server is down, if jobs complete and leave the queue, those checkpoints will be leaked into the checkpoint server. Leaking checkpoints into the checkpoint server happens already for this and other reasons and will be made worse with this fix.</p></blockquote>", "remarks": "<blockquote>\n<em>2009-Jun-15 13:51:06 by psilord:</em> <br/>\n\nchanged server_interface.c to server_interface.cpp, fixed up the functions inside so they are still C linkage. This allows me to use STL to keep track of the little hash of checkpoint servers I've spoken to which I've determined are down so I can memoize not talking to them for a while.\n\n<p></p><hr/>\n<em>2009-Jun-15 16:51:17 by psilord:</em> <br/>\n\nOk, I found a function called tcp_connect_timeout() in do_connect.c, but it turns out to be completely horked. it is compiled into Condor, but the data flow around the call to it forbids it from ever being called.\n\n<p>So, I'm fixing that function to be correct so I can use it. I'm mostly done with this work and just need to test it.\n\n</p><p>Once this is done, I can utilize it in the server interface codes to the checkpoint server and set up my little hash table (STL for the win!) to record timed out checkpoint servers. I figure a day or two more and I'll probably be done.\n\n</p><p></p><hr/>\n<em>2009-Jun-16 16:46:16 by psilord:</em> <br/>\n\nThis feature is code complete and I'm testing it.\n\n<p></p><hr/>\n<em>2009-Jun-17 15:39:25 by psilord:</em> <br/>\n\nTesting revealed some issues, so I had to fix those today.\n\n<p></p><hr/>\n<em>2009-Jun-18 11:11:02 by psilord:</em> <br/>\n\nOk, I've run into a small problem.\n\n<p>It appears that the schedd <strong>alone</strong> is the means by which a completed job's checkpoint file is removed from the checkpoint server. So, in the case of a down checkpoint server or one that is up but being ignored for a bit, there is potential for hundreds or thousands of files associated with completed stduniv jobs to be leaked into the ckpt server's file system.\n\n</p><p>One might think it is the shadow's responsibility to clean out the files, but\nthere are situations where a shadow may clean out the checkpoint file information for a completed job, but then would be unable to synchronize to the schedd and except.\n\n</p><p>So, in reality, the job's completion has to be deferred somewhat until the checkpoint server comes back online and the files removed.\n\n</p><p></p><hr/>\n<em>2009-Jun-18 13:48:42 by psilord:</em> <br/>\n\nWhereas all of this codebase will eventually be removed, the fix we decided upon was to have the ckpt_server iterate across all of its files and delete ones whose access time has not changed in X days.\n\n<p></p><hr/>\n<em>2009-Jun-23 16:22:39 by psilord:</em> <br/>\n\nI'm close to being code complete. I was originally implementing a forked child in the ckpt server to do this work, but it started getting complicated. The implementation I'm using now just blocks the checkpoint server while it recurses down the CKPT_SERVER_DIR and examines all of the files. I did a test recursion on one of our checkpoint servers with a 1000 files in its directory and it took 2 seconds. So, unless a customer very much needs the ckpt server to not block for a tiny bit, this should be good enough.\n\n<p></p><hr/>\n<em>2009-Jun-24 14:54:11 by psilord:</em> <br/>\n\nThis feature now appears code complete. Doing testing.\n\n<p></p><hr/>\n<em>2009-Jun-24 16:41:02 by psilord:</em> <br/>\n\nOk, the associated checkin needs review.\n\n<p></p><hr/>\n<em>2009-Jun-25 17:33:23 by tannenba:</em> <br/>\n\n<strong>Quick Code Review</strong>\n\n<p>Right then, I did a scan through the below diff and have the following comments.\n\n</p><p></p><ol>\n<li>Get rid of the EXCEPT(\"This is the first time...\") call that looks like it was added for debug purposes and left in the code by mistake (line 100 in do_connect.c).\n</li><li>I think it would be good to set CKPT_SERVER_REMOVE_STALE_CKPT_INTERVAL to default to 86400, at least in the developer series if not in stable as well.\n</li><li>In RemoveStaleCheckpointFilesRecurse(), you do a sanity check to be certain the start of the path of the file you are about to remove is within ckpt_server_dir.  To prevent funny business, you should run the path through <code>realpath()</code> before you do the comparison.\n</li><li>Don't call unlink() directly - use Directory::Remove_Full_Path().\n</li><li>I didn't look all that carefully at the functions to deal w/ non-blocking fd manipulation as I assume you cut-n-pasted out of tried and true CEDAR code, right?\n</li><li>In RemoveStaleCheckpointFilesRecurse(), you create a Directory object w/ priv state UNKNOWN.  I'd feel better if you explicitly told the Directory object constructor to use PRIV_CONDOR.\n</li><li><em>Picky</em> : Recursion... fancy, but a little scary...  Maybe the code should count how many stack frames down it is, and assert it is within reason... ?\n</li><li><em>Picky</em> : Would be nice if FilesRecurse() lived in the directory object, and took a parameter to give a callback function to invoke on every file.\n</li></ol>\n\n<p></p><hr/>\n<em>2009-Jun-25 18:17:00 by psilord:</em> <br/>\n\nMy response:\n\n<p></p><ol>\n<li>That isn't debug code. When I encountered tcp_connect_timeout, it was a broken horrible piece of garbage, but was also able to be called in the code base as it stood. It turns out that hard coded values in the code base prevent it from being called, but I didn't want to spend time exploring it farther since it was a bit out of scope from my task. So, instead of figuring out that rat hole, I left the except there so when and if that code path gets called, someone has to spend real time figuring out if it is what they want.\n</li><li>If the interval is set, the ckpt server will <strong>automatically</strong> delete the stale checkpoints immediately upon start up. I think this may be surprising to administrators since they probably aren't expecting it. An example of the dangerousness is suppose a research project goes on furlough for 60 days and they shut off Condor, when they turn it back on, the ckpts will all be removed for valid jobs since the ckpt server doesn't know any better.\n</li><li>I will implement your suggestion.\n</li><li>I don't have a Directory object for that path in that portion of the code. Is there another unlink() equivalent that is portable?\n</li><li>I ripped it out of DaemonCore's handing for nonblocking fds.\n</li><li>I will implement your suggestion.\n</li><li>Recursion is scary? It's why Turing machines work! :) I can add the stack frame thing easily if you'd like.\n</li><li>I thought about that but didn't want to disturb another piece of code which is used everywhere, and I didn't want to think about how the filter and application function mapped across the file tree affected the iterators (the application function could delete the file, so how is Next() affected?). Seemed like a time sink. If you want, I can revisit this, implement it, and use it instead. If we implement this function, there are a number of other recursive functions like the chowning one which can be reimplemented in terms of it. All in all, the refactoring would be a good thing for the Directory object. I suppose I think I would feel better if it was done in a separate checkin after this feature goes in.\n</li></ol>\n\n<p></p><hr/>\n<em>2009-Jun-29 14:36:10 by psilord:</em> <br/>\n\nCurrent state:\n\n<p></p><ol>\n<li>I'm leaving that in there, I have a larger comment around it.\n</li><li>Up for debate, I'd rather it be off, but the default of on seems better.\n</li><li>Fixed.\n</li><li>Fixed, rewrite the code slightly to use requested function.\n</li><li>No Change.\n</li><li>Fixed.\n</li><li>Don't care enough to implement. Sure, auto-walking the hierarchy is scary, but I specifically don't traverse \".\" and \"..\" and if a realpath of a file leads out of the ckpt_server_dir path, I specifically ignore it.\n</li><li>I agree it would be nice, but I'd rather be done with the feature. I'll leave to implement/refactor for a future day.\n</li></ol>\n\n<p>It seems issue 2 is the blocker for this feature going in. I intend to put this feature into V7_2-branch, and merge it to the master. I suppose I could write some version object code to separate the defaults between stable and development version of condor, but it seems rife with condor-admin questions to do that or leave it on by default.... I'll do whatever the reviewer asserts (again) is the right choice.\n\n</p><p></p><hr/>\n<em>2009-Jun-29 14:40:39 by psilord:</em> <br/>\n\nAwaiting new code review.\n\n<p></p><hr/>\n<em>2009-Jul-14 13:32:34 by psilord:</em> <br/>\n\nTodd confirms he wants the default to remove the files to be on by default. Ok, I'll get this stuff checked in shortly.\n\n<p></p><hr/>\n<em>2009-Jul-15 16:39:07 by psilord:</em> <br/>\n\nBlarg, whole day spent cleaning up detritus in the checkpoint server documentation and documenting my changes for this ticket.\n\n<p></p><hr/>\n<em>2009-Jul-16 13:04:06 by psilord:</em> <br/>\n\nFixed up the documentation concerning this ticket and some detritus in the checkpoint server section of the manual.\n\n<p>Committed everything.\n\n</p><p></p><hr/>\n<em>2009-Jul-28 16:15:48 by psilord:</em> <br/>\n\nOk, this ticket should be resolved unless something shows up to reawaken it.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-16 13:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/c1b579bdc8e167d7ac9ad61b4ec81501c926c854\">[15106]</a></span>: Changed the \"check for stale file code\" default to be on and to have 1 day check intervals. <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=552\" onclick=\"get_ticket_and_populate_wrapper('552'); return false;\" title=\"schedd/shadow block on connecting to down ckpt server\">#552</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-16 13:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/5480e925218831930d69ba7987a8d829d60eba63\">[24902]</a></span>: + Documented bug fixes and features related to <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=552\" onclick=\"get_ticket_and_populate_wrapper('552'); return false;\" title=\"schedd/shadow block on connecting to down ckpt server\">#552</a></span>. + Updated the documentation a little bit in the checkpointing section to be more relevant.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-15 11:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/dc2ef51e21aeb2660fd29651ca3e2d47beb5d5fa\">[15097]</a></span>: Removed some testing code for <span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=552\" onclick=\"get_ticket_and_populate_wrapper('552'); return false;\" title=\"schedd/shadow block on connecting to down ckpt server\">#552</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jun-29 14:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/ace1e35d2a503af750731c534e2a52cad337e521\">[14987]</a></span>: First and maybe final round of fixes suggested by code review. Specified PROV_CONDOR for the Directory object uses. Changed an unlink() to use the equivalent, but more feature ridden, function in the Directory object. Made the path validity determination for what I'm deleting even more strict. Added\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jun-24 16:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6d4ba72e9d4b5db9fafbd944cd3e82d2851767e5\">[14971]</a></span>: Implemented a blocking connect with timeout in the schedd to ckpt server. This is to stop the schedd from blocking for long periods of time on down ckpt servers and getting itself into trouble. The schedd will remember timed out ckpt servers and not connect to them until some configurable time later.\u00a0[...]\n (By Peter Keller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Jan-31 13:15", "status": "defer", "created": "2009-Jun-10 16:02", "fixed_version": "2009-Jun-10 16:02", "broken_version": "", "priority": "5", "subsystem": "Daemons", "assigned_to": "psilord", "derived_from": "", "creator": "psilord", "rust": "a19180", "customer_group": "ligo", "visibility": "public", "notify": "psilord@cs.wisc.edu,pcouvare@caltech.edu", "due_date": ""}