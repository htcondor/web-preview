{"id": 5250, "title": "Ticket #5250: Make meta knobs for exceeding cpu and memory limits", "description": "<blockquote>\nDefine meta-knobs to have the startd immediately preempt and/or put on hold jobs that either exceed memory or cpu provisioned in the slot, ignoring any job retirement time or suspend rules.\nIn the event the job is put on hold, a reasonable default hold reason and subcode should be provided, but there should also be a way for the admin to customize these.\nThe meta-knobs should be written in a way that they can conflate with any pre-existing startd policy settings.\n\n<p>Suggested names for these meta-knobs are -\n\n</p><p></p><ol>\n<li>use policy: preempt_if_cpus_exceeded\n</li><li>use policy: hold_if_cpus_exceeded\n</li><li>use policy: preempt_if_memory_exceeded\n</li><li>use policy: hold_if_memory_exceeded\n</li></ol>\n\n<p>Behold Todd's awesome config knob prowess; suggested values for these knobs are -\n\n</p><p><span class=\"subsection\"></span></p><h3>use policy: preempt_if_cpus_exceeded</h3>\n\n<p></p><div class=\"code\">\n<pre class=\"code\">#\n# Publish the number of CPU cores being used by the job into\n# to slot ad as attribute \"CpusUsage\". This value will\n# be the average number of cores used by the job over the\n# past minute, sampling every 5 seconds, and rounded to two digits.\n#\nCpusUsage = ifthenelse( \\\n   TotalLoadAvg &gt; 0.0 &amp;&amp; Activity!=\"Idle\", \\\n   int(CondorLoadAvg / TotalLoadAvg * \\\n      ifthenelse(TotalLoadAvg &lt; $(DETECTED_CORES), TotalLoadAvg, $(DETECTED_CORES)) \\\n      * 100) / 100.0, \\\n   0)\nSTARTD_EXPRS = $(STARTD_EXPRS) CpusUsage\n#\n# If the startd sees the number of CPU cores used by the job exceed the\n# number of cores in the slot by more than 0.8, preempt the job\n# immediately ignoring any retirement time.\n#\nCPU_EXCEEDED = (CpusUsage &gt; Cpus + 0.8)\nPREEMPT = ($(PREEMPT:False)) || $(CPU_EXCEEDED)\nMAXJOBRETIREMENTTIME = ifthenelse($(CPU_EXCEEDED),0,$(MAXJOBRETIREMENTTIME:0))\nWANT_SUSPEND = ($(WANT_SUSPEND:False)) &amp;&amp; $(CPU_EXCEEDED) =!= TRUE\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>use policy: hold_if_cpus_exceeded</h3>\n<div class=\"code\">\n<pre class=\"code\">use policy: preempt_if_cpus_exceeded\n#\n# If the startd preempted a job because CPU usage exceeded the number\n# of cores in the slot, put the job on hold.\n#\nWANT_HOLD = ($(WANT_HOLD:False)) || $(CPU_EXCEEDED)\nWANT_HOLD_REASON = ifThenElse($(CPU_EXCEEDED), \\\n   $(HOLD_REASON_CPU_EXCEEDED:\"cpu usage exceeded request_cpus\"), \\\n   $(WANT_HOLD_REASON:UNDEFINED))\nWANT_HOLD_SUBCODE = ifThenElse($(CPU_EXCEEDED), \\\n   $(HOLD_SUBCODE_CPU_EXCEEDED:101), \\\n   $(WANT_HOLD_SUBCODE:UNDEFINED))\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>use policy: preempt_if_memory_exceeded</h3>\n<div class=\"code\">\n<pre class=\"code\">#\n# If the startd sees the memory usage of the job exceed the\n# memory in the slot, preempt the job immediately ignoring any retirement time.\n#\nMEMORY_EXCEEDED = (MemoryUsage =!= UNDEFINED &amp;&amp; MemoryUsage &gt; Memory)\nPREEMPT = ($(PREEMPT:False)) || $(MEMORY_EXCEEDED)\nMAXJOBRETIREMENTTIME = ifthenelse($(MEMORY_EXCEEDED),0,$(MAXJOBRETIREMENTTIME:0))\nWANT_SUSPEND = ($(WANT_SUSPEND:False)) &amp;&amp; $(MEMORY_EXCEEDED) =!= TRUE\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>use policy: hold_if_memory_exceeded</h3>\n<div class=\"code\">\n<pre class=\"code\">use policy: preempt_if_memory_exceeded\n#\n# If the startd preempted a job because memory usage exceeded the amount\n# of memory in the slot, put the job on hold.\n#\nWANT_HOLD = ($(WANT_HOLD:False)) || $(MEMORY_EXCEEDED)\nWANT_HOLD_REASON = ifThenElse($(MEMORY_EXCEEDED), \\\n   $(HOLD_REASON_MEMORY_EXCEEDED:\"memory usage exceeded request_memory\"), \\\n   $(WANT_HOLD_REASON:UNDEFINED))\nWANT_HOLD_SUBCODE = ifThenElse($(MEMORY_EXCEEDED), \\\n   $(HOLD_SUBCODE_MEMORY_EXCEEDED:102), \\\n   $(WANT_HOLD_SUBCODE:UNDEFINED))\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2015-Sep-03 18:10:48 by tannenba:</em> <br/>\n\nAdded cgroup folks to this ticket because I am looking for suggestions...\n\n<p>I'd like the above metaknobs to work with cgroups, or at least be compatible with cgroups.  The big concern here is if cgroups is enabled with a soft limit on the memory, then the memory preempt meta-knob should not fire.   Also it would be nice to be able to tell the cgroup code to either preempt or put on hold in the event the OOM killer kills the job, instead of the hard-coded always put on hold that exists now.\n\n</p><p>So is there a way for these metaknobs to see if cgroups is enabled?  I could test BASE_CGROUP for instance, but that does not ensure cgroups is actually available and running....  any thoughts?\n\n</p><p></p><hr/>\n<em>2015-Oct-05 14:21:21 by johnkn:</em> <br/>\n\nCODE_REVIEW: looks good\n\n<p></p><hr/>\n<em>2015-Oct-20 21:09:15 by tim:</em> <br/>\n\nAccording to <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5132\" onclick=\"get_ticket_and_populate_wrapper('5132'); return false;\" title=\"fix problems with SLOT_TYPE_n_* params\">#5132</a></span>, STARTD_EXPRS are obsolete and STARTD_ATTRS should be used instead. However, one of the expressions use STARTD_EXPRS,\n\n<p></p><hr/>\n<em>2015-Oct-22 15:24:29 by tim:</em> <br/>\n\nIn <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5326\" onclick=\"get_ticket_and_populate_wrapper('5326'); return false;\" title=\"*_EXPRS should be uniformly replaced with *_ATTRS\">#5326</a></span>, the STARTD_EXPRS will be corrected.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=5933\" onclick=\"get_ticket_and_populate_wrapper('5933'); return false;\" title=\"cpu_exceeded startd policies are invalid\">#5933</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ncpu_exceeded startd policies are invalid</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Sep-24 14:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/99021299d4087cf54afd4885ea7d66bc86c37c1d\">[45884]</a></span>: Added version history and documentation for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5250\" onclick=\"get_ticket_and_populate_wrapper('5250'); return false;\" title=\"Make meta knobs for exceeding cpu and memory limits\">#5250</a></span>.  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Sep-23 14:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/05ebb6193ca0606f8c7025c3793dc19cd2a0957f\">[45881]</a></span>: Add metaknobs for exceeding CPU and memory limits. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5250\" onclick=\"get_ticket_and_populate_wrapper('5250'); return false;\" title=\"Make meta knobs for exceeding cpu and memory limits\">#5250</a></span> Added the following metaknobs: use policy: preempt_if_cpus_exceeded use policy: hold_if_cpus_exceeded use policy: preempt_if_memory_exceeded use policy: hold_if_memory_exceeded  (By Todd Tannenbaum )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2015-Oct-22 15:24", "status": "resolved", "created": "2015-Sep-03 17:44", "fixed_version": "2015-Sep-03 17:44", "broken_version": "", "priority": "3", "subsystem": "DaemonsExecNode", "assigned_to": "tannenba", "derived_from": "", "creator": "tannenba", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "johnkn@cs.wisc.edu gthain@cs.wisc.edu bbockelm@cse.unl.edu", "due_date": ""}