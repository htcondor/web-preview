{"id": 1484, "title": "Ticket #1484: Lock file deletion foils locking of daemon logs", "description": "<blockquote>\nThe config parameter &lt;subsys&gt;_LOCK can be used to cause the daemons to use a lock file to ensure exclusive access to the daemon log. It's more commonly used with the shadow and gridmanager, which can have many daemons writting to the same daemon logfile.\n\n<p>The daemons keep the lock file open constantly, locking and unlocking it as required. If the lock file doesn't exist when the daemon starts up, it creates the file. This causes problems if the lock file is deleted. Older daemons continue to use the unlinked lock file, while any new daemons will use a newly-created lock file. This can lead to concurrent writes which can be interleaved. Also, when a daemon rotates the file, it can EXCEPT if other daemons continue to write to the log mid-rotation. In particular, the rotating daemon checks whether the old filename still exists after a rename() and blows up if it does.\n\n</p><p>The BNL ATLAS group is seeing this happen on their Condor-G systems.\n\n</p><p>A possible solution is for the daemons to close and reopen the lock file each time it's used, or at least stat the filename and ensure the inode hasn't changed.</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Jul-02 14:31:54 by jfrey:</em> <br/>\n\nGood way to mostly reproduce: start a vanilla job running, then delete the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLock\" title=\"Shadow Lock\">ShadowLock</a></span> file, then submit another vanilla job. When the second job starts running, look at the files both shadows have open (lsof -p or ls /proc/&lt;pid&gt;/fd). Both will have the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ShadowLock\" title=\"Shadow Lock\">ShadowLock</a></span> file open, but for the older shadow, it will show the file as '(deleted)'.\n\n<p>This won't reproduce the daemon EXCEPTing, but will demonstrate the underlying problem. Once we have a fix, it'll be easy to test on BNL's systems. They have multiple gridmanager daemons that are constantly writing to the daemon log.\n\n</p><p></p><hr/>\n<em>2010-Jul-08 10:35:08 by jfrey:</em> <br/>\n\nI've found another cause for a daemon dying during log rotation (due to the old file still existing after a rename). When the logging code is initialized (in dprintf_config()), the log file is opened and immediately closed. If the log file doesn't exist, it's created. This is done without regard to the lock file.\n\n<p>This can be fixed by having dprintf_config() initialize the lock filename, then call the debug_lock() instead of directly opening the log file.\n\n</p><p></p><hr/>\n<em>2010-Jul-08 15:39:33 by jfrey:</em> <br/>\n\nPushed patch dprintfFileLock2.patch to V7_4-branch for 7.4.4.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/195/dprintfFileLock.patch\">dprintfFileLock.patch</a>\n4020 bytes added by cweiss on 2010-Jul-08 16:54:59 UTC.\n<br/>\nThe patch to prevent this from happening - the change is twofold: first, an fstat check makes sure that the lock file descriptor is still valid, second, dprintf_config first locks the log file before opening and closing it, if locking is configured.<br/>\n</li><li><a href=\"../files/196/dprintfFileLock2.patch\">dprintfFileLock2.patch</a>\n4364 bytes added by jfrey on 2010-Jul-08 18:47:00 UTC.\n<br/>\nThis patch combines Cathrin's patch with one I was working on. In my patch, dprintf_config() calls debug_lock() and debug_unlock(), rather than duplicating some of the code.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Sep-15 16:07</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/443578ded64781306adc15e36b45780a6a53ed69\">[18988]</a></span>: Remove a _condor_dprintf_exit call after dprintf finds the original log file to be there after a rename. It's something that should be reported but not lead to a hard exit. This relates to issue <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1484\" onclick=\"get_ticket_and_populate_wrapper('1484'); return false;\" title=\"Lock file deletion foils locking of daemon logs\">#1484</a></span> (or <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1655\" onclick=\"get_ticket_and_populate_wrapper('1655'); return false;\" title=\"Shadow exits due to dprintf rotation failure\">#1655</a></span>).  (By Cathrin Weiss )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jul-08 15:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/b38e75e2ccfa145be4f66a565e05d999ff3cba44\">[18559]</a></span>: Fix bugs in daemon log lock file code that can cause EXCEPT()s. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1484\" onclick=\"get_ticket_and_populate_wrapper('1484'); return false;\" title=\"Lock file deletion foils locking of daemon logs\">#1484</a></span> When multiple daemons writing to the same daemon log are using a lock file (i.e. &lt;subsys&gt;_LOCK is defined), a daemon rotating the log will EXCEPT if the log filename still exists immediately after the daemon renames it (since the lock\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Jul-08 15:39", "status": "resolved", "created": "2010-Jul-02 13:17", "fixed_version": "2010-Jul-02 13:17", "broken_version": "v070402", "priority": "2", "subsystem": "Libs", "assigned_to": "jfrey", "derived_from": "", "creator": "cweiss", "rust": "", "customer_group": "atlas", "visibility": "public", "notify": "xzhao@bnl.gov, cweiss@cs.wisc.edu, matt@cs.wisc.edu", "due_date": ""}