{"id": 4026, "title": "Ticket #4026: my_popen() doesn't reap child process on failure", "description": "<blockquote>\nIn normal usage, my_popen() creates a child process and my_pclose() reaps it (by calling waitpid()). Thus, the child process is not seen by daemon-core's reaping code. But if my_popen() creates the child process and fails to exec() the desired program, it returns NULL but doesn't reap the child.\n\n<p>The child process is later reaped by daemon-core, which calls the daemon's main reaper, which won't know what to do with the pid. The startd thinks it's a rogue starter and prints a big warning to the log, which can cause needless concern for the admin.\n\n</p><p>When my_popen() is going to return NULL after creating the child process, it should call waitpid() first.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-Feb-28 11:33:28 by tlmiller:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>The first conditional could fire without the child process terminating, and we probably don't want to block if we can avoid it.  It wouldn't hurt to kill -9 the child process in the second conditional as well, even though that process is \"on its way out the door\".\n\n</p><p>The code is otherwise clean, and since we want to make sure the child process is dead if we say it is, kill -9'ing it makes more sense than playing games with timing out in the waitpid() loops.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/810/popen_reap.patch\">popen_reap.patch</a>\n764 bytes added by jfrey on 2013-Oct-31 21:19:15 UTC.\n<br/>\nFix my_popen() to always reap the child process.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-03 10:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/64a16040eb83d067fdf6aaa1581e06655d975e9a\">[39852]</a></span>: minor edit of 8.1.5 version history item <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4026\" onclick=\"get_ticket_and_populate_wrapper('4026'); return false;\" title=\"my_popen() doesn't reap child process on failure\">#4026</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-02 14:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/503cb2b5140179799af7e48d8e9db9d8206dad8c\">[39841]</a></span>: Docs for my_popen() reaping child process on failure. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4026\" onclick=\"get_ticket_and_populate_wrapper('4026'); return false;\" title=\"my_popen() doesn't reap child process on failure\">#4026</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-06 10:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4e84234f08327e0ce9169c875e947f8c52d133d8\">[39538]</a></span>: my_popen() should reap the child process when returning failure. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4026\" onclick=\"get_ticket_and_populate_wrapper('4026'); return false;\" title=\"my_popen() doesn't reap child process on failure\">#4026</a></span>  (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2014-Apr-02 14:33", "status": "resolved", "created": "2013-Oct-31 16:18", "fixed_version": "2013-Oct-31 16:18", "broken_version": "v080000", "priority": "4", "subsystem": "Libs", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}