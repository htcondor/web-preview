{"id": 1393, "title": "Ticket #1393: Implement tiered groups and hierarchical fairshare", "description": "<blockquote>\nThere needs to be a a way to specify multiple levels of groups and a mechanism to provide proper fairshare accounting in negotiation.</blockquote>", "remarks": "<blockquote>\n<em>2010-May-05 09:58:47 by jrt:</em> <br/>\n\n<div class=\"verbatim\">\n<pre>notes:\n\nHere is an example of a group config.\n\nAs it stands the group/subgroup delimeter is \".\"\n\nIt's the same as the group/user delimeter. The assumption is that accounting\ngroups are specified as group.group.group.username.\n\nAll groups in a list of subgroups must be declared in config.\n\nAll groups must have a quota declaration. If a group does not have a quota\ndeclaration, it will effectively prune it's subgroups from the tree.\n\nOne can use a dynamic or a static quota declaration. If one uses a static\ndeclaration and the subgroup quota&gt;parent group quota, the subgroup quota will\nbe set to be equal the parent.\n\nAll groups can have submitters. The quota for these submitters is whatever is\nunclaimed by subgroups. See below a1 and b1 are top level groups and thier\nquota adds up to .8. That means 0.2 is left for users within no group. also see\nbelow that a1.a3.a1, a1.a3.a2, and a1.a3.a3 add up to 0.8. That means\nsubmitters in group a1.a3 will have 0.2 for quota.\n\nFor autoregroup, it's a hierachy. Groups with the same parent get first chance\nat unused slots. In order for a group to get a chance at unused slots from some\nsubgroup across the tree, autoregroup needs to be set from the common parent to\nthe group that wants to grow.\n\n------------------------------\n\n\nGROUP_NAMES = a1, b1, a1.a2, a1.a1, a1.a3, a1.a3.a1, a1.a3.a2, a1.a3.a3, b1.b2,\nb1.b1\nGROUP_QUOTA_DYNAMIC_a1 = .4\n#GROUP_QUOTA_a1 = 40\nGROUP_QUOTA_DYNAMIC_b1 = .4\nGROUP_QUOTA_DYNAMIC_b1.b1 = .4\nGROUP_QUOTA_DYNAMIC_b1.b2 = .6\nGROUP_QUOTA_DYNAMIC_a1.a2 = .2\nGROUP_QUOTA_DYNAMIC_a1.a1 = .2\nGROUP_QUOTA_DYNAMIC_a1.a3 = .6\nGROUP_QUOTA_DYNAMIC_a1.a3.a3 = .2\nGROUP_QUOTA_DYNAMIC_a1.a3.a2 = .2\nGROUP_QUOTA_DYNAMIC_a1.a3.a1= .4\nGROUP_AUTOREGROUP_a1 = TRUE\nGROUP_AUTOREGROUP_a1.a3 = TRUE\nGROUP_AUTOREGROUP_a1.a3.a1 = TRUE\nGROUP_AUTOREGROUP_b1 = TRUE\nGROUP_AUTOREGROUP_b1.b2 = TRUE\nGROUP_AUTOREGROUP_b1.b1 = TRUE\n\nexample job file:\n\narguments = 600\nuniverse = vanilla\nshould_transfer_files = YES\nwhen_to_transfer_output = ON_EXIT\n+AccountingGroup = \"a1.a3.a1.jrt\"\nqueue 100\n\nnote how the group and user is specified\n\n</pre></div>\n\n\n<p></p><hr/>\n<em>2010-May-12 12:14:24 by eje:</em> <br/>\n\nThis list is in no particular order:\n\n<p>1) SimpleGroupEntry::staticquota should be type 'bool'\n\n</p><p>2) SimpleGroupEntry::groupName should be type 'MyString'. Will prevent malfunction if admin uses long group names (or deep hierarchy, etc).\n\n</p><p>2a) scheddName should be <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span>.\n\n</p><p>3) Reorg for readability:  handle short/easy case at top of function:\n</p><div class=\"verbatim\">\n<pre>if (NULL == groups) {\n    // negotiate w/ all users who do not belong to a group.\n    negotiateWithGroup(untrimmed_num_startds, untrimmedSlotWeightTotal, minSlotWeight, startdAds, claimIds, scheddAds);\n    // ----- Done with the negotiation cycle\n    dprintf( D_ALWAYS, \"---------- Finished Negotiation Cycle ----------\\n\" );\n    completedLastCycleTime = time(NULL);\n    return TRUE;\n}\n// rest of code for (groups != NULL) ...\n</pre></div>\n\n\n<p>4) can a dynamic group quota be set to zero by admin?  (If they do, it will flag as error in current code).\n\n</p><p>5 Is this a bug?  (should be groupName[0]?)\n</p><div class=\"verbatim\">\n<pre>//leave the name null for now so it doesn't trip up the sort\ngroupArray[0].groupName[255]= '\\0';\n</pre></div>\n\n\n<p>6) Recommend groupArray be std::vector&lt;SimpleGroupEntry&gt; (can use .push_back(), .size(), etc)\n\n</p><p>7) Recommend a comment to annotate fact that sort() also induces the tree structure (left/right/parent, etc)  (maybe rename to induce_tree()?)\n\n</p><p>8) Proposal: logic for tree structure induction may be cleaner if pre-process groupnames:\n</p><div class=\"verbatim\">\n<pre>    \"g1.sg2.sg3\"  ==&gt;  vector&lt;string&gt;:  [\"g1\", \"sg2\", \"sg3\"]\n</pre></div>\n\n(so list of groups would become type vector&lt;vector&lt;string&gt; &gt;). Would be able to take strstr(), strchr(), etc out of tree induction logic.  Length of vector directly gives depth of group, etc.  Could just apply STL sort(groups.begin(),groups.end()), and then iterate down the list:  Each time vector length increments, you just moved to new ply of tree.  Each time you see length decrement, you just moved out of subtree.\n\n<p>9) using 'double' instead of 'float' would make sure quota roundoff accumulation is insignificant, although unlikely to be a major problem.\n\n</p><p>10. consider renaming '.left' and '.right' to something like '.prev' and '.next', (left and right frequently denote children in binary trees).   Might be even better for clarity to have each node directly store vector of child indexes.  e.g. (std::vector&lt;int&gt; children), instead of using linked list.  I think this would also eliminate some of the inner loops over children used for counting over linked list.\n\n</p><p>11. copygroup() ===&gt;  operator=() ?\n\n</p><p>12. I think it would improve clarity to do the allocation of jobs to HFS slots as a tree-recursion algorithm.  Probably depth-first recursion, since a given group gets jobs if there is any 'pie' left over after its children.   Could either write recursive function directly, or use a node stack if that makes carryover of fractional quotas easier.\n\n</p><p></p><hr/>\n<em>2010-Jun-10 15:35:56 by eje:</em> <br/>\n\nAdded an updated patch which is same as previous patch except for some added comments about significance of topological tree node sort, and the storage of children as linked list of indexes.\n<hr/>\n<em>2010-Oct-20 16:03:30 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.\n<hr/>\n<em>2011-Jan-27 14:46:04 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 16:08:44 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.\n\n<p></p><hr/>\nThe latest patch needs to be rebounced.  I will update and attach asap.\n--Erik\n\n<p></p><hr/>\n<em>2011-Feb-02 17:39:55 by danb:</em> <br/>\n\n<ul>\n<li>This feature is being referred to as \"Hierarchical Fair Share\".  The \"Fair Share\" calculation is different from Condor's other fair share algorithm, which relies on a running average of past usage, and a priority factor, to determine fair share.  To avoid confusion, should we refer to this new feature as \"Hierarchical Group Quotas\"?  From a user's point of view (i.e. in log messages), it may make sense to simply refer to it as \"Group Quotas\", since there may or may not actually be a hierarchy.\n\n<p></p></li><li>Let me make sure I understand the implications of slot weights being unsupported in HFS.  This changes behavior for existing configurations that use group quotas, right?  As I recall, slot weights were added by Cycle specifically for group quotas.  Now, if any groups are defined, it looks to me like slot weights are no longer supported, whether one is using the group hierarchy or not.\n\n<p></p></li><li>In <code>Accountant::AddMatch()</code> you update the stats for the user's group.  Should you also be updating the stats for parent groups?  I think no, but I want to make sure you agree.\n\n<p></p></li><li>The following comment is no longer accurate, because there is always a group record, yes?\n</li></ul>\n\n<p></p><div class=\"verbatim\">\n<pre>// Determine if we need to update a second customer record w/ the group name.\n</pre></div>\n\n\n<p></p><ul>\n<li>New configuration variables NEGOTIATOR_USE_SLOT_WEIGHTS, HFS_MAX_ALLOCATION_ROUNDS, HFS_ROUND_ROBIN_RATE, and GROUP_ACCEPT_SURPLUS are referenced.  These should be added to condor_utils/param_info.in so that they are known to the config system (e.g. the default values are visible to condor_config_val).\n\n<p></p></li><li>By the way, condor standard coding style dictates that {}'s surround the inner block in cases such as this:\n</li></ul>\n\n<p></p><div class=\"verbatim\">\n<pre>            while (ClassAd* ad = group-&gt;submitterAds-&gt;Next())\n                group-&gt;submitterAds-&gt;Remove(ad);\n</pre></div>\n\n\n<p>There were a number of such cases.\n\n</p><p></p><ul>\n<li>The HFS algorithm depends on <code>IdleJobs</code> and <code>RunningJobs</code> in the submitter ad to determine how many slots a submitter wants.  Jobs which only match a subset of the machines (or none at all) may throw things off.  Your solution to that is HFS_MAX_ALLOCATION_ROUNDS and HFS_ROUND_ROBIN_RATE, yes?\n\n<p></p></li><li>I like \"ACCEPT_SURPLUS\" in place of \"AUTOREGROUP\"!\n</li></ul>\n\n<p></p><hr/>\n<em>2011-Feb-03 09:20:09 by eje:</em> <br/>\n\n<hr/>\nRe: HFS vesus \"HGQ\" or \"GQ\" (stylish!), the \"fair share\" was referring to \"fair share\" of slots, and also fair-share of surplus quotas.  I can substitute references of \"HFS\" to \"HGQ\", etc.\n\n<p>Re: slot weights, our experience has been that they don't work well in an accounting-group environment, due to packing-problem kinds of issues.  It just doesn't fill slots very well in general.   However, it doesn't break the algorithm to allow weighted slots.  I also suspect that the newer \"allocation rounds\" and \"round robin\" loops on top of the negotiation would mitigate that, but I haven't tested that theory.   I'm willing to (re)enable weighted slots with HFS, although I'm dubious about how well they work together.\n\n</p><p>Re: AddMatch(), I agree that not propagating to parent groups is the right policy.  Each job runs against a particular group, and so for these purposes it would be inappropriate to count a group's usage against parent groups.\n\n</p><p>Re: comment, in this new scheme every job has a group, so yes that comment no longer applies.\n\n</p><p>Re: documentation of params, I'll update the docs asap.\n\n</p><p>Re: \"{}\", I'll put them in whenever I next update the code.\n\n</p><p>Re: max-allocation-rounds and round-robin-rate, yes those loops are designed to mitigate slot-filling problems.  \"Allocation-rounds\" are a way to adapt to cases where a group's jobs cannot match slots, and so it can attempt to allocate to other groups if possible.   \"Round-robin\" is for mitigating what we've been calling the \"overlapping-effective-pool\" problem, where multiple groups may be \"competing\" for the same subset of slots.  It preserves relative allocation ratios in the \"sub-pool\", and minimizes starvation. There is a test-case attached to this ticket that exercises these loops.  We've also been getting good feedback on these from customers.\n\n</p><p></p><hr/>\n<em>2011-Feb-03 10:35:00 by danb:</em> <br/>\n\nI should also point out that this patch depends on the configuration system handling configuration macros with names containing \".\" characters.  In the current implementation, this works, despite the fact that \".\" has a special meaning.  There has been talk about reimplementing the configuration system.  I don't know if this use of \".\" would be problematic.  It might be worth running this by Will Benton or Pete Keller to see how much noise they make.\n\n<p></p><hr/>\n<em>2011-Feb-03 13:10:32 by willb:</em> <br/>\n\nI can't think of any reason why dots-in-macro-names wouldn't continue to work in the design that Pete and I discussed.  In any case, a rework of the configuration subsystem is probably pretty far off in the future at this point.\n\n<p></p><hr/>\n<em>2011-Feb-04 09:08:47 by eje:</em> <br/>\n\n<hr/>\nAttached updated patch to address Dan's feedback\n-E\n\n<p></p><hr/>\n<em>2011-Feb-04 09:27:30 by danb:</em> <br/>\n\nThanks for the quick patch!  One thought: should HGQ_MAX_ALLOCATION_ROUNDS be named GROUP_QUOTA_MAX_ALLOCATION_ROUNDS?  Similar suggestion for HGQ_ROUND_ROBIN_RATE.  These settings apply to group quotas, whether there is a hierarchy or not, don't they?\n\n<p></p><hr/>\n<em>2011-Feb-04 10:27:01 by eje:</em> <br/>\n\n<hr/>\nEverything is a hierarchy -- some are just flatter than others :-)\n\n<p>(Attached a patch with HGQ_ -&gt; GROUP_QUOTA_)\n\n</p><p></p><hr/>\n<em>2011-Feb-04 12:17:50 by danb:</em> <br/>\n\nAs far as I am concerned, this patch can be pushed to the master branch for 7.5.6.  Go ahead!  Or if you would like me to do it, let me know.\n\n<p></p><hr/>\n<em>2013-Jan-15 16:02:11 by gthain:</em> <br/>\n\nLet's work on a design doc for this a <span class=\"wiki\"><a href=\"wiki?p=HgqDesignDoc\" title=\"Hgq Design Doc\">HgqDesignDoc</a></span></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=1748\" onclick=\"get_ticket_and_populate_wrapper('1748'); return false;\" title=\"Convert primary HFS structure from array to tree\">#1748</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nConvert primary HFS structure from array to tree</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1906\" onclick=\"get_ticket_and_populate_wrapper('1906'); return false;\" title=\"Update documentation for new Hierarchical Acct Group Quotas (HGQ)\">#1906</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nUpdate documentation for new Hierarchical Acct Group Quotas (HGQ)</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1923\" onclick=\"get_ticket_and_populate_wrapper('1923'); return false;\" title=\"Group usage set to zero on reconfig\">#1923</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nGroup usage set to zero on reconfig</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1926\" onclick=\"get_ticket_and_populate_wrapper('1926'); return false;\" title=\"RFE: option for condor_userprio to report acctgrp stats hierarchically\">#1926</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRFE: option for condor_userprio to report acctgrp stats hierarchically</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1952\" onclick=\"get_ticket_and_populate_wrapper('1952'); return false;\" title=\"the accountant is inconsistent about case sensitivity\">#1952</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nthe accountant is inconsistent about case sensitivity</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1996\" onclick=\"get_ticket_and_populate_wrapper('1996'); return false;\" title=\"group quota not applied to groups with capital letters in name\">#1996</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ngroup quota not applied to groups with capital letters in name</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2092\" onclick=\"get_ticket_and_populate_wrapper('2092'); return false;\" title=\"Negotiator miscounts resources it hands out\">#2092</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nNegotiator miscounts resources it hands out</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2509\" onclick=\"get_ticket_and_populate_wrapper('2509'); return false;\" title=\"condor_q -better crashes the negotiator for the first job\">#2509</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ncondor_q -better crashes the negotiator for the first job</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2515\" onclick=\"get_ticket_and_populate_wrapper('2515'); return false;\" title=\"Regression testing for Hierarchical Group Quotas\">#2515</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRegression testing for Hierarchical Group Quotas</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=2562\" onclick=\"get_ticket_and_populate_wrapper('2562'); return false;\" title='RFE: allow the root group \"&lt;none&gt;\" to be assigned an alternate name'>#2562</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRFE: allow the root group \"&lt;none&gt;\" to be assigned an alternate name</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"defer\" href=\"/tickets?ticket=2570\" onclick=\"get_ticket_and_populate_wrapper('2570'); return false;\" title=\"preemption does not work when group quotas are in effect\">#2570</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\npreemption does not work when group quotas are in effect</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/167/hfs.patch.may_5_9_04\">hfs.patch.may_5_9_04</a>\n53214 bytes added by jrt on 2010-May-05 20:35:38 UTC.\n<br/>\ntiered group hfs patch<br/>\n</li><li><a href=\"../files/183/hfs.patch\">hfs.patch</a>\n57593 bytes added by jrt on 2010-Jun-03 18:52:57 UTC.\n<br/>\nadopted vector and string and fixed the \"missing slot\" roundoff issue.<br/>\n</li><li><a href=\"../files/187/HFS_2010_06_10.patch\">HFS_2010_06_10.patch</a>\n58716 bytes added by eje on 2010-Jun-10 20:34:38 UTC.\n<br/>\nSame as previous June-3 patch, except for some comments to improve code annotation.<br/>\n</li><li><a href=\"../files/189/hfs.patch\">hfs.patch</a>\n49499 bytes added by jrt on 2010-Jun-15 19:26:07 UTC.\n<br/>\nchanges:\n\n<p>-Patch that uses a tree based structure.\n-The various stages have been broken out into different functions, most of\nwhich are recursive. i.e. negotiatewithgroup now has a wrapper\n-I changed some of the code around for simplification.\n-Moved everything to doubles\n\n</p><p>Things to do:\n- It has the \"off by one slot\" error. I haven't moved that part of the code\nover yet. I'd like to experiment with the code a bit more.\n- Test all the scenarios more thoroughly\n- clean up debug and there is a some extraneous code to be removed. <br/>\n</p></li><li><a href=\"../files/247/V7_5_HFS_merge.patch\">V7_5_HFS_merge.patch</a>\n107683 bytes added by eje on 2010-Dec-02 22:38:05 UTC.\n<br/>\nPatch for HFS refactoring against latest V7_5 head (master).\n<br/>\n</li><li><a href=\"../files/248/hfs_func_tests.tgz\">hfs_func_tests.tgz</a>\n6567 bytes added by eje on 2010-Dec-02 22:39:40 UTC.\n<br/>\nSome functional tests for HFS<br/>\n</li><li><a href=\"../files/268/V7_5_HFS_merge.patch2\">V7_5_HFS_merge.patch2</a>\n108097 bytes added by eje on 2011-Feb-02 18:21:43 UTC.\n<br/>\nRebounced HFS against latest upstream master.<br/>\n</li><li><a href=\"../files/270/V7_5_HFS_merge.patch3\">V7_5_HFS_merge.patch3</a>\n112373 bytes added by eje on 2011-Feb-04 15:08:03 UTC.\n<br/>\n<hr/>\n<div class=\"verbatim\">\n<pre>Update to patch that includes:\n* enabled weighted slots\n* \"HFS\" -&gt; \"HGQ\" (internal)\n* \"HFS\" -&gt; \"group quotas\" in log output\n* parameters in param_info.in\n* mo betta \"{}\"\n</pre></div>\n<br/>\n</li><li><a href=\"../files/271/V7_5_HFS_merge.patch4\">V7_5_HFS_merge.patch4</a>\n112421 bytes added by eje on 2011-Feb-04 16:25:01 UTC.\n<br/>\nHQG_ --&gt; GROUP_QUOTA_\n<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-07 15:53</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/49c789bf48a59da555494fc678b0dfa790b632ec\">[35639]</a></span>: Correct and edit prose on group accounting and hierarchical group quotas. ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2728\" onclick=\"get_ticket_and_populate_wrapper('2728'); return false;\" title=\"RFE: a 1st-class accounting_group 'command' for submit files\">#2728</a></span> ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3053\" onclick=\"get_ticket_and_populate_wrapper('3053'); return false;\" title='HGQ and negotiation: document the &lt;none&gt; \"group\"'>#3053</a></span> ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1393\" onclick=\"get_ticket_and_populate_wrapper('1393'); return false;\" title=\"Implement tiered groups and hierarchical fairshare\">#1393</a></span> ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1906\" onclick=\"get_ticket_and_populate_wrapper('1906'); return false;\" title=\"Update documentation for new Hierarchical Acct Group Quotas (HGQ)\">#1906</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Feb-04 13:15</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/9925479badcffc1c5c38689ac17c86c15cf36fa7\">[20290]</a></span>: Support for Hierarchical Accounting Groups and Group Quotas (HGQ) -- <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1393\" onclick=\"get_ticket_and_populate_wrapper('1393'); return false;\" title=\"Implement tiered groups and hierarchical fairshare\">#1393</a></span>  (By Erik Erlandson )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2013-Jan-15 16:02", "status": "resolved", "created": "2010-May-05 09:55", "fixed_version": "2010-May-05 09:55", "broken_version": "", "priority": "2", "subsystem": "Daemons", "assigned_to": "jrt", "derived_from": "", "creator": "eje", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu, jrthomas@redhat.com, eje@redhat.com, rrati@redhat.com, tstclair@redhat.com, tannenba@cs.wisc.edu,dan@hep.wisc.edu,willb@redhat.com", "due_date": ""}