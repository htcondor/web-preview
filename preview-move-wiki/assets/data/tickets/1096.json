{"id": 1096, "title": "Ticket #1096: HFC Initial benchmarking", "description": "<blockquote>\nWork is on V7_5-HFCBenchmarking work</blockquote>", "remarks": "<blockquote>\n<em>2010-Jan-14 21:03:49 by jshill4:</em> <br/>\n\nI've succeeded in getting the shadow to send a command to the starter via Daemon Core's command framework.  I can also send data from the starter to the shadow using the NT functions and the syscall_socket.  This should be enough to get the benchmarks written fairly quickly.\n\n<p>The way the bench marks will work is this:\n</p><ol>\n<li>the starter will send a message via syscall_sock to let the shadow know it's ready.  This message will include the sinfull string.  This might not be the best way to get the address to the shadow, but I couldn't find any other way.\n</li><li>the shadow will construct a daemon client and a 0 second timer will be set up to send a command to the starter to pull a task.\n</li><li>the starter will respond to the command and request a task over syscall_sock.\n</li><li>the shadow will send the task and wait for the starter\n</li><li>the starter will modify the task (set some field) and send it back to the shadow.\n</li><li>the shadow will set another 0 second timer and the process will begin again.\n</li></ol>\n\n<p>The goal is to see how fast we can send a set of classads to the starter and get them back.  How many is still up in the air.\n\n</p><p></p><hr/>\n<em>2010-Jan-15 10:13:52 by jshill4:</em> <br/>\n\nA little more info: We'll send 10,000 class ads back and forth (they will all be the same) and we'll look at basic statistics like mean, max, min, ...\n\n<p></p><hr/>\n<em>2010-Jan-16 08:54:03 by jshill4:</em> <br/>\n\nIt looks like there might be some race conditions that we didn't think about.  I'm seeing an issue where both the starter and the shadow stop indefinitely and it's during times where they're attempting to communicate with each other over the network (for the starter, it's over syscall_sock and for the shadow it's via a daemon core command).  I don't know how daemon core works, but I assume that when you send a command, it looks for some kind of response from the remote computer.  So if the remote computer doesn't get back to select the client will block.  It looks like this is happening, because the starter attempts to send a system call to the shadow while the shadow is waiting on a command so they both block.  This may be an easy fix if we just derive a new starter type, but I haven't looked at the code enough to know if this is the problem.\n\n<p></p><hr/>\n<em>2010-Jan-19 14:40:16 by jshill4:</em> <br/>\n\nBench mark is working now I have to get a good classad file to test it.  Pete suggested writing a program that would give me about the size I want.\n\n<p>To get this working I had to have the starter initiate a pull from the shadow.  The shadow returns 1 followed by a classad or 0 if all of the tasks are exhausted.\n\n</p><p>I also need to get this running on something other than my personal condor.  Greg has some ideas about this.\n\n</p><p></p><hr/>\n<em>2010-Jan-19 14:44:06 by jshill4:</em> <br/>\n\nInitial bench marks on my personal condor:\n\n<p>Tasks sent:   10000 <br/>\n\nTask size:    64996664.000000<br/>\n\nTotal time:   54.230000s<br/>\n\nTask average: 0.005423s<br/>\n\nMax task:     0.170000s<br/>\n\nMin task:     0.000000s<br/>\n\n\n</p><p>task size isn't working yet.\n\n</p><p></p><hr/>\n<em>2010-Jan-27 14:33:16 by jshill4:</em> <br/>\n\nFinally got a bench mark to run using glidin\n\n<p>Here are the results, task size doesn't mean anything\n\n</p><p>Tasks sent:   10000 <br/>\n\nTask size:    10983.000000 <br/>\n\nTotal time:   57.170000s <br/>\n\nTask average: 0.005717s <br/>\n\nMax task:     0.110000s <br/>\n\nMin task:     0.000000s <br/>\n\n\n</p><p></p><hr/>\n<em>2010-Feb-23 14:13:23 by jshill4:</em> <br/>\n\nHere are the final bench mark results run against old classads.  Task size is now the actual size of the task sent in bytes.  Each job result is listed.\n\n<p>10 jobs <br/>\n\n10000 tasks <br/>\n\n\n</p><p>begin 14:30:30 <br/>\n\nend   14:33:10 <br/>\n\n        ~ 2 min 40 sec <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      100.423971s <br/>\n\nTotal average:   0.010042s <br/>\n\nTask  time:      94.567603s <br/>\n\nAvg task time:   0.009457s <br/>\n\nMax task:        1.456353s <br/>\n\nMin task:        0.004636s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      102.556235s <br/>\n\nTotal average:   0.010256s <br/>\n\nTask  time:      101.049242s <br/>\n\nAvg task time:   0.010105s <br/>\n\nMax task:        5.941726s <br/>\n\nMin task:        0.004306s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      102.707506s <br/>\n\nTotal average:   0.010271s <br/>\n\nTask  time:      101.138593s <br/>\n\nAvg task time:   0.010114s <br/>\n\nMax task:        5.908457s <br/>\n <br/>\n\nMin task:        0.004664s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      95.044580s <br/>\n\nTotal average:   0.009504s <br/>\n\nTask  time:      93.436337s <br/>\n\nAvg task time:   0.009344s <br/>\n\nMax task:        0.716677s <br/>\n\nMin task:        0.004567s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      106.933952s <br/>\n\nTotal average:   0.010693s <br/>\n\nTask  time:      105.148778s <br/>\n\nAvg task time:   0.010515s <br/>\n\nMax task:        9.728585s <br/>\n\nMin task:        0.004608s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      107.414610s <br/>\n\nTotal average:   0.010741s <br/>\n\nTask  time:      92.857198s <br/>\n\nAvg task time:   0.009286s <br/>\n\nMax task:        1.418596s <br/>\n\nMin task:        0.004604s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      126.174470s <br/>\n\nTotal average:   0.012617s <br/>\n\nTask  time:      124.676454s <br/>\n\nAvg task time:   0.012468s <br/>\n\nMax task:        27.308236s <br/>\n\nMin task:        0.004648s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      144.371822s <br/>\n\nTotal average:   0.014437s <br/>\n\nTask  time:      67.957560s <br/>\n\nAvg task time:   0.006796s <br/>\n\nMax task:        2.336318s <br/>\n\nMin task:        0.004589s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      156.164795s <br/>\n\nTotal average:   0.015616s <br/>\n\nTask  time:      111.506561s <br/>\n\nAvg task time:   0.011151s <br/>\n\nMax task:        27.380269s <br/>\n\nMin task:        0.004647s <br/>\n\n\n</p><p>Tasks sent:      10000 <br/>\n\nTask size:       4005.000000 <br/>\n\nTotal time:      159.758973s <br/>\n\nTotal average:   0.015976s <br/>\n\nTask  time:      138.078626s <br/>\n\nAvg task time:   0.013808s <br/>\n\nMax task:        50.579481s <br/>\n\nMin task:        0.004601s <br/>\n\n\n</p><p>At first glance it looks like some of the task times are taking upwards of 1 minute to complete.  I looked into this and these outliers only occur once or twice per job and always at the beginning.  My hypothesis is that some administrative task is occurring between the starter and the shadow that delays execution of tasks.\n\n</p><p></p><hr/>\n<em>2010-Feb-24 12:11:41 by jshill4:</em> <br/>\n\nThis is the new benchmark run with what I believe is new classads.  There's a little extra to the classad size.  It does look like the average time to send and receive the tasks has increased a little, but that could be due to the time of day I ran the benchmark.\n\n<p>PID              30913 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      143.349643s <br/>\n\nTotal average:   0.014335s <br/>\n\nTask  time:      141.111665s <br/>\n\nAvg task time:   0.014111s <br/>\n\nMax task:        0.464741s <br/>\n\nMin task:        0.007146s <br/>\n\n\n</p><p>PID              30920 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      168.990517s <br/>\n\nTotal average:   0.016899s <br/>\n\nTask  time:      165.807930s <br/>\n\nAvg task time:   0.016581s <br/>\n\nMax task:        8.128061s <br/>\n\nMin task:        0.006961s <br/>\n\n\n</p><p>PID              30915 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      169.649438s <br/>\n\nTotal average:   0.016965s <br/>\n\nTask  time:      167.319818s <br/>\n\nAvg task time:   0.016732s <br/>\n\nMax task:        10.093735s <br/>\n\nMin task:        0.008594s <br/>\n\n\n</p><p>PID              30916 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      151.440423s <br/>\n\nTotal average:   0.015144s <br/>\n\nTask  time:      149.236080s <br/>\n\nAvg task time:   0.014924s <br/>\n\nMax task:        1.558830s <br/>\n\nMin task:        0.008510s <br/>\n\n\n</p><p>PID              30919 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      205.088984s <br/>\n\nTotal average:   0.020509s <br/>\n\nTask  time:      185.898194s <br/>\n\nAvg task time:   0.018590s <br/>\n\nMax task:        40.426493s <br/>\n\nMin task:        0.006938s <br/>\n\n\n</p><p>PID              30912 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      210.895776s <br/>\n\nTotal average:   0.021090s <br/>\n\nTask  time:      205.425314s <br/>\n\nAvg task time:   0.020543s <br/>\n\nMax task:        48.394906s <br/>\n\nMin task:        0.006947s <br/>\n\n\n</p><p>PID              30914 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      174.912806s <br/>\n\nTotal average:   0.017491s <br/>\n\nTask  time:      135.984218s <br/>\n\nAvg task time:   0.013598s <br/>\n\nMax task:        0.614397s <br/>\n\nMin task:        0.006994s <br/>\n\n\n</p><p>PID              30918 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      163.599200s <br/>\n\nTotal average:   0.016360s <br/>\n\nTask  time:      123.436331s <br/>\n\nAvg task time:   0.012344s <br/>\n\nMax task:        0.501353s <br/>\n\nMin task:        0.006981s <br/>\n\n\n</p><p>PID              30921 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      146.503620s <br/>\n\nTotal average:   0.014650s <br/>\n\nTask  time:      122.628511s <br/>\n\nAvg task time:   0.012263s <br/>\n\nMax task:        0.928257s <br/>\n\nMin task:        0.006931s <br/>\n\n\n</p><p>PID              30917 <br/>\n\nTasks sent:      10000 <br/>\n\nTask size:       4033.000000 <br/>\n\nTotal time:      290.524683s <br/>\n\nTotal average:   0.029052s <br/>\n\nTask  time:      185.147212s <br/>\n\nAvg task time:   0.018515s <br/>\n\nMax task:        44.665416s <br/>\n\nMin task:        0.004474s <br/>\n</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "todo", "last_change": "2011-Apr-15 10:44", "status": "resolved", "created": "2010-Jan-08 12:29", "fixed_version": "2010-Jan-08 12:29", "broken_version": "v070500", "priority": "3", "subsystem": "Daemons", "assigned_to": "jshill4", "derived_from": "#1095", "creator": "gthain", "rust": "", "customer_group": "other", "visibility": "public", "notify": "gthain@cs.wisc.edu matt@cs.wisc.edu", "due_date": "20100122"}