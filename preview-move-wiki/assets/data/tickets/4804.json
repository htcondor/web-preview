{"id": 4804, "title": "Ticket #4804: Managed condor_submit transforms", "description": "<blockquote>\n<strong>NOTE: This ticket abandoned as we ultimately implemented the functionality in  <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5885\" onclick=\"get_ticket_and_populate_wrapper('5885'); return false;\" title=\"enable the schedd to perform job classad transforms upon submission\">#5885</a></span> instead</strong>\n\n<p>We live with two kinds of wrappers in our lives:\n</p><ul>\n<li>condor_submit wrappers: The sysadmin wants to set some sort of non-trivial transformation for the user's job (i.e. setting <code>accounting_group</code> to something that can't be done with <code>SUBMIT_ATTRS</code>).\n</li><li>Executable wrapper: Think dmtcp_shim or parrot_run; these are put in front of the executable; typically, arguments are added, new environment variables are inserted, and additional files are transferred.\n</li></ul>\n\n<p>These are ugly, but a common pattern.  We should provide a built-in mechanism for transforms.\n\n</p><p>We are considering two possibilities: one based upon the job router functionality, and a second that would introduce some simple schedd knobs.\n\n</p><p><span class=\"subsection\"></span></p><h3>Option 1 - JobRouter based solution</h3>\n\n<p>It turns out, HTCondor already has a transform mechanism for job <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> - job routes!  I propose we use job routes (as currently configured -- although I want to make it less miserable to add new routes separately); the user can add a list of these to their submit files to apply the route to their job.  For example:\n\n</p><p></p><div class=\"verbatim\">\n<pre>features = route1, route2, route3\n</pre></div>\n\n\n<p>where routeX is the name of the route.  These are applied in order.  Further:\n</p><ol>\n<li>If the route's requirements expression evalautes to error, then the condor_submit fails.\n</li><li>If the route requirement evaluates to false, then the route is not applied and the next one is considered.\n</li><li>If the route requirement evaluates to true, the route is applied.\n</li></ol>\n\n<p>The idea is that something like:\n</p><div class=\"verbatim\">\n<pre>features = DMTCP\n</pre></div>\n\nwould do all the client transforms to submit the job with the dmtcp_shim.\n\n<p>A configuration variable, <code>DEFAULT_FEATURES</code>, would specify the features to apply to all jobs by default.  This would give sysadmins a mechanism for setting things like <code>accounting_group</code>.\n\n</p><p>[Per usual, this only applies to condor_submit-based jobs; support for other clients.  <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobRouter\" title=\"Job Router\">JobRouter</a></span> or python bindings would have to come later.]\n\n</p><p><span class=\"subsection\"></span></p><h3>Option 2 - Simple Schedd Knob solution</h3>\n\n<p>The thinking here is we would have some simple schedd config knobs to handle common transformation situations, like \"insert this attribute into every incoming ad\".\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">ON_SUBMIT_SET_XXX =\nON_SUBMIT_SET_EVAL_XXX =\nON_SUBMIT_SET_DEFAULT_XXX =\nON_SUBMIT_SET_EVAL_DEFAULT_XXX =\n\nON_SUBMIT_NOTREADY_STATE =\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2015-Feb-25 16:02:27 by bbockelm:</em> <br/>\n\nWe found another use case for this:\n\n<p>The intensity frontier would like to prioritize resource provisioning.  They have three classes of resources:\n</p><ul>\n<li>Owned CPUs at FNAL\n</li><li>Owned CPUs at select collaboration universities.\n</li><li>The rest of OSG\n</li></ul>\n\n<p>For FNAL CPUs, they'd like to provision glideins instantly; for university CPUs, they want to provision after the job has been in queue for 2 hours; for the rest of OSG, 4 hours.\n\n</p><p>However, in order to implement this scheduling or provisioning policy, we need to take queue date into account; this currently has a second-level granularity and will basically break auto-clustering.\n\n</p><p>Hence, we would like to be able to implement a submit feature which quantizes the QDate with an eval_set and copies it into a separate attribute.  Hence, all jobs submitted during the same hour will possibly be in the same auto-cluster.\n\n</p><p>We would <strong>not</strong> like to use attribute rounding for this feature as we don't want to change the QDate itself; it's used in too many places in HTCondor.\n\n</p><p></p><hr/>\n<em>2015-Mar-04 16:06:39 by bbockelm:</em> <br/>\n\nAnother use case:\n\n<p>CMS has group information in an external service (could be a flat file, could be a web service call).  We would like to use this group information for provisioning and matchmaking information.\n\n</p><p>Concretely, we want to be able to use the fact that user <code>bbockelm</code> is in group <code>nebraska</code> and send pilots to site <code>Nebraska</code> which will run only jobs in this group (assuming site <code>Nebraska</code> is interested in prioritizing this group).\n\n</p><p>We <strong>could</strong> put a list of all users in the group in the glidein's start expression:\n\n</p><p></p><div class=\"verbatim\">\n<pre>START = $(START) &amp;&amp; ((Owner=?=\"bbockelm\") || (Owner=?= \"joe\") || ...)\n</pre></div>\n\n\n<p>However, this would get tedious at a site like FNAL which may have &gt;1,000 users in a given group.\n\n</p><p>Instead, we would like the group information calculated at submit time; suppose we put this in an job attribute called <code>GroupName</code>.  Then, the start expression would be:\n\n</p><p></p><div class=\"verbatim\">\n<pre>START = $(START) &amp;&amp; (GroupName =?= \"nebraska\")\n</pre></div>\n\n\n<p>This is scalable from the matchmaking and administrative POV.\n\n</p><p></p><hr/>\n<em>2015-Apr-08 15:28:53 by bbockelm:</em> <br/>\n\nDiscussion from today's OSG/HTCondor call:\n<ol>\n<li>This gets assigned to Jaime, but he's got a handful of other items in the priority queue.\n</li><li>This needs to be moved from submit utilities into the schedd.\n</li><li>Transform logic probably needs to be extracted from <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobRouter\" title=\"Job Router\">JobRouter</a></span> and made stand-alone.\n</li></ol>\n\n<p></p><hr/>\n<em>2016-Apr-13 13:58:51 by tpdownes:</em> <br/>\n\nThis is very similar to LIGO request <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=5613\" onclick=\"get_ticket_and_populate_wrapper('5613'); return false;\" title=\"how best to transform job classad prior to submission\">#5613</a></span>.\n\n<p>I don't see LIGO presently having a large need for users to specify the transformation. I agree with the conclusion that integrating the logic into the scheedd makes more sense than adding extra \"distance\" between a .sub file and its corresponding <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span>.\n\n</p><p>I'd really like to see this make it in for 8.6 at least at the fairly simple level described in <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=5613\" onclick=\"get_ticket_and_populate_wrapper('5613'); return false;\" title=\"how best to transform job classad prior to submission\">#5613</a></span>. I am happy to do LIGO's transformation logic entirely in the Python bindings.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Jan-01 22:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=42073\">[42073]</a></span>: Add support for 'features' in condor_submit. <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4804\" onclick=\"get_ticket_and_populate_wrapper('4804'); return false;\" title=\"Managed condor_submit transforms\">#4804</a></span> This invokes an arbitrary chain of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobRoutes\" title=\"Job Routes\">JobRoutes</a></span> for a given condor_submit, allowing either users or the sysadmins to control the list of transforms.  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Jan-01 22:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=42072\">[42072]</a></span>: Provide a command line utility for transforming a job based on a given route. Unlike condor_job_router_info, this doesn't apply the JobRouter's logic for route selection - the user specifies the route manually. <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4804\" onclick=\"get_ticket_and_populate_wrapper('4804'); return false;\" title=\"Managed condor_submit transforms\">#4804</a></span>  (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2016-Oct-04 15:05", "status": "abandoned", "created": "2015-Jan-01 22:19", "fixed_version": "2015-Jan-01 22:19", "broken_version": "", "priority": "3", "subsystem": "Tools", "assigned_to": "jfrey", "derived_from": "#4882", "creator": "bbockelm", "rust": "", "customer_group": "osg", "visibility": "public", "notify": "bbockelm@cse.unl.edu", "due_date": ""}