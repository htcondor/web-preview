{"id": 3625, "title": "Ticket #3625: Statically compiled gsoap functions cause segfault in GSI plugins", "description": "<blockquote>\nThe UW compile of HTCondor statically links what RHEL refers to as libgsoap++.  This causes SEGFAULTs on the HTCondor-CE.  When the GSI plugin is invoked, LCMAPS is loaded and an libxacml callout (which uses libgsoap++) is performed.  libxacml is compiled against gsoap 2.7.16 but gets the gsoap 2.7.10 symbol from the one in the condor daemon.\n\n<p>Mixing symbols from different versions of gsoap is probably what causes the SEGFAULT.\n\n</p><p>You can see the soap symbols exported by doing this:\n\n</p><p></p><div class=\"verbatim\">\n<pre>[bbockelm@brian-test ~]$ nm -D /usr/sbin/condor_collector | grep soap | grep -v _Z | grep ' T ' | wc -l\n283\n</pre></div>\n\n\n<p>I propose we hide or link these symbols.  Because of gsoap's somewhat-notorious ABI issues, I'd propose hiding the symbols.</p></blockquote>", "remarks": "<blockquote>\n<em>2013-May-15 11:01:11 by tstclair:</em> <br/>\n\nWhy isn't gsoap treated like the other externals yet?  Platform where possible?\n\n<p></p><hr/>\n<em>2013-May-15 12:19:02 by bbockelm:</em> <br/>\n\nPersonally, I'd be worried about ABI compatibilities.  gsoap upstream does not really maintain ABI compatibility - even if they retain linking capability.  Here, the system and Condor had versions of gsoap that could link but still blew up when mixed.\n\n<p>On top of this, the code generator reuses function names - we need to patch our arguments to the code generator to use different function names, even if we dynamically link.\n\n</p><p></p><hr/>\n<em>2013-May-16 20:29:35 by bbockelm:</em> <br/>\n\nIt was a tough fix, but with a few gsoap flags and linking tricks, I can avoid the overlapping definitions.  Passes the SOAP tests, so I'm closing the ticket.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-16 17:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35722\">[35722]</a></span>: Retain a few global symbols for SOAP-enabled daemons. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3625\" onclick=\"get_ticket_and_populate_wrapper('3625'); return false;\" title=\"Statically compiled gsoap functions cause segfault in GSI plugins\">#3625</a></span> When we removed all global symbols from the SOAP-enabled daemons, this broke SOAP integration. When the dynamic linker loads libcondor_utils, it will see weak symbols from there (which are no-ops) and prefer them over the functioning ones in\u00a0[...]\n (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-May-16 09:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35712\">[35712]</a></span>: Clean out gsoap symbols from global table. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3625\" onclick=\"get_ticket_and_populate_wrapper('3625'); return false;\" title=\"Statically compiled gsoap functions cause segfault in GSI plugins\">#3625</a></span>. HTCondor daemons previously exported various statically-compiled and gsoap-generated symbols globally to the dynamic linker.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2013-May-16 20:30", "status": "resolved", "created": "2013-May-15 09:40", "fixed_version": "2013-May-15 09:40", "broken_version": "", "priority": "3", "subsystem": "Daemons", "assigned_to": "jfrey", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "osg", "visibility": "public", "notify": "", "due_date": ""}