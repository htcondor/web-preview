{"id": 6353, "title": "Ticket #6353: Remove signal sent to shadow can cause wrong job to be removed", "description": "<blockquote>\nWhen a running job is removed, the schedd sends a signal (SIGUSR1) to the shadow. The shadow cleans up and exits with status 102, which means the job should be removed (if not already held). There's a race condition with the shadow connecting to the schedd after job completion to fetch a new job (recycling the shadow). The schedd can send the signal before the recycling (intended for the job the shadow has finished), and the shadow not process the signal until after the recycling. This will cause the shadow to abort the newly-fetched job, causing the job to be removed from the queue inappropriately.\n\n<p>A simple fix for this problem is for the schedd to mark the shadow as ineligible for recycling when it's about to send this signal for job removal.</p></blockquote>", "remarks": "<blockquote>\n<em>2017-Jul-20 13:48:58 by jfrey:</em> <br/>\n\nSome notes about the current patch:\n\n<p></p><ul>\n<li>I considered moving when <code>shadow_rec::preempted</code> is set to true to where the schedd is about to send the signal (instead of after the signal is successfully sent). As this is the stable series, I was wary of unintentional side effects, especially if the signal delivery fails (possible if it's sent via CEDAR TCP). But if that fails, we probably have other problems. To play it safe, I added a new flag in <code>shadow_rec</code> instead.\n\n<p></p></li><li>There's still a race condition for suspend and continue, where a signal intended for a shadow's old job is processed after it fetches a new job. Disabling recycling any time a suspend/continue is issued seemed a little harsh, and the consequences of a bad race are less severe. Still, we should think about a better solution.\n</li></ul>\n\n<p></p><hr/>\n<em>2017-Jul-31 15:00:27 by gthain:</em> <br/>\n\n<strong>CODE REVIEW</strong>  Looks good, but let's keep thinking about suspend/resume.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-31 15:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51966\">[51966]</a></span>: Docs for erroneous job removal bug fix. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6353\" onclick=\"get_ticket_and_populate_wrapper('6353'); return false;\" title=\"Remove signal sent to shadow can cause wrong job to be removed\">#6353</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-20 13:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51896\">[51896]</a></span>: Fix race condition between job removal and shadow recycling. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6353\" onclick=\"get_ticket_and_populate_wrapper('6353'); return false;\" title=\"Remove signal sent to shadow can cause wrong job to be removed\">#6353</a></span> Once the schedd decides to make a shadow exit (done via signal or CEDAR message to the shadow), don't allow that shadow to recycle and fetch a new job. There's a race condition where the signal can be applied to the wrong job. The shadow\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2017-Jul-31 16:08", "status": "resolved", "created": "2017-Jul-19 15:06", "fixed_version": "2017-Jul-19 15:06", "broken_version": "", "priority": "3", "subsystem": "DaemonsSubmitNode", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}