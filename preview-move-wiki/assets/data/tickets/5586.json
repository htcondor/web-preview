{"id": 5586, "title": "Ticket #5586: startd crashes when claiming multiple claimed/idle slots", "description": "<blockquote>\nIf ALLOW_PSLOT_PREEMPTION is enabled, and jobs are submitted with keep_claim_idle set to some non-zero number, and single-cpu jobs are run to completion, the startd correctly goes into Claimed/Idle state.  If multiple-cpu jobs are then submitted with high enough rank to preempt the claimed/idle slots, the startd will crash.</blockquote>", "remarks": "<blockquote>\n<em>2016-Mar-28 11:24:40 by gthain:</em> <br/>\n\nvalgrind has this to say:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">==7834== Invalid read of size 8\n==7834==    at 0x4378C3: request_claim(Resource*, Claim*, char*, Stream*) (command.cpp:1264)\n==7834==    by 0x437D37: command_request_claim(Service*, int, Stream*) (command.cpp:423)\n==7834==    by 0x4EA30BD: DaemonCore::CallCommandHandler(int, Stream*, bool, bool, float, float) (daemon_core.cpp:4322)\n==7834==    by 0x4EC491B: DaemonCommandProtocol::ExecCommand() (daemon_command.cpp:1664)\n==7834==    by 0x4EC4CC7: DaemonCommandProtocol::doProtocol() (daemon_command.cpp:177)\n==7834==    by 0x4E9B4F3: DaemonCore::HandleReq(Stream*, Stream*) (daemon_core.cpp:4544)\n==7834==    by 0x4EA4113: DaemonCore::CallSocketHandler_worker(int, bool, Stream*) (daemon_core.cpp:4098)\n==7834==    by 0x4EA414C: DaemonCore::CallSocketHandler_worker_demarshall(void*) (daemon_core.cpp:4044)\n==7834==    by 0x4D6706F: CondorThreads::pool_add(void (*)(void*), void*, int*, char const*) (condor_threads.cpp:1109)\n==7834==    by 0x4E9BC26: DaemonCore::CallSocketHandler(int&amp;, bool) (daemon_core.cpp:4032)\n==7834==    by 0x4E9F80F: DaemonCore::Driver() (daemon_core.cpp:3905)\n==7834==    by 0x4EBF078: dc_main(int, char**) (daemon_core_main.cpp:2777)\n==7834==    by 0x3A27C1ED5C: (below main) (in /lib64/libc-2.12.so)\n==7834==  Address 0x552a838 is 120 bytes inside a block of size 592 free'd\n==7834==    at 0x4A06016: operator delete(void*) (vg_replace_malloc.c:480)\n==7834==    by 0x461F43: ResMgr::removeResource(Resource*) (ResMgr.cpp:1670)\n==7834==    by 0x45EF9E: ResState::enter_action(State, Activity, bool, bool) (ResState.cpp:861)\n==7834==    by 0x45E404: ResState::change(State, Activity) (ResState.cpp:148)\n==7834==    by 0x45F29C: ResState::eval() (ResState.cpp:455)\n==7834==    by 0x45EDC4: ResState::enter_action(State, Activity, bool, bool) (ResState.cpp:695)\n==7834==    by 0x45E404: ResState::change(State, Activity) (ResState.cpp:148)\n==7834==    by 0x428B48: Resource::leave_preempting_state() (Resource.h:123)\n==7834==    by 0x45EFB7: ResState::enter_action(State, Activity, bool, bool) (ResState.cpp:849)\n==7834==    by 0x45E404: ResState::change(State, Activity) (ResState.cpp:148)\n==7834==    by 0x427306: Resource::kill_claim() (Resource.h:125)\n==7834==    by 0x4378BF: request_claim(Resource*, Claim*, char*, Stream*) (command.cpp:1263)\n==7834==    by 0x437D37: command_request_claim(Service*, int, Stream*) (command.cpp:423)\n==7834==    by 0x4EA30BD: DaemonCore::CallCommandHandler(int, Stream*, bool, bool, float, float) (daemon_core.cpp:4322)\n==7834==    by 0x4EC491B: DaemonCommandProtocol::ExecCommand() (daemon_command.cpp:1664)\n==7834==    by 0x4EC4CC7: DaemonCommandProtocol::doProtocol() (daemon_command.cpp:177)\n==7834==    by 0x4E9B4F3: DaemonCore::HandleReq(Stream*, Stream*) (daemon_core.cpp:4544)\n==7834==    by 0x4EA4113: DaemonCore::CallSocketHandler_worker(int, bool, Stream*) (daemon_core.cpp:4098)\n==7834==    by 0x4EA414C: DaemonCore::CallSocketHandler_worker_demarshall(void*) (daemon_core.cpp:4044)\n==7834==    by 0x4D6706F: CondorThreads::pool_add(void (*)(void*), void*, int*, char const*) (condor_threads.cpp:1109)\n==7834==    by 0x4E9BC26: DaemonCore::CallSocketHandler(int&amp;, bool) (daemon_core.cpp:4032)\n==7834==    by 0x4E9F80F: DaemonCore::Driver() (daemon_core.cpp:3905)\n==7834==    by 0x4EBF078: dc_main(int, char**) (daemon_core_main.cpp:2777)\n==7834==    by 0x3A27C1ED5C: (below main) (in /lib64/libc-2.12.so)\n==7834==\n\n==7834== Invalid read of size 8\n==7834==    at 0x4378C7: request_claim(Resource*, Claim*, char*, Stream*) (command.cpp:1264)\n==7834==    by 0x437D37: command_request_claim(Service*, int, Stream*) (command.cpp:423)\n==7834==    by 0x4EA30BD: DaemonCore::CallCommandHandler(int, Stream*, bool, bool, float, float) (daemon_core.cpp:4322)\n==7834==    by 0x4EC491B: DaemonCommandProtocol::ExecCommand() (daemon_command.cpp:1664)\n==7834==    by 0x4EC4CC7: DaemonCommandProtocol::doProtocol() (daemon_command.cpp:177)\n==7834==    by 0x4E9B4F3: DaemonCore::HandleReq(Stream*, Stream*) (daemon_core.cpp:4544)\n==7834==    by 0x4EA4113: DaemonCore::CallSocketHandler_worker(int, bool, Stream*) (daemon_core.cpp:4098)\n==7834==    by 0x4EA414C: DaemonCore::CallSocketHandler_worker_demarshall(void*) (daemon_core.cpp:4044)\n==7834==    by 0x4D6706F: CondorThreads::pool_add(void (*)(void*), void*, int*, char const*) (condor_threads.cpp:1109)\n==7834==    by 0x4E9BC26: DaemonCore::CallSocketHandler(int&amp;, bool) (daemon_core.cpp:4032)\n==7834==    by 0x4E9F80F: DaemonCore::Driver() (daemon_core.cpp:3905)\n==7834==    by 0x4EBF078: dc_main(int, char**) (daemon_core_main.cpp:2777)\n==7834==    by 0x3A27C1ED5C: (below main) (in /lib64/libc-2.12.so)\n==7834==  Address 0x552a918 is 344 bytes inside a block of size 592 free'd\n==7834==    at 0x4A06016: operator delete(void*) (vg_replace_malloc.c:480)\n==7834==    by 0x461F43: ResMgr::removeResource(Resource*) (ResMgr.cpp:1670)\n==7834==    by 0x45EF9E: ResState::enter_action(State, Activity, bool, bool) (ResState.cpp:861)\n==7834==    by 0x45E404: ResState::change(State, Activity) (ResState.cpp:148)\n==7834==    by 0x45F29C: ResState::eval() (ResState.cpp:455)\n==7834==    by 0x45EDC4: ResState::enter_action(State, Activity, bool, bool) (ResState.cpp:695)\n==7834==    by 0x45E404: ResState::change(State, Activity) (ResState.cpp:148)\n==7834==    by 0x428B48: Resource::leave_preempting_state() (Resource.h:123)\n==7834==    by 0x45EFB7: ResState::enter_action(State, Activity, bool, bool) (ResState.cpp:849)\n==7834==    by 0x45E404: ResState::change(State, Activity) (ResState.cpp:148)\n==7834==    by 0x427306: Resource::kill_claim() (Resource.h:125)\n==7834==    by 0x4378BF: request_claim(Resource*, Claim*, char*, Stream*) (command.cpp:1263)\n==7834==    by 0x437D37: command_request_claim(Service*, int, Stream*) (command.cpp:423)\n==7834==    by 0x4EA30BD: DaemonCore::CallCommandHandler(int, Stream*, bool, bool, float, float) (daemon_core.cpp:4322)\n==7834==    by 0x4EC491B: DaemonCommandProtocol::ExecCommand() (daemon_command.cpp:1664)\n==7834==    by 0x4EC4CC7: DaemonCommandProtocol::doProtocol() (daemon_command.cpp:177)\n==7834==    by 0x4E9B4F3: DaemonCore::HandleReq(Stream*, Stream*) (daemon_core.cpp:4544)\n==7834==    by 0x4EA4113: DaemonCore::CallSocketHandler_worker(int, bool, Stream*) (daemon_core.cpp:4098)\n==7834==    by 0x4EA414C: DaemonCore::CallSocketHandler_worker_demarshall(void*) (daemon_core.cpp:4044)\n==7834==    by 0x4D6706F: CondorThreads::pool_add(void (*)(void*), void*, int*, char const*) (condor_threads.cpp:1109)\n==7834==    by 0x4E9BC26: DaemonCore::CallSocketHandler(int&amp;, bool) (daemon_core.cpp:4032)\n==7834==    by 0x4E9F80F: DaemonCore::Driver() (daemon_core.cpp:3905)\n==7834==    by 0x4EBF078: dc_main(int, char**) (daemon_core_main.cpp:2777)\n==7834==    by 0x3A27C1ED5C: (below main) (in /lib64/libc-2.12.so)\n==7834==\n==7834== Invalid read of size 8\n==7834==    at 0x4378CE: request_claim(Resource*, Claim*, char*, Stream*) (command.cpp:1264)\n==7834==    by 0x437D37: command_request_claim(Service*, int, Stream*) (command.cpp:423)\n==7834==    by 0x4EA30BD: DaemonCore::CallCommandHandler(int, Stream*, bool, bool, float, float) (daemon_core.cpp:4322)\n==7834==    by 0x4EC491B: DaemonCommandProtocol::ExecCommand() (daemon_command.cpp:1664)\n==7834==    by 0x4EC4CC7: DaemonCommandProtocol::doProtocol() (daemon_command.cpp:177)\n==7834==    by 0x4E9B4F3: DaemonCore::HandleReq(Stream*, Stream*) (daemon_core.cpp:4544)\n==7834==    by 0x4EA4113: DaemonCore::CallSocketHandler_worker(int, bool, Stream*) (daemon_core.cpp:4098)\n==7834==    by 0x4EA414C: DaemonCore::CallSocketHandler_worker_demarshall(void*) (daemon_core.cpp:4044)\n==7834==    by 0x4D6706F: CondorThreads::pool_add(void (*)(void*), void*, int*, char const*) (condor_threads.cpp:1109)\n==7834==    by 0x4E9BC26: DaemonCore::CallSocketHandler(int&amp;, bool) (daemon_core.cpp:4032)\n==7834==    by 0x4E9F80F: DaemonCore::Driver() (daemon_core.cpp:3905)\n==7834==    by 0x4EBF078: dc_main(int, char**) (daemon_core_main.cpp:2777)\n==7834==    by 0x3A27C1ED5C: (below main) (in /lib64/libc-2.12.so)\n==7834==  Address 0x78 is not stack'd, malloc'd or (recently) free'd\n\n</pre></div>\n\n\n<p></p><hr/>\n<em>2016-Mar-29 09:52:33 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>This change looks good.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Mar-29 15:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48129\">[48129]</a></span>: Document <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5586\" onclick=\"get_ticket_and_populate_wrapper('5586'); return false;\" title=\"startd crashes when claiming multiple claimed/idle slots\">#5586</a></span>  (By Greg Thain )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Mar-28 16:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48126\">[48126]</a></span>: Fix startd crash when multi-claiming claimed/idle dslots <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5586\" onclick=\"get_ticket_and_populate_wrapper('5586'); return false;\" title=\"startd crashes when claiming multiple claimed/idle slots\">#5586</a></span>  (By Greg Thain )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2016-Mar-29 15:00", "status": "resolved", "created": "2016-Mar-28 11:22", "fixed_version": "2016-Mar-28 11:22", "broken_version": "v080400", "priority": "1", "subsystem": "DaemonsExecNode", "assigned_to": "gthain", "derived_from": "", "creator": "gthain", "rust": "a29794", "customer_group": "other", "visibility": "public", "notify": "", "due_date": "20160331"}