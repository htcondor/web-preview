{"id": 7715, "title": "Ticket #7715: sub.queue_with_itemdata should verify consistency of itemdata keys", "description": "<blockquote>\nWhen using queue_with_itemdata() where the itemdata is a sequence of dictionaries, the behavior is unexpected if the dictionaries do not all have the same keys.  This example, where <code>Requirements</code> is not in the first dictionary, but was in the second one, illustrates the problem.\n\n<p>When using queue_with_itemdata() and editing \"Requirements\", the behavior is different when the match occurs for the first job in the list or later with the python bindings. On top of it, none of the results are the default behavior.\n\n</p><p>Example: The following submission:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">import classad\nimport htcondor\n\nsub = htcondor.Submit(\"\"\"\n\tuniverse = vanilla\n\texecutable = test.sh\n\targuments = 3\n        Output = out.$(Cluster)-$(Process)\n        Log = log.$(Cluster)\n\t\"\"\")\n\nschedd = htcondor.Schedd()\njobAds = []\n\nreqStr = ('(REQUIRED_OS=?=\"any\")')\n\njobList = [\"Job1\", \"Job2\", \"Job3\"]\nfor job in jobList:\n    ad = {}\n    ad['RequestDisk'] = str('100025')\n    ad['My.JobName'] = classad.quote(job)\n    ad['My.JobNumber'] = '4'\n    if \"Job1\" in job:\n        print(\"Found match for Job condition\")\n        ad['Requirements'] = str(reqStr)\n\n    jobAds.append(ad)\n\nwith schedd.transaction() as txn:\n    submitRes = sub.queue_with_itemdata(txn, 1, iter(jobAds))\n    print(\"ClusterId: {}\".format(submitRes.cluster()))\n</pre></div>\n\n\n<p>Will produce the following result:\n</p><div class=\"code\">\n<pre class=\"code\">$ condor_q 306399 -af:hr Requirements JobName\nRequirements                                                                                                                                                                                                                              JobName\n((REQUIRED_OS =?= \"any\")) &amp;&amp; (TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job1\"\n((REQUIRED_OS =?= \"any\")) &amp;&amp; (TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job2\"\n((REQUIRED_OS =?= \"any\")) &amp;&amp; (TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job3\"\n</pre></div>\n\n\n<p>But if we change the following line:\n</p><div class=\"code\">\n<pre class=\"code\">if \"Job1\" in job:\"\n</pre></div>\n\nwith:\n<div class=\"code\">\n<pre class=\"code\">if \"Job2\" in job:\"\n</pre></div>\n\n\n<p>Then, it ignored the requirements change:\n</p><div class=\"code\">\n<pre class=\"code\">$ condor_q 306401 -af:hr Requirements JobName\nRequirements                                                                                                                                                                                                 JobName\n(TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job1\"\n(TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job2\"\n(TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job3\"\n</pre></div>\n\n\n<p>Expected behavior:\nWhat I would expect, is that, if I plan to modify ad['Requirements'] for \"Job1\" only, then the results should look like:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">$ condor_q 306401 -af:hr Requirements JobName\nRequirements                                                                                                                                                                                                 JobName\n((REQUIRED_OS =?= \"any\")) &amp;&amp; (TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job1\"\n(TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job2\"\n(TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer)) \"Job3\"\n</pre></div>\n\n\n<p>Is there a way to properly modify 'Requirements'?</p></blockquote>", "remarks": "<blockquote>\n<em>2020-Jun-29 10:25:57 by karpel:</em> <br/>\n\nI replicated this on v8.9.7 with\n\n<p></p><div class=\"code\">\n<pre class=\"code\">import classad\nimport htcondor\n\nsub = htcondor.Submit(\n    \"\"\"\n\tuniverse = vanilla\n\texecutable = /bin/sleep\n\targuments = 3\n    output = out.$(Cluster)-$(Process)\n    log = log.$(Cluster)\n    requirements = foobar &amp;&amp; $(req)\n\t\"\"\"\n)\n\nschedd = htcondor.Schedd()\njobAds = []\n\nreqStr = '(REQUIRED_OS=?=\"any\")'\n\njobList = [\"Job1\", \"Job2\", \"Job3\"]\nfor job in jobList:\n    ad = {\"request_disk\": str(\"100025\"), \"My.JobName\": classad.quote(job), \"My.JobNumber\": \"4\"}\n    if \"Job1\" in job:\n        print(\"Found match for Job condition\")\n        ad[\"req\"] = str(reqStr)\n\n    jobAds.append(ad)\n\nfor ad in jobAds:\n    print(ad)\n\nwith schedd.transaction() as txn:\n    submitRes = sub.queue_with_itemdata(txn, 1, iter(jobAds))\n    print(\"ClusterId: {}\".format(submitRes.cluster()))\n\nfor ad in schedd.query(f\"ClusterId == {submitRes.cluster()}\", [\"JobName\", \"Requirements\"]):\n    print(ad[\"JobName\"], ad[\"Requirements\"])\n\n</pre></div>\n\n\n<p>which produces\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">Found match for Job condition\n{'request_disk': '100025', 'My.JobName': '\"Job1\"', 'My.JobNumber': '4', 'req': '(REQUIRED_OS=?=\"any\")'}\n{'request_disk': '100025', 'My.JobName': '\"Job2\"', 'My.JobNumber': '4'}\n{'request_disk': '100025', 'My.JobName': '\"Job3\"', 'My.JobNumber': '4'}\nClusterId: 16321\nJob1 (foobar &amp;&amp; (REQUIRED_OS is \"any\")) &amp;&amp; (TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer))\nJob2 (foobar &amp;&amp; (REQUIRED_OS is \"any\")) &amp;&amp; (TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer))\nJob3 (foobar &amp;&amp; (REQUIRED_OS is \"any\")) &amp;&amp; (TARGET.Arch == \"X86_64\") &amp;&amp; (TARGET.OpSys == \"LINUX\") &amp;&amp; (TARGET.Disk &gt;= RequestDisk) &amp;&amp; (TARGET.Memory &gt;= RequestMemory) &amp;&amp; ((TARGET.FileSystemDomain == MY.FileSystemDomain) || (TARGET.HasFileTransfer))\n</pre></div>\n\n\n<p>so it looks like the requirements are being inherited. I assume this is because, if its in the first job, it gets put in the cluster ad and thus applied to all of the jobs, but otherwise gets ignored?\n\n</p><p></p><hr/>\n<em>2020-Jun-29 13:12:55 by karpel:</em> <br/>\n\nCapturing some discussion we had about this on Slack. TJ, please follow up if I got any of this wrong.\n\n<p>The result you get here is a consequence of how dictionary-style itemdata works. When submit sees an \"extra\" key (i.e., one that wasn't in the first itemdatum), it ignores it. When it sees a \"missing\" key (i.e., this itemdatum doesn't have a key that the first one did), it uses the most recent value for that key. Itemdata fundamentally forms a table, <strong>not</strong> a flexible schema. Each row of the table inherits the previous row's values.\n\n</p><p>This is submit's normal behavior, but you can't access it using the CLI <code>condor_submit</code> tool because of how you specify itemdata. This behavior is only visible when using dictionary-style itemdata through the Python bindings.\n\n</p><p>My preference would be that we raise an exception (probably <code>ValueError</code>) in both of the above cases (missing and extra keys). TJ prefers that we document the existing behavior, but don't raise any exceptions.\n\n</p><p>Kenyi: in this case, the way to move forward is to make sure that you set <code>requirements</code> explicitly in every itemdatum.\n\n</p><p></p><hr/>\n<em>2020-Jun-29 13:34:20 by johnkn:</em> <br/>\n\nThis is not a problem with requirements, just use consistent keys like this\n\n<p></p><div class=\"code\">\n<pre class=\"code\">for job in jobList:\n    ad = {}\n    ad['RequestDisk'] = str('100025')\n    ad['My.JobName'] = classad.quote(job)\n    ad['My.JobNumber'] = '4'\n    ad['Requirements'] = ''\n    if \"Job1\" in job:\n        print(\"Found match for Job condition\")\n        ad['Requirements'] = str(reqStr)\n\n    jobAds.append(ad)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2020-Jun-29 13:51:01 by khurtado:</em> <br/>\n\nThank you! I can confirm the proposed solution is working for me. Good to know this is not really a bug but more of a design thing.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "defect", "last_change": "2020-Oct-13 10:57", "status": "new", "created": "2020-Jun-26 17:23", "fixed_version": "2020-Jun-26 17:23", "broken_version": "v080906", "priority": "4", "subsystem": "PythonBinding", "assigned_to": "johnkn", "derived_from": "", "creator": "khurtado", "rust": "", "customer_group": "other", "visibility": "public", "notify": "khurtado@nd.edu, karpel@wisc.edu, johnkn@cs.wisc.edu", "due_date": ""}