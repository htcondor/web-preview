{"id": 7325, "title": "Ticket #7325: Error when Python bindings fail to create a new procid needs context", "description": "<blockquote>\nWhen the Python bindings are submitting jobs and fail to get a new procid, the error is technically correct but useless to the user:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">RuntimeError: Failed to create new proc ID.\n</pre></div>\n\n\n<p>The relevant source code looks like <a class=\"external\" href=\"https://github.com/htcondor/htcondor/blob/45431756fd2a202c3ac7f7698181a007a1a43aee/src/python-bindings/schedd.cpp#L2849\">https://github.com/htcondor/htcondor/blob/45431756fd2a202c3ac7f7698181a007a1a43aee/src/python-bindings/schedd.cpp#L2849</a>\n\n</p><p>TJ indicates that it should be possible to also extract the actual <code>errno</code> at this point, instead of just checking whether <code>procid &lt; 0</code>.\n</p><div class=\"code\">\n<pre class=\"code\">EACCES if OwnerCheck fails, or clusterid is not current\nEINVAL if one of the max jobs limits is triggered.\nETIMEDOUT if there was a problem with the socket or a protocol error\n</pre></div>\n\n\n<p>This extra information should be communicated in the exception message, and if <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span> ever happens, with a custom exception type.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2019-Oct-15 13:33", "status": "new", "created": "2019-Oct-15 13:33", "fixed_version": "2019-Oct-15 13:33", "broken_version": "", "priority": "4", "subsystem": "PythonBinding", "assigned_to": "tlmiller", "derived_from": "#6935", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu tlmiller@cs.wisc.edu johnkn@cs.wisc.edu", "due_date": ""}