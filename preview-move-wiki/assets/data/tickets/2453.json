{"id": 2453, "title": "Ticket #2453: Figure out why we can only run about 8 jobs on a windows exec node", "description": "<blockquote>\nFigure out where the slowdown is that prevents us from running more than about 8 jobs simultaneously on a windows execute node with 40 slots/cores.\n\n<p>The problem is even worse without a PROCD.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Oct-03 10:24:57 by ichesal:</em> <br/>\n\nPushed an update regarding the multple startd testing on the 40-core box to case <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2441\" onclick=\"get_ticket_and_populate_wrapper('2441'); return false;\" title=\"Condor startd on Windows can't run more than 8 jobs simultaneously\">#2441</a></span>.\n\n<p></p><hr/>\n<em>2011-Oct-13 16:30:10 by johnkn:</em> <br/>\n\nThe fundamental problem here is that it can take so long for a STARTER to start up and phone home, that the SHADOW gives up and the result is that after about 10 jobs are running, slots can be claimed, but the claims cannot be activated.\n\n<p>The timeout for claim activation is only 20 seconds, but it takes longer and longer to create a STARTER process the more jobs that are running.  I see a max of around 14 sec to create a STARTER in my testing with 40 slots on a 4 core machine.\n\n</p><p>Here's a representative log fragment\n\n</p><p></p><div class=\"verbatim\">\n<pre>10/03/11 13:51:13 {SchedLog} (pid:2216) Completed REQUEST_CLAIM to startd slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn\n10/03/11 13:51:13 {SchedLog} (pid:2216) Started shadow for job 105.8 on slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn, (shadow pid = 10248)\n10/03/11 13:51:13 {StartLog} slot10: Changing state: Unclaimed -&gt; Claimed\n10/03/11 13:51:13 {StartLog} slot10: Remote owner is johnkn@crane.cs.wisc.edu\n10/03/11 13:51:13 {StartLog} slot10: Request accepted.\n10/03/11 13:51:13 {StartLog} slot10: State change: claiming protocol successful\n10/03/11 13:51:33 {ShadowLog} (105.8) (10248): condor_read(): timeout reading 5 bytes from startd slot10@crane.cs.wisc.edu.\n10/03/11 13:51:33 {ShadowLog} (105.8) (10248): Job 105.8 is being evicted from slot10@crane.cs.wisc.edu\n10/03/11 13:51:33 {ShadowLog} (105.8) (10248): slot10@crane.cs.wisc.edu: DCStartd::activateClaim: Failed to send command ACTIVATE_CLAIM to the startd\n10/03/11 13:51:43 {SchedLog} (pid:2216) Completed RELEASE_CLAIM to startd slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn\n10/03/11 13:51:43 {SchedLog} (pid:2216) Match record (slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn, 105.8) deleted\n10/03/11 13:51:43 {StartLog} slot10: Called deactivate_claim_forcibly()\n10/03/11 13:51:43 {StartLog} slot10: Changing state and activity: Claimed/Idle -&gt; Preempting/Vacating\n10/03/11 13:51:43 {StartLog} slot10: Changing state and activity: Preempting/Vacating -&gt; Owner/Idle\n10/03/11 13:51:43 {StartLog} slot10: Changing state: Owner -&gt; Unclaimed\n10/03/11 13:51:43 {StartLog} slot10: match_info called\n10/03/11 13:51:43 {StartLog} slot10: State change: IS_OWNER is false\n10/03/11 13:51:43 {StartLog} slot10: State change: No preempting claim, returning to owner\n10/03/11 13:51:43 {StartLog} slot10: State change: received RELEASE_CLAIM command\n10/03/11 13:52:59 {MatchLog} Matched 105.8 johnkn@crane.cs.wisc.edu &lt;128.105.136.32:53276&gt; preempting none &lt;128.105.136.32:53275&gt; slot10@crane.cs.wisc.edu\n10/03/11 13:52:59 {MatchLog} Matched 105.9 johnkn@crane.cs.wisc.edu &lt;128.105.136.32:53276&gt; preempting none &lt;128.105.136.32:53275&gt; slot10@crane.cs.wisc.edu\n10/03/11 13:52:59 {NegotiatorLog} Matched 105.8 johnkn@crane.cs.wisc.edu &lt;128.105.136.32:53276&gt; preempting none &lt;128.105.136.32:53275&gt; slot10@crane.cs.wisc.edu\n10/03/11 13:52:59 {NegotiatorLog} Matched 105.9 johnkn@crane.cs.wisc.edu &lt;128.105.136.32:53276&gt; preempting none &lt;128.105.136.32:53275&gt; slot10@crane.cs.wisc.edu\n10/03/11 13:52:59 {NegotiatorLog} Successfully matched with slot10@crane.cs.wisc.edu\n10/03/11 13:52:59 {NegotiatorLog} Successfully matched with slot10@crane.cs.wisc.edu\n10/03/11 13:53:02 {SchedLog} (pid:2216) Completed REQUEST_CLAIM to startd slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn\n10/03/11 13:53:02 {SchedLog} (pid:2216) Started shadow for job 105.8 on slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn, (shadow pid = 10064)\n10/03/11 13:53:02 {StartLog} slot10: Changing state: Unclaimed -&gt; Claimed\n10/03/11 13:53:02 {StartLog} slot10: Got activate_claim request from shadow (128.105.136.32)\n10/03/11 13:53:02 {StartLog} slot10: match_info called\n10/03/11 13:53:02 {StartLog} slot10: match_info called\n10/03/11 13:53:02 {StartLog} slot10: Remote owner is johnkn@crane.cs.wisc.edu\n10/03/11 13:53:02 {StartLog} slot10: Request accepted.\n10/03/11 13:53:02 {StartLog} slot10: State change: claiming protocol successful\n10/03/11 13:53:03 {ShadowLog} (105.8) (10064): Request to run on slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; was ACCEPTED\n10/03/11 13:53:03 {StartLog} slot10: Remote job ID is 105.8\n10/03/11 13:53:07 {StartLog} slot10: Changing activity: Idle -&gt; Busy\n10/03/11 13:53:07 {StartLog} slot10: Got universe \"VANILLA\" (5) from request classad\n10/03/11 13:53:07 {StartLog} slot10: State change: claim-activation protocol successful\n10/03/11 13:58:24 {SchedLog} (pid:2216) Completed RELEASE_CLAIM to startd slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn\n10/03/11 13:58:24 {SchedLog} (pid:2216) match (slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn) out of jobs; relinquishing\n10/03/11 13:58:24 {SchedLog} (pid:2216) Match record (slot10@crane.cs.wisc.edu &lt;128.105.136.32:53275&gt; for johnkn, 105.8) deleted\n10/03/11 13:58:24 {StartLog} slot10: Called deactivate_claim_forcibly()\n10/03/11 13:58:24 {StartLog} slot10: Changing state and activity: Claimed/Busy -&gt; Preempting/Vacating\n10/03/11 13:58:24 {StartLog} slot10: State change: received RELEASE_CLAIM command\n10/03/11 13:58:30 {StartLog} slot10: Changing state and activity: Preempting/Vacating -&gt; Owner/Idle\n10/03/11 13:58:30 {StartLog} slot10: Changing state: Owner -&gt; Unclaimed\n10/03/11 13:58:30 {StartLog} slot10: State change: IS_OWNER is false\n10/03/11 13:58:30 {StartLog} slot10: State change: No preempting claim, returning to owner\n10/03/11 13:58:30 {StartLog} slot10: State change: starter exited\n</pre></div>\n\n\n<p></p><hr/>\n<em>2011-Oct-13 16:58:50 by johnkn:</em> <br/>\n\nI created some specialized statistics probes and other runtime measurement code and determined that the problem is not the cost of creating a process per-se, but instead with the cost of Register_Family\n\n<p>With 40 slots and 40 jobs queued, I hever see more than about 12-14 jobs running simultaneously. (testing on 4 Core machine with 16Gb of ram running Win7 x64).\n\n</p><p>Here's the runtime values for Create_Process and Register_Family\n\n</p><p></p><div class=\"verbatim\">\n<pre>Who     Symbol                   Count  Average      Min      Max      Std\nschedd DCCreate_Process000          50    0.008    0.002    0.041    0.006\nschedd DCCreateProcessW32           50    0.010    0.000    0.163    0.034\nschedd DCCreate_Process001          50    0.000    0.000    0.000    0.000\nschedd DCCreate_ProcessTot          50    0.018    0.005    0.168    0.034\n\nstartd DCCreate_Process000          24    0.172    0.002    4.049    0.826\nstartd DCCreateProcessW32           24    0.009    0.000    0.059    0.018\nstartd DCCreate_Process001          24    0.000    0.000    0.000    0.000\nstartd DCRregister_subfamily        23    9.272    3.672   22.183    4.977\nstartd DCRegister_Family            23    9.272    3.672   22.183    4.977\nstartd DCCreate_ProcessTot          24    9.316    0.003   22.192    5.113\n</pre></div>\n\n\n<p>Create_ProcessTot is the overall time spent in DaemonCore::Create_Process\nCreate_Process000 is the DaemonCore::Create_Process before the actual <code>CreateProcessAsUser</code> call\nCreate_ProcessW32 is the <code>CreateProcessAsUser</code> call\nCraete_Process001 is the remainder of DaemonCore::Create_Process not including Register_Family\nRegister_Family   is DaemonCore::Register_Family\nRegister_subfamily is ProcFamilyDirect::register_subfamily\n\n</p><p>Because there is a PROCD the implementation of register_subfamily is to send a message via named-pipe to the procd and then wait for the result. The PROCD doesn't have a classad, so I used a different technique to get timing data for the calls.\n\n</p><p></p><div class=\"verbatim\">\n<pre>\n    Function        PerCall(ms)     Calls   Total(ms)\n------------------- ----------- --------- -----------\n register_subfamily    7010.424        80  560833.990\n read_from_client         0.003        80       0.300\n write_to_client          0.112        80       8.972\n        snapshot       6789.572       175 1188175.124\n getProcInfoList       6789.431       175 1188150.518\n iterProcInfoList         0.123       175      21.594\n   remove_exited          0.008       175       1.437\n  track_new_pids          0.003       175       0.543\n build_else_list          0.001       175       0.202\n delete_unwatched         0.000       175       0.171\n    update_sizes          0.001       175       0.243\n   procapi_calls          0.000       177       0.000\n procapi_queries          2.274       237     538.982\n  procapi_allocs        286.720         1     286.720\n procapi_realocs          0.750        60      45.008\n bldProcInfoList       6789.430       175 1188150.270\n getProcPerfData          2.600       175     455.170\n getParentPID            33.526     35411 1187220.323\n</pre></div>\n\n\n<p>so <code>buildProcInfoList</code> is taking almost 7 seconds, and is calling getParentPID an average of 200 times with an average cost of 33ms per call.\n\n</p><p></p><hr/>\n<em>2011-Oct-14 13:58:52 by tstclair:</em> <br/>\n\nIf the change is conservative why not target 7.6 as this arose from the 7.6 series which is in the field.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Sep-15 15:17</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/db6381bd59bb42a0ed4a03c7feee4606e5f1fffe\">[27233]</a></span>: Add params to control generic statistics publishing and recent window STATISTICS_TO_PUBLISH parameter for generic statistics <span class=\"ticket\"><a class=\"stalled\" href=\"/tickets?ticket=2197\" onclick=\"get_ticket_and_populate_wrapper('2197'); return false;\" title=\"General statistics architecture for Condor\">#2197</a></span> and STATISTICS_WINDOW_SECONDS parameter to control the window size for generic statistics DCSTATISTICS_WINDOW_SECONDS parameter to control the window size for daemon core\u00a0[...]\n (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2011-Oct-24 09:16", "status": "resolved", "created": "2011-Sep-12 12:57", "fixed_version": "2011-Sep-12 12:57", "broken_version": "v070700", "priority": "2", "subsystem": "Win32", "assigned_to": "johnkn", "derived_from": "#2441", "creator": "johnkn", "rust": "", "customer_group": "other", "visibility": "public", "notify": "johnkn@cs.wisc.edu, tstclair@redhat.com", "due_date": "20110923"}