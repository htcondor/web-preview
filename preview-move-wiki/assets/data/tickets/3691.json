{"id": 3691, "title": "Ticket #3691: Remove hard-coded policies on how schedd can reuse claims", "description": "<blockquote>\nCurrently, the Claim that is given out by the Negotiator to the Schedd is very open ended. As long as it matches the Startd requirements, the only additional restrictions on the Claim are hard-coded : it cannot be used for a different user, and it must be used for a job with the same set of concurrency limits.\n\n<p>This situation has shown to be a problem when implementing the \u201cGlobal Priority\u201d feature. While the Negotiator will pick the globally higher priority job for a user, all bets are off once that job finishes, since the Schedd will pick the next job using local criteria. Other policies based on the global state of the system would equally be impossible to implement.\n\n</p><p>The proposal is thus to remove the hard-coded claim reuse logic and for the negotiator to explicitly embed the restrictions on jobs that can reuse the claim in the requirements that are sent back to the Schedd.\n\n</p><p>See <a class=\"external\" href=\"https://docs.google.com/document/d/1hgxjuOb9GJOQOajDfDVW661BtFI9ax_kwc1vlWGo6jA/edit?usp=sharing\">Design Document</a> for details.</p></blockquote>", "remarks": "<blockquote>\n<em>2013-Jul-08 15:09:10 by danb:</em> <br/>\n\nHi Igor,\n\n<p>In the case where ALLOW_OPTIONAL_CONCURRENCY_LIMITS=True and the original match was made for a job that did not define any concurrency limits, jobs that do define concurrency limits will be allowed to recycle the claim.  That seems like a problem.\n\n</p><p></p><hr/>\n<em>2013-Jul-08 16:28:36 by sfiligoi:</em> <br/>\n\nGood catch... and shame on me for not thinking about it. I have added an explicit requirement that will prevent a job with a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClaimLimit\" title=\"Claim Limit\">ClaimLimit</a></span> to recycle a claim issues to a job without one (patch_1.1).\n\n<p></p><hr/>\n<em>2013-Jul-09 09:25:48 by tannenba:</em> <br/>\n\nThanks for the patches!\n\n<p>I pushed <code>step_1.patch</code> and <code>step_1.1.patch</code> into the repo onto git\nbranch <code>V8_1-gt3691</code>. Also the NMI build and test pool is configured to run builds and regression tests on all platforms with every push to this branch, so we can see the regression tests.\n\n</p><p>I did not push <code>step_1b.patch</code>. I was hoping for an (undocumented?) knob to conditionally to enable/disable this code, and this patch does not accomplish this because the offer from the negotiator is still unconditionally rewritten. I want the knob to be at the negotiator level to control if machine requirements are rewritten at all.  The schedd then should look to see if <code>_condor_match_requirements_claim</code> is present in the offer to determine if it should use old hard-coded logic or not for concurrency and owner limits.\n\n</p><p>I know some developer testing was performed, but there are no transcripts testing session remarks yet in the ticket and bugs still being found on code review day before the freeze, so changing this to be targeted for v8.1.1. I think next step for development on this branch is a bypass knob as described above, and then code in the schedd to conditionally bypass hard-coded owner checks if <code>_condor_match_requirements_claim</code> is present. For testing, we need to demonstrate claims are reused when they should and also NOT reused when they should not. Testing may be made easier if we had a way via config file to append a clause to the <code>_condor_match_requirements_claim</code>.\n\n</p><p></p><hr/>\n<em>2013-Jul-09 09:59:03 by sfiligoi:</em> <br/>\n\nThe check is on ENFORCE_CONCURRENCY_LIMITS, instead of _condor_match_requirements_claim. This way it is more atomic, and it is not an all or nothing solution.\n\n<p>So I don't understand the resistance on step_1b.patch. It is disabled by default, and when enabled, only changes the behavior if  ENFORCE_CONCURRENCY_LIMITS is set to False.\n\n</p><p></p><hr/>\n<em>2013-Jul-10 18:00:16 by sfiligoi:</em> <br/>\n\nAdded a new patch that makes the new negotiator semantics optional.\n\n<p>Also included the test I used to validate it.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/778/step_1.patch\">step_1.patch</a>\n6779 bytes added by sfiligoi on 2013-Jul-08 19:36:46 UTC.\n<br/>\nPatch of the Negotiator that does not change the behavior of the Condor pool. It does add an explicit rule on Owner and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ConcurrencyLimits\" title=\"Concurrency Limits\">ConcurrencyLimits</a></span>, but they are effectively redundant at this stage, as the schedds would have done it implicitly anyhow.<br/>\n</li><li><a href=\"../files/779/step_1b.patch\">step_1b.patch</a>\n2117 bytes added by sfiligoi on 2013-Jul-08 19:38:48 UTC.\n<br/>\nPatch to the Schedd to optionally disable the implicit check on concurrency limits. To enable the new behavior, set ALLOW_OPTIONAL_CONCURRENCY_LIMITS=true.<br/>\n</li><li><a href=\"../files/780/step_1.1.patch\">step_1.1.patch</a>\n917 bytes added by sfiligoi on 2013-Jul-08 21:26:01 UTC.\n<br/>\nFix a bug in step_1.patch. Now a mix of jobs with and without concurrency limits is properly handled.<br/>\n</li><li><a href=\"../files/781/step_1.2.patch\">step_1.2.patch</a>\n4411 bytes added by sfiligoi on 2013-Jul-10 22:36:38 UTC.\n<br/>\nAdditional patch of the negotiator. Makes the new semantics optional, to be enabled with ENABLE_EXPLICT_MATCH_REQUIREMENTS=true.\n\n<p>Also fixes a potential problem with constructing the new requirements.\n<br/>\n</p></li><li><a href=\"../files/782/test_1.txt\">test_1.txt</a>\n9974 bytes added by sfiligoi on 2013-Jul-10 22:59:35 UTC.\n<br/>\nDescription of the test used to validate the new, patched collector.\n<br/>\n</li><li><a href=\"../files/783/test_1b.txt\">test_1b.txt</a>\n10430 bytes added by sfiligoi on 2013-Jul-10 23:17:05 UTC.\n<br/>\nEquivalent test for the schedd patch (step_1b).\n<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-16 00:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/77100e0f244bb7db70480d7c8ae794c7f1b66ae2\">[36907]</a></span>: Making the new semantics of <span class=\"ticket\"><a class=\"active\" href=\"/tickets?ticket=3691\" onclick=\"get_ticket_and_populate_wrapper('3691'); return false;\" title=\"Remove hard-coded policies on how schedd can reuse claims\">#3691</a></span> optional. To enable it, one has to set ENABLE_EXPLICT_MATCH_REQUIREMENTS=true. Also improve the handling of string maipulation.  (By Igor Sfiligoi )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-09 10:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/66cb029d40b27d269600efeffe7821b893adebe8\">[36810]</a></span>: change not to ! - seriously, not is apparently a valid c++ alias for ! in gcc (but not MSVC) <span class=\"ticket\"><a class=\"active\" href=\"/tickets?ticket=3691\" onclick=\"get_ticket_and_populate_wrapper('3691'); return false;\" title=\"Remove hard-coded policies on how schedd can reuse claims\">#3691</a></span>  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jul-09 08:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/ef3ef36c657b41ce8650ec4d1409dc4efb540bba\">[36794]</a></span>: Embed restrictions on reuse of a claim in offer from matchmaker. <span class=\"ticket\"><a class=\"active\" href=\"/tickets?ticket=3691\" onclick=\"get_ticket_and_populate_wrapper('3691'); return false;\" title=\"Remove hard-coded policies on how schedd can reuse claims\">#3691</a></span> When the negotiator gives the schedd a machine ad, the negotiator will rewrite machine ad with two constraints, _condor_match_requirements which is the original machine requirements, and _condor_match_requirements_claim which contains\u00a0[...]\n (By Igor Sfiligoi )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2014-Jul-28 12:57", "status": "active", "created": "2013-Jun-10 14:58", "fixed_version": "2013-Jun-10 14:58", "broken_version": "", "priority": "4", "subsystem": "DaemonsCM", "assigned_to": "tannenba", "derived_from": "", "creator": "tannenba", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "sfiligoi@fnal.gov,dan@hep.wisc.edu,tannenba@cs.wisc.edu,tstclair@redhat.com", "due_date": ""}