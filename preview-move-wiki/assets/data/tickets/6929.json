{"id": 6929, "title": "Ticket #6929: Errors in writing compacted job_queue.log can cause corruption", "description": "<blockquote>\nThe schedd persistently records all changes to its job queue by appending records to the <code>job_queue.log</code> transaction log. At startup, shutdown, and periodically, it compacts the log by writing a new file that contains just the current state of the job queue. It then uses this new file as the transaction log. The way it does so can lead to corruption if there's an error in the compaction process.\n\n<p>Compacting the log (also called truncation in the code) consists of the following steps:\n</p><ol>\n<li>Open file <code>job_queue.log.tmp</code>\n</li><li>Write current job queue state to <code>job_queue.log.tmp</code>\n</li><li>Close file handles for both <code>job_queue.log</code> and <code>job_queue.log.tmp</code>\n</li><li>Rename <code>job_queue.log.tmp</code> to <code>job_queue.log</code>\n</li><li>Open file <code>job_queue.log</code> in O_APPEND mode\n</li></ol>\n\n<p>The critical bug is that when <code>job_queue.log.tmp</code> is opened, the O_CREAT flag is used but O_EXCL is not, and the file is never truncated. If the file already exists and is larger than the data the schedd writes (say from a failed attempt to compact the log), then the transaction log will contain invalid data. If the log is read before another compact operation, the reader will likely see illegal record formatting and an incorrect state of the job queue. In many cases, the schedd will refuse to start.\n\n</p><p>There are several contributing factors that make corruption more likely to occur and affect users:\n</p><ul>\n<li>If a compact operation fails, the <code>.tmp</code> file isn't removed.\n</li><li>We need to close and reopen the new log file around the rename operation to avoid errors on windows. This causes us to skip past any extra data in a pre-existing <code>.tmp</code> file, instead of eventually overwriting it with new records.\n</li><li>We avoid writing some transient job attributes (e.g. <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AutoClusterAttrs\" title=\"Auto Cluster Attrs\">AutoClusterAttrs</a></span>) in log records, but they will still appear in a compact operation. Thus, a compact operation done at schedd shutdown is likely to result in a larger file than a compact operation of the same log at schedd startup.\n</li></ul>\n\n<p><span class=\"subsection\"></span></p><h3>Solution </h3>\n\n<p>The main change to fix this corruption bug is to ensure that no data in an existing <code>.tmp</code> file survives a compact operation. A simple way to do this is to change the <code>safe_open_wrapper_follow()</code> we currently use to open the <code>.tmp</code> file to <code>safe_create_replace_if_exists()</code>.\n\n</p><p>There are a few additional minor improvements we should make:\n</p><ul>\n<li><code>unlink()</code> the <code>.tmp</code> file if the compact operation fails.\n</li><li>Don't leak an fd when <code>fdopen()</code> fails.\n</li><li>Always have the log file open in append mode during normal operation.\n<ul>\n<li>Currently, it's sometimes in append mode and sometimes isn't.\n</li></ul>\n</li></ul>\n\n<p><span class=\"subsection\"></span></p><h3>User report</h3>\n\n<p>This bug was uncovered while investigating a report of log corruption on htcondor-users. Based on their logs, this is our best guess as to what happened:\n\n</p><p></p><ul>\n<li>On shutdown, schedd attempts to compact log\n<ul>\n<li>Writes <code>.tmp</code> file, but fails to rename it.\n</li></ul>\n</li><li>On startup, schedd successfully compacts log.\n<ul>\n<li>Overwrites <code>.tmp</code> left from shutdown. New contents are 368 bytes shorter, due to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AutoClusterId\" title=\"Auto Cluster Id\">AutoClusterId</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=AutoClusterAttrs\" title=\"Auto Cluster Attrs\">AutoClusterAttrs</a></span> not being present.\n</li><li>End of log now contains a partial line plus last 12 lines of previous compact attempt.\n</li></ul>\n</li><li>Schedd starts normal operations, appending new records to the end of the log.\n</li><li>Machine is hibernated\n<ul>\n<li>This happens six hours after schedd startup, before the first periodic compact operation.\n</li></ul>\n</li><li>Machine wakes from hibernation\n</li><li>Master immediately hard-kills all daemons due to large jump in system clock.\n</li><li>Schedd restarts, aborts due to corruption in log.\n</li></ul>\n\n<p><span class=\"subsection\"></span></p><h3>Miscellaneous </h3>\n\n<p>I noticed an odd bit of behavior in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> log reader code (InstantiateLogEntry() in classad_log.cpp). If a log record has a valid opcode but there's something wrong with the rest of the line, we scan the rest of the file. If we don't see any <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EndTransaction\" title=\"End Transaction\">EndTransaction</a></span> records, then we pretend the problematic record was a truncated final line of the file (i.e. ignore the record and the active transaction, if any, and proceed). If the opcode is invalid or there is an <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EndTransaction\" title=\"End Transaction\">EndTransaction</a></span> afterwards, then reading of the file fails due to unrecoverable corruption. This seems like a strange division between recoverable and unrecoverable errors.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Mar-26 16:23:43 by johnkn:</em> <br/>\n\n<strong>CODE_REVIEW</strong>: looks good</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Apr-01 14:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56478\">[56478]</a></span>: Docs for job_queue.log corruption bug fix. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6929\" onclick=\"get_ticket_and_populate_wrapper('6929'); return false;\" title=\"Errors in writing compacted job_queue.log can cause corruption\">#6929</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Feb-22 15:07</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=56244\">[56244]</a></span>: Avoid <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> log corruption on errors during truncate operation. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6929\" onclick=\"get_ticket_and_populate_wrapper('6929'); return false;\" title=\"Errors in writing compacted job_queue.log can cause corruption\">#6929</a></span> When opening the .tmp file, always discard any existing contents. A previous failed truncate would leave its .tmp file behind, which may be larger than what we end up writing. Remove the .tmp file on error (no longer needed for correctness,\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2019-Apr-01 14:38", "status": "resolved", "created": "2019-Feb-22 14:38", "fixed_version": "2019-Feb-22 14:38", "broken_version": "", "priority": "2", "subsystem": "DaemonsSubmitNode", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "users", "visibility": "public", "notify": "", "due_date": ""}