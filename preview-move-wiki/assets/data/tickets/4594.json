{"id": 4594, "title": "Ticket #4594: Fix time-slicing for ClassAd iterator", "description": "<blockquote>\nWe took a shortcut in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> iterator implementation when it comes to time slicing.\n\n<p>The query protocol returns to DC whenever there is blocking on the network socket when writing out a matching ad.  <strong>However</strong>, if we are iterating through the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> log and there are no matching ads, we periodically need to return to DC to prevent the query from significantly blocking the schedd.\n\n</p><p>To \"periodically\" return, we simply return once every 1000 non-matching ads.  This isn't a great metric - could be quite disjoint from actual wall clock time.  In the example of a very busy schedd with a million jobs, this means we would return to DC (and hence wait to get rescheduled) 1000 times\n\n</p><p>We should switch to actually timing things - spending a fixed amount of time in rejecting ads.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-Sep-16 21:20:02 by bbockelm:</em> <br/>\n\nFor example - my VM development box takes 6 ms to iterate through 10k <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.  When done with an iterator which is actually aware of wallclock time, this fits comfortably without returning to DC (and does not cause excessive blocking).  In the current code, this would have returned to DC 10 times.\n\n<p>If we allow up to a second of blocking before forcing the iterator to return to DC, at these rates, we would be able to get through one million ads.\n\n</p><p></p><hr/>\n<em>2014-Sep-26 09:40:27 by bbockelm:</em> <br/>\n\nCode is in the branch V8_3-gt4594.  Needs review.\n\n<p></p><hr/>\n<em>2014-Sep-26 17:01:55 by gthain:</em> <br/>\n\n<strong>CODE REVIEW</strong>\n\n<p>Could we pull out the gettimeofday/clock_gettime ifdef'ery into a condor_utils function?\n\n</p><p>Also, is there any concern about integer overflow for int elapsed_us?  I think would overflow after 20 minutes, which seems like a long time.\n\n</p><p></p><hr/>\n<em>2014-Sep-26 19:36:16 by bbockelm:</em> <br/>\n\nWill do!\n\n<p>For the elapsed_us -- I'll put in a check for that.  Even better, if we factor out the code into a separate library, I'll probably cast things to a double.\n\n</p><p></p><hr/>\n<em>2014-Sep-26 21:36:58 by bbockelm:</em> <br/>\n\nOk, please review the updated branch.\n\n<p></p><hr/>\n<em>2014-Sep-29 10:12:34 by gthain:</em> <br/>\n\n<strong>CODE REVIEW</strong>  Very nice. I even like the name of the class.  Are you missing a greater-than after the \"double\" in this line:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">\u00b7\u200bm_accum_ms\u00b7\u200b+=\u00b7\u200bstatic_cast&lt;double(tp\u200b.\u200btv_sec\u00b7\u200b+\u00b7\u200bm_start.\u200btv_sec)\u200b*1000.\u200b\u00b7\u200b+\u00b7\u200bstatic_cast&lt;double&gt;(t\u200bp.\u200btv_usec\u00b7\u200b-\u00b7\u200bm_start.\u200btv_usec)\u200b/\u200b1000.\u200b;\u200b\n</pre></div>\n\n\n<p></p><hr/>\n<em>2014-Nov-21 10:49:29 by gthain:</em> <br/>\n\n<strong>CODE REVIEW</strong>  Looks good now.  Let's merge.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Dec-22 18:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=42020\">[42020]</a></span>: Edit existing 8.3.2 version history items for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4603\" onclick=\"get_ticket_and_populate_wrapper('4603'); return false;\" title=\"DAEMON_SOCKET_DIR=auto breaks partial use of shared port\">#4603</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4657\" onclick=\"get_ticket_and_populate_wrapper('4657'); return false;\" title=\"Support EC2 block-device mapping.\">#4657</a></span>, and <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4660\" onclick=\"get_ticket_and_populate_wrapper('4660'); return false;\" title=\"Add sub-second accurate timestamps to dprintf logs\">#4660</a></span>. Add new version history items for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=374\" onclick=\"get_ticket_and_populate_wrapper('374'); return false;\" title=\"dlopen Kerberos\">#374</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4735\" onclick=\"get_ticket_and_populate_wrapper('4735'); return false;\" title=\"Speed up V3 query protocol\">#4735</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4594\" onclick=\"get_ticket_and_populate_wrapper('4594'); return false;\" title=\"Fix time-slicing for ClassAd iterator\">#4594</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4491\" onclick=\"get_ticket_and_populate_wrapper('4491'); return false;\" title=\"Scalable claim keepalive protocol\">#4491</a></span>, and <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4585\" onclick=\"get_ticket_and_populate_wrapper('4585'); return false;\" title=\"Detect SO version of libraries we dlopen() at compile time\">#4585</a></span>.  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Oct-31 14:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=41544\">[41544]</a></span>: Use common function _condor_debug_get_time_double as it supports Windows. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4594\" onclick=\"get_ticket_and_populate_wrapper('4594'); return false;\" title=\"Fix time-slicing for ClassAd iterator\">#4594</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Oct-31 13:12</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=41543\">[41543]</a></span>: Merged <span class=\"chng\"><a href=\"chngview?cn=41174\">[41174]</a></span>, <span class=\"chng\"><a href=\"chngview?cn=41258\">[41258]</a></span>, <span class=\"chng\"><a href=\"chngview?cn=41542\">[41542]</a></span>, Merge branch 'V8_3-gt4594'. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4594\" onclick=\"get_ticket_and_populate_wrapper('4594'); return false;\" title=\"Fix time-slicing for ClassAd iterator\">#4594</a></span> Conflicts: build/cmake/CondorConfigure.cmake src/condor_utils/CMakeLists.txt  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Oct-31 12:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=41542\">[41542]</a></span>: Fix syntax error. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4594\" onclick=\"get_ticket_and_populate_wrapper('4594'); return false;\" title=\"Fix time-slicing for ClassAd iterator\">#4594</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Sep-26 21:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=41258\">[41258]</a></span>: Per code review, factor out the timer interactions into a separate C++ class. Switch the stopwatch to a double from an integer to prevent overflows. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4594\" onclick=\"get_ticket_and_populate_wrapper('4594'); return false;\" title=\"Fix time-slicing for ClassAd iterator\">#4594</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Sep-17 10:12</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=41174\">[41174]</a></span>: Check timing in the rejection of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4594\" onclick=\"get_ticket_and_populate_wrapper('4594'); return false;\" title=\"Fix time-slicing for ClassAd iterator\">#4594</a></span>. Currently, we return to DC once every 1000 rejected <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>. This implements the original design, which returns to DC once every 1000ms. Simple timing tests show that, for very large queues, this should be far more responsive as we go back to DC less\u00a0[...]\n (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2014-Dec-15 13:55", "status": "resolved", "created": "2014-Sep-16 20:42", "fixed_version": "2014-Sep-16 20:42", "broken_version": "", "priority": "2", "subsystem": "DaemonsSubmitNode", "assigned_to": "gthain", "derived_from": "#4490", "creator": "bbockelm", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "", "due_date": ""}