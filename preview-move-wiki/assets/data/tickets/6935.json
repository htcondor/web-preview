{"id": 6935, "title": "Ticket #6935: Unexpected exceptions in Python bindings", "description": "<blockquote>\nThe Python bindings often raise Python exceptions which are not consistent with the way the rest of the community uses them.\n\n<p>Here are the patterns I saw:\n\n</p><p>- usage of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RuntimeError\" title=\"Runtime Error\">RuntimeError</a></span> (or sometimes <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ValueError\" title=\"Value Error\">ValueError</a></span>!) when unable to do stuff with another host/process/daemon\n\n</p><p>Any sort of communication error is an IOError.  It would be even better to make\none or more subclasses of IOError for different categories of problems so people\ncan distinguish them without having to parse text.\n\n</p><p>- usage of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SyntaxError\" title=\"Syntax Error\">SyntaxError</a></span> or <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RuntimeError\" title=\"Runtime Error\">RuntimeError</a></span> when there is a problem parsing a classad\n\n</p><p><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SyntaxError\" title=\"Syntax Error\">SyntaxError</a></span> is reserved for <em>Python</em> syntax errors.  For classad parsing errors,\nmake a new classad.ParseError exception.\n\n</p><p>- usage of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TypeError\" title=\"Type Error\">TypeError</a></span> or <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ValueError\" title=\"Value Error\">ValueError</a></span> (often inconsistently) when failing to evaluate expressions\n\n</p><p>Better to make an <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EvaluateError\" title=\"Evaluate Error\">EvaluateError</a></span> (classad.EvaluateError?) instead so people can tell it's a problem with their classad.\n\n</p><p>- usage of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ValueError\" title=\"Value Error\">ValueError</a></span> when an object is not iterable\n\n</p><p>This is pretty clearly a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TypeError\" title=\"Type Error\">TypeError</a></span>.\n\n</p><p>- usage of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RuntimeError\" title=\"Runtime Error\">RuntimeError</a></span> at all\n\n</p><p><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=RuntimeError\" title=\"Runtime Error\">RuntimeError</a></span> is too generic; it leads to people parsing the error message to figure out what the actual problem is, which we don't want.\n\n</p><p>A couple of other problems (files and line numbers are from src/python-bindings in master (8a4c7f9ad6)):\n\n</p><p>bulk_query_iterator.cpp\n</p><hr/>\nlines 122-125:\n<div class=\"code\">\n<pre class=\"code\">if (m_selector.failed())\n{\n    THROW_EX(RuntimeError, \"select() failed.\");\n}\n</pre></div>\n\nselect() failing is probably an OSError especially if it has an errno associated with it.\n\n<p>classad.cpp\n</p><hr/>\nline 526:\n<div class=\"code\">\n<pre class=\"code\">if (!PyObject_HasAttrString(source.ptr(), \"__iter__\")) THROW_EX(ValueError, \"Must provide a dictionary-like object to update()\");\n</pre></div>\n\nUse <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TypeError\" title=\"Type Error\">TypeError</a></span>.\n\n<p>config.cpp\n</p><hr/>\nlines 245, 580:\n<div class=\"code\">\n<pre class=\"code\">if (!py_hasattr(source, \"__iter__\")) { THROW_EX(ValueError, \"Must provide a dictionary-like object to update()\"); }\n</pre></div>\n\n<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TypeError\" title=\"Type Error\">TypeError</a></span>.\n\n<p>JobEventLog.cpp\n</p><hr/>\nline 53:\n<div class=\"code\">\n<pre class=\"code\">THROW_EX( RuntimeError, \"deadline must be an integer\" );\n</pre></div>\n\n<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TypeError\" title=\"Type Error\">TypeError</a></span>.</blockquote>", "remarks": "<blockquote>\n<em>2019-Mar-02 20:34:35 by tlmiller:</em> <br/>\n\n<div class=\"code\">\n<pre class=\"code\">&gt; Here are the patterns I saw:\n&gt;\n&gt; - usage of RuntimeError (or sometimes ValueError!) when unable to do stuff with\n&gt; another host/process/daemon\n&gt;\n&gt; Any sort of communication error is an IOError.\n\nJust to be certain: it's an IOError to specify a host which doesn't exist?\n\n&gt; It would be even better to make one or more subclasses of IOError for\n&gt; different categories of problems so people can distinguish them without\n&gt; having to parse text.\n\n....\n\n&gt; - usage of ValueError when an object is not iterable\n&gt;\n&gt; This is pretty clearly a TypeError.\n\nImplying that when object.__iter()__ returns an object which doesn't have an iterator, it's also a TypeError?\n</pre></div>\n\n\n<p></p><hr/>\nDoes code like the following make sense?\n\n<p></p><div class=\"code\">\n<pre class=\"code\">if (m_claim.empty()) {THROW_EX(ValueError, \"No claim set for object.\");}</pre></div>\n\n\n<p>Would it make more sense to return a failure, instead?  Likewise, <code>claim.cpp</code> is lousy with:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">// FIXME: Should at least be IOError\nTHROW_EX(RuntimeError, \"Startd failed to activate claim.\");</pre></div>\n\n\n<p>but IOError seems a little ill-fitting -- the IO succeeded, but the command in question did not.  That seems like maybe the function should return success or failure and only throw IOError if something actually happened to the I/O?\n\n</p><p></p><hr/>\n<em>2019-Mar-03 13:09:17 by tlmiller:</em> <br/>\n\nIs there a reason that _classad_module.cpp and _htcondor_module.cpp exist?  (Can we really not bully CMake into making different libraries out of the same source file?)  Is there a reason that they aren't symlinks?  (It would seem to violate the principle of least astonishment for the wheel-built modules to be different.)\n\n<p></p><hr/>\n<em>2019-Mar-04 11:42:47 by matyas:</em> <br/>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \n&gt; Just to be certain: it's an IOError to specify a host which doesn't exist?\n</td></tr></tbody></table></div>\n\nYes. For example, the built-in \"socket\" library throws \"socket.gaierror\" (<a class=\"external\" href=\"https://docs.python.org/2.7/library/socket.html#socket.gaierror\">https://docs.python.org/2.7/library/socket.html#socket.gaierror</a>), which is descended from IOError.\n\n<p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \n&gt; Implying that when object.__iter()__ returns an object which doesn't have an iterator, it's also a TypeError?\n</td></tr></tbody></table></div>\n\nI'm not sure what you mean here.  object.__iter__() should return an object that <em>is</em> an iterator.  If the object is not iterable (e.g. an integer), then it shouldn't have __iter__() defined at all.  Python will raise a \"<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TypeError\" title=\"Type Error\">TypeError</a></span>\" is you attempt to get an iterator of a non-iterable object (i.e. \"iter(object)\").\n\n<p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \n&gt; if (m_claim.empty()) {THROW_EX(ValueError, \"No claim set for object.\");}\n</td></tr></tbody></table></div>\n\nThis is the kind of place where a custom exception would be handy -- a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassadError\" title=\"Classad Error\">ClassadError</a></span> or something.  For example, the built-in \"json\" library raises \"JSONDecodeError\" on a parse error; JSONDecodeError is a subclass of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ValueError\" title=\"Value Error\">ValueError</a></span> with additional attributes for the line and column number of the parse error.\n\n<p></p><div class=\"verbatim\">\n<pre>    // FIXME: Should at least be IOError\n    THROW_EX(RuntimeError, \"Startd failed to activate claim.\");\n</pre></div>\n\n<div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \n&gt; but IOError seems a little ill-fitting -- the IO succeeded, but the command in question did not. That seems like maybe the function should return success or failure and only throw IOError if something actually happened to the I/O?\n</td></tr></tbody></table></div>\n\nWhat's more important here is that the error happened in another program.  For example, the built-in \"urllib2\" library raises HTTPError, which is descended from IOError, if the remote server returns a 404.\n\n<p>If an error is fairly common and usually survivable, you may want to add a way to bypass it -- that's when you return success/failure, or a default value, or something.\n\n</p><p></p><hr/>\n<em>2019-Mar-06 14:21:13 by tlmiller:</em> <br/>\n\nDesign doc:\n\n<p><a class=\"external\" href=\"https://docs.google.com/document/d/1K0LYRgorNlEVuXQGliT_zPnijCPdjbEPZuXj--CIBr0\">https://docs.google.com/document/d/1K0LYRgorNlEVuXQGliT_zPnijCPdjbEPZuXj--CIBr0</a>\n\n</p><p>Document does not cover how we'll release the changes, which probably depends on another discussion about versioning the bindings.\n\n</p><p></p><hr/>\n<em>2020-May-21 17:12:49 by karpel:</em> <br/>\n\nNecro'ing this ticket because it got brought up in the APIs session at HTCondor Week 2020. We have a user doing exactly what Mat warned would happen: they are parsing the message of the <code>RuntimeError</code> generated when an edit fails to modify any ads to differentiate it from, say, the <code>RuntimeError</code> that gets generated when you fail to contact the schedd.\n\n<p>@ToddM, is there anything blocking progress on this, or did we just lose track of it? Looks like a lot of code got written, but it's been rotting off on a branch.\n\n</p><p></p><hr/>\n<em>2020-May-21 17:19:21 by tlmiller:</em> <br/>\n\nI don't recall any particular code blockers, but without a good way to introduce the changes, this wasn't a high-enough priority to work on.\n\n<p></p><hr/>\n<em>2020-Jul-07 10:49:05 by tlmiller:</em> <br/>\n\nTwo new proposals:\n\n<p>(1) Temporarily make the new exceptions sub-classes of the old ones.\n(2) Add a 'version-of-interface' flag to choose which exceptions are thrown.\n\n</p><p>The benefit of (1) is not breaking old code, and simplicity.  The disadvantage is that users could easily not notice the deprecation until it's too late.\n\n</p><p>For (2), we could make the default the new behavior, and require the user to opt-in to the old behavior.  This has the advantage of making sure the user knows abut what's going on, and it also handles API changes other than just exceptions.  Obviously, we could instead make the default old rather than new.  The problem here is potentially -- especially if old is the default -- breaking old behavior because of complicated interactions in the code.  That might be one benefit of having new be the default (meaning, expect things to break).\n\n</p><p></p><hr/>\n<em>2020-Aug-27 12:23:02 by karpel:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p>ToddM went with the \"make the new errors subclasses of the existing errors\" approach. This has introduced a lot of wackiness into the inheritance hierarchy of our exceptions, but I think this is unavoidable for backwards compatibility. I am comfortable with this tradeoff.\n\n</p><p>Basic structure of the changes look good. I like the writeup detailing the logic of implementation a lot. I would perhaps include some notes on what each of the exceptions mean in plain text, or as docstrings of the exceptions themselves if that's possible in Boost. We should write down and agree on the meanings of the exceptions to avoid getting back into a situation like we're trying to dig out of right now.\n\n</p><p>Some exceptions are troubling, like <code>THROW_EX(HTCondorAssertionError, \"Logic error in poll implementation.\");</code>, which seems like it indicates a gap in our understanding of the failure case. Maybe it can just be an <code>HTCondorInternalError</code>?\n\n</p><p>There are a few places that something like <code>THROW_EX(ClassAdEvaluationError, \"Unable to evaluate expression\");</code> happens; it would be nice if we could get a more detailed error message in, but I don't think that's a blocker for this ticket.\n\n</p><p>I'm suspicious of <code>THROW_EX(ClassAdTypeError, \"Unable to iterate through ads.\");</code> in <code>classad.parseOne</code> - that seems like it should maybe be some kind of <code>ValueError</code>, or <code>ClassAdParseError</code>? Similar construction in other parsing functions should also be looked at.\n\n</p><p><code>THROW_EX(HTCondorNotImplementedError, \"Startd-with-ack protocol is not implemented at this time.\");</code> I am ok with plain `NotImplementedError` for this.\n\n</p><p>I would maybe call <code>HTCondorEnumError</code> something like <code>HTCondorInvalidEnumMember</code> to make it more specific. In general, exception don't need to be <code>*Error</code>... though I don't think there are really better names for most of these. One could argue between <code>HTCondorLocateError</code> and e.g. <code>FailedToLocateDaemon</code>; I don't think it matters much.\n\n</p><p></p><hr/>\n<em>2020-Aug-27 14:46:59 by tlmiller:</em> <br/>\n\n(Responses in order of the code review.)\n\n<p></p><ul>\n<li><span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/dd6e62c67c1315ba2016ddfeba7963360dc63401\">[61126]</a></span> added a draft of the usage guidelines, which got reviewed before being turne into actual documentation in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/1dc05eb1f349d58b5ffdc651ba193eb04e9d414e\">[61138]</a></span>, which added docstrings and the corresponding sections in the manual.\n\n<p></p></li><li><span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/66c3579017f0402b9ab0a56c673f7487106b0d09\">[61125]</a></span> eliminated HTCondorAssertionError.\n\n<p></p></li><li><span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/da38fc96bed601afc957e0099b25763e6ef07193\">[61127]</a></span> corrected the exceptions in parseOne() and parseNext().\n\n<p></p></li><li><span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/25ccd5783bffd81f931c089f4d3e0fb225aa1b0f\">[61123]</a></span> eliminated HTCondorNotImplementedError.</li></ul>\n</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=7311\" onclick=\"get_ticket_and_populate_wrapper('7311'); return false;\" title=\"JobEventLog initialization failure error messages are uninformative\">#7311</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\n<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=JobEventLog\" title=\"Job Event Log\">JobEventLog</a></span> initialization failure error messages are uninformative</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=7325\" onclick=\"get_ticket_and_populate_wrapper('7325'); return false;\" title=\"Error when Python bindings fail to create a new procid needs context\">#7325</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nError when Python bindings fail to create a new procid needs context</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7808\" onclick=\"get_ticket_and_populate_wrapper('7808'); return false;\" title=\"from_dag() binding should throw exception when .dag file not found\">#7808</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nfrom_dag() binding should throw exception when .dag file not found</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=7824\" onclick=\"get_ticket_and_populate_wrapper('7824'); return false;\" title=\"Further Python binding exceptions improvement\">#7824</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nFurther Python binding exceptions improvement</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-31 11:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/809724aa512a12463660977b8ae13908d8c391bc\">[61173]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Don't run the test on platforms without Python bindings, because of <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=PyTest\" title=\"Py Test\">PyTest</a></span> idiocy.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-28 13:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/57da541733cd92e18c2197af94f28900f19735c6\">[61147]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Release note.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-28 12:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a0e249aa98eb9b393d4659c5eb9bf5e0c251871a\">[61146]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Change some newly-added old-style exceptions.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-28 11:46</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3af016b4df1c945f873ef2c380ad2e96efb41ffc\">[61143]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Only include the pointers to the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> exception types in the classad module['s library]; otherwise, loading the htcondor module['s library] first will leave them unititialized, causing very weird Python error messages.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-27 17:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/1dc05eb1f349d58b5ffdc651ba193eb04e9d414e\">[61138]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Document the exceptions for our users.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-27 15:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/570e6cf1c6446865126fb366c7d577b4a6de7081\">[61136]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Correct typos.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-27 15:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/da38fc96bed601afc957e0099b25763e6ef07193\">[61127]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Convert incorrect <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=TypeErrors\" title=\"Type Errors\">TypeErrors</a></span> to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=InternalErrors\" title=\"Internal Errors\">InternalErrors</a></span>.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-27 14:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/dd6e62c67c1315ba2016ddfeba7963360dc63401\">[61126]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Draft guidelines for use of our new exceptions.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-27 14:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/66c3579017f0402b9ab0a56c673f7487106b0d09\">[61125]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Remove HTCondorAssertionError, replace with HTCondorInternalError in the one place it was used.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-27 12:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/25ccd5783bffd81f931c089f4d3e0fb225aa1b0f\">[61123]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Remove HTCondorNotImplementedError; the guidelines for using <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=NotImplementedError\" title=\"Not Implemented Error\">NotImplementedError</a></span> were relaxed in Python 3.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-26 16:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/34de1c2af38f52d3139ea4576a89acf023c7787a\">[60562]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Add all the extra super-classes to our new exception classes.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-26 16:30</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/64b5dad9e04bcb1383211a21fa79aa351dcfb098\">[60561]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Exception types clean-up.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-26 15:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/99288e36e3590274a7cc7da07059dd4cf520aa8e\">[60560]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Remove some FIXMEs.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-26 14:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/71c4533abb549f83ca1e9b710292594eabdd0918\">[60558]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Hopefully-correct infrastructure for adding multiple parent classes to our new exception classes.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Aug-26 14:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/1d1e0b342cb745e67a85cc9eb3205f15ab076509\">[60557]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Throw the new (multiple-inheritance) exception types.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-06 14:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/5dcf6bf81138ce278437698146ae820f584c2a05\">[56384]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Finish the first pass. Many FIXMEs for the specialists remain.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-05 17:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/dd99202c0c0a2b296629748afa36a9851a45df13\">[56285]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Add a number of new exception classes, all subclasses of the new HTCondorException and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAdException\" title=\"Class Ad Exception\">ClassAdException</a></span> base classes. More patching up of exception types. Extended to 'config.cpp' in the list.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-04 12:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/871621745adb11b6f6232489c682daad46e63498\">[56284]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Add HTCondor.LocateError for when we can't find a daemon.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-04 12:33</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3f222a8c2379ce1a27a2ed37dbb09e4f2dac577a\">[56283]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) More exception type fixes.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-03 13:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/15e18d388be4e925421be20f0fa5538c0a891498\">[56272]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Use the exception-adding function for /both/ new exceptions.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-03 13:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/67344ec6dc914167928f598cfbab28e17c8cbe95\">[56271]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Make the Python bindings' exceptions less exceptional. (part 2)  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-02 21:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/293ce9be0bc6f3e9754094fe0ba07f284b563f9c\">[56270]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Add <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAdParseError\" title=\"Class Ad Parse Error\">ClassAdParseError</a></span> (classad.ParseError) and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAdEvaluationError\" title=\"Class Ad Evaluation Error\">ClassAdEvaluationError</a></span> (classad.EvaluationError) exceptions. Hopefully the third throw in classad.cpp doesn't /also/ need its own exception class...  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Mar-02 19:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/672ba81adb5f4b9c0bac70e07b991d110b4deb9a\">[56268]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6935\" onclick=\"get_ticket_and_populate_wrapper('6935'); return false;\" title=\"Unexpected exceptions in Python bindings\">#6935</a></span>) Make the Python bindings' exceptions less exceptional.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-Aug-28 13:01", "status": "resolved", "created": "2019-Feb-27 15:39", "fixed_version": "2019-Feb-27 15:39", "broken_version": "v080000", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "tlmiller", "derived_from": "", "creator": "matyas", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matyas@cs.wisc.edu,karpel@wisc.edu", "due_date": ""}