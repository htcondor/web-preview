{"id": 4121, "title": "Ticket #4121: Concurrency limits and partitionable slots lead to overclaiming limits", "description": "<blockquote>\nProblem 1: When a partitionable slot is claimed by a job with a concurrency limit, the newly created dynamic slot will use the concurrency limit (correct), as will the partitionable slot (wrong).  The next time the partitionable slot creates a dynamic slot, the partitionable slot will lose the concurrency limit (sort of correct), but the new dynamic slot will gain it (wrong).  There is no workaround at this time.\n\n<p>Problem 2: Claim reuse doesn't respect concurrency limits.  At the very least, if a non-concurrency using job shows up after a concurrency using job, the slot will continue to use the concurrency limit, chewing up the limit despite not having any use for it.  Current workaround: CLAIM_WORKLIFE=0 to disable claim reuse.\n\n</p><p><span class=\"section\"></span></p><h2>Reproduction </h2>\n\n<p></p><ol>\n<li>tar xvzf /p/condor/public/binaries/v8.0/8.0.5/condor-8.0.5-x86_64_RedHat6-stripped.tar.gz\n</li><li>cd condor-8.0.5-x86_64_RedHat6-stripped\n</li><li>./condor_install --make-personal-condor\n</li><li>source condor.sh / condor.csh\n</li><li>Append to local.$HOSTNAME/condor_config.local:\n<div class=\"code\">\n<pre class=\"code\">NEGOTIATOR_DEBUG=D_ACCOUNTANT\nFOO_LIMIT=4\nNUM_CPUS=8\nSLOT_TYPE_1=mem=100%,cpu=100%,disk=100%,swap=100%\nSLOT_TYPE_1_PARTITIONABLE=TRUE\nNUM_SLOTS_TYPE_1=1\n</pre></div>\n\n</li><li>condor_master\n</li><li>Create submit.foo containing:\n<div class=\"code\">\n<pre class=\"code\">executable=/bin/sleep\narguments=60\nconcurrency_limits=FOO\nqueue 5\n</pre></div>\n\n</li><li>Create submit.basic containing:\n<div class=\"code\">\n<pre class=\"code\">executable=/bin/sleep\narguments=60\nqueue 50\n</pre></div>\n\n</li><li>condor_submit submit.foo.  Wait a little bit until a job starts.\n</li><li>condor_status -af concurrencylimits name globaljobid . Observe that the partitionable slot is using foo, when it shouldn't be.  For example:\n<div class=\"code\">\n<pre class=\"code\">foo slot1@puffin.cs.wisc.edu undefined\nfoo slot1_1@puffin.cs.wisc.edu puffin.cs.wisc.edu#13.0#1386973329\n</pre></div>\n\n</li><li>Wait for the next negotiation cycle. Observe in the negotiator log that it had 1 claim on foo before, now it has 2, which is wrong. Presumably the partitionable slot is being counted.\n<div class=\"code\">\n<pre class=\"code\">12/13/13 16:54:37 Previous Limits --\n12/13/13 16:54:37   Limit: foo = 1.000000\n12/13/13 16:54:37 IncrementLimit(foo)\n12/13/13 16:54:37 IncrementLimit(foo)\n12/13/13 16:54:37 Current Limits --\n12/13/13 16:54:37   Limit: foo = 2.000000\n</pre></div>\n\n</li><li>condor_submit submit.basic; condor_reschedule\n</li><li>condor_status -af concurrencylimits name globaljobid . Observe that one of the slots running a basic job is marked as claiming a foo resource, which is wrong. Also observe that only a single foo job can match each cycle, while all of the basic jobs case, which might be wrong. For example (here 14.* is foo, while 15.* is basic):\n<div class=\"code\">\n<pre class=\"code\">foo slot1_1@puffin.cs.wisc.edu puffin.cs.wisc.edu#14.0#1386973495\nfoo slot1_2@puffin.cs.wisc.edu puffin.cs.wisc.edu#14.1#1386973495\nfoo slot1_3@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.0#1386973507\nundefined slot1_4@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.1#1386973507\nundefined slot1_5@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.2#1386973507\nundefined slot1_6@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.3#1386973507\nundefined slot1_7@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.4#1386973507\nundefined slot1_8@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.5#1386973507\n</pre></div>\n\n</li><li>Eventually the foo jobs will complete.  Observe that basic job slot that erroneously claimed a foo resource continues to do so, even as later jobs cycle through it.  This is wrong (and probably the result of re-using a claim).  Example:\n<div class=\"code\">\n<pre class=\"code\">undefined slot1@puffin.cs.wisc.edu undefined\nundefined slot1_1@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.26#1386973507\nundefined slot1_2@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.27#1386973507\nfoo slot1_3@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.28#1386973507\nundefined slot1_4@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.29#1386973507\nundefined slot1_5@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.30#1386973507\nundefined slot1_6@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.31#1386973507\nundefined slot1_7@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.32#1386973507\nundefined slot1_8@puffin.cs.wisc.edu puffin.cs.wisc.edu#15.33#1386973507\n</pre></div>\n</li></ol>\n</blockquote>", "remarks": "<blockquote>\n<em>2014-Jan-22 11:51:21 by adesmet:</em> <br/>\n\nSee also: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4145\" onclick=\"get_ticket_and_populate_wrapper('4145'); return false;\" title=\"concurrency limit off-by-one when use with partitionable slots\">#4145</a></span>: concurrency limit off-by-one when use with partitionable slots</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "defect", "last_change": "2014-Jan-22 11:51", "status": "new", "created": "2013-Dec-13 16:18", "fixed_version": "2013-Dec-13 16:18", "broken_version": "v080005", "priority": "4", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "s8378", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}