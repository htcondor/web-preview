{"id": 1217, "title": "Ticket #1217: race condition in MAX_JOBS_RUNNING accounting", "description": "<blockquote>\nOn the CMS CE at Fermilab, it was observed that the schedd kept saying that it was preempting jobs due to a change in MAX_JOBS_RUNNING, even though this configuration variable was only ever increased, never decreased.\n\n<p>Below is a typical sequence of events in the logs (grepping for MAX_JOBS_RUNNING and matched).\n\n</p><p></p><div class=\"verbatim\">\n<pre>02/15 13:02:36 Reached MAX_JOBS_RUNNING: no more can run, 8 jobs matched, 10 jobs idle\n02/15 13:02:36 Out of servers - 8 jobs matched, 10 jobs idle, 0 jobs rejected\n02/15 13:02:37 Reached MAX_JOBS_RUNNING: no more can run, 8 jobs matched, 443 jobs idle\n02/15 13:02:37 Out of servers - 8 jobs matched, 383 jobs idle, 0 jobs rejected\n02/15 13:02:42 Reached MAX_JOBS_RUNNING: no more can run, 8 jobs matched, 59 jobs idle\n02/15 13:02:42 Out of servers - 8 jobs matched, 41 jobs idle, 0 jobs rejected\n02/15 13:02:44 Preempting 1 jobs due to MAX_JOBS_RUNNING change\n02/15 13:02:50 Preempting 2 jobs due to MAX_JOBS_RUNNING change\n</pre></div>\n\n\n<p>I believe the problem is that we do not count matches that are in limbo (waiting for the startd to respond) when computing how much of MAX_JOBS_RUNNING is used up:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">    // figure out the number of active shadows. we do this by\n    // adding the number of existing shadows + the number of shadows\n    // queued up to run in the future.\n    CurNumActiveShadows = numShadows + RunnableJobQueue.Length();\n</pre></div>\n\n\n<p>The longer matches stay in limbo, the more likely this race condition is to strike.  This can be a very long time if the startd does not quickly preempt its existing job (e.g. if <code>MaxJobRetirementTime</code> is being used or if the KILL expression allows jobs to take a long time to do a graceful shutdown).\n\n</p><p>If this theory is correct, then this appears to be a very old bug.  The code fragment above dates back to 2002 if not earlier.\n\n</p><p>There are two ways to fix this problem:\n\n</p><p></p><ol>\n<li>Add num_pending_startd_contacts and <code>startdContactQueue.Length()</code> to <code>CurNumActiveShadows</code>.\n\n<p></p></li><li>Get rid of <code>CurNumActiveShadows</code> and use <code>matches-&gt;getNumElements()</code> instead.\n</li></ol>\n\n<p>I prefer the second option, because it is more direct.  This same technique should be used in the preemption code so that the two are in sync.  (Currently, the preemption code uses a slightly different formula and is not always consistent with the formula used during negotiation.)  This method would prevent us from falling into the same race condition on the other end if we ever add the ability to hold onto an idle match for a short time after a job finishes (no shadow, no job in the runnable queue, but we probably shouldn't try to get more resources when the sum of busy and idle matches that we already have adds up to MAX_JOB_RUNNING).\n\n</p><p>It should be noted that the second option would change the behavior of MAX_JOBS_RUNNING to only apply to jobs with matches.  Currently, it also applies to local and scheduler jobs.  Therefore, in the stable series, it seems that we should go with the first option.  In the developer series, stronger medicine should be considered.  See <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=642\" onclick=\"get_ticket_and_populate_wrapper('642'); return false;\" title=\"Reconsider MAX_JOBS_RUNNING\">#642</a></span> for other ideas.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-18 16:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25294\">[25294]</a></span>: Documented fix to MAX_JOBS_RUNNING race condition. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1217\" onclick=\"get_ticket_and_populate_wrapper('1217'); return false;\" title=\"race condition in MAX_JOBS_RUNNING accounting\">#1217</a></span>  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Feb-17 20:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=17265\">[17265]</a></span>: Corrected the check for MAX_JOBS_RUNNING in the negotiation loop. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1217\" onclick=\"get_ticket_and_populate_wrapper('1217'); return false;\" title=\"race condition in MAX_JOBS_RUNNING accounting\">#1217</a></span> Previously, it did not count jobs that have been matched but where the match is in limbo while waiting for the startd to accept the request for the claim.  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Feb-17 20:29", "status": "resolved", "created": "2010-Feb-15 13:36", "fixed_version": "2010-Feb-15 13:36", "broken_version": "v070401", "priority": "4", "subsystem": "", "assigned_to": "danb", "derived_from": "", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "dan@hep.wisc.edu,burt@fnal.gov", "due_date": ""}