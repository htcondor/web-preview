{"id": 422, "title": "Ticket #422: Fetch hook broken on Windows.", "description": "<blockquote>\nFrom: <a class=\"external\" href=\"https://bugzilla.redhat.com/show_bug.cgi?id=497895\">https://bugzilla.redhat.com/show_bug.cgi?id=497895</a>\n\n<p>Description of problem:\n\n</p><p>A simple fetch hook that does \"exit 0\" on Windows will run a number of times\nand then block the startd. The result is the startd is killed and restarted by\nthe master, which starts the cycle again. While hung the startd does not\nadvertise itself and is not responsive to condor_status -direct.\n\n</p><p>Version-Release number of selected component (if applicable):\n\n</p><p>7.2.2\n\n</p><p>How reproducible:\n\n</p><p>100%\n\n</p><p>Additional info:\n\n</p><p></p><ul>\n<li>It is presume that this is related to pipe closing code, and potentially fast\npid re-use on Windows.  It may also be a timing problem, wherein the hook exists, closes its fds before the call to DaemonCore::PidEntry::pipeFullWrite(), with then fails.\n\n<p></p></li><li>Looks like Ian Chesal and friends on condor-users <a class=\"external\" href=\"https://lists.cs.wisc.edu/archive/condor-users/2009-August/msg00096.shtml\">have gathered up additional information on this problem</a> (or a very closely related one).</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2009-May-14 12:28:36 by burnett:</em> <br/>\n\nProblem break down:\n\n<p></p><ul>\n<li>Fetch Work code creates a <code>HookClient</code> object with pipes to capture input, output, etc. if requested.  The fact that it creates a pipe to capture stdin is most important to us.\n</li><li>The registration of the stdin pipe calls <code>PipeEnd::set_registered()</code> and <code>PipeEnd::set_watched()</code>; which is to say, the pid watching code in <code>daemonCore</code> will monitor the pipe's state.\n</li><li>The pipe watching code, now in control, first calls <code>ReadPipeEnd::pre_wait()</code> to \"simulate the semantics of select\" by starting asynchronous reading on the pipe (returning an event hadle that can be monitored for a signal--used in place of a process or thread handle by the pid watcher).\n</li><li>This is quickly followed by a call to <code>ReadPipeEnd::post_wait()</code> which finishes any outstanding i/o and sets a signal to reflect the fact that it is no longer managed by the pid watcher.\n</li><li>At this point, we see the hook client completing its work (signals are handled before pipes, but in this case, the signal is dispatched after the signal handling has been done [so it gets caught on the next pump of <code>DaemonCore::Driver()</code>).\n</li><li>Instead of the pipes being cleaned up at this point, we see a call to <code>ReadPipeEnd::io_ready()</code>, wich returns <code>true</code> since by this point all reading is complete.  Unfortunately, at this point in the code this return value is interpreted as if to mean that the pipe is also ready to be read from.  (The semantics of this seem broken in this case, as it seems this call now has a double meaning: i.e. that no, there is no outstanding i/o or an error, and that yes, this pipe can continue to be read from [even if the pipe has signaled to pid watcher and told it that there is nothing left to read.].)\n</li><li>Since the state of the <code>ReadPipeEnd</code> object contains no error (because the <code>ReadPipeEnd::post_wait()</code>, called above, succeeds), another call to the pipe handler is performed, due to the <code>ReadPipeEnd::io_ready()</code> returning the affirmative.\n</li><li>After the pipe handler is called in <code>DaemonCore::Driver()</code> the pipe is once again added to the pid watcher, since the pipe has not been closed by its handler.\n</li><li>Finally, the process reaper calls the pipe handler one last time and tries to close the pipe.  This close attempt calls <code>pipeHandler()</code>, then <code>DaemonCore::Close_Pipe()</code>, then <code>DaemonCore::Cancel_Pipe()</code>, which hangs on <code>PipeEnd::cancel()</code> because it is still being watched by the pid watcher thread.\n</li></ul>\n\n<p></p><hr/>\n<em>2009-May-14 12:31:15 by burnett:</em> <br/>\n\nTo reproduce the problem, add the following <code>condor_config</code> entries:\n\n<p></p><pre>  STARTD_JOB_HOOK_KEYWORD = BROKEN\n  BROKEN_HOOK_DIR = c:/condor/hooks\n  BROKEN_HOOK_FETCH_WORK = $(BROKEN_HOOK_DIR)/fetch.bat\n  FETCHWORKDELAY = 0\n</pre>\n\n<p>Where <code>fetch.bat</code> contains one line:\n\n</p><p></p><pre>  @exit 0\n</pre>\n\n<p>Restart Condor and tail the startd log file.\n\n</p><p></p><hr/>\n<em>2009-Aug-14 12:31:15 by rrati:</em> <br/>\n\n\n<p>The <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/71a4491eb19f2dbce5dd2e3c2502921e689c52e6\">[14601]</a></span> changes breaks job hooks in the startd/starter for\nhooks that are started, but not really cared about (reply &amp; status\nhooks).  The startd/starter fires off those hooks but doesn't care about\nthe output of the hook.  With <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/71a4491eb19f2dbce5dd2e3c2502921e689c52e6\">[14601]</a></span>, the stdin\npipe is being closed when the <span class=\"quote\">HookClient</span> is deleted which prevents the\ndata actually making it to the hook's stdin.\n\n</p><p>Should we should roll back the changes from this commit?\n\n</p><p></p><hr/>\n<em>2009-Aug-14 17:09:29 by tannenba:</em> <br/>\n\nHi Rob! Couple quick questions w/o fully context switching to look at the code involved and swapping back in all the context needed to be authoritative, so sorry if these questions are ignorant:\n\n<p></p><ol>\n<li>Without looking closely at the code, if we revert <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/71a4491eb19f2dbce5dd2e3c2502921e689c52e6\">[14601]</a></span>, aren't handles/descriptors being leaked?\n\n<p></p></li><li>How does data not making it to the stdin of the hook \"break\" the hook?  Shouldn't the hook just go away if stdin is closed out on it before it can read what it needs?\n</li></ol>\n\n<p></p><hr/>\n<em>2009-Aug-17 08:51:55 by rrati:</em> <br/>\n\n1) As I was looking into what was happening with the hooks, I was noticing that without the changes in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=422\" onclick=\"get_ticket_and_populate_wrapper('422'); return false;\" title=\"Fetch hook broken on Windows.\">#422</a></span> it looked like fds were being leaked in the reply hook case.  It's likely the same story with the status hook as well.  I also need to dig into the fd situation more in these cases.\n\n<p>2) Data not making it to the hook \"breaks\" the hook from the usability perspective.  If no data makes it to the hook stdin, then any hook that relies on that data will no longer work.  The documentation calls out the data that should be available to the hooks in their stdins and without that data, there's really no way to tell which job a hook is being called for.\n\n</p><p></p><hr/>\n<em>2009-Aug-17 09:00:36 by tannenba:</em> <br/>\n\nWhile I am sympathetic to the hook usability factor, I guess the leaking of resources by daemons/services worries me more.  Seems like we need to dig a bit deeper before simply reverting <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/71a4491eb19f2dbce5dd2e3c2502921e689c52e6\">[14601]</a></span>.  Thanks.\n\n<p></p><hr/>\n<em>2009-Aug-17 10:01:12 by rrati:</em> <br/>\n\nFile descriptors are not being leaked.  pipeFullWrite will close the stdin pipe when all data has been written to the stdin pipe or there is an error writing to the pipe.  All job hooks have data passed to the stdin, so there is no need to close the stdin pipe in any other place.  All the changes for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=422\" onclick=\"get_ticket_and_populate_wrapper('422'); return false;\" title=\"Fetch hook broken on Windows.\">#422</a></span> should be reverted.\n\n<p></p><hr/>\n<em>2009-Aug-17 10:17:20 by tannenba:</em> <br/>\n\nRight then. <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/71a4491eb19f2dbce5dd2e3c2502921e689c52e6\">[14601]</a></span> reverted.\n\n<p></p><hr/>\n<em>2009-Sep-04 09:51:20 by ichesal:</em> <br/>\n\nBump. Any updates on this guys? I've got about 1 more week where I can hold out and then...well...I'm looking at a full system re-architect. We bet the farm on hooks working in 7.2.x. Thanks.\n\n<p></p><hr/>\n<em>2009-Sep-15 14:51:13 by pmackinn:</em> <br/>\n\nReproducibility notes:\n\n<p></p><ul>\n<li>Multi-core seems more immune to problems (I have an 8-way box) to the point where my test hook will randomly render the expected output. In other words, pipes can get closed (not just stdin) before the fetched hook job is completed.\n\n<p></p></li><li>NUM_CPUS = 1 with default logging and a 30 sec fetch rate has things running smoothly save for one empty hook output out of 300.\n\n<p></p></li><li>As Ben noted, everything gets stuck in PipeEnd::cancel() even though I have tried to cancel the pipe whenever we hit EINVAL inside pipeWriteFull.\n</li></ul>\n\n<p></p><hr/>\n<em>2009-Sep-15 17:31:08 by pmackinn:</em> <br/>\n\nTesting update:\n\n<p></p><ul>\n<li>USE_PROCD = False and NUM_CPUS = 1 increases stability further. Fetch jobs were continuously processed for 2 hours and startd was not hung on master shutdown.\n</li></ul>\n\n<p></p><hr/>\n<em>2009-Oct-15 18:17:13 by tannenba:</em> <br/>\n\nThink I found the problem: a deadlock between the startd main thread and daemonCore pidwatcher thread.  Pushed a patch to V7_4_0-branch.  Startd seems much happier now with job hook on Win32.\n\n<p></p><hr/>\n<em>2009-Oct-16 09:51:52 by pmackinn:</em> <br/>\n\nThe hang seems to be fixed. However, I still see some empty fetch output files in my test on an 8-way XP box. My test is a simple perl script that outputs a job ad to invoke ipconfig.exe.\n\n<p>I vary my test configuration using combinations of these values:\n\n</p><p>#USE_PROCD = False<br/>\n\n#PRIVSEP_ENABLED = False<br/>\n\n#NUM_CPUS = 1...8<br/>\n\n#FetchWorkDelay = ifThenElse(State == \"Claimed\" &amp;&amp; Activity == \"Idle\", 0, 30)<br/>\n\n\n</p><p>As you increase the number of CPUs there is an increased likelihood of seeing an empty output file (say above 4 slots).\n\n</p><p></p><hr/>\n<em>2009-Oct-16 14:09:30 by tannenba:</em> <br/>\n\nHi pmackinn --\n\n<p>I don't know what you are talking about re your above remark.  What precisely do you mean by <em>\"I still see some empty fetch output files\"</em> ?\n\n</p><p>Do you mean that your fetch hook writes to stdout but that is not picked up by the startd?</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=1360\" onclick=\"get_ticket_and_populate_wrapper('1360'); return false;\" title=\"startd hangs when fetch hook reads stdin a certain way\">#1360</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nstartd hangs when fetch hook reads stdin a certain way</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Oct-16 13:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/87d361ae0bb793f8d14c353abfe50fd85dba604d\">[16104]</a></span>: Fix deadlock bug that halts the startd when using Job Hook plugins (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=422\" onclick=\"get_ticket_and_populate_wrapper('422'); return false;\" title=\"Fetch hook broken on Windows.\">#422</a></span>) The problem is the windows pipe code blocked the main thread waiting for the pid watcher thread to close its handles to the pipe, but the pid watcher thread could be blocked waiting for the main thread to release the beloved \"big\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Oct-15 18:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/28b914943243cdf6cee12ff686f76a62393a8081\">[16084]</a></span>: Fix deadlock bug that halts the startd when using Job Hook plugins (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=422\" onclick=\"get_ticket_and_populate_wrapper('422'); return false;\" title=\"Fetch hook broken on Windows.\">#422</a></span>) The problem is the windows pipe code blocked the main thread waiting for the pid watcher thread to close its handles to the pipe, but the pid watcher thread could be blocked waiting for the main thread to release the beloved \"big\u00a0[...]\n (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Aug-17 10:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a1528a4def7a7159bf8c00db4f266c3e1d511fd7\">[15363]</a></span>: Revert \"Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=422\" onclick=\"get_ticket_and_populate_wrapper('422'); return false;\" title=\"Fetch hook broken on Windows.\">#422</a></span>: the stdin of a job hook is explicitly closed when a hook\" This patch was closing stdin prematurely, preventing data from making it to the hook's stdin. This reverts commit 71a4491eb19f2dbce5dd2e3c2502921e689c52e6.  (By Todd Tannenbaum )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Apr-29 17:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/71a4491eb19f2dbce5dd2e3c2502921e689c52e6\">[14601]</a></span>: Ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=422\" onclick=\"get_ticket_and_populate_wrapper('422'); return false;\" title=\"Fetch hook broken on Windows.\">#422</a></span>: the stdin of a job hook is explicitly closed when a hook terminates or is deleted by the hook manager.  (By Ben Burnett )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2010-Oct-06 14:39", "status": "resolved", "created": "2009-Apr-27 14:36", "fixed_version": "2009-Apr-27 14:36", "broken_version": "v070202", "priority": "1", "subsystem": "Win32", "assigned_to": "tannenba", "derived_from": "", "creator": "burnett", "rust": "", "customer_group": "other", "visibility": "public", "notify": "matt@cs.wisc.edu, rrati@redhat.com, ichesal@altera.com, pmackinn@redhat.com", "due_date": ""}