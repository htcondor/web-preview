{"id": 5442, "title": "Ticket #5442: grid manager and EC2 GAHP hang under load.", "description": "<blockquote>\n<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=FermiLab\" title=\"Fermi Lab\">FermiLab</a></span> has recently started seeing a problem where the grid manager and EC2 GAHP both appear to hang.  (They've recently increased the scale of their EC2 pool.)  According to strace, the grid manager is stuck in a tight loop, alternating between read() calls to two different FDs, both of which return -1 / EAGAIN.\n\n<p>The stack traces obtained from three different EC2 GAHP core files follow.\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">Thread 3 (Thread 0x7fb2abb1a7e0 (LWP 3764516)):\n#0  0x00000037684f80ce in __lll_lock_wait_private () from /lib64/libc.so.6\n#1  0x000000376847d349 in _L_lock_10151 () from /lib64/libc.so.6\n#2  0x000000376847ac33 in malloc () from /lib64/libc.so.6\n#3  0x000000376a0bd0bd in operator new(unsigned long) ()\n   from /usr/lib64/libstdc++.so.6\n#4  0x000000376a09c3c9 in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) () from /usr/lib64/libstdc++.so.6\n#5  0x000000376a09d19b in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) ()\n   from /usr/lib64/libstdc++.so.6\n#6  0x000000376a09d5ec in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve(unsigned long) () from /usr/lib64/libstdc++.so.6\n#7  0x000000000041c140 in PipeBuffer::GetNextLine() ()\n#8  0x000000000041ae64 in IOProcess::stdinPipeHandler() ()\n#9  0x000000000041b7dc in main ()\n\nThread 2 (Thread 0x7fb2a954f700 (LWP 3764519)):\n#0  0x000000376880e2e4 in __lll_lock_wait () from /lib64/libpthread.so.0\n#1  0x00000037688110ad in _L_cond_lock_886 () from /lib64/libpthread.so.0\n#2  0x0000003768810f87 in __pthread_mutex_cond_lock ()\n   from /lib64/libpthread.so.0\n#3  0x000000376880bae6 in pthread_cond_timedwait@@GLIBC_2.3.2 ()\n   from /lib64/libpthread.so.0\n#4  0x000000000041a88e in ?? ()\n#5  0x0000003768807a51 in start_thread () from /lib64/libpthread.so.0\n#6  0x00000037684e896d in clone () from /lib64/libc.so.6\n\nThread 1 (Thread 0x7fb2aacfe700 (LWP 3764518)):\n#0  0x00000037684f80ce in __lll_lock_wait_private () from /lib64/libc.so.6\n#1  0x000000376847cf7e in _L_lock_5746 () from /lib64/libc.so.6\n#2  0x0000003768478a8b in _int_free () from /lib64/libc.so.6\n#3  0x00007fb2a978d332 in ?? () from /usr/lib64/libnsspem.so\n#4  0x00007fb2a978035a in ?? () from /usr/lib64/libnsspem.so\n#5  0x00007fb2a977d76b in ?? () from /usr/lib64/libnsspem.so\n#6  0x00007fb2a9782b99 in ?? () from /usr/lib64/libnsspem.so\n#7  0x00007fb2a97897f2 in ?? () from /usr/lib64/libnsspem.so\n#8  0x0000003ca4c487ca in ?? () from /usr/lib64/libnss3.so\n#9  0x0000003ca4c48a63 in PK11_CreateGenericObject ()\n   from /usr/lib64/libnss3.so\n#10 0x0000003ca7040460 in ?? () from /usr/lib64/libcurl.so.4\n#11 0x0000003ca70405e7 in ?? () from /usr/lib64/libcurl.so.4\n#12 0x0000003ca7041fec in ?? () from /usr/lib64/libcurl.so.4\n#13 0x0000003ca7039295 in Curl_ssl_connect () from /usr/lib64/libcurl.so.4\n#14 0x0000003ca7017aab in Curl_http_connect () from /usr/lib64/libcurl.so.4\n#15 0x0000003ca701e252 in Curl_protocol_connect () from /usr/lib64/libcurl.so.4\n#16 0x0000003ca70248fc in Curl_connect () from /usr/lib64/libcurl.so.4\n#17 0x0000003ca702c990 in Curl_perform () from /usr/lib64/libcurl.so.4\n#18 0x000000000040ef5f in AmazonRequest::SendRequest() ()\n#19 0x000000000040fd02 in AmazonVMStatusAll::SendRequest() ()\n#20 0x00000000004112b5 in AmazonVMStatusAll::workerFunction(char**, int, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) ()\n#21 0x000000000041a932 in ?? ()\n#22 0x0000003768807a51 in start_thread () from /lib64/libpthread.so.0\n#23 0x00000037684e896d in clone () from /lib64/libc.so.6\n</pre></div>\n\n\n<p></p><div class=\"code\">\n<pre class=\"code\">Thread 3 (Thread 0x7f28588aa7e0 (LWP 3753915)):\n#0  0x00000037684f80ce in __lll_lock_wait_private () from /lib64/libc.so.6\n#1  0x000000376847d349 in _L_lock_10151 () from /lib64/libc.so.6\n#2  0x000000376847ac33 in malloc () from /lib64/libc.so.6\n#3  0x000000376a0bd0bd in operator new(unsigned long) ()\n   from /usr/lib64/libstdc++.so.6\n#4  0x000000376a09c3c9 in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) () from /usr/lib64/libstdc++.so.6\n#5  0x000000376a09d19b in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) ()\n   from /usr/lib64/libstdc++.so.6\n#6  0x000000376a09d5ec in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve(unsigned long) () from /usr/lib64/libstdc++.so.6\n#7  0x000000000041c140 in PipeBuffer::GetNextLine() ()\n#8  0x000000000041ae64 in IOProcess::stdinPipeHandler() ()\n#9  0x000000000041b7dc in main ()\n\nThread 2 (Thread 0x7f2857a8e700 (LWP 3753917)):\n#0  0x000000376880e2e4 in __lll_lock_wait () from /lib64/libpthread.so.0\n#1  0x00000037688110ad in _L_cond_lock_886 () from /lib64/libpthread.so.0\n#2  0x0000003768810f87 in __pthread_mutex_cond_lock ()\n   from /lib64/libpthread.so.0\n#3  0x000000376880bae6 in pthread_cond_timedwait@@GLIBC_2.3.2 ()\n   from /lib64/libpthread.so.0\n#4  0x000000000041a88e in ?? ()\n#5  0x0000003768807a51 in start_thread () from /lib64/libpthread.so.0\n#6  0x00000037684e896d in clone () from /lib64/libc.so.6\n\nThread 1 (Thread 0x7f285848f700 (LWP 3753916)):\n#0  0x00000037684f80ce in __lll_lock_wait_private () from /lib64/libc.so.6\n#1  0x000000376847cf7e in _L_lock_5746 () from /lib64/libc.so.6\n#2  0x0000003768478a8b in _int_free () from /lib64/libc.so.6\n#3  0x00007f285651d332 in ?? () from /usr/lib64/libnsspem.so\n#4  0x00007f285651035a in ?? () from /usr/lib64/libnsspem.so\n#5  0x00007f285650d76b in ?? () from /usr/lib64/libnsspem.so\n#6  0x00007f2856512b99 in ?? () from /usr/lib64/libnsspem.so\n#7  0x00007f28565197f2 in ?? () from /usr/lib64/libnsspem.so\n#8  0x0000003ca4c487ca in ?? () from /usr/lib64/libnss3.so\n#9  0x0000003ca4c48a63 in PK11_CreateGenericObject ()\n   from /usr/lib64/libnss3.so\n#10 0x0000003ca7040460 in ?? () from /usr/lib64/libcurl.so.4\n#11 0x0000003ca70405e7 in ?? () from /usr/lib64/libcurl.so.4\n#12 0x0000003ca7041fec in ?? () from /usr/lib64/libcurl.so.4\n#13 0x0000003ca7039295 in Curl_ssl_connect () from /usr/lib64/libcurl.so.4\n#14 0x0000003ca7017aab in Curl_http_connect () from /usr/lib64/libcurl.so.4\n#15 0x0000003ca701e252 in Curl_protocol_connect () from /usr/lib64/libcurl.so.4\n#16 0x0000003ca70248fc in Curl_connect () from /usr/lib64/libcurl.so.4\n#17 0x0000003ca702c990 in Curl_perform () from /usr/lib64/libcurl.so.4\n#18 0x000000000040ef5f in AmazonRequest::SendRequest() ()\n#19 0x0000000000412d81 in AmazonVMStopSpot::workerFunction(char**, int, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) ()\n#20 0x000000000041a932 in ?? ()\n#21 0x0000003768807a51 in start_thread () from /lib64/libpthread.so.0\n#22 0x00000037684e896d in clone () from /lib64/libc.so.6\n</pre></div>\n\n\n<p></p><div class=\"code\">\n<pre class=\"code\">Thread 3 (Thread 0x7fd2fe90a7e0 (LWP 3796654)):\n#0  0x00000037684f80ce in __lll_lock_wait_private () from /lib64/libc.so.6\n#1  0x000000376847d349 in _L_lock_10151 () from /lib64/libc.so.6\n#2  0x000000376847ac33 in malloc () from /lib64/libc.so.6\n#3  0x000000376a0bd0bd in operator new(unsigned long) ()\n   from /usr/lib64/libstdc++.so.6\n#4  0x000000376a09c3c9 in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) () from /usr/lib64/libstdc++.so.6\n#5  0x000000376a09d19b in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) ()\n   from /usr/lib64/libstdc++.so.6\n#6  0x000000376a09d5ec in std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve(unsigned long) () from /usr/lib64/libstdc++.so.6\n#7  0x000000000041c140 in PipeBuffer::GetNextLine() ()\n#8  0x000000000041ae64 in IOProcess::stdinPipeHandler() ()\n#9  0x000000000041b7dc in main ()\n\nThread 2 (Thread 0x7fd2fdaee700 (LWP 3796656)):\n#0  0x000000376880e2e4 in __lll_lock_wait () from /lib64/libpthread.so.0\n#1  0x00000037688110ad in _L_cond_lock_886 () from /lib64/libpthread.so.0\n#2  0x0000003768810f87 in __pthread_mutex_cond_lock ()\n   from /lib64/libpthread.so.0\n#3  0x000000376880bae6 in pthread_cond_timedwait@@GLIBC_2.3.2 ()\n   from /lib64/libpthread.so.0\n#4  0x000000000041a88e in ?? ()\n#5  0x0000003768807a51 in start_thread () from /lib64/libpthread.so.0\n#6  0x00000037684e896d in clone () from /lib64/libc.so.6\n\nThread 1 (Thread 0x7fd2fe4ef700 (LWP 3796655)):\n#0  0x00000037684f80ce in __lll_lock_wait_private () from /lib64/libc.so.6\n#1  0x000000376847cf7e in _L_lock_5746 () from /lib64/libc.so.6\n#2  0x0000003768478a8b in _int_free () from /lib64/libc.so.6\n#3  0x00007fd2fc56d332 in ?? () from /usr/lib64/libnsspem.so\n#4  0x00007fd2fc56035a in ?? () from /usr/lib64/libnsspem.so\n#5  0x00007fd2fc55d76b in ?? () from /usr/lib64/libnsspem.so\n#6  0x00007fd2fc562b99 in ?? () from /usr/lib64/libnsspem.so\n#7  0x00007fd2fc5697f2 in ?? () from /usr/lib64/libnsspem.so\n#8  0x0000003ca4c487ca in ?? () from /usr/lib64/libnss3.so\n#9  0x0000003ca4c48a63 in PK11_CreateGenericObject ()\n   from /usr/lib64/libnss3.so\n#10 0x0000003ca7040460 in ?? () from /usr/lib64/libcurl.so.4\n#11 0x0000003ca70405e7 in ?? () from /usr/lib64/libcurl.so.4\n#12 0x0000003ca7041fec in ?? () from /usr/lib64/libcurl.so.4\n#13 0x0000003ca7039295 in Curl_ssl_connect () from /usr/lib64/libcurl.so.4\n#14 0x0000003ca7017aab in Curl_http_connect () from /usr/lib64/libcurl.so.4\n#15 0x0000003ca701e252 in Curl_protocol_connect () from /usr/lib64/libcurl.so.4\n#16 0x0000003ca70248fc in Curl_connect () from /usr/lib64/libcurl.so.4\n#17 0x0000003ca702c990 in Curl_perform () from /usr/lib64/libcurl.so.4\n#18 0x000000000040ef5f in AmazonRequest::SendRequest() ()\n#19 0x0000000000412d81 in AmazonVMStopSpot::workerFunction(char**, int, std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;) ()\n#20 0x000000000041a932 in ?? ()\n#21 0x0000003768807a51 in start_thread () from /lib64/libpthread.so.0\n#22 0x00000037684e896d in clone () from /lib64/libc.so.6\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2015-Dec-15 16:56:57 by tlmiller:</em> <br/>\n\nA possible explanation for the grid manager's behavior follows.\n\n<p>The grid manager deliberately creates its pipes to the GAHP with the read side O_NONBLOCK; see condor_gridmanager/gahp-client.cpp:800.\n\n</p><p>In GahpServer::read_argv(), the grid manager calls GahpServer::buffered_read() on the stdout pipe, which in turn calls GahpServer::err_pipe_ready(), which in turn calls DaemonCore::Read_Pipe() on the stderr pipe, which (because of the above) can return EAGAIN.  This is one of the two FDs in the strace loop. After calling err_pipe_ready(), buffered_read() then calls Read_Pipe() on the stdout pipe.  Again, this can return EAGAIN, and is the second of the FDs in the strace loop.  read_argv() surrounds its call to buffered_read() with the following code:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">    for (;;) {\n\n        ASSERT(ibuf &lt; buf_size);\n        //result = daemonCore-&gt;Read_Pipe(m_gahp_readfd, &amp;(buf[ibuf]), 1 );\n        result = buffered_read(m_gahp_readfd, &amp;(buf[ibuf]), 1 );\n\n        /* Check return value from read() */\n        if ( result &lt; 0 ) {     /* Error - try reading again */\n            continue;\n        }\n</pre></div>\n\n\n<p>which of course busy-loops forever, waiting for the GAHP to reply.  This function is, among other places, called from GahpServer::poll() (which, despite the name, is used is asynch mode) to wait for the results of the RESULTS command.\n\n</p><p></p><hr/>\n<em>2015-Dec-15 17:16:52 by tlmiller:</em> <br/>\n\nThe above scenario would be consistent with the GAHP being hung.  It could also be consistent with the GAHP being overworked, except the length of the gap in the log after \"Setting CA path\", which is normally more-or-less immediately followed by \"Response was\".  In the log, there's a seventeen minute gap before the GAHP is restarted.  Even in the unlikely event that the GAHP were busy for that long before it got to the RESULTS command (or whatever the grid manager was waiting for), the log would record what the GAHP was doing, rather than nothing.\n\n<p>Between \"Setting CA path\" and \"Response was\" there is a lock release, a blocking call into libcurl, and a lock acquisition (among other things).\n\n</p><p></p><hr/>\n<em>2015-Dec-15 17:36:40 by tlmiller:</em> <br/>\n\nThis suggests that we actually have two problems: first, that the grid manager can hang because of bad behavior on the GAHP's part; and second, the specific bad behavior of the EC2 GAHP.\n\n<p></p><hr/>\n<em>2015-Dec-16 15:10:58 by jfrey:</em> <br/>\n\nA badly behaved GAHP can cause the gridmanager to hang or EXCEPT(). This is a conscious decision made when these daemons were first developed. It simplifies the error handling in the gridmanager. Think of the GAHP protocol as a weird form of RPC.\n\n<p>As ToddM suggested out-of-band, we could have the gridmanager EXCEPT() if the GAHP doesn't respond in a timely manner (say several seconds). That would us to recover from this type bad GAHP behavior.\n\n</p><p></p><hr/>\n<em>2015-Dec-22 13:41:45 by tlmiller:</em> <br/>\n\nToday we confirmed (thanks, Burt!), by attaching the processes, that the analysis above is correct -- the EC2 GAHP's stack traces don't change at all when taken around process continue/pause pairs (and match the core dumps); and the grid manager's stack traces alternate between buffered_read()/Read_Pipe() and buffered_read()/err_pipe_ready()/Read_Pipe().\n\n<p>I made a patch (last week) for the grid manager to EXCEPT if it takes more than five seconds for the GAHP to reply during the read_argv() function.  This should work around the EC2 GAHP's problem.\n\n</p><p>I also made a patch (last week) for the EC2 GAHP to perform many fewer allocations when reading commands off the pipe.  (If we decide we need to spawn a new worker thread, we still perform many allocations; changing to a thread pool model could be done in a future patch.)\n\n</p><p>Having confirmed the analysis that led to those patches, I've provided the patched binaries to Fermi, who will be testing them in the near future.\n\n</p><p>If the GAHP patches are effective in reducing the frequency of the problem, we should examine the other GAHPs and determine if they could benefit from the same change(s).  (Perhaps even formalize a \"GAHPCore\".)\n\n</p><p>Burt also confirmed that Fermi's tests were able to proceed if the GRIDMANAGER_NOT_RESPONDING_TIMEOUT were set low enough.\n\n</p><p></p><hr/>\n<em>2016-Feb-02 15:39:45 by tlmiller:</em> <br/>\n\nMerged to 8.4 after successful Fermi testing.\n\n<p></p><hr/>\n<em>2016-Feb-03 14:26:27 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p></p><ul>\n<li>The idea of glibc's memory allocation not being thread-safe is scary. Since the change to avoid calling the default new/delete helps the problem, I won't object to it.\n\n<p></p></li><li>The timeout code in the gridmanager for reading a response from the GAHP doesn't handle initial banner the GAHP prints on startup.\n</li></ul>\n\n<p></p><hr/>\n<em>2016-Feb-03 14:40:13 by tlmiller:</em> <br/>\n\nCreated ticket <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=5502\" onclick=\"get_ticket_and_populate_wrapper('5502'); return false;\" title=\"Extend GAHP timeout to include initial start-up banner.\">#5502</a></span>.\n\n<p></p><hr/>\n<em>2016-Feb-03 14:43:46 by tlmiller:</em> <br/>\n\nIt's possible that some wacky combination of the presence or absence of the -pthreads flag when compiling the ec2_gahp, or when OpenSSL and/or libcurl were compiled, is causing this problem and that it's therefore technically a usage error; but since I haven't been able to reproduce it, I think we just have to leave well enough alone for now.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6119\" onclick=\"get_ticket_and_populate_wrapper('6119'); return false;\" title=\"Incorrect usage of Get_Pipe_FD\">#6119</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nIncorrect usage of Get_Pipe_FD</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Feb-03 14:27</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=47548\">[47548]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4658\" onclick=\"get_ticket_and_populate_wrapper('4658'); return false;\" title='EC2 jobs \"running\" without corresponding instance.'>#4658</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5442\" onclick=\"get_ticket_and_populate_wrapper('5442'); return false;\" title=\"grid manager and EC2 GAHP hang under load.\">#5442</a></span>) Add release notes for this branch. Document new configuration knob.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jan-20 15:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=47485\">[47485]</a></span>: Revise code for gridmanager to abort when gahp hung. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5442\" onclick=\"get_ticket_and_populate_wrapper('5442'); return false;\" title=\"grid manager and EC2 GAHP hang under load.\">#5442</a></span> Added config knob GRIDMANAGER_GAHP_RESPONSE_TIMEOUT. Use select() on unix and Sleep() on windows to avoid a tight spin lock.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jan-07 15:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=47442\">[47442]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5442\" onclick=\"get_ticket_and_populate_wrapper('5442'); return false;\" title=\"grid manager and EC2 GAHP hang under load.\">#5442</a></span>) Forgot to expand a static buffer I'd shrunk for testing purposes.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jan-07 11:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=47441\">[47441]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5442\" onclick=\"get_ticket_and_populate_wrapper('5442'); return false;\" title=\"grid manager and EC2 GAHP hang under load.\">#5442</a></span>) Made the static buffers large enough to be useful.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Dec-16 16:23</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=46603\">[46603]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5442\" onclick=\"get_ticket_and_populate_wrapper('5442'); return false;\" title=\"grid manager and EC2 GAHP hang under load.\">#5442</a></span>) Remove the per-rqeuest memory allocation in the EC2 GAHP by using static buffers. (Hopefully they're large enough....) Have the grid manager except if its expectation for a response from the GAHP is not met in five seconds. Caution: horrible hacks within.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "incident", "last_change": "2016-Mar-14 11:55", "status": "resolved", "created": "2015-Dec-15 16:45", "fixed_version": "2015-Dec-15 16:45", "broken_version": "", "priority": "1", "subsystem": "Grid", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "fermi", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, tiradani@fnal.gov, burt@fnal.gov, timm@fnal.gov", "due_date": ""}