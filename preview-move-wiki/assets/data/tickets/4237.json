{"id": 4237, "title": "Ticket #4237: DaemonCommandProtocol isblocking", "description": "<blockquote>\nIn DaemonCommandProtocol::ReadCommand, we have:\n\n<p></p><div class=\"verbatim\">\n<pre>        // read in the command from the sock with a timeout value of just 1 second,\n        // since we know there is already some data waiting for us.\n        m_sock-&gt;timeout(1);\n        m_result = m_sock-&gt;code(m_req);\n</pre></div>\n\n\n<p>While the comment is technically correct (there is indeed data), the original author forgot that Sock::code reads from the socket until an EOM is sent.  For some RPCs, this may be a significant amount of data; in some cases (the CMS glideinWMS pools), even a small amount of data may cause us to hit the timeout.  If the timeout is hit, the socket gets closed, causing a significant amount of network churn (assuming updates are sent via TCP).\n\n</p><p>In <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=4139\" onclick=\"get_ticket_and_populate_wrapper('4139'); return false;\" title=\"Non-blocking collector\">#4139</a></span>, as a part of the non-blocking collector work, I posted a branch that includes a non-blocking read command for CEDAR.  With that, correctly handling this case is relatively straightforward.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-Mar-13 11:23:29 by tannenba:</em> <br/>\n\nHi Brian, do we have any data on how often this occurs in CMS/glidein?  Are we talking a few times per minute, per hour, per day?\n\n<p></p><hr/>\n<em>2014-Mar-13 12:15:53 by bbockelm:</em> <br/>\n\nHi,\n\n<p>I count 200k instances of disconnects in the last 2-ish days (logs rollover on size, not time, so it's just an estimate).\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2014-Mar-16 22:26:24 by bbockelm:</em> <br/>\n\nPushed as branch V8_1-gt4237.\n\n<p>Todd, can you please review?\n\n</p><p></p><hr/>\n<em>2014-Mar-26 14:56:12 by bbockelm:</em> <br/>\n\nHere's an example message from the collector:\n\n<p></p><div class=\"verbatim\">\n<pre>03/25/14 17:30:10 condor_read(): timeout reading 4075 bytes from &lt;194.67.74.194:43539&gt;.\n03/25/14 17:30:10 Buf::read(): condor_read() failed\n03/25/14 17:30:10 IO: Packet read failed: read -1 of 4075\n03/25/14 17:30:10 DaemonCore: Can't receive command request from 194.67.74.194 (perhaps a timeout?)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2014-Mar-26 17:22:10 by tannenba:</em> <br/>\n\nHi Brian,\n\n<p>Little concerned after looking over <span class=\"chng\"><a href=\"chngview?cn=39640\">[39640]</a></span>. This commit implies that condor_read() returns 0 when a read would block (makes sense), but several other places in the code from other commits still assume that condor_read will return -3 when it blocks (which it looks like it never does).  What was your thinking moving forward?\n\n</p><p>A few places where callsites to condor_read() are now expecting a different interface than is implemented:\n</p><div class=\"code\">\n<pre class=\"code\">C:\\home\\tannenba\\condor\\CONDOR_SRC\\src\\condor_io&gt;grep \"\\-3\" *.cpp .\nbuffers.cpp:    if (nr &lt; 0 &amp;&amp; (!non_blocking || nr != -3)) {\nbuffers.cpp:            if (!non_blocking || nr != -3) {\ncondor_rw.cpp: * Returns &lt; 0 on failure.  -1 = general error, -2 = peer closed socket, -3 = read would block.\nreli_sock.cpp:        if ( retval == -3 ) {   // -3 means that the read would have blocked; 0 bytes were read\nreli_sock.cpp:          if (p_sock-&gt;is_non_blocking() &amp;&amp; (tmp_len == -3 || tmp_len &gt;= 0)) {\n</pre></div>\n\n\n<p></p><hr/>\n<em>2014-Mar-29 17:14:03 by tannenba:</em> <br/>\n\nLatest round of changes looks good, thanks!\n\n<p>Cherry-picked into V8_1_5-branch.\n\n</p><p></p><hr/>\n<em>2014-Apr-01 08:34:34 by bbockelm:</em> <br/>\n\nTo record some knowledge on the ticket that we discussed already on the phone:\n\n<p>This improvement, while important, isn't as earth-shattering as it might first appear.  This will make sure the first CEDAR is completely buffered before progressing.  However, in most cases, the first CEDAR message is the security handshake.  This means that the first message of the security handshake may be non-blocking but the payload could still block.\n\n</p><p>If the command socket is reused, there is no handshake and there is no blocking for the payload after this patch is applied.  The two currently-existing places in the code where command sockets are reused are for shadow-&gt;schedd communication and for daemon-&gt;collector updates over DC.  Testing has confirmed that these are now appropriately non-blocking.\n\n</p><p>ToddT is planning a follow-up ticket to provide a \"peek\" functionality for CEDAR to allow us to make the payloads non-blocking.</p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4368\" onclick=\"get_ticket_and_populate_wrapper('4368'); return false;\" title=\"Checksum always fails on non-blocking read for ReliSock\">#4368</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nChecksum always fails on non-blocking read for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ReliSock\" title=\"Reli Sock\">ReliSock</a></span></td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4370\" onclick=\"get_ticket_and_populate_wrapper('4370'); return false;\" title=\"Memory leak when reusing cached collector connection\">#4370</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nMemory leak when reusing cached collector connection</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-15 13:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39950\">[39950]</a></span>: add 8.1.5 version history item for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-29 16:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39763\">[39763]</a></span>: Correctly handle non-blocking mode. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span> Committer: Todd Tannenbaum  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-29 16:44</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39762\">[39762]</a></span>: Correct return code checks and docs for a blocking read. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span> Committer: Todd Tannenbaum  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-29 16:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39761\">[39761]</a></span>: Fixes for default argument use of condor_read. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span> Committer: Todd Tannenbaum  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-29 16:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39760\">[39760]</a></span>: Make <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCommandProtocol\" title=\"Daemon Command Protocol\">DaemonCommandProtocol</a></span> non-blocking. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span> Committer: Todd Tannenbaum  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-28 10:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39747\">[39747]</a></span>: Correctly handle non-blocking mode. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-28 10:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39746\">[39746]</a></span>: Correct return code checks and docs for a blocking read. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-16 22:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39640\">[39640]</a></span>: Fixes for default argument use of condor_read. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Mar-16 21:45</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39638\">[39638]</a></span>: Make <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=DaemonCommandProtocol\" title=\"Daemon Command Protocol\">DaemonCommandProtocol</a></span> non-blocking. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4237\" onclick=\"get_ticket_and_populate_wrapper('4237'); return false;\" title=\"DaemonCommandProtocol isblocking\">#4237</a></span>  (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2014-Apr-16 11:41", "status": "resolved", "created": "2014-Mar-02 14:40", "fixed_version": "2014-Mar-02 14:40", "broken_version": "", "priority": "3", "subsystem": "Libs", "assigned_to": "tannenba", "derived_from": "#4136", "creator": "bbockelm", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "bbockelm@cse.unl.edu, isfiligoi@ucsd.edu, tannenba@cs.wisc.edu", "due_date": ""}