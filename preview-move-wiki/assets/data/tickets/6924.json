{"id": 6924, "title": "Ticket #6924: Python Bindings: cluster handle objects", "description": "<blockquote>\nRight now, the Python bindings API is mostly built from the point of view of a pool admin: when you want to submit, query, act, or edit, you go to the <code>Schedd</code>. This makes perfect sense for admins because they don't own any particular cluster of jobs, and they are aware of the topology of the pool.\n\n<p>However, users don't typically care about the <code>Schedd</code>. They care about submitting a cluster of jobs and then monitoring its progress, possibly editing its attributes or querying it. The first half of this was made much easier by the introduction of the <code>Submit</code> object in the bindings. This ticket addresses the second half (query, act, edit) by having a rich <code>Cluster</code> object. This object knows which <code>Schedd</code> its jobs live on and implements <code>query</code>, <code>act</code> (and possibly specialized <code>hold</code>, <code>release</code>, etc.), and <code>edit</code> methods that automatically target only the <code>clusterid</code> the jobs belong to.\n\n</p><p>Depending on exactly how much (if any) of the existing API we want to break, there may be a variety of ways to get a <code>Cluster</code>:\n\n</p><p>1. The existing <code>Submit.queue</code> and <code>Submit.queue_with_itemdata</code> methods could return <code>Cluster</code>. This can be done without breaking <code>queue_with_itemdata</code> by pulling the <code>SubmitResult</code> methods up into the <code>Cluster</code> as well, but it would break users of <code>queue</code>.\n2. Introduce a new <code>Submit.submit</code> method which has the semantics of <code>queue_with_itemdata</code>, but returns a <code>Cluster</code>.\n3. Ask a <code>Schedd</code> for a handle to a cluster: <code>Schedd.handle(clusterid)</code>.\n4. Construct it directly: <code>Cluster(clusterid, schedd)</code>.\n\n</p><p>(All names up for debate...)\n\n</p><p>All of this will be implemented via pure-Python wrappers over the existing C++ bindings code. One change may be necessary in the underlying bindings: it would be useful for a <code>Transaction</code> to store and expose which <code>Schedd</code> it was created from. This could maybe be implemented in the Python wrapper as well, although it would probably be less stable.</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Feb-21 14:38:05 by karpel:</em> <br/>\n\nAbandoned in favor of <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=6926\" onclick=\"get_ticket_and_populate_wrapper('6926'); return false;\" title=\"Python Bindings: Easy Submit and Cluster Handle\">#6926</a></span></blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2019-Feb-21 14:38", "status": "abandoned", "created": "2019-Feb-20 19:54", "fixed_version": "2019-Feb-20 19:54", "broken_version": "", "priority": "3", "subsystem": "PythonBinding", "assigned_to": "karpel", "derived_from": "#6907", "creator": "karpel", "rust": "", "customer_group": "other", "visibility": "public", "notify": "karpel@wisc.edu,jpatton@cs.wisc.edu,tannenba@cs.wisc.edu,bbockelman@morgridge.org,johnkn@cs.wisc.edu,tlmiller@cs.wisc.edu", "due_date": ""}