{"id": 2240, "title": "Ticket #2240: RFE: secondary submitter sort using starvation in negotiateWithGroup", "description": "<blockquote>\nFrom Jon Thomas:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">// ----- Sort the schedd list in decreasing priority order\ndprintf( D_ALWAYS, \"Phase 3:  Sorting submitter ads by priority ...\\n\" );\nscheddAds.Sort( (lessThanFunc)comparisonFunction, this );\n\nCurrently the code sorts on prio. Comments indicate it does a random secondary\nsort of names, but it looks like it doesn't really. The sort needs to be\nchanged to either\n\n1) based on starvation\n\n2) based on prio and then a true secondary sort on starvation.\n</pre></div>\n\n\n<p>I think option (2) is reasonable, since the primary sort on submitter priority is a longstanding behavior.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Jun-15 12:30:58 by eje:</em> <br/>\n\nThe analog of <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2186\" onclick=\"get_ticket_and_populate_wrapper('2186'); return false;\" title=\"groups are not sorted in starvation order\">#2186</a></span> here would be sorting by (submitter_usage/submitter_limit).  Currently, the sorting of submitters occurs before submitter limits are computed.  Also, those limits are currently computed on the fly, not attached to the submitter structure.\n\n<p>To do the above, there would have to be a new loop assigning submitter limits (perhaps just the submitter limit of spin-1 could be used for convenience) to the submitter ads, prior to the sort.\n\n</p><p>Another lower-impact option might be to sort by some surrogate like submitter_usage / (idle+running).  That does not take into account the negotiator's view of the submitter's limit or group quota, but it is a reasonable measure of starvation and could be accomplished without moving the logic for submitter limit computations around.\n\n</p><p></p><hr/>\n<em>2011-Jun-24 11:23:34 by eje:</em> <br/>\n\nrepro/test\n\n<p>Using the following configuration, which sets a very large PRIORITY_HALFLIFE so that user priorities all remain equal at 0.5:\n</p><div class=\"code\">\n<pre class=\"code\">CLAIM_WORKLIFE = 0\nNEGOTIATOR_CONSIDER_PREEMPTION = FALSE\nNEGOTIATOR_DEBUG = D_FULLDEBUG\n\nNEGOTIATOR_USE_SLOT_WEIGHTS = FALSE\n\nGROUP_QUOTA_MAX_ALLOCATION_ROUNDS = 1\n\nNEGOTIATOR_INTERVAL = 30\nSCHEDD_INTERVAL = 15\n\nPRIORITY_HALFLIFE = 1e100\n\nNUM_CPUS = 20\n\nGROUP_NAMES = a\nGROUP_QUOTA_a = 20\n\nGROUP_ACCEPT_SURPLUS = FALSE\n</pre></div>\n\n\n<p>The following three job submissions are used in a sequence (submission 2 will be used twice).   They are designed to switch the starvation order, to demonstrate that the new secondary sort on starvation is working (and demonstrate it doesn't happen in previous code)\n\n</p><p>Submission (1): will result in \"a.u1\" having a higher ratio than \"a.u2\" (affects order on <strong>subsequent</strong> negotiation round)\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\ncmd = /bin/sleep\nargs = 600\nshould_transfer_files = if_needed\nwhen_to_transfer_output = on_exit\n+AccountingGroup=\"a.u2\"\nqueue 1\n+AccountingGroup=\"a.u1\"\nqueue 2\n</pre></div>\n\n\n<p>Submission (2): leaves starvation order unchanged from previous negotiation round to demonstrate re-ordering of submitters from previous submission\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\ncmd = /bin/sleep\nargs = 600\nshould_transfer_files = if_needed\nwhen_to_transfer_output = on_exit\n+AccountingGroup=\"a.u2\"\nqueue 1\n+AccountingGroup=\"a.u1\"\nqueue 1\n</pre></div>\n\n\n<p>Submission (3): switches the order so that now \"a.u2\" has the higher ratio\n</p><div class=\"code\">\n<pre class=\"code\">universe = vanilla\ncmd = /bin/sleep\nargs = 600\nshould_transfer_files = if_needed\nwhen_to_transfer_output = on_exit\n+AccountingGroup=\"a.u2\"\nqueue 3\n+AccountingGroup=\"a.u1\"\nqueue 1\n</pre></div>\n\n\n<p>The order of submissions is (1), (2), (3), (2)  (allow each submission to negotiate before submitting the next).\n\n</p><p>Repro: before fix, we see that \"a.u1\" always negotiates first, because all priorities are equal, and secondary sort is by submitter name:\n</p><div class=\"code\">\n<pre class=\"code\">$ tail -f NegotiatorLog | grep -e 'Negotiating with.* at' -e 'SubmitterPrio .*=' -e 'submitterLimit .*=' -e 'submitterUsage .*='\n# submission (1)\n06/24/11 08:32:13   Negotiating with a.u1@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:32:13     SubmitterPrio       = 0.500000\n06/24/11 08:32:13     submitterLimit    = 1.500000\n06/24/11 08:32:13     submitterUsage    = 0.000000\n06/24/11 08:32:13   Negotiating with a.u2@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:32:13     SubmitterPrio       = 0.500000\n06/24/11 08:32:13     submitterLimit    = 1.500000\n06/24/11 08:32:13     submitterUsage    = 0.000000\n06/24/11 08:32:14   Negotiating with a.u1@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:32:14     SubmitterPrio       = 0.500000\n06/24/11 08:32:14     submitterLimit    = 1.000000\n06/24/11 08:32:14     submitterUsage    = 1.000000\n\n# submission (2)\n06/24/11 08:32:34   Negotiating with a.u1@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:32:34     SubmitterPrio       = 0.500000\n06/24/11 08:32:34     submitterLimit    = 0.500000\n06/24/11 08:32:34     submitterUsage    = 2.000000\n06/24/11 08:32:34   Negotiating with a.u2@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:32:34     SubmitterPrio       = 0.500000\n06/24/11 08:32:34     submitterLimit    = 1.000000 (starved 0.500000)\n06/24/11 08:32:34     submitterUsage    = 1.000000\n\n# submission (3)\n06/24/11 08:32:55   Negotiating with a.u1@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:32:55     SubmitterPrio       = 0.500000\n06/24/11 08:32:55     submitterLimit    = 1.500000\n06/24/11 08:32:55     submitterUsage    = 3.000000\n06/24/11 08:32:55   Negotiating with a.u2@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:32:55     SubmitterPrio       = 0.500000\n06/24/11 08:32:55     submitterLimit    = 2.500000\n06/24/11 08:32:55     submitterUsage    = 2.000000\n06/24/11 08:32:55   Negotiating with a.u2@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:32:55     SubmitterPrio       = 0.500000\n06/24/11 08:32:55     submitterLimit    = 1.000000\n06/24/11 08:32:55     submitterUsage    = 4.000000\n\n# submission (2) again\n06/24/11 08:33:16   Negotiating with a.u1@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:33:16     SubmitterPrio       = 0.500000\n06/24/11 08:33:16     submitterLimit    = 1.500000\n06/24/11 08:33:16     submitterUsage    = 4.000000\n06/24/11 08:33:16   Negotiating with a.u2@localdomain at &lt;192.168.1.2:45791&gt;\n06/24/11 08:33:16     SubmitterPrio       = 0.500000\n06/24/11 08:33:16     submitterLimit    = 0.500000\n06/24/11 08:33:16     submitterUsage    = 5.000000\n</pre></div>\n\n\n<p>After the fix: we see that \"a.u2\" gets to negotiate first when it's (incoming) ratio is the lowest:\n</p><div class=\"code\">\n<pre class=\"code\">[root@rorschach log]$ tail -f NegotiatorLog | grep -e 'Negotiating with.* at' -e 'SubmitterPrio .*=' -e 'submitterLimit .*=' -e 'submitterUsage .*='\n# submission (1) (set up a.u2 to go first next round)\n06/24/11 08:03:06   Negotiating with a.u1@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:03:06     SubmitterPrio       = 0.500000\n06/24/11 08:03:06     submitterLimit    = 1.500000\n06/24/11 08:03:06     submitterUsage    = 0.000000\n06/24/11 08:03:06   Negotiating with a.u2@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:03:06     SubmitterPrio       = 0.500000\n06/24/11 08:03:06     submitterLimit    = 1.500000\n06/24/11 08:03:06     submitterUsage    = 0.000000\n06/24/11 08:03:06   Negotiating with a.u1@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:03:06     SubmitterPrio       = 0.500000\n06/24/11 08:03:06     submitterLimit    = 1.000000\n06/24/11 08:03:06     submitterUsage    = 1.000000\n\n# submission (2)  (a.u2 goes first)\n06/24/11 08:03:26   Negotiating with a.u2@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:03:26     SubmitterPrio       = 0.500000\n06/24/11 08:03:26     submitterLimit    = 1.500000\n06/24/11 08:03:26     submitterUsage    = 1.000000\n06/24/11 08:03:26   Negotiating with a.u1@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:03:26     SubmitterPrio       = 0.500000\n06/24/11 08:03:26     submitterLimit    = 0.500000\n06/24/11 08:03:26     submitterUsage    = 2.000000\n\n# submission (3) (set up a.u1 to go first next round)\n06/24/11 08:03:48   Negotiating with a.u2@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:03:48     SubmitterPrio       = 0.500000\n06/24/11 08:03:48     submitterLimit    = 2.500000\n06/24/11 08:03:48     submitterUsage    = 2.000000\n06/24/11 08:03:48   Negotiating with a.u1@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:03:48     SubmitterPrio       = 0.500000\n06/24/11 08:03:48     submitterLimit    = 1.500000\n06/24/11 08:03:48     submitterUsage    = 3.000000\n06/24/11 08:03:48   Negotiating with a.u2@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:03:48     SubmitterPrio       = 0.500000\n06/24/11 08:03:48     submitterLimit    = 1.000000\n06/24/11 08:03:48     submitterUsage    = 4.000000\n\n# submission (2) (a.u1 goes first)\n06/24/11 08:04:09   Negotiating with a.u1@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:04:09     SubmitterPrio       = 0.500000\n06/24/11 08:04:09     submitterLimit    = 1.500000\n06/24/11 08:04:09     submitterUsage    = 4.000000\n06/24/11 08:04:09   Negotiating with a.u2@localdomain at &lt;192.168.1.2:39904&gt;\n06/24/11 08:04:09     SubmitterPrio       = 0.500000\n06/24/11 08:04:09     submitterLimit    = 0.500000\n06/24/11 08:04:09     submitterUsage    = 5.000000\n</pre></div>\n\n\n<p></p><hr/>\n<em>2011-Jun-27 12:30:15 by danb:</em> <br/>\n\nThis patch gets rid of the \"random\" ordering of submitters with the same name (from different schedds).  I do not believe that the sort by starvation as currently implemented in this patch will help avoid starvation when two submitters have the same name.  The usage stats that feed into the starvation ratio are based on the usage observed by the accountant.  The accountant does not distinguish between submitters with the same name, so they will both have the same usage stats.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/388/gt2240-submitter-sort.patch\">gt2240-submitter-sort.patch</a>\n8246 bytes added by eje on 2011-Jun-24 15:56:30 UTC.\n<br/>\nPatch that implements submitter sorting by priority (primary) and then secondarily by starvation ratio (usage)/(usage+submitter_limit) (as measured on 1st pie spin).\n\n<p>Secondary sort by submitter name was previously used to enable submitters to be not counted twice in calculateNormalizationFactor().  This has been replaced with the use of a set&lt;&gt; in that function, which is more correct and robust.<br/>\n</p></li><li><a href=\"../files/392/gt2240-submitter-sort.patch2\">gt2240-submitter-sort.patch2</a>\n8691 bytes added by eje on 2011-Jul-02 16:26:49 UTC.\n<br/>\nThis patch restores randomized fallback sorting for submitters with same name from differing schedds.<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jul-11 17:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/81265bac4e757e853ffccf1a15a05448764132cb\">[22403]</a></span>: ===VersionHistory=== Cleaned up submitter ad sorting and added a secondary sort on submitter starvation ratio. ===GT:Fixed=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2240\" onclick=\"get_ticket_and_populate_wrapper('2240'); return false;\" title=\"RFE: secondary submitter sort using starvation in negotiateWithGroup\">#2240</a></span>  (By Erik Erlandson )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Jul-11 18:22", "status": "resolved", "created": "2011-Jun-15 12:10", "fixed_version": "2011-Jun-15 12:10", "broken_version": "v070600", "priority": "3", "subsystem": "Daemons", "assigned_to": "eje", "derived_from": "#2186", "creator": "eje", "rust": "", "customer_group": "other", "visibility": "public", "notify": "eje@cs.wisc.edu, dan@hep.wisc.edu, jthomas@redhat.com, matt@cs.wisc.edu, tstclair@redhat.com", "due_date": ""}