{"id": 1460, "title": "Ticket #1460: util_getline() in dagman should read more than 1 char at a time.", "description": "<blockquote>\nI was curious about why dagman was using so much CPU when submitting basically sleep jobs, and found this in a sampled stack trace:\n\n<p></p><div class=\"verbatim\">\n<pre>(gdb) bt\n#0  0xb7f99402 in __kernel_vsyscall ()\n#1  0x00bbe8b3 in __read_nocancel () from /lib/libc.so.6\n#2  0x00b5ee48 in _IO_file_read_internal () from /lib/libc.so.6\n#3  0x00b601a0 in _IO_new_file_underflow () from /lib/libc.so.6\n#4  0x00b6089b in _IO_default_uflow_internal () from /lib/libc.so.6\n#5  0x00b61c0d in __uflow () from /lib/libc.so.6\n#6  0x00b5b9ec in getc () from /lib/libc.so.6\n#7  0x081344ed in util_getline (fp=0x3b9e7120,\n    line=0xbfe3781c \"Submitting job(s).\\002\", max=1024) at dagman_util.cpp:41\n#8  0x0812024b in submit_try (args=@0xbfe37d00, condorID=@0xbfe381f8,\n    type=Job::TYPE_CONDOR, prohibitMultiJobs=false) at dagman_submit.cpp:149\n#9  0x08120567 in do_submit (args=@0xbfe37d00, condorID=@0xbfe381f8,\n    jobType=Job::TYPE_CONDOR, prohibitMultiJobs=false) at dagman_submit.cpp:212\n#10 0x0812180c in condor_submit (dm=@0x8535ee0,\n    cmdFile=0x398efc68 \"submit.condor\", condorID=@0xbfe381f8,\n    DAGNodeName=0xbe57208 \"65058\", DAGParentNodeNames=\n      {Data = 0xbfe38170 \"\\230\u00b1\\2169\", dummy = 72 'H', Len = 199586912, capacity = 199586792, tokenBuf = 0x0, nextToken = 0xbfe38140 \"\u00b8\u00c4\\2169\"},\n    names=0xbe57448, vals=0xbe57460, directory=0xbe573e8 \"\", logFile=0x0)\n    at dagman_submit.cpp:328\n#11 0x0812570f in Dag::SubmitNodeJob (this=0x9327498, dm=@0x8535ee0,\n    node=0xbe57500, condorID=@0xbfe381f8) at dag.cpp:3065\n#12 0x08125d8e in Dag::SubmitReadyJobs (this=0x9327498, dm=@0x8535ee0)\n    at dag.cpp:1363\n#13 0x0811c0ae in condor_event_timer () at dagman_main.cpp:1091\n#14 0x08163671 in TimerManager::Timeout (this=0x85360a8)\n    at timer_manager.cpp:416\n#15 0x08146174 in DaemonCore::Driver (this=0x9301680) at daemon_core.cpp:3032\n#16 0x0815ed98 in main (argc=15, argv=0xbfe38ae0) at daemon_core_main.cpp:2303\n(gdb) q\n</pre></div>\n\n\n<p>We see that we're trying to submit a job.\n\n</p><p>If we follow it down to util_getline, we see this function:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">int util_getline(FILE *fp, char *line, int max) {\n  int c, i = 0;\n\n  ASSERT( EOF  == -1 );\n  ASSERT( fp   != NULL );\n  ASSERT( line != NULL );\n  ASSERT( max  &gt; 0 );      /* Need at least 1 slot for '\\0' character */\n\n  for (c = getc(fp) ; c != '\\n' &amp;&amp; c != EOF ; c = getc(fp)) {\n    if ( !(i == 0 &amp;&amp; isspace(c)) &amp;&amp; (i+1 &lt; max)) line[i++] = c;\n  }\n  line[i] = '\\0';\n  return (i==0 &amp;&amp; c==EOF) ? EOF : i;\n}\n</pre></div>\n\n\n<p>One character at a time? Lame.\n\n</p><p>If we fix this, we will reduce the CPU load of dagman most likely considerably.</p></blockquote>", "remarks": "<blockquote>\n<em>2010-Jun-17 01:01:36 by psilord:</em> <br/>\n\nIt turns out this is pretty easy to fix and I already have a fix in my workspace of only a few lines.\n\n<p>If it passes the test suite on my desktop, I'll check it in, and dagman will be that much better.\n\n</p><p></p><hr/>\n<em>2010-Jun-17 11:03:59 by psilord:</em> <br/>\n\nOne tricky thing was the correct handling of initial whitespace, since util_getline() got rid of initial whitespace before any sscanf()s would have seen it. Turns out sscanf() understands how to do that automatically if you set the format string up properly.\n\n<p>Code reviewed by Kent. Checked in.\n\n</p><p></p><hr/>\n<em>2010-Jun-17 11:43:49 by psilord:</em> <br/>\n\nDocumented. Resolved.\n\n<p></p><hr/>\n<em>2010-Jun-17 11:48:19 by psilord:</em> <br/>\n\nAh, to be a little more clear about my changes, I got rid of util_getline() all together and replaced the use of it with fgets(). The former function was only used once and in a place where fgets is a much more idiomatic use.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jun-17 11:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=25531\">[25531]</a></span>: Commented <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1460\" onclick=\"get_ticket_and_populate_wrapper('1460'); return false;\" title=\"util_getline() in dagman should read more than 1 char at a time.\">#1460</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jun-17 10:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18481\">[18481]</a></span>: Replaced an inefficient getc() idiom in the condor_submit job submission codepath with fgets() to lower CPU consumption. Fixed the sscanf's which parsed the output of the condor/stork submit to be more whitespace tolerant. This is for ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1460\" onclick=\"get_ticket_and_populate_wrapper('1460'); return false;\" title=\"util_getline() in dagman should read more than 1 char at a time.\">#1460</a></span>.  (By Peter Keller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Jun-17 11:48", "status": "resolved", "created": "2010-Jun-16 14:08", "fixed_version": "2010-Jun-16 14:08", "broken_version": "v070000", "priority": "4", "subsystem": "Dag", "assigned_to": "psilord", "derived_from": "", "creator": "psilord", "rust": "", "customer_group": "other", "visibility": "public", "notify": "psilord@cs.wisc.edu, wenger@cs.wisc.edu, matt@cs.wisc.edu", "due_date": "20100617"}