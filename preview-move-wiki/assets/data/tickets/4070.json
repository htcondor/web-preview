{"id": 4070, "title": "Ticket #4070: Sock::serialize() fills fixed size buffer", "description": "<blockquote>\nSock::serialize() (/src/condor_io/sock.pp around line 1713) blindly allocated a 500 byte buffer, fills, and returns it.\n\n<p>ReliSock::serialize() and SafeSock::serialize (<a class=\"file\" href=\"rlog?f=src/condor_io/reli_sock.cpp\">/src/condor_io/reli_sock.cpp</a> around line 830 and <a class=\"file\" href=\"rlog?f=src/condor_io/safe_sock.cpp\">/src/condor_io/safe_sock.cpp</a> around line 780 respectively) call Sock::serialize(), append more information onto the buffer, and return it.\n\n</p><p>Problem 1: The caller needs to know that all of these serialize functions return memory that must be delete[]ed.  I believe it's used safely today, but it would be easy to overlook if someone added a new call to serialize.  It also makes the caller's code a little more complicated, adding that call to delete[].\n\n</p><p>Problem 2: 500 bytes is a bit arbitrary.  I believe it's safe today, but easy to overlook if someone adds information to the strings.\n\n</p><p>Proposed: Add a dependency on <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyString\" title=\"My String\">MyString</a></span> or std::string, and return that.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2013-Nov-14 16:28", "status": "new", "created": "2013-Nov-14 16:28", "fixed_version": "2013-Nov-14 16:28", "broken_version": "v080000", "priority": "4", "subsystem": "Daemons", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}