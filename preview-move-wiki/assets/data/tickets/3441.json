{"id": 3441, "title": "Ticket #3441: Fixes for classad caching.", "description": "<blockquote>\nThe following ticket is meant to track any issues discovered during testing and evaluation of classad caching.  Please be concise in the test and repo scenarios.\n\n<p>When evaluating I do not see reported memory issue(s), and previous issues have all been addressed.</p></blockquote>", "remarks": "<blockquote>\n<em>2013-Jan-14 14:06:21 by tstclair:</em> <br/>\n\nOne should only enable for certain daemons not all.\n\n<p>E.g.\n</p><div class=\"code\">\n<pre class=\"code\">SCHEDD.ENABLE_CLASSAD_CACHING\nNEGOTIATIOR.ENABLE_CLASSAD_CACHING\nCOLLECTOR.ENABLE_CLASSAD_CACHING\n</pre></div>\n\n\n<p></p><hr/>\n<em>2013-Jan-16 15:30:09 by tstclair:</em> <br/>\n\nSo I've ran numerous valgrind massif runs against both the schedd and collector, and verified the memory reduction and instruction count reduction.  If there are specific tests which show contrary results, please attach entire repro instructions.\n\n<p></p><hr/>\n<em>2013-Jan-16 16:03:22 by tannenba:</em> <br/>\n\nHow/what did you benchmark? Where are the results of your benchmarking?  What is the memory footprint and cpu utilization with the caching code on -vs- off? It is not a matter of \"memory utilization is less\" with caching on or off, it is important to have even a ballpark feel for how much less.  If, for instance, the memory footprint is reduced by 10% on a typically collection of 3000 machine ads, I do not think the complexity of the caching code is worth it at 10%.... on the other hand, if we are talking 50%, that is very different.\n\n<p></p><hr/>\n<em>2013-Jan-16 16:18:21 by tstclair:</em> <br/>\n\nUsing valgrind massif as mentioned, I showed TJ the initial collector reports on a simple personal condor\n\n<p>The tests are contrived personal condor with overloaded startd to look like 2 machines with 16 CPU's each.\n\n</p><p>~20% savings is memory.\n~10% iLoc savings (it's difficult to determine what this means when compiling release exes)\n\n</p><p>Difficulty is that I need to test on a real environment to get data.  It's all set to test on a live env and I would like to be around to help verify.\n\n</p><p></p><hr/>\n<em>2013-Jan-16 17:05:52 by tannenba:</em> <br/>\n\nHow did you get the 20% memory savings number?  Is this the difference in the private data usage of the collector with caching enabled vs disabled?\n\n<p>What does \"iLoc\" mean?\n\n</p><p>Agree we need to verify stability in a real beta environment, but for benchmarking: instead of a test with just 32 similar ads all coming from the same startd, how about doing a test like we discussed a couple months back?  E.g. take a realistic collector snapshot like <code>condor_status -pool cm.chtc.wisc.edu -l</code>, save it to a file, and then have a small 10 line program (ideally that lives in the test suite) that simply reads in all the ads into a classad list.  Report the private memory usage and run time of this program with caching enabled, and again with caching disabled.\n\n</p><p>Here are the results I got back in December doing the above:\n</p><div class=\"verbatim\">\n<pre>3181 ads, 525201 attributes, 35324 unique attribute values\n\nWith No Caching\n10 seconds, 235 MB\n\nWith Caching\n20 seconds, 191 MB\n</pre></div>\n\n\n<p>I will try to re-run this test as a sanity data point.  Most concerning with the above was the fact that the run-time doubled (!!) with caching on, hopefully that is no longer the case.\n\n</p><p></p><hr/>\n<em>2013-Jan-16 17:22:00 by tstclair:</em> <br/>\n\nBecause its tr1 heavy you need to be sure to test release mode\n\n<p></p><hr/>\n<em>2013-Jan-16 21:53:58 by tstclair:</em> <br/>\n\nI've created some unit tests, and I'm seeing the oddity, investigating.\n\n<p></p><hr/>\n<em>2013-Jan-17 13:22:32 by tstclair:</em> <br/>\n\nDecrease on CHTC test data was ~68.2% of original, so on chtc it saved ~32%, which is pretty good.\n\n<p>32% of 8GB = 2.58GB of savings.. I will attach performance results shortly.\n\n</p><p></p><hr/>\n<em>2013-Jan-17 13:36:57 by tstclair:</em> <br/>\n\nWhen compiling release exec's against just the insertion test:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">[tstclair@tstclair tests]$ ./without_cache\nRunning 1 test case...\nClock Time:1.7\n\n*** No errors detected\n[tstclair@tstclair tests]$ ./with_cache\nRunning 1 test case...\nClock Time:1.83\n\n*** No errors detected\n</pre></div>\n\n\n<p>That is a 7% performance degradation on just raw insertion.\n\n</p><p>You will note that in the massif output of the instruction count is slightly higher, but when doing other performance tests on live system the instruction count is much less because the system is more fluid and dynamic.  e.g. less deletions going on.\n\n</p><p>So in general I think the signs are pointing good.\nObviously there is always room for improvement.\n\n</p><p></p><hr/>\n<em>2013-Jan-17 13:42:28 by tstclair:</em> <br/>\n\nTo run the test executables, run the following:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">cmake -DTEST_CACHE:BOOL=true . &amp;&amp; make install\n</pre></div>\n\n\n<p>Make certain that your personal condor directories override so the tests reference the correct location. Then type:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">make tests\n</pre></div>\n\n\n<p>This will run the tests from CTEST which can yield wonky #'s. To run the tests by hand navigate to: <strong>src/classad/tests</strong> and you can run them by hand.\n\n</p><p>To run valgrid on the executables run:\n</p><div class=\"code\">\n<pre class=\"code\">/usr/bin/valgrind --tool=massif --pages-as-heap=yes --massif-out-file=heap.txt ./with_cache\nms_print heap.txt &gt; cache.txt\n</pre></div>\n\n\n<p></p><hr/>\n<em>2013-Jan-17 14:10:50 by johnkn:</em> <br/>\n\nSo since I was already workin in condor_q.  I added a -profile argument that gets the time and the private bytes before and after fetching job ads from disk.  I used 5226 job ads that I captured from submit-1.chtc.wisc.edu a couple of weeks ago for my test.\n\n<p>My results show about 25% less memory used with caching on.  but more than double the time.\n\n</p><p></p><pre>    Fetching job ads (classad caching is OFF)...3.262 sec, private bytes increased by 99459072 (from 6541312 to 106000384)\n    Fetching job ads (classad caching is OFF)...3.203 sec, private bytes increased by 99459072 (from 6549504 to 106008576)\n    Fetching job ads (classad caching is OFF)...3.207 sec, private bytes increased by 99459072 (from 6541312 to 106000384)\n    Fetching job ads (classad caching is ON)...8.882 sec, private bytes increased by 73203712 (from 6545408 to 79749120)\n    Fetching job ads (classad caching is ON)...8.944 sec, private bytes increased by 73199616 (from 6545408 to 79745024)\n    Fetching job ads (classad caching is ON)...8.975 sec, private bytes increased by 73199616 (from 6541312 to 79740928)\n</pre>\n\n<p>Test were run on my Windows desktop using Release binaries.\n\n</p><p></p><hr/>\n<em>2013-Jan-17 14:16:56 by tstclair:</em> <br/>\n\nGood to know, this could be because of the implementations of data structures on windows, I did all my tests on Linux.\n\n<p></p><hr/>\n<em>2013-Jan-17 14:22:29 by tstclair:</em> <br/>\n\nTodd were your tests on windows also?\n\n<p></p><hr/>\n<em>2013-Jan-17 14:33:40 by tannenba:</em> <br/>\n\nYes my tests back in Dec were also on Windows. We will rerun the same test on Linux and see what happens.  Tim, I am confused by your statement above:\n\n<p>Tim remarked above:\n</p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nDecrease on CHTC test data was ~68.2% of original, so on chtc it saved ~32%, which is pretty good.\n\n32% of 8GB = 2.58GB of savings.. I will attach performance results shortly.\n</td></tr></tbody></table></div>\n\n\n<p>Could you provide more info about your test data set, like I did above (how many ads, ectc)  You say \"CHTC test data\" --- does that mean all the ads in the CHTC collector?  If so, how did that come to 8GB of ads in your tests -- it should be more like 200MB.\n\n</p><p></p><hr/>\n<em>2013-Jan-17 14:37:58 by tstclair:</em> <br/>\n\nThe data is all attached, and the test data is in the repo along with the tests.\n\n<p>The projected savings from 8 GB was extrapolated from the percentage.\n\n</p><p>I'm about 85% confident now the reason you were seeing a slowdown was the crufty unorder map ++ VS.2008.\n\n</p><p>It would be really interesting to compare against 2012 with C++11 enabled.\n\n</p><p></p><hr/>\n<em>2013-Jan-17 15:15:47 by tstclair:</em> <br/>\n\nConfirmed.. I tested an EL5, EL6, and Fedora all with consistent results.\n\n<p></p><hr/>\n<em>2013-Jan-17 15:55:56 by tannenba:</em> <br/>\n\nJust for another data point, TJ is building his test on Linux now...\n\n<p>In general, considering the mostly single-threaded nature of the daemons, performance is more important than memory usage (except in the Shadow, but the Shadow doesn't hold a lot of classads anyhow). It is a hard call if ~20% memory savings is worth a ~7% performance hit plus a lot of extra code (aka extra surface area w/ bug risks, maintenance costs, etc).\n\n</p><p>Couple random thoughts that perhaps could significantly improve the situation with the current code:\n</p><ol>\n<li>How about not caching attribute values that are numbers (ints, floats, etc)?  Seems like these don't really save any space and yet still cost cpu cycles.\n</li><li>Where is the unordered map being used - in the cache where keys are the attribute names?  Attribute name strings are pretty long; are we sure just using a regular map (instead of unordered map) isn't a better choice?  With an unordered map, the entire key must be scanned to hash it, while with an ordered map we only need to scan enough to know if it is lexically less than another key.\n</li><li>How easy/hard is it to string space (ref count) the attribute names?  Old classads did this btw.\n</li></ol>\n\n<p></p><hr/>\n<em>2013-Jan-17 15:59:14 by tstclair:</em> <br/>\n\nIt's more like 30%, and the performance hit was only on a single insertion test, as mentioned previously I have other tests that show increased performance, but I wanted to compare apples to apples.\n\n<p>30% memory performance at scale will also yield greater cpu performance.. I think it's worth while doing some real tests now.\n\n</p><p></p><hr/>\n<em>2013-Jan-17 16:06:38 by tstclair:</em> <br/>\n\nI would be happy to sit down with Jamie (who is intimately familiar with classads) and brainstorm ideas.\n\n<p></p><hr/>\n<em>2013-Jan-17 17:13:09 by johnkn:</em> <br/>\n\nUsing your test data, in my condor_q -profile rig. 64bit SL6 binaries built in NMI. I'm still seeing about 2x slower, but also 2x memory savings.  I'm guessing more memory savings comes from 64 bit pointers.\n\n<p></p><div class=\"verbatim\">\n<pre>[johnkn@submit-2 condor-7.9.4-95084-x86_64_SL6-unstripped]$ _condor_ENABLE_CLASSAD_CACHING=false bin/condor_q -profile -jobads testdata.txt -verbose &gt; /dev/null\n[johnkn@submit-2 condor-7.9.4-95084-x86_64_SL6-unstripped]$ _condor_ENABLE_CLASSAD_CACHING=true bin/condor_q -profile -jobads testdata.txt -verbose &gt; /dev/null\nFetching job ads (classad caching is OFF)...2.260 sec of cpu, memory increased by 179503104 (from 100548608 to 280051712)\nFetching job ads (classad caching is OFF)...2.110 sec of cpu, memory increased by 179503104 (from 100548608 to 280051712)\nFetching job ads (classad caching is OFF)...2.450 sec of cpu, memory increased by 179503104 (from 100548608 to 280051712)\nFetching job ads (classad caching is OFF)...2.690 sec of cpu, memory increased by 179503104 (from 100548608 to 280051712)\nFetching job ads (classad caching is ON)...4.920 sec of cpu, memory increased by 82644992 (from 100548608 to 183193600)\nFetching job ads (classad caching is ON)...5.300 sec of cpu, memory increased by 82644992 (from 100548608 to 183193600)\nFetching job ads (classad caching is ON)...5.310 sec of cpu, memory increased by 82644992 (from 100548608 to 183193600)\nFetching job ads (classad caching is ON)...5.170 sec of cpu, memory increased by 82644992 (from 100548608 to 183193600)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2013-Jan-17 19:35:13 by tstclair:</em> <br/>\n\nIt's probably wise to separate and characterize the behavior into unit tests.  The behavior checks I mentioned display the behavior when just doing insertion.\n\n<p>It looks like John's test does both insertion and deletion.  But in an average daemon it's far more fluid and valgrind shows this.\n\n</p><p>My goal was to aim at the schedd, collector, and negotiator.  Maybe we should define a the scope and work from there.\n\n</p><p></p><hr/>\n<em>2013-Feb-08 09:44:59 by johnkn:</em> <br/>\n\nDuring my classad cache testing, I discovered that std::string on Windows doesn't share the underling memory when strings are assigned.  This means that the classad cache on Windows isn't sharing the storage for attribute names.\n\n<p></p><pre>   std::string aaa, bbb, ccc;\n   ccc = bbb = aaa = \"foo\";\n   printf(\"aaa.ptr = %p, bbb.ptr = %p, ccc.ptr = %p\\n\", aaa.c_str(), bbb.c_str(), ccc.c_str());\n</pre>\n\n<p>gives this output on rhel6\n\n</p><p></p><pre>   aaa.ptr = 0x104e028, bbb.ptr = 0x104e028, ccc.ptr = 0x104e028\n</pre>\n\n<p>and this output on windows\n\n</p><p></p><pre>   aaa.ptr = 0018FE94, bbb.ptr = 0018FF24, ccc.ptr = 0018FEB0\n</pre>\n\n<p></p><hr/>\n<em>2013-Feb-08 10:30:37 by tstclair:</em> <br/>\n\nI'm guessing you're using Vs.2008</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body><blockquote>\n<ul>\n<li><a href=\"../files/672/b4.txt\">b4.txt</a>\n221361 bytes added by tstclair on 2013-Jan-17 19:17:41 UTC.\n<br/>\nBefore w/massif on test from chtc dump<br/>\n</li><li><a href=\"../files/673/after.txt\">after.txt</a>\n321598 bytes added by tstclair on 2013-Jan-17 19:18:08 UTC.\n<br/>\nafter w/test from chtc dump<br/>\n</li></ul>\n</blockquote></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Sep-03 11:17</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37440\">[37440]</a></span>: change of default value of ENABLE_CLASSAD_CACHING documented for 8.1.1 ===GT=== <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Aug-20 17:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=37310\">[37310]</a></span>: enable classad caching by default for all but shadow, starter &amp; master. <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> add startup dprintf of classad caching state and set other D_LOAD messages to D_VERBOSE ===VersionHistory:Pending===  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Mar-15 00:04</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35169\">[35169]</a></span>: Add basic test for condor with ENABLE_CLASSAD_CACHING=true. <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> ===VersionHistory:None===  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Mar-13 17:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=35143\">[35143]</a></span>: fix bug in previous commit to <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> that would cause ref-counting problems for some code paths when classad caching was turned on. ===VersionHistory:None=== bug never shipped.  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-18 11:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34941\">[34941]</a></span>: (<span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span>) Don't un-parse <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTrees\" title=\"Expr Trees\">ExprTrees</a></span> when inserting them into the classad cache when the pre-parsed form is available. This is a performance optimization for classad caching so that the code runs faster with caching on. This commit also skips unnecessary copies of std::strings for platforms (win32) where\u00a0[...]\n (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-11 17:18</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34896\">[34896]</a></span>: (<span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span>) change classads to use a hash algorithm optimized for classad attribute names, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3448\" onclick=\"get_ticket_and_populate_wrapper('3448'); return false;\" title=\"Improving classads hash function\">#3448</a></span> ===VersionHistory:Pending=== maybe mention classad performance tuning?  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-11 11:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34887\">[34887]</a></span>: (<span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span>) Change classad cache performance tests so that they more closely approximate the way condor uses the classad code. ===VersionHistory:None===  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-11 09:59</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34886\">[34886]</a></span>: (<span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span>). Fix classad cache to use case-sensitive hashtable for values. Use of case-insensitive was both incorrect, and slower. ===VersionHistory:None===  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Feb-11 09:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34885\">[34885]</a></span>: (<span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span>) The classad cache depends on having the caller trim whitespace from strings before calling Insert. This is arguably a bug in the cache code, but it's easier and cheaper to fix in the compatibility layer, so this patch changes the convert-old-to-new method to trim trailing whitespace. The visible\u00a0[...]\n (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-28 16:25</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34780\">[34780]</a></span>: Ticket <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> Enumerate tests and verify new vm server  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-17 13:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34701\">[34701]</a></span>: Ticket <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> Inclusion of cache tests.  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-16 11:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34657\">[34657]</a></span>: Ticket <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> Added conditional check which caused issue on windows when cleaning up.  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-15 12:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34647\">[34647]</a></span>: Revert \"Ticket <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> - update classads .so version for NMI. This is an NMI bug\" This reverts commit b5b8ccb59bcec0a92b32f2dce8f347242f2fb747.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-15 10:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34641\">[34641]</a></span>: Ticket <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> - update classads .so version for NMI. This is an NMI bug where there is a co-mingling of versions.  (By Timothy St. Clair )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-14 14:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34628\">[34628]</a></span>: Ticket <span class=\"ticket\"><a class=\"review\" href=\"/tickets?ticket=3441\" onclick=\"get_ticket_and_populate_wrapper('3441'); return false;\" title=\"Fixes for classad caching.\">#3441</a></span> Fix Cache - Unparsing issue in xml, and cleanup <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SameAs\" title=\"Same As\">SameAs</a></span> f(n)'s.  (By Timothy St. Clair )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2013-Feb-08 10:30", "status": "review", "created": "2013-Jan-14 14:03", "fixed_version": "2013-Jan-14 14:03", "broken_version": "v070900", "priority": "4", "subsystem": "Daemons", "assigned_to": "tannenba", "derived_from": "#2541", "creator": "tstclair", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tstclair@redhat.com, tannenba@cs.wisc.edu, johnkn@cs.wisc.edu", "due_date": ""}