{"id": 7839, "title": "Ticket #7839: Minor code refactor for LIMIT_DIRECTORY_ACCESS support", "description": "<blockquote>\nAddress code review comment on ticket <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=7482\" onclick=\"get_ticket_and_populate_wrapper('7482'); return false;\" title=\"Restrict remote files access to a whitelist of directories\">#7482</a></span> related to LIMIT_DIRECTORY_ACCESS support:\n\n<p><em>2020-Aug-28 10:08:13 by gthain:</em> <br/>\n\n<strong>CODE REVIEW</strong>\n\n</p><p></p><ul>\n<li>I love the fixing of the whitespace issues in related code.\n</li><li>Do we have a policy for updating the copyright year in the source file header?  I never do this.\n</li><li>Let's get in the habit of using \"nullptr\" instead of NULL in new code.\n</li><li>I <strong>believe</strong> this works correctly in the face of shadow reuse, subject to the caveat that changing LIMIT_DIRECTORY_ACCESS doesn't take effect until a shadow actually restarts, not on shadow reuse.  If so, we should document this.\n</li><li>I'm a little unhappy that we put a call to allow_shadow_access into the cedar get_file code, this seems like a layering violation -- can we limit all the changes to the shadow proper?\n</li><li>Related to the above allow_shadow_access is kind of a funny function, called first with an init flag, that sets some state in static variables, then later to do the actual work.  can we refactor this into an object with state that the shadow holds on to?</li></ul>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2020-Nov-09 11:59", "status": "new", "created": "2020-Sep-04 16:38", "fixed_version": "2020-Sep-04 16:38", "broken_version": "", "priority": "3", "subsystem": "Security", "assigned_to": "tannenba", "derived_from": "#7482", "creator": "tannenba", "rust": "", "customer_group": "chtc", "visibility": "public", "notify": "", "due_date": ""}