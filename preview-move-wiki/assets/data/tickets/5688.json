{"id": 5688, "title": "Ticket #5688: Add JSON parsing/unparsing for ClassAds", "description": "<blockquote>\nJSON is a popular data format that's very similar to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>, with lists and records of simple data values that can be nested arbitrarily. It would be very handy to parse JSON in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> and vice versa.\n\n<p>The main difference between <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> and JSON is that JSON doesn't support expressions with operators or functions. We can address this difference by representing expressions in JSON as decorated strings that can be recognized by the JSON-to-ClassAd parser.\n\n</p><p><span class=\"subsection\"></span></p><h3>Differences between ClassAds and JSON</h3>\n\n<p></p><ul>\n<li>Simple data types\n<ul>\n<li><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> have absolute and relative time types.\n</li><li><span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> have the <code>Error</code> value.\n</li><li>JSON does not make a strong distinction between integer and floating point numbers. Special values like Inf or NaN are not allowed.\n</li><li>The <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> value <code>Undefined</code> can be mapped to JSON's <code>null</code>.\n</li><li>JSON strings allow Unicode characters. In UTF-8 encoding (the default), most characters don't require an escape sequence. <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> strings are ASCII, with an escape notation for 8-bit non-ASCII values.\n</li></ul>\n</li><li>Records (<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> vs JSON objects)\n<ul>\n<li>The names in JSON objects are case-sensitive. Implementations can choose whether to preserve order and how to handle duplicate names.\n</li></ul>\n</li><li>Expressions\n<ul>\n<li>JSON doesn't support operators or functions.\n</li></ul>\n</li></ul>\n\n<p>For all data types in <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> that cannot be directly represented in JSON, we will represent them as annotated strings that the JSON-&gt;ClassAd parser can recognize and restore to their original form. We are borrowing an idea that Microsoft used to represent dates as a special data types (<a class=\"external\" href=\"http://weblogs.asp.net/bleroy/dates-and-json\">http://weblogs.asp.net/bleroy/dates-and-json</a>).\n\n</p><p>In JSON, forward slash is one of the characters that can be escaped by a back slash inside a string, even though there's no need to do so. We can use this odd feature to represent an expression as a string in such a way that we can recognize it as something other than a simple string if we parse the JSON back into <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.\n\n</p><p>Here is how we'd represent the expression <code>A + B</code> in JSON:\n</p><div class=\"code\">\n<pre class=\"code\">\"\\/Expr(A + B)\\/\"</pre></div>\n\n\n<p>If our JSON-to-ClassAd parser sees this string, it will parse the text between the parentheses as normal <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> syntax. Other JSON parsers will treat it as a normal string.\n\n</p><p>All <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> values should round-trip properly when rendered as JSON and read back directly. If the JSON text is parsed and unparsed by some other JSON library, then expressions may not be recognized, as they may no longer have the escaped slashes. Also, the distinction between integer and real numbers may be lost (integer becomes real or vice versa).\n\n</p><p>JSON text can suffer some damage when round-tripped through <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>.\nDuplicate item names and ordering of items in an object are not preserved, but this is allowed by the JSON spec.\nIf a JSON object contains multiple items whose names vary only in alphabetic case, then only one of the items will remain. This is not allowed by the spec.</p></blockquote>", "remarks": "<blockquote>\n<em>2016-May-31 14:54:54 by jfrey:</em> <br/>\n\nThe new -json option to condor_q and condor_status prints multiple JSON objects with only a newline for separation. The JSON parser for <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> will read this back properly, returning one ad each time it's invoked. But the output as a whole is not a valid JSON document. If that is a concern, we could insert a more-easily recognizable separator between objects or render the entire output as a list of objects (with list begin/end characters at the start and end).</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-13 12:08</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48777\">[48777]</a></span>: Docs for new -json <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> format option. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jul-13 10:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48776\">[48776]</a></span>: Add -json option to condor_history. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jun-27 16:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48671\">[48671]</a></span>: Fix <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> JSON printing with a white-list. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span> Placing a single <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> in two <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> simultaneously messes up the parentScope and causes a crash in some cases. Copy the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> instead. This mirrors a fix in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> XML printing code.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jun-20 14:47</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48592\">[48592]</a></span>: Turn -json output into a proper JSON array. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span> Previously, it was a bunch of JSON objects concatenated together, which any normal JSON reader wouldn't like.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-Jun-02 10:03</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48466\">[48466]</a></span>: for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span>, set miniumum characters for the \"json\" argument to 2 for both condor_q and condor_status.  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-May-31 14:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48453\">[48453]</a></span>: Add -json option to condor_q and condor_status. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span> This option causes ads to be printed in JSON.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-May-31 09:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48444\">[48444]</a></span>: Move windows build fix into header file. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-May-31 09:21</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48443\">[48443]</a></span>: Fix build error on Windows. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-May-27 21:48</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48442\">[48442]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span>) Package json include files in classad-devel  (By Tim Theisen )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2016-May-27 16:34</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=48438\">[48438]</a></span>: Add parser/unparser for JSON to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span>. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5688\" onclick=\"get_ticket_and_populate_wrapper('5688'); return false;\" title=\"Add JSON parsing/unparsing for ClassAds\">#5688</a></span> New classes <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAdJsonParser\" title=\"Class Ad Json Parser\">ClassAdJsonParser</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAdJsonUnparser\" title=\"Class Ad Json Unparser\">ClassAdJsonUnparser</a></span> will turn JSON into <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> and vice versa. <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> expressions and values that can't be represented in JSON are rendered as decorated strings like so: \"\\/Expr(A + B)\\/\" The parser recognizes this format\u00a0[...]\n (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2016-Jul-21 07:29", "status": "resolved", "created": "2016-May-24 15:57", "fixed_version": "2016-May-24 15:57", "broken_version": "v080500", "priority": "3", "subsystem": "ClassAd", "assigned_to": "jfrey", "derived_from": "", "creator": "jfrey", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}