{"id": 7333, "title": "Ticket #7333: Develop an EC2 provisioner job based on condor_annex", "description": "<blockquote>\nWe want the ability to provision remote compute resources (for example on Amazon EC2) and then run condor jobs on these resources as part of a workflow.\n\n<p>In <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5622\" onclick=\"get_ticket_and_populate_wrapper('5622'); return false;\" title='Allow \"provisioning\" nodes in a DAG?'>#5622</a></span> we discuss how to integrate a \"resource provisioner\" into condor_dagman. However that ticket only deals with how a provisioning step fits into a condor workflow. It does not deal with the actual provision logic: how does a running job communicate with Amazon EC2 to allocate resources? How does this job know when resources are ready? How does this job terminate these resources when no longer needed?\n\n</p><p>Now we want to look at the actual logic for the provisioning job. Some important points to think about:\n</p><ul>\n<li>How does this job communicate with an external compute service?\n</li><li>What are the various states of a provisioning job?\n</li><li>How does this job advertise its state to the outside world, such that other forces can act on it?\n</li><li>How do we react to failure in a provisioning job?\n</li></ul>\n\n<p>We'll develop such a provisioning job that runs on the CHTC pool for now. A design doc will become available below once I get a ticket number and create it.</p></blockquote>", "remarks": "<blockquote>\n<em>2020-Apr-15 16:21:50 by tlmiller:</em> <br/>\n\n<ul>\n<li>How does this job communicate with an external compute service?\n<ul>\n<li>Why does DAGMan care?  Or to put it another way, the next three questions are integration issues, but this one does not appear to be.\n</li></ul>\n</li><li>What are the various states of a provisioning job?\n<ul>\n<li>Again looking at this from DAGMan's PoV, I think the major question is if we care about submitting the provisioned-for jobs before the provisioner indicates that the resources are ready.  If we don't, I'm not sure what DAGMan needs to know.\n</li><li>For the user whose credit card is being charged, I don't know.  Maybe the job ad, maybe just <code>condor_annex status</code> (or the equivalent tool).\n</li></ul>\n</li><li>How does this job advertise its state to the outside world, such that other forces can act on it?\n<ul>\n<li>What does DAGMan currently look at?  Just the event log, IIRC.  The provisioner can probably just chirp whatever it needs into the event log (assuming it needs anything at all).\n</li><li>For the user whose credit card is being charged, that's a good question.\n</li></ul>\n</li><li>How do we react to failure in a provisioning job?\n<ul>\n<li>Since they are nodes, we have a lot of tools already, particularly in managing retries.  What we may not have is a good idea of how to handle the need to run a clean-up step.  This may be a good reason to presume that most provisioning nodes will actually be sub-dags, if I recall how a FINAL nodes works properly.  This has the side-benefit of allowing people to pass around complicated provisioning scripts/workflows while keeping them easy to integrate.</li></ul>\n</li></ul>\n</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2020-Apr-15 16:21", "status": "new", "created": "2019-Oct-21 11:44", "fixed_version": "2019-Oct-21 11:44", "broken_version": "", "priority": "3", "subsystem": "Annex", "assigned_to": "coatsworth", "derived_from": "#5622", "creator": "coatsworth", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}