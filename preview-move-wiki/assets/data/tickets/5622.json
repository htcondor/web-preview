{"id": 5622, "title": "Ticket #5622: Allow \"provisioning\" nodes in a DAG?", "description": "<blockquote>\nMiron wants me to at least think about allowing \"provisioning\" nodes in a DAG.  These are nodes that would be submitted to the queue before any other nodes, and would remain in the queue as long as the DAG is running, and then get killed (condor_rm'ed?) at the end of the DAG.\n\n<p>One issue is how these nodes would work with rescue DAGs.\n\n</p><p>A design document for this topic is available here: <a class=\"external\" href=\"https://docs.google.com/document/d/11EO2qNFLeUZOYMh1VS0rMAiRN283saDs-NSAm3DfaY0\">https://docs.google.com/document/d/11EO2qNFLeUZOYMh1VS0rMAiRN283saDs-NSAm3DfaY0</a>\n\n</p><p>(An older design document written by wenger covers some ideas for this and also <span class=\"ticket\"><a class=\"active\" href=\"/tickets?ticket=5725\" onclick=\"get_ticket_and_populate_wrapper('5725'); return false;\" title='Think about DAGMan \"authorization\" nodes'>#5725</a></span>: <a class=\"external\" href=\"https://docs.google.com/document/d/1ZdDbsBZVL6Bbb9ks4y9ZEMFLfKA6qe5ItFT6djY_eoo/edit#heading=h.mx9oufbyi9xl\">https://docs.google.com/document/d/1ZdDbsBZVL6Bbb9ks4y9ZEMFLfKA6qe5ItFT6djY_eoo/edit#heading=h.mx9oufbyi9xl</a>)</p></blockquote>", "remarks": "<blockquote>\n<em>2016-Apr-12 15:44:23 by wenger:</em> <br/>\n\nJust brainstorming about this a little bit -- maybe one way to implement it would be to make the \"provisioning\" nodes parents of everything that doesn't have a parent; and then, once the provisioning nodes are submitted (or start running?), we remove those parent-child relationships, so the \"regular\" nodes would get submitted.  (And then we'd obviously have to clean up the \"provisioning\" nodes at the end.)\n\n<p>(I'm not sure if we really want to do it that way, or just keep a completely separate list of provisioning nodes, and not start submitting the \"regular\" nodes until the provisioning nodes are running.)\n\n</p><p>One pretty big question is this:  do we want to start submitting the \"regular\" nodes as soon as all of the provisioning nodes are submitted?  Or do we have to wait for the provisioning nodes to actually run?  And what happens if the provisioning nodes are evicted, or fail?\n\n</p><p>Also, what syntax do we want to use?  Do we want to say something like\n\n</p><p></p><pre>  JOB foo foo.cmd\n  PROVISIONING foo\n</pre>\n\n<p>or just\n\n</p><p></p><pre>  PROVISIONING foo foo.cmd\n</pre>\n\n<p></p><hr/>\n<em>2016-Apr-15 16:16:50 by wenger:</em> <br/>\n\nJust thinking about this during/after the team meeting.  My current idea is to do something like this:\n\n<p></p><pre>  job Prov prov.sub\n  provision Prov [for NodeA NodeB ...]\n</pre>\n\n<p>If you omit the \"for ...\" part, the provisioning node would be for all nodes in the DAG; if you specify nodes, it would be for only those nodes.  You should be able to have multiple provision statements for the same provisioning node.\n\n</p><p>Maybe phase 1 would only be \"provision for the entire DAG\".\n\n</p><p>(One other note:  I've run into some cases where something like this would be useful for testing.  I don't remember the specific cases right now, but I <strong>know</strong> I've hit cases where it would be useful to be able to say, \"submit node Y once node X is in the queue\".)\n\n</p><p></p><hr/>\n<em>2016-Apr-18 16:18:43 by wenger:</em> <br/>\n\nSomething else to think about:  what should happen if the/a provisioning node fails?  Should all of the \"regular\" nodes dependent on that provisioning node be removed?  Maybe we need to allow users a choice on this; if so, I think the selection should be made with actual DAG commands rather than in configuration.\n\n<p>Also, should retries be allowed on provisioning nodes?\n\n</p><p></p><hr/>\n<em>2016-Apr-18 16:21:34 by wenger:</em> <br/>\n\nHmm -- another question:  if we allow provisioning nodes to be tied to specific subsets of \"regular\" nodes, how should the dependencies work?  Should the provisioning node be submitted when its first \"regular\" node is ready?  Or should we allow explicit parent/child relationships on provisioning nodes?  On first thought, I'm leaning towards the former; however, maybe we don't really need to figure that out for phase 1.\n\n<p></p><hr/>\n<em>2016-Apr-18 21:30:48 by bbockelm:</em> <br/>\n\nThis is something that CMS could use.\n\n<p>Our DAGMan-based application has a few 'maintenance' tasks that are currently fairly hacky.  We're looking at having the condor schedd universe job fork the condor_dagman process but do these maintenance tasks threads managed by the parent CMS-launched process.\n\n</p><p>Needless to say, if dagman could manage these for us, it would be an improvement.\n\n</p><p></p><hr/>\n<em>2016-Apr-19 10:27:59 by tlmiller:</em> <br/>\n\nFrom the point of view of using condor_annex or glide-ins as provisioning nodes, the provisioning job(s) -- and that itself is an important question for later -- must be running for job submission to be worthwhile, because the jobs will otherwise just sit idle in the queue, waiting for their required resource(s).  I guess it wouldn't hurt to submit them, if it would help some other use-case.\n\n<p>My perspective on eviction and failure is that some kinds of provisioning will be general, and some kinds specific.  For specific provisioning, e.g., I need a GPU machine from EC2, if the job isn't running -- for whatever reason -- DAGMan should stop submitting \"regular\" jobs until the provisioning node gives up on its retries.  (At which point the DAG knows it can make no more progress and should stop.)\n\n</p><p>For general provisioning, e.g., glide-ins, DAGMan should not submit more \"regular\" jobs than running jobs from the provisioning node(s), which should probably be configured by the user to retry a lot.  (Both Spot instances and glide-ins can spontaneously terminate, so \"retries\" in that sense should happen rather frequently.)\n\n</p><p>These two categories may map to \"provision a specific subgraph\" and \"provision for the entire dag\", but they may not... the generalization may be that if you need a specific count of resources to make progress, you should have that many provisioning nodes (since each one must be running), but if you only want a lot of resources, you should submit a cluster.\n\n</p><p></p><hr/>\n<em>2016-Apr-19 10:57:27 by wenger:</em> <br/>\n\nA few notes on this...\n\n<p>First of all, when Miron initially talked to me about it, he said that he wanted me to initially mainly focus on the \"one provisioning node for the whole DAG\" scenario.\n\n</p><p>Anyhow, it sounds like we definitely want retries on provisioning nodes.  If I'm understanding correctly what Todd is saying, he wants the DAG to wait until the provisioning node is actually running (not just submitted) before it submits the associated \"regular\" nodes.  (I wonder if that's something else we'll have to give the user a choice about.)\n\n</p><p>Also, it sounds like we need something like this eventually:\n\n</p><p></p><pre>  PROVISION &lt;node&gt; &lt;node&gt; ... FOR &lt;node&gt; &lt;node&gt; ...\n</pre>\n\n<p>where you can have multiple provisioning nodes associated with a set of \"regular\" nodes.  I guess, then, we also have to have a way of specifying whether you can only submit one \"regular\" node per running provisioning node, or whether there's some other relationship between the provisioning nodes and \"regular\" nodes.\n\n</p><p>Hmm -- here's another question I just thought of:  if you have a provisioning node and a final node, should the final node get run before or after the provisioning node is removed?  My initial thought is after, but I'm not sure about that.  (I'm assuming that if things work correctly, DAGMan will remove the provisioning node after all of the associated \"regular\" nodes finish.)\n\n</p><p></p><hr/>\n<em>2016-Apr-19 11:59:58 by wenger:</em> <br/>\n\nJust talked with Todd Miller about this.  We discussed that (unless we specifically prevent it), it will probably be possible to have a sub-DAG as a provisioning node.  (We're not sure how useful this will be, though.)\n\n<p>We think it would be useful to eventually allow splices to be both provisioning \"nodes\" and to define a sub-part of the workflow to be dependent on a particular provisioning node.  (This would be another case where \"socket\" nodes would help with the implementation.)  (Having splices as provisioning nodes would <strong>not</strong> happen automatically, the way sub-DAGs as provisioning nodes would.)\n\n</p><p></p><hr/>\n<em>2016-Jun-10 17:04:42 by wenger:</em> <br/>\n\nAlso see <span class=\"ticket\"><a class=\"active\" href=\"/tickets?ticket=5725\" onclick=\"get_ticket_and_populate_wrapper('5725'); return false;\" title='Think about DAGMan \"authorization\" nodes'>#5725</a></span>: Think about DAGMan \"authorization\" nodes.\n\n<p></p><hr/>\n<em>2016-Jul-01 12:36:15 by wenger:</em> <br/>\n\nWorking on joint #5622/#5725 design doc here: <a class=\"external\" href=\"https://docs.google.com/document/d/1ZdDbsBZVL6Bbb9ks4y9ZEMFLfKA6qe5ItFT6djY_eoo/edit#heading=h.mx9oufbyi9xl\">https://docs.google.com/document/d/1ZdDbsBZVL6Bbb9ks4y9ZEMFLfKA6qe5ItFT6djY_eoo/edit#heading=h.mx9oufbyi9xl</a>\n\n<p></p><hr/>\n<em>2020-Apr-15 15:25:39 by coatsworth:</em> <br/>\n\nI've implemented a very basic provisioner node in DAGMan. You define it in your .dag file with the following example syntax:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">PROVISIONER MyEC2Provisioner ec2-provisioner.py\n</pre></div>\n\n\n<p>Right now it's just a simple job that starts at the beginning of the DAG and runs for as long as the user tells it to. There is a lot more work to be done, but given the complexity and design confusion I'm planning to add it in incrementally. So for now I'm closing this ticket and will continue work in a future ticket.\n\n</p><p>I've also created a new master ticket in <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=7600\" onclick=\"get_ticket_and_populate_wrapper('7600'); return false;\" title=\"Implement resource provisioning in condor\">#7600</a></span> which I'll link all future work to.\n\n</p><p></p><hr/>\n<em>2020-Apr-15 15:41:12 by tlmiller:</em> <br/>\n\nMade copy of previously-linked Google Doc, because Google said it might be going away soon:\n\n<p><a class=\"external\" href=\"https://docs.google.com/document/d/1VTT7Xzaxi75Ipy7vsDXy-dFZLRbSBJyTMqTU8C5Fn8w\">https://docs.google.com/document/d/1VTT7Xzaxi75Ipy7vsDXy-dFZLRbSBJyTMqTU8C5Fn8w</a></p></blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=7333\" onclick=\"get_ticket_and_populate_wrapper('7333'); return false;\" title=\"Develop an EC2 provisioner job based on condor_annex\">#7333</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDevelop an EC2 provisioner job based on condor_annex</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Apr-15 16:31</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59358\">[59358]</a></span>: Added version history (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5622\" onclick=\"get_ticket_and_populate_wrapper('5622'); return false;\" title='Allow \"provisioning\" nodes in a DAG?'>#5622</a></span>) Committer: Tim Theisen  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Apr-15 16:03</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59357\">[59357]</a></span>: Added version history (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5622\" onclick=\"get_ticket_and_populate_wrapper('5622'); return false;\" title='Allow \"provisioning\" nodes in a DAG?'>#5622</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Apr-10 11:09</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59303\">[59303]</a></span>: Provisioner node assertion bug (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5622\" onclick=\"get_ticket_and_populate_wrapper('5622'); return false;\" title='Allow \"provisioning\" nodes in a DAG?'>#5622</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Apr-09 14:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59302\">[59302]</a></span>: Merged <span class=\"chng\"><a href=\"chngview?cn=59208\">[59208]</a></span>, <span class=\"chng\"><a href=\"chngview?cn=59301\">[59301]</a></span>, Merging basic provisioner nodes into master branch (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5622\" onclick=\"get_ticket_and_populate_wrapper('5622'); return false;\" title='Allow \"provisioning\" nodes in a DAG?'>#5622</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Apr-09 14:57</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59301\">[59301]</a></span>: Added PROVISIONER to parse language (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5622\" onclick=\"get_ticket_and_populate_wrapper('5622'); return false;\" title='Allow \"provisioning\" nodes in a DAG?'>#5622</a></span>)  (By Mark Coatsworth )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2020-Mar-27 14:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=59208\">[59208]</a></span>: Added new <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=NodeType\" title=\"Node Type\">NodeType</a></span> enum (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5622\" onclick=\"get_ticket_and_populate_wrapper('5622'); return false;\" title='Allow \"provisioning\" nodes in a DAG?'>#5622</a></span>)  (By Mark Coatsworth )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2020-Apr-15 16:07", "status": "resolved", "created": "2016-Apr-12 14:47", "fixed_version": "2016-Apr-12 14:47", "broken_version": "v080504", "priority": "2", "subsystem": "Dag", "assigned_to": "coatsworth", "derived_from": "#7600", "creator": "wenger", "rust": "", "customer_group": "other", "visibility": "public", "notify": "zmiller@cs.wisc.edu, tannenba@cs.wisc.edu, miron@cs.wisc.edu, tlmiller@cs.wisc.edu, coatsworth@cs.wisc.edu", "due_date": ""}