{"id": 2177, "title": "Ticket #2177: Write our own base64 encoding/decoding routine", "description": "<blockquote>\nA base64 encoding/decoding library is pretty easy, at least until you have to interface with others' code.  This is implemented so that we can get rid of the <code>HAVE_EXT_OPENSSL</code> in <code>src/condor_utils/condor_base64.cpp</code>.\n\n<p>This has been tested with <code>condor_ssh_to_job</code> and found to work.\n\n</p><p>The soap code has its own condor_base64 routines.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-May-20 08:54:06 by bbockelm:</em> <br/>\n\nDumb question - what does this buy us?  I didn't quite understand the motivation in the ticket.\n\n<p></p><hr/>\n<em>2011-May-20 09:10:03 by nwp:</em> <br/>\n\nThe reason is that Nick says he can now do condor_ssh_to_job on Solaris, since he has never been able to build openssl there.\n\n<p></p><hr/>\n<em>2011-May-20 09:17:49 by matt:</em> <br/>\n\n+1 Brian. Also, what is the benefit of writing your own base64 encode/decode when there are public domain ones floating around? Solaris, will you please just sub in a custom base64 encode/decode for Solaris and let all other platforms use OpenSSL? A comment next to the \"#ifdef SOLARIS\" that says it is for ssh_to_job and Nick would be great when someone comes along later to clean it up - say when we have openssl on solaris.\n\n<p>We really can't get openssl to compile on solaris?\n\n</p><p></p><hr/>\n<em>2011-May-20 09:35:43 by nwp:</em> <br/>\n\nIt's trivial; it took me maybe two hours to write, and it removes one dependency from the build.  The only reason we are having this discussion is because I wrote up a stupid ticket.\n\n<p></p><hr/>\n<em>2011-May-20 10:04:25 by danb:</em> <br/>\n\nIt is annoying to have to sprinkle ifdefs all over in the code just because a feature happens to make use of base64 encoding.  I hope it's not necessary to justify the scratching of a small itch like that.\n\n<p></p><hr/>\n<em>2011-May-20 10:35:56 by bbockelm:</em> <br/>\n\nHi Dan,\n\n<p>The reason it caught my eye was:\n</p><ul>\n<li>My mind associates base64 with security algorithms and the first rule of security algorithms is make someone else write them.\n</li><li>I didn't really understand why it was necessary.\nI think Nathan addressed both issues.  I'm not saying you can't scratch an itch, but it did cause an itch of my own that I scratched ;)\n</li></ul>\n\n<p>Would there be any reason to use the OpenSSL variants if available?  Or is one base64 implementation as good as any other for our purposes?\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2011-May-20 10:51:13 by nwp:</em> <br/>\n\nWhen I was discussing this with Nick and Dan yesterday, Dan said that there are a couple variants of base64 that cause problems when they interface with code that expects a certain rigid format.  As noted in the original ticket message, soap has its own condor_base64_encode routine that this branch does not touch---from my discussion with Dan, I guessed that it was the variant that was incompatible.\n\n<p>Laziness is a virtue in a programmer: why write code (especially security code) if it is already written and tested?  I agree with that statement; but this has been annoying for a while; I had some time yesterday afternoon; and so I wrote the code. If someone can get openssl to build on all our platforms, I am more than happy to revert or drop this branch (it has not been merged yet).\n\n</p><p></p><hr/>\n<em>2011-May-20 10:55:33 by matt:</em> <br/>\n\nAll supported platforms, of which Solaris is not currently one (currently: x86_64_deb_5.0, x86_64_deb_6.0-updated, x86_64_rhap_5, x86_64_rhas_3, x86_deb_5.0, x86_macos_10.4, x86_rhap_5, x86_rhas_3, x86_winnt_5.1), have a working implementation of OpenSSL. Carrying our own implementation of base64 encode/decode for such a corner case is difficult to take, especially when giving up a very heavily used implementation in OpenSSL's.\n\n<p>Any #ifdef would be localized to the src/condor_utils/condor_base64.cpp implementation, or we have an interface issue to resolve.\n\n</p><p>I'm all for nice interfaces that abstract underlying system implementations, but treat Solaris specially here, as it is.\n\n</p><p>Please reconsider.\n\n</p><p></p><hr/>\n<em>2011-May-20 10:58:40 by matt:</em> <br/>\n\nBTW, the soapshell implementation is a good example of what's going wrong here. AFAIK, the soapshell was only ever supposed to be a one off implementation for a specific customer done by Todd. It wasn't actually built until fairly recently, like the dagman node_scheduler, it hung out in limbo.\n\n<p></p><hr/>\n<em>2011-May-20 11:42:17 by nwp:</em> <br/>\n\nOK, I fixed it: If we have OPENSSL, use the old version.  Otherwise, we use the local version of base64.\n\n<p></p><hr/>\n<em>2011-May-20 12:59:16 by nwp:</em> <br/>\n\nProbably should try to get Nick to build <code>condor_ssh_to_job</code> successfully before merging this, but I am going to send this to Dan for review\n\n<p></p><hr/>\n<em>2011-May-21 08:16:48 by danb:</em> <br/>\n\nNate,\n\n<p>Quick code review:\n\n</p><p>decode_table_initialized is never set to non-zero.  That variable could be static too.  What do you think about making b64_decode_table const data?  That would save a little private memory, but I'm not going to quibble over 1k on platforms that lack openssl.\n\n</p><p>Long ago I was told that Condor coding style required the use of {}'s for all control-flow statements (i.e. including those with one-line bodies).  I've been trying to live by that ever since.  I found it ugly at first, but now I'm used to it.  I don't know how strictly others are living by it.\n\n</p><p>Other than that, I don't spot anything to prevent this patch from being merged into master.\n\n</p><p>Thanks again for the code!\n\n</p><p></p><hr/>\n<em>2011-May-21 20:08:04 by nleroy:</em> <br/>\n\nI'd like to correct Nathan a bit...  It's not that I've been unable to build openSSL on Solaris, rather it's that I've been unable to build an openSSL that Condor will link with on Solaris X86/64 (IIRC, it has something to due with 64 vs 32 bit ELF records, or something like that).\n\n<p>Not trying to be nitpicky, just want to be accurate.\n\n</p><p></p><hr/>\n<em>2011-May-24 16:46:49 by nleroy:</em> <br/>\n\n<code>condor_ssh_to_job</code> still fails on Solaris x86 because we're still unable to setup a security session (see below).  Although we now have an base64 encoding, we're still missing a working MD5.  Note oneWayHashKey() below.  I'm not sure if there's an easy way to work around not having a way to generate an MD5 has, perhaps Zach could shed some light...\n\n<p></p><div class=\"code\">\n<pre class=\"code\">unsigned char * Condor_Crypt_Base :: oneWayHashKey(const char * initialKey)\n{\n#ifdef HAVE_EXT_OPENSSL\n    return Condor_MD_MAC::computeOnce((unsigned char *)initialKey, strlen(initialKey));\n#else\n    return NULL;\n#endif\n}\n</pre></div>\n\n\n<p></p><div class=\"code\">\n<pre class=\"code\">05/24/11 16:32:35 DC_AUTHENTICATE: sent session nmi-v027:14341:1306272755:0 info!\n05/24/11 16:32:35 DC_AUTHENTICATE: added incoming session id nmi-v027:14341:1306272755:0 to cache for 86420 seconds (lease is 3620s, return address is &lt;192.168.14.27:56384&gt;).\nEnact = \"YES\"\nRemoteVersion = \"$CondorVersion: 7.7.0 May 24 2011 PRE-RELEASE-UWCS $\"\nSubsystem = \"SCHEDD\"\nAuthMethodsList = \"FS\"\nSid = \"nmi-v027:14341:1306272755:0\"\nCryptoMethods = \"\"\nServerCommandSock = \"&lt;192.168.14.27:56384&gt;\"\nValidCommands = \"60000,60008,60017,1500,1501,60004,60012,1200,487,500,60007,457,1502\"\nParentUniqueID = \"nmi-v027:13756:1306268770\"\nSessionLease = 3600\nAuthentication = \"NO\"\nServerPid = 14347\nAuthMethods = \"FS\"\nEncryption = \"NO\"\nIntegrity = \"NO\"\nUser = \"unauthenticated@unmapped\"\nCurrentTime = time()\nSessionDuration = \"86400\"\n05/24/11 16:32:35 DC_AUTHENTICATE: Success.\n05/24/11 16:32:35 PERMISSION GRANTED to unauthenticated@unmapped from host 192.168.14.27 for command 1501 (CREATE_JOB_OWNER_SEC_SESSION), access level DAEMON: reason: DAEMON authorization policy allows access by anyone\n05/24/11 16:32:35 IpVerify::PunchHole: opened READ level to nleroy@nmi-v027.batlab.cs.wisc.edu\n05/24/11 16:32:35 SECMAN: failed to create non-negotiated security session 69215c13e1712c7df6f01b148165795a5b84260c0a278408 because oneWayHashKey() failed.\n05/24/11 16:32:35 createJobOwnerSecSession failed: Failed to create security session.\n05/24/11 16:32:36 In VanillaProc::PublishUpdateAd()\n05/24/11 16:32:36 Inside OsProc::PublishUpdateAd()\n05/24/11 16:32:36 Inside UserProc::PublishUpdateAd()\n05/24/11 16:32:36 Entering JICShadow::updateShadow()\n05/24/11 16:32:36 In VanillaProc::PublishUpdateAd()\n05/24/11 16:32:36 Inside OsProc::PublishUpdateAd()\n05/24/11 16:32:36 Inside UserProc::PublishUpdateAd()\n05/24/11 16:32:36 Sent job ClassAd update to startd.\n05/24/11 16:32:36 Leaving JICShadow::updateShadow(): success\n</pre></div>\n\n\n<p></p><hr/>\n<em>2011-May-24 16:58:08 by nleroy:</em> <br/>\n\nUpdate, copied from an IM session with Nate:\n<div class=\"code\">\n<pre class=\"code\">(04:52:28 PM) nleroy: Hmmm, it looks like RSA has an md5.cpp that's licensed under a BSD-style license.\n(04:52:58 PM) nleroy: http://www.codeguru.com/cpp/cpp/algorithms/article.php/c5087/#more\n(04:53:47 PM) nleroy: http://www.codeguru.com/code/legacy/algorithms/MD5_v10.zip\n</pre></div>\n\n\n<p>Bottom line: There appears to be md5sum code that should be legal for us to add similarly to the way Nathan added the base64 encoding.</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-May-21 13:46</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/85d2f8719fe47117a6c85019cc3eb3db73108d7b\">[21953]</a></span>: Changes encouraged by Dan's review ===GT=== <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2177\" onclick=\"get_ticket_and_populate_wrapper('2177'); return false;\" title=\"Write our own base64 encoding/decoding routine\">#2177</a></span> Have a statically allocated const table here, instead of initializing at run-time. Some whitespace changes, and stylistic changes on braces.  (By Nathan W. Panike )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-May-20 11:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/64a9e086aea90ae4a2767845668a5ccbf5d9aebf\">[21934]</a></span>: Use SSL version of base64 if we have it ===GT=== <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2177\" onclick=\"get_ticket_and_populate_wrapper('2177'); return false;\" title=\"Write our own base64 encoding/decoding routine\">#2177</a></span> Otherwise, we use our home-grown one  (By Nathan W. Panike )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-May-20 09:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a49e88fb199150c9116bd720c51fcb6faeb59892\">[21930]</a></span>: Do not need openssl for ssh_to_job anymore ===GT=== <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2177\" onclick=\"get_ticket_and_populate_wrapper('2177'); return false;\" title=\"Write our own base64 encoding/decoding routine\">#2177</a></span> Take out the error in the cmake configuration  (By Nathan W. Panike )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-May-20 08:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/f5295186d4d672607ff912e6c07fd7bf19d63ebe\">[21928]</a></span>: Implement our own condor_base64 encoding/decoding ===GT=== <span class=\"ticket\"><a class=\"abandoned\" href=\"/tickets?ticket=2177\" onclick=\"get_ticket_and_populate_wrapper('2177'); return false;\" title=\"Write our own base64 encoding/decoding routine\">#2177</a></span> This has been tested with condor_ssh_to_job and found to work.  (By Nathan W. Panike )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2018-Nov-12 15:17", "status": "abandoned", "created": "2011-May-20 08:32", "fixed_version": "2011-May-20 08:32", "broken_version": "", "priority": "5", "subsystem": "Tools", "assigned_to": "", "derived_from": "", "creator": "nwp", "rust": "", "customer_group": "other", "visibility": "public", "notify": "dan@hep.wisc.edu,nleroy@cs.wisc.edu", "due_date": ""}