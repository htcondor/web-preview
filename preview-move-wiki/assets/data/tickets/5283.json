{"id": 5283, "title": "Ticket #5283: Shared port deadlock on Windows?", "description": "<blockquote>\nThe test <strong>job_dagman_submit_parse</strong> fails pretty regularly on Windows when the default for <code>USE_SHARED_PORT</code> is changed to true.  The symptom is a time-out.\n\n<p>The last thing the test prints is \"Good. We need the dag to run&lt;1&gt;\".  The next thing that's supposed to happen is the test noticing a DAGMan failure.  DAGMan properly prints out\n\n</p><p></p><div class=\"verbatim\">\n<pre>09/25/15 15:00:30 ERROR: node B: job ID in userlog submit event (3.0.0) doesn't\nmatch ID reported earlier by submit command (0.0.0)!  Aborting DAG; set DAGMAN_A\nBORT_ON_SCARY_SUBMIT to false if you are *sure* this shouldn't cause an abort.\n</pre></div>\n\n\n<p>but its log ends with\n\n</p><p></p><div class=\"verbatim\">\n<pre>09/25/15 15:00:31 attempt to connect to &lt;128.104.103.14:46247&gt; failed: connect errno = 10048.  Will keep trying for 10 total seconds (10 to go).\n</pre></div>\n\n\n<p>rather than\n\n</p><p></p><div class=\"verbatim\">\n<pre>09/25/15 13:16:54 Wrote metrics file job_dagman_submit_parse.dag.metrics.\n09/25/15 13:16:54 Metrics reporting is not available on this platform.\n09/25/15 13:16:54 SharedPortEndpoint: Destructor: Problem in thread shutdown notification: 0\n09/25/15 13:16:54 **** condor_scheduniv_exec.1.0 (condor_DAGMAN) pid 21148 EXITING WITH STATUS 1\n</pre></div>\n\n\n<p>which would tend to indicate that the DAGMan process hung trying to contact a daemon (probably the schedd).  In the schedd log, we see\n\n</p><p></p><div class=\"verbatim\">\n<pre>09/25/15 15:00:31 (pid:11516) DaemonCore::Wake_up_select called from an unknown thread. windows tid = 7144\n</pre></div>\n\n...\n<div class=\"verbatim\">\n<pre>09/25/15 15:01:36 (pid:11516) condor_read(): timeout reading 5 bytes from collector at &lt;128.104.103.14:46247&gt;.\n09/25/15 15:01:36 (pid:11516) IO: Failed to read packet header\n09/25/15 15:01:36 (pid:11516) Failed to send RESCHEDULE to unknown daemon:\n</pre></div>\n\n\n<p>This makes me think that the shared port daemon locked up, since the collector does not record any connection attempts after 15:00:28 except for two negotiator ad updates.\n\n</p><p></p><hr/>\nWhile investigating why job_dagman_submit_parse fails on Windows when shared port is turned on, I took a gander at the Windows socket-passing code, and discovered that it is full of scary blocking writes to and reads from a named pipe.  Naturally, since it looked like the problem I was diagnosing was caused by or had a symptom of a daemon hanging, I went to look at what the passed-to side of the conversation was doing.\n\n<p>The passed-to (daemon) side of the conversation creates a named pipe, and then creates a thread in <code>SharedPortEndpoint::StartListener()</code> that blocks in the Windows equivalent of <code>accept()</code>.  This thread writes its process ID back to the pipe (so that the shared port daemon can duplicate the received FD into the daemon's process) and then does some magic to construct the socket.  (Windows sockets aren't just FDs.)  At this point, it grabs a lock, adds the new socket to the list of received sockets, and releases the lock.  (As far as I know, the lock operations are all OK.)\n\n</p><p>It then schedules an immediate timer so that the main daemon core thread will handle the rest of the communication.  It calls <code>Register_Timer_TS()</code> to do so.  (Which grabs a big mutex which I haven't examined.)  This function calls <code>Register_Timer</code>, which calls <code>TimerManager::NewTimer</code>.  <code>TimerManager::NewTimer</code> calls <code>InsertTimer</code>, which calls <code>DaemonCore::Wake_up_select()</code> if the next timer has changed.  (Which it probably has, given that we're registering an immediate timer.)  On Windows, if <code>Wake_up_select()</code> is called from anything other than the main thread, it does nothing.  If the daemon is just waiting around for connections, it may never pick up the phone.\n\n</p><p>On further review, there's a call to <code>Do_Wake_up_select()</code> in <code>Register_Timer_TS()</code>, inside the mutex, which should cause a write to the async pipe to occur.</p></blockquote>", "remarks": "<blockquote>\n<em>2015-Sep-30 17:23:22 by tlmiller:</em> <br/>\n\nIn test run ID 343215 I added some verbose debugging information to the shared port code.  In the DAGMan log, we see\n\n<p></p><div class=\"verbatim\">\n<pre>09/30/15 15:42:34 attempt to connect to &lt;128.104.103.11:39662&gt; failed: connect errno = 10048.  Will keep trying for 10 total seconds (10 to go).\n\n09/30/15 15:42:36 SharedPortClient: sent connection request to schedd at &lt;128.104.103.11:39662&gt; for shared port id 10820_1458_4\n</pre></div>\n\n\n<p>which does seem to make it virtually certain that the shared port daemon itself is hung.\n\n</p><p>The shared port log looks rather damning, with the following being the last four lines:\n\n</p><p></p><div class=\"verbatim\">\n<pre>09/30/15 15:42:34 SharedPortServer: request from SCHEDD\n&lt;128.104.103.11:39662?addrs=128.104.103.11-39662&amp;noUDP&amp;sock=10820_1458_4&gt; on\n&lt;128.104.103.11:22929&gt; to connect to 17172_b666_3. (CurPending=0 PeakPending=0)\n09/30/15 15:42:34 SharedPortClient::PassSocket(): Trying to open named pipe...\n09/30/15 15:42:34 SharedPortClient::PassSocket(): opened named pipe.\n09/30/15 15:42:34 SharedPortClient::PassSocket(): Trying to read from pipe...\n</pre></div>\n\n\n<p>as compared to earlier exchanges:\n\n</p><p></p><div class=\"verbatim\">\n<pre>09/30/15 15:42:33 SharedPortServer: request from TOOL on &lt;128.104.103.11:18403&gt;\nto connect to 10820_1458_4. (CurPending=0 PeakPending=0)\n09/30/15 15:42:33 SharedPortClient::PassSocket(): Trying to open named pipe...\n09/30/15 15:42:33 SharedPortClient::PassSocket(): opened named pipe.\n09/30/15 15:42:33 SharedPortClient::PassSocket(): Trying to read from pipe...\n09/30/15 15:42:33 SharedPortClient: Read PID: 17172\n09/30/15 15:42:33 SharedPortClient::PassSocket(): Duplicating socket...\n09/30/15 15:42:33 SharedPortClient::PassSocket(): Writing duplicated socket to pipe...\n09/30/15 15:42:33 SharedPortClient::PassSocket(): ... wrote duplicate socket to pipe.\n09/30/15 15:42:33 SharedPortClient: Wrote 376 bytes to named pipe.\n09/30/15 15:42:33 SharedPortClient::PassSocket(): returning TRUE...\n</pre></div>\n\n\n<p>Shared port Id 17172_b666_3 belongs to the shadow?!!?\n\n</p><p>The difference between the passing and failing shadow logs seems to be \"<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SharedPortEndpoint\" title=\"Shared Port Endpoint\">SharedPortEndpoint</a></span>: Client failed to connect: 535\".\n\n</p><p></p><hr/>\n<em>2015-Sep-30 17:32:45 by tlmiller:</em> <br/>\n\nFrom <a class=\"external\" href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms681388%28v=vs.85%29.aspx\">https://msdn.microsoft.com/en-us/library/windows/desktop/ms681388%28v=vs.85%29.aspx</a>\n\n<p></p><div class=\"verbatim\">\n<pre></pre></div>\n\nERROR_PIPE_CONNECTED\n\n<p></p><pre>    535 (0x217)\n</pre>\n\n<p></p><pre>    There is a process on other end of the pipe.\n<div class=\"verbatim\">\n<pre></pre></div>\n\n</pre>\n\n<p></p><hr/>\n<em>2015-Dec-04 09:39:09 by johnkn:</em> <br/>\n\nwhen the endpoint sees ERROR_PIPE_CONNECTED, it goes into a 100% cpu loop in the endpoint thread for a minute or two. see also <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5430\" onclick=\"get_ticket_and_populate_wrapper('5430'); return false;\" title=\"deadlock on windows when daemon talks to itself via shared port\">#5430</a></span> and related tickets.\n\n<p></p><hr/>\n<em>2015-Dec-14 16:35:11 by tim:</em> <br/>\n\n<strong>CODE REVIEW:</strong> This looks fine.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Dec-14 21:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=46586\">[46586]</a></span>: Version history for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5283\" onclick=\"get_ticket_and_populate_wrapper('5283'); return false;\" title=\"Shared port deadlock on Windows?\">#5283</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5430\" onclick=\"get_ticket_and_populate_wrapper('5430'); return false;\" title=\"deadlock on windows when daemon talks to itself via shared port\">#5430</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5431\" onclick=\"get_ticket_and_populate_wrapper('5431'); return false;\" title=\"shared port should fail when source and destination are the same\">#5431</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5432\" onclick=\"get_ticket_and_populate_wrapper('5432'); return false;\" title=\"collector doesn't always remove itself from collector list\">#5432</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5433\" onclick=\"get_ticket_and_populate_wrapper('5433'); return false;\" title=\"shared port on windows should hand sockets off without taking bigmutex\">#5433</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5434\" onclick=\"get_ticket_and_populate_wrapper('5434'); return false;\" title=\"Overflow error when setting cgroup vm limit when VM &gt; 2 gb\">#5434</a></span>  (By Tim Theisen )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Dec-04 09:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=46348\">[46348]</a></span>: fix for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=5283\" onclick=\"get_ticket_and_populate_wrapper('5283'); return false;\" title=\"Shared port deadlock on Windows?\">#5283</a></span>, a busy hang in shared point endpoint on Windows with ERROR_PIPE_CONNECTED as the constant error code. ===VersionHistory:Pending===  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2015-Dec-14 16:56", "status": "resolved", "created": "2015-Sep-29 15:22", "fixed_version": "2015-Sep-29 15:22", "broken_version": "", "priority": "4", "subsystem": "DaemonSharedP", "assigned_to": "johnkn", "derived_from": "#5103", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}