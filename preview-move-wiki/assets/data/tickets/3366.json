{"id": 3366, "title": "Ticket #3366: scaling higher when NEGOTIATOR_CONSIDER_PREMPTION=False", "description": "<blockquote>\n<span class=\"section\"><h2>Discussion </h2></span>\n\n<p>In the past (circa Condor 7.5.5), we did scale testing in a glideinWMS pool of up to 90k nodes [<a class=\"external\" href=\"http://iopscience.iop.org/1742-6596/331/6/062002\">1</a>].  The system demonstrated successful operation at this scale, but we did observe signs of an approaching scalability bottleneck in the negotiator.\n\n</p><p>In each matchmaking cycle, all machine and submitter ads are retrieved by the negotiator.  This creates a lot of overhead due to the time required to parse, allocate, and later deallocate memory for all the classads.\n\n</p><p>CMS glidein pools have NEGOTIATOR_CONSIDER_PREEMPTION=False.  This gives us an opportunity to make a big optimization.  In a typical matchmaking cycle, most of the slot ads are in Claimed state, so they are discarded after being counted by the accountant.  Very little information is actually needed from these ads: slot name, state, remote owner, concurrency limits.  The information that is transmitted could be just that, for each ad.  A deeper optimization would just have the collector give a summary (a sort of Group By query).  However, the current accountant needs the slot name, which is unique to each slot, so this route might require deeper changes in the accountant.\n\n</p><p>If the negotiator did two queries: one to get claimed slots and one to get idle ones, then there is a possibility that these two queries will be inconsistent unless they are somehow done in the same transaction.  Is this a concern?  My guess is it would not lead to unacceptable deviations from desired behavior, but we should think through worst and typical cases.\n\n</p><p><span class=\"section\"></span></p><h2>Proposed Solution</h2>\n\n<p>The simplest solution would be to have the negotiator do two queries: one to get the minimal set of attributes required for the accountant and one to get the ads for idle slots to be used in matchmaking.\n\n</p><p><span class=\"section\"></span></p><h2>Work Plan</h2>\n\n<p>Estimated time to implement and test the separate accountant query: 3 days</p></blockquote>", "remarks": "<blockquote>\n<em>2012-Dec-08 00:22:57 by sfiligoi:</em> <br/>\n\nCan the Collector serve more than one request per session?\n\n<p>If it can, given that the session is typically served by a worker process and thus is immutable, two successive queries would be almost as good as a single transaction (the only exception being when a worker process is not used).\n\n</p><p></p><hr/>\n<em>2012-Dec-10 09:26:12 by eje:</em> <br/>\n\nAn alternative to two queries might be to run a single modified query, where the collector sends abbreviated ads from its end when it detects a slot is claimed.\n\n<p>Also, dusting off <span class=\"ticket\"><a class=\"stalled\" href=\"/tickets?ticket=2899\" onclick=\"get_ticket_and_populate_wrapper('2899'); return false;\" title=\"classad lex/parse uses up to 50% of the compute time for daemons\">#2899</a></span> might be relevant for optimizing ad traffic costs.\n\n</p><p></p><hr/>\n<em>2012-Dec-10 13:52:28 by danb:</em> <br/>\n\nThe existing query protocol does not support multiple queries in the same TCP connection.\n\n<p></p><hr/>\n<em>2012-Dec-10 15:21:48 by eje:</em> <br/>\n\nI was imagining that a single stream of ads from one query could include both abbreviated ads and full ads.   It would require the collector to examine each ad, and send abbreviated copy of claimed ads on the fly, as it serviced the query.\n\n<p>In the pie-in-the-sky department, I've wondered what it would take to move toward an 'incremental update' model for the negotiator.  The collector (or even individual startds) would send only state changes on slot ads.\n\n</p><p></p><hr/>\n<em>2012-Dec-10 15:32:27 by sfiligoi:</em> <br/>\n\nCan we please keep this ticket limited to only short term, easy/fast to implement solutions?\n\n<p>I have nothing against re-writing half of Condor to get a perfect solution, if needed, but that should be discussed in a separate ticket (e.g. <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=1885\" onclick=\"get_ticket_and_populate_wrapper('1885'); return false;\" title=\"optimize fetching of ads by negotiator from collector\">#1885</a></span>).\n\n</p><p></p><hr/>\n<em>2012-Dec-11 09:04:34 by tannenba:</em> <br/>\n\nIf indeed most machines are CLAIMED and NEGOTIATOR_CONSIDER_PREEMPTION is false, having a projection of just the attributes required by the accountant for Claimed slots will likely give a huge performance boost.\n\n<p>I am not enamored with the idea of having to do two queries - it is twice the work on the collector side and you may end up with ads in both claimed and unclaimed lists, which is not likely to make the accountant very happy.  How about allowing the Projection attribute in the collector query ad be an expression instead of a string?  If it is an expression, the collector would then evaluate it in the context of the ad it is about to transmit.  This is easy to do, and would allow the negotiator to use one query and still get a different projection for Claimed slots.  I don't think the cost of doing the extra evaluation will make any difference in the collector - the collector could even safeguard in the common case of not doing the eval at all if Project attribute is a string.\n\n</p><p>Another quick thought: I would not be adverse to having a special command to the collector used solely by the negotiator to gather ads for matchmaking, if we think it would help.  I don't think it is needed, but since matchmaking is a pretty important function of the system, I'd be ok seeing the collector treat it special.\n\n</p><p>Another idea, although I do not have a good feel if this is something that could be started and completed in a couple days or if it is a more major implementation activity: If all the machine ads have ATTR_WANT_AD_REVAULATE not evaluate to True (this is common! but I am not sure if it is true in this CMS use case) such that the negotiator literally wants to delete all the ads fetched from the collector at the start of every cycle, then instead of the plain-ol default C++ allocator (new), we could use a memory pool in the negotiator to store all the ads fetched from the collector.  Perhaps boost's object_pool.  We know most of the time creating ads is all the memory allocation, and benchmarks using memory pools are typically 30x to 100x faster than new/delete.\n\n</p><p>Longer term, yes there are lots of things we can do, and agree that should be a separate discussion.\n\n</p><p></p><hr/>\n<em>2012-Dec-11 15:00:25 by matt:</em> <br/>\n\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2232\" onclick=\"get_ticket_and_populate_wrapper('2232'); return false;\" title=\"enable additional GROUP_DYNAMIC_MACH_CONSTRAINT behavior\">#2232</a></span> and <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2277\" onclick=\"get_ticket_and_populate_wrapper('2277'); return false;\" title=\"generalize GROUP_DYNAMIC_MACH_CONSTRAINT\">#2277</a></span>, be well.\n\n<p></p><hr/>\n<em>2012-Dec-12 13:01:01 by gthain:</em> <br/>\n\nIgor:\n\n<p>Do you have any (rough) requirements on how fast you need this to be? e.g. with 100k ads in the collector, how fast does the negotiation cycle need to be if there's only 1 free machine?\n\n</p><p></p><hr/>\n<em>2012-Dec-12 13:10:08 by sfiligoi:</em> <br/>\n\nRe gthain:\n\n<p>Not sure I can answer the \"how long should 1 slot matching take\". Let me give you the larger picture.\n\n</p><p>Our goal is to keep the negotiation cycle within a minute, but peaks of 5 mins would be acceptable. Anything significantly longer, and we are in trouble.\n\n</p><p>Now, we expect up to 14Hz glidein startup rate... this means that worst case, in 5 mins we would get 4k... and have them matched at 14Hz.\n\n</p><p>So, I guess, the answer is 1/14th of a second.\n\n</p><p></p><hr/>\n<em>2012-Dec-19 15:37:25 by gthain:</em> <br/>\n\nI plan to go ahead with making the server-side projection an expression that\nis evaluated, which should allow the negotiator to ask for only a small subset of the attributes for machine ads in the claimed state.\n\n<p>Looking at our glidein pool, though, I see that there's one monitor slot in the Owner state for every execute slot.  Currently, the negotiator pulls all the startd ads in from the collector, even those in owner state.  Seems like not getting any attribute from Owner state machines would be a 2x win for glidein right there.\n\n</p><p></p><hr/>\n<em>2012-Dec-19 15:49:34 by sfiligoi:</em> <br/>\n\nRe monitoring slots in UW glidein pool:<br/>\n\nThe Monitoring slots have been deprecated since some time, due to the availability of condor_ssh_to_job.<br/>\n\nBut they are indeed still enabled by default. They are easy do disable through FE config, though.\n\n<p>Glidein users that are hitting scalability limits should have already disabled them. CMS did it a long time ago.\n\n</p><p></p><hr/>\n<em>2013-Jul-25 19:15:07 by eje:</em> <br/>\n\nI think the new projection has broken accounting of concurrency limits across negotiation cycles -- the projection does not include the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ConcurrencyLimits\" title=\"Concurrency Limits\">ConcurrencyLimits</a></span> attribute, and it's required to recompute cc-limits at the beginning of each cycle.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3815\" onclick=\"get_ticket_and_populate_wrapper('3815'); return false;\" title=\"Projection introduced in #3366 breaks concurrency limits\">#3815</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nProjection introduced in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3366\" onclick=\"get_ticket_and_populate_wrapper('3366'); return false;\" title=\"scaling higher when NEGOTIATOR_CONSIDER_PREMPTION=False\">#3366</a></span> breaks concurrency limits</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2013-Jan-02 10:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34509\">[34509]</a></span>: use LaTeX formatting for version history item ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3366\" onclick=\"get_ticket_and_populate_wrapper('3366'); return false;\" title=\"scaling higher when NEGOTIATOR_CONSIDER_PREMPTION=False\">#3366</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Dec-21 14:20</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=34454\">[34454]</a></span>: Project out fewer machine attributes when NEGOTIATOR_CONSIDER_PREEEMPTION false <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3366\" onclick=\"get_ticket_and_populate_wrapper('3366'); return false;\" title=\"scaling higher when NEGOTIATOR_CONSIDER_PREMPTION=False\">#3366</a></span> When NEGOTIATOR_CONSIDER_PREEMPTION is false, the negotiator only needs a handful of attributes from claimed machines, in order to do accounting. By doing server (collector) side projection, we can avoid the overhead\u00a0[...]\n (By Greg Thain )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2013-Jul-26 10:09", "status": "resolved", "created": "2012-Dec-07 14:37", "fixed_version": "2012-Dec-07 14:37", "broken_version": "", "priority": "2", "subsystem": "", "assigned_to": "gthain", "derived_from": "#1885", "creator": "danb", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "dan@hep.wisc.edu,isfiligoi@ucsd.edu,tstclair@redhat.com,eje@cs.wisc.edu, tannenba@cs.wisc.edu", "due_date": ""}