{"id": 4314, "title": "Ticket #4314: Shared port blocking", "description": "<blockquote>\nSince shared port no longer forks, any blocking behavior is very painful.\n\n<p>I think I found a case where things currently block.  It goes like this:\n</p><ul>\n<li>Client requests daemon X from shared port.\n</li><li>Shared port does socket passing to daemon X\n</li><li>Shared port returns to DC and registers the socket for callback, setting a deadline.\n</li><li>Daemon X does not respond.  Deadline for client socket passes.\n</li><li>Shared port fires command handler, which calls get() on the socket.  This may block completely or for some amount of time set by the socket's timeout.\n</li></ul>\n\n<p>We should call get() non-blocking regardless (in case if the daemon has a partial response, <strong>then</strong> goes to sleep) and we should make sure that if get() times out we fail the request if the socket's deadline has passed.</p></blockquote>", "remarks": "<blockquote>\n<em>2014-Apr-15 20:57:48 by bbockelm:</em> <br/>\n\nPushed a fix.  To test:\n\n<p></p><ol>\n<li>Setup a personal condor instance with shared port enabled and D_FULLDEBUG for shared port.\n</li><li>Submit a handful of fake jobs.\n</li><li>SIGSTOP the startd.\n</li><li>Observe the shared port logs.  The schedd should start shadows that try to talk to the startd.  These will have a deadline of 20s.\n</li><li>After 20s, look for log lines of the form \"<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=SharedPortClient\" title=\"Shared Port Client\">SharedPortClient</a></span> - server response deadline has passed for...\" referencing the SHADOW communication.  Verify that it is indeed about 20s since the shadow tried to initiate contact.</li></ol>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2014-May-01 11:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=40040\">[40040]</a></span>: minor edit of 8.1.6 version history item. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4314\" onclick=\"get_ticket_and_populate_wrapper('4314'); return false;\" title=\"Shared port blocking\">#4314</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-16 11:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=40955\">[40955]</a></span>: Bugfixes for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4314\" onclick=\"get_ticket_and_populate_wrapper('4314'); return false;\" title=\"Shared port blocking\">#4314</a></span>.  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2014-Apr-15 20:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=39956\">[39956]</a></span>: Prevent the shared port from blocking on a socket whose deadlne has already expired. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4314\" onclick=\"get_ticket_and_populate_wrapper('4314'); return false;\" title=\"Shared port blocking\">#4314</a></span> The previous code made an error in assuming that the callback is invoked only when data is available to read; actually, it's invoked when there's data to read <strong>or</strong> when the socket deadline is expired (and hence\u00a0[...]\n (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2014-May-21 10:46", "status": "resolved", "created": "2014-Apr-15 16:03", "fixed_version": "2014-Apr-15 16:03", "broken_version": "", "priority": "2", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "bbockelm@cse.unl.edu, tannenba@cs.wisc.edu", "due_date": ""}