{"id": 6026, "title": "Ticket #6026: RHEL 7.3 breaks standard-universe Fortran (et al.?) math", "description": "<blockquote>\nAndrew Feldt wrote:\n<div class=\"verbatim\">\n<pre>Has anyone else run into this issue?  If a fortran code contains math\nfunctions (sin, cos, etc.), then, while it can be compiled just fine (even\nstatically) without condor_compile but condor_compile fails at the link\nstage with:\n\n/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/libm.a(s_sin.o): In function `__cos':\n(.text+0x4682): undefined reference to `_dl_x86_cpu_features'\n/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/libm.a(s_sin.o): In function `__sin':\n(.text+0x46b2): undefined reference to `_dl_x86_cpu_features\u2019\n\nand so on for each math function.  Fortran codes without math functions compile just fine with\ncondor_compile.  This worked without issue at RHEL 7.2.\n\nThis is for:\n  condor-8.4.9-1.el7.x86_64\n  gcc-gfortran-4.8.5-11.el7.x86_64\n  redhat-release-server-7.3-7.el7.x86_64\n\nIs there a known solution?\n</pre></div>\n\n\n<p>and replied to himself:\n</p><div class=\"verbatim\">\n<pre>Further debugging shows that I can force this to work by extracting\ndl-support.o from /lib64/libc.a and adding this explicitly to the\ncondor_compile line.  E.g. transform\n\ncondor_compile gfortran mycode.f -o mycode\n\nto\n\ncondor_compile gfortran mycode.f dl-support.o -o mycode\n\nThis is a rather crude workaround.  Is there a better permanent solution?\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2017-Mar-07 13:56:12 by tlmiller:</em> <br/>\n\nWe need to verify that we're still running the Fortran standard universe tests.\n\n<p></p><hr/>\n<em>2017-Mar-08 14:21:11 by tlmiller:</em> <br/>\n\nRebuilding the standard universe glibc with an up-to-date copy of the sources (2.17-157, rather than 2.17-32) solves the problem.  But what's our policy, with respect to which minor version(s) of a release we support?  It seems likely that running a -157 condor_compile on a -32 machine would work, but I don't actually know.\n\n<p></p><hr/>\n<em>2017-Mar-14 10:41:49 by tlmiller:</em> <br/>\n\nSince we don't have an older (RHEL7.0) machine to test against, our plan is the following:\n\n<p>(1) Upgrade the external on the 8.6.x branch.\n(2) Reactivate the standard universe fortran tests.\n(3) Verify that at least one of those tests employs double-precision floats and calls a function whose implementation uses the dl-* function(s).\n\n</p><p>If the standard universe tests all pass after doing this, go ahead and push the commit for 8.6.2.\n\n</p><p></p><hr/>\n<em>2017-Mar-16 11:42:07 by tlmiller:</em> <br/>\n\nRHEL7 is displaying Fortran test problems that RHEL6 isn't, and which I have not yet been able to reproduce.  Testing on all platforms is in progress; if the others generally pass, I'll disable the RHEL7 tests and push the commit.  That leaves two thing undone: (1) fixing the RHEL7 tests and (2) adding a test for this specific problem.  To that end, the following is an example which does not condor_compile without the fix; to change to a version which does, simply remove the <code>*8</code> from the real in line 3.\n\n<p></p><div class=\"verbatim\">\n<pre>      program atest\n      implicit none\n      real*8 arg,ans\n      arg = 3.1419d0\n      ans = sin(arg)\n      write(6,*) 'ans = ',ans\n      end\n</pre></div>\n\n\n<p></p><hr/>\n<em>2017-Apr-05 13:39:59 by tlmiller:</em> <br/>\n\nSee test run IDs 399964 and 399939.  The following platforms fail the same five Fortran tests (job_ckpt_f-areauc_std, job_ckpt_f-floats_std, job_ckpt_f-integers_std, job_ckpt_f-reader_std, job_rsc_f-direct-write_std): Debian8 (glibc-2.19), RedHat7 (glibc-2.17), and Ubuntu 14 (glibc-2.19).  Ubuntu 16 does not have (or at least does not test) standard universe; neither do the Fedoras.  Debian7 is 2.13 (we don't build glibc-2.14, 15, or 16).\n\n<p></p><hr/>\n<em>2017-Apr-10 10:23:54 by tlmiller:</em> <br/>\n\nIt turns out that libgfortran calls fstat() on the standard FDs to determine if they're safe to use; if they aren't, it caches that result on sets its FDs to -1.  This check occurs at library (static) initialization time, which is to say, after the starter has mangled the FDs, but before our libsyscall has had a chance to activate (or not, if it's running in stand-alone mode) the FD mapping code.\n\n<p>The fix (that FDs 0, 1, and 2 don't ever return EBAD, but instead if they would, return ENOENT) is more than a bit of a hack, but since we need to look at the command-line arguments to really decide if we should be doing FD mapping, it'd be very tricky to do anything better.\n\n</p><p></p><hr/>\n<em>2017-Apr-11 15:29:54 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p></p><ul>\n<li>ENOENT doesn't appear to be an errno value that fstat() can return normally. The other errno values it can return are probably no better for this purpose.\n\n<p></p></li><li>I'd feel less itchy about this hack if FDs 0, 1, and 2 could be fstat()'d once main() has been called (and the syscall library's FD handling initialized).\n</li></ul>\n\n<p></p><hr/>\n<em>2017-Apr-12 09:37:48 by jfrey:</em> <br/>\n\n<strong>Code Review</strong>\n\n<p></p><ul>\n<li>I misread the code. The intention is to return ENOENT only if the fstat() fails with EBADF. I'm ok with that behavior.\n\n<p></p></li><li>The code will change the value of errno from EBADF to ENOENT even if the fstat() succeeds. But successful calls are allowed to change errno, so that's not a real issue.\n</li></ul>\n\n<p></p><hr/>\n<em>2017-Apr-12 11:20:51 by tlmiller:</em> <br/>\n\nI suppose we could document this somewhere in case it causes someone grief, but I don't think we really ever put technical details like this in the manual.\n\n<p></p><hr/>\n<em>2017-Apr-17 17:05:05 by tim:</em> <br/>\n\n<strong>DOC REVIEW:</strong> Looks good</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Apr-12 11:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50455\">[50455]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6026\" onclick=\"get_ticket_and_populate_wrapper('6026'); return false;\" title=\"RHEL 7.3 breaks standard-universe Fortran (et al.?) math\">#6026</a></span>) Version history item.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Apr-12 10:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50453\">[50453]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6026\" onclick=\"get_ticket_and_populate_wrapper('6026'); return false;\" title=\"RHEL 7.3 breaks standard-universe Fortran (et al.?) math\">#6026</a></span>) Only change errno if the fstat() call failed.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Apr-10 14:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50445\">[50445]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6026\" onclick=\"get_ticket_and_populate_wrapper('6026'); return false;\" title=\"RHEL 7.3 breaks standard-universe Fortran (et al.?) math\">#6026</a></span>) Turn Fortran stdu tests on for RHEL 7, SL 7, and CentOS 7.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Apr-10 10:16</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50442\">[50442]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6026\" onclick=\"get_ticket_and_populate_wrapper('6026'); return false;\" title=\"RHEL 7.3 breaks standard-universe Fortran (et al.?) math\">#6026</a></span>) Enable Fortran tests. Implement work-around for for silliness in later versions of libgfortran.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Mar-15 18:30</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50440\">[50440]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6026\" onclick=\"get_ticket_and_populate_wrapper('6026'); return false;\" title=\"RHEL 7.3 breaks standard-universe Fortran (et al.?) math\">#6026</a></span>) Reactivate Fortran tests.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Mar-14 10:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=50438\">[50438]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6026\" onclick=\"get_ticket_and_populate_wrapper('6026'); return false;\" title=\"RHEL 7.3 breaks standard-universe Fortran (et al.?) math\">#6026</a></span>) Update glibc external.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2017-Apr-17 17:05", "status": "resolved", "created": "2016-Nov-29 13:12", "fixed_version": "2016-Nov-29 13:12", "broken_version": "v080409", "priority": "2", "subsystem": "Std", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, afeldt@ou.edu", "due_date": ""}