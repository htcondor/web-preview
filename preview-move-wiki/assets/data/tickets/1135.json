{"id": 1135, "title": "Ticket #1135: \"Real\" dynamic binary releases", "description": "<blockquote>\nThe \"dynamic\" binaries we release today aren't really.  Only libc is\ndynamically linked.  Everything else is static.  This tickets describes\nthe motivations and challenges to make Condor dynamically linked:\n\n<p><span class=\"section\"></span></p><h2>Motivations to Keep Condor Static (the status quo)</h2>\n\n<p></p><ul>\n<li>Binary compatibility between distros is easier to implement. For\nexample, we exclusively run the RHEL 3 binaries on RHEL 4. It looks\nlike the RHEL 5 binaries will also run on RHEL 6. There are other examples\nand we encourage users to work in this mode. This also makes glidin into\nheterogenous pools easier to accomplish.\n\n<p></p></li><li>We know exactly what versions of what externals are in the executable.\n\n<p></p></li><li>We can explicitly know which feature of Condor are available in a release of Condor because we know what externals were compiled into it.\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Motivation to Make Condor Dynamically Linked</h2>\n\n<p></p><ul>\n<li>Newer versions of some libraries won't statically link or only will do\nso with work.  So we patch the libary or we use an out of date version.\nKerberos is one problem library.\n\n<p></p></li><li>If a widely available library has an important security fix, we need\nto issue a new Condor, possibly going several versions back.  If we were\ndynamic <em>and used the distribution's version</em>, the administrator could\nsimply update the system-wide version to fix Condor and every other\nprogram using it.  OpenSSL is the obvious win here.\n\n<p></p></li><li>Static linking makes our libraries big.  This wastes some RAM, a modest\namount of disk space, and a bunch of bandwidth when transferring binaries.\nAfter experimental attempts at making Condor dynamically linked, we've\ndetermined the savings are actually very significant--especially in the\ncase of dynamically linking libraries internal to Condor in addition to\nthe externals.\n\n<p></p></li><li>Static linking eliminates certain debugging techniques that involve replacing or intercepting library calls. <a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=2482\">Brian Bockelman reports doing exactly this</a>\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>All Externals needed by Condor 7.6.x and 7.7.x</h2>\n\n<p></p><div class=\"verbatim\">\n<pre>blahp\n  part of glite, with custom modifications\n  need to continue building for now\nboost 1.39.0\n  available on rhel6 (1.41.0-11.el6)\n  available on rhel5 (1.33.1-10.el5)\n  not installed on nmi's rhel3 machines\n  available on debian 5.0 (1.34.1-14 )\n  available on debian 6.0 (1.42.0-4)\n  not available on mac os 10.5\n  not available on mac os 10.6\ncoredumper 2011.05.24-r31\n  not available on rhel6, rhel5\ncream\n  part of glite, not available on any official platforms\n  maybe in future platforms\ncurl 7.19.6\n  available on rhel6 (7.19.7-16.el6)\n  available on rhel5 (7.15.5-9.el5_6.2)\n  available on rhel3 (7.10.6)\n  available on debian 5.0 (7.18.2)\n  available on debian 6.0 (7.21.0)\n  available on mac os 10.5 (7.16.3)\n  available on mac os 10.6 (7.19.7)\ndrmaa 1.6\n  probably need to continue building ourselves\nexpat 2.0.1\n  available on rhel6 (2.0.1-9.1.el6)\n  available on rhel5 (1.95.8-8.3.el5_5.3)\n  available on rhel3 (1.95.???)\n  available on debian 5.0 (2.0.1-4)\n  available on debian 5.0 (2.0.1-7)\n  available on mac os 10.5 (2.0.0)\n  available on mac os 10.6 (2.0.1)\nglibc\nglobus 5.0.1\n  available on rhel6, via epel\n  available on rhel5, via epel\n  available on debian 6.0\n  We make a couple modifications to Globus, which we should push\n  upstream. Until then, we may probably need to keep building ourselves\ngsoap 2.7.10\n  available on rhel6 (2.7.16-2.el6), via epel\n  available on rhel5 (2.7.13-3.el5), via epel\n  available on debian 5.0 (2.7.9l-0.2)\n  available on debian 6.0 (2.7.9l-0.2)\n  not installed on nmi's rhel3\n  not available on mac os 10.5\n  not available on mac os 10.6\nhadoop 0.21.0\nkrb5 1.4.3\n  available on all linux/mac, library versioning limits binary portability\n  (specifically, rhel3-&gt;rhel4)\n  available on rhel6 (1.8.2-3.el6, 1.9-9.el6)\n  available on rhel5 (1.6.1-55.el5_6.1)\nlibdeltacloud 0.8\n  not available on any offical platforms\nlibvirt 0.6.2\n  available on rhel6\n  available on rhel5 (0.2.3-9)\n  available on debian 5.0 (0.4.6-10)\n  available on debian 6.0 (0.8.3-5)\nlibxml2 2.7.3\n  available on all platforms we care about, except rhel3 (where it's too\n  old)\nopenssl 0.9.8h\n  available on all linux/mac, library versioning limits binary portability\npcre 7.6\n  available on rhel6 (7.8-3.1.el6)\n  available on rhel5 (6.6-6.el5_6.1)\n  not installed on nmi's rhel3 machine\n  available on debian 5.0 (7.6-2.1 )\n  available on debian 6.0 (8.02-1.1)\n  not available on mac os 10.5\n  libraries available on mac os 10.6, but no headers (7.9 2009-04-11)\npostgresql 8.2.3\n  available on rhel6, rhel5, deb5, deb6\n  now only used for a contrib module\nqpid 0.8-RC3\n  available on rhel6\n  not available on rhel5\nunicoregahp\n  not available anywhere, it's our code\nvoms 1.9.10_4\n  available on rhel6 (1.9.19.2-2), via epel\n  available on rhel5 (1.9.19.2-1.el5), via epel\n  available in debian squeeze (unstable)\n  part of glite\nwso2 2.1.0\n  not available on rhel6,rhel5\n  only used for a contrib module\nzlib 1.2.3\n  available on all linux/mac\n</pre></div>\n\n\n<p><span class=\"section\"></span></p><h2>Proposal </h2>\n\n<p>There exists two viewpoints concerning shared libraries and Condor. The\nfirst viewpoint is that the external dependencies of Condor, like\nkerberos, openssl, etc, should be shared libraries against which Condor\nlinks. The second viewpoint is that Condor's internal organization itself\nshould consist of shared libraries, so there would be libdaemoncore.so,\nlibcondor.so, etc, etc. The former will be known an <strong>External Shared\nLibraries</strong>, the latter as <strong>Internal Shared Libraries</strong>. Some challenges\nwe face are common to both, and some unique to each.\n\n</p><p><span class=\"subsection\"></span></p><h3>External Shared Libraries</h3>\n\n<p></p><ol>\n<li><strong>Default Proper Builds:</strong> For libraries which are pervasive and\nimportant such as kerberos, stop building them at all; instead build\nagainst the system-wide ones.\n\n<p></p></li><li><strong>RPATH:</strong> Set the RPATH in Condor to search $ORIGIN/../lib or possibly\n$ORIGIN/../lib/condor.\n\n<p></p><ul>\n<li>Open question: Should our custom search path come before or after the\nsystem-wide libraries? Do we even get a choice?  If before, libraries we\ntrust to work are used by default, but they are more likely to be out\nof date or lack useful local system changes. If after, we're likely to\nbe more up to date and have useful local system changes, but we can't\nbe as confident in their stability.\n</li><li>RPATH needs to be fully understood--especially the security and political\nramifications of using it.\n</li></ul>\n\n<p></p></li><li><strong>LD_LIBRARY_PATH:</strong> Build libraries we use as shared libraries.\nInstall them to lib/condor (relative to the root of a Condor install). We\nuse lib/condor instead of just lib because some installs, say from RPM or\ndeb, will make the root /, and our libraries may conflict with standard\nsystem-wide ones.\n\n<p></p></li><li><strong>Late Binding:</strong> We write a wrapper around the usage of the library\nand when we need it, we dlopen/dlsym/etc the function. We'd specify in\nthe configration file the locations of the shared libraries specific to\neach external.\n\n<p></p></li><li><strong>Hybdrid Option:</strong> We could mix and match the above options per external\ndepending upon our requirements.\n</li></ol>\n\n<p><span class=\"subsection\"></span></p><h3>Internal Shared Libraries</h3>\n\n<p>There are two ways we can spplit internal libraries:\n</p><ol>\n<li>Into tiny little pieces like libcondorio.so, libcondorconfig.so,\nlibcedar.so, etc\n</li><li>Into daemoncore and nondaemoncore libraries.\n</li></ol>\n\n<p><span class=\"subsubsection\"></span></p><h4>Proposal </h4>\n\n<p>The internal architecture of Condor will be split into three pieces:\n</p><ol>\n<li>New Classads\n</li><li>Daemoncore\n</li><li>Everything that isn't daemoncore\n</li></ol>\n\n<p>The reason for this proposal is that it will be easier to maintain just\nthree internal libraries. It turns out there is a hefty amount of work\nto detangle the internal libraries from each other which really isn't\nworth it in practice at this time.\n\n</p><p>We propose the discovery method of the internal libraries should be RPATH,\nor LD_LIBRARY_PATH, depending upon use case.\n\n</p><p><span class=\"section\"></span></p><h2>Down sides</h2>\n\n<p></p><ul>\n<li>- Users repackaging or redistributing Condor's binaries will face additional complexity.  This would include users making custom glide-in distributions.  There will be additional files to consider for inclusion and the resulting package will include more files.  Expected impact: minimal.\n\n<p></p></li><li>In the event of problems, shared libraries can complicate debugging.  It becomes necessary to identify which libraries are being used, which could vary for a variety of reasons.  When libraries not packaged with Condor are used, it is not feasible for the Condor Team to test all possible permutations; we will end up debugging problems that prove to be in libraries versions we're unfamiliar with.  Expected impact: some.\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Use Cases</h2>\n<ul>\n<li>Basic Installation\n<ol>\n<li>Via RPM\n<ul>\n<li>Dependencies are handled for us automatically but we need good spec files.\n</li><li>Rpath is forbidden by some distros in the executables.\n</li><li>Distro external libraries are in the usual system paths.\n</li><li>Non-distro specific external libraries must go into condor specific paths.\n<ul>\n<li>Binaries will just know where to find them!\n</li></ul>\n</li></ul>\n</li><li>Via tarball\n</li></ol>\n<ul>\n<li>Installed in Root Context\n<ul>\n<li>Distro external libraries are in usual system paths\n</li><li>Non-distro libs are put into release_dir/lib\n</li><li>System paths are preferred over condor specific paths to find libs.\n</li></ul>\n</li><li>Installed in User Context\n<ul>\n<li>A Condor release is split into two functions tarballs, but released as one\npackage:\n<ol>\n<li>A condor tarball containing the binaries and usual stuff\n</li><li>A external library tarball containing shared libraries.\n</li></ol>\n</li><li>condor_configure queries the system to figure out which externals are\nalready installed or not. Then it copies just the needed external libs not\nalready present on the system into a condor specific directory which\nthe binaries know to look in via RPATH.\n</li></ul>\n</li></ul>\n</li><li>Glide In\n<ul>\n<li>This uses only a tarball, as opposed to RPM, solution.\n</li><li>Must be cross platform, since glidin resources are heterogeneous.\n</li><li><strong>Question:</strong> How does Igor make his glidin tarballs? How many flavors of linux does he use?\n</li><li>If we choose the RPATH solution to solve this, it might also work for the Basic Installation in a User Context.\n</li></ul>\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Unexplored Ideas/Tasks</h2>\n<ul>\n<li>The breaking of binary compatibility [RPATH tarball releases might help].\n</li><li>Need to inspect each external to see which proposed method would best work for it.\n</li><li>Maybe more clipped ports for linux distros? [Each supported one has a cost.]\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Upgrading Condor</h2>\n\n<p>The recommended practices for upgrading Condor will have to change away\nfrom the current model of \"just copy over the binaries\". This is because\nif the daemons were running, we can't atomically copy over all of the\nbinaries and internal shared lirbaries in such a manner as a Condor\nprocess being invoked sees a consistent view of its internal text segments.\n\n</p><p>Also let it be known that it will be more difficult to provide custom\nbuilt test binaries to people since the discovery method of the shared\nlibraries might be different in different contexts.\n\n</p><p><span class=\"section\"></span></p><h2>See also</h2>\n<ul>\n<li><span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=374\" onclick=\"get_ticket_and_populate_wrapper('374'); return false;\" title=\"dlopen Kerberos\">#374</a></span>: dlopen Kerberos\n</li><li><span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=501\" onclick=\"get_ticket_and_populate_wrapper('501'); return false;\" title=\"Turn the Condor static libraries on Windows into DLLs\">#501</a></span>: Turn the Condor static libraries on Windows into DLLs\n</li><li><span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1136\" onclick=\"get_ticket_and_populate_wrapper('1136'); return false;\" title='Eliminate \"static\" releases of Condor'>#1136</a></span>: Eliminate \"static\" releases of Condor\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>User feedback</h2>\n<strong>Con</strong>\n\n<p></p><ul>\n<li><a class=\"external\" href=\"https://lists.cs.wisc.edu/archive/condor-users/2010-January/msg00206.shtml\">Ian Chesal reports</a> the existing dynamic libraries are less portable for him than the static ones.  He encounters missing and mismatched libraries. He has a mixed pool of RHEL, CentOS, and SuSE. <a class=\"external\" href=\"https://lists.cs.wisc.edu/archive/condor-devel/2010-March/msg00000.shtml\">Here is one concrete example.</a> The static binaries allow him to use the RHEL5 binaries on both CentOS4 and CentOS5.\n\n<p></p></li><li>What if the library search path is slow?  /usr/lib might be on a slow filesystem (say, NFS).  LD_LIBRARY_PATH might be large and on NFS (a common case for VDT installs).  If each dynamic library load is hitting slow filesystems, possibly multiple times, that could significantly slow down starting various Condor processes.  If we're starting processes quickly (say, condor_shadows), this could be a problem.  Perhaps it's not too bad once the libraries are in memory and shared, or maybe it is since the kernel may need to check NFS to see if it's changed. <a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=941\">Steve Timm raised this concern.</a>\n\n<p></p><ul>\n<li><a class=\"external\" href=\"http://wiki.debian.org/RpathIssue\">This Debian documentation</a> suggests that RPATH is searched first, so as long as our libraries are present in the RPATH, it won't have a speed hit.  However, that doesn't help us for libraries where we really want to use the system library like OpenSSL.  Of course, we already pay this price when we search for libc.\n</li></ul>\n\n<p></p></li><li>There are concerns that dynamic libraries might be slower, particularly for condor_shadow, for which a large number might be started very quickly.  Since one shadow is already running, there is no additional shared text-segment benefit, and there is some additional non-shared data to track loaded libraries and a bit more startup time to locate the libraries. <a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=2602\">Dan's summary</a>. <a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=2285\">Bob Ball is also concerned.</a>\n\n<p></p></li><li><a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=2712\">Steve Timm would like to know</a> what happens when OpenSSL 1.0 starts shipping with distributions.  If we're relying on the distribution providing OpenSSL, major version upgrades represent barriers across which we lose binary compatibility. Possible solutions: 1. Some distributions may provide backward compatibility (old) versions for exactly this purpose; ask users to install them. 2. Be timely and support a reasonable subset of these distributions as they appear. Rely on similarity working for less common distributions.  Possibly provide a known good shared library as a fallback (but this gets us back into the OpenSSL distribution business!)\n\n<p></p></li><li>The VDT (Via Alain Roy) has several concerns\n\n<p></p><ul>\n<li>The VDT repackages Condor as more native RPMs and .deb. We should avoid breaking that process.\n\n<p></p></li><li>Linking against a system OpenSSL or other libraries reduces our portability. We'll need to retest a fair number of platforms we currently assume portability between and may need to add native ports for some that break.\n\n<p></p></li><li>While it is nice that users can replace the dynamic libraries, in practice noone is likely to do so.  We cannot rely on it as a fix for important problems.  This isn't really a problem, but we need to keep it in mind.\n</li></ul>\n\n<p></p></li><li>Pete Keller believes that RPATH may tie a binary to extremely specific  versions of libraries, making updates functionally impossible.  To take an example grabbed from /usr/lib at random, if we linked to libboost_iostreams.so, we might actually end up requiring libboost_iostreams.so.1.33.1, by that exact name and version.  Upgrading to libboost_iostreams.so.1.33.2 would fail.  This would also limit compatibility between distributions where only revision numbers had changed on an otherwise compatible library.\n\n<p></p></li><li>Pete Keller also brought up <a class=\"external\" href=\"http://wiki.debian.org/RpathIssue\">Debian's arguments against RPATH</a>.  In short: RPATH makes it easier to pull in libraries with conflicting requirements for each other, whereby if the default system-wide libraries are consistently used, presumably those are all compatible with each other.  For example, my binary A might need B.so and C.so. If I grab the system-wide versions, I'll get B.so.1 which requires C.so.1 as well as C.so.1. All is well. But if I pull my own B.so.2 from an RPATH that requires C.so.2, now I have potential conflicts. If other system-wide libraries require C.so.1, I may try loading two different versions of the same library, which is madness.\n<ul>\n<li><a class=\"external\" href=\"http://sourceware.org/autobook/autobook/autobook_88.html\">The autotool developers disagree</a> (search for \"rpath\") and think RPATH is wonderful.  Of course, autotool's helpfulness with RPATHs means that if you build in /tmp or similar, then distribute binaries, you've created a handy path for injection attacks, <a class=\"external\" href=\"http://vdt.cs.wisc.edu/advisories/rpaths.html\">a problem the VDT has actually faced.</a>\n</li></ul>\n</li></ul>\n\n<p><strong>Pro</strong>\n</p><ul>\n<li><a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=1049\">Horst Severini is happy with the current dynamic RPMS</a>\n\n<p></p></li><li><a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=836\">Yu Fu is happy with the current dynamic binaries</a>\n\n<p></p></li><li><a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=2285\">Bob Ball is happy with the current dynamic RPMs</a>\n\n<p></p></li><li><a class=\"external\" href=\"http://listserv.fnal.gov/scripts/wa.exe?A2=ind1002&amp;L=osg-sites&amp;T=0&amp;P=2482\">Brian Bockelman is happy with the current dynamic binaries</a> and likes increased use of dynamic libraries.\n\n<p></p></li><li>The VDT doesn't use the static versions.\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Derived Tickets</h2>\n\n<p>These tickets already have a different parent in the tracking system, but also\nneed this ticket as the parent.\n\n</p><p></p><ul>\n<li><span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2132\" onclick=\"get_ticket_and_populate_wrapper('2132'); return false;\" title=\"[Debian] Using shared libraries\">#2132</a></span>\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Milestones </h2>\n\n<p></p><ul>\n<ul>\n<li><strong>[IN PROGRESS]:</strong> Finish information collection and depositing into ticket. 2 days.</li></ul>\n</ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2010-Jan-25 14:15:11 by adesmet:</em> <br/>\n\nThe bit about \"$ORIGIN/../lib/condor\" is a later addition.  Alain Roy reminded us about our RPM installs which install into /usr/{s}bin.  Searching /usr/lib would be bad; we shouldn't install our carry along libraries there since many (kerberos, Globus) could conflict with distribution provided ones.  The easiest solution would seem to be to use lib/condor (relative to our install root).  That works in both cases.\n\n<p></p><hr/>\n<em>2010-Jan-25 18:03:21 by adesmet:</em> <br/>\n\nCurrent state: I'm sending out queries to condor-devel, condor-users, and OSG for feedback.\n\n<p></p><hr/>\n<em>2010-Feb-05 11:46:38 by tstclair:</em> <br/>\n\nThe afore mentioned example libboost example is a complete farse.  More often then not you will hit library issues, in which case it's advised to stay current with what a distro releases and avoid using local libs where possible.  It is rare that distro's break binary compatibility.\n\n<p></p><hr/>\n<em>2010-Feb-05 15:13:22 by adesmet:</em> <br/>\n\nI think the arguments in the Debian article aren't directly relevant to us.  I believe their concern is that the RPATH will be set to various system locations (/usr/bin, etc) when it shouldn't.  A reasonable concern, especially since libtool likes doing it, but we're not proposing that.  It might be relevant in that there may be unusual libraries in $ORIGIN/../lib/condor.  We could hit a problem if users start putting other libraries in that directory, to which I say, \"If it hurts when you do that, stop doing it.\"  The other concern is that perhaps our library's dependencies will conflict with what the OS provides, and increased use of dynamic libraries while simultaneously carrying our own baggage could cause problems.  libcrypto (from OpenSSL) depends on libz.  Our goal is to use the system libcrypto, but to use our own copies of libraries in general. libz is a libary we carry along and may link dynamically in the future, sticking our local copy into $ORIGIN/../lib/condor.  We ship libz.so.1.2.3 and load it in, but we also load the system OpenSSL, which may be expecting libz.so.1.4.0.  Two different libz's in memory is a recipe for madness.\n\n<p>This might be an argument for using the system libz, especially if libcrypto requires libz in all cases; thus is must be present if libcrypto is present.  But what if the next release of OpenSSL adds a dependency on libpcre or libcurl for currently unforeseen reason?  We drag those libraries along as well, and they're currently not quite as reliably present.\n\n</p><p>Of course, this really has nothing to do with RPATH and instead is the price of dragging along copies of relatively common libraries.  We can hit the same problem if we just dynamically link libcrypto but statically link everything else like we do today.\n\n</p><p></p><hr/>\n<em>2010-Apr-27 10:38:04 by tstclair:</em> <br/>\n\nWhat is going on with this?\n<hr/>\n<em>2010-Oct-20 16:03:30 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.\n<hr/>\n<em>2011-Jan-27 14:46:04 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Jan-28 08:28:29 by tstclair:</em> <br/>\n\nWe only release dynamic builds now.  Updating to assign to jfrey for comments and close out.\n<hr/>\n<em>2011-Feb-01 14:49:30 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Feb-01 17:37:04 by bbockelm:</em> <br/>\n\nCan this ticket be closed?  It's implicitly been done in the PROPER build in cmake.  If someone want beautifully linked libraries, you can currently build your own.\n\n<p>Two comments about the contents of the ticket though:\n\n</p><p></p><ul>\n<li>RPATH is expressly forbidden by Fedora packaging guidelines.  In fact, their build system will reject any binaries with rpath set.\n</li><li>/usr/lib on a slow filesystem should be irrelevant for PROPER builds.  glibc's man page for the dynamic linker explains this - this information is cached in /etc/ld.so.cache.  So, if a library is in /usr/lib/libfoo.so.0.0, the dynamic linker won't do a path lookup to see if it's there or not.\n</li></ul>\n\n<p></p><hr/>\n<em>2011-Feb-02 08:38:38 by tstclair:</em> <br/>\n\nBrian is correct, it should be easy to build normal PROPER packages now (for anyone).  Does UW still want to be in cross platform binary packaging business.  It is inherently dangerous, with questionable benefits at best.\n\n<p></p><hr/>\n<em>2011-May-31 15:38:10 by tstclair:</em> <br/>\n\nSo for note, re discussion on 5/31/2011.  The conversation around RPATH would be limited to UW-Tarballs only and not proliferate to .rpm || .deb packages, which would still use the existing native mechanisms.\n\n<p>While distro maintainers will still use PROPER.\n\n</p><p></p><hr/>\n<em>2011-May-31 15:55:01 by psilord:</em> <br/>\n\nBrian, the reason this ticket is not being resolved is because we're proposing making our tarball builds use real dynamic binaries. There are a lot of issues\naround doing that and this ticket will track all of them.\n\n<p></p><hr/>\n<em>2011-Jun-07 10:42:15 by psilord:</em> <br/>\n\nDue to thrashing, I did not finish typing in my information. I believe I can finish it today.\n\n<p></p><hr/>\n<em>2011-Jun-07 15:57:56 by psilord:</em> <br/>\n\nI've written the lion's share of what we spoke about in the meetings into this document.\n\n<p></p><hr/>\n<em>2011-Aug-08 13:20:11 by tannenba:</em> <br/>\n\nJaime and Cathrin need to talk so that this work and the work in <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2132\" onclick=\"get_ticket_and_populate_wrapper('2132'); return false;\" title=\"[Debian] Using shared libraries\">#2132</a></span> are coordinated.\n\n<p></p><hr/>\n<em>2015-Aug-01 20:28:23 by bbockelm:</em> <br/>\n\nAll this work appears to be done.  Closing.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=374\" onclick=\"get_ticket_and_populate_wrapper('374'); return false;\" title=\"dlopen Kerberos\">#374</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ndlopen Kerberos</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=501\" onclick=\"get_ticket_and_populate_wrapper('501'); return false;\" title=\"Turn the Condor static libraries on Windows into DLLs\">#501</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nTurn the Condor static libraries on Windows into DLLs</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1021\" onclick=\"get_ticket_and_populate_wrapper('1021'); return false;\" title=\"libvirt version mismatch from distro (x,y,z)\">#1021</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nlibvirt version mismatch from distro (x,y,z)</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1136\" onclick=\"get_ticket_and_populate_wrapper('1136'); return false;\" title='Eliminate \"static\" releases of Condor'>#1136</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nEliminate \"static\" releases of Condor</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1874\" onclick=\"get_ticket_and_populate_wrapper('1874'); return false;\" title=\"Use OS-provided security libraries\">#1874</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nUse OS-provided security libraries</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2083\" onclick=\"get_ticket_and_populate_wrapper('2083'); return false;\" title=\"Dynamically link libvirt in UW builds\">#2083</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDynamically link libvirt in UW builds</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2378\" onclick=\"get_ticket_and_populate_wrapper('2378'); return false;\" title=\"Standalone checkpointing test failing on 32-bit rhel5\">#2378</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nStandalone checkpointing test failing on 32-bit rhel5</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2389\" onclick=\"get_ticket_and_populate_wrapper('2389'); return false;\" title=\"Dynamically link Globus and VOMS libraries in UW builds\">#2389</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDynamically link Globus and VOMS libraries in UW builds</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2390\" onclick=\"get_ticket_and_populate_wrapper('2390'); return false;\" title=\"Dynamically link ClassAds library\">#2390</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDynamically link <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAds\" title=\"Class Ads\">ClassAds</a></span> library</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2482\" onclick=\"get_ticket_and_populate_wrapper('2482'); return false;\" title=\"Dynamically link externals on Mac OS X\">#2482</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nDynamically link externals on Mac OS X</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2539\" onclick=\"get_ticket_and_populate_wrapper('2539'); return false;\" title=\"Alter rpath to support multiple Condor installations\">#2539</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAlter rpath to support multiple Condor installations</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2627\" onclick=\"get_ticket_and_populate_wrapper('2627'); return false;\" title=\"Rhel 3 failures with dynamic kerberos libraries\">#2627</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRhel 3 failures with dynamic kerberos libraries</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Sep-09 11:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=27140\">[27140]</a></span>: Fix file permissions on system libraries in release tarballs. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span> On opensuse, the system's libssl and libcrypto shared libararies don't have owner write permission enabled. All files in the Condor release need to have this permission enabled.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Sep-08 14:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=27127\">[27127]</a></span>: Include system libraries in release tarballs. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span> To make it easier to run Condor on different flavors of linux, we now include the system security libraries from the build machine directly in the release tarballs, under lib/condor/. The rpath in the binaries now puts /lib[64] and /usr/lib[64] before\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-15 22:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26789\">[26789]</a></span>: Don't set RPATH when making native packages. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span> We don't need it for native packages and we're setting it wrong for some platforms (should be $ORIGIN/../lib64/condor).  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-03 15:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26610\">[26610]</a></span>: Fix extraction of systemlibs tarfile in test glue. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span>  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-02 15:55</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26608\">[26608]</a></span>: Save system libraries when building and use them when testing. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span> Save the system's openssl and kerberos libraries as part of the build results. When testing, extract these libraries into &lt;release&gt;/lib/condor if they can't be found on the system.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Aug-01 11:23</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=26606\">[26606]</a></span>: Set rpath in to $ORIGIN/../lib/condor in UW builds. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span> As we move to dynamically linking more OS-provided libraries, we'll run into cases where the necessary libraries are missing, due to packages not being installed, not being available, or having incompatible versioning. This lets us supply libraries\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jul-26 15:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=22595\">[22595]</a></span>: Revert \"Build libvirt external only on rhel3. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span>\" This reverts commit a89ca6485e51f5f75f02019af771364b0796defa. rhel 5 and debian 5 don't appear to have standard libvirt-devel packages, so we still need to build our own on these platforms.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jun-17 10:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=22222\">[22222]</a></span>: Remove zlib external, phase 2. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span> The zlib external is now gone. For standard universe, we copy the system's libz.a for ues as libcondor_z.a. Everything else dynamically links with the system libz.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jun-13 13:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=22221\">[22221]</a></span>: Remove zlib external, phase 1. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span> Disable building of zlib on all platforms.  (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Jun-13 13:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=22220\">[22220]</a></span>: Build libvirt external only on rhel3. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=1135\" onclick=\"get_ticket_and_populate_wrapper('1135'); return false;\" title='\"Real\" dynamic binary releases'>#1135</a></span> All of our other linux platforms have libvirt available as an OS-provided package.  (By Jaime Frey )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2015-Aug-01 20:28", "status": "resolved", "created": "2010-Jan-25 13:45", "fixed_version": "2010-Jan-25 13:45", "broken_version": "", "priority": "3", "subsystem": "", "assigned_to": "jfrey", "derived_from": "", "creator": "psilord", "rust": "", "customer_group": "other", "visibility": "public", "notify": "psilord@cs.wisc.edu, jfrey@cs.wisc.edu, cweiss@cs.wisc.edu, tstclair@redhat.com", "due_date": ""}