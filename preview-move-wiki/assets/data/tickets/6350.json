{"id": 6350, "title": "Ticket #6350: Add a utitily class that can do getline from a  file without blocking", "description": "<blockquote>\nLate materialization needs a way to read for foreach data (and possibly the submit digest) without blocking the schedd.  In support of this, we will add a utility class that you can hand a file name and then call a method to either get the next line from the file, or get back status that indicates either success, error, end-of-file, or try-again-later.\n\n<p>The schedd's submit factory will then be modified to use this class for handle the foreach data rather than loading it all into memory on commit of the submit as it does now.</p></blockquote>", "remarks": "<blockquote>\n<em>2017-Jul-17 10:19:17 by bbockelm:</em> <br/>\n\nAn important note - the POSIX AIO implementation (and the kernel AIO implementation, for that matter) blocks under a number of conditions.\n\n<p>The Linux glibc implementation is based on pthreads, meaning that there's a limited concurrency prior to having things block.  Hence, one might consider keeping a limit on the number of <code>MyAsyncFileReader</code> objects active.\n\n</p><p></p><hr/>\n<em>2017-Jul-17 14:16:46 by johnkn:</em> <br/>\n\nToddT mentioned having a limit as well, although not for the reason you mention. He was concerned about the number of open handles.\n\n<p></p><hr/>\n<em>2017-Aug-16 11:46:34 by tim:</em> <br/>\n\n<strong>DOC REVIEW:</strong> Internal change, no docs needed.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-17 11:26</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51881\">[51881]</a></span>: all whole-file option to <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyAsyncFileReader\" title=\"My Async File Reader\">MyAsyncFileReader</a></span> class, improve comments, fix defaullt buffer size. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6350\" onclick=\"get_ticket_and_populate_wrapper('6350'); return false;\" title=\"Add a utitily class that can do getline from a  file without blocking\">#6350</a></span> add unit test case for whole-file option.  (By John (TJ) Knoeller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2017-Jul-17 09:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=51878\">[51878]</a></span>: Add <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MyAsyncFileReader\" title=\"My Async File Reader\">MyAsyncFileReader</a></span> class and associated unit test to condor_utils. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6350\" onclick=\"get_ticket_and_populate_wrapper('6350'); return false;\" title=\"Add a utitily class that can do getline from a  file without blocking\">#6350</a></span> This class can be used to read a file one line at a time in a non-blocking manner. It uses the aio_* API on *nix, and the OVERLAPPED I/O functionalilty on Windows.  (By John (TJ) Knoeller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2017-Aug-16 11:46", "status": "resolved", "created": "2017-Jul-17 09:06", "fixed_version": "2017-Jul-17 09:06", "broken_version": "", "priority": "3", "subsystem": "", "assigned_to": "johnkn", "derived_from": "#6228", "creator": "johnkn", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}