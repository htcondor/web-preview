{"id": 2730, "title": "Ticket #2730: Sizable memory leak in schedd", "description": "<blockquote>\nThere appears to be a pretty sizable memory leak in the schedd in trunk (c42c774).  After about 3 days of running, 2 / 3 schedds are at 3GB RSS, while the third is at 300MB.  All three are at about the same level of use and load.\n\n<p>No clue where this is coming from, about start igprof.</p></blockquote>", "remarks": "<blockquote>\n<em>2011-Dec-28 16:55:57 by bbockelm:</em> <br/>\n\nAfter running with a few days under the profiler, the majority of the leaks happen in this code path:\n\n<p></p><div class=\"verbatim\">\n<pre>WriteUserLog::writeEvent(ULogEvent*, compat_classad::ClassAd*, bool*)\nWriteUserLog::writeJobAdInfoEvent(char const*, ULogEvent*, compat_classad::ClassAd*, bool)\nEvalExprTree(classad::ExprTree*, compat_classad::ClassAd*, compat_classad::ClassAd*, compat_classad::EvalResult*)\nstrnewp(char const*)\n</pre></div>\n\n\n<p>After a few days of running, that code path resulted in about 69MB of memory leaked spread over 86k pages (335MB).\n\n</p><p>If you look at the while loop, it repeatedly calls <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EvalExprTree\" title=\"Eval Expr Tree\">EvalExprTree</a></span> on the same result object.  If that result object has previously allocated the \"s\" member variable, then it is leaked the second time <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=EvalExprTree\" title=\"Eval Expr Tree\">EvalExprTree</a></span> is called.\n\n</p><p>Leak appears to date back to April 2010, commit a8775968 by Dan.\n\n</p><p>According to igprof, there is an additional 36MB leaked inside Scheduler::count_jobs().  Starting at that function, 18MB comes from calls to compat_classad::ClassAd::ClassAd(), 7MB from compat_classad::ClassAd::Assign(char const*, int), and 4MB from CollectorList::sendUpdates(int, compat_classad::ClassAd*, compat_classad::ClassAd*, bool).  Since they all have to do with classads, I suspect the source is the same.  Haven't debugged this yet.\n\n</p><p></p><hr/>\n<em>2011-Dec-28 18:05:33 by bbockelm:</em> <br/>\n\nI think the leak in count_jobs is due to the submitter ad (pAd) is new'd, but never delete'd.  I'd recommend switching the allocation from the heap to the stack to prevent future issues.\n\n<p>In DaemonCore::Create_Process, pidtmp-&gt;child_session_id is leaked because the child_session_id is not free'd in DaemonCore::HandleProcessExit.  Likely, it would be more convenient to switch this to a std::string to prevent future bugs.\n\n</p><p></p><hr/>\n<em>2011-Dec-29 09:53:42 by danb:</em> <br/>\n\nThe leak within <code>WriteUserLog::writeEvent()</code> actually appears to originate in 55917c3c when EVENT_LOG_JOB_AD_INFORMATION_ATTRS was added (2007).  But, honestly, I blame classads for leaking in this case rather than the code that is calling it.  I'll submit a patch that fixes it at that level.\n\n<p></p><hr/>\n<em>2011-Dec-29 12:11:13 by tannenba:</em> <br/>\n\n<strong>CODE REVIEW</strong>\n\n<p>Patch looks good, thanks Brian and Dan!\n\n</p><p>Don't forget to merge to master (current it is not)...\n\n</p><p></p><hr/>\n<em>2011-Dec-29 12:27:20 by danb:</em> <br/>\n\nBrian, I don't see how pidtmp-&gt;child_session_id can be leaked unless pidtmp is also leaked.  The <code>PidEntry</code> destructor frees child_session_id.  I can run further tests if you still think something is wrong.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2012-Jan-11 12:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=29067\">[29067]</a></span>: minor edit to 7.6.6 version history item, as well as the defn of the mentioned config knob (EVENT_LOG_JOB_AD_INFORMATION_ATTRS) ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2730\" onclick=\"get_ticket_and_populate_wrapper('2730'); return false;\" title=\"Sizable memory leak in schedd\">#2730</a></span>  (By Karen Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Dec-29 12:10</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=28946\">[28946]</a></span>: Fixed memory leak in schedd. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2730\" onclick=\"get_ticket_and_populate_wrapper('2730'); return false;\" title=\"Sizable memory leak in schedd\">#2730</a></span> This leak was introduced in 8d7ea9d4, which has not been released yet.  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Dec-29 11:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=28944\">[28944]</a></span>: Documented fix for memory leak in the schedd. ===GT=== <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2730\" onclick=\"get_ticket_and_populate_wrapper('2730'); return false;\" title=\"Sizable memory leak in schedd\">#2730</a></span> ===VersionHistory:Complete===  (By Dan Bradley )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2011-Dec-29 11:29</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=28943\">[28943]</a></span>: Fixed memory leak in EvalExprTree(). <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=2730\" onclick=\"get_ticket_and_populate_wrapper('2730'); return false;\" title=\"Sizable memory leak in schedd\">#2730</a></span>  (By Dan Bradley )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2011-Dec-29 12:27", "status": "resolved", "created": "2011-Dec-23 18:16", "fixed_version": "2011-Dec-23 18:16", "broken_version": "v060904", "priority": "2", "subsystem": "Daemons", "assigned_to": "tannenba", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}