{"id": 5471, "title": "Ticket #5471: HTCondor View: fix delta", "description": "<blockquote>\nThe \"delta\" step is just broken.\n\n<p>It starts at index 1 instead of 0, ensuring that the second data value (index 1) is always returned instead of the delta to index 0. Strictly a bug. Proposal: Just fix it.\n\n</p><p>The test requires the new value to be strictly larger than the previous one; otherwise undefined is returned. This is hidden by our automatically converting undefined to 0, but is still buggy. I strongly argue this is a bug. Proposal: Just fix it. 0 is fine.\n\n</p><p>Finally, not strictly a bug, but surprising: if the new number is smaller, the result is undefined. <em>For reasons I don't understand, we get the new number, not undefined/0.</em> Proposal: we really want 3 functions.:\n\n</p><p></p><ul>\n<li>delta - Strict delta, may be negative\n</li><li>deltainc - delta, but increasing only. If it ever goes backward, return the new value. Useful for things that (theoretically) are monotonically increasing, but may reset.\n</li><li>deltadec - deltainc, but decreasing only and converted to an absolute value (that is, make it positive). Useful for hypothetical monotonically decreasing values.</li></ul>\n</blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "defect", "last_change": "2016-Jan-11 16:46", "status": "new", "created": "2016-Jan-11 16:46", "fixed_version": "2016-Jan-11 16:46", "broken_version": "", "priority": "4", "subsystem": "", "assigned_to": "", "derived_from": "#5351", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "", "due_date": ""}