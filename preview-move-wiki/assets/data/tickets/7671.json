{"id": 7671, "title": "Ticket #7671: File Transfer mechanism for URL transfers from multiple data sources", "description": "<blockquote>\nWe want to change how the File Transfer mechanism deals with url transfers.\n\n<p>Currently, when a user includes a url under <code>transfer_input_files</code>, we simply transfer the file indicated by the url.\n\n</p><p>LIGO has asked us to expand the File Transfer object with some intelligent decision-making, such that if the same file is available at a better url, we transfer it from there instead. For example, maybe the file is available from a closer/faster data source than the one indicated. Or, maybe the url is not accessible to the execute host, but there is another copy of the file that is available somewhere else.\n\n</p><p>Beyond this high level description, however, we've been unable to make any progress for almost a year now (as of July 2020).\n\n</p><p>One fundamental issue is we've failed to clearly describe the problem. The above description is just my latest attempt (of many) and will likely get changed again.\n\n</p><p>We have also not established who is responsible for the intelligent decision-making. Who is responsible for providing a \"better\" url to get the file from? The user? The system administrator? The <code>condor_shadow</code>? The file transfer plugin itself? Other? How does this entity know where a \"better\" copy of the file is available?\n\n</p><p>There are many more implementation details to be ironed out, but until we understand what we are actually building we can't move this forward.</p></blockquote>", "remarks": "<blockquote>\n<em>2020-Jul-08 16:08:01 by coatsworth:</em> <br/>\n\nWe discussed using pre job hooks as a possible mechanism to implement this. Although we can use these hooks to update job ad attributes, these updates never make it back to the shadow which ultimately is responsible for which files to transfer. So this doesn't seem like a viable option.\n\n<p></p><hr/>\n<em>2020-Jul-27 18:01:11 by tlmiller:</em> <br/>\n\nAs I understand it, we can think about two major ways of optimizing file transfers when multiple sources of the file are available.\n\n<p>EXTERNAL APPROACH\n\n</p><p>The external approach starts with the idea that HTCondor should not be involved in the process of deciding from which source to download a file -- that the decision depends too heavily on client-specific factors and client-specific code for HTCondor to do anything sane.\n\n</p><p>So consider a URL-based scheme, because that's the easiest way to gain control during the file-transfer process.  From HTCondor's POV, the contents of the URL are irrelevant, as long as calling basename() on it gives a reasonable file name.  This means a client could construct URLs like so:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">multi://file_//cvmfs/foo,http_//squid.local/foo,chirp_//foo\n</pre></div>\n\n\n<p>And write a pretty simple Python script to check the local filesystem, and then the SQUID cache, and then fall back on a chirp transfer from the submit node.  We (the HTCondor designers) ignore the difficulty of generating such URLs, at least for now.  Or the client could write a plugin that -- somehow -- determined what the different URLs might be, and then went down the list, or a combination of the two (e.g., a symbolic representation like gwdata and a fall-back location on the submit node).\n\n</p><p>In this approach, our immediate responsibility as HTCondor designers is to make sure that chirp during file transfer works, or provide an equivalent tool, and that the tool schedules transfers (in the schedd transfer token sense) appropriately.\n\n</p><p>INTERNAL APPROACH\n\n</p><p>The external approach suffers from a number of problems.  Some of them can be addressed incrementally -- e.g., adding multi:// or an equivalent as a first-class HTCondor feature would dramatically reduce code duplication between the client's custom plug-in and our existing plug-ins -- but I see two that can not: (a) getting \"the tool\" to work is going to be a pain, and one that will add load the schedd (unless we finally move the transfer queue out of the schedd) and (b) it's against the HTCondor religion to let code on the execute side decide what to transfer.\n\n</p><p>(An aside about efficiency: it would obviously be more efficient for both the schedd and \"the tool\" to batch the token requests and transfers.  Invoking \"the tool\" as a multifile plug-in should allow it to do its own batching; obviously, HTCondor would have to batch transfers if it handled multi:// natively.)\n\n</p><p>With respect to the religion, I boldly claim that rephrasing the problem in terms of multiple, explicitly-specified sources changes what's going on from heresy to a new form of retries, which we already permit the plug-ins to do with no further direction from the starter or the shadow.  This may mean that there's a follow-up ticket for a feature to transform transfer_input_files via an external script (whether at submit time or at transfer time), but it seems reasonable and prudent to me to leave that as a follow-up ticket for now.\n\n</p><p></p><hr/>\nOf the implementation ideas I've heard, a first-class execute-side transform of transfer_input_files sounds like the easiest for us to implement and the most like a hack (because keeping the implementation easy implies doing the transfers during the rewrite step).  It has all of the disadvantages of the external approach, excepting only that we probably don't have to change anything to get falling back to \"normal\" file transfer to work.  It also seems like fewer clients would be able to take advantage of this approach than making multiple sources for the same file a first-class concept.\n\n<p></p><hr/>\n<em>2021-May-10 20:10:53 by pfc:</em> <br/>\n\nThe ball is in Peter's court to move this forward: <a class=\"external\" href=\"https://github.com/lscsoft/osg-igwn/issues/268\">https://github.com/lscsoft/osg-igwn/issues/268</a></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2021-May-10 20:10", "status": "resolved", "created": "2020-Jun-02 11:38", "fixed_version": "2020-Jun-02 11:38", "broken_version": "", "priority": "2", "subsystem": "FileTransfer", "assigned_to": "coatsworth", "derived_from": "#7250", "creator": "coatsworth", "rust": "", "customer_group": "ligo", "visibility": "public", "notify": "tannenba@cs.wisc.edu, gthain@cs.wisc.edu, tlmiller@cs.wisc.edu", "due_date": ""}