{"id": 7177, "title": "Ticket #7177: Should transfer finished events have success/failure information?", "description": "<blockquote>\nThe transfer-finished events in the job log don't specify if the transfer completed successfully, but in at least one case (see below), appear even if the transfer failed.\n\n<p>I previously argued that transfer-finished events should appear even -- or perhaps especially -- for failed transfers; it's information that could be very useful, but we don't people (or programs) to have to infer it, for the same reason(s) that explicit transfer events are useful at all.\n\n</p><p>The obvious follow-up argument is that determining success or failure should <em>also</em> not require looking at other events.\n\n</p><p>I will have to investigate to see if the specific failure case that we know appears in the log is unique or not; there may be a counter-argument that we should instead make transfer-finished-and-failed events uniformly not appear in the log, and make the presence of an event signal success.\n\n</p><p>The obvious counter-argument may be identical in the case. ;)</p></blockquote>", "remarks": "<blockquote>\n<em>2019-Jul-31 16:05:45 by karpel:</em> <br/>\n\nThe philosophical issue seems to be whether you should be able to determine a job's state uniquely from the last event you read, or whether you need to reconstruct its entire history to determine the current state.\n\n<p>In the log in question, we get a sequence like\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">040 (8207717.000.000) 07/29 14:44:30 Entered queue to transfer output files\n...\n022 (8207717.000.000) 07/29 14:48:37 Job disconnected, attempting to reconnect\n    Socket between submit and execute hosts closed unexpectedly\n    Trying to reconnect to slot1_30@e273.chtc.wisc.edu &lt;128.105.245.73:9618?addrs=128.105.245.73-9618&amp;alias=e273.chtc.wisc.edu&amp;noUDP&amp;sock=startd_7113_813d_3&gt;\n...\n040 (8207717.000.000) 07/29 14:48:37 Finished transferring output files\n...\n023 (8207717.000.000) 07/29 14:48:37 Job reconnected to slot1_30@e273.chtc.wisc.edu\n    startd address: &lt;128.105.245.73:9618?addrs=128.105.245.73-9618&amp;alias=e273.chtc.wisc.edu&amp;noUDP&amp;sock=startd_7113_813d_3&gt;\n    starter address: &lt;128.105.245.73:9618?addrs=128.105.245.73-9618&amp;alias=e273.chtc.wisc.edu&amp;noUDP&amp;sock=starter_7716_5eb3_22739&gt;\n...\n040 (8207717.000.000) 07/29 14:55:13 Entered queue to transfer output files\n...\n022 (8207717.000.000) 07/29 15:00:13 Job disconnected, attempting to reconnect\n    Socket between submit and execute hosts closed unexpectedly\n    Trying to reconnect to slot1_30@e273.chtc.wisc.edu &lt;128.105.245.73:9618?addrs=128.105.245.73-9618&amp;alias=e273.chtc.wisc.edu&amp;noUDP&amp;sock=startd_7113_813d_3&gt;\n...\n040 (8207717.000.000) 07/29 15:00:13 Finished transferring output files\n...\n023 (8207717.000.000) 07/29 15:01:58 Job reconnected to slot1_30@e273.chtc.wisc.edu\n    startd address: &lt;128.105.245.73:9618?addrs=128.105.245.73-9618&amp;alias=e273.chtc.wisc.edu&amp;noUDP&amp;sock=startd_7113_813d_3&gt;\n    starter address: &lt;128.105.245.73:9618?addrs=128.105.245.73-9618&amp;alias=e273.chtc.wisc.edu&amp;noUDP&amp;sock=starter_7716_5eb3_22739&gt;\n...\n040 (8207717.000.000) 07/29 15:02:03 Entered queue to transfer output files\n...\n040 (8207717.000.000) 07/29 15:02:39 Started transferring output files\n\tSeconds spent in queue: 2395\n...\n040 (8207717.000.000) 07/29 15:02:42 Finished transferring output files\n...\n005 (8207717.000.000) 07/29 15:02:48 Job terminated.\n\t(1) Normal termination (return value 0)\n\t\tUsr 0 00:00:00, Sys 0 00:00:00  -  Run Remote Usage\n\t\tUsr 0 00:00:00, Sys 0 00:00:00  -  Run Local Usage\n\t\tUsr 0 00:00:00, Sys 0 00:00:00  -  Total Remote Usage\n\t\tUsr 0 00:00:00, Sys 0 00:00:00  -  Total Local Usage\n\t10730  -  Run Bytes Sent By Job\n\t10737418240  -  Run Bytes Received By Job\n\t10730  -  Total Bytes Sent By Job\n\t10737418240  -  Total Bytes Received By Job\n\tPartitionable Resources :    Usage  Request Allocated\n\t   Cpus                 :        0        1         1\n\t   Disk (KB)            : 10485797 11534336  11702622\n\t   Ioheavy              :                           0\n\t   Memory (MB)          :        1       50        50\n...\n</pre></div>\n\n\n<p>There are gaps after the \"finished transferring output files\" events where you would expect the next event to be a \"terminate\" according some imagined state transition diagram that doesn't actually exist, but it will in fact be a \"reconnect\". The only way to know that is to look at previous events and realize that you didn't really finish transferring, the shadow just lost touch with the starter.\n\n</p><p>So... maybe there should be another file transfer event subtype, something like \"transfer aborted\"? Can the shadow actually tell the difference at the point that it writes this message?\n\n</p><p></p><hr/>\n<em>2019-Jul-31 21:52:43 by bbockelm:</em> <br/>\n\nI don't understand what the philosophical question is about.\n\n<p>When a file transfer is complete, should we record its status (whether it was a success or failure)?\n\n</p><p>It seems to me that the answer is clearly \"yes\".\n\n</p><p></p><hr/>\n<em>2019-Aug-06 12:32:22 by tlmiller:</em> <br/>\n\nToddT is OK with either of always having an event that explicits identifies success or failure, or having an event whose presence signifies success and whose absence indicates failure.\n\n<p>I will see which one the code is currently trying to do. ;)\n\n</p><p></p><hr/>\n<em>2019-Aug-27 13:11:31 by tlmiller:</em> <br/>\n\nThe code currently \"always\" has an event, inasmuch as it does not distinguish between success and failure.  If the file transfer is not queued, there will not be queuing event.</blockquote>", "derived_tickets": "", "attachments": "", "check_ins": "", "type": "enhance", "last_change": "2019-Aug-27 13:11", "status": "new", "created": "2019-Jul-31 15:57", "fixed_version": "2019-Jul-31 15:57", "broken_version": "", "priority": "3", "subsystem": "FileTransfer", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, BBockelman@morgridge.org, karpel@wisc.edu", "due_date": ""}