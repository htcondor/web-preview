{"id": 6721, "title": "Ticket #6721: Segfault by the ClassAd python-wrapper", "description": "<blockquote>\n<a class=\"external\" href=\"https://lists.cs.wisc.edu/archive/htcondor-users/2018-July/msg00030.shtml\">A user on htcondor-users reports</a> a segfault when using the python bindings with python 3 as follows:\n\n<p></p><pre>       Python 3.6.5 | packaged by conda-forge | (default, Apr  6 2018, 13:39:56)\n</pre>\n\n<p></p><pre>       [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux\n</pre>\n\n<p></p><pre>       &gt;&gt;&gt; import htcondor, classad\n</pre>\n\n<p></p><pre>       &gt;&gt;&gt; coll  = htcondor.Collector()\n</pre>\n\n<p></p><pre>       &gt;&gt;&gt; schedd= htcondor.Schedd(coll.locate(htcondor.DaemonTypes.Schedd))\n</pre>\n\n<p></p><pre>       &gt;&gt;&gt; print([(k,v) for k,v in schedd.query()[0].items()])\n</pre>\n\n<p></p><pre>       Segmentation fault (core dumped)\n</pre>\n\n<p>The user investigated the problem and passes on the following useful explanation and potential solution:\n\n</p><p></p><ul>\nThe root of this SEGFAULT is that the `items` method of `ClassAdWrapper` returns invalid references to its child objects. A <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> object usually contains some objects of nontrivial type, such as `classad.ExprTree`, which are destroyed when their parent is garbage-collected by the python runtime. Therefore trying to access such objects results in memory access violation (SEGFAULT). Here is the code section responsible for it: <a class=\"external\" href=\"https://github.com/htcondor/htcondor/blob/3c73f7c8bcb9d4b99793cd3bc97251639e18b99d/src/python-bindings/classad.cpp#L993\">https://github.com/htcondor/htcondor/blob/3c73f7c8bcb9d4b99793cd3bc97251639e18b99d/src/python-bindings/classad.cpp#L993</a>\n\n<p>This is a python3-only problem because the `items` method of python 3 object returns an `iterator` instead of a list of tuples.\n\n</p><p>The proposed solution is to properly transform any non-trivial child object of `ClassAdWrapper` into a python object (with its own reference counter) so that the runtime can garbage collected them correctly.</p></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2018-Aug-16 16:02:41 by jpatton:</em> <br/>\n\nJ. Karpel is running into what we believe is a related problem:\n\n<p></p><ul>\nThis works:\n</ul>\n\n<p></p><div class=\"code\">\n<pre class=\"code\">schedd = htcondor.Schedd()\nwith schedd.transaction() as txn:\n    submit.queue(txn, 5)\n</pre></div>\n\n\n<p></p><ul>\nThis does not:\n</ul>\n\n<p></p><div class=\"code\">\n<pre class=\"code\">with htcondor.Schedd().transaction() as txn:\n    submit.queue(txn, 5)\n</pre></div>\n\n\n<p></p><ul>\nIt complains that the transaction isn't active. [...] My only guess is that the transaction doesn't have a reference to the schedd object, so if you don't manually give it a reference the schedd object gets cleaned up before the transaction executes, leaving the transaction dangling.\n</ul>\n\n<p></p><hr/>\n<em>2018-Aug-16 16:19:51 by edquist:</em> <br/>\n\nThat makes sense.\n\n<p>In the broken case, the temporary <code>schedd</code> object is destroyed (well, it goes out of scope anyway) before <code>submit.queue()</code> is executed.\n\n</p><p>But, i bet you could do something like:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">with htcondor.Schedd() as schedd:\n    with schedd.transaction() as txn:\n        submit.queue(txn, 5)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2018-Aug-16 16:23:43 by edquist:</em> <br/>\n\nOr, if you find <code>with</code> statements offensive, i suspect the following could work, as i think temporaries are supposed to stay in scope / not get destroyed for the lifetime of the whole expression:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">submit.queue(htcondor.Schedd().transaction(), 5)\n</pre></div>\n\n\n<p></p><hr/>\n<em>2019-Jul-05 14:38:24 by karpel:</em> <br/>\n\nAnother probably-related failure case is when doing something like:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">import htcondor\n\njob_ad = {\n     'Cmd': '/bin/sh',\n     'JobUniverse': 5,\n     'Iwd': os.path.abspath(\"/tmp\"),\n     'Out': 'testclaim.out',\n     'Err': 'testclaim.err',\n     'Arguments': 'sleep 5m',\n}\na = {'foo': 'bar'}\nb = {'foo': 'baz'}\n\nschedd = htcondor.Schedd()\ncluster_id = schedd.submitMany(job_ad, [(a, 2), (b, 2)])\n</pre></div>\n\n\n<p>Which occasionally fails, complaining about an unrecognized <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> value. Explicitly turning <code>job_ad</code>, <code>a</code>, and <code>b</code> into <code>ClassAd</code> resolved the issue.\n\n</p><p></p><hr/>\n<em>2019-Jul-08 16:03:01 by johnkn:</em> <br/>\n\nNotes:\n\n<p>Some discussion between TJ, ToddM and Josh lead two some hypothesis about the problem and proposed solutions.\n\n</p><p>In effect, a c++ <code>ExprTree</code> that is owned by a c++ Classad is freed when the Classad is freed.  But there are situations where the Bindings <code>ClassAsWrapper</code> can have it's ref count go to zero (and possibly be freed) while a python <code>ExprTreeHolder</code> object that points to an <code>ExprTree</code> within that classad still has a non-zero reference count.\n\n</p><p>This appears to be much more likely with Python3.\n\n</p><p>We discussed a few possible solutions, all are variations of holding a reference on The <code>ClassAdWrapper</code> while the <code>ExprTreeHolder</code> is alive.\n\n</p><p></p><ol>\n<li>The <code>ExprTreeHolde=r could hold a reference to the =ClassAdWrapper</code> when it is fetched from there.\n</li><li>The <code>ClassAdWrapper</code> could keep an exhaustive list of <code>ExprTreeHolders</code> that it has handed out, and keep itself alive as long as any of them are alive.\n</li><li>An <code>ExprTreeHolder</code> class could be changed to be either a free <code>ExprTree</code>, or a <code>ClassAdWrapper</code> + attribute-name\n</li></ol>\n\n<p>It was suggested that fixing this before we switch to PyBind11 may not be a good use of time, since we may have to do the reference counting in a different way with PyBind11.\n\n</p><p></p><hr/>\n<em>2019-Jul-08 16:04:41 by johnkn:</em> <br/>\n\nTo fix the fix the first problem mentioned in this ticket, the bindings <code>AttrItemIter</code> class needs to hold a reference on the <code>ClassAdWrapper</code> it refers to.\n\n<p></p><hr/>\n<em>2019-Jul-09 08:13:52 by bbockelm:</em> <br/>\n\nNote that the python bindings already do appropriate lifetime management -- anytime an <code>ExprTree</code> is handed out as a result of <code>__getitem__</code>, the return value policy ensures the  <code>ExprTree</code> keeps a reference to the parent <code>ClassAdWrapper</code>.\n\n<p>See here:\n\n</p><p><a class=\"external\" href=\"https://github.com/htcondor/htcondor/blob/master/src/python-bindings/classad_module_impl.cpp#L499\">https://github.com/htcondor/htcondor/blob/master/src/python-bindings/classad_module_impl.cpp#L499</a>\n\n</p><p>and the implementation of the return value policy:\n\n</p><p><a class=\"external\" href=\"https://github.com/htcondor/htcondor/blob/master/src/python-bindings/classad_expr_return_policy.h\">https://github.com/htcondor/htcondor/blob/master/src/python-bindings/classad_expr_return_policy.h</a>\n\n</p><p>(note that this special relationship is only done when a <code>ExprTree</code> or <code>ClassAdWrapper</code> is returned ... things such as strings or ints have no internal reference back to the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span>).\n\n</p><p>The problem here is, of course, that there are callsites where the lifetime isn't declared. Scanning through (<a class=\"external\" href=\"https://github.com/htcondor/htcondor/blob/master/src/python-bindings/classad_module_impl.cpp#L556\">https://github.com/htcondor/htcondor/blob/master/src/python-bindings/classad_module_impl.cpp#L556</a>), I think this is missing for <code>get()</code>, <code>setdefault()</code>, and the various iterators (<code>items()</code>, <code>keys()</code>, etc).\n\n</p><p>The good news is this is approximately a one-line change for the relevant callsites.  This also appears completely orthogonal to the move to pybind11 (which uses the same model).\n\n</p><p></p><hr/>\n<em>2019-Jul-09 08:14:54 by bbockelm:</em> <br/>\n\nNote: the missing lifetime declaration is the same root problem as the issue with the transaction method above.  There's probably other cases in Python.\n\n<p></p><hr/>\n<em>2019-Jul-22 15:37:36 by edquist:</em> <br/>\n\nHi, I've lost touch a bit with this ticket.\n\n<p>What's the proposed (one-line per call site) fix we're currently proposing?\n\n</p><p>Is it still to transform child objects of `ClassAdWrapper` into a \"python objects\" so that they get GC'd correctly?\n\n</p><p></p><hr/>\n<em>2019-Jul-23 16:45:28 by edquist:</em> <br/>\n\n@bbockelm, is this basically what you had in mind for a fix?\n\n<p><a class=\"external\" href=\"https://github.com/htcondor/htcondor/commit/e6da2902180731857ed1b825070bc6b15fa25daf\">https://github.com/htcondor/htcondor/commit/e6da2902180731857ed1b825070bc6b15fa25daf</a>\n\n</p><p>(Adding <code>condor::classad_expr_return_policy&lt;&gt;()</code> to the <code>.def()</code> callsites that return <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> or <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> objects)\n\n</p><p></p><hr/>\n<em>2019-Jul-30 15:46:48 by edquist:</em> <br/>\n\nSo, for adding <code>condor::classad_expr_return_policy&lt;&gt;()</code> to the <code>.def()</code> callsites that return <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> or <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> objects -\n\n<p>Apparently this works when a function pointer is passed into the <code>.def()</code> call, as\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">.def(\"get\", &amp;ClassAdWrapper::get, ...\n</pre></div>\n\n\n<p>but not for things like <code>items()</code> or <code>__iter__()</code>, which pass in a <code>boost::python::range</code> thing:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">.def(\"items\", boost::python::range(&amp;ClassAdWrapper::beginItems, &amp;ClassAdWrapper::endItems), ...\n</pre></div>\n\n\n<p>Adding <code>condor::classad_expr_return_policy&lt;&gt;()</code> to the latter results in a compile error (error output below).\n\n</p><p>Is there a different way we need to specify the return policy for a range object?\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">[ 34%] Building CXX object src/python-bindings/CMakeFiles/classad_module.dir/classad_module_impl.cpp.o\nIn file included from /usr/include/boost169/boost/python/object_core.hpp:20:0,\n                 from /usr/include/boost169/boost/python/args.hpp:22,\n                 from /usr/include/boost169/boost/python.hpp:11,\n                 from /home/edquist/rpmbuild/BUILD/condor-8.9.4/src/python-bindings/python_bindings_common.h:43,\n                 from /home/edquist/rpmbuild/BUILD/condor-8.9.4/src/python-bindings/classad_module_impl.cpp:1:\n/usr/include/boost169/boost/python/def_visitor.hpp: In instantiation of \ufffdstatic void boost::python::def_visitor_access::visit(const V&amp;, classT&amp;, const char*, const OptionalArgs&amp;) [with V = boost::python::def_visitor&lt;boost::python::api::object&gt;; classT = boost::python::class_&lt;ClassAdWrapper, boost::noncopyable_::noncopyable&gt;; OptionalArgs = boost::python::detail::def_helper&lt;condor::classad_expr_return_policy&lt;&gt;, char [49], boost::python::detail::not_specified, boost::python::detail::not_specified&gt;]\ufffd:\n/usr/include/boost169/boost/python/def_visitor.hpp:74:58:   required from \ufffdvoid boost::python::def_visitor&lt;DerivedVisitor&gt;::visit(classT&amp;, const char*, const OptionalArgs&amp;) const [with classT = boost::python::class_&lt;ClassAdWrapper, boost::noncopyable_::noncopyable&gt;; OptionalArgs = boost::python::detail::def_helper&lt;condor::classad_expr_return_policy&lt;&gt;, char [49], boost::python::detail::not_specified, boost::python::detail::not_specified&gt;; DerivedVisitor = boost::python::api::object]\ufffd\n/usr/include/boost169/boost/python/class.hpp:478:9:   required from \ufffdvoid boost::python::class_&lt;T, X1, X2, X3&gt;::def_impl(T*, const char*, LeafVisitor, const Helper&amp;, const boost::python::def_visitor&lt;Visitor&gt;*) [with T = classad::ClassAd; Helper = boost::python::detail::def_helper&lt;condor::classad_expr_return_policy&lt;&gt;, char [49], boost::python::detail::not_specified, boost::python::detail::not_specified&gt;; LeafVisitor = boost::python::api::object; Visitor = boost::python::api::object; W = ClassAdWrapper; X1 = boost::noncopyable_::noncopyable; X2 = boost::python::detail::not_specified; X3 = boost::python::detail::not_specified]\ufffd\n/usr/include/boost169/boost/python/class.hpp:251:9:   required from \ufffdboost::python::class_&lt;T, X1, X2, X3&gt;::self&amp; boost::python::class_&lt;T, X1, X2, X3&gt;::def(const char*, Fn, const A1&amp;, const A2&amp;) [with Fn = boost::python::api::object; A1 = condor::classad_expr_return_policy&lt;&gt;; A2 = char [49]; W = ClassAdWrapper; X1 = boost::noncopyable_::noncopyable; X2 = boost::python::detail::not_specified; X3 = boost::python::detail::not_specified; boost::python::class_&lt;T, X1, X2, X3&gt;::self = boost::python::class_&lt;ClassAdWrapper, boost::noncopyable_::noncopyable&gt;]\ufffd\n/home/edquist/rpmbuild/BUILD/condor-8.9.4/src/python-bindings/classad_module_impl.cpp:529:21:   required from here\n/usr/include/boost169/boost/python/def_visitor.hpp:43:9: error: no matching function for call to \ufffdboost::python::api::object::visit(boost::python::class_&lt;ClassAdWrapper, boost::noncopyable_::noncopyable&gt;&amp;, const char*&amp;, const boost::python::detail::def_helper&lt;condor::classad_expr_return_policy&lt;&gt;, char [49], boost::python::detail::not_specified, boost::python::detail::not_specified&gt;&amp;) const\ufffd\n         v.derived_visitor().visit(c, name, options);\n         ^\n/usr/include/boost169/boost/python/def_visitor.hpp:43:9: note: candidate is:\nIn file included from /usr/include/boost169/boost/python/args.hpp:22:0,\n                 from /usr/include/boost169/boost/python.hpp:11,\n                 from /home/edquist/rpmbuild/BUILD/condor-8.9.4/src/python-bindings/python_bindings_common.h:43,\n                 from /home/edquist/rpmbuild/BUILD/condor-8.9.4/src/python-bindings/classad_module_impl.cpp:1:\n/usr/include/boost169/boost/python/object_core.hpp:160:12: note: template&lt;class ClassT, class DocStringT&gt; void boost::python::api::object_operators\\<u\\>::visit(ClassT&amp;, const char*, const boost::python::detail::def_helper&lt;DocStringT&gt;&amp;) const [with ClassT = ClassT; DocStringT = DocStringT; U = boost::python::api::object]\n       void visit(ClassT&amp; cl, char const* name, python::detail::def_helper&lt;DocStringT&gt; const&amp; helper) const\n            ^\n/usr/include/boost169/boost/python/object_core.hpp:160:12: note:   template argument deduction/substitution failed:\nIn file included from /usr/include/boost169/boost/python/object_core.hpp:20:0,\n                 from /usr/include/boost169/boost/python/args.hpp:22,\n                 from /usr/include/boost169/boost/python.hpp:11,\n                 from /home/edquist/rpmbuild/BUILD/condor-8.9.4/src/python-bindings/python_bindings_common.h:43,\n                 from /home/edquist/rpmbuild/BUILD/condor-8.9.4/src/python-bindings/classad_module_impl.cpp:1:\n/usr/include/boost169/boost/python/def_visitor.hpp:43:9: note:   mismatched types \ufffdboost::python::detail::not_specified\ufffd and \ufffdchar [49]\ufffd\n         v.derived_visitor().visit(c, name, options);\n         ^\n/usr/include/boost169/boost/python/def_visitor.hpp:43:9: note:   \ufffdconst boost::python::detail::def_helper&lt;condor::classad_expr_return_policy&lt;&gt;, char [49], boost::python::detail::not_specified, boost::python::detail::not_specified&gt;\ufffd is not derived from \ufffdconst boost::python::detail::def_helper&lt;DocStringT, boost::python::detail::not_specified, boost::python::detail::not_specified, boost::python::detail::not_specified&gt;\ufffd\n</u\\></pre></div>\n\n\n<p></p><hr/>\n<em>2019-Jul-31 17:29:35 by edquist:</em> <br/>\n\nI tried adding <code>boost::python::with_custodian_and_ward_postcall&lt;0,1&gt;()</code> for the return policy, per BrianB's suggestion; but I still get a similar compile error for that:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">/home/edquist/rpmbuild/BUILD/condor-8.9.4/src/python-bindings/classad_module_impl.cpp:529:21:   required from here\n/usr/include/boost169/boost/python/def_visitor.hpp:43:9: error: no matching function for call to \ufffdboost::python::api::object::visit(boost::python::class_&lt;ClassAdWrapper, boost::noncopyable_::noncopyable&gt;&amp;, const char*&amp;, const boost::python::detail::def_helper&lt;boost::python::with_custodian_and_ward_postcall&lt;0ul, 1ul&gt;, char [49], boost::python::detail::not_specified, boost::python::detail::not_specified&gt;&amp;) const\ufffd\n         v.derived_visitor().visit(c, name, options);\n         ^\n</pre></div>\n\n\n<p></p><hr/>\n<em>2019-Aug-14 17:24:15 by edquist:</em> <br/>\n\nI've added <code>classad_expr_return_policy</code> where possible in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/311a4058b63ca6a913a7f9b1a9f7dc95a5c893d2\">[57667]</a></span>.  The result compiles but does not address the original issue with <code>.items()</code>.\n\n<p>Brian B had suggested using <code>boost::python::with_custodian_and_ward_postcall</code> instead of <code>classad_expr_return_policy</code> for the <code>boost::python::range</code> instances (including <code>.items()</code>), but that didn't compile either.\n\n</p><p></p><hr/>\n<em>2019-Dec-18 19:59:55 by edquist:</em> <br/>\n\nTim T, please see Brian B's PR, which addresses the issue for <code>items()</code>:\n\n<p><a class=\"external\" href=\"https://github.com/htcondor/htcondor/pull/88\">https://github.com/htcondor/htcondor/pull/88</a>\n\n</p><p></p><hr/>\n<em>2019-Dec-18 20:18:05 by bbockelm:</em> <br/>\n\n@TimT - do you recall why 1170c1f98cba6462db02b477f3e0888e0c36bbd1 was done (reverting the return policy changes)?  To me, they look correct; curious if they tickled a specific failure that Carl could look into.\n\n<p></p><hr/>\n<em>2019-Dec-19 10:19:01 by tim:</em> <br/>\n\nAs I recall, there were failures in the classad unit tests on BaTLab.\n\n<p></p><hr/>\n<em>2019-Dec-26 22:32:27 by tim:</em> <br/>\n\nThe change that I reverted caused the following errors on the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> unit tests:\n\n<p></p><div class=\"code\">\n<pre class=\"code\">======================================================================\nERROR: test_get (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 259, in test_get\n    self.assertEqual(ad.get(\"foo\"), None)\nArgumentError: Python argument types in\n    ClassAd.get(ClassAd, str)\ndid not match C++ signature:\n    get(ClassAdWrapper {lvalue}, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, boost::python::api::object)\n\n======================================================================\nERROR: test_setdefault (__main__.TestClassad)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"tests/classad_tests.py\", line 268, in test_setdefault\n    self.assertEqual(ad.get(\"foo\"), \"bar\")\nArgumentError: Python argument types in\n    ClassAd.get(ClassAd, str)\ndid not match C++ signature:\n    get(ClassAdWrapper {lvalue}, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt;, boost::python::api::object)\n\n----------------------------------------------------------------------\n</pre></div>\n\n\n<p></p><hr/>\n<em>2019-Dec-27 08:26:08 by bbockelm:</em> <br/>\n\nAh, I see the problem - the call policy is not interacting correctly with the get_overloads.  The other cases are correct, I think.\n\n<p>@Carl - can you take a whack at this again?\n</p><hr/>\n<em>2020-Apr-10 07:40:58 by tim:</em> <br/>\n\nBulk change of target version from v080808 to v080809 using ticket-target-mover.\n\n<p></p><hr/>\n<em>2020-Sep-02 15:15:48 by karpel:</em> <br/>\n\nI just wasted yet another half hour of my life with <code>with htcondor.Schedd().transaction() as txn:</code> not working. This ticket is marked review for 8.8.9, and the commits are in 8.9.9 (which is what I'm working against). So, this is clearly not resolved. Where are we on this?\n\n<p></p><hr/>\n<em>2020-Sep-22 14:37:18 by tim:</em> <br/>\n\n<strong>CODE REVIEW</strong> I reviewed this when I cherry-picked it in. LGTM.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=7691\" onclick=\"get_ticket_and_populate_wrapper('7691'); return false;\" title=\"Python bindings memory management\">#7691</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nPython bindings memory management</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Dec-26 16:43</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/84b510190622dce6c2ba5f4cce55d69039605c54\">[58761]</a></span>: Ensure lifetime of iterators and returned values. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6721\" onclick=\"get_ticket_and_populate_wrapper('6721'); return false;\" title=\"Segfault by the ClassAd python-wrapper\">#6721</a></span> This uses the boost call policies mechanism to ensure that the parent <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> both outlives the iterator and any values that the tuples may contain. Conflicts: src/python-bindings/classad_module_impl.cpp Committer: Tim Theisen  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Dec-18 20:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/dac77c94f7a93b60306b8f25f47ec46c6648f8cc\">[58758]</a></span>: Ensure lifetime of iterators and returned values. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6721\" onclick=\"get_ticket_and_populate_wrapper('6721'); return false;\" title=\"Segfault by the ClassAd python-wrapper\">#6721</a></span> This uses the boost call policies mechanism to ensure that the parent <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> both outlives the iterator and any values that the tuples may contain.  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Sep-13 16:50</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/1170c1f98cba6462db02b477f3e0888e0c36bbd1\">[57837]</a></span>: Revert \"specify classad_expr_return_policy when returning <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6721\" onclick=\"get_ticket_and_populate_wrapper('6721'); return false;\" title=\"Segfault by the ClassAd python-wrapper\">#6721</a></span>)\" This reverts commit b43f43ec45cc0b36ffc7ba86746c10b04785cb72.  (By Tim Theisen )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Sep-13 14:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/b43f43ec45cc0b36ffc7ba86746c10b04785cb72\">[57836]</a></span>: specify classad_expr_return_policy when returning <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6721\" onclick=\"get_ticket_and_populate_wrapper('6721'); return false;\" title=\"Segfault by the ClassAd python-wrapper\">#6721</a></span>) note we can't use classad_expr_return_policy for ranges; that was causing compile errors. Committer: Tim Theisen  (By Carl Edquist )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2019-Aug-14 16:13</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/311a4058b63ca6a913a7f9b1a9f7dc95a5c893d2\">[57667]</a></span>: specify classad_expr_return_policy when returning <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExprTree\" title=\"Expr Tree\">ExprTree</a></span> (<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=6721\" onclick=\"get_ticket_and_populate_wrapper('6721'); return false;\" title=\"Segfault by the ClassAd python-wrapper\">#6721</a></span>) note we can't use classad_expr_return_policy for ranges; that was causing compile errors.  (By Carl Edquist )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2020-Sep-22 14:37", "status": "resolved", "created": "2018-Jul-27 15:04", "fixed_version": "2018-Jul-27 15:04", "broken_version": "v080708", "priority": "4", "subsystem": "PythonBinding", "assigned_to": "tim", "derived_from": "", "creator": "jpatton", "rust": "", "customer_group": "users", "visibility": "public", "notify": "edquist@cs.wisc.edu,jpatton@cs.wisc.edu,tannenba@cs.wisc.edu,mingxuan.lin@rwth-aachen.de,johnkn@cs.wisc.edu,karpel@wisc.edu,BBockelman@morgridge.org", "due_date": ""}