{"id": 123, "title": "Ticket #123: Grand unified param() system: Phase 1", "description": "<blockquote>\n<span class=\"section\"><h2>Problems with configuring Condor:</h2></span>\n\n<p></p><ul>\n<li>Documentation of features, the actual implementation, and the sample configuration files are separated, making it easy for them to drift apart.\n</li><li>Condor is hard pressed to provide useful error messages or context when a setting is invalid.\n</li><li>If a single setting is used (param()ed) in multiple places in the code, it's possible for them to drift and end up with different acceptable values or defaults.\n</li><li>condor_config_val cannot report default values\n</li><li>Creating a tool to present settings in a more user friendly way isn't terribly practical.\n</li></ul>\n\n<p><span class=\"section\"></span></p><h2>Solution: </h2>\n\n<p>A Grand Unified Configuration Table.\n\n</p><p>The code would contain a single file that listed all configuration options, defaults, acceptable format (integer, floating point number, expression, string, etc), the acceptable range, acceptable length, which daemons or tools it impacts,  the \"category\" and the documentation marked up in some simple to parse way.  The documentation would not need to specifically mention the defaults or acceptable ranges as it's available in the other fields.\n\n</p><p>There would also be a new tool, probably not distributed to users, which spits out the data in structured form on demand.  It would use the category and daemon name to organize the entries.  It could emit condor_config.generic (using the description stripped of all formatting as a comment).  It could emit LaTeX for inclusion in the manual, this time using reformatting description.\n\n</p><p>A flag day isn't really reasonable, but the old and new systems can exist side by side, with new code using the new system and old code converted as its convenient.\n\n</p><p>If we integrate documentation into the system, it needs to be available for Karen to edit. Karen doesn't generally check out the code, and requiring both the code and the documentation would complicate just building the manual. And if we do the obvious: cramming the documentation in as C strings, we've added yet another escaping system to worry about. So this needs consideration. A possibility: Instead of going code to documentation, we might be able to go documentation to code: keep the documentation in LaTeX in CONDOR_DOC, and suck it into the code as part of the build process. Or keep the documentation and settings in a third file and pull it into both the documentation and the code.\n\n</p><p><span class=\"subsection\"></span></p><h3>Benefits </h3>\n\n<p></p><ul>\n<li>The act of adding a new configuration variable could automatically create at least a minimal configuration example and documentation entry.\n</li><li>condor_config_val could automatically write out a default condor_config configuration file.\n</li><li>condor_config_val can report defaults with something like, \"EXAMPLE_SETTING not found.  Using default of 42.\"\n</li><li>condor_config_val can also provide on-demand documentation.\n</li><li>When EXCEPTing because an invalid configuration setting was found, the description and acceptable limits could be shown to guide the user in fixing it.\n</li><li>Testing for invalid configuration would be in a single shared location, simplifying code elsewhere that already validates input.\n</li><li>With this single repository of data, various tools to present different, specialized views of the configuration file become practical.  For example, if categorization is implemented or supplemented with tags, you could tag settings by which daemon they impact, and if they are security, performance, scalability, or something else.  Then a user with a slow schedd can ask to see all setting tagged \"schedd\" and \"scalability\".\n</li></ul>\n\n<p>(This is based on various previous suggestions, including psilord's message \"ccv -dump\" sent to condor-staff on Janury 26th, 2007, <a class=\"external\" href=\"http://condor-bugs.cs.wisc.edu/cgi-bin/gnats/gnatsweb.pl?cmd=view%20audit-trail&amp;database=condor&amp;pr=716\">GNATS 716</a>:  and <a class=\"external\" href=\"http://condor-bugs.cs.wisc.edu/cgi-bin/gnats/gnatsweb.pl?cmd=view%20audit-trail&amp;database=condor&amp;pr=819\">GNATS 819</a>. It was imported from <span class=\"drupalnode\"><a href=\"http://drupal-old.batlab.cs.wisc.edu/node/1712\">1712 (backup)</a> <a href=\"http://nmi.cs.wisc.edu/node/1712\">1712 (public)</a></span>)\n\n</p><p><span class=\"section\"></span></p><h2>Milestones </h2>\n\n<p></p><ul>\n<li>Hack upon the perl script for table generation [DONE]\n</li><li>Debugging, submission to NMI, documenting. [Monday July 15th, 2009]</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2009-Jan-26 11:58:06 by adesmet:</em> <br/>\n\nCirca late 2008, Kevin was reportedly working on parts of this.\n\n<p></p><hr/>\n<em>2009-Feb-18 14:15:51 by tristan:</em> <br/>\n\nThe project was passed off to me when Kevin left.\n\n<p>Right now param_info.in is pretty much a table that gives names, default values, types, ranges, etc.  It's parsed by a perl script, which generates a c file that initializes a table by inserting all these values into it.  This can be generated compile-time, and shouldn't need to be tracked in git.\n\n</p><p>Most of the core necessary changes seem to have been made, I'm still working on figuring out what still needs to be done.\n\n</p><p>I'll be updating the description above today with some new benefits/use cases that Todd and I recently discussed.\n\n</p><p></p><hr/>\n<em>2009-Apr-07 15:28:43 by tristan:</em> <br/>\n\nA little late, but here's some more information on what we'd like it to do:\n<ul>\n<li>Find all options for which the current value is not equal to the default.  Use this information to write up a configuration file, preferably split up by subsystem (or some other categorization).\n</li><li>Iterate all configuration options and spit them out in a fashion similar to Firefox's about::config.\n</li><li>Mark certain values as immutable (i.e. the value must be equal to the default).\n</li></ul>\n\n<p>Right now a good portion of using a default value if an updated one doesn't exist has been completed, there's still a little bit of work to do.  I haven't worked on any of the points above yet.\n\n</p><p></p><hr/>\n<em>2009-Jun-01 19:46:10 by tristan:</em> <br/>\n\nHere's a final update from me on this.  The code is all currently in /p/condor/workspaces/tristan/CONDOR_SRC/.\n\n<p>File Descriptions\n</p><hr/>\n<pre>    condor_c++_util/param_info.c\n</pre>\n\n<p>This holds functions that use the param_info_hash and insert and lookup default values from the table.  This file contains the param_default_* functions, which look up the default value of the indicated type for the given parameter.  This file also holds param_info_init(), which #includes param_info_init.c to initialize the table.  It contains bound-checking functions as well.\n\n</p><p></p><pre>    condor_c++_util/param_info_c_generator.pl\n</pre>\n\n<p>This is the perl script that converts the default value table in param_info.in into the param_info_init.c file.  It basically formats each entry in the table into a param_info_insert call with the indicated values.  It can be run with no arguments; in this case, it reads in param_info.in in the same directory and outputs param_info_init.c, also in the same directory.\n\n</p><p></p><pre>    condor_c++_util/param_info.h\n</pre>\n\n<p>This is the header file for param_info.c.\n\n</p><p></p><pre>    condor_c++_util/param_info_hash.c\n</pre>\n\n<p>This contains the hash table implementation used for the default parameter table.  It contains basic insert and lookup functions, as well as an iterator function that may be useful for dumping out config file information.\n\n</p><p></p><pre>    condor_c++_util/param_info.in\n</pre>\n\n<p>This is the default value table that is read in by param_info_c_generator.pl.  Its format is mostly self-explanatory.  In the last few days I have noticed that many of the default values in it are wrong; these should be fixed very quickly.\n\n</p><p></p><pre>    condor_c++_util/param_info_init.c\n</pre>\n\n<p>This file is generated by param_info_c_generator.pl out of param_info.in.  It should not be in git, since the goal is for it to be built at compile-time.\n\n</p><p></p><pre>    condor_c++_util/condor_config.cpp\n</pre>\n\n<p>This file has been modified pretty heavily.  The param() functions now mostly have param_with_default counterparts and take another parameter, a boolean, which defaults to true.  If this boolean (use_param_table) is true, then the normal functions all just use their respective _with_default functions.  These functions look up the default values in the param table if they are not found in the config file.  By explicitly setting use_param_table to false, one can make the function be used the old way.  This should only be used in this transition period; the end goal is to get rid of the old functions altogether.\n\n</p><p></p><pre>    condor_include/condor_config.h\n</pre>\n\n<p>This header file has been modified as well to match the changes in condor_config.cpp.\n\n</p><p></p><pre>    condor_tools/condor_config_val.cpp\n</pre>\n\n<p>The condor_config_val has a new -writeconfig option that should print out a configuration file for the currently-running instance of Condor.  This is still mid-debug as well, so I'm not sure how well it works, if at all.\n\n</p><p></p><hr/>\nUnfortunately I didn't get as far as I'd wanted to, due to a dprintf error that I'm entirely not sure how to fix, so there is still a lot undone.  The master outputs a dprintf fatal error in the log directory that says there is a bad file descriptor on unlocking; I'm not certain of how my code created the problem, and so haven't found a way to fix it.  Getting past this is the first step.  I've included a section at the end that explains more about the current dprintf roadblock.\n\n<p>Then, the default value table in param_info.in should be checked over and probably added to, since I had to add a lot of stuff to it to get the code as far as it is now.\n\n</p><p>Finally, the condor_config_val -write_config option should be finished.  Once everything else is in place, I think this should be pretty close to completed.  I think I have it write out to a file with a static name; once the option is working, this should be passable on the command line.\n\n</p><p></p><hr/>\ndprintf block\n\n<p>Currently, the code compiles.  When running condor_master, it exits with status 0.  It places a dprintf debug file in the LOG directory that indicates that dprintf can't unlock the lock file <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=MasterLock\" title=\"Master Lock\">MasterLock</a></span> because of a bad file pointer.  I think I corrected every default value Condor had read in up to that point to see if it would fix the problem, but it didn't help.  I also attempted to \"turn off\" the default value table by making the default use_param_table be \"false\" instead of \"true\", but this didn't have any effect on it either, so I'm not really certain what caused it in the first place.  Looking at the source, it looks like <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=LockFd\" title=\"Lock Fd\">LockFd</a></span> (the file pointer in question) should be -1 every time the file is closed, but the file pointer is 3 when the error occurs, so I got stuck.  Hopefully someone will have more luck than me.\n\n</p><p></p><hr/>\n<em>2009-Jul-08 14:32:26 by psilord:</em> <br/>\n\nI've reproduced the error Tristan had. Debugging.\n\n<p></p><hr/>\n<em>2009-Jul-08 15:52:06 by psilord:</em> <br/>\n\nI wonder..... Some debug code was added deep into param which emitted, using dprintf, some information about the control flow. It could be that when the master forks off a child, I remember there are situations where dprintf can't be called in the control flow. Maybe what is happening is param is being called, which emits dprintf, which happens after it isn't supposed to, the lockfd to the lock file is closed, and bam, error.\n\n<p></p><hr/>\n<em>2009-Jul-08 16:09:11 by psilord:</em> <br/>\n\nYup, that seemed to be the error.... What this means, practically, is that it'll be hard to use dprintf to debug control flow in the lower level param code.\n\n<p>My current fix is to simple comment out all of the debugging statements in that area of the codes for now.\n\n</p><p>It'll be a little bit of thinking to figure out how to do a good tracing mechanism for this codebase....\n\n</p><p>Onward ho, though.\n\n</p><p></p><hr/>\n<em>2009-Jul-08 16:54:14 by psilord:</em> <br/>\n\nWhen adding some configuration variables, like DNS_CACHE_REFRESH, it would be handy to supply an integer randomization range to add to it. like: random=600 and what this means is it'll be default+(rand()%random).\n\n<p></p><hr/>\n<em>2009-Jul-08 17:38:13 by psilord:</em> <br/>\n\nFinding something like &lt;SUBSYS&gt;_SETTABLE_ATTRS_&lt;PERM-LEVEL&gt; in the config file\nleaves me queasy. There are 13 subsystems, and 14 perms. Do we really want to hand specify 13 * 14, or 182 individual entries, PLUS a SETTABLE_ATTRS_&lt;PERM-LEVEL&gt; for each one also, for an additional 14 entries, coming to a total of <strong>196</strong> entries into our param_info.in hand specified table? And yes, each one is in fact, looked up into the param table in the current source codes.\n\n<p>Can't we do some sort of pattern matching specification for these types of things, drilling down to specifics when needed, otherwise the whole pattern defaults come into play?\n\n</p><p>It would be easy to check the non pattern stuff first, then if none of those\napply, check the pattern matches, and if more than one matches, well, we'll have\nto change something so that doesn't happen.\n\n</p><p>The stupid hacked on parametizable configuration variable names all following various different conventions in the source code, because people didn't know or care there was already a method in place--so they wrote a new one, are <strong>annoying</strong>.\n\n</p><p></p><hr/>\n<em>2009-Jul-14 10:24:46 by psilord:</em> <br/>\n\n<strong>sigh</strong> There are a lot of these types of lookups in Condor:\n\n<p></p><div class=\"verbatim\">\n<pre>sprintf(buf, \"%s_FLAG\", name_in_config_file );\ntmp = param(buf);\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Jul-14 14:06:30 by psilord:</em> <br/>\n\nOk, I discovered that you can turn off the \"EXCEPT if variable not defined in default table\" behavior. I did that, and hacked the range checking functions to ignore the check on variables that aren't in the default table, and the daemons all came up. I'm running the test suite through them to see if it works.\n\n<p></p><hr/>\n<em>2009-Jul-15 11:21:26 by psilord:</em> <br/>\n\nWell, the stduniv tests worked. Many of the other tests failed with timeouts though. The wreckage is pretty bad and it is hard to tell what happened or if my changes are to blame, or just general test suite lossage....\n\n<p></p><hr/>\n<em>2009-Jul-17 16:30:51 by psilord:</em> <br/>\n\nOk, trying to run the tests again. Apparently, having a personal condor already running while trying to run the tests is not a good idea. :(\n\n<p></p><hr/>\n<em>2009-Jul-20 15:47:02 by psilord:</em> <br/>\n\nOk, I got it to pass the test suite. But when doing test merges, it seems I ran nastily into changes done by DanB for <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=390\" onclick=\"get_ticket_and_populate_wrapper('390'); return false;\" title=\"config file should allow expressions in more places\">#390</a></span>. So him and I are meeting tomorrow to resolve the conflicts.\n\n<p></p><hr/>\n<em>2009-Jul-22 00:11:27 by psilord:</em> <br/>\n\nOk, after a horrible rebasing and getting DanB to help with it (since he implemented <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=390\" onclick=\"get_ticket_and_populate_wrapper('390'); return false;\" title=\"config file should allow expressions in more places\">#390</a></span> which intersected with the code changes for this ticket), I think I am back to getting it to work again. I hacked on param_info_c_generator.pl to have it tell me when there is no default for variables of type int. The default went to zero, and this is bad because it overrode the default specified in the codebase with the param() call and Condor got very confused....\n\n<p>Also, I found this piece of code, which shows a cascading default. This is\nnot representable in the current system.\n\n</p><p></p><div class=\"verbatim\">\n<pre>void CondorJobReconfig()\n{\n    int tmp_int;\n\n    tmp_int = param_integer( \"CONDOR_JOB_POLL_INTERVAL\", 5 * 60 );\n    CondorResource::setPollInterval( tmp_int );\n\n    tmp_int = param_integer( \"GRIDMANAGER_GAHP_CALL_TIMEOUT\", 8 * 60 * 60 );\n    tmp_int = param_integer( \"GRIDMANAGER_GAHP_CALL_TIMEOUT_CONDOR\", tmp_int );\n    CondorJob::setGahpCallTimeout( tmp_int );\n\n    tmp_int = param_integer(\"GRIDMANAGER_CONNECT_FAILURE_RETRY_COUNT\",3);\n    CondorJob::setConnectFailureRetry( tmp_int );\n\n    // Tell all the resource objects to deal with their new config values\n    CondorResource *next_resource;\n\n    CondorResource::ResourcesByName.startIterations();\n\n    while ( CondorResource::ResourcesByName.iterate( next_resource ) != 0 ) {\n        next_resource-&gt;Reconfig();\n    }\n\n}\n\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Jul-22 00:18:48 by psilord:</em> <br/>\n\nDAGMAN_ALLOW_EVENTS is a pretty complicated configuration file variable... how it is set up and defaulted needs scrutiny to see if we need to increase the power of the default table system.\n\n<p></p><hr/>\n<em>2009-Jul-22 00:34:47 by psilord:</em> <br/>\n\nHere is another awesome use of a configuration file variable with different defaults for different daemons:\n\n<p></p><div class=\"verbatim\">\n<pre>../../src/condor_c++_util/proc_family_interface.cpp:    bool use_procd_default = !is_master;\n../../src/condor_c++_util/proc_family_interface.cpp:    if (param_boolean(\"USE_PROCD\", use_procd_default)) {\n</pre></div>\n\n\n<p></p><hr/>\n<em>2009-Jul-22 10:15:30 by psilord:</em> <br/>\n\nAfter some minor hacking, fixed the param_info_c_generator to allow the 'dot' notation for configuration variables. Things like MASTER.USE_PROCD can exist at the same time with USE_PROCD, and the former is looked up first by the param system.\n\n<p></p><hr/>\n<em>2009-Jul-22 15:43:07 by psilord:</em> <br/>\n\nOk, I integrated the codes a bit better into the build system, so when certain files get touched things get rebuilt properly. I also debugged a bug in compute_range() which decomposes the allowable range for a parameter. That function simply needs more work--I hacked it into working for now.\n\n<p></p><hr/>\n<em>2009-Jul-23 10:17:20 by psilord:</em> <br/>\n\nDebugged a problem where the default table's parameter names were case sensitive. It is now case insensitive.\n\n<p></p><hr/>\n<em>2009-Jul-23 10:57:27 by psilord:</em> <br/>\n\nAdded some codes to put the new default table setting into the stupid \"<span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExtraParamInfo\" title=\"Extra Param Info\">ExtraParamInfo</a></span>\" structure.\n\n<p>Man, all of this stupid code needs refactoring like a starred problem in an algebra book.\n\n</p><p></p><hr/>\n<em>2009-Jul-27 16:35:02 by psilord:</em> <br/>\n\nOk, here is a \"conflict of interest\" between the two often used methods of looking up parameters in Condor:\n\n<p>The first way <code>&lt;SUBSYS&gt;.THING</code>, and the second way is <code>\"%s_THING\"</code> where %s is filled in at runtime to be the subsystem.\n\n</p><p>Some people may say that these are exactly redundant and the second form can be done away with and replaced by the first. This is not true.\n\n</p><p>The specific example is: <code>LOCK</code> vs. <code>MASTER_LOCK</code>. The former is the location of\nthe lock directory, and the second is the path to the actual lock file used by the daemon with the appropriate subsys.\n\n</p><p>Of course, the param system looks up <code>MASTER.LOCK</code>, then <code>LOCK</code>. Then it looks up <code>MASTER.MASTER_LOCK</code> and then <code>MASTER_LOCK</code>.\n\n</p><p>In this real world example, <code>MASTER.LOCK</code> is not equivalent to <code>MASTER_LOCK</code>.\n\n</p><p></p><hr/>\n<em>2009-Jul-28 15:54:54 by psilord:</em> <br/>\n\nok, I put the branch into the main repository as \"params\". yeah, I know it isn't named right, but it is good enough for now. Soon it'll be merged and forgotten once it passes NMI.\n\n<p></p><hr/>\n<em>2009-Jul-29 15:28:29 by psilord:</em> <br/>\n\nIt builds across the unix variants of NMI. Windows is pretty broken due to needing to generate the default table with a perl script, and adding in some new .o files into the dependencies.\n\n<p></p><hr/>\n<em>2009-Aug-05 13:54:30 by psilord:</em> <br/>\n\nAfter learning how to build &amp; use a personal condor on windows. I've fixed up the build to be correct for windows.\n\n<p>I had to trace down a bad behavior problem though which was a result of stupid param() defaults hard coded into the code base for something which is rarely used. Now that this is done, I can try and trace down a failing test in the test suite.\n\n</p><p></p><hr/>\n<em>2009-Aug-06 10:37:45 by smoler:</em> <br/>\n\nNeeds WRT the manual and the new system are\n<ol>\n<li>the ability to edit (modify) the prose associated with a config knob definition both before and AFTER the code associated with the Condor release has been frozen and/or released.\n</li><li>separate merges of the code from merges of the doc (manual).  Developers should not do doc merges, and you do not want me doing code merges.  That said, we still want the ability to do merges using the info entered into the system, as opposed to hand entering changes into multiple instances (representing the state of different Condor versions/branches) of the info.\n</li></ol>\n\n<p></p><hr/>\n<em>2009-Aug-06 11:38:00 by psilord:</em> <br/>\n\nAfter running down and slaughtering slobbering demons in the Chaos Wastes of our test suite codes under Windows, I can now run the test suite decently enough to run the failing test. Only took what, 5 days to get to this point? Fail.\n\n<p></p><hr/>\n<em>2009-Aug-10 11:47:33 by psilord:</em> <br/>\n\nOk, after I did some work. Everything now passes the test suite. So I'm checking it into the master. Awesome.\n\n<p></p><hr/>\n<em>2009-Aug-10 16:44:01 by psilord:</em> <br/>\n\nThe branch with this work has been merged into the master. I'm keeping this ticket active though because there is still a fair amount of work left in the near future.\n\n<p></p><hr/>\n<em>2009-Sep-28 20:00:55 by gthain:</em> <br/>\n\nPID_SNAPSHOT_INTERVAL is another problem.  The default in the master was 60 seconds, the startd and starter was 15.  The new system sets it to 15 everywhere, which makes the master run it four times more frequently than before, and use noticeably larger amount of CPU, especially because the master doesn't use the procd.\n\n<p></p><hr/>\n<em>2009-Sep-28 23:39:09 by psilord:</em> <br/>\n\nI fixed the default problem for <code>PID_SNAPSHOT_INTERVAL</code>.\n\n<p></p><hr/>\n<em>2009-Nov-04 16:08:51 by psilord:</em> <br/>\n\nEven though I'm not currently working on this directly, I think about it fairly often, so I will keep it active.\n\n<p></p><hr/>\n<em>2010-Jan-04 13:52:42 by psilord:</em> <br/>\n\nI'm stalling this ticket until I can finish some other work.\n<hr/>\n<em>2010-Oct-20 15:59:08 by jfrey:</em> <br/>\n\nBulk change of target version from v070504 to v070505 using ./ticket-target-mover.\n<hr/>\n<em>2011-Jan-27 14:21:33 by danb:</em> <br/>\n\nBulk change of target version from v070505 to v070506 using ./ticket-target-mover.\n<hr/>\n<em>2011-Feb-01 14:49:30 by tannenba:</em> <br/>\n\nBulk change of target version from v070506 to NULL using ./ticket-target-mover.\n\n<p></p><hr/>\n<em>2011-Oct-28 10:32:18 by psilord:</em> <br/>\n\nI'm getting rid of languishing stalled tickets and putting this back to new.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=643\" onclick=\"get_ticket_and_populate_wrapper('643'); return false;\" title=\"Rewrite param_info_c_generator.pl and param_info.in\">#643</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nRewrite param_info_c_generator.pl and param_info.in</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=644\" onclick=\"get_ticket_and_populate_wrapper('644'); return false;\" title=\"param_*() should have a no default signature\">#644</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nparam_*() should have a no default signature</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=649\" onclick=\"get_ticket_and_populate_wrapper('649'); return false;\" title=\"new param() system should have patterns\">#649</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nnew param() system should have patterns</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=677\" onclick=\"get_ticket_and_populate_wrapper('677'); return false;\" title=\"Grand unified param() breaks subsys.local.param and local.param\">#677</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nGrand unified param() breaks subsys.local.param and local.param</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=678\" onclick=\"get_ticket_and_populate_wrapper('678'); return false;\" title=\"Add undocumented field to unified param table record\">#678</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAdd undocumented field to unified param table record</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=679\" onclick=\"get_ticket_and_populate_wrapper('679'); return false;\" title=\"Add unalterable field to unified param table record\">#679</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAdd unalterable field to unified param table record</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=680\" onclick=\"get_ticket_and_populate_wrapper('680'); return false;\" title=\"Allow selection of which param table to use at compile time\">#680</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAllow selection of which param table to use at compile time</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=758\" onclick=\"get_ticket_and_populate_wrapper('758'); return false;\" title=\"EXCEPT if new param system default and old one disagree\">#758</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nEXCEPT if new param system default and old one disagree</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=783\" onclick=\"get_ticket_and_populate_wrapper('783'); return false;\" title=\"New param() interface for grand unified param system (7.5)\">#783</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nNew param() interface for grand unified param system (7.5)</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"stalled\" href=\"/tickets?ticket=988\" onclick=\"get_ticket_and_populate_wrapper('988'); return false;\" title=\"Grand unified param() system: Phase 2\">#988</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nGrand unified param() system: Phase 2</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Sep-28 23:37</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15778\">[15778]</a></span>: gthain discovered the default was different for PID_SNAPSHOT_INTERVAL between the master, and other daemons. This enforces his discovery. Ticket <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Aug-10 16:03</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15296\">[15296]</a></span>: Moved some prototypes around to get rid of a bunch of compiler warnings. <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Aug-05 14:06</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15292\">[15292]</a></span>: Removed the default specifications for MASTER_COLLECTOR_BACKOFF_* since they ended up doing the wrong thing. There is a somewhat strange interaction between MASTER_BACKOFF_* and MASTER_%s_BACKOFF_* and in the code the hardcoded defaults for the two are (most likely incorrectly) different. I also commented\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Aug-03 12:05</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15290\">[15290]</a></span>: Performed the necessary incantations to get windows to build the params branch for ticket <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>. This introduces perl into the build stage of Windows.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-28 22:56</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15289\">[15289]</a></span>: Fixed the header file inclusion to be Condor source code appropriate. <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-28 20:49</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15288\">[15288]</a></span>: Changed the invocation method of perl to be more path friendly. <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-23 15:55</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15287\">[15287]</a></span>: When supplying param names for this tool, this tool will upper case them before it works on them. It makes it looks nicer in the output, and has no effect since the param() system is case insensitive anyway. <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-23 11:01</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15286\">[15286]</a></span>: When we discover that a param is defined in the default table, we'll also put that fact into the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ExtraParamInfo\" title=\"Extra Param Info\">ExtraParamInfo</a></span> table. This is a lame \"on the side\" data structure which encodes things about where a param was gotten. <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-23 10:58</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15285\">[15285]</a></span>: The insertion of the default values into the has table was done in a case sensitive manner. It is now case insensitive as to match the rest of the param() system. <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-22 16:00</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15284\">[15284]</a></span>: Fixed a bug in compute_range() and hacked it a bit to deal with ranges that look like .* . I think this part of the codebase is unfinished... Ticket <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-22 14:02</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15283\">[15283]</a></span>: The new param system defined some enums that this file also defined. I renamed this file's use of the enums, which were only specific to this file. This is for ticket <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-22 11:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15282\">[15282]</a></span>: Did some incantations to put the fact we need to generate the param_into_init.c file into the build system. It does reasonable things upon touching of param_info.in and param_info_c_generator.pl. Ticket <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>.  (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-22 10:38</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15279\">[15279]</a></span>: + Fixed a problem with trimming whitespace from default values. + Hacked in some horrible type checking to tell me when default values don't exist for numeric and boolean types. Without this, it caused me no end of grief. There is a <strong>lot</strong> more that could be done typechecking wise. + Added in a feature\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2009-Jul-21 15:54</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=15277\">[15277]</a></span>: Initial checkin (by Pete) of grand unified param feature as described in <span class=\"ticket\"><a class=\"new\" href=\"/tickets?ticket=123\" onclick=\"get_ticket_and_populate_wrapper('123'); return false;\" title=\"Grand unified param() system: Phase 1\">#123</a></span>. This passes the test suites except for something which seemed to have been broken when the branch was made.  (By Peter Keller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2011-Oct-28 10:33", "status": "new", "created": "2009-Jan-26 11:55", "fixed_version": "2009-Jan-26 11:55", "broken_version": "", "priority": "1", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "psilord@cs.wisc.edu", "due_date": ""}