{"id": 4998, "title": "Ticket #4998: condor_shadow segfaults on exit", "description": "<blockquote>\nI noticed that the condor_shadow is starting to segfault on exit on some setups.\n\n<p>This happens when the C++ finalizers are being run and a loadable library is used that links against libcondor_utils.so\n\n</p><p>I think some global is getting deleted twice - once when done when libcondor_utils.so is unloaded, and once again when the static version of the same symbol is being destroyed.  That only makes 'kinda sense'; haven't found a smoking gun.\n\n</p><p>For example, from valgrind:\n\n</p><p></p><div class=\"verbatim\">\n<pre>==12529== Invalid read of size 8\n==12529==    at 0x1F7207: StringList::clearAll() (list.h:503)\n==12529==    by 0x1F798A: StringList::~StringList() (string_list.cpp:147)\n==12529==    by 0x7019B21: exit (exit.c:78)\n==12529==    by 0x288344: __wrap_exit (daemon_core.cpp:5238)\n==12529==    by 0x2ADDB8: DC_Exit(int, char const*) (daemon_core_main.cpp:359)\n==12529==    by 0x1A8925: BaseShadow::holdJobAndExit(char const*, int, int) (baseshadow.cpp:439)\n==12529==    by 0x1BE02D: pseudo_ulog(compat_classad::ClassAd*) (pseudo_ops.cpp:549)\n==12529==    by 0x1B6AD0: do_REMOTE_syscall() (NTreceivers.cpp:832)\n==12529==    by 0x1C231D: RemoteResource::handleSysCalls(Stream*) (remoteresource.cpp:798)\n==12529==    by 0x29BD10: DaemonCore::CallSocketHandler_worker(int, bool, Stream*) (daemon_core.cpp:3925)\n==12529==    by 0x29BE9C: DaemonCore::CallSocketHandler_worker_demarshall(void*) (daemon_core.cpp:3884)\n==12529==    by 0x22A40F: CondorThreads::pool_add(void (*)(void*), void*, int*, char const*) (condor_threads.cpp:1106)\n==12529==  Address 0x7d78cb0 is 0 bytes inside a block of size 24 free'd\n==12529==    at 0x4A05FD6: operator delete(void*) (vg_replace_malloc.c:480)\n==12529==    by 0x7019B21: exit (exit.c:78)\n==12529==    by 0x288344: __wrap_exit (daemon_core.cpp:5238)\n==12529==    by 0x2ADDB8: DC_Exit(int, char const*) (daemon_core_main.cpp:359)\n==12529==    by 0x1A8925: BaseShadow::holdJobAndExit(char const*, int, int) (baseshadow.cpp:439)\n==12529==    by 0x1BE02D: pseudo_ulog(compat_classad::ClassAd*) (pseudo_ops.cpp:549)\n==12529==    by 0x1B6AD0: do_REMOTE_syscall() (NTreceivers.cpp:832)\n==12529==    by 0x1C231D: RemoteResource::handleSysCalls(Stream*) (remoteresource.cpp:798)\n==12529==    by 0x29BD10: DaemonCore::CallSocketHandler_worker(int, bool, Stream*) (daemon_core.cpp:3925)\n==12529==    by 0x29BE9C: DaemonCore::CallSocketHandler_worker_demarshall(void*) (daemon_core.cpp:3884)\n==12529==    by 0x22A40F: CondorThreads::pool_add(void (*)(void*), void*, int*, char const*) (condor_threads.cpp:1106)\n==12529==    by 0x295856: DaemonCore::CallSocketHandler(int&amp;, bool) (daemon_core.cpp:3872)\n</pre></div>\n\n\n<p>I haven't figured out what symbol this is (FWIW - there's about 8 different global symbols that are freed twice according to valgrind.  This includes std::strings - meaning we can't hack around the class, we need to fix the underlying issue).\n\n</p><p>The easiest way to replicate is to set:\n\n</p><p></p><div class=\"verbatim\">\n<pre>CLASSAD_USER_PYTHON_MODULES=test_module\nSHADOW=$(SHADOW)_valgrind\n</pre></div>\n\n\n<p>(<code>test_module</code> can be invalid - just has to be non-empty to get <code>libclassad_python_user.so</code> to be loaded) where <code>$(SHADOW)_valgrind</code> is:\n\n</p><p></p><div class=\"verbatim\">\n<pre>#!/bin/sh\n\nexec valgrind /home/cse496/bbockelm/projects/condor-build-ninja/release_dir/sbin/condor_shadow \"$@\" 2&gt;&gt; /tmp/shadow_valgrind_err\n</pre></div>\n\n\n<p>This goes away if the condor_shadow is linked against <code>condor_utils</code> instead of <code>condor_utils_s</code>.  This also goes away if _exit is called instead of exit (skipping the finalizers); I think that makes it a regression in 8.3.5.</p></blockquote>", "remarks": "<blockquote>\n<em>2015-Apr-09 22:11:24 by bbockelm:</em> <br/>\n\nIt looks like <code>dlopen</code> in <code>src/classad/fnCall.cpp</code> uses the flags <code>RTLD_LAZY|RTLD_GLOBAL</code>.\n\n<p></p><ul>\n<li>I'm not sure of the value of <code>RTLD_GLOBAL</code>.  That indicates the dynamic symbols of the library become global to the daemon.  I don't think this is the problem though.\n</li><li>If we use the <code>RTLD_DEEPBIND</code> flag, the library will use its own version of the symbols in <code>libcondor_utils.so</code> instead of the one in the shadow.  Thus, when the library unloads, it calls the destructors on its own copies of the objects and the crash goes away.\n<ul>\n<li>This is marked as non-POSIX by the manpage, but appears to be present in both Linux and Mac.\n</li></ul>\n</li></ul>\n\n<p></p><hr/>\n<em>2015-Apr-09 22:22:41 by bbockelm:</em> <br/>\n\nNote: Doh!  Commit message for branch references wrong ticket.  Fix before merge!\n\n<p></p><hr/>\n<em>2015-Apr-10 09:43:36 by bbockelm:</em> <br/>\n\nHm - as I suspected, RTLD_DEEPBIND isn't available outside Linux (Mac or Solaris builds failed).\n\n<p>Can we simply not run finalizers for those platforms (switch to _exit?)?\n\n</p><p></p><hr/>\n<em>2015-Apr-13 15:45:34 by tim:</em> <br/>\n\nUnreleased issue, no version history required.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Apr-13 16:36</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/b4e80dc49d78f42c7ffe447d3cb973e3849cc624\">[44592]</a></span>: Prefer <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ClassAd\" title=\"Class Ad\">ClassAd</a></span> module's copy of symbols over daemon's. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4998\" onclick=\"get_ticket_and_populate_wrapper('4998'); return false;\" title=\"condor_shadow segfaults on exit\">#4998</a></span> (This is an extended form of previous commits by Brian Bockelman.) This changes the module loading flags to dlopen to use RTLD_DEEPBIND.\u00a0[...]\n (By Jaime Frey )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Apr-10 12:51</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/f145600a6927310c998c4afb298393e72c9a198c\">[44590]</a></span>: Avoid condor_utils_s on non-Linux due to RTLD_DEEPBIND missing. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=4998\" onclick=\"get_ticket_and_populate_wrapper('4998'); return false;\" title=\"condor_shadow segfaults on exit\">#4998</a></span>  (By Brian Bockelman )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Apr-09 22:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/34e77f975ac1e12c5a874a036d890d5c62f3cdd7\">[44578]</a></span>: Prefer module's copy of symbols over daemon's. <span class=\"ticket\"><a class=\"resolved\" href=\"/tickets?ticket=3718\" onclick=\"get_ticket_and_populate_wrapper('3718'); return false;\" title=\"Detect invalid interpreter in script\">#3718</a></span> This changes the module loading flags to dlopen to use RTLD_DEEPBIND.\u00a0[...]\n (By Brian Bockelman )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2015-Apr-15 13:26", "status": "resolved", "created": "2015-Apr-09 21:51", "fixed_version": "2015-Apr-09 21:51", "broken_version": "v080305", "priority": "2", "subsystem": "DaemonsSubmitNode", "assigned_to": "jfrey", "derived_from": "", "creator": "bbockelm", "rust": "", "customer_group": "cms", "visibility": "public", "notify": "", "due_date": ""}