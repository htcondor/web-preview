{"id": 1515, "title": "Ticket #1515: Add open files to ProcAPI::getProcInfo & condor_procd", "description": "<blockquote>\nProcAPI::getProcInfo should return the list of open regular files associated with the process. This information then has to be transmitted to the condor_procd and across the pipe to any clients asking for it. This new information must also exist in the proc_family.cpp codes and be aggregated properly when talking about families of processes.</blockquote>", "remarks": "<blockquote>\n<em>2010-Jul-21 15:09:24 by psilord:</em> <br/>\n\nOk, I've run into a bit of a problem.\n\n<p>The procd's <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcFamilyClient\" title=\"Proc Family Client\">ProcFamilyClient</a></span> and <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcFamilyServer\" title=\"Proc Family Server\">ProcFamilyServer</a></span> classes communicate a <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcFamilyUsage\" title=\"Proc Family Usage\">ProcFamilyUsage</a></span> structure over a pipe. Unfortunately, the communication system consists of read(&amp;mystruct, len) and write(&amp;mystruct, len). :(\n\n</p><p>This was \"fine\" when there were only integral quantities in the structure, but\nwhen I added a <code>std::set&lt;std::string&gt; open_files;</code> member variable to the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcFamilyUsage\" title=\"Proc Family Usage\">ProcFamilyUsage</a></span> structure...well, that doesn't serialize across processes as nicely...\n\n</p><p>So, I need to think a little bit about how to deal with this.\n\n</p><p></p><hr/>\n<em>2010-Jul-21 15:37:11 by psilord:</em> <br/>\n\nAfter some thought, I'm going to change the protocol for ProcFamilyClient::get_usage() and ProcFamilyServer::get_usage() to serialize the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcFamilyUsage\" title=\"Proc Family Usage\">ProcFamilyUsage</a></span> structure element by element.\n\n<p>I'll carefully serialize the\n<code>std::set&lt;std::string&gt; open_files;</code> field in the same manner as the <code>std::vector&lt;ProcFamilyProcessDump&gt; procs;</code> field in the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcFamilyDump\" title=\"Proc Family Dump\">ProcFamilyDump</a></span> structure--generally following the whole serialization process of the <span class=\"wiki\"><a class=\"missing\" href=\"wiki?p=ProcFamilyDump\" title=\"Proc Family Dump\">ProcFamilyDump</a></span> structure.\n\n</p><p></p><hr/>\n<em>2010-Jul-23 16:11:26 by psilord:</em> <br/>\n\nI've changed the protocol, and it seems to be working.\n\n<p></p><hr/>\n<em>2010-Jul-23 16:48:17 by psilord:</em> <br/>\n\nThis ticket is left open until I can finish the c++ util implementation of takesnapshot, which is a duplicate code path to how we use the procd. This is\nbecause the master directly uses the procapi, but all other daemons use the procd.\n\n<p></p><hr/>\n<em>2010-Jul-26 16:19:08 by psilord:</em> <br/>\n\nOk, I hacked in the other library's support needed for this feature. Will commit soon.\n\n<p></p><hr/>\n<em>2010-Jul-27 11:47:13 by psilord:</em> <br/>\n\nOk, it is committed, so this ticket can be resolved.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jul-26 16:32</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18632\">[18632]</a></span>: The ProcAPI::getProcInfo call fills in the open file set of the process on linux into the procInfo structure. That information is now propogated through the procd and into the kill family codebase too. The JIC Shadow in the vanilla starter was modified so it knows the job pid, and can ask the procd for\u00a0[...]\n (By Peter Keller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2010-Jul-20 16:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"chngview?cn=18602\">[18602]</a></span>: + Finish converting the procInfo and procInfoRaw structures into Objects with a method or two on them to make it easy to deal with them. + Clean up some stupid uses of inipi() and got rid of initProcInfo(), which is replaced by calls of Clear() on the new objects. This gets rid of a nasty use of memset()\u00a0[...]\n (By Peter Keller )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2010-Jul-27 11:48", "status": "resolved", "created": "2010-Jul-20 14:27", "fixed_version": "2010-Jul-20 14:27", "broken_version": "v070000", "priority": "2", "subsystem": "Libs", "assigned_to": "psilord", "derived_from": "#1208", "creator": "psilord", "rust": "", "customer_group": "other", "visibility": "public", "notify": "psilord@cs.wisc.edu", "due_date": "20100727"}