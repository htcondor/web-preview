{"id": 6697, "title": "Ticket #6697: coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED", "description": "<blockquote>\nThe HOLD_IF_MEMORY_EXCEEDED policy doesn't immediately put jobs which exceed their requested memory on hold, as intended, because the 'immediately' part is implemented as a modification to MAXJOBRETIREMENTTIME.  While draining (with backfill), a job which exceeds its memory will have /its/ MJRT become 0, but that's ignored in favor of coordinating retirement times.  The latter has always seemed a questionable thing to do while allowing backfill, but now it breaks things.\n\n<p>Leaving as an incident report until we decide what to do.\n\n</p><p></p><hr/>\nMoate reports being somewhat concerned about jobs on a draining machine having their maximum lifetimes extended.  This happens for the same reason: a job is evicted for running too long, but eviction obeys MJRT, and the MJRT is not zero because it's been computed as the largest MJRT for any slot.  The relevant policy expressions follow.\n\n<p></p><div class=\"verbatim\">\n<pre>PREEMPT = (JobUniverse != 13 &amp;&amp; MemoryUsage =!= UNDEFINED &amp;&amp; MemoryUsage &gt; Memory) || TotalJobRunTime &gt; ( 72 * 3600 )\nMAXJOBRETIREMENTTIME = ifthenelse((JobUniverse != 13 &amp;&amp; MemoryUsage =!= UNDEFINED &amp;&amp; MemoryUsage &gt; Memory),0,MAX_PREEMPT)\nMAX_PREEMPT = (3600 * (72 - 68 * (WantGlidein =?= true)))\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2018-Jun-12 13:43:44 by tlmiller:</em> <br/>\n\nFirst, incomplete draft of design doc:\n\n<p><a class=\"external\" href=\"https://docs.google.com/document/d/1fjJo6-Qi_amr3OiYImaxnbTGHWvRf0dIXYxhgG8wEGY\">https://docs.google.com/document/d/1fjJo6-Qi_amr3OiYImaxnbTGHWvRf0dIXYxhgG8wEGY</a>\n\n</p><p></p><hr/>\n<em>2018-Aug-06 16:31:52 by tlmiller:</em> <br/>\n\nThe following configuration was used during testing; it will be useful when updating the metaknobs (part 2 of this ticket).\n\n<p></p><div class=\"code\">\n<pre class=\"code\">\nMachineMaxVacateTime = 5\nuse feature : PartitionableSlot\n\n# This evicts, which is not useful for me.\n# use policy : limit_job_runtimes( 60 )\n# For some reason, limit_job_runtimes() gives jobs two minutes of add'l retirement time.\n# MaxJobRetirementTime = 60\n\n# This doesn't actually work either, possibly because the activity is no\n# longer busy once the job has been preempted.  It also fails when the\n# activity becomes 'retiring' during draining...\n# MAX_JOB_RUNTIME_EXCEEDED = (Activity == \"Busy\") &amp;&amp; ((time() - EnteredCurrentActivity) &gt; 60)\n\nMAX_JOB_RUNTIME_EXCEEDED = ( TARGET.JobStatus == 2 ) &amp;&amp; ((time() - TARGET.JobCurrentStartDate) &gt; 60)\nuse policy : want_hold_if( MAX_JOB_RUNTIME_EXCEEDED, 103, job runtime exceeded max allowed )\n\n# Necessary for previous definition of MAX_JOB_RUNTIME_EXCEEDED, probably\n# because the slot state changed when PREEMPT became true...\n# WANT_HOLD = TRUE\n# adding 3 * PREEMPT-check interval + 1, just to be sure that we preempt first.\n# MaxJobRetirementTime = debug( ifthenelse( TRUE =?= ((( TARGET.JobStatus == 2 ) &amp;&amp; ((time() - TARGET.JobCurrentStartDate) &gt; 76))), 0, 300 ) )\nMaxJobRetirementTime = debug( ifthenelse( (( TARGET.JobStatus == 2 ) &amp;&amp; ((time() - TARGET.JobCurrentStartDate) &gt; 76)), 0, 300 ) )\n\n</pre></div>\n\n\n<p></p><hr/>\n<em>2018-Aug-08 11:47:18 by tlmiller:</em> <br/>\n\n<ul>\n<li>Change ALWAYS_RUN_JOBS so it plays nice with others, or just change its description to \"always put first (before other policies)\"?\n</li><li>Fix LIMIT_JOB_RUNTIMES to play nicely with others.\n</li><li>Fix LIMIT_JOB_RUNTIMES to work during retirement; test using <code>JobState</code> and <code>JobStartDate</code> instead of job-ad attributes.\n</li><li>Fix callers of WANT_HOLD_IF and PREEMPT_IF to account for timing problem (and therefore work in retirement).\n</li><li>Add warning to WANT_HOLD_IF and PREEMPT_IF that they don't work during retirement.\n</li></ul>\n\n<p></p><hr/>\n<em>2018-Aug-08 16:12:38 by tlmiller:</em> <br/>\n\nOn second thought, maybe just leave ALWAYS_RUN_JOBS and LIMIT_JOB_RUNTIMES alone, and implement PREEMPT_IF_RUNTIME_EXCEEEDS() and HOLD_IF_RUNTIME_EXCEEDS().  Consider adding [WANT_HOLD|PREEMPT]_IF_NO_MJRT or something to simplify fixing up the other [PREEMPT|HOLD]_IF_... fixes.\n\n<p></p><hr/>\n<em>2018-Aug-09 13:40:32 by tlmiller:</em> <br/>\n\nHaving said that, it seems impossible to add timing to HOLD_IF_MEMORY_EXCEEDED and HOLD_IF_CPUS_EXCEEDED.  Instead, add an edge-triggered evaluation of PREEMPT when job retirement expires.  This seems like a smaller change than trying to reorder the periodic evaluations so they always happen in the \"right\" order.  It should be safe: wasPreempted() isn't called in very many places and they all look OK.</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6701\" onclick=\"get_ticket_and_populate_wrapper('6701'); return false;\" title=\"condor_off -peaceful disrespects max job length\">#6701</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\ncondor_off -peaceful disrespects max job length</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Aug-14 12:39</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3ae61f11fe42ed02b07cba01a25e44ac19aa0397\">[55285]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6706\" onclick=\"get_ticket_and_populate_wrapper('6706'); return false;\" title=\"cmd_drain_scavenging intermittent failures\">#6706</a></span>) When we started respecting individual max job retirement times in <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6697\" onclick=\"get_ticket_and_populate_wrapper('6697'); return false;\" title=\"coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED\">#6697</a></span>, we broke an assumption about what constitutes a backfill job in this test. The real fix has been folded into <span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=6739\" onclick=\"get_ticket_and_populate_wrapper('6739'); return false;\" title=\"Implement long-term fixes for policy-while-retiring problems\">#6739</a></span>.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Aug-09 14:40</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/06589038aef9d8b1606ee0b952cd40d9c4f3991a\">[55272]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6697\" onclick=\"get_ticket_and_populate_wrapper('6697'); return false;\" title=\"coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED\">#6697</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6701\" onclick=\"get_ticket_and_populate_wrapper('6701'); return false;\" title=\"condor_off -peaceful disrespects max job length\">#6701</a></span>) Documentation.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Aug-09 14:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a113fc2f35f83b0f3eab61ff38a88ad12815b367\">[55273]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6697\" onclick=\"get_ticket_and_populate_wrapper('6697'); return false;\" title=\"coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED\">#6697</a></span>) Fix WANT_HOLD_IF. Implement [PREEMPT|HOLD]_IF_RUNTIME_EXCEEDS(time).  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Aug-06 10:35</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/01a31788f984bc8bda2bb2d6b2b35a9150e991f2\">[55260]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6697\" onclick=\"get_ticket_and_populate_wrapper('6697'); return false;\" title=\"coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED\">#6697</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6701\" onclick=\"get_ticket_and_populate_wrapper('6701'); return false;\" title=\"condor_off -peaceful disrespects max job length\">#6701</a></span>) Short-term hack to fix policy expressions not working during retirement.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jul-13 16:28</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/9f4d607cba831b9a1da6b8e7cd521e4d6afef93e\">[55170]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6697\" onclick=\"get_ticket_and_populate_wrapper('6697'); return false;\" title=\"coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED\">#6697</a></span>) Didn't get done in time.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jul-13 16:22</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a79d922f59a6ea4d4323a87776b3352d17085f63\">[55169]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6665\" onclick=\"get_ticket_and_populate_wrapper('6665'); return false;\" title=\"Update AWS Lambda functions by July 31\">#6665</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6697\" onclick=\"get_ticket_and_populate_wrapper('6697'); return false;\" title=\"coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED\">#6697</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6701\" onclick=\"get_ticket_and_populate_wrapper('6701'); return false;\" title=\"condor_off -peaceful disrespects max job length\">#6701</a></span>) Update \"known problems\" section.  (By Todd L Miller )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2018-Jun-14 14:41</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6753642aaff889f6f859c808fc7ead026416c1ff\">[55064]</a></span>: (<span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6659\" onclick=\"get_ticket_and_populate_wrapper('6659'); return false;\" title=\"High Priority Jobs\">#6659</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6664\" onclick=\"get_ticket_and_populate_wrapper('6664'); return false;\" title=\"condor_drain -start ... broken?\">#6664</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6697\" onclick=\"get_ticket_and_populate_wrapper('6697'); return false;\" title=\"coordinated retirement while draining breaks HOLD_IF_MEMORY_EXCEEDED\">#6697</a></span>, <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=6701\" onclick=\"get_ticket_and_populate_wrapper('6701'); return false;\" title=\"condor_off -peaceful disrespects max job length\">#6701</a></span>) Release notes.  (By Todd L Miller )</td></tr>\n</tbody></table>", "type": "defect", "last_change": "2019-Oct-04 09:38", "status": "resolved", "created": "2018-Jun-06 09:56", "fixed_version": "2018-Jun-06 09:56", "broken_version": "v080709", "priority": "2", "subsystem": "DaemonsExecNode", "assigned_to": "tlmiller", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, tannenba@cs.wisc.edu, gthain@cs.wisc.edu, jfrey@cs.wisc.edu", "due_date": ""}