{"id": 4854, "title": "Ticket #4854: Support ninja builds $(MAKE)", "description": "<blockquote>\nCMake supports generating <a class=\"external\" href=\"https://martine.github.io/ninja/\">Ninja</a> build files. Ninja is faster than Make*, and I'd like to be able to use it.  Unfortunately some of our CMake files rely on $(MAKE), which will end up in Makefiles or build.ninja files. $(MAKE) works in a Makefile, but is an error in a build.ninja file.\n\n<p>Proposed: have CMake set \"make -jX\" (where X is number of detected cores) for non-Make builds, but leave it as $(MAKE) for Make builds.\n\n</p><p>* For large builds the benefit is marginal, but for small ones it can cut a build in half. For a no-op make, it's a large difference. Build times from puffin, a dual-core, pretty old desktop:\n\n</p><p><span class=\"subsection\"></span></p><h3>No work to do</h3>\n<span class=\"subsubsection\"><h4>Make </h4></span>\n<div class=\"code\">\n<pre class=\"code\">17.052u 5.178s 0:22.92 96.9%\t0+0k 16+840io 0pf+0w\n16.908u 5.249s 0:22.77 97.2%\t0+0k 0+848io 0pf+0w\n16.986u 5.187s 0:22.82 97.1%\t0+0k 0+840io 0pf+0w\n</pre></div>\n\n\n<p><span class=\"subsubsection\"></span></p><h4>Ninja </h4>\n<div class=\"code\">\n<pre class=\"code\">0.172u 0.066s 0:00.24 95.8%\t0+0k 0+104io 0pf+0w\n0.180u 0.069s 0:00.31 77.4%\t0+0k 0+88io 0pf+0w\n0.159u 0.082s 0:00.24 95.8%\t0+0k 0+88io 0pf+0w\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>changed daemon_core.cpp</h3>\n<span class=\"subsubsection\"><h4>Make </h4></span>\n<div class=\"code\">\n<pre class=\"code\">43.750u 10.307s 0:57.59 93.8%\t0+0k 21024+622864io 2pf+0w\n43.698u 10.211s 0:55.69 96.7%\t0+0k 24+622544io 0pf+0w\n44.069u 10.313s 0:56.92 95.5%\t0+0k 256+622544io 0pf+0w\n</pre></div>\n\n\n<p><span class=\"subsubsection\"></span></p><h4>Ninja </h4>\n<div class=\"code\">\n<pre class=\"code\">26.084u 4.199s 0:17.96 168.5%\t0+0k 17712+449040io 0pf+0w\n26.010u 4.219s 0:16.41 184.1%\t0+0k 8+449016io 0pf+0w\n26.029u 4.159s 0:16.19 186.3%\t0+0k 0+449016io 0pf+0w\n</pre></div>\n\n\n<p><span class=\"subsection\"></span></p><h3>After \"make/ninja clean\"</h3>\n<span class=\"subsubsection\"><h4>Make -j2</h4></span>\n<div class=\"code\">\n<pre class=\"code\">799.938u 199.680s 12:49.52 129.9%\t0+0k 5400+2571760io 16pf+0w\n785.075u 197.847s 10:05.18 162.4%\t0+0k 4768+2542080io 29pf+0w\n</pre></div>\n\n\n<p><span class=\"subsubsection\"></span></p><h4>Ninja </h4>\n<div class=\"code\">\n<pre class=\"code\">771.060u 165.544s 9:22.23 166.5%\t0+0k 50600+2316112io 53pf+0w\n762.427u 164.232s 8:16.10 186.7%\t0+0k 10992+2306328io 35pf+0w\n</pre></div>\n</blockquote>", "remarks": "<blockquote>\n<em>2015-Feb-03 14:27:19 by adesmet:</em> <br/>\n\nChatted with Carl some; he implemented the original code. It was essential for OSG builds; the glibc builds were the bulk of their build time and doing parallel builds was a huge improvement.\n\n<p>I've tried to preserve existing behavior when using Makefiles while supporting other systems by providing a reasonable \"make -jX\" (where X is the number of processors). This is commit <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/28ed9130c3ee13cec27a7b92e09a1d50e4d21002\">[43223]</a></span>.\n\n</p><p>I've asked Carl to review it.\n\n</p><p></p><hr/>\n<em>2015-Feb-09 12:34:58 by adesmet:</em> <br/>\n\n<strong>CODE REVIEW</strong>: (Copied from an email from Carl to Alan)\n\n<p></p><div class=\"code\">\n<pre class=\"code\">+################################################################################\n+# Various externals rely on make, even if we're not using\n+# Make.  Ensure we have a usable, reasonable default for them.\n+if(${CMAKE_GENERATOR} STREQUAL \"Unix Makefiles\")\n+\tset( MAKE $(MAKE) )\n+else ()\n+\tinclude (ProcessorCount)\n+\tProcessorCount(NUM_PROCESSORS)\n+\tset( MAKE make -j${NUM_PROCESSORS} )\n+endif()\n+\n</pre></div>\n\n\n<p>(1) I <em>think</em> you should actually be able to omit the \"if\" block entirely.\n\n</p><p>Make lets you specify its variables either as $(x) or as ${x} (although the first is more common), so your other changes from $(MAKE) to ${MAKE} should work in a Makefile without needing to set the MAKE environment variable explicitly.\n\n</p><p>(2) I think you <em>have</em> to omit the \"if\" block entirely.\n\n</p><p>If you put MAKE='$(MAKE)' into make's environment, I think it explodes, since make's variables are actually recursively-expanding, kind of like condor's config system.\n\n</p><p>For instance:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\"> \t[edquist@monza ~/foo/rmake]$ cat Makefile\n \tzoo:\n \t\t${MAKE} -f zoo.mk\n \t[edquist@monza ~/foo/rmake]$ cat zoo.mk\n \tzoo:\n \t\techo hi &gt; zoo\n \t[edquist@monza ~/foo/rmake]$ make\n \tmake -f zoo.mk\n \tmake[1]: Entering directory `/afs/cs.wisc.edu/u/e/d/edquist/foo/rmake'\n \techo hi &gt; zoo\n \tmake[1]: Leaving directory `/afs/cs.wisc.edu/u/e/d/edquist/foo/rmake'\n \t[edquist@monza ~/foo/rmake]$ rm zoo\n \t[edquist@monza ~/foo/rmake]$ MAKE='$(MAKE)' make\n \tMakefile:3: *** Recursive variable `MAKE' references itself (eventually).  Stop.\n</pre></div>\n\n\n<p>(3) for the \"else\" block ... so, setting MAKE=\"make -j${NUM_PROCESSORS}\" for ninja (or whatever), I imagine, there is the same fundamental problem as putting 'make -j2' in when the outer build system is make -- namely that the outer build system can't manage the parallelism of the inner make.\n\n</p><p>What I'm imagining is, for instance, Ninja thinks, OK, I can do 57 things at once (because you ran ninja -j57, or whatever).  But then the glibc build steps, to ninja, each count as a single task.  So then ninja kicks off \"make -j${NUM_PROCESSORS}\" for glibc, plus 56 other tasks.  (And note that NUM_PROCESSORS in this case might be 57, or 64, or 2, or whatever.)\n\n</p><p>In contrast, the way \"make -j57\" works when a sub-make is run with $(MAKE) (or ${MAKE}) is actually not to pass -j57 to the sub-make, but to set up a jobserver with pipes to make the original 57 jobs sharable between the top-level make and all sub-makes, recursively.  Which is pretty cool.\n\n</p><p>But I don't expect that Ninja is able to interoperate with make to share jobs this way...\n\n</p><p>So anyway, I don't know what the right solution is for the \"else\" block. Part of me thinks, \"ah, why not, use -j${NUM_PROCESSORS}, what's the worst that could happen?\" -- but the rest of me thinks it might be better to be more conservative and keep a hard coded -j2 or something.\n\n</p><p>So yeah, I guess I'd recommend something like one of these instead:\n\n</p><p></p><div class=\"code\">\n<pre class=\"code\">+##############################################################################$\n+# Various externals rely on make, even if we're not using\n+# Make.  Ensure we have a usable, reasonable default for them.\n+if(NOT ${CMAKE_GENERATOR} STREQUAL \"Unix Makefiles\")\n+       set( MAKE make -j2 )\n+endif()\n+\n\n+##############################################################################$\n+# Various externals rely on make, even if we're not using\n+# Make.  Ensure we have a usable, reasonable default for them.\n+if(NOT ${CMAKE_GENERATOR} STREQUAL \"Unix Makefiles\")\n+       include (ProcessorCount)\n+       ProcessorCount(NUM_PROCESSORS)\n+       set( MAKE make -j${NUM_PROCESSORS} )\n+endif()\n</pre></div>\n\n\n<p></p><hr/>\n<em>2015-Feb-09 12:40:33 by adesmet:</em> <br/>\n\nAfter discussion with Carl, we confirmed that (1) and (2) are not necessary. There was a misunderstanding about which layers were evaluating $(MAKE)vs ${MAKE}. (CMake only evaluates the second; GNU Make evaluates both)\n\n<p>(3) is harder; there really isn't a good answer.  Possibilities discussed:\n</p><ul>\n<li>-j1 - Slow but safe, shouldn't conflict with other things built in parallel. glibc is the slowest part of our builds, so this will likely make glibc the chokepoint.\n</li><li>-j2 - Arbitrarily chosen. Probably faster but will slightly slow things down while other things build in parallel.\n</li><li>-j$({NUM_PROCESSORS} - Maybe faster? Almost certain to slow down during parallel builds with other things. Optimal if glibc is building on its own. This is the current default.  If we can convince Ninja \"this rule must run all by itself\", this might be optimal.\n</li></ul>\n\n<p>All of this is irrelevant when using Make; but it will apply to other build systems, notably Ninja.\n\n</p><p>As best I can tell, it's not feasible to get the sub-Make to play nicely with Ninja in the way that sub-Makes can interact with the parent Make.  Also, there is no way to tell Ninja \"this rule must run all by itself\" (I think, need to query mailing list.).\n\n</p><p></p><hr/>\n<em>2015-Feb-09 13:37:44 by edquist:</em> <br/>\n\nAdditional comments from email thread last week:\n\n<p>---\n\n</p><p></p><div class=\"blockquote\">\n<table width=\"95%\"><tbody><tr><td>\u00a0</td><td>\n  \nRe #2: I think I'm okay because I believe it will never produce\nMAKE=$(MAKE) or any variant.  If I didn't screw up it should just plot\n$(MAKE) into the Makefile where it was before.\n</td></tr></tbody></table></div>\n\n\n<p>Ah, in that case you're probably fine then.  I don't know enough about\ncmake, and i was assuming set( var value... ) would effectively put\nvar='value...' into the environment ... But if it fills in \"value...\" for\n${var} when it writes the makefile (or ninja) output, then i guess that\nchanges things.  (And so your original is probably fine.)\n\n</p><p>... I can also try doing a scratch build with your changes in our koji, just\nto make sure nothing explodes for the make-based build.\n\n</p><p>Carl\n\n</p><p>---\n\n</p><p>Yeah, fwiw, a scratch build in koji with your changes worked fine.\n\n</p><p></p><hr/>\n<em>2015-Feb-09 16:14:35 by adesmet:</em> <br/>\n\nMy plan: stick with \"-j$({NUM_PROCESSORS}\". It's not a terrible choice, building glibc is rare enough that some inefficiency isn't a big deal, and it's simple.  I've got a query out to the Ninja community, but I'm not optimistic.\n\n<p></p><hr/>\n<em>2015-Feb-10 10:06:32 by adesmet:</em> <br/>\n\nMerged into master.</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Feb-09 16:14</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/9e0dd040bda84182470979c38319f94e70e4a39c\">[43279]</a></span>: Merged <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/ef331bd0c66585079ab1db9295927205c240935b\">[42459]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/85e7ba3a35428e174c33dde34bc41544629e32db\">[42460]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/dd6a590e2dc9b74042f5781e86f02f3d0d786c34\">[42461]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/8e995d91ef183cc45998f5336ae8ec02adf6e64e\">[42463]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/60758b2ef334fa8bdc82ce77f685ba5b373d8b60\">[42464]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6b8ac75b5dd7ace20716553ee431cbf14cbca768\">[42467]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6ef12d80e29375770c6f04d03d79512396dc2c18\">[42470]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/f0b4d14f08beb62043a25e54b9f44748ee48c023\">[42472]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/12e0c74b73c09dc9b647a91332dd585f16ff01e5\">[42476]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/cfb7d1a9d6e45b2e07f6198ad9f583a61b2527a2\">[42483]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6ca4e17c560ddf1f1fbfd6ce9e7bdb3134fa32c6\">[42484]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/cec1112cb5bb0a003d57da41351a61055a1a9e11\">[42485]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/3117950f767eef2df6125c768327868d7a307938\">[42486]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/15b90c6288a708b875d1be8658ef250c5f9c9d08\">[42489]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/2d0b4d6ce972c394bb13e7269aaf581ac4761764\">[42490]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/72f160a41d297fde44bd5d9f63d9729dbcecde7e\">[42495]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/88bfc88867fe79188d81c8acd8a82d3b81c32736\">[42506]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/93fa7491635e74782dedca3e2be3ceb591c81ee9\">[42511]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/6f01431c17df8aeb8331b245ad88f7d88322fa7b\">[42512]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/9d17eb98837380aee20e0e91d7be9a7e9b17976c\">[42513]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/4a276f49b2e9007f0d46e301d944278607633745\">[42514]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/895ff1c0b94618bd8d62c53aa9cc8c3c0a7f7099\">[42518]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/17a739019a9c3b56c69af50819098001bcbf39aa\">[42520]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/ff404917583d642eb3e7cbed848ec8bae6d9f0af\">[42521]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/35beef78e447059c5339a7def2bb58dcf067472c\">[42523]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/8a019c95a0309f28c05c7bad68d561b93d528d3c\">[42527]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/9e4125ea5754c2ff493faedd0d42843e0e30f5eb\">[43212]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/81d6c7f4604d7d1980c97b283cc3638f89fe6950\">[43213]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/c143b211e29c3bf7be1a4edf45abc4ba49ac544d\">[43222]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/5b87fcb1d72dfd9fa8d4070c2cacabbcbae0758c\">[43225]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/20d5efdaf0a8d5b034d59b573a524aa9ff05e211\">[43226]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/abdcb8a582d38acaf6b18602e4e63b5e659acd1b\">[43227]</a></span>, <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/a16bbb290724285a0096a4ac42e3085831ad9d95\">[43233]</a></span>,\u00a0[...]\n (By Alan De Smet )</td></tr>\n<tr><td align=\"right\" valign=\"top\" width=\"160\">2015-Feb-03 14:19</td>\n<td align=\"center\" valign=\"top\" width=\"30\">\n<span class=\"icon dot\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\"> \nCheck-in <span class=\"chng\"><a href=\"https://github.com/htcondor/htcondor/commit/28ed9130c3ee13cec27a7b92e09a1d50e4d21002\">[43223]</a></span>: Ensure $(MAKE) is available It's only available if we're using a Make build, which isn't true if you use Ninja as your build tool. <span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=4854\" onclick=\"get_ticket_and_populate_wrapper('4854'); return false;\" title=\"Support ninja builds $(MAKE)\">#4854</a></span>  (By Alan De Smet )</td></tr>\n</tbody></table>", "type": "enhance", "last_change": "2015-Feb-10 10:37", "status": "resolved", "created": "2015-Jan-28 17:12", "fixed_version": "2015-Jan-28 17:12", "broken_version": "v000000", "priority": "3", "subsystem": "Packaging", "assigned_to": "adesmet", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tannenba@cs.wisc.edu", "due_date": ""}