diff -rNup condor-7.4.4.orig/src/condor_negotiator.V6/matchmaker.cpp condor-7.4.4/src/condor_negotiator.V6/matchmaker.cpp
--- condor-7.4.4.orig/src/condor_negotiator.V6/matchmaker.cpp	2011-06-13 13:38:24.000000000 -0400
+++ condor-7.4.4/src/condor_negotiator.V6/matchmaker.cpp	2011-06-14 15:11:08.000000000 -0400
@@ -2128,18 +2128,18 @@ negotiateWithGroup ( int untrimmed_num_s
 					} else {
 						ignore_schedd_limit = false;
 					}
-					int numMatched = 0;
+					
 					startTime = time(NULL);
 					double limitUsed = 0.0;
-                    if (negotiation_cycle_stats[0]->active_submitters.count(scheddName.Value()) <= 0)
-                        negotiation_cycle_stats[0]->num_idle_jobs += num_idle_jobs;
+                                        if (negotiation_cycle_stats[0]->active_submitters.count(scheddName.Value()) <= 0)
+                                                               negotiation_cycle_stats[0]->num_idle_jobs += num_idle_jobs;
 					negotiation_cycle_stats[0]->active_submitters.insert(scheddName.Value());
 					negotiation_cycle_stats[0]->active_schedds.insert(scheddAddr.Value());
-					result=negotiate( scheddName.Value(),schedd,submitterPrio,
-								  submitterAbsShare, submitterLimit,
-								  startdAds, claimIds, 
-								  scheddVersion, ignore_schedd_limit,
-								  startTime, numMatched, limitUsed, pieLeft);
+					
+					result=negotiate( scheddName.Value(),schedd,submitterPrio,submitterAbsShare, submitterLimit,
+								  startdAds, claimIds, scheddVersion, ignore_schedd_limit,
+								  startTime, limitUsed, pieLeft);
+								  
 					updateNegCycleEndTime(startTime, schedd);
 				}
 			}
@@ -2575,7 +2575,7 @@ negotiate( char const *scheddName, const
 		   ClassAdList &startdAds, ClaimIdHash &claimIds, 
 		   const CondorVersionInfo & scheddVersion,
 		   bool ignore_schedd_limit, time_t startTime, 
-		   int &numMatched, double &limitUsed, double &pieLeft)
+		   double &limitUsed, double &pieLeft)
 {
 	ReliSock	*sock;
 	int			reply;
@@ -2590,8 +2590,6 @@ negotiate( char const *scheddName, const
 	char		remoteUser[128];
 	int negotiate_command = NEGOTIATE;
 
-	numMatched = 0;
-
 	// Because of GCB, we may end up contacting a different
 	// address than scheddAddr!  This is used for logging (to identify
 	// the schedd) and to uniquely identify the host in the socketCache.
@@ -2682,7 +2680,7 @@ negotiate( char const *scheddName, const
 
 	
 	// 2.  negotiation loop with schedd
-	for (numMatched=0;true;numMatched++)
+	while (1)
 	{
 		// Service any interactive commands on our command socket.
 		// This keeps condor_userprio hanging to a minimum when
@@ -2739,7 +2737,7 @@ negotiate( char const *scheddName, const
 		{
 			dprintf (D_ALWAYS, "    Failed to get reply from schedd\n");
 			sock->end_of_message ();
-            sockCache->invalidateSock(scheddAddr.Value());
+          		sockCache->invalidateSock(scheddAddr.Value());
 			return MM_ERROR;
 		}
 
@@ -2768,7 +2766,7 @@ negotiate( char const *scheddName, const
 			// something goofy
 			dprintf(D_ALWAYS,"    Got illegal command %d from schedd\n",reply);
 			sock->end_of_message ();
-            sockCache->invalidateSock(scheddAddr.Value());
+          		  sockCache->invalidateSock(scheddAddr.Value());
 			return MM_ERROR;
 		}
 
@@ -2778,7 +2776,7 @@ negotiate( char const *scheddName, const
 		{
 			dprintf(D_ALWAYS, "    JOB_INFO command not followed by ad/eom\n");
 			sock->end_of_message();
-            sockCache->invalidateSock(scheddAddr.Value());
+            		sockCache->invalidateSock(scheddAddr.Value());
 			return MM_ERROR;
 		}
 		if (!request.LookupInteger (ATTR_CLUSTER_ID, cluster) ||
@@ -2789,8 +2787,9 @@ negotiate( char const *scheddName, const
 			sockCache->invalidateSock( scheddAddr.Value() );
 			return MM_ERROR;
 		}
+		
 		dprintf(D_ALWAYS, "    Request %05d.%05d:\n", cluster, proc);
-        negotiation_cycle_stats[0]->num_jobs_considered += 1;
+      		negotiation_cycle_stats[0]->num_jobs_considered += 1;
 
 		// insert the submitter user priority attributes into the request ad
 		// first insert old-style ATTR_SUBMITTOR_PRIO
@@ -2837,38 +2836,30 @@ negotiate( char const *scheddName, const
 
 				negotiation_cycle_stats[0]->rejections++;
 
-				if( rejForSubmitterLimit ) {
-                    negotiation_cycle_stats[0]->submitters_share_limit.insert(scheddName);
-					limited_by_submitterLimit = true;
-				}
 				if (rejForNetwork) {
 					diagnostic_message = "insufficient bandwidth";
-					dprintf(D_ALWAYS|D_MATCH|D_NOHEADER, "%s\n",
-							diagnostic_message);
+				} else if (rejForNetworkShare) {
+					diagnostic_message = "network share exceeded";
+				} else if (rejForConcurrencyLimit) {
+					diagnostic_message = "concurrency limit reached";
+				} else if (rejPreemptForPolicy) {
+					diagnostic_message = "PREEMPTION_REQUIREMENTS == False";
+				} else if (rejPreemptForPrio) {
+					diagnostic_message = "insufficient priority";
+				} else if (rejForSubmitterLimit) {
+					negotiation_cycle_stats[0]->submitters_share_limit.insert(scheddName);
+					limited_by_submitterLimit = true;
+					if( is_group ) {
+						diagnostic_message = "group quota exceeded";
+					}
+					else {
+						diagnostic_message = "fair share exceeded";
+					}
 				} else {
-					if (rejForNetworkShare) {
-						diagnostic_message = "network share exceeded";
-					} else if (rejForConcurrencyLimit) {
-						diagnostic_message =
-							"concurrency limit reached";
-					} else if (rejPreemptForPolicy) {
-						diagnostic_message =
-							"PREEMPTION_REQUIREMENTS == False";
-					} else if (rejPreemptForPrio) {
-						diagnostic_message = "insufficient priority";
-					} else if (rejForSubmitterLimit) {
-						if( is_group ) {
-							diagnostic_message = "group quota exceeded";
-						}
-						else {
-							diagnostic_message = "fair share exceeded";
-						}
-					} else {
 						diagnostic_message = "no match found";
-					}
-					dprintf(D_ALWAYS|D_MATCH|D_NOHEADER, "%s\n",
-							diagnostic_message);
 				}
+				dprintf(D_ALWAYS|D_MATCH|D_NOHEADER, "%s\n", diagnostic_message);
+				
 				sock->encode();
 				if ((want_match_diagnostics) ? 
 					(!sock->put(REJECTED_WITH_REASON) ||
@@ -2891,8 +2882,8 @@ negotiate( char const *scheddName, const
 				(offer->LookupString(ATTR_ACCOUNTING_GROUP, remoteUser)==1) ||
 			    (offer->LookupString(ATTR_REMOTE_USER, remoteUser)==1))
 			{
-                char	*remoteHost = NULL;
-                double	remotePriority;
+                		char	*remoteHost = NULL;
+                		double	remotePriority;
 
 				offer->LookupString(ATTR_NAME, &remoteHost);
 				remotePriority = accountant.GetPriority (remoteUser);
@@ -2910,8 +2901,8 @@ negotiate( char const *scheddName, const
 						 "for %s (user prio=%.2f, startd rank=%.2f)\n", remoteUser,
 						 remotePriority, oldStartdRank, remoteHost, scheddName,
 						 priority, newStartdRank );
-                free(remoteHost);
-                remoteHost = NULL;
+                		free(remoteHost);
+                		remoteHost = NULL;
 			}
 
 			// 2e(ii).  perform the matchmaking protocol
@@ -2935,7 +2926,6 @@ negotiate( char const *scheddName, const
 		// 2f.  if MM_NO_MATCH was found for the request, get another request
 		if (result == MM_NO_MATCH) 
 		{
-			numMatched--;		// haven't used any resources this cycle
 			continue;
 		}
 
@@ -2960,13 +2950,12 @@ negotiate( char const *scheddName, const
 		negotiation_cycle_stats[0]->matches++;
 	}
 
-
 	// break off negotiations
 	sock->encode();
 	if (!sock->put (END_NEGOTIATE) || !sock->end_of_message())
 	{
 		dprintf (D_ALWAYS, "    Could not send END_NEGOTIATE/eom\n");
-        sockCache->invalidateSock(scheddAddr.Value());
+        	sockCache->invalidateSock(scheddAddr.Value());
 	}
 
 	// ... and continue negotiating with others
diff -rNup condor-7.4.4.orig/src/condor_negotiator.V6/matchmaker.h condor-7.4.4/src/condor_negotiator.V6/matchmaker.h
--- condor-7.4.4.orig/src/condor_negotiator.V6/matchmaker.h	2011-06-13 13:38:24.000000000 -0400
+++ condor-7.4.4/src/condor_negotiator.V6/matchmaker.h	2011-06-14 15:11:03.000000000 -0400
@@ -154,8 +154,6 @@ class Matchmaker : public Service
 			@param scheddVersion
 			@param ignore_schedd_limit After hit submitterLimit, keep 
 					negotiating but only consider startd rank.
-			@param numMatched on return this is set to number of machines
-			        matched to this submitter.
 			@return MM_RESUME if schedd hits its resource limit before
 					negotiation finished,
 					MM_DONE if schedd got all the resources it wanted,
@@ -167,7 +165,7 @@ class Matchmaker : public Service
 		   ClassAdList &startdAds, ClaimIdHash &claimIds, 
 		   const CondorVersionInfo & scheddVersion,
 		   bool ignore_schedd_limit, time_t startTime, 
-		   int &numMatched, double &limitUsed, double &pieLeft);
+		   double &limitUsed, double &pieLeft);
 
 		int negotiateWithGroup ( int untrimmed_num_startds,
 								 double untrimmedSlotWeightTotal,
