{"id": 6973, "title": "Ticket #6973: Improve minicondor configuration / better secure-by-default", "description": "<blockquote>\nThis ticket is (for now) a TO-DO for a design document.\n\n<p>Once the TOKEN (multiple pool password) authentication method is ready for prime-time, a number of interesting possibilities for improving the default configuration become available.  The primary concern with the current FS-only / localhost-only configuration is that there's a lot of configuration to change to allow other machines to join the pool, and that the simplest of the historically-available protocols has been pool password, which precluded flocking; it also had a very flat trust model.\n\n</p><p>The TOKEN protocol has neither of those problems, so we should consider switching the minicondor configuration to use it.  To this end, it may be worthwhile to extend TOKEN so that if a (master) password file is specified, but does not exist, HTCondor will create it and fill it in with a sufficiency random bits.  This would eliminate some coding in the packaging materials.  This is not a complete answer, because user authentication would require the administrator to create tokens, or HTCondor to allow FS (only for user authentication); the latter may be acceptable if we assume that there will not, initially, be any remote submission.\n\n</p><p>We should consider a Puppet-like 'promiscuous mode' for initial key distribution, or something very much like it; we may decide that we actually trust administrators of more than one machine to have a mechanism for key distribution (if nothing else, scp).  Since our administrators may not be their networks' administrator, we would at least want to offer some simple way of restricting which machines get keys.  We should also consider a simple TUI and/or a Python API (the former perhaps implemented on the latter); the latter may allow us to simplify the construction of annexes (if not of glide-ins).\n\n</p><p>We will also need to consider the ALLOW lists for the minicondor; we have an opportunity to establish convention and/or best practice, and we should take advantage of that.  For instance, we may want to suppose the existence of a master key used only to sign tokens for (local) startds, or (another?) one only for users who are authorized to submit jobs.  (Is it possible and do we want to identify users, and/or configure Condor, in such a way that the submit node's FS-authenticated identity (after mapping?) is the same as the token-based identity (after mapping?)?  That seems like it would have substantial simplicity benefits.  This may change the default identity issued by condor_token_create and/or condor_token_fetch.)</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody><tr><td align=\"right\" valign=\"top\" width=\"160\">\n<span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=7669\" onclick=\"get_ticket_and_populate_wrapper('7669'); return false;\" title=\"Add configuration template to generate a secure personal condor\">#7669</a></span></td>\n<td align=\"center\" valign=\"center\" width=\"30\">\n<span class=\"icon ptr1\">\u00a0</span></td>\n<td align=\"left\" valign=\"top\">\nAdd configuration template to generate a secure personal condor</td></tr>\n</tbody></table>", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2019-Mar-30 20:39", "status": "new", "created": "2019-Mar-30 20:39", "fixed_version": "2019-Mar-30 20:39", "broken_version": "v080902", "priority": "3", "subsystem": "Security", "assigned_to": "tlmiller", "derived_from": "#6947", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu, bbockelman@morgridge.org, tim@cs.wisc.edu", "due_date": ""}