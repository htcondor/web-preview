From 016c67a18989422816eb621fd8ec3d9f09c4133c Mon Sep 17 00:00:00 2001
From: Chris Lalancette <clalance@redhat.com>
Date: Thu, 16 Jun 2011 10:51:23 -0400
Subject: [PATCH 12/13] Add DELTACLOUD_START_AUTO support to the deltacloud
 GAHP.

This is used to determine whether the deltacloud driver we
are using automatically starts instances when they are
submitted, or whether they need a separate "start" action
to get them going.

Signed-off-by: Chris Lalancette <clalance@redhat.com>
---
 src/deltacloud_gahp/dcloudgahp_commands.cpp |   95 +++++++++++++++++++++++++++
 src/deltacloud_gahp/dcloudgahp_commands.h   |    2 +
 src/deltacloud_gahp/dcloudgahp_main.cpp     |    4 +
 3 files changed, 101 insertions(+), 0 deletions(-)

diff --git a/src/deltacloud_gahp/dcloudgahp_commands.cpp b/src/deltacloud_gahp/dcloudgahp_commands.cpp
index 8999f50..9ef5504 100644
--- a/src/deltacloud_gahp/dcloudgahp_commands.cpp
+++ b/src/deltacloud_gahp/dcloudgahp_commands.cpp
@@ -824,3 +824,98 @@ cleanup_password:
 
     return ret;
 }
+
+/*
+ * DELTACLOUD_START_AUTO <reqid> <url> <user> <password_file>
+ *  where reqid, url, user, and password_file have to be non-NULL.
+ */
+bool dcloud_start_auto_worker(int argc, char **argv,
+			      std::string &output_string)
+{
+    char *url, *user, *password_file, *password, *reqid;
+    struct deltacloud_api api;
+    struct deltacloud_instance_state *instance_states;
+    struct deltacloud_instance_state *state;
+    struct deltacloud_instance_state_transition *transition;
+    bool automatically = FALSE;
+    bool ret = FALSE;
+
+    if (!verify_number_args(5, argc)) {
+        output_string = create_failure("0", "Wrong_Argument_Number");
+        return FALSE;
+    }
+
+    reqid = argv[1];
+    url = argv[2];
+    user = argv[3];
+    password_file = argv[4];
+
+    dcloudprintf("Arguments: reqid %s, url %s, user %s, password_file %s\n", reqid, url, user, password_file);
+
+    if (STRCASEEQ(url, NULLSTRING)) {
+        output_string = create_failure(reqid, "Invalid_URL");
+        return FALSE;
+    }
+    if (STRCASEEQ(user, NULLSTRING)) {
+        output_string = create_failure(reqid, "Invalid_User");
+        return FALSE;
+    }
+
+    if (STRCASEEQ(password_file, NULLSTRING))
+        password_file = NULL;
+
+    password = read_password_file(password_file);
+    if (!password) {
+        output_string = create_failure(reqid, "Invalid_Password_File");
+        return FALSE;
+    }
+
+    if (deltacloud_initialize(&api, url, user, password) < 0) {
+        output_string = create_failure(reqid, "Deltacloud_Init_Failure: %s",
+                                       deltacloud_get_last_error_string());
+        goto cleanup_password;
+    }
+
+    if (deltacloud_get_instance_states(&api, &instance_states) < 0) {
+        output_string = create_failure(reqid, "Instance_State_Failure: %s",
+                                       deltacloud_get_last_error_string());
+        goto cleanup_library;
+    }
+
+    deltacloud_for_each(state, instance_states) {
+        if (STRCASENEQ(state->name, "pending"))
+            continue;
+
+        deltacloud_for_each(transition, state->transitions) {
+            if (STRCASEEQ(transition->to, "running") &&
+                transition->automatically != NULL &&
+                STRCASEEQ(transition->automatically, "true")) {
+                automatically = TRUE;
+                goto done;
+            }
+        }
+    }
+
+done:
+    output_string = reqid;
+    output_string += " NULL ";
+    if (automatically) {
+        output_string += "TRUE";
+    }
+    else {
+        output_string += "FALSE";
+    }
+    output_string += "\n";
+
+    deltacloud_free_instance_state_list(&instance_states);
+
+    ret = TRUE;
+
+cleanup_library:
+    deltacloud_free(&api);
+
+cleanup_password:
+    free(password);
+
+    return ret;
+}
diff --git a/src/deltacloud_gahp/dcloudgahp_commands.h b/src/deltacloud_gahp/dcloudgahp_commands.h
index 55f6892..2eff97e 100644
--- a/src/deltacloud_gahp/dcloudgahp_commands.h
+++ b/src/deltacloud_gahp/dcloudgahp_commands.h
@@ -20,5 +20,7 @@ bool dcloud_statusall_worker(int argc, char **argv, std::string &output_string);
 bool dcloud_find_worker(int argc, char **argv, std::string &output_string);
 bool dcloud_max_name_length_worker(int argc, char **argv,
                                    std::string &output_string);
+bool dcloud_start_auto_worker(int argc, char **argv,
+                              std::string &output_string);
 
 #endif
diff --git a/src/deltacloud_gahp/dcloudgahp_main.cpp b/src/deltacloud_gahp/dcloudgahp_main.cpp
index 0cad719..d5c8afe 100644
--- a/src/deltacloud_gahp/dcloudgahp_main.cpp
+++ b/src/deltacloud_gahp/dcloudgahp_main.cpp
@@ -29,6 +29,7 @@
 #define DCLOUD_COMMAND_VM_INFO				"DELTACLOUD_VM_INFO"
 #define DCLOUD_COMMAND_VM_FIND				"DELTACLOUD_VM_FIND"
 #define DCLOUD_COMMAND_GET_MAX_NAME_LENGTH		"DELTACLOUD_GET_MAX_NAME_LENGTH"
+#define DCLOUD_COMMAND_START_AUTO			"DELTACLOUD_START_AUTO"
 
 const char * version = "$GahpVersion " DCLOUD_GAHP_VERSION " Feb 4 2010 Condor\\ DELTACLOUDGAHP $";
 
@@ -453,6 +454,9 @@ static void registerAllDcloudCommands(void)
 
     registerDcloudGahpCommand(DCLOUD_COMMAND_GET_MAX_NAME_LENGTH,
                               dcloud_max_name_length_worker);
+
+    registerDcloudGahpCommand(DCLOUD_COMMAND_START_AUTO,
+                              dcloud_start_auto_worker);
 }
 
 int main(int argc, char *argv[])
-- 
1.7.4.4

