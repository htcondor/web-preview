diff --git a/src/condor_negotiator.V6/matchmaker.cpp b/src/condor_negotiator.V6/matchmaker.cpp
index f97bf10..a042b3a 100644
--- a/src/condor_negotiator.V6/matchmaker.cpp
+++ b/src/condor_negotiator.V6/matchmaker.cpp
@@ -963,7 +963,7 @@ void round_for_precision(double& x) {
 
 
 double starvation_ratio(double usage, double allocated) {
-    return (allocated > 0) ? (usage / allocated) : DBL_MAX;
+    return (allocated > 0) ? (usage / allocated) : FLT_MAX;
 }
 
 struct starvation_order {
@@ -2012,7 +2012,6 @@ negotiateWithGroup ( int untrimmed_num_startds,
 					 ClassAdListDoesNotDeleteAds& scheddAds, 
 					 float groupQuota, const char* groupName)
 {
-    time_t start_time_phase3 = time(NULL);
 	ClassAd		*schedd;
 	MyString    scheddName;
 	MyString    scheddAddr;
@@ -2035,13 +2034,8 @@ negotiateWithGroup ( int untrimmed_num_startds,
 	time_t		startTime;
 	
 
-	// ----- Sort the schedd list in decreasing priority order
-	dprintf( D_ALWAYS, "Phase 3:  Sorting submitter ads by priority ...\n" );
-	scheddAds.Sort( (lessThanFunc)comparisonFunction, this );
-
-    // transition Phase 3 --> Phase 4
+    int duration_phase3 = 0;
     time_t start_time_phase4 = time(NULL);
-    negotiation_cycle_stats[0]->duration_phase3 += start_time_phase4 - start_time_phase3;
 
 	double scheddUsed=0;
 	int spin_pie=0;
@@ -2093,6 +2087,18 @@ negotiateWithGroup ( int untrimmed_num_startds,
 				/* result parameters: */
 			pieLeft);
 
+        if (1 == spin_pie) {
+            // Sort the schedd list in decreasing priority order
+            // This only needs to be done once: do it on the 1st spin, prior to 
+            // iterating over submitter ads so they negotiate in sorted order.
+            // The sort ordering function makes use of a submitter starvation
+            // attribute that is computed in calculatePieLeft, above
+            time_t start_time_phase3 = time(NULL);
+            dprintf(D_ALWAYS, "Phase 3:  Sorting submitter ads by priority ...\n");
+            scheddAds.Sort((lessThanFunc)comparisonFunction, this);
+            duration_phase3 += time(NULL) - start_time_phase3;
+        }
+
 		pieLeftOrig = pieLeft;
 		scheddAdsCountOrig = scheddAds.MyLength();
 
@@ -2307,7 +2313,8 @@ negotiateWithGroup ( int untrimmed_num_startds,
 
 	dprintf( D_ALWAYS, " negotiateWithGroup resources used scheddAds length %d \n",scheddAds.MyLength());
 
-    negotiation_cycle_stats[0]->duration_phase4 += time(NULL) - start_time_phase4;    
+    negotiation_cycle_stats[0]->duration_phase3 += duration_phase3;
+    negotiation_cycle_stats[0]->duration_phase4 += (time(NULL) - start_time_phase4) - duration_phase3;
 
 	return TRUE;
 }
@@ -2315,57 +2322,29 @@ negotiateWithGroup ( int untrimmed_num_startds,
 static int
 comparisonFunction (AttrList *ad1, AttrList *ad2, void *m)
 {
-	char	*scheddName1 = NULL;
-	char	*scheddName2 = NULL;
-	double	prio1, prio2;
-	Matchmaker *mm = (Matchmaker *) m;
+	Matchmaker* mm = (Matchmaker*)m;
 
+    MyString subname1;
+    MyString subname2;
 
+    // nameless submitters are filtered elsewhere
+	ad1->LookupString(ATTR_NAME, subname1);
+	ad2->LookupString(ATTR_NAME, subname2);
+	double prio1 = mm->accountant.GetPriority(subname1);
+	double prio2 = mm->accountant.GetPriority(subname2);
 
-	if (!ad1->LookupString (ATTR_NAME, &scheddName1) ||
-		!ad2->LookupString (ATTR_NAME, &scheddName2))
-	{
-		if (scheddName1) free(scheddName1);
-		if (scheddName2) free(scheddName2);
-		return -1;
-	}
+    // primary sort on submitter priority
+    if (prio1 < prio2) return true;
+    if (prio1 > prio2) return false;
 
-	prio1 = mm->accountant.GetPriority(scheddName1);
-	prio2 = mm->accountant.GetPriority(scheddName2);
-	
-	// the scheddAds should be secondarily sorted based on ATTR_NAME
-	// because we assume in the code that follows that ads with the
-	// same ATTR_NAME are adjacent in the scheddAds list.  this is
-	// usually the case because 95% of the time each user in the
-	// system has a different priority.
-
-	if (prio1==prio2) {
-		int namecomp = strcmp(scheddName1,scheddName2);
-		free(scheddName1);
-		free(scheddName2);
-		if (namecomp != 0) return (namecomp < 0);
-
-			// We don't always want to negotiate with schedds with the
-			// same name in the same order or we might end up only
-			// running jobs this user has submitted to the first
-			// schedd.  The general problem is that we rely on the
-			// schedd to order each user's jobs, so when a user
-			// submits to multiple schedds, there is no guaranteed
-			// order.  Our hack is to order the schedds randomly,
-			// which should be a little bit better than always
-			// negotiating in the same order.  We use the timestamp on
-			// the classads to get a random ordering among the schedds
-			// (consistent throughout our sort).
-
-		int ts1=0, ts2=0;
-		ad1->LookupInteger (ATTR_LAST_HEARD_FROM, ts1);
-		ad2->LookupInteger (ATTR_LAST_HEARD_FROM, ts2);
-		return ( (ts1 % 1009) < (ts2 % 1009) );
-	}
-
-	free(scheddName1);
-	free(scheddName2);
-	return (prio1 < prio2);
+    float sr1 = FLT_MAX;
+    float sr2 = FLT_MAX;
+
+    if (!ad1->LookupFloat("SubmitterStarvation", sr1)) sr1 = FLT_MAX;
+    if (!ad2->LookupFloat("SubmitterStarvation", sr2)) sr2 = FLT_MAX;
+
+    // secondary sort on submitter starvation
+    return sr1 < sr2;
 }
 
 int Matchmaker::
@@ -4048,7 +4027,8 @@ Matchmaker::calculatePieLeft(
 			submitterAbsShare,
 			submitterPrio,
 			submitterPrioFactor);
-			
+
+        schedd->Assign("SubmitterStarvation", starvation_ratio(submitterUsage, submitterUsage+submitterLimit));
 			
 		pieLeft += submitterLimit;
         // account for expected group usage increases as we accumulate pie
@@ -4062,24 +4042,17 @@ calculateNormalizationFactor (ClassAdListDoesNotDeleteAds &scheddAds,
 							  double &max, double &normalFactor,
 							  double &maxAbs, double &normalAbsFactor)
 {
-	ClassAd *ad;
-	char	*scheddName = NULL;
-	double	prio, prioFactor;
-	char	*old_scheddName = NULL;
-
 	// find the maximum of the priority values (i.e., lowest priority)
 	max = maxAbs = DBL_MIN;
 	scheddAds.Open();
-	while ((ad = scheddAds.Next()))
-	{
+	while (ClassAd* ad = scheddAds.Next()) {
 		// this will succeed (comes from collector)
-		ad->LookupString (ATTR_NAME, &scheddName);
-		prio = accountant.GetPriority (scheddName);
+        MyString subname;
+		ad->LookupString(ATTR_NAME, subname);
+		double prio = accountant.GetPriority(subname);
 		if (prio > max) max = prio;
-		prioFactor = accountant.GetPriorityFactor (scheddName);
+		double prioFactor = accountant.GetPriorityFactor(subname);
 		if (prioFactor > maxAbs) maxAbs = prioFactor;
-		free(scheddName);
-		scheddName = NULL;
 	}
 	scheddAds.Close();
 
@@ -4087,41 +4060,23 @@ calculateNormalizationFactor (ClassAdListDoesNotDeleteAds &scheddAds,
 	// also, do not factor in ads with the same ATTR_NAME more than once -
 	// ads with the same ATTR_NAME signify the same user submitting from multiple
 	// machines.
+    set<MyString> names;
 	normalFactor = 0.0;
 	normalAbsFactor = 0.0;
 	scheddAds.Open();
-	while ((ad = scheddAds.Next()))
-	{
-		ad->LookupString (ATTR_NAME, &scheddName);
-		if ( scheddName != NULL && old_scheddName != NULL )
-		{
-			if ( strcmp(scheddName,old_scheddName) == 0 )
-			{
-				free(old_scheddName);
-				old_scheddName = scheddName;
-				continue;
-			}
-		}
-		if ( old_scheddName != NULL )
-		{
-			free(old_scheddName);
-			old_scheddName = NULL;
-		}
-		old_scheddName = scheddName;
-		prio = accountant.GetPriority (scheddName);
-		normalFactor = normalFactor + max/prio;
-		prioFactor = accountant.GetPriorityFactor (scheddName);
-		normalAbsFactor = normalAbsFactor + maxAbs/prioFactor;
-	}
-	if ( scheddName != NULL )
-	{
-		free(scheddName);
-		scheddName = NULL;
+	while (ClassAd* ad = scheddAds.Next()) {
+        MyString subname;
+		ad->LookupString(ATTR_NAME, subname);
+        std::pair<set<MyString>::iterator, bool> r = names.insert(subname);
+        // Only count each submitter once
+        if (!r.second) continue;
+
+		double prio = accountant.GetPriority(subname);
+		normalFactor += max/prio;
+		double prioFactor = accountant.GetPriorityFactor(subname);
+		normalAbsFactor += maxAbs/prioFactor;
 	}
 	scheddAds.Close();
-
-	// done
-	return;
 }
 
 
