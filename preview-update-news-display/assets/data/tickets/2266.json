{"id": 2266, "title": "Ticket #2266: Condor should optionally enforce rlimits on RAM, file size", "description": "<blockquote>\nCondor should optionally set various rlimits on jobs to provide a weak limitation on misbehavior.  Possibilities:\n\n<p></p><ul>\n<li>Set to Memory*1024*1024.  This won't stop a multi-process job from using more memory than advertised, but it does provide a bit of limiting behavior.  All of these may be limited to 2GB on 32-bit machines!\n<ul>\n<li>RLIMIT_AS - virtual memory (address space)\n</li><li>RLIMIT_DATA - data segment (probably redundant given RLIMIT_AS)\n</li><li>RLIMIT_RSS - resident set size (probably redundant given RLIMIT_AS. Also ignored on modern Linux)\n</li><li>RLIMIT_STACK - stack size (probably redundant given RLIMIT_AS. Probably silly)\n</li></ul>\n</li><li>Set to Disk*1024\n<ul>\n<li>RLIMIT_FSIZE - Maximum size of a single file.  Very sloppy as doesn't track across files.\n</li></ul>\n</li></ul>\n\n<p>Worth being aware of:\n</p><ul>\n<li><span class=\"ticket\"><a class=\"new\" href=\"/wiki-archive/tickets/?ticket=2265\" onclick=\"get_ticket_and_populate_wrapper('2265'); return false;\" title=\"Machine ads/condor_startd should advertise no more Memory than ulimit\">#2265</a></span> Machine ads/condor_startd should advertise no more Memory than ulimit\n</li><li><span class=\"ticket\"><a class=\"resolved\" href=\"/wiki-archive/tickets/?ticket=489\" onclick=\"get_ticket_and_populate_wrapper('489'); return false;\" title=\"Hard limit resource restriction\">#489</a></span> Hard limit resource restriction - Implements this as a wrapper script</li></ul>\n</blockquote>", "remarks": "<blockquote>\n<em>2011-Jun-27 17:01:25 by bbockelm:</em> <br/>\n\nHi,\n\n<p>It would be fairly trivial to implement <strong>real</strong> VSIZE/RSS limits using cgroups.  The cgroup accounting/limits apply to the set of processes in the group, not to individual process.\n\n</p><p>The customer wasn't set, so it's not apparent how limiting \"cgroups only works on modern kernels\" is for this use case.\n\n</p><p>Brian\n\n</p><p></p><hr/>\n<em>2011-Jun-30 12:52:46 by adesmet:</em> <br/>\n\ncgroups is the ideal solution, but history suggests we'll be supporting pre-cgroups distros for a while.  This seems like a good belt-and-suspenders solution; it shouldn't harm the cgroups implementation but works if cgroups isn't available.\n\n<p></p><hr/>\n<em>2014-Feb-17 13:28:17 by wenger:</em> <br/>\n\nSome kind of output file size limit would be useful for BMRB.  They've had some problems where the CS-Rosetta application sometimes ends up generating huge amounts of garbage as output (multiple GB, if I remember correctly).  Anyhow, some of the OSG sites were getting upset because this garbage output would fill up the disk on an execute machine.  At any rate, in this case, we need to do something like kill the job if it hits some limit on file size -- it doesn't do any good to let the job complete and then not transfer things back.\n\n<p></p><hr/>\n<em>2014-Feb-17 16:45:52 by bbockelm:</em> <br/>\n\nHi,\n\n<p>Unfortunately, filesystem usage is extraordinarily difficult to track in general (esp as it hooks into the VM subsystem).  RLIMIT_FSIZE is probably the best one could do... does the BMRB application at least write its output in one file?\n\n</p><p>Brian</p></blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "enhance", "last_change": "2014-Feb-17 16:45", "status": "new", "created": "2011-Jun-23 16:33", "fixed_version": "2011-Jun-23 16:33", "broken_version": "v060000", "priority": "4", "subsystem": "", "assigned_to": "", "derived_from": "", "creator": "adesmet", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tstclair@redhat.com, bbockelm@cse.unl.edu, wenger@cs.wisc.edu,wedell@bmrb.wisc.edu", "due_date": ""}