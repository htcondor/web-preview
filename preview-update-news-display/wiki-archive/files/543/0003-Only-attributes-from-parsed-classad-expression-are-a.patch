From 47a29a0c1a132741f89da9cb1e1546ca65837a97 Mon Sep 17 00:00:00 2001
From: Lukas Slebodnik <slebodnik@sors.com>
Date: Thu, 22 Mar 2012 20:32:36 +0100
Subject: [PATCH 3/3] Only attributes from parsed classad expression are appended to projection list

---
 src/condor_status.V6/status.cpp          |   17 ++++++++++-
 src/condor_utils/compat_classad_util.cpp |   48 ++++++++++++++++++++++++++++++
 src/condor_utils/compat_classad_util.h   |    2 +
 3 files changed, 66 insertions(+), 1 deletions(-)

diff --git a/src/condor_status.V6/status.cpp b/src/condor_status.V6/status.cpp
index 74fa0fc..57f4ad7 100644
--- a/src/condor_status.V6/status.cpp
+++ b/src/condor_status.V6/status.cpp
@@ -811,7 +811,22 @@ secondPass (int argc, char *argv[])
 		}
 		if (matchPrefix (argv[i], "-format", 2)) {
 			pm.registerFormat (argv[i+1], argv[i+2]);
-			projList.AppendArg(argv[i+2]);
+
+			StringList attributes;
+			ExprTree	*expr;
+			if(ParseClassAdRvalExpr(argv[i+2], expr)) {
+				fprintf( stderr, "Error:  Parse error of: %s\n", argv[i+2]);
+				exit(1);
+			}
+			GetAttributesFromExpr(expr, attributes);
+			delete expr;
+
+			attributes.rewind();
+			char const *s;
+			while( (s=attributes.next()) ) {
+				projList.AppendArg(s);
+			}
+
 			if (diagnose) {
 				printf ("Arg %d --- register format [%s] for [%s]\n",
 						i, argv[i+1], argv[i+2]);
diff --git a/src/condor_utils/compat_classad_util.cpp b/src/condor_utils/compat_classad_util.cpp
index 5005e7a..51d086c 100644
--- a/src/condor_utils/compat_classad_util.cpp
+++ b/src/condor_utils/compat_classad_util.cpp
@@ -266,6 +266,54 @@ int EvalExprTree( classad::ExprTree *expr, compat_classad::ClassAd *source,
 	return rc;
 }
 
+void GetAttributesFromExpr( classad::ExprTree *tree, StringList & attributeNames)
+{
+	if( tree == NULL ) {
+		return;
+	}
+	classad::ExprTree::NodeKind nKind = tree->GetKind( );
+	switch( nKind ) {
+	case classad::ExprTree::ATTRREF_NODE: {
+		classad::ExprTree *expr = NULL;
+		string attr = "";
+		bool abs = false;
+		( ( classad::AttributeReference * )tree )->GetComponents(expr,attr,abs);
+        attributeNames.append(attr.c_str());
+		return;
+	}
+	case classad::ExprTree::OP_NODE: {
+		classad::Operation::OpKind oKind;
+		classad::ExprTree * expr1 = NULL;
+		classad::ExprTree * expr2 = NULL;
+		classad::ExprTree * expr3 = NULL;
+		( ( classad::Operation * )tree )->GetComponents( oKind, expr1, expr2, expr3 );
+		if( expr1 != NULL ) {
+			GetAttributesFromExpr( expr1, attributeNames );
+		}
+		if( expr2 != NULL ) {
+			GetAttributesFromExpr( expr2, attributeNames );
+		}
+		if( expr3 != NULL ) {
+			GetAttributesFromExpr( expr3, attributeNames );
+		}
+        return;
+	}
+	case classad::ExprTree::FN_CALL_NODE: {
+		std::string fn_name;
+		classad::ArgumentList fn_args;
+		( ( classad::FunctionCall * )tree )->GetComponents( fn_name, fn_args );
+		for ( classad::ArgumentList::iterator i = fn_args.begin(); i != fn_args.end(); i++ ) {
+			GetAttributesFromExpr( *i, attributeNames );
+		}
+		return;
+	}
+	default: {
+		// skip other NodeKind
+        // LITERAL_NODE, CLASSAD_NODE, EXPR_LIST_NODE
+	}
+	}
+}
+
 bool IsAMatch( compat_classad::ClassAd *ad1, compat_classad::ClassAd *ad2 )
 {
 	classad::MatchClassAd *mad = compat_classad::getTheMatchAd( ad1, ad2 );
diff --git a/src/condor_utils/compat_classad_util.h b/src/condor_utils/compat_classad_util.h
index 77f2c8d..090f922 100644
--- a/src/condor_utils/compat_classad_util.h
+++ b/src/condor_utils/compat_classad_util.h
@@ -37,6 +37,8 @@ bool ClassAdsAreSame( compat_classad::ClassAd *ad1, compat_classad::ClassAd * ad
 int EvalExprTree( classad::ExprTree *expr, compat_classad::ClassAd *source,
 				  compat_classad::ClassAd *target, compat_classad::EvalResult *result );
 
+void GetAttributesFromExpr( classad::ExprTree *tree, StringList & attributeNames);
+
 bool IsAMatch( compat_classad::ClassAd *ad1, compat_classad::ClassAd *ad2 );
 
 bool IsAHalfMatch( compat_classad::ClassAd *my, compat_classad::ClassAd *target );
-- 
1.7.4.1

