diff --git a/src/condor_daemon_client/daemon.cpp b/src/condor_daemon_client/daemon.cpp
index 6c63fca..08ffc33 100644
--- a/src/condor_daemon_client/daemon.cpp
+++ b/src/condor_daemon_client/daemon.cpp
@@ -428,6 +428,37 @@ Daemon::display( FILE* fp )
 			 _error ? _error : "(null)" );
 }
 
+bool
+Daemon::nextValidCm()
+{
+	char *dname;
+	bool rval = false;
+
+	do {
+ 		dname = daemon_list.next();
+		if( dname != NULL )
+		{
+			rval = findCmDaemon( dname );
+			if( rval == true ) {
+				locate();
+			}
+		}
+	} while( rval == false && dname != NULL );
+	return rval;
+}
+
+
+void
+Daemon::rewindCmList()
+{
+	char *dname;
+
+	daemon_list.rewind();
+ 	dname = daemon_list.next();
+	findCmDaemon( dname );
+	locate();
+}
+
 
 //////////////////////////////////////////////////////////////////////
 // Communication methods
@@ -917,7 +948,9 @@ Daemon::locate( void )
 		rval = getDaemonInfo( MASTER_AD );
 		break;
 	case DT_COLLECTOR:
-		rval = getCmInfo( "COLLECTOR" );
+		do {
+			rval = getCmInfo( "COLLECTOR" );
+		} while (rval == false && nextValidCm() == true);
 		break;
 	case DT_NEGOTIATOR:
 		if( !_pool && (tmp = getCmHostFromConfig( "NEGOTIATOR" )) ) {
@@ -949,7 +982,9 @@ Daemon::locate( void )
 		} 
 			// If there's nothing CONDOR_VIEW-specific, try just using
 			// "COLLECTOR".
-		rval = getCmInfo( "COLLECTOR" ); 
+		do {
+			rval = getCmInfo( "COLLECTOR" );
+		} while (rval == false && nextValidCm() == true);
 		break;
 	case DT_QUILL:
 		setSubsystem( "QUILL" );
@@ -1274,8 +1309,6 @@ Daemon::getCmInfo( const char* subsys )
 {
 	MyString buf;
 	char* host = NULL;
-	char* tmp;
-	struct in_addr sin_addr;
 
 	setSubsystem( subsys );
 
@@ -1331,29 +1364,11 @@ Daemon::getCmInfo( const char* subsys )
 			_is_configured = false;
 			return false;
 		}
-		char *itr, *full_name, *host_name, *local_name;
-		StringList host_list;
-
-		full_name = my_full_hostname();
-		local_name = localName();
-		host_list.initializeFromString(hostnames);
-		host_list.rewind();
-		itr = NULL;
-		while ((itr = host_list.next()) != NULL) {
-			host_name = getHostFromAddr( itr );
-			if(!host_name) { continue; }
-			if ((strlen(full_name) == strlen(host_name) ||
-				(strlen(local_name) == strlen(host_name))) &&
-				((strcmp(full_name, host_name) == 0) ||
-				(strcmp(local_name, host_name) == 0))) {
-				host = strnewp(itr);
-				free( host_name );
-				break;
-			}
-			free( host_name );
-		}
+
+		daemon_list.initializeFromString(hostnames);
+		daemon_list.rewind();
+		host = strnewp(daemon_list.next());
 		free( hostnames );
-		delete [] local_name;
 	}
 
 	if( ! host || !host[0]) {
@@ -1381,11 +1396,25 @@ Daemon::getCmInfo( const char* subsys )
 		return false;
 	} 
 
-	dprintf( D_HOSTNAME, "Using name \"%s\" to find daemon\n", host ); 
+	bool ret = findCmDaemon( host );
+	free( host );
+	return ret;
+}
+
+
+bool
+Daemon::findCmDaemon( const char* cm_name )
+{
+	char* host = NULL;
+	MyString buf;
+	struct in_addr sin_addr;
+	char* tmp;
+
+	dprintf( D_HOSTNAME, "Using name \"%s\" to find daemon\n", cm_name ); 
 
 		// See if it's already got a port specified in it, or if we
 		// should use the default port for this kind of daemon.
-	_port = getPortFromAddr( host );
+	_port = getPortFromAddr( cm_name );
 	if( _port < 0 ) {
 		_port = getDefaultPort();
 		dprintf( D_HOSTNAME, "Port not specified, using default (%d)\n",
@@ -1393,14 +1422,11 @@ Daemon::getCmInfo( const char* subsys )
 	} else {
 		dprintf( D_HOSTNAME, "Port %d specified in name\n", _port );
 	}
-	if( _port == 0 && readAddressFile(subsys) ) {
+	if( _port == 0 && readAddressFile(_subsys) ) {
 		dprintf( D_HOSTNAME, "Port 0 specified in name, "
 				 "IP/port found in address file\n" );
 		New_name( strnewp(my_full_hostname()) );
 		New_full_hostname( strnewp(my_full_hostname()) );
-		if( host ) {
-			free( host );
-		}
 		return true;
 	}
 
@@ -1408,7 +1434,7 @@ Daemon::getCmInfo( const char* subsys )
 		// file, so we should store the string we used (as is) in
 		// _name, so that we can get to it later if we need it.
 	if( ! _name ) {
-		New_name( strnewp(host) );
+		New_name( strnewp(cm_name) );
 	}
 
 		// Now that we've got the port, grab the hostname for the rest
@@ -1417,16 +1443,11 @@ Daemon::getCmInfo( const char* subsys )
 		// (which we've already got stashed in _name if we need it),
 		// and finally reset host to point to the host for the rest of
 		// this function.
-	tmp = getHostFromAddr( host );
-	free( host );
-	host = tmp;
-	tmp = NULL;
-
-
+	host = getHostFromAddr( cm_name );
 
 	if ( !host ) {
 		buf.sprintf( "%s address or hostname not specified in config file",
-				 subsys ); 
+				 _subsys ); 
 		newError( CA_LOCATE_FAILED, buf.Value() );
 		_is_configured = false;
 		return false;
diff --git a/src/condor_daemon_client/daemon.h b/src/condor_daemon_client/daemon.h
index d04257e..1f15758 100644
--- a/src/condor_daemon_client/daemon.h
+++ b/src/condor_daemon_client/daemon.h
@@ -515,6 +515,17 @@ public:
 		 **/
 	bool setSubsystem( const char* subsys );
 
+		/*
+		 * Interate to the next CM daemon in a case where
+		 * more than 1 central manager is configured
+		 **/
+	bool nextValidCm();
+
+		/*
+		 * Reset the list of CM daemons to the first one
+		 **/
+	void rewindCmList();
+
 protected:
 	// Data members
 
@@ -539,6 +550,8 @@ protected:
 	bool _is_configured; 
 	ClassAd *m_daemon_ad_ptr;
 	SecMan _sec_man;
+	StringList daemon_list;
+
 
 
 		// //////////////////////////////////////////////////////////
@@ -568,12 +581,9 @@ protected:
 		/** Helper for central manager daemons (collector and
 		  negotiator).  These are a special case since they have
 		  well-known ports, instead of needing to query the central
-		  manager (of course).   Also, we have to deal with the fact
-		  that the CM might have multiple network interfaces, and we
-		  need to be sure to connect to the right one.  We return
-		  success or failure on whether we found any of the parameters
-		  we were looking for that describe where the CM is.  This is
-		  useful when we're trying to find the condor_view collector,
+		  manager (of course).  Uses findCmDaemon to determine the
+		  parameters for central manager daemons.  This is useful
+		  when we're trying to find the condor_view collector,
 		  b/c if we can't find condor_view-specific entries, we fall
 		  back and try to just find the default collector.  
 		  @param subsys The subsystem string for this daemon
@@ -581,6 +591,16 @@ protected:
 		  */
 	bool getCmInfo( const char* subsys );
 
+		/** Deal with the fact that the CM might have multiple
+		  network interfaces, and we need to be sure to connect
+		  to the right one.  We return success or failure on whether
+		  we found any of the parameters we were looking for that
+		  describe where the CM is.
+		  @param name The hostname of a central manager
+		  @return Whether all the parameters for the CM were found
+		  */
+	bool findCmDaemon( const char* name );
+
 
 		/** Helper to initialize the hostname if we don't have it
 			already, but we do have an IP address.  Usually, when we
diff --git a/src/condor_tools/config_val.cpp b/src/condor_tools/config_val.cpp
index 4fe4c8d..07bb47f 100644
--- a/src/condor_tools/config_val.cpp
+++ b/src/condor_tools/config_val.cpp
@@ -369,8 +369,15 @@ main( int argc, char* argv[] )
 			} else { 
 				CollectorList * collectors = CollectorList::create();
 				Daemon * collector = NULL;
+				ReliSock sock;
 				while (collectors->next (collector)) {
-					if (collector->locate()) break;
+					if (collector->locate() &&
+					    sock.connect((char*) collector->addr(), 0)) {
+						// If we can connect to the
+						// collector, then we accept
+						// it as valid
+						break;
+					}
 				}
 				if( (!collector) || (!collector->addr()) ) {
 					fprintf( stderr, 
@@ -451,13 +458,23 @@ GetRemoteParam( Daemon* target, char* param_name )
 		// tools for fear that someone's ASCII parser will break, i'm
 		// just cheating and being lazy here by replicating the old
 		// behavior...
-	char* addr = target->addr();
-	char* name = target->name();
-	if( !name ) {
-		name = "";
-	}
+	char* addr;
+	char* name;
+	bool connect_error = true;
+	do {
+		addr = target->addr();
+		name = target->name();
+		if( !name ) {
+			name = "";
+		}
 
-    if( ! s.connect( addr, 0 ) ) {
+		if( s.connect( addr, 0 ) ) {
+			connect_error = false;
+			break;
+		}
+	} while( target->nextValidCm() == true );
+
+	if( connect_error == true ) {
 		fprintf( stderr, "Can't connect to %s on %s %s\n", 
 				 daemonString(dt), name, addr );
 		my_exit(1);
@@ -504,11 +521,9 @@ SetRemoteParam( Daemon* target, char* param_value, ModeType mt )
 		// tools for fear that someone's ASCII parser will break, i'm
 		// just cheating and being lazy here by replicating the old
 		// behavior...
-	char* addr = target->addr();
-	char* name = target->name();
-	if( !name ) {
-		name = "";
-	}
+	char* addr;
+	char* name;
+	bool connect_error = true;
 
 		// We need to know two things: what command to send, and (for
 		// error messages) if we're setting or unsetting.  Since our
@@ -587,8 +602,21 @@ SetRemoteParam( Daemon* target, char* param_value, ModeType mt )
 	char* buf = (char*)malloc( strlen(param_value) + 2 );
 	sprintf( buf, "%s\n", param_value );
 
-    s.timeout( 30 );
-	if( ! s.connect( addr, 0 ) ) {
+	s.timeout( 30 );
+	do {
+		addr = target->addr();
+		name = target->name();
+		if( !name ) {
+			name = "";
+		}
+
+		if( s.connect( addr, 0 ) ) {
+			connect_error = false;
+			break;
+		}
+	} while( target->nextValidCm() == true );
+
+	if( connect_error == true ) {
 		fprintf( stderr, "Can't connect to %s on %s %s\n", 
 				 daemonString(dt), name, addr );
 		my_exit(1);
diff --git a/src/condor_tools/invalidate_host.cpp b/src/condor_tools/invalidate_host.cpp
index 12990dd..28b2675 100644
--- a/src/condor_tools/invalidate_host.cpp
+++ b/src/condor_tools/invalidate_host.cpp
@@ -61,6 +61,7 @@ main( int argc, char** argv )
 	char line[256];
 	Daemon Collector( DT_COLLECTOR);
 	ReliSock* coll_sock;
+	bool connect_error = true;
 
 	config();
 
@@ -96,8 +97,14 @@ main( int argc, char** argv )
     invalidate_ad.Insert( line );
 
 
-	coll_sock = (ReliSock*)Collector.startCommand( INVALIDATE_STARTD_ADS );
-	if( ! coll_sock ) {
+	do {
+		coll_sock = (ReliSock*)Collector.startCommand( INVALIDATE_STARTD_ADS );
+		if( coll_sock ) {
+			connect_error = false;
+			break;
+		}
+	} while( Collector.nextValidCm() == true );
+	if( connect_error == true ) {
 		fprintf( stderr, "%s: ERROR: can't create TCP socket to %s\n", 
 				 MyName, Collector.fullHostname() );
 		exit( 1 );
diff --git a/src/condor_tools/stats.cpp b/src/condor_tools/stats.cpp
index 73b1a6a..0ce7ab2 100644
--- a/src/condor_tools/stats.cpp
+++ b/src/condor_tools/stats.cpp
@@ -269,11 +269,19 @@ int main(int argc, char* argv[])
   int LineCount=0;
 
   ReliSock sock;
-  if (!sock.connect((char*) view_host.addr(), 0)) {
-    fprintf( stderr, "failed to connect to the CondorView server (%s)\n", 
+  bool connect_error = true;
+  do {
+    if (sock.connect((char*) view_host.addr(), 0)) {
+      connect_error = false;
+      break;
+    }
+  } while (view_host.nextValidCm() == true);
+
+  if (connect_error == true) {
+      fprintf( stderr, "failed to connect to the CondorView server (%s)\n", 
 			 view_host.fullHostname() );
-    fputs("No Data.\n",outfile);
-    exit(1);
+      fputs("No Data.\n",outfile);
+      exit(1);
   }
 
   view_host.startCommand(QueryType, &sock);
@@ -295,7 +303,8 @@ int main(int argc, char* argv[])
   sock.decode(); 
   while(1) {
     if (!sock.get(LinePtr,MaxLen)) {
-      fprintf(stderr, "failed to receive data from the CondorView server\n");
+      fprintf(stderr, "failed to receive data from the CondorView server %s\n",
+			view_host.fullHostname());
       if (LineCount==0) fputs("No Data.\n",outfile);
       exit(1);
     }
diff --git a/src/condor_tools/tool.cpp b/src/condor_tools/tool.cpp
index 7394625..29d24cc 100644
--- a/src/condor_tools/tool.cpp
+++ b/src/condor_tools/tool.cpp
@@ -1214,7 +1214,12 @@ resolveNames( DaemonList* daemon_list, StringList* name_list )
 						// should we print a warning?
 					continue;
 				}
-				if( ! stricmp(tmp, name) ) {
+				if( ! strchr(name, '@') ) {
+					host = get_host_part( tmp );
+				} else {
+					host = tmp;
+				}
+				if( ! stricmp(host, name) ) {
 					d = new Daemon( ad, real_dt, pool_addr );
 				}
 				free( tmp );
@@ -1246,12 +1251,20 @@ doCommand( Daemon* d )
 {
 	bool done = false;
 	int	my_cmd = real_cmd;
+	CondorError errstack;
+	bool error = true;
+	char* name;
+	bool is_local;
+	daemon_t d_type;
 
+	do {
 		// Grab some info about the daemon which is frequently used.
-	char* name = d->name();
-	daemon_t d_type = d->type();
-	bool is_local = d->isLocal();
-	CondorError errstack;
+		name = d->name();
+		d_type = d->type();
+		is_local = d->isLocal();
+		ReliSock sock;
+		done = false;
+		my_cmd = real_cmd;
 
 		// If we're trying to send either vacate or checkpoint we have
 		// two possible commands to send, the machine-wide version and
@@ -1262,14 +1275,14 @@ doCommand( Daemon* d )
 		// it's a local vacate, or if we only have a hostname but no
 		// "slotX@...", we want to send a machine-wide command, not the
 		// per-claim one.
-	bool is_per_claim_startd_cmd = false;
-	if( real_cmd == VACATE_CLAIM || real_cmd == PCKPT_JOB ) {
-		if( !all && d_type != DT_ANY && !is_local &&
-			(name && strchr(name, '@')) )
-		{
-			is_per_claim_startd_cmd = true;
+		bool is_per_claim_startd_cmd = false;
+		if( real_cmd == VACATE_CLAIM || real_cmd == PCKPT_JOB ) {
+			if( !all && d_type != DT_ANY && !is_local &&
+				(name && strchr(name, '@')) )
+			{
+				is_per_claim_startd_cmd = true;
+			}
 		}
-	}
 
 		// in general, we never want to send the same command to the
 		// same address.  the only exception is if we're doing a
@@ -1277,212 +1290,219 @@ doCommand( Daemon* d )
 		// the requests even though we're talking to the same address,
 		// since we'll send the claim-id after the command and it
 		// won't be duplication of effort.
-	if( ! is_per_claim_startd_cmd ) {
-		MyString hash_key = d->addr();
-		bool sent_it = false;
-		if( addresses_sent.lookup(hash_key, sent_it) >= 0 && sent_it ) {
+		if( ! is_per_claim_startd_cmd ) {
+			MyString hash_key = d->addr();
+			bool sent_it = false;
+			if( addresses_sent.lookup(hash_key, sent_it) >= 0 && sent_it ) {
+				return;
+			}
+			addresses_sent.insert( hash_key, true );
+		}
+
+			/* Squawking does its own connect... */
+		if( real_cmd == SQUAWK ) {
+			doSquawk( d->addr() );
+			printf ( "Bye!\n" );
 			return;
 		}
-		addresses_sent.insert( hash_key, true );
-	}
 
-		/* Squawking does its own connect... */
-	if( real_cmd == SQUAWK ) {
-		doSquawk( d->addr() );
-		printf ( "Bye!\n" );
-		return;
-	}
+		/* Connect to the daemon */
+		if( sock.connect(d->addr()) ) {
+			error = false;
+//			break;
+		} else {
+			continue;
+		}
 
-	/* Connect to the daemon */
-	ReliSock sock;
-	if( !sock.connect(d->addr()) ) {
-		fprintf( stderr, "Can't connect to %s\n", d->idStr() );
-		return;
-	}
+		char	*psubsys = const_cast<char *>(subsys);
+		switch(real_cmd) {
+		case VACATE_CLAIM:
+			if( is_per_claim_startd_cmd ) {
+					// we've got a specific slot, so send the claim after
+					// the command.
+				if( fast ) {
+					my_cmd = VACATE_CLAIM_FAST;
+				}
+				if (!d->startCommand(my_cmd, &sock, 0, &errstack)) {
+					fprintf(stderr, "ERROR\n%s\n", errstack.getFullText(true));
+				}
+				if( !sock.code(name) || !sock.eom() ) {
+					fprintf( stderr, "Can't send %s command to %s\n", 
+								 cmdToStr(my_cmd), d->idStr() );
+					return;
+				} else {
+					done = true;
+				}
+			} else {
+				if( fast ) {
+					my_cmd = VACATE_ALL_FAST;
+				} else {
+					my_cmd = VACATE_ALL_CLAIMS;
+				}
+			}
+			break;
 
-	char	*psubsys = const_cast<char *>(subsys);
-	switch(real_cmd) {
-	case VACATE_CLAIM:
-		if( is_per_claim_startd_cmd ) {
-				// we've got a specific slot, so send the claim after
-				// the command.
+		case PCKPT_JOB:
+			if( is_per_claim_startd_cmd ) {
+					// we've got a specific slot, so send the claim after
+					// the command.
+				if( !d->startCommand(my_cmd, &sock, 0, &errstack) ) {
+					fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true));
+				}
+				if( !sock.code(name) || !sock.eom() ) {
+					fprintf( stderr, "Can't send %s command to %s\n",
+								 cmdToStr(my_cmd), d->idStr() );
+					return;
+				} else {
+					done = true;
+				}
+			} else {
+				my_cmd = PCKPT_ALL_JOBS;
+			}
+			break;
+
+		case DAEMON_OFF:
+				// if -fast is used, we need to send a different command.
 			if( fast ) {
-				my_cmd = VACATE_CLAIM_FAST;
+				my_cmd = DAEMON_OFF_FAST;
+			} else if( peaceful_shutdown ) {
+				my_cmd = DAEMON_OFF_PEACEFUL;
 			}
-			if (!d->startCommand(my_cmd, &sock, 0, &errstack)) {
-				fprintf(stderr, "ERROR\n%s\n", errstack.getFullText(true));
+			if( !d->startCommand( my_cmd, &sock, 0, &errstack) ) {
+				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
 			}
-			if( !sock.code(name) || !sock.eom() ) {
-				fprintf( stderr, "Can't send %s command to %s\n", 
-							 cmdToStr(my_cmd), d->idStr() );
+			if( !sock.code( psubsys ) || !sock.eom() ) {
+				fprintf( stderr, "Can't send %s command to %s\n",
+							cmdToStr(my_cmd), d->idStr() );
 				return;
 			} else {
 				done = true;
 			}
-		} else {
-			if( fast ) {
-				my_cmd = VACATE_ALL_FAST;
-			} else {
-				my_cmd = VACATE_ALL_CLAIMS;
-			}
-		}
-		break;
+			break;
 
-	case PCKPT_JOB:
-		if( is_per_claim_startd_cmd ) {
-				// we've got a specific slot, so send the claim after
-				// the command.
+		case DAEMON_ON:
 			if( !d->startCommand(my_cmd, &sock, 0, &errstack) ) {
-				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true));
+				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
 			}
-			if( !sock.code(name) || !sock.eom() ) {
+			if( !sock.code( psubsys ) || !sock.eom() ) {
 				fprintf( stderr, "Can't send %s command to %s\n",
-							 cmdToStr(my_cmd), d->idStr() );
+						 cmdToStr(my_cmd), d->idStr() );
 				return;
 			} else {
 				done = true;
 			}
-		} else {
-			my_cmd = PCKPT_ALL_JOBS;
-		}
-		break;
-
-	case DAEMON_OFF:
-			// if -fast is used, we need to send a different command.
-		if( fast ) {
-			my_cmd = DAEMON_OFF_FAST;
-		} else if( peaceful_shutdown ) {
-			my_cmd = DAEMON_OFF_PEACEFUL;
-		}
-		if( !d->startCommand( my_cmd, &sock, 0, &errstack) ) {
-			fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
-		}
-		if( !sock.code( psubsys ) || !sock.eom() ) {
-			fprintf( stderr, "Can't send %s command to %s\n",
-						cmdToStr(my_cmd), d->idStr() );
-			return;
-		} else {
-			done = true;
-		}
-		break;
+			break;
 
-	case DAEMON_ON:
-		if( !d->startCommand(my_cmd, &sock, 0, &errstack) ) {
-			fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
-		}
-		if( !sock.code( psubsys ) || !sock.eom() ) {
-			fprintf( stderr, "Can't send %s command to %s\n",
-					 cmdToStr(my_cmd), d->idStr() );
-			return;
-		} else {
-			done = true;
-		}
-		break;
+		case RESTART:
+			if( peaceful_shutdown ) {
+				my_cmd = RESTART_PEACEFUL;
+			}
+			break;
 
-	case RESTART:
-		if( peaceful_shutdown ) {
-			my_cmd = RESTART_PEACEFUL;
-		}
-		break;
+		case DAEMONS_OFF:
+				// if -fast is used, we need to send a different command.
+			if( fast ) {
+				my_cmd = DAEMONS_OFF_FAST;
+			} else if( peaceful_shutdown ) {
+				my_cmd = DAEMONS_OFF_PEACEFUL;
+			}
+			if( d_type != DT_MASTER ) {
+ 					// if we're trying to send this to anything other than
+ 					// a master (for example, if we were just given a
+ 					// sinful string and we don't know the daemon type)
+ 					// we've got to send a different command. 
+				if( fast ) {
+					my_cmd = DC_OFF_FAST;
+				} else if( peaceful_shutdown ) {
+					my_cmd = DC_OFF_PEACEFUL;
+				} else {
+					my_cmd = DC_OFF_GRACEFUL;
+				}
+			}
+			break;
 
-	case DAEMONS_OFF:
-			// if -fast is used, we need to send a different command.
-		if( fast ) {
-			my_cmd = DAEMONS_OFF_FAST;
-		} else if( peaceful_shutdown ) {
-			my_cmd = DAEMONS_OFF_PEACEFUL;
-		}
-		if( d_type != DT_MASTER ) {
- 				// if we're trying to send this to anything other than
- 				// a master (for example, if we were just given a
- 				// sinful string and we don't know the daemon type)
- 				// we've got to send a different command. 
+		case DC_OFF_GRACEFUL:
+				// if -fast is used, we need to send a different command.
 			if( fast ) {
 				my_cmd = DC_OFF_FAST;
 			} else if( peaceful_shutdown ) {
 				my_cmd = DC_OFF_PEACEFUL;
-			} else {
-				my_cmd = DC_OFF_GRACEFUL;
 			}
-		}
-		break;
+			break;
 
-	case DC_OFF_GRACEFUL:
-			// if -fast is used, we need to send a different command.
-		if( fast ) {
-			my_cmd = DC_OFF_FAST;
-		} else if( peaceful_shutdown ) {
-			my_cmd = DC_OFF_PEACEFUL;
-		}
-		break;
+		case DC_RECONFIG:
+				// if -full is used, we need to send a different command.
+			if( full ) {
+				my_cmd = DC_RECONFIG_FULL;
+			}
+			break;
 
-	case DC_RECONFIG:
-			// if -full is used, we need to send a different command.
-		if( full ) {
-			my_cmd = DC_RECONFIG_FULL;
+		case SET_SHUTDOWN_PROGRAM:
+		{
+			char	*pexec = const_cast<char *>(exec_program); 
+			if( !d->startCommand(my_cmd, &sock, 0, &errstack) ) {
+				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
+			}
+			if( !sock.code( pexec ) || !sock.eom() ) {
+				fprintf( stderr, "Can't send %s command to %s\n",
+						 cmdToStr(my_cmd), d->idStr() );
+				return;
+			} else {
+				done = true;
+			}
+			break;
 		}
-		break;
 
-	case SET_SHUTDOWN_PROGRAM:
-	{
-		char	*pexec = const_cast<char *>(exec_program); 
-		if( !d->startCommand(my_cmd, &sock, 0, &errstack) ) {
-			fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
-		}
-		if( !sock.code( pexec ) || !sock.eom() ) {
-			fprintf( stderr, "Can't send %s command to %s\n",
-					 cmdToStr(my_cmd), d->idStr() );
-			return;
-		} else {
-			done = true;
+		default:
+			break;
 		}
-		break;
-	}
-
-	default:
-		break;
-	}
 
-	if( !done ) {
-		if( !d->sendCommand(my_cmd, &sock, 0, &errstack) ) {
-			fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
-			fprintf( stderr, "Can't send %s command to %s\n",
-						 cmdToStr(my_cmd), d->idStr() );
-			return;
+		if( !done ) {
+			if( !d->sendCommand(my_cmd, &sock, 0, &errstack) ) {
+				fprintf( stderr, "ERROR\n%s\n", errstack.getFullText(true) );
+				fprintf( stderr, "Can't send %s command to %s\n",
+							 cmdToStr(my_cmd), d->idStr() );
+				return;
+			}
 		}
-	}
 	
-		// for the purposes of reporting, if what we're trying to do
-		// is a restart, we want to print that here.  so, set my_cmd
-		// back to RESTART.
-	if( cmd == RESTART ) {
-		my_cmd = RESTART;
-	}
+			// for the purposes of reporting, if what we're trying to do
+			// is a restart, we want to print that here.  so, set my_cmd
+			// back to RESTART.
+		if( cmd == RESTART ) {
+			my_cmd = RESTART;
+		}
 
-		// now, print out the right thing depending on what we did
-	if( my_cmd == DAEMON_ON || my_cmd == DAEMON_OFF || 
-		my_cmd == DAEMON_OFF_FAST || 
-		((my_cmd == DC_OFF_GRACEFUL || my_cmd == DC_OFF_FAST) && 
-		 real_dt == DT_MASTER) )
-	{
-		if( d_type == DT_ANY ) {
-			printf( "Sent \"%s\" command to %s\n",
-					cmdToStr(my_cmd), d->idStr() );
+			// now, print out the right thing depending on what we did
+		if( my_cmd == DAEMON_ON || my_cmd == DAEMON_OFF || 
+			my_cmd == DAEMON_OFF_FAST || 
+			((my_cmd == DC_OFF_GRACEFUL || my_cmd == DC_OFF_FAST) && 
+			 real_dt == DT_MASTER) )
+		{
+			if( d_type == DT_ANY ) {
+				printf( "Sent \"%s\" command to %s\n",
+						cmdToStr(my_cmd), d->idStr() );
+			} else {
+				printf( "Sent \"%s\" command for \"%s\" to %s\n",
+						cmdToStr(my_cmd), 
+						subsys_arg ? subsys_arg : daemonString(dt),
+						d->idStr() );
+			}
+		} else if( d_type == DT_STARTD && all ) {
+				// we want to special case printing about this, since
+				// we're doing a machine-wide command...
+			printf( "Sent \"%s\" command to startd %s\n", cmdToStr(my_cmd),
+					d->fullHostname() );
+		} else if( cmd_set ) {
+			printf( "Sent command \"%d\" to %s\n", my_cmd, d->idStr() );
 		} else {
-			printf( "Sent \"%s\" command for \"%s\" to %s\n",
-					cmdToStr(my_cmd), 
-					subsys_arg ? subsys_arg : daemonString(dt),
-					d->idStr() );
+			printf( "Sent \"%s\" command to %s\n", cmdToStr(my_cmd), d->idStr() );
 		}
-	} else if( d_type == DT_STARTD && all ) {
-			// we want to special case printing about this, since
-			// we're doing a machine-wide command...
-		printf( "Sent \"%s\" command to startd %s\n", cmdToStr(my_cmd),
-				d->fullHostname() );
-	} else if( cmd_set ) {
-		printf( "Sent command \"%d\" to %s\n", my_cmd, d->idStr() );
-	} else {
-		printf( "Sent \"%s\" command to %s\n", cmdToStr(my_cmd), d->idStr() );
+		sock.close();
+	} while(d->nextValidCm() == true);
+	if( error == true ) {
+		fprintf( stderr, "Can't connect to %s\n", d->idStr() );
+		return;
 	}
 }
 
