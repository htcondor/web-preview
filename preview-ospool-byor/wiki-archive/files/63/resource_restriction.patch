diff --git a/src/condor_examples/condor_limits_wrapper.sh b/src/condor_examples/condor_limits_wrapper.sh
new file mode 100755
index 0000000..25948b2
--- /dev/null
+++ b/src/condor_examples/condor_limits_wrapper.sh
@@ -0,0 +1,43 @@
+#!/bin/sh
+# Copyright 2008 Red Hat, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+if [[ $_CONDOR_MACHINE_AD != "" ]]; then
+   mem_limit=$((`egrep '^Memory' $_CONDOR_MACHINE_AD | cut -d ' ' -f 3` * 1024))
+#   block_size=$((`stat -f -c %s .` / 1024))
+#   disk_limit=$((`egrep '^Disk' $_CONDOR_MACHINE_AD | cut -d ' ' -f 3` / $block_size))
+   disk_limit=`egrep '^Disk' $_CONDOR_MACHINE_AD | cut -d ' ' -f 3`
+   vm_limit=`egrep '^VirtualMemory' $_CONDOR_MACHINE_AD | cut -d ' ' -f 3`
+
+   ulimit -d $mem_limit
+   if [[ $? != 0 ]] || [[ $mem_limit = "" ]]; then
+      echo "Failed to set Memory Resource Limit" > $_CONDOR_WRAPPER_ERROR_FILE
+      exit 1
+   fi
+   ulimit -f $disk_limit
+   if [[ $? != 0 ]] || [[ $disk_limit = "" ]]; then
+      echo "Failed to set Disk Resource Limit" > $_CONDOR_WRAPPER_ERROR_FILE
+      exit 1
+   fi
+   ulimit -v $vm_limit
+   if [[ $? != 0 ]] || [[ $vm_limit = "" ]]; then
+      echo "Failed to set Virtual Memory Resource Limit" > $_CONDOR_WRAPPER_ERROR_FILE
+      exit 1
+   fi
+fi
+
+exec "$@"
+error=$?
+echo "Failed to exec($error): $@" > $_CONDOR_WRAPPER_ERROR_FILE
+exit 1
diff --git a/src/condor_startd.V6/Starter.cpp b/src/condor_startd.V6/Starter.cpp
index c5207ed..3688533 100644
--- a/src/condor_startd.V6/Starter.cpp
+++ b/src/condor_startd.V6/Starter.cpp
@@ -818,6 +818,9 @@ Starter::execDCStarter( ArgList const &args, Env const *env,
 	}
 	inherit_list[0] = &child_job_update_sock;
 
+	// Pass the machine ad to the starter
+	s_claim->writeMachAd( s_job_update_sock );
+
 	if( daemonCore->Register_Socket(
 			s_job_update_sock,
 			"starter ClassAd update socket",
diff --git a/src/condor_startd.V6/Starter.h b/src/condor_startd.V6/Starter.h
index aaae368..7fec158 100644
--- a/src/condor_startd.V6/Starter.h
+++ b/src/condor_startd.V6/Starter.h
@@ -107,6 +107,7 @@ private:
 	int		execDCStarter( Stream* s );
 	int		execDCStarter( ArgList const &args, Env const *env, 
 						   int std_fds[], Stream* s );
+//	void	writeMachAdToFile( void );
 #if HAVE_BOINC
 	int 	execBOINCStarter( void );
 #endif /* HAVE_BOINC */
diff --git a/src/condor_startd.V6/claim.cpp b/src/condor_startd.V6/claim.cpp
index ac5b4cf..74235a9 100644
--- a/src/condor_startd.V6/claim.cpp
+++ b/src/condor_startd.V6/claim.cpp
@@ -1921,6 +1921,18 @@ Claim::writeJobAd( int pipe_end )
 	return true;
 }
 
+bool
+Claim::writeMachAd( Stream* stream )
+{
+	dprintf(D_FULLDEBUG | D_JOB, "Sending Machine Ad to Starter\n");
+	c_rip->r_classad->dPrint(D_JOB);
+	if (!c_rip->r_classad->put(*stream) || !stream->end_of_message()) {
+		dprintf(D_ALWAYS, "writeMachAd: Failed to write machine ClassAd to stream\n");
+		return false;
+	}
+	return true;
+}
+
 ///////////////////////////////////////////////////////////////////////////
 // Client
 ///////////////////////////////////////////////////////////////////////////
diff --git a/src/condor_startd.V6/claim.h b/src/condor_startd.V6/claim.h
index 85a00db..35266b7 100644
--- a/src/condor_startd.V6/claim.h
+++ b/src/condor_startd.V6/claim.h
@@ -264,6 +264,10 @@ public:
 		*/
 	bool writeJobAd( int fd );
 
+		/** Write out the machine ClassAd to the provided stream
+ 		*/
+	bool writeMachAd( Stream *stream );
+
 	void receiveJobClassAdUpdate( ClassAd &update_ad );
 
 		// registered callback for premature closure of connection from
@@ -313,6 +317,7 @@ private:
 	int			c_aliveint;		// Alive interval for this claim
 
 	char*		c_cod_keyword;	// COD keyword for this claim, if any
+	char*		c_mach_filename;
 	int			c_has_job_ad;	// Do we have a job ad for the COD claim?
 
 	ClaimState	c_state;		// the state of this claim
diff --git a/src/condor_starter.V6.1/jic_local.cpp b/src/condor_starter.V6.1/jic_local.cpp
index b28857a..b000903 100644
--- a/src/condor_starter.V6.1/jic_local.cpp
+++ b/src/condor_starter.V6.1/jic_local.cpp
@@ -112,7 +112,7 @@ JICLocal::init( void )
 void
 JICLocal::config( void ) 
 { 
-		// nothing to look up just for JICLocal
+	// Nothing for us to do
 }
 
 
diff --git a/src/condor_starter.V6.1/jic_local_config.cpp b/src/condor_starter.V6.1/jic_local_config.cpp
index f6058a3..0f62e67 100644
--- a/src/condor_starter.V6.1/jic_local_config.cpp
+++ b/src/condor_starter.V6.1/jic_local_config.cpp
@@ -40,6 +40,7 @@ JICLocalConfig::JICLocalConfig( const char* keyword, int cluster,
 	job_proc = proc;
 	job_subproc = subproc;
 	job_ad = new ClassAd();
+	mach_ad = new ClassAd();
 }
 
 
@@ -53,6 +54,7 @@ JICLocalConfig::JICLocalConfig( int cluster, int proc, int subproc )
 	job_proc = proc;
 	job_subproc = subproc;
 	job_ad = new ClassAd();
+	mach_ad = new ClassAd();
 }
 
 
diff --git a/src/condor_starter.V6.1/jic_local_file.cpp b/src/condor_starter.V6.1/jic_local_file.cpp
index 32bf160..511ea53 100644
--- a/src/condor_starter.V6.1/jic_local_file.cpp
+++ b/src/condor_starter.V6.1/jic_local_file.cpp
@@ -27,42 +27,41 @@
 #include "jic_local_file.h"
 
 
-JICLocalFile::JICLocalFile( const char* classad_filename, 
+JICLocalFile::JICLocalFile( const char* classad_filename,
 							const char* keyword, 
 							int cluster, int proc, int subproc )
 	: JICLocalConfig( keyword, cluster, proc, subproc )
 {
-	initFilename( classad_filename );
+	initFilenames( classad_filename );
 }
 
 
-JICLocalFile::JICLocalFile( const char* classad_filename, 
-							int cluster, int proc, int subproc )
+JICLocalFile::JICLocalFile( const char* classad_filename, int cluster, int proc, int subproc )
 	: JICLocalConfig( cluster, proc, subproc )
 {
-	initFilename( classad_filename );
+	initFilenames( classad_filename );
 }
 
 
 JICLocalFile::~JICLocalFile()
 {
-	if( filename ) {
-		free( filename );
+	if( job_filename ) {
+		free( job_filename );
 	}
 }
 
 
 void
-JICLocalFile::initFilename( const char* path )
+JICLocalFile::initFilenames( const char* jobad_path )
 {
-	if( ! path ) {
+	if( ! jobad_path ) {
 		EXCEPT( "Can't instantiate a JICLocalFile without a filename!" );
 	}
-	if( path[0] == '-' && path[1] == '\0' ) {
+	if( jobad_path[0] == '-' && jobad_path[1] == '\0' ) {
 			// special case, treat '-' as STDIN
-		filename = NULL;
+		job_filename = NULL;
 	} else {
-		filename = strdup( path );
+		job_filename = strdup( jobad_path );
 	}
 }
 
@@ -71,12 +70,12 @@ bool
 JICLocalFile::getLocalJobAd( void )
 { 
 	bool found_some = false;
-	dprintf( D_ALWAYS, "Reading job ClassAd from \"%s\"\n", fileName() );
+	dprintf( D_ALWAYS, "Reading job ClassAd from \"%s\"\n", jobAdFileName() );
 
-	if( ! readClassAdFromFile() ) {
-		dprintf( D_ALWAYS, "No ClassAd data in \"%s\"\n", fileName() );
+	if( ! readClassAdFromFile( job_filename, job_ad ) ) {
+		dprintf( D_ALWAYS, "No ClassAd data in \"%s\"\n", jobAdFileName() );
 	} else { 
-		dprintf( D_ALWAYS, "Found ClassAd data in \"%s\"\n", fileName() );
+		dprintf( D_ALWAYS, "Found ClassAd data in \"%s\"\n", jobAdFileName() );
 		found_some = true;
 	}
 
@@ -102,17 +101,17 @@ JICLocalFile::getLocalJobAd( void )
 
 
 char*
-JICLocalFile::fileName( void )
+JICLocalFile::jobAdFileName( void )
 {
-	if( filename ) {
-		return filename;
+	if( job_filename ) {
+		return job_filename;
 	}
 	return "STDIN";
 } 
 
 
 bool
-JICLocalFile::readClassAdFromFile( void ) 
+JICLocalFile::readClassAdFromFile( char* filename, ClassAd* ad ) 
 {
 	bool read_something = false;
 	bool needs_close = true;
@@ -147,7 +146,7 @@ JICLocalFile::readClassAdFromFile( void )
 		if( DebugFlags & D_JOB ) {
 			dprintf( D_JOB, "FILE: %s\n", line.Value() );
 		} 
-        if( ! job_ad->Insert(line.Value()) ) {
+        if( ! ad->Insert(line.Value()) ) {
             dprintf( D_ALWAYS, "Failed to insert \"%s\" into ClassAd, "
                      "ignoring this line\n", line.Value() );
         }
diff --git a/src/condor_starter.V6.1/jic_local_file.h b/src/condor_starter.V6.1/jic_local_file.h
index 9a36992..7b956be 100644
--- a/src/condor_starter.V6.1/jic_local_file.h
+++ b/src/condor_starter.V6.1/jic_local_file.h
@@ -46,8 +46,8 @@ public:
 			@proc Proc ID number (if any)
 			@subproc Subproc ID number (if any)
 		*/
-	JICLocalFile( const char* classad_filename, const char* keyword,
-				  int cluster, int proc, int subproc );
+	JICLocalFile( const char* classad_filename,
+				  const char* keyword, int cluster, int proc, int subproc );
 
 		/// Constructor without a keyword on the command-line
 	JICLocalFile( const char* classad_filename,
@@ -69,7 +69,7 @@ public:
 		*/
 	bool getLocalJobAd( void );
 
-	char* fileName( void );
+	char* jobAdFileName( void );
 
 protected:
 
@@ -79,20 +79,23 @@ protected:
 	virtual bool getUniverse( void );
 
 		/** Private helper to actually read the file and try to insert
-			it into our job ClassAd.
+			it into the passed ClassAd.
 		*/
-	bool readClassAdFromFile( void );
+	bool readClassAdFromFile( char* filename, ClassAd* ad );
 
-		/** Private helper to initialize our filename data member.
-			we use this since we have two constructors, both of which
-			need to do the same thing with this info.
+
+		/** Private helper to initialize our job_filename
+			data member.  We use this since we have two
+			constructors, both of which need to do the same thing
+			with this info.
 		*/
-	void initFilename( const char* path );
+	void initFilenames( const char* jobad_path );
 
 		/** The full path to the file we get our ClassAd from (or "-"
 			if we're reading it from STDIN).
 		*/
-	char* filename;
+	char* job_filename;
+
 };
 
 
diff --git a/src/condor_starter.V6.1/jic_local_schedd.cpp b/src/condor_starter.V6.1/jic_local_schedd.cpp
index f4d108b..cadf4c8 100644
--- a/src/condor_starter.V6.1/jic_local_schedd.cpp
+++ b/src/condor_starter.V6.1/jic_local_schedd.cpp
@@ -36,7 +36,7 @@
 extern CStarter *Starter;
 
 
-JICLocalSchedd::JICLocalSchedd( const char* classad_filename, 
+JICLocalSchedd::JICLocalSchedd( const char* classad_filename,
 								const char* schedd_address, 
 								int cluster, int proc, int subproc )
 	: JICLocalFile( classad_filename, cluster, proc, subproc )
diff --git a/src/condor_starter.V6.1/jic_shadow.cpp b/src/condor_starter.V6.1/jic_shadow.cpp
index 03a005c..c60d46f 100644
--- a/src/condor_starter.V6.1/jic_shadow.cpp
+++ b/src/condor_starter.V6.1/jic_shadow.cpp
@@ -44,6 +44,8 @@
 
 extern CStarter *Starter;
 ReliSock *syscall_sock = NULL;
+extern const char* JOB_AD_FILENAME;
+extern const char* MACHINE_AD_FILENAME;
 
 // Filenames are case insensitive on Win32, but case sensitive on Unix
 #ifdef WIN32
@@ -141,6 +143,11 @@ JICShadow::init( void )
 		return false;
 	}
 
+	if ( m_job_startd_update_sock )
+	{
+		receiveMachineAd(m_job_startd_update_sock);
+	}
+
 		// stash a copy of the unmodified job ad in case we decide
 		// below that we want to write out an execution visa
 	ClassAd orig_ad = *job_ad;	
@@ -389,6 +396,11 @@ JICShadow::transferOutput( void )
 		while ((filename = m_removed_output_files.next()) != NULL) {
 			filetrans->addFileToExeptionList(filename);
 		}
+
+		// remove the job and machine classad files from the
+		// ft list
+		filetrans->addFileToExeptionList(JOB_AD_FILENAME);
+		filetrans->addFileToExeptionList(MACHINE_AD_FILENAME);
 	
 			// true if job exited on its own
 		bool final_transfer = (requested_exit == false);	
@@ -2066,3 +2078,27 @@ JICShadow::initMatchSecuritySession()
 		}
 	}
 }
+
+bool
+JICShadow::receiveMachineAd( Stream *stream )
+{
+        bool ret_val = true;
+
+	dprintf(D_FULLDEBUG, "Entering JICShadow::receiveMachineAd\n");
+	mach_ad = new ClassAd();
+
+	stream->decode();
+	if (!mach_ad->initFromStream(*stream))
+	{
+		dprintf(D_ALWAYS, "Received invalid machine ad.  Discarding\n");
+		delete mach_ad;
+		mach_ad = NULL;
+		ret_val = false;
+	}
+	else
+	{
+		mach_ad->dPrint(D_JOB);
+	}
+
+	return ret_val;
+}
diff --git a/src/condor_starter.V6.1/jic_shadow.h b/src/condor_starter.V6.1/jic_shadow.h
index c5d12da..29ba14c 100644
--- a/src/condor_starter.V6.1/jic_shadow.h
+++ b/src/condor_starter.V6.1/jic_shadow.h
@@ -244,6 +244,9 @@ private:
 		/// Do the RSC to get the job classad from the shadow
 	bool getJobAdFromShadow( void );
 
+		/// Get the machine classad from the given stream
+	bool receiveMachineAd( Stream *stream );
+
 		/** Initialize information about the shadow's version and
 			sinful string from the given ClassAd.  At startup, we just
 			pass the job ad, since that should have everything in it.
diff --git a/src/condor_starter.V6.1/job_info_communicator.cpp b/src/condor_starter.V6.1/job_info_communicator.cpp
index 93fbb83..f0084cc 100644
--- a/src/condor_starter.V6.1/job_info_communicator.cpp
+++ b/src/condor_starter.V6.1/job_info_communicator.cpp
@@ -39,6 +39,7 @@ extern CStarter *Starter;
 JobInfoCommunicator::JobInfoCommunicator()
 {
 	job_ad = NULL;
+	mach_ad = NULL;
 	job_universe = CONDOR_UNIVERSE_VANILLA;
 	job_cluster = -1;
 	job_proc = -1;
@@ -63,6 +64,7 @@ JobInfoCommunicator::JobInfoCommunicator()
 #endif
 	m_periodic_job_update_tid = -1;
 	m_allJobsDone_finished = false;
+	m_enforce_limits = false;
 }
 
 
@@ -71,6 +73,9 @@ JobInfoCommunicator::~JobInfoCommunicator()
 	if( job_ad ) {
 		delete job_ad;
 	}
+	if( mach_ad ) {
+		delete mach_ad;
+	}
 	if( u_log ) {
 		delete u_log;
 	}
@@ -215,6 +220,13 @@ JobInfoCommunicator::jobClassAd( void )
 }
 
 
+ClassAd*
+JobInfoCommunicator::machClassAd( void )
+{
+	return mach_ad;
+}
+
+
 int
 JobInfoCommunicator::jobUniverse( void )
 {
diff --git a/src/condor_starter.V6.1/job_info_communicator.h b/src/condor_starter.V6.1/job_info_communicator.h
index 7a86f0c..ebb6a73 100644
--- a/src/condor_starter.V6.1/job_info_communicator.h
+++ b/src/condor_starter.V6.1/job_info_communicator.h
@@ -143,6 +143,9 @@ public:
 		/// Return a pointer to the ClassAd for our job.
 	virtual ClassAd* jobClassAd( void );
 
+		/// Return a pointer to the ClassAd for the machine.
+	virtual ClassAd* machClassAd( void );
+
 		/// Return the job's universe integer.
 	int jobUniverse( void );
 
@@ -347,7 +350,6 @@ public:
 		/* Update Job ClassAd with checkpoint info and log it */
 	virtual void updateCkptInfo(void) {};
 
-
 protected:
 
 		// // // // // // // // // // // //
@@ -461,6 +463,9 @@ protected:
 		/// The ClassAd for our job.  We control the memory for this.
 	ClassAd* job_ad;
 
+		// The Machine ClassAd running the job.
+	ClassAd* mach_ad;
+
 		/// The universe of the job.
 	int job_universe;
 
@@ -487,6 +492,8 @@ protected:
 	StarterHookMgr* m_hook_mgr;
 #endif /* HAVE_JOB_HOOKS */
 
+	bool m_enforce_limits;
+
 private:
 		/// Start a timer for the periodic job updates
 	void startUpdateTimer( void );
diff --git a/src/condor_starter.V6.1/os_proc.cpp b/src/condor_starter.V6.1/os_proc.cpp
index 1a38d1b..577d1ed 100644
--- a/src/condor_starter.V6.1/os_proc.cpp
+++ b/src/condor_starter.V6.1/os_proc.cpp
@@ -43,6 +43,10 @@
 #endif
 
 extern CStarter *Starter;
+extern const char* JOB_WRAPPER_FAILURE_FILE;
+
+const char* JOB_AD_FILENAME = ".job.ad";
+const char* MACHINE_AD_FILENAME = ".machine.ad";
 
 
 /* OsProc class implementation */
@@ -350,11 +354,41 @@ OsProc::StartJob(FamilyInfo* family_info)
 			// it, if they need to.
 		dprintf( D_ALWAYS, "Using wrapper %s to exec %s\n", JobName.Value(), 
 				 args_string.Value() );
+
+		MyString wrapper_err;
+		wrapper_err.sprintf("%s%c%s", Starter->GetWorkingDir(),
+				 	DIR_DELIM_CHAR,
+					JOB_WRAPPER_FAILURE_FILE);
+		if( ! job_env.SetEnv("_CONDOR_WRAPPER_ERROR_FILE", wrapper_err.Value()) ) {
+			dprintf( D_ALWAYS, "Failed to set _CONDOR_WRAPPER_ERROR_FILE environment variable\n");
+		}
 	} else {
 		dprintf( D_ALWAYS, "About to exec %s %s\n", JobName.Value(),
 				 args_string.Value() );
 	}
 
+	// Write the job and machine ClassAds to the execute directory
+	if ( ! WriteAdsToExeDir() ) {
+		dprintf ( D_ALWAYS, "OsProc::StartJob(): Failed to "
+			"write classad files.\n" );
+	}
+	else {
+		MyString path;
+		path.sprintf("%s%c%s", Starter->GetWorkingDir(),
+				 	DIR_DELIM_CHAR,
+					MACHINE_AD_FILENAME);
+		if( ! job_env.SetEnv("_CONDOR_MACHINE_AD", path.Value()) ) {
+			dprintf( D_ALWAYS, "Failed to set _CONDOR_MACHINE_AD environment variable\n");
+		}
+
+		path.sprintf("%s%c%s", Starter->GetWorkingDir(),
+				 	DIR_DELIM_CHAR,
+					JOB_AD_FILENAME);
+		if( ! job_env.SetEnv("_CONDOR_JOB_AD", path.Value()) ) {
+			dprintf( D_ALWAYS, "Failed to set _CONDOR_JOB_AD environment variable\n");
+		}
+	}
+
 		// Grab the full environment back out of the Env object 
 	if(DebugFlags & D_FULLDEBUG) {
 		MyString env_string;
@@ -844,3 +878,54 @@ OsProc::makeCpuAffinityMask(int slotId) {
 
 	return mask;
 }
+
+bool
+OsProc::WriteAdsToExeDir()
+{
+	ClassAd* ad;
+	const char* dir = Starter->GetWorkingDir();
+	MyString ad_str, filename;
+	FILE* fp;
+	bool ret_val = true;
+
+	// Write the job ad first
+	ad = Starter->jic->jobClassAd();
+	if (ad != NULL)
+	{
+		filename.sprintf("%s%c%s", dir, DIR_DELIM_CHAR, JOB_AD_FILENAME);
+		fp = safe_fopen_wrapper(filename.Value(), "w");
+		if (!fp)
+		{
+			dprintf(D_ALWAYS, "Failed to open \"%s\" for to write job ad: "
+						"%s (errno %d)\n", filename.Value(),
+						strerror(errno), errno);
+			ret_val = false;
+		}
+		ad->fPrint(fp);
+		fclose(fp);
+	}
+	else
+	{
+		// If there is no job ad, this is a problem
+		ret_val = false;
+	}
+
+	// Write the machine ad
+	ad = Starter->jic->machClassAd();
+	if (ad != NULL)
+	{
+		filename.sprintf("%s%c%s", dir, DIR_DELIM_CHAR, MACHINE_AD_FILENAME);
+		fp = safe_fopen_wrapper(filename.Value(), "w");
+		if (!fp)
+		{
+			dprintf(D_ALWAYS, "Failed to open \"%s\" for to write machine "
+						"ad: %s (errno %d)\n", filename.Value(),
+					strerror(errno), errno);
+			ret_val = false;
+		}
+		ad->fPrint(fp);
+		fclose(fp);
+	}
+
+	return ret_val;
+}
diff --git a/src/condor_starter.V6.1/os_proc.h b/src/condor_starter.V6.1/os_proc.h
index 18a200d..009d880 100644
--- a/src/condor_starter.V6.1/os_proc.h
+++ b/src/condor_starter.V6.1/os_proc.h
@@ -101,6 +101,8 @@ public:
 
 	int *makeCpuAffinityMask(int slotId);
 
+	bool WriteAdsToExeDir();
+
 protected:
 
 	bool is_suspended;
diff --git a/src/condor_starter.V6.1/user_proc.cpp b/src/condor_starter.V6.1/user_proc.cpp
index 494afe0..f93d2b3 100644
--- a/src/condor_starter.V6.1/user_proc.cpp
+++ b/src/condor_starter.V6.1/user_proc.cpp
@@ -30,6 +30,7 @@
 
 extern CStarter *Starter;
 
+const char* JOB_WRAPPER_FAILURE_FILE = ".job_wrapper_failure";
 
 /* UserProc class implementation */
 
@@ -104,6 +105,34 @@ UserProc::initKillSigs( void )
 bool
 UserProc::JobReaper(int pid, int status)
 {
+	MyString line;
+	MyString error_txt;
+	MyString filename;
+	const char* dir = Starter->GetWorkingDir();
+	FILE* fp;
+
+	filename.sprintf("%s%c%s", dir, DIR_DELIM_CHAR, JOB_WRAPPER_FAILURE_FILE);
+	if (0 == access(filename.Value(), F_OK)) {
+		// The job wrapper failed, so read the contents of the file
+		// and EXCEPT, just as is done when an executable is unable
+		// to be run.  Ideally, both failure cases would propagate
+		// into the job ad
+		fp = safe_fopen_wrapper(filename.Value(), "r");
+		if (!fp) {
+			dprintf(D_ALWAYS, "Unable to open \"%s\" for reading: "
+					"%s (errno %d)\n", filename.Value(),
+					strerror(errno), errno);
+		} else {
+			while (line.readLine(fp))
+			{
+				error_txt += line;
+			}
+			fclose(fp);
+		}
+		error_txt.trim();
+		EXCEPT("The job wrapper failed to execute the job: %s", error_txt.Value());
+	}
+
 	if (JobPid == pid) {
 		m_proc_exited = true;
 		exit_status = status;
diff --git a/src/condor_submit.V6/submit.cpp b/src/condor_submit.V6/submit.cpp
index 2eaac52..98f3b38 100644
--- a/src/condor_submit.V6/submit.cpp
+++ b/src/condor_submit.V6/submit.cpp
@@ -326,6 +326,8 @@ const char    *ParallelScriptStarter = "parallel_script_starter";
 
 const char    *MaxJobRetirementTime = "max_job_retirement_time";
 
+const char    *JobWantsAds = "want_ads";
+
 //
 // Job Deferral Parameters
 //
@@ -7457,7 +7459,6 @@ void SetVMRequirements()
 	InsertJobExpr (buffer);
 }
 
-
 void
 SetConcurrencyLimits()
 {
