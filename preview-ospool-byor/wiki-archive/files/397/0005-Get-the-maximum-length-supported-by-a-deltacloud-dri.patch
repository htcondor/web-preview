From b56e80498ea6655976ebe4043cfcda4b765dfc1a Mon Sep 17 00:00:00 2001
From: Chris Lalancette <clalance@redhat.com>
Date: Thu, 2 Jun 2011 18:04:37 -0400
Subject: [PATCH 05/13] Get the maximum length supported by a deltacloud
 driver

In order to make the best decision about how to name an
instance, we need to know the maximum length supported
by a deltacloud driver.  This patch sets up gridmanager
to ask the deltacloud GAHP what that maximum is.  Once it
finds out the maximum, it passes that along to
build_instance_name, which will truncate the UUID as
necessary.

Signed-off-by: Chris Lalancette <clalance@redhat.com>
---
 src/condor_gridmanager/dcloudjob.cpp   |   35 ++++++++++++-
 src/condor_gridmanager/dcloudjob.h     |    2 +-
 src/condor_gridmanager/gahp-client.cpp |   85 ++++++++++++++++++++++++++++++++
 src/condor_gridmanager/gahp-client.h   |    6 ++
 4 files changed, 125 insertions(+), 3 deletions(-)

diff --git a/src/condor_gridmanager/dcloudjob.cpp b/src/condor_gridmanager/dcloudjob.cpp
index dcfb249..a47867a 100644
--- a/src/condor_gridmanager/dcloudjob.cpp
+++ b/src/condor_gridmanager/dcloudjob.cpp
@@ -450,7 +450,30 @@ void DCloudJob::doEvaluateState()
 				}
 
 				if ( m_instanceName == NULL || strcmp(m_instanceName, "NULL") == 0) {
-					SetInstanceName( build_instance_name().Value() );
+					// start with the assumption that the maximum name length
+					// is 1024.  If the provider doesn't specify otherwise,
+					// this is long enough
+					int max_length = 1024;
+
+					rc = gahp->dcloud_get_max_name_length( m_serviceUrl,
+														   m_username,
+														   m_password,
+														   &max_length);
+
+					if ( rc == GAHPCLIENT_COMMAND_NOT_SUBMITTED ||
+						 rc == GAHPCLIENT_COMMAND_PENDING )
+						break;
+
+					if ( rc != 0 ) {
+						errorString = gahp->getErrorString();
+						dprintf(D_ALWAYS,"(%d.%d) Maximum name length failed: %s\n",
+								procID.cluster, procID.proc,
+								errorString.Value() );
+						gmState = GM_HOLD;
+						break;
+					}
+
+					SetInstanceName( build_instance_name( max_length ).Value() );
 				}
 				jobAd->GetDirtyFlag( ATTR_GRID_JOB_ID, &attr_exists, &attr_dirty );
 				if ( attr_exists && attr_dirty ) {
@@ -1021,7 +1044,7 @@ void DCloudJob::StatusUpdate( const char *new_status )
 	}
 }
 
-MyString DCloudJob::build_instance_name()
+MyString DCloudJob::build_instance_name( int max_length )
 {
 	// Build a name that will be unique to this job.
 	// We use a generated UUID
@@ -1036,5 +1059,13 @@ MyString DCloudJob::build_instance_name()
 
 	uuid_unparse(uuid, instance_name);
 
+	if (max_length < 36) {
+		// if the maximum length we can generate is less than 36
+		// characters, we have to truncate the UUID.  There's not much
+		// we can do to improve the uniqueness, so just lop off
+		// some bytes
+		instance_name[max_length] = '\0';
+	}
+
 	return instance_name;
 }
diff --git a/src/condor_gridmanager/dcloudjob.h b/src/condor_gridmanager/dcloudjob.h
index 7c6493f..4e2031c 100644
--- a/src/condor_gridmanager/dcloudjob.h
+++ b/src/condor_gridmanager/dcloudjob.h
@@ -100,7 +100,7 @@ private:
 	char *m_userdata;
 
 	void ProcessInstanceAttrs( StringList &attrs );
-	MyString build_instance_name();
+	MyString build_instance_name( int max_length );
 };
 
 #endif
diff --git a/src/condor_gridmanager/gahp-client.cpp b/src/condor_gridmanager/gahp-client.cpp
index cc6c150..c399292 100644
--- a/src/condor_gridmanager/gahp-client.cpp
+++ b/src/condor_gridmanager/gahp-client.cpp
@@ -8411,3 +8411,88 @@ int GahpClient::dcloud_find( const char *service_url,
 	return GAHPCLIENT_COMMAND_PENDING;	
 }
 
+int GahpClient::dcloud_get_max_name_length( const char *service_url,
+											const char *username,
+											const char *password,
+											int *max_length )
+{
+	// DELTACLOUD_GET_MAX_NAME_LENGTH <req_id> <serviceurl> <username> <password>
+	static const char* command = "DELTACLOUD_GET_MAX_NAME_LENGTH";
+
+	// check if this command is supported
+	if ( server->m_commands_supported->contains_anycase( command ) == FALSE ) {
+		return GAHPCLIENT_COMMAND_NOT_SUPPORTED;
+	}
+
+	// Generate request line
+	if ( !service_url ) service_url = NULLSTRING;
+	if ( !username ) username = NULLSTRING;
+	if ( !password ) password = NULLSTRING;
+
+	MyString reqline;
+
+	char* esc1 = strdup( escapeGahpString(service_url) );
+	char* esc2 = strdup( escapeGahpString(username) );
+	char* esc3 = strdup( escapeGahpString(password) );
+
+	bool x = reqline.sprintf("%s %s %s", esc1, esc2, esc3);
+
+	free( esc1 );
+	free( esc2 );
+	free( esc3 );
+	ASSERT( x == true );
+
+	const char *buf = reqline.Value();
+	// Check if this request is currently pending. If not, make it the pending request.
+	if ( !is_pending(command,buf) ) {
+		// Command is not pending, so go ahead and submit a new one if our command mode permits.
+		if ( m_mode == results_only ) {
+			return GAHPCLIENT_COMMAND_NOT_SUBMITTED;
+		}
+		now_pending(command, buf, deleg_proxy);
+	}
+
+	// If we made it here, command is pending.
+
+	// Check first if command completed.
+	Gahp_Args* result = get_pending_result(command, buf);
+
+	// we expect one of the following return:
+	//   req_id NULL <max_length>
+	//   req_id NULL NULL
+	//   req_id <error message>
+
+	if ( result ) {
+		// command completed.
+		int rc = 0;
+		if ( result->argc < 2 || result->argc > 3 ) {
+			EXCEPT( "Bad %s result", command );
+		} else if ( result->argc == 2 ) {
+			if ( !strcmp( result->argv[1], NULLSTRING ) ) {
+				EXCEPT( "Bad %s result", command );
+			}
+			error_string = result->argv[1];
+			rc = 1;
+		} else {
+			if ( strcmp( result->argv[1], NULLSTRING ) ) {
+				EXCEPT( "Bad %s result", command );
+			}
+			if ( strcmp( result->argv[2], NULLSTRING ) )
+				*max_length = atoi( result->argv[2] );
+		}
+
+		delete result;
+		return rc;
+	}
+
+	// Now check if pending command timed out.
+	if ( check_pending_timeout(command, buf) )
+	{
+		// pending command timed out.
+		sprintf( error_string, "%s timed out", command );
+		return GAHPCLIENT_COMMAND_TIMED_OUT;
+	}
+
+	// If we made it here, command is still pending...
+	return GAHPCLIENT_COMMAND_PENDING;
+}
diff --git a/src/condor_gridmanager/gahp-client.h b/src/condor_gridmanager/gahp-client.h
index 44d0206..10ab0bd 100644
--- a/src/condor_gridmanager/gahp-client.h
+++ b/src/condor_gridmanager/gahp-client.h
@@ -802,6 +802,12 @@ class GahpClient : public Service {
 					 char **instance_id );
 
 
+		int
+		dcloud_get_max_name_length( const char *service_url,
+									const char *username,
+									const char *password,
+									int *max_length );
+
 
 #ifdef CONDOR_GLOBUS_HELPER_WANT_DUROC
 	// Not yet ready for prime time...
-- 
1.7.4.4

