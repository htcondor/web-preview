diff --git a/src/condor_collector.V6/collector.cpp b/src/condor_collector.V6/collector.cpp
index a63f210..d704842 100644
--- a/src/condor_collector.V6/collector.cpp
+++ b/src/condor_collector.V6/collector.cpp
@@ -937,21 +937,21 @@ void CollectorDaemon::process_invalidation (AdTypes whichAds, ClassAd &query, St
 	// here we set up a network timeout of a longer duration
 	sock->timeout(QueryTimeout);
 
-	// set up for hashtable scan
-	__query__ = &query;
-	__numAds__ = 0;
+    if ( 0 == ( __numAds__ = collector.remove( whichAds, query ) ) )
+	{
+		dprintf ( D_ALWAYS, "Walking tables to invalidate... O(n)\n" );
 
-	if (param_boolean("HOUSEKEEPING_ON_INVALIDATE", true)) {
-			// first set all the "LastHeardFrom" attributes to low values ...
+		// set up for hashtable scan
+		__query__ = &query;
+
+		// first set all the "LastHeardFrom" attributes to low values ...
 		collector.walkHashTable (whichAds, invalidation_scanFunc);
 
-			// ... then invoke the housekeeper
+		// ... then invoke the housekeeper
 		collector.invokeHousekeeper (whichAds);
-	} else {
-		__numAds__ = collector.invalidateAds(whichAds, query);
 	}
 
-	dprintf (D_ALWAYS, "(Invalidated %d ads)\n", __numAds__);
+	dprintf (D_ALWAYS, "(Invalidated %d ads)\n", __numAds__ );
 }	
 
 
diff --git a/src/condor_collector.V6/collector_engine.cpp b/src/condor_collector.V6/collector_engine.cpp
index 22aa783..7c1bda3 100644
--- a/src/condor_collector.V6/collector_engine.cpp
+++ b/src/condor_collector.V6/collector_engine.cpp
@@ -899,6 +899,28 @@ lookup (AdTypes adType, AdNameHashKey &hk)
 	return val;
 }
 
+int CollectorEngine::remove (AdTypes t_AddType, const ClassAd & c_query)
+{
+	int iRet = 0;
+	AdNameHashKey hk;
+	CollectorHashTable * table;  
+	HashFunc makeKey;
+	MyString hkString;
+
+	// making it generic so any would be invalid query can contain these params.
+	if ( LookupByAdType (t_AddType, table, makeKey) )
+	{
+		// try to create a hk from the query ad if it is possible.
+		if ( (*makeKey) (hk, (ClassAd*) &c_query, NULL) )
+		{
+			hk.sprint( hkString );
+			iRet = !table->remove(hk);
+			dprintf (D_ALWAYS,"\t\t**** Removed(%d) ad(s): \"%s\"\n", iRet, hkString.Value() );
+		}
+	}
+
+	return ( iRet );
+}
 
 int CollectorEngine::
 remove (AdTypes adType, AdNameHashKey &hk)
diff --git a/src/condor_collector.V6/collector_engine.h b/src/condor_collector.V6/collector_engine.h
index ffe5c21..0f8c5e9 100644
--- a/src/condor_collector.V6/collector_engine.h
+++ b/src/condor_collector.V6/collector_engine.h
@@ -51,6 +51,16 @@ class CollectorEngine : public Service
 	// lookup classad in the specified table with the given hashkey
 	ClassAd *lookup (AdTypes, AdNameHashKey &);
 
+	/**
+	* remove () - attempts to construct a hashkey from a query
+    * to remove in O(1) for INVALIDATE* vs. O(n). The query must contain
+    * TARGET.Name && TARGET.MyAddress
+	* @param t_AddType - the add type used to determine the hashtable to search
+    * @param c_query - classad query 
+    * @return - the number of records removed.
+	*/
+	int remove (AdTypes t_AddType, const ClassAd & c_query);
+
 	// remove classad in the specified table with the given hashkey
 	int remove (AdTypes, AdNameHashKey &);
 
diff --git a/src/condor_startd.V6/Resource.cpp b/src/condor_startd.V6/Resource.cpp
index 6d2dd3a..47735be 100644
--- a/src/condor_startd.V6/Resource.cpp
+++ b/src/condor_startd.V6/Resource.cpp
@@ -1002,11 +1002,21 @@ Resource::final_update( void )
 	invalidate_ad.SetMyTypeName( QUERY_ADTYPE );
 	invalidate_ad.SetTargetTypeName( STARTD_ADTYPE );
 
-		// We only want to invalidate this slot.
-	line.sprintf( "%s = TARGET.%s == \"%s\"", ATTR_REQUIREMENTS, ATTR_NAME,
-			 r_name );
+	/*
+	 * NOTE: the collector depends on the data below for performance reasons
+	 * if you change here you will need to CollectorEngine::remove (AdTypes t_AddType, const ClassAd & c_query)
+	 * the IP was added to allow the collector to create a hash key to delete in O(1).
+     */
+	line.sprintf( "%s = ( TARGET.%s == \"%s\" )", ATTR_REQUIREMENTS, ATTR_NAME, r_name );
 	invalidate_ad.Insert( line.Value() );
 
+	line.sprintf( "%s = \"%s\"", ATTR_NAME, r_name);
+	invalidate_ad.Insert( line.Value() );
+
+	line.sprintf( "%s = \"%s\"", ATTR_MY_ADDRESS, daemonCore->publicNetworkIpAddr());
+	invalidate_ad.Insert( line.Value() );
+
+
 #if HAVE_DLOPEN
 	StartdPluginManager::Invalidate(&invalidate_ad);
 #endif
