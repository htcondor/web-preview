diff --git a/src/condor_includes/condor_uid.h b/src/condor_includes/condor_uid.h
index 354f271..afcba2d 100644
--- a/src/condor_includes/condor_uid.h
+++ b/src/condor_includes/condor_uid.h
@@ -138,6 +138,32 @@ bool is_same_user(const char user1[], const char user2[], CompareUsersOpt opt);
 #if defined(__cplusplus) && !defined( WIN32 )
 #include "passwd_cache.unix.h"
 extern passwd_cache* pcache(void);
+
+// An object that automatically returns the previous privilege level when destroyed
+class TemporaryPrivSentry {
+
+public:
+	TemporaryPrivSentry(priv_state dest_state) {
+		m_orig_state = set_priv(dest_state);
+	}
+
+	~TemporaryPrivSentry() {
+		if (m_orig_state != PRIV_UNKNOWN) {
+			set_priv(m_orig_state);
+		}
+	}
+
+private:
+	// no default constructor
+	TemporaryPrivSentry();
+
+	// non-copyable.
+	TemporaryPrivSentry(const TemporaryPrivSentry&);
+	TemporaryPrivSentry& operator=(const TemporaryPrivSentry&);
+
+	priv_state m_orig_state;
+};
+
 #endif
 
 #endif /* _UID_H */
diff --git a/src/condor_starter.V6.1/starter.h b/src/condor_starter.V6.1/starter.h
index 7823983..6071742 100644
--- a/src/condor_starter.V6.1/starter.h
+++ b/src/condor_starter.V6.1/starter.h
@@ -190,6 +190,9 @@ public:
 		*/
 	virtual bool cleanupJobs( void );
 
+		/** Return the Execute dir */
+	const char *GetExecuteDir() const { return Execute; }
+
 		/** Return the Working dir */
 	const char *GetWorkingDir() const { return WorkingDir.Value(); }
 
diff --git a/src/condor_starter.V6.1/vanilla_proc.cpp b/src/condor_starter.V6.1/vanilla_proc.cpp
index 98a82e8..f89d730 100644
--- a/src/condor_starter.V6.1/vanilla_proc.cpp
+++ b/src/condor_starter.V6.1/vanilla_proc.cpp
@@ -231,6 +231,70 @@ VanillaProc::StartJob()
 		}
 	}
 #endif
+/*
+{
+        // Have Condor manage a chroot
+	std::string requested_root_dir;
+	JobAd->EvalString(ATTR_JOB_ROOT_DIR, NULL, requested_root_dir);
+	const char * allowed_root_dirs = param("ALLOWED_ROOT_DIRS");
+	if (requested_root_dir.size()) {
+		TemporaryPrivSentry priv_sentry(PRIV_ROOT);
+		if (get_priv() != PRIV_ROOT) {
+			dprintf(D_ALWAYS, "Unable switch to root privileges; Condor must be run as root to use the ALLOWED_ROOT_DIRS features.\n");
+			return FALSE;
+		}
+		StringList chroot_list(allowed_root_dirs);
+		chroot_list.rewind();
+		const char * next_dir;
+		bool acceptable_chroot = false;
+		while ( (next_dir=chroot_list.next()) ) {
+			dprintf(D_FULLDEBUG, "Considering directory for chroot: %s.\n", next_dir);
+			if (IsDirectory(next_dir) && (strcmp(requested_root_dir.c_str(), next_dir) == 0)) {
+				acceptable_chroot = true;
+			}
+		}
+		// TODO: path to chroot MUST be all root-owned, or we have a nice security exploit.
+		if (!acceptable_chroot) {
+			return FALSE;
+		}
+		dprintf(D_FULLDEBUG, "Will attempt to set the chroot to %s.\n", requested_root_dir.c_str());
+
+		std::string execute_dir(Starter->GetExecuteDir());
+		const char * full_dir = dirscat(requested_root_dir, execute_dir);
+		std::string full_dir_str;
+		if (full_dir) {
+			full_dir_str = full_dir;
+		} else {
+			dprintf(D_ALWAYS, "Unable to concatenate %s and %s.\n", requested_root_dir.c_str(), execute_dir.c_str());
+			return FALSE;
+		}
+		delete [] full_dir;
+		if (IsDirectory(execute_dir.c_str())) {
+			if (!mkdir_and_parents_if_needed( full_dir_str.c_str(), S_IRWXU, PRIV_USER )) {
+				dprintf(D_ALWAYS, "Failed to create scratch directory %s\n", full_dir_str.c_str());
+				return FALSE;
+			}
+			if (!fs_remap) {
+				fs_remap = new FilesystemRemap();
+			}
+			dprintf(D_FULLDEBUG, "Adding mapping: %s -> %s.\n", execute_dir.c_str(), full_dir_str.c_str());
+			if (fs_remap->AddMapping(execute_dir, full_dir_str)) {
+				// FilesystemRemap object prints out an error message for us.
+				return FALSE;
+			}
+			dprintf(D_FULLDEBUG, "Adding mapping %s -> %s.\n", requested_root_dir.c_str(), "/");
+			std::string root_str("/");
+			if (fs_remap->AddMapping(requested_root_dir, root_str)) {
+				return FALSE;
+			}
+		} else {
+			dprintf(D_ALWAYS, "Unable to do chroot because working dir %s does not exist.\n", execute_dir.c_str());
+		}
+	} else {
+		dprintf(D_ALWAYS, "Value of RootDir is unset.\n");
+	}
+}
+*/
 
 	// On Linux kernel 2.4.19 and later, we can give each job its
 	// own FS mounts.
diff --git a/src/condor_utils/filesystem_remap.cpp b/src/condor_utils/filesystem_remap.cpp
index ff0c80a..8864668 100644
--- a/src/condor_utils/filesystem_remap.cpp
+++ b/src/condor_utils/filesystem_remap.cpp
@@ -19,12 +19,21 @@
 
 #include "filename_tools.h"
 #include "condor_debug.h"
+#include "MyString.h"
+#include "condor_uid.h"
 #include "filesystem_remap.h"
 
 #if defined(LINUX)
 #include <sys/mount.h>
 #endif
 
+FilesystemRemap::FilesystemRemap() :
+	m_mappings(),
+	m_mounts_shared()
+{
+	ParseMountinfo();
+}
+
 int FilesystemRemap::AddMapping(std::string source, std::string dest) {
 	if (!is_relative_to_cwd(source) && !is_relative_to_cwd(dest)) {
 		std::list<pair_strings>::const_iterator it;
@@ -34,6 +43,10 @@ int FilesystemRemap::AddMapping(std::string source, std::string dest) {
 				return -1;
 			}
 		}
+		if (CheckMapping(dest)) {
+			dprintf(D_ALWAYS, "Failed to convert shared mount to private mapping");
+			return -1;
+		}
 		m_mappings.push_back( std::pair<std::string, std::string>(source, dest) );
 	} else {
 		dprintf(D_ALWAYS, "Unable to add mappings for relative directories (%s, %s).\n", source.c_str(), dest.c_str());
@@ -42,6 +55,46 @@ int FilesystemRemap::AddMapping(std::string source, std::string dest) {
 	return 0;
 }
 
+int FilesystemRemap::CheckMapping(std::string & mount_point) {
+	bool best_is_shared = false;
+	size_t best_len = 0;
+	const std::string *best = NULL;
+
+	dprintf(D_FULLDEBUG, "Checking the mapping of mount point %s.\n", mount_point.c_str());
+
+	for (std::list<pair_str_bool>::const_iterator it = m_mounts_shared.begin(); it != m_mounts_shared.end(); it++) {
+		std::string first = it->first;
+		if ((strncmp(first.c_str(), mount_point.c_str(), first.size()) == 0) && (first.size() > best_len)) {
+			best_len = first.size();
+			best = &(it->first);
+			best_is_shared = it->second;
+		}
+	}
+
+	if (!best_is_shared) {
+		return 0;
+	}
+
+	dprintf(D_ALWAYS, "Current mount, %s, is shared.\n", best->c_str());
+
+	// Re-mount the mount point as a bind mount, so we can subsequently
+	// re-mount it as private.
+	TemporaryPrivSentry sentry(PRIV_ROOT);
+	if (mount(mount_point.c_str(), mount_point.c_str(), NULL, MS_BIND, NULL)) {	
+		dprintf(D_ALWAYS, "Marking %s as a bind mount failed. (errno=%d, %s)\n", mount_point.c_str(), errno, strerror(errno));
+		return -1;
+	}
+
+	if (mount(mount_point.c_str(), mount_point.c_str(), NULL, MS_PRIVATE, NULL)) {
+		dprintf(D_ALWAYS, "Marking %s as a private mount failed. (errno=%d, %s)\n", mount_point.c_str(), errno, strerror(errno));
+		return -1;
+	} else {
+		dprintf(D_FULLDEBUG, "Marking %s as a private mount successful.\n", mount_point.c_str());
+	}
+
+	return 0;
+}
+
 // This is called within the exec
 // IT CANNOT CALL DPRINTF!
 int FilesystemRemap::PerformMappings() {
@@ -49,7 +102,14 @@ int FilesystemRemap::PerformMappings() {
 #if defined(LINUX)
 	std::list<pair_strings>::iterator it;
 	for (it = m_mappings.begin(); it != m_mappings.end(); it++) {
-		if ((retval = mount(it->first.c_str(), it->second.c_str(), NULL, MS_BIND, NULL))) {
+		if (strcmp(it->second.c_str(), "/") == 0) {
+			if ((retval = chroot(it->first.c_str()))) {
+				break;
+			}
+			if ((retval = chdir("/"))) {
+				break;
+			}
+		} else if ((retval = mount(it->first.c_str(), it->second.c_str(), NULL, MS_BIND, NULL))) {
 			break;
 		}
 	}
@@ -80,3 +140,71 @@ std::string FilesystemRemap::RemapDir(std::string target) {
 	}
 	return target;
 }
+
+/*
+  Sample mountinfo contents (from http://www.kernel.org/doc/Documentation/filesystems/proc.txt):
+  36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 - ext3 /dev/root rw,errors=continue
+  (1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)
+
+  (1) mount ID:  unique identifier of the mount (may be reused after umount)
+  (2) parent ID:  ID of parent (or of self for the top of the mount tree)
+  (3) major:minor:  value of st_dev for files on filesystem
+  (4) root:  root of the mount within the filesystem
+  (5) mount point:  mount point relative to the process's root
+  (6) mount options:  per mount options
+  (7) optional fields:  zero or more fields of the form "tag[:value]"
+  (8) separator:  marks the end of the optional fields
+  (9) filesystem type:  name of filesystem of the form "type[.subtype]"
+  (10) mount source:  filesystem specific information or "none"
+  (11) super options:  per super block options
+ */
+
+#define ADVANCE_TOKEN(token, str) { \
+	if ((token = str.GetNextToken(" ", false)) == NULL) { \
+		dprintf(D_ALWAYS, "Invalid line in mountinfo file: %s\n", str.Value()); \
+		return; \
+	} \
+}
+
+#define SHARED_STR "shared:"
+
+void FilesystemRemap::ParseMountinfo() {
+	MyString str, str2;
+	const char * token;
+	FILE *fd;
+	bool is_shared;
+
+	if ((fd = fopen("/proc/self/mountinfo", "r")) == NULL) {
+		if (errno == ENOENT) {
+			dprintf(D_FULLDEBUG, "The /proc/self/mountinfo file does not exist; kernel support probably lacking.  Will assume normal mount structure.\n");
+		} else {
+			dprintf(D_ALWAYS, "Unable to open the mountinfo file (/proc/self/mountinfo). (errno=%d, %s)\n", errno, strerror(errno));
+		}
+		return;
+	}
+
+	while (str2.readLine(fd, false)) {
+		str = str2;
+		str.Tokenize();
+		ADVANCE_TOKEN(token, str) // mount ID
+		ADVANCE_TOKEN(token, str) // parent ID
+		ADVANCE_TOKEN(token, str) // major:minor
+		ADVANCE_TOKEN(token, str) // root
+		ADVANCE_TOKEN(token, str) // mount point
+		std::string mp(token);
+		ADVANCE_TOKEN(token, str) // mount options
+		ADVANCE_TOKEN(token, str) // optional fields
+		is_shared = false;
+		while (strcmp(token, "-") != 0) {
+			is_shared = is_shared || (strncmp(token, SHARED_STR, strlen(SHARED_STR)) == 0);
+			ADVANCE_TOKEN(token, str)
+		}
+		// This seems a bit too chatty - disabling for now.
+		// dprintf(D_FULLDEBUG, "Mount: %s, shared: %d.\n", mp.c_str(), is_shared);
+		m_mounts_shared.push_back(pair_str_bool(mp, is_shared));
+	}
+
+	fclose(fd);
+
+}
+
diff --git a/src/condor_utils/filesystem_remap.h b/src/condor_utils/filesystem_remap.h
index 7dade7e..0d5aa4e 100644
--- a/src/condor_utils/filesystem_remap.h
+++ b/src/condor_utils/filesystem_remap.h
@@ -34,12 +34,13 @@
  * This is meant to give Condor the ability to provide per-job temporary directories.
  */
 typedef std::pair<std::string, std::string> pair_strings;
+typedef std::pair<std::string, bool> pair_str_bool;
 
 class FilesystemRemap {
 
 public:
 
-	FilesystemRemap() : m_mappings() {};
+	FilesystemRemap();
 
 	/**
 	 * Add a mapping to the filesystem remap.
@@ -75,7 +76,19 @@ public:
 
 private:
 
+	/**
+	 * Parse /proc/self/mountinfo file; look for mounts that are shared
+	 */
+	void ParseMountinfo();
+
+	/**
+	 * Check to see if the desired mount point is going to be shared
+	 * outside the current namespace.  If so, remount it as private.
+	 */
+	int CheckMapping(std::string &);
+
 	std::list<pair_strings> m_mappings;
+	std::list<pair_str_bool> m_mounts_shared;
 
 };
 #endif
