diff --git a/src/condor_dagman/condor_submit_dag.cpp b/src/condor_dagman/condor_submit_dag.cpp
index 663d9ba..300447a 100644
--- a/src/condor_dagman/condor_submit_dag.cpp
+++ b/src/condor_dagman/condor_submit_dag.cpp
@@ -757,6 +757,10 @@ void writeSubmitFile(/* const */ SubmitDagDeepOptions &deepOpts,
 		printf( "Warning: -NoEventChecks is ignored; please use "
 					"the DAGMAN_ALLOW_EVENTS config parameter instead\n");
 	}
+	if(!shallowOpts.bPostRun)
+	{
+		args.AppendArg("-NoPostRun");
+	}
 	if(deepOpts.bAllowLogError)
 	{
 		args.AppendArg("-AllowLogError");
@@ -1102,6 +1106,10 @@ parseCommandLine(SubmitDagDeepOptions &deepOpts,
 			{
 				deepOpts.bVerbose = true;
 			}
+			else if ( (strArg.find("-no_pos") != -1) ) // -no_postrun
+			{
+				shallowOpts.bPostRun = false;
+			}
 			else if ( parsePreservedArgs( strArg, iArg, argc, argv,
 						shallowOpts) )
 			{
diff --git a/src/condor_dagman/dag.cpp b/src/condor_dagman/dag.cpp
index 62ca378..c52937f 100644
--- a/src/condor_dagman/dag.cpp
+++ b/src/condor_dagman/dag.cpp
@@ -121,7 +121,8 @@ Dag::Dag( /* const */ StringList &dagFiles,
 	_spliceScope		  (spliceScope),
 	_recoveryMaxfakeID	  (0),
 	_maxJobHolds		  (0),
-	_reject				  (false)
+	_reject			  (false),
+	_postRun(true)
 {
 
 	// If this dag is a splice, then it may have been specified with a DIR
@@ -1541,11 +1542,20 @@ Dag::PreScriptReaper( const char* nodeName, int status )
         job->_Status = Job::STATUS_ERROR;
 		_preRunNodeCount--;
 		_jobstateLog.WriteScriptSuccessOrFailure( job, false );
-
 		if( job->GetRetries() < job->GetRetryMax() ) {
 			RestartNode( job, false );
 		} else {
-			_numNodesFailed++;
+			if( _postRun && job->_scriptPost ) {
+				// a POST script is specified for the job, so run it
+				// and we are told to ignore the result of the PRE script
+				job->_Status = Job::STATUS_POSTRUN;
+				_postRunNodeCount++;
+				job->_scriptPost->_retValJob = DAG_ERROR_CONDOR_SUBMIT_FAILED;
+				(void)job->MonitorLogFile( _condorLogRdr, _storkLogRdr,
+						_nfsLogIsError, _recovery, _defaultNodeLog );
+				_postScriptQ->Run( job->_scriptPost );
+			} else {
+				++_numNodesFailed;
 			if( job->GetRetryMax() > 0 ) {
 				// add # of retries to error_text
 				char *tmp = strnewp( job->error_text );
@@ -1555,6 +1565,7 @@ Dag::PreScriptReaper( const char* nodeName, int status )
 				delete [] tmp;   
 			}
 		}
+		}
 	} else {
 		debug_printf( DEBUG_NORMAL, "PRE Script of Node %s completed "
 					  "successfully.\n", job->GetJobName() );
diff --git a/src/condor_dagman/dag.h b/src/condor_dagman/dag.h
index 0cb646f..b70ad3b 100644
--- a/src/condor_dagman/dag.h
+++ b/src/condor_dagman/dag.h
@@ -668,7 +668,8 @@ class Dag {
 	void SetMaxJobHolds(int maxJobHolds) { _maxJobHolds = maxJobHolds; }
 
 	JobstateLog &GetJobstateLog() { return _jobstateLog; }
-
+	bool GetPostRun() const { return _postRun; }
+	void SetPostRun(bool postRun) { _postRun = postRun; }	
   private:
 
 	// If this DAG is a splice, then this is what the DIR was set to, it 
@@ -1056,6 +1057,9 @@ class Dag {
 
 		// The object for logging to the jobstate.log file (for Pegasus).
 	JobstateLog _jobstateLog;
+	// If true, run the POST script, regardless of the exit status of the PRE script
+	// Defaults to true
+	bool _postRun;
 };
 
 #endif /* #ifndef DAG_H */
diff --git a/src/condor_dagman/dagman_main.cpp b/src/condor_dagman/dagman_main.cpp
index 67a8677..104bdae 100644
--- a/src/condor_dagman/dagman_main.cpp
+++ b/src/condor_dagman/dagman_main.cpp
@@ -69,6 +69,7 @@ static void Usage() {
             "\t\t[-MaxJobs <int N>]\n"
             "\t\t[-MaxPre <int N>]\n"
             "\t\t[-MaxPost <int N>]\n"
+            "\t\t[-NoPostRun]\n"
             "\t\t[-WaitForDebug]\n"
             "\t\t[-NoEventChecks]\n"
             "\t\t[-AllowLogError]\n"
@@ -130,7 +131,8 @@ Dagman::Dagman() :
 	dumpRescueDag(false),
 	_defaultNodeLog(NULL),
 	_generateSubdagSubmits(true),
-	_maxJobHolds(100)
+	_maxJobHolds(100),
+	_runPost(true)
 {
     debug_level = DEBUG_VERBOSE;  // Default debug level is verbose output
 }
@@ -317,6 +319,9 @@ Dagman::Config()
 				submitDepthFirst );
 	debug_printf( DEBUG_NORMAL, "DAGMAN_SUBMIT_DEPTH_FIRST setting: %s\n",
 				submitDepthFirst ? "True" : "False" );
+	_runPost = param_boolean( "DAGMAN_POST_IGNORE_PRE", true );
+	debug_printf( DEBUG_NORMAL, "DAGMAN_POST_IGNORE_PRE setting: %s\n",
+			_runPost ? "True" : "False" );
 
 	free( condorSubmitExe );
 	condorSubmitExe = param( "DAGMAN_CONDOR_SUBMIT_EXE" );
@@ -659,6 +664,8 @@ void main_init (int argc, char ** const argv) {
         } else if( !strcasecmp( "-AllowLogError", argv[i] ) ) {
 			dagman.allowLogError = true;
 
+        } else if( !strcasecmp( "-NoPostRun",argv[i] ) ) {
+			dagman._runPost = false;
         } else if( !strcasecmp( "-WaitForDebug", argv[i] ) ) {
 			wait_for_debug = 1;
 
@@ -997,7 +1004,7 @@ void main_init (int argc, char ** const argv) {
 	dagman.dag->SetAllowEvents( dagman.allow_events );
 	dagman.dag->SetConfigFile( dagman._dagmanConfigFile );
 	dagman.dag->SetMaxJobHolds( dagman._maxJobHolds );
-
+	dagman.dag->SetPostRun(dagman._runPost);
     //
     // Parse the input files.  The parse() routine
     // takes care of adding jobs and dependencies to the DagMan
diff --git a/src/condor_dagman/dagman_main.h b/src/condor_dagman/dagman_main.h
index b1ab94e..fb0c3a9 100644
--- a/src/condor_dagman/dagman_main.h
+++ b/src/condor_dagman/dagman_main.h
@@ -193,8 +193,8 @@ class Dagman {
 		// The maximum number of times a node job can go on hold before
 		// we declare it a failure and remove it; 0 means no limit.
 	int _maxJobHolds;
-
 	static strict_level_t _strict;
+	bool _runPost;
 };
 
 #endif	// ifndef DAGMAN_MAIN_H
diff --git a/src/condor_dagman/dagman_recursive_submit.h b/src/condor_dagman/dagman_recursive_submit.h
index a4200d4..3988455 100644
--- a/src/condor_dagman/dagman_recursive_submit.h
+++ b/src/condor_dagman/dagman_recursive_submit.h
@@ -63,10 +63,12 @@ struct SubmitDagShallowOptions
 	MyString strLockFile;
 	bool copyToSpool;
 	int iDebugLevel;
+	bool bPostRun;
 
 	SubmitDagShallowOptions() 
 	{ 
 		bSubmit = true;
+		bPostRun = true;
 		strRemoteSchedd = "";
 		strScheddDaemonAdFile = "";
 		strScheddAddressFile = "";
