{"id": 5461, "title": "Ticket #5461: Thoughts about horizontal schedd scaling", "description": "<blockquote>\n(Motivation section goes here.)\n\n<p>We could use the shared port daemon to do load division among schedds.  Suppose condor_submit were modified to ask for a special shared port ID, e.g., 'schedd-balancer'.  The shared port daemon could then pass such a socket to any daemon with a socket ID of 'schedd-&lt;num&gt;', and the submission would proceed as normal.\n\n</p><p>We could then either implement a \"view schedd\", analagous to the view collector (and based on the schedd log-reading class), and update condor_q to ask it questions, or leverage the fact that we already have code in condor_q to talk to multiple schedds, and add a new mode (perhaps the default) that queried each of the schedds behind the 'schedd-balancer' alias individually.  Because the shared port daemon can't hand off sockets between machines, this mode could probably just be implemented with the schedd address files, and not even involve the collector.\n\n</p><p>The negotiator, likewise, could talk to each schedd individually, or to the view schedd, as appropriate.\n\n</p><p>You'd want a schedd, call it the backwards-compatible schedd, to be running for older client tools.  It should be possible to make the view schedd (if any) the backwards-compatible schedd, but that suggests certain scaling limitations.  It may be better, instead, to add the backwards-compatibility schedd to the list of schedds condor_q queries in its new mode; because it would (and must) advertise to the collector as a normal schedd, the negotiator would source jobs from it in the usual way.</p></blockquote>", "remarks": "<blockquote>\n</blockquote>", "derived_tickets": "", "attachments": "<html><head></head><body></body></html>", "check_ins": "", "type": "experimental", "last_change": "2016-Jan-04 16:56", "status": "new", "created": "2016-Jan-04 16:56", "fixed_version": "2016-Jan-04 16:56", "broken_version": "", "priority": "4", "subsystem": "DaemonsSubmitNode", "assigned_to": "", "derived_from": "", "creator": "tlmiller", "rust": "", "customer_group": "other", "visibility": "public", "notify": "tlmiller@cs.wisc.edu", "due_date": ""}