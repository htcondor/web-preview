From 962015c00c7854abfd5615ec8e34505c1d37acb9 Mon Sep 17 00:00:00 2001
From: Chris Lalancette <clalance@redhat.com>
Date: Thu, 16 Jun 2011 11:24:54 -0400
Subject: [PATCH 13/13] Add autostart checking to deltacloud gridmanager code.

Signed-off-by: Chris Lalancette <clalance@redhat.com>
---
 src/condor_gridmanager/dcloudjob.cpp      |   78 ++++++++++++++++++-------
 src/condor_gridmanager/dcloudjob.h        |    2 +
 src/condor_gridmanager/dcloudresource.cpp |   12 +---
 src/condor_gridmanager/gahp-client.cpp    |   91 +++++++++++++++++++++++++++++
 src/condor_gridmanager/gahp-client.h      |    5 ++
 src/condor_includes/condor_attributes.h   |    1 +
 src/condor_utils/condor_attributes.cpp    |   21 ++++---
 7 files changed, 169 insertions(+), 41 deletions(-)

diff --git a/src/condor_gridmanager/dcloudjob.cpp b/src/condor_gridmanager/dcloudjob.cpp
index 97dd0f5..1556541 100644
--- a/src/condor_gridmanager/dcloudjob.cpp
+++ b/src/condor_gridmanager/dcloudjob.cpp
@@ -49,6 +49,7 @@
 #define GM_SAVE_INSTANCE_NAME			13
 #define GM_CHECK_VM						14
 #define GM_START_VM						15
+#define GM_CHECK_AUTOSTART				16
 
 static const char *GMStateNames[] = {
 	"GM_INIT",
@@ -67,6 +68,7 @@ static const char *GMStateNames[] = {
 	"GM_SAVE_INSTANCE_NAME",
 	"GM_CHECK_VM",
 	"GM_START_VM",
+	"GM_CHECK_AUTOSTART",
 };
 
 #define DCLOUD_VM_STATE_RUNNING			"RUNNING"
@@ -268,6 +270,10 @@ DCloudJob::DCloudJob( ClassAd *classad )
 		}
 	}
 
+	if ( !jobAd->LookupBool( ATTR_DELTACLOUD_NEEDS_START, m_needstart ) ) {
+		m_needstart = false;
+	}
+
 	myResource = DCloudResource::FindOrCreateResource( m_serviceUrl, m_username, m_password );
 	myResource->RegisterJob( this );
 	if ( m_instanceId ) {
@@ -478,7 +484,7 @@ void DCloudJob::doEvaluateState()
 				gmState = GM_CREATE_VM;
 				break;
 
-			case GM_CREATE_VM:
+			case GM_CREATE_VM: {
 
 				if ( numSubmitAttempts >= MAX_SUBMIT_ATTEMPTS ) {
 					gmState = GM_HOLD;
@@ -549,29 +555,61 @@ void DCloudJob::doEvaluateState()
 				ProcessInstanceAttrs( instance_attrs );
 				ASSERT( m_instanceId );
 
-				if ( remoteJobState == DCLOUD_VM_STATE_STOPPED ) {
-					gmState = GM_START_VM;
-				} else {
-					gmState = GM_SAVE_INSTANCE_ID;
-				}
+				gmState = GM_CHECK_AUTOSTART;
 
 				break;
+			}
 
+			case GM_CHECK_AUTOSTART: {
+				bool autostart;
 
-			case GM_START_VM:
+				if ( (condorState == REMOVED) || (condorState == HELD) ) {
+					gmState = GM_DELETE;
+					break;
+				}
 
+				rc = gahp->dcloud_start_auto( m_serviceUrl,
+											  m_username,
+											  m_password,
+											  &autostart );
+
+				if ( rc == GAHPCLIENT_COMMAND_NOT_SUBMITTED ||
+					 rc == GAHPCLIENT_COMMAND_PENDING )
+					break;
+
+				if ( rc != 0 ) {
+					errorString = gahp->getErrorString();
+					dprintf( D_ALWAYS,"(%d.%d) Finding autostart failed: %s\n",
+							 procID.cluster, procID.proc, errorString.Value() );
+					gmState = GM_HOLD;
+					break;
+				}
+
+				m_needstart = !autostart;
+				jobAd->Assign( ATTR_DELTACLOUD_NEEDS_START, m_needstart );
+
+				gmState = GM_SAVE_INSTANCE_ID;
+
+				break;
+			}
+
+			case GM_START_VM:
 				rc = gahp->dcloud_action( m_serviceUrl,
 										  m_username,
 										  m_password,
 										  m_instanceId,
 										  "start" );
+
+				jobAd->Assign( ATTR_DELTACLOUD_NEEDS_START, false );
+				m_needstart = false;
+
 				if ( rc == GAHPCLIENT_COMMAND_NOT_SUBMITTED ||
 					 rc == GAHPCLIENT_COMMAND_PENDING ) {
 					break;
 				}
 
 				if ( rc == 0 ) {
-					gmState = GM_SAVE_INSTANCE_ID;
+					gmState = GM_PROBE_JOB;
 				} else {
 					// What to do about a failed start?
 					errorString = gahp->getErrorString();
@@ -595,25 +633,22 @@ void DCloudJob::doEvaluateState()
 				break;
 
 			case GM_SUBMITTED:
-
-				// TODO Make sure instances that begin in the 'stopped'
-				//   state aren't flagged here.
-				if ( remoteJobState == DCLOUD_VM_STATE_FINISH ||
-					 remoteJobState == DCLOUD_VM_STATE_STOPPED ) {
-
-					gmState = GM_DONE_SAVE;
-
-				} else if ( condorState == REMOVED || condorState == HELD ) {
-
+				if ( condorState == REMOVED || condorState == HELD ) {
 					gmState = GM_CANCEL;
-
+				} else if ( remoteJobState == DCLOUD_VM_STATE_STOPPED ) {
+					if ( m_needstart ) {
+						gmState = GM_START_VM;
+					} else {
+						gmState = GM_DONE_SAVE;
+					}
+				} else if ( remoteJobState == DCLOUD_VM_STATE_FINISH ) {
+					gmState = GM_DONE_SAVE;
 				} else if ( probeNow ) {
 					gmState = GM_PROBE_JOB;
 				}
 
 				break;
 
-
 			case GM_DONE_SAVE:
 
 				if ( condorState != HELD && condorState != REMOVED ) {
@@ -751,7 +786,7 @@ void DCloudJob::doEvaluateState()
 
 				break;
 
-			case GM_PROBE_JOB:
+			case GM_PROBE_JOB: {
 
 				probeNow = false;
 				if ( condorState == REMOVED || condorState == HELD ) {
@@ -824,6 +859,7 @@ void DCloudJob::doEvaluateState()
 				gmState = GM_SUBMITTED;
 
 				break;
+			}
 
 			case GM_CANCEL:
 
diff --git a/src/condor_gridmanager/dcloudjob.h b/src/condor_gridmanager/dcloudjob.h
index 4e2031c..e4de7d4 100644
--- a/src/condor_gridmanager/dcloudjob.h
+++ b/src/condor_gridmanager/dcloudjob.h
@@ -99,6 +99,8 @@ private:
 	char *m_keyname;
 	char *m_userdata;
 
+	bool m_needstart;
+
 	void ProcessInstanceAttrs( StringList &attrs );
 	MyString build_instance_name( int max_length );
 };
diff --git a/src/condor_gridmanager/dcloudresource.cpp b/src/condor_gridmanager/dcloudresource.cpp
index 32fd51a..06713b2 100644
--- a/src/condor_gridmanager/dcloudresource.cpp
+++ b/src/condor_gridmanager/dcloudresource.cpp
@@ -210,16 +210,8 @@ DCloudResource::BatchStatusResult DCloudResource::StartBatchStatus()
 		}
 		ASSERT( job );
 
-		// Only update the status if it isn't RUNNING, in that case we want the
-		// GM_PROBE to get the status so we get all the information about the
-		// instance at once including the public IP address etc before setting
-		// the RUNNING state and writing to the event log.
-		if ( strcasecmp( status, "RUNNING" ) == 0 && job->condorState != RUNNING ) {
-			job->probeNow = true;
-			job->SetEvaluateState();
-		} else {
-			job->StatusUpdate( status );
-		}
+		job->StatusUpdate( status );
+
 		my_jobs.Delete( job );
 	}
 
diff --git a/src/condor_gridmanager/gahp-client.cpp b/src/condor_gridmanager/gahp-client.cpp
index c399292..47e9a22 100644
--- a/src/condor_gridmanager/gahp-client.cpp
+++ b/src/condor_gridmanager/gahp-client.cpp
@@ -8496,3 +8496,94 @@ int GahpClient::dcloud_get_max_name_length( const char *service_url,
 	// If we made it here, command is still pending...
 	return GAHPCLIENT_COMMAND_PENDING;
 }
+
+int GahpClient::dcloud_start_auto( const char *service_url,
+								   const char *username,
+								   const char *password,
+								   bool *autostart )
+{
+	// DELTACLOUD_START_AUTO <req_id> <serviceurl> <username> <password>
+	static const char* command = "DELTACLOUD_START_AUTO";
+
+	// check if this command is supported
+	if ( server->m_commands_supported->contains_anycase( command ) == FALSE ) {
+		return GAHPCLIENT_COMMAND_NOT_SUPPORTED;
+	}
+
+	// Generate request line
+	if ( !service_url ) service_url = NULLSTRING;
+	if ( !username ) username = NULLSTRING;
+	if ( !password ) password = NULLSTRING;
+
+	MyString reqline;
+
+	char* esc1 = strdup( escapeGahpString(service_url) );
+	char* esc2 = strdup( escapeGahpString(username) );
+	char* esc3 = strdup( escapeGahpString(password) );
+
+	bool x = reqline.sprintf("%s %s %s", esc1, esc2, esc3);
+
+	free( esc1 );
+	free( esc2 );
+	free( esc3 );
+	ASSERT( x == true );
+
+	const char *buf = reqline.Value();
+	// Check if this request is currently pending. If not, make it the pending request.
+	if ( !is_pending(command,buf) ) {
+		// Command is not pending, so go ahead and submit a new one if our command mode permits.
+		if ( m_mode == results_only ) {
+			return GAHPCLIENT_COMMAND_NOT_SUBMITTED;
+		}
+		now_pending(command, buf, deleg_proxy);
+	}
+
+	// If we made it here, command is pending.
+
+	// Check first if command completed.
+	Gahp_Args* result = get_pending_result(command, buf);
+
+	// we expect one of the following return:
+	//   req_id NULL <max_length>
+	//   req_id NULL NULL
+	//   req_id <error message>
+
+	if ( result ) {
+		// command completed.
+		int rc = 0;
+		if ( result->argc < 2 || result->argc > 3 ) {
+			EXCEPT( "Bad %s result", command );
+		} else if ( result->argc == 2 ) {
+			if ( !strcmp( result->argv[1], NULLSTRING ) ) {
+				EXCEPT( "Bad %s result", command );
+			}
+			error_string = result->argv[1];
+			rc = 1;
+		} else {
+			if ( strcmp( result->argv[1], NULLSTRING ) ) {
+				EXCEPT( "Bad %s result", command );
+			}
+			if ( strcmp( result->argv[2], "TRUE" ) == 0 ) {
+				*autostart = TRUE;
+			} else if ( strcmp( result->argv[2], "FALSE" ) == 0 ) {
+				*autostart = FALSE;
+			} else {
+				EXCEPT( "Bad %s result", command );
+			}
+		}
+
+		delete result;
+		return rc;
+	}
+
+	// Now check if pending command timed out.
+	if ( check_pending_timeout(command, buf) )
+	{
+		// pending command timed out.
+		sprintf( error_string, "%s timed out", command );
+		return GAHPCLIENT_COMMAND_TIMED_OUT;
+	}
+
+	// If we made it here, command is still pending...
+	return GAHPCLIENT_COMMAND_PENDING;
+}
diff --git a/src/condor_gridmanager/gahp-client.h b/src/condor_gridmanager/gahp-client.h
index 10ab0bd..1996e37 100644
--- a/src/condor_gridmanager/gahp-client.h
+++ b/src/condor_gridmanager/gahp-client.h
@@ -808,6 +808,11 @@ class GahpClient : public Service {
 									const char *password,
 									int *max_length );
 
+		int
+		dcloud_start_auto( const char *service_url,
+						   const char *username,
+						   const char *password,
+						   bool *autostart );
 
 #ifdef CONDOR_GLOBUS_HELPER_WANT_DUROC
 	// Not yet ready for prime time...
diff --git a/src/condor_includes/condor_attributes.h b/src/condor_includes/condor_attributes.h
index ff84f9a..dafeaaf 100644
--- a/src/condor_includes/condor_attributes.h
+++ b/src/condor_includes/condor_attributes.h
@@ -129,6 +129,7 @@ extern const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_MEMORY;
 extern const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_STORAGE;
 extern const char * const  ATTR_DELTACLOUD_KEYNAME;
 extern const char * const  ATTR_DELTACLOUD_USER_DATA;
+extern const char * const  ATTR_DELTACLOUD_NEEDS_START;
 extern const char * const  ATTR_DESTINATION;
 extern const char * const  ATTR_DISK;
 extern const char * const  ATTR_DISK_USAGE;
diff --git a/src/condor_utils/condor_attributes.cpp b/src/condor_utils/condor_attributes.cpp
index 0f1b9d1..437947b 100644
--- a/src/condor_utils/condor_attributes.cpp
+++ b/src/condor_utils/condor_attributes.cpp
@@ -179,16 +179,17 @@ const char * const ATTR_DELTACLOUD_PRIVATE_NETWORK_ADDRESSES = "DeltacloudPrivat
 const char * const ATTR_DELTACLOUD_PROVIDER_ID	 = "DeltacloudProviderId";
 const char * const ATTR_DELTACLOUD_PUBLIC_NETWORK_ADDRESSES = "DeltacloudPublicNetworkAddresses";
 const char * const ATTR_DELTACLOUD_RETRY_TIMEOUT = "DeltacloudRetryTimeout";
-const char * const  ATTR_DELTACLOUD_USERNAME	 = "DeltacloudUsername";
-const char * const  ATTR_DELTACLOUD_PASSWORD_FILE = "DeltacloudPasswordFile";
-const char * const  ATTR_DELTACLOUD_IMAGE_ID	 = "DeltacloudImageId";
-const char * const  ATTR_DELTACLOUD_REALM_ID	 = "DeltacloudRealmId";
-const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE = "DeltacloudHardwareProfile";
-const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_CPU = "DeltacloudHardwareProfileCpu";
-const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_MEMORY = "DeltacloudHardwareProfileMemory";
-const char * const  ATTR_DELTACLOUD_HARDWARE_PROFILE_STORAGE = "DeltacloudHardwareProfileStorage";
-const char * const  ATTR_DELTACLOUD_KEYNAME		 = "DeltacloudKeyname";
-const char * const  ATTR_DELTACLOUD_USER_DATA	 = "DeltacloudUserData";
+const char * const ATTR_DELTACLOUD_USERNAME	 = "DeltacloudUsername";
+const char * const ATTR_DELTACLOUD_PASSWORD_FILE = "DeltacloudPasswordFile";
+const char * const ATTR_DELTACLOUD_IMAGE_ID	 = "DeltacloudImageId";
+const char * const ATTR_DELTACLOUD_REALM_ID	 = "DeltacloudRealmId";
+const char * const ATTR_DELTACLOUD_HARDWARE_PROFILE = "DeltacloudHardwareProfile";
+const char * const ATTR_DELTACLOUD_HARDWARE_PROFILE_CPU = "DeltacloudHardwareProfileCpu";
+const char * const ATTR_DELTACLOUD_HARDWARE_PROFILE_MEMORY = "DeltacloudHardwareProfileMemory";
+const char * const ATTR_DELTACLOUD_HARDWARE_PROFILE_STORAGE = "DeltacloudHardwareProfileStorage";
+const char * const ATTR_DELTACLOUD_KEYNAME		 = "DeltacloudKeyname";
+const char * const ATTR_DELTACLOUD_USER_DATA	 = "DeltacloudUserData";
+const char * const ATTR_DELTACLOUD_NEEDS_START = "DeltacloudNeedsStart";
 const char * const ATTR_DESTINATION				 = "Destination";
 const char * const ATTR_DISK                     = "Disk";
 const char * const ATTR_DISK_USAGE				 = "DiskUsage";
-- 
1.7.4.4

