diff --git a/src/condor_schedd.V6/schedd.cpp b/src/condor_schedd.V6/schedd.cpp
index 292199b..ac28e42 100644
--- a/src/condor_schedd.V6/schedd.cpp
+++ b/src/condor_schedd.V6/schedd.cpp
@@ -11324,6 +11324,8 @@ Scheduler::sendAlives()
 				// if startds are sending updates asynchronously.  -Todd Tannenbaum 
 				GetAttributeInt(mrec->cluster,mrec->proc,
 								ATTR_LAST_JOB_LEASE_RENEWAL,&now);
+			} else {
+				now = time(NULL);
 			}
 			SetAttributeInt( mrec->cluster, mrec->proc, 
 							 ATTR_LAST_JOB_LEASE_RENEWAL, now ); 
@@ -11340,6 +11342,31 @@ Scheduler::sendAlives()
 				numsent++;
 			}
 		}
+
+		if ( mrec->m_startd_sends_alives == true && mrec->status == M_ACTIVE ) {
+			int lease_duration = -1;
+			int last_lease_renewal = -1;
+			GetAttributeInt( mrec->cluster, mrec->proc,
+							 ATTR_JOB_LEASE_DURATION, &lease_duration );
+			GetAttributeInt( mrec->cluster, mrec->proc,
+							 ATTR_LAST_JOB_LEASE_RENEWAL, &last_lease_renewal );
+
+			// If the job has no lease attribute, the startd sets the
+			// claim lease to 6 times the alive_interval we sent when we
+			// requested the claim.
+			if ( lease_duration <= 0 ) {
+				lease_duration = 6 * alive_interval;
+			}
+
+			if ( lease_duration > 0 && last_lease_renewal + lease_duration < time(NULL) ) {
+				shadow_rec *srec = mrec->shadowRec;
+				//mrec->needs_release_claim = false;
+				DelMrec( mrec );
+				jobExitCode( srec->job_id, JOB_SHOULD_REQUEUE );
+				srec->exit_already_handled = true;
+				daemonCore->Send_Signal( srec->pid, SIGKILL );
+			}
+		}
 	}
 	if( numsent ) { 
 		dprintf( D_PROTOCOL, "## 6. (Done sending alive messages to "
